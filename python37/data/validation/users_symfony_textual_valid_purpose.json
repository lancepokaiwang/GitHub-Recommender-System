{
    "408368": {
        "repos": [
            "A professional front-end template for building fast, robust, and adaptable web apps or sites.",
            "The Symfony2 PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "[Console] Escape exception message during the rendering of an exception",
            "Added @since for classes that were commited on very first commit and never changed \\o/",
            "Fixed weird php doc block",
            "Added @since php doc",
            "Changed all cast from (integer) to (int)",
            "[PhpDoc] Replaced 'int' by 'integer' (@var)",
            "[PhpDoc] Replaced 'boolean' by 'Boolean' (@param)",
            "[PhpDoc] Replaced 'boolean' by 'Boolean' (@var)",
            "[PhpDoc] Replaced 'boolean' by 'Boolean' (@return)",
            "[PhpDoc] Replaced 'boolean' by 'Boolean' (all other occurences)",
            "[PhpDoc] Replaced 'int' by 'integer' (@param)\n\nAnd also re-align some php doc block",
            "[PhpDoc] Replaced 'int' by 'integer' (@return)",
            "[Process] Added ProcessBuilder::addEnvironmentVariables",
            "Fixed php doc",
            "Added default roles options",
            "[Security] Added ldap",
            "Fixed tests",
            "[Console] Escape exception message during the rendering of an exception",
            "[Console] Added status code to CommandTester and ApplicationTester\n\nTheses classes are already statefull. They contain the input and the\noutput data. So we can safely add the last status code to the class.",
            "Updated CHANGELOG about verbosity method in Output",
            "[Console] Added more semantic commands to detect verbosity\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a",
            "[Console] Added Application::setTerminalDimensions to CHANGELOG",
            "[Console] Added a way to set terminal dimensions",
            "[HttpFoundation] Fixed NativeSessionStorage:regenerate when  does not exists",
            "[CssSelector] Added test to highlight a regression",
            "[Filesystem] Fixed doc block on Filesystem::rename\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -",
            "[HttpKernel] Fixed typo",
            "[Console] Added status code to CommandTester and ApplicationTester\n\nTheses classes are already statefull. They contain the input and the\noutput data. So we can safely add the last status code to the class.",
            "[Security] Removed unused var",
            "[DependencyInjection] Added some check before guessing similar parameters",
            "[DependencyInjection] Made tests more accurate",
            "[DependencyInjection] Add suggestion on ParameterNotFoundException",
            "[DependencyInjection] Add suggestion on ServiceNotFoundException",
            "[2.2] Fixed the ConstraintValidator",
            "Fixed typo with render_* function",
            "[EventDispatcher] Added GenericEvent::setSubject method\n\n```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n```\n\nIt is usefull if the observed subject is not an object\nand you don't want to give the subject by reference.",
            "[EventDispatcher] Fixed php doc of GenericEvent::__construct",
            "[Routing] Added more tests for default attributes",
            "[Routing] Added support for default attributes with default values of method params\n\nYou can configure default values likes this:\n\n``` php\n/**\n * @Route( /hi/{username} , name= hi )\n */\npublic function hiAction($username =  Bob )\n{\n    return new Response($username);\n}\n```",
            "[Routing] Added one more test fixture",
            "[Routing] Added more tests on AnnatationClassLoader",
            "[2.1][HttpFoundation] Fixed Php doc in Request::get",
            "[Process] Fixed bug introduced by 7bafc69f38a3512eb15aad506959a4e7be162e52.",
            "[Process][Tests] Prove process fail (Add more test case)",
            "[Process][Tests] Prove process fail",
            "[Process][Tests] Prove process fail (Add more test case)",
            "[Process][Tests] Prove process fail",
            "[Console] Fixed tests about message exception when command is not available",
            "[Console] Added tests for message exception when command is not available\n\nThese tests fail",
            "[EventDispatcher] Removed useless code",
            "[Console] Fixed CS",
            "[Console] Added abbreviation into search for bad command / namespace",
            "[Console] Added suggest on bad command name",
            "[Console] fixed CS according to PR comment",
            "[Console] Added namespace suggest on bad namespace name",
            "Made some small performance optimizations",
            "[Validator] Removed unnecessary check as symfony require php >= 5.3.3.",
            "[Console] Throw an exception if the command does not contain aliases\n\nIt can only happend if the constructor has been overridden",
            "[FrameworkBundle] Commands can be registered in the DIC"
        ],
        "issue_comments": [
            "@fabpot I re-open my previous against 2.2 branch. I added more tests. Is it enough ?\n",
            "@cordoval I re-push to re-launch CI\n",
            "Yes, it's the case. I did not think about that :(\n\nDo you have a use case for creating a command that is not available ?\n",
            "@hacfi It seems you copy/paste boiler plate code ? If it is the case, you could, in your Bundle extension or in a CompilerPass, check if doctrine is present, if it is the case, load the `commands_doctrine_orm.xml` file.\n",
            "The main goal of this PR was to be able to register command in the DIC.\n\nAnyway, I thought about your use case and I think I found a way to keep a full BC. I will implement it tomorrow ;) I keep you update ;)\n",
            "Ok, Not more BC break. I just some bonus, and the debbuging is easier now. ping @hacfi \n",
            "All commands in `Bundle/Command` will be available. This code is BC.\nAnd, of course, all server tagged with `console.command` will be also available.\n",
            "Should I open a PR agains 2.2, and another agaist 2.3  ?\n",
            "@Seldaek But there is already a blank line between `@param` and `@return` and `@throw`.\n",
            "To do that, I have to update my script and add some logic. Before that, I prefer to wait others' feedback if it doesn't bother you.\n",
            "My PR is ready for review.\n\nBut I have a question:\n\nFor exemple, the signature of https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php#L48 `:: showAction` changed in f946108d ; which is only in master. But the method was there before. So the commit is not in a tag, and so there is no `@since` PHP Doc.\n\nIMHO, I have to open a new PR for each  active  branches. What do you think ?\n\nThen, I added another commit d478e5e to fix weird php doc. This commit is very small and easy to review.\n",
            "@bschussek Any idea how to retrieve this king of information with git ?\n",
            "I think I have a more simple idea. I checkout 2.0, and run my script it. then checkout, 2.1 and run it, then 2.2 then 2.3, then master. as my script check if a `@since` value is already present, everything should be fine. What do you think ?\n\nBTW, my script ran in <2 minutes without the git part (i.e.: if I harcode the `$version`) and about 30 minutes with real git calls. So less I run git call, better my computer feels ;)\n",
            "I agree with you. But the issue here is about a change in a signature. So, normally, the signature can't change on a minor release, isn't it ?\n\nIf the signature can change, I can run my script for each version. The total time will **not** be `30 minutes * N version`. So I can try easily.\n",
            "Note: a42e2a6 is a very simple sed. IMHO, it's simple to check only the first commit.\n",
            "I fixed `boolean`. \nI changed type for `@var` and `@return`.\nI changed cast too, but I'm not sure for this one.\n",
            "I updated the last commit: `Changed all cast from (integer) to (int)`\n",
            "Related to #8292 and #8451\n",
            "IMHO, you should add a big warning: You can display only  configured  listener. i.e.: You can not display listener created during the run-time. I know this is obvious, but not for every body.\n",
            "@stof Fixed. Sorry for the delay. Is that ok ? \n",
            "@fabpot I think this PR is an easy one.\n",
            "@jeff In your sample you use `_locale` and `locale`. I guess this is only one var ?\n\nAbout the `!`: IMHO this char is a bit weird. Not very explicit. At the first read I think it was for  skip  the attribute as `!` is used for negative.\n\nI am globally +1 with the idea behind the PR.\n",
            "This issue could be fixed with https://github.com/symfony/symfony/issues/4498 ?\n",
            "For the reccord, here is the output before my patch: (see `[0m<p>`)\n\n```\n\n\n\u001b[37;41m                    \u001b[0m\n\u001b[37;41m  [Exception]       \u001b[0m\n\u001b[37;41m  Second exception  \u001b[0m\n\u001b[37;41m                    \u001b[0m\n\n\n\n\n\u001b[37;41m                                       \u001b[0m\n\u001b[37;41m  [Exception]                          \u001b[0m\n\u001b[37;41m  First exception \u001b[0m<p>this is html</p>  \n\u001b[37;41m                                       \u001b[0m\n\n\n\u001b[32mfoo3:bar\u001b[0m\n\n\n```\n",
            "`ag 'Exception(.*<.*>.*)' src/` returns some matches:\n\n```\nsrc/Symfony/Component/Routing/Loader/XmlFileLoader.php\nsrc/Symfony/Component/Validator/PropertyMetadataContainerInterface.php\nsrc/Symfony/Component/Console/Tests/Fixtures/Foo3Command.php\nsrc/Symfony/Component/Console/Application.php\nsrc/Symfony/Bundle/TwigBundle/Resources/config/twig.xml\nsrc/Symfony/Bundle/TwigBundle/Resources/views/Exception/exception.html.twig\nsrc/Symfony/Bundle/WebProfilerBundle/Resources/config/profiler.xml\nsrc/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/exception.html.twig\nsrc/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/logger.html.twig\nsrc/Symfony/Bundle/FrameworkBundle/Resources/config/collectors.xml\nsrc/Symfony/Bundle/SecurityBundle/Resources/config/security_listeners.xml\n```\n\nThe only one which can be  interesting  is `src/Symfony/Component/Console/Application.php`\n\n``` php\nif (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n    $output->writeln('<comment>Exception trace:</comment>');\n    // exception related properties\n    $trace = $e->getTrace();\n```\n\nBut it is not ;)\n",
            "IMHO, it's merge-able. \n",
            "What is a valid tag ? something like `<comment> foo bar </comment>` ?\n",
            "fixed (ping @fabpot )\n",
            "More info:\n\n```\nphp > echo json_encode(array('phone_number' => '0033123456789'), JSON_NUMERIC_CHECK);\n{ phone_number :33123456789}\nphp > echo json_encode(array('phone_number' => '0033123456789'));\n{ phone_number : 0033123456789 }\n```\n",
            "@jfsimon Thanks. you are the best ;)\n",
            "Thanks @jfsimon \n",
            "@esgy This PR was reverted by d3f16d0 ; see #8477 \n",
            "Ok, thanks. So now, This is not easy to test both xml and html.\n\nIn functional test, since the crawler is instanciated by the de browser kit (which know the content-type), Can we imagine the browser kit call for us `disableHtmlExtension` or `enableHtmlExtension`\n",
            "It is not really a new feature :-P\n",
            "Ok, you got me. \n\n@fabpot Any chance this could be merge in 2.3 ? :crying_cat_face:\n",
            "@pborreli I **always** do that mistake :( ; Fixed\n",
            "re-open agains master at #8023\n",
            "It's really useful do add some parameters. It's already done in console component, twig ...\n",
            "`getRawResponse`. For me \n",
            ":+1: for me. It avoids to re-wrap manually.\n",
            "Do you have any benchmark on a  classic  Symfony2 application ? (without `sleep` ;) ).\n",
            "April 1 is in 8 days ...\n",
            "(I repost my comment, github hide it for now)\n\nIt could be useful to be able to not throw the exception in `Application::doRunCommand` ; like in the `HttpKernel`.\n\nUse case : you have a long running process like a rabbitmq consumer. With this feature, we could delegate the exception process into a dedicated event listener and make the  raw  command cleaner.\n",
            "When validation calls `validate` a notice is throwed saying : \n dont use is `isvalid` but use validate  ... It's a bit weird, isn't it ?\n",
            "Ok. Git it ;) Thanks.\n",
            "The main goal of the event dispacher is to allow / permit the modification of the subject :)\n\nBut, nice tip for the ArrayObject. Thanks.\n",
            "@pborreli Fixed\n",
            "@stof Sorry, i fixed that.\n",
            "@romainneutron I think it's ok now.\n",
            "BTW, this test fails on PHP 5.3.15\n",
            "I added more tests case , and it always fail.\nI think it's a bug.\n\nI found this bug in Sismo repo https://github.com/fabpot/Sismo/blob/master/tests/Sismo/Tests/GithubProjectTest.php#L51 : When I lunch the test suite, Sismo tests fails because `git remote add ...` is not executed.\nSo I tried to reproduce and to isolate this  bug .\n\nNote: 86d9dea is tested on debian 6 and php 5.3.15\n\n```\n`1) Symfony\\Component\\Process\\Tests\\SigchildDisabledProcessTest::testChainedCommandsOutput with data set #0 ('11', ';', '1')\nFailed asserting that '1' matches expected '11'.\n\n/var/www/dev/labs/symfony/src/Symfony/Component/Process/Tests/AbstractProcessTest.php:99\n\n2) Symfony\\Component\\Process\\Tests\\SigchildDisabledProcessTest::testChainedCommandsOutput with data set #1 ('22', '&&', '2')\nFailed asserting that '2' matches expected '22'.\n\n/var/www/dev/labs/symfony/src/Symfony/Component/Process/Tests/AbstractProcessTest.php:99\n\n3) Symfony\\Component\\Process\\Tests\\SimpleProcessTest::testChainedCommandsOutput with data set #0 ('11', ';', '1')\nFailed asserting that '1' matches expected '11'.\n\n/var/www/dev/labs/symfony/src/Symfony/Component/Process/Tests/AbstractProcessTest.php:99\n\n4) Symfony\\Component\\Process\\Tests\\SimpleProcessTest::testChainedCommandsOutput with data set #1 ('22', '&&', '2')\nFailed asserting that '2' matches expected '22'.\n\n/var/www/dev/labs/symfony/src/Symfony/Component/Process/Tests/AbstractProcessTest.php:99\n```\n",
            "@romainneutron But, how can sismo test pass ? It is impossible that @fabpot  push failed tests ! ;)\n",
            "BTW, my sample is not related to `echo` (echo is a shell builtin). \n\n``` php\n$process = new Process( git status && git status );\n```\n\nhave the same problem. \n",
            "This PR is related to #5398\nBefore this PR, tests passed\n\n**EDIT** : I was wrong, the changeless happend in 7bafc69 ; Related PR : #5543\n",
            "Oh, sorry, i pointed a wrong PR, the changeless happend in 7bafc69 ; Related PR : #5543\n\n@romainneutron I agree with you about `bash -c  ... `\n",
            "And, if we wrap exec with parenthesis ?\n\n``` php\n$this->commandline = 'exec (' . $this->commandline . ')';\n```\n\n**EDIT** : does not work\n",
            "Auto-answer : It does not work.\n",
            "@stof What do you think about this PR,  Should it be merged  ? If yes, into master, 2.1, 2.0 ?\n",
            "OK, So i sould close this PR right now, and open it again against 2.1 branch ?\n",
            "@travisbot You failed, not me !\n",
            "I opened a new PR againt 2.0 branch.\nSee #5020\n",
            ":+1:\n",
            "Why dont you do :\n\n```\n'validation_constraint' => new Symfony\\Component\\Validator\\Constraints\\Collection(array(\n  new Assert\\NotBlank(),\n  new Assert\\Email(),\n));\n```\n\n?\n",
            "ok, i understand.\n\nBut you add some fields with the builder ? if yes, just type the same key ?\n",
            "@lsmith77 : Done. See : https://github.com/FriendsOfSymfony/FOSRest/pull/7 :)\n",
            "Sorry, I did not see 1246503\nBut my question stays open :)\n",
            "Yes.\nI will work on it asap\n",
            "I added code for namespace\n\n@henrikbjorn I did the same logic as in twig.\n",
            "Note : Travis tests failed : http://travis-ci.org/#!/lyrixx/symfony/builds/663216\n`before_script: Execution of 'php vendors.php' took longer than 600 seconds and was terminated. \nConsider rewriting your stuff in AssemblyScript, we've heard it handles Web Scale\u2122`\n\nBut tests are OK on my laptop\n",
            "Yes, i guessed it :-) that's why i notice it work on my laptop \n",
            "I added code to manage abbreviations. But I'm not sure what you are expecting. Can you try it and give me some feedback ?\n\nP.S. : Travis failed again, but tests pass on my laptop.\n",
            "HTTPie is awesome! Very good job here :)\n",
            "Yes, it's the case. I did not think about that :(\n\nDo you have a use case for creating a command that is not available ?\n",
            "@hacfi It seems you copy/paste boiler plate code ? If it is the case, you could, in your Bundle extension or in a CompilerPass, check if doctrine is present, if it is the case, load the `commands_doctrine_orm.xml` file.\n",
            "The main goal of this PR was to be able to register command in the DIC.\n\nAnyway, I thought about your use case and I think I found a way to keep a full BC. I will implement it tomorrow ;) I keep you update ;)\n",
            "Ok, Not more BC break. I just some bonus, and the debbuging is easier now. ping @hacfi \n",
            "All commands in `Bundle/Command` will be available. This code is BC.\nAnd, of course, all server tagged with `console.command` will be also available.\n",
            "Should I open a PR agains 2.2, and another agaist 2.3  ?\n",
            "@Seldaek But there is already a blank line between `@param` and `@return` and `@throw`.\n",
            "To do that, I have to update my script and add some logic. Before that, I prefer to wait others' feedback if it doesn't bother you.\n",
            "My PR is ready for review.\n\nBut I have a question:\n\nFor exemple, the signature of https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/TwigBundle/Controller/ExceptionController.php#L48 `:: showAction` changed in f946108d ; which is only in master. But the method was there before. So the commit is not in a tag, and so there is no `@since` PHP Doc.\n\nIMHO, I have to open a new PR for each  active  branches. What do you think ?\n\nThen, I added another commit d478e5e to fix weird php doc. This commit is very small and easy to review.\n",
            "@bschussek Any idea how to retrieve this king of information with git ?\n",
            "I think I have a more simple idea. I checkout 2.0, and run my script it. then checkout, 2.1 and run it, then 2.2 then 2.3, then master. as my script check if a `@since` value is already present, everything should be fine. What do you think ?\n\nBTW, my script ran in <2 minutes without the git part (i.e.: if I harcode the `$version`) and about 30 minutes with real git calls. So less I run git call, better my computer feels ;)\n",
            "I agree with you. But the issue here is about a change in a signature. So, normally, the signature can't change on a minor release, isn't it ?\n\nIf the signature can change, I can run my script for each version. The total time will **not** be `30 minutes * N version`. So I can try easily.\n",
            "Thanks for the reminder ;)\n\nIIRC, I never call `Form::setData()` by hand.\n\nI like your new design ;) But did you plan to rename all `*_SET_DATA` event name ?\n",
            "I think There is a simple way to automatize that with https://github.com/nikic/PHP-Parser + script shell from @bschussek \n",
            "Huhu. It's [the week end](http://isitweekendyet.com/)\n",
            "If did a little script to tag every method/class.\n- Should I tag all methods (protected and private) ? \n- I excluded Tests, is that ok ?\n",
            "BTW, I added `-C` and `-M` to my git blame.\n\n> ```\n>    -M|<num>|                                                                                                                                      \n>        Detect moved or copied lines within a file. When a commit moves or copies a block of lines (e.g. the original file has A and then B,       \n>        and the commit changes it to B and then A), the traditional blame algorithm notices only half of the movement and typically blames the     \n>        lines that were moved up (i.e. B) to the parent and assigns blame to the lines that were moved down (i.e. A) to the child commit. With     \n>        this option, both groups of lines are blamed on the parent by running extra passes of inspection.                                          \n> \n>       <num> is optional but it is the lower bound on the number of alphanumeric characters that git must detect as moving/copying within a       \n>        file for it to associate those lines with the parent commit. The default value is 20.                                                      \n> \n>   -C|<num>|                                                                                                                                      \n>        In addition to -M, detect lines moved or copied from other files that were modified in the same commit. This is useful when you            \n>        reorganize your program and move code around across files. When this option is given twice, the command additionally looks for copies      \n>        from other files in the commit that creates the file. When this option is given three times, the command additionally looks for copies     \n>        from other files in any commit.                                                                                                            \n> \n>       <num> is optional but it is the lower bound on the number of alphanumeric characters that git must detect as moving/copying between        \n>        files for it to associate those lines with the parent commit. And the default value is 40. If there are more than one -C options given,    \n>        the <num> argument of the last -C will take effect.  \n> ```\n",
            "Note: a42e2a6 is a very simple sed. IMHO, it's simple to check only the first commit.\n",
            "I fixed `boolean`. \nI changed type for `@var` and `@return`.\nI changed cast too, but I'm not sure for this one.\n",
            "I updated the last commit: `Changed all cast from (integer) to (int)`\n",
            "Related to #8292 and #8451\n",
            "The name of package of standart edition is `symfony/framework-standard-edition` https://packagist.org/packages/symfony/framework-standard-edition.\n\nAnd there is a drawback: The api is not redirected => `composer install` does not work any more since the api is used by composer to download a package. (work only if you use `--prefer-source`\n",
            "@bschussek Yes, We got some issue during deploy because of this :( \nYou can see it with https://api.github.com/repos/sensio/SensioGeneratorBundle vs https://api.github.com/repos/sensiolabs/SensioGeneratorBundle\n",
            "IMHO, you should add a big warning: You can display only  configured  listener. i.e.: You can not display listener created during the run-time. I know this is obvious, but not for every body.\n",
            "@stof Fixed. Sorry for the delay. Is that ok ? \n",
            "@fabpot I think this PR is an easy one.\n",
            "Edit:: No need to `merge`  dic  command + parent since `parent::registerCommands` register commands in the application.\n",
            "Note: I did it in my application and there is lot of step where a new comers can fail:\n- Since we call `parent::registerCommands`, commands that are registered in the dic should not finished by `Command`\n- Lot of stuff are done during the `Command::__construct`. So we should think to call `parent::__construct()`\n- If something bad happened, debugging is not easy.\n",
            "@jchampion Yes. But I have to create this service ? How ? I extends the logger services in DIC configuration ?\nBut, Monolog is not the only issue here. Like the controller as a service, people may want to inject dependency into console instead of fetch them.\n",
            "Yep. But it's a bit weird to have to create a proxy service.\nBut again, **monolog is not the main issue**\n",
            "@jchampion This is the title of the issue ;)\n\n@Tobion The proxy example was for a custom monolog instance. (with a custom channel) \n",
            "Yes, command are stateless sorry.\n\nI wanted to say  command should not be in the container , for the same\nreason as a controller should not be in the container.\nBut, yes, sometimes it is usefull ;)\n\nSo, as their are many +1, can I work on this PR ? /cc @fabpot ?\n",
            "@lsmith77 Since at runtime is it not possible to retrieve tagged services, the solution is to store in the DIC only service ids. So the DIC will not grow that much. More over, lot of command  generate:...  are only available in `dev` env\n",
            "@cordoval IMHO, this is a bit overkill, add some complexity, and add a new dependency on a project with a different license (see this [commit](https://github.com/symfony/symfony-standard/commit/d84850acafb291bd3ae15e87c6b5aa389fe810cf) in the se)\n",
            "Hi. I updated the RFC with a new use case.\n",
            "Thanks you.\n\nYes:\n\n``` php\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Process\\ProcessBuilder;\n\n$request = Request::createFromGlobals();\n\n$processBuilder = ProcessBuilder::create(array('a_magic_command'));\n$processBuilder->setInput($request->getContent()); // I would like to be able to use getContent(true)\n$process = $processBuilder->getProcess();\n\n$process->run();\n```\n",
            "the implementation should be easy. It will be the same as `AllValidator`\n",
            "@stof  Yes of course it is not the same ;)\n",
            "In fact, we can think this is usefull, but in this state, this is not so usefull.\nThe key are the formName, and generally, we want the label. so we need the form option, and more over, we need the translator. :(\n\n``` php\nprivate function getErrorsAsArray(\\Symfony\\Component\\Form\\Form $form)\n{\n    $errors = array();\n\n    foreach ($form->getErrors() as $error) {\n        $errors[] = $error->getMessage();\n    }\n\n    foreach ($form->all() as $child) {\n        if ($err = $this->getErrorsAsArray($child)) {\n            $options = $child->getConfig()->getOptions();\n            $key = $this->get('translator')->trans($options['label'] ?: '', array(), $options['translation_domain'] ?: 'messages');\n            $errors[$key] = $err;\n        }\n    }\n\n    return $errors;\n}\n```\n",
            "Why ? I really depends on your use case.\nMy use case is to show errors on the front (HTML). The end user does not care about the FieldName. Isn't it ?\n",
            "can you update your issue title by adding `[RFC]` ? thanks.\n\nIMHO, this is could be a good idea.\n",
            ":+1: with this rename.\n\nWhat about `create_data` ?\n",
            "@jeff In your sample you use `_locale` and `locale`. I guess this is only one var ?\n\nAbout the `!`: IMHO this char is a bit weird. Not very explicit. At the first read I think it was for  skip  the attribute as `!` is used for negative.\n\nI am globally +1 with the idea behind the PR.\n",
            "At this point we have 3 issues : \n- (A) The username / password is stored in the session. I have to do that to make `UserProvider::refreshUser` works.\n- (B) The roles are hardcoded.\n- (C) Some factories are duplicated\n\n(A) I don't know how to avoid that.\n(B) We could add to `LdapUserProviderInterface` a new method : `getRoles`. This method could fetch into the ldap some information about roles. What do you think ?\n",
            "I rebase commit against master.\n- (A) I remove the password from the session.\n  It will be ok if issue #4498 is fixed.\n- (B) Still here (role are hardcoded)\n- (C) Still here (factories duplication)\n",
            "@beberlei Fixed\n\n@asm89 Yes, it can be in the core : It can be usefull in silex, drupal ... And yes, it could be great to get oauth in core. BTW spring already embed all theses providers : https://github.com/SpringSource/spring-security\n",
            "@beberlei I can not find this function. php.net is down from here :( http://prototype.php.net/manual-lookup.php?pattern=ldap_esacpe&lang=en&scope=404quickref\n",
            "@sstok I tried :) http://fr.php.net/ldap_escape ... php.net is really unstable right now :(\n",
            "I rebased against master, and squashed my commits.\n",
            "I will work on this issue during this summer.\n",
            "see https://github.com/symfony/symfony/pull/5189#issuecomment-7547941 and my next comment.\n",
            "@amenophis no sorry. But someone took this code and created a bundle. But I cant remember who it was.\n",
            "At this point we have 3 issues : \n- (A) The username / password is stored in the session. I have to do that to make `UserProvider::refreshUser` works.\n- (B) The roles are hardcoded.\n- (C) Some factories are duplicated\n\n(A) I don't know how to avoid that.\n(B) We could add to `LdapUserProviderInterface` a new method : `getRoles`. This method could fetch into the ldap some information about roles. What do you think ?\n",
            "I rebase commit against master.\n- (A) I remove the password from the session.\n  It will be ok if issue #4498 is fixed.\n- (B) Still here (role are hardcoded)\n- (C) Still here (factories duplication)\n",
            "@beberlei Fixed\n\n@asm89 Yes, it can be in the core : It can be usefull in silex, drupal ... And yes, it could be great to get oauth in core. BTW spring already embed all theses providers : https://github.com/SpringSource/spring-security\n",
            "@beberlei I can not find this function. php.net is down from here :( http://prototype.php.net/manual-lookup.php?pattern=ldap_esacpe&lang=en&scope=404quickref\n",
            "@sstok I tried :) http://fr.php.net/ldap_escape ... php.net is really unstable right now :(\n",
            "I rebased against master, and squashed my commits.\n",
            "I will work on this issue during this summer.\n",
            "see https://github.com/symfony/symfony/pull/5189#issuecomment-7547941 and my next comment.\n",
            "@amenophis no sorry. But someone took this code and created a bundle. But I cant remember who it was.\n",
            "No, this is not working.\nI tried something like this:\n\n``` php\npublic function setDefaultOptions(OptionsResolverInterface $resolver)\n{\n    $resolver->setDefaults(array(\n        'data_class'        => '...\\Entity\\Branch',\n        // We need to do that to laod default values from Branch entity\n        'data' => function(Options $options) {\n            $class = $options['data_class'];\n            return new $class;\n        },\n    ));\n}\n```\n\nIt work fine with a  new  form, but not with an  edit  form, because real value a replaced by new value.\n",
            "This issue could be fixed with https://github.com/symfony/symfony/issues/4498 ?\n",
            "Hello.\n\nI agree with first @Nyorai's solution :  Introduce a getUserProviderKey into UserInterface so each user instance knows exactly where it came from. \n\nOf course, Add this behavior will lead to break the BC, But it will fix this issue.\n",
            "It's A for me :)\n",
            "I have the same issue...\n\nHave to add manually the field is a little bit boring. Add a flag could be easier.\n",
            "I agree with @lsmith77 and @weaverryan.\n\nBTW, the milestone is not valid anymore.\n",
            "IMHO, this not an real issue. The finder is a not a service. And the Finder has a state. So it seems logical to create a new finder for each search. We can see the Finder like a DoctrineQueryBuilder.\n\nBut another fix could be to reset the finder after the iteration. But this is a BIG BC breaks. and could lead to some behaviour . \n",
            "For the reccord, here is the output before my patch: (see `[0m<p>`)\n\n```\n\n\n\u001b[37;41m                    \u001b[0m\n\u001b[37;41m  [Exception]       \u001b[0m\n\u001b[37;41m  Second exception  \u001b[0m\n\u001b[37;41m                    \u001b[0m\n\n\n\n\n\u001b[37;41m                                       \u001b[0m\n\u001b[37;41m  [Exception]                          \u001b[0m\n\u001b[37;41m  First exception \u001b[0m<p>this is html</p>  \n\u001b[37;41m                                       \u001b[0m\n\n\n\u001b[32mfoo3:bar\u001b[0m\n\n\n```\n",
            "`ag 'Exception(.*<.*>.*)' src/` returns some matches:\n\n```\nsrc/Symfony/Component/Routing/Loader/XmlFileLoader.php\nsrc/Symfony/Component/Validator/PropertyMetadataContainerInterface.php\nsrc/Symfony/Component/Console/Tests/Fixtures/Foo3Command.php\nsrc/Symfony/Component/Console/Application.php\nsrc/Symfony/Bundle/TwigBundle/Resources/config/twig.xml\nsrc/Symfony/Bundle/TwigBundle/Resources/views/Exception/exception.html.twig\nsrc/Symfony/Bundle/WebProfilerBundle/Resources/config/profiler.xml\nsrc/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/exception.html.twig\nsrc/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/logger.html.twig\nsrc/Symfony/Bundle/FrameworkBundle/Resources/config/collectors.xml\nsrc/Symfony/Bundle/SecurityBundle/Resources/config/security_listeners.xml\n```\n\nThe only one which can be  interesting  is `src/Symfony/Component/Console/Application.php`\n\n``` php\nif (OutputInterface::VERBOSITY_VERBOSE <= $output->getVerbosity()) {\n    $output->writeln('<comment>Exception trace:</comment>');\n    // exception related properties\n    $trace = $e->getTrace();\n```\n\nBut it is not ;)\n",
            "IMHO, it's merge-able. \n",
            "What is a valid tag ? something like `<comment> foo bar </comment>` ?\n",
            "the 2.1 branch has reached the EOL data. Not patch are accepted against this branch anymore.\n",
            "+1\n",
            "You broke tests as you changed type of `FlattenException`\n",
            "Yep. Already the case: \nhttps://github.com/symfony/symfony/blob/bcd7ab1eae997ab85aafff845f6f503c87bf4b09/src/Symfony/Component/HttpKernel/composer.json#L21\n",
            "I got the issue: `Warning: Unexpected character in input:  '\\' (ASCII=92) state=1` (https://bugs.php.net/bug.php?id=25725)\n\nBut the php code was totally valid !\n",
            "reopen against 2.2 at #8721\n",
            "it is very weird, but after my lunch, everything worked ! Si i closed it.\n\nBut finally, i decided to not used gitlab.\n",
            "Can you copy paste your code from you controller ?\nAnd can you copy paste the full exception message. Because in this one, you could have some suggestion.\n\nI did a test, and it works from here.\n\nBut you might added a space in the service name:\n\n`You have requested a non-existent service  translator  . Did you mean this:  translator ?`\n",
            "Are you sure you are running symfony 2.3 ? can you try to remove your cache, and then run `composer script post-install-cmd` ? thanks.\n",
            "Yes and no. When you ran composer install / update, a command (` Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap `) will generate the bootstrap (`app/bootstrap.php.cache`). This is a kind of in-lining of  all  core symfony files. So, looks like the bootstrap file was still in symfony 2.2 and other file (in `vendor/`) was en 2.3.\n\nNot sure I was very clear... \n",
            "`php console cache:warmup --env=dev` does not generate `app/bootstrap.php.cache`. It warms the cache like the routing, the DIC ...\n",
            "`php console cache:warmup --env=dev` generate application cache (so you need to rebuild cache for each deploy (in prod))\n\n`Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap` generate the bootstrap. (only needed when upgrade symfony => see https://github.com/sensiolabs/SensioDistributionBundle/blob/master/Composer/ScriptHandler.php#L127-L177)\n",
            "Ok, I will work on this.\n",
            "IMHO, Your application/console should do the same stuff If the end user does not provide the option (because there is a default value) of If the end user provide the default value for the option.\n\nSymfony commands already do that:\n`app/console  help --help --format= txt ` and `app/console  help --help` have the same behavior.\n",
            "I don't understand the logic here. May be you should not set a default value ? \n\nCan you explain why the default value is not a **real** default value in your application ?\n",
            "Yes, totally +1 with 2 options. It's really more semantic and clean.\nAnd it's easier to understand for the the next dev and for the end user when he will type `app/console command --help`\n",
            "Does StreamedMediaInterface have a cyclic reference ?\nIIRC, the symfony/serializer does not handle cyclic references.\n\nyou may try [jms/serializer](https://packagist.org/packages/jms/serializer)\n",
            "Which version of ZendGuard + php you are using ?\n\nI try to reproduce your bug but I can't, everything work as expected\n\n```\n>[~/dev/labs/se] php -v\nPHP 5.4.12-1~dotdeb.1 (cli) (built: Mar  1 2013 11:27:36) \nCopyright (c) 1997-2013 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2013 Zend Technologies\n    with Xdebug v2.2.1, Copyright (c) 2002-2012, by Derick Rethans\n    with Zend Guard Loader v3.3, Copyright (c) 1998-2013, by Zend Technologies\n>[~/dev/labs/se] php -m | grep Zend\nZend Guard Loader\n[Zend Modules]\nZend Guard Loader\n>[~/dev/labs/se] php web/app.php \n<!DOCTYPE html>\n<html>\n    <head>\n        <meta http-equiv= Content-Type  content= text/html; charset=utf-8  />\n        <title>An Error Occurred: Not Found</title>\n    </head>\n    <body>\n        <h1>Oops! An Error Occurred</h1>\n        <h2>The server returned a  404 Not Found .</h2>\n\n        <div>\n            Something is broken. Please e-mail us at [email] and let us know\n            what you were doing when this error occurred. We will fix it as soon\n            as possible. Sorry for any inconvenience caused.\n        </div>\n    </body>\n</html>\n```\n\nAnd can you try this [patch](https://github.com/lyrixx/symfony/commit/5c4683dc67bed1fa18881bb96e6a3771aa6778e3) ?\n\n``` diff\ndiff --git a/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeSessionHandler.php b/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeSessionHandler.php\nindex 1260ad0..2256662 100644\n--- a/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeSessionHandler.php\n+++ b/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeSessionHandler.php\n@@ -17,7 +17,7 @@\n  * @see http://php.net/sessionhandler\n  */\n\n-if (version_compare(phpversion(), '5.4.0', '>=')) {\n+if (version_compare(phpversion(), '5.4.0', '>=') && !extension_loaded('Zend Guard Loader')) {\n     class NativeSessionHandler extends \\SessionHandler {}\n } else {\n     class NativeSessionHandler {}\n```\n\nEDIT: I do not understand how php can throw an error in a CLI env as you mentionned in the zend forum; But I also tried with a webserver (nginx) to access the `/demo/secured/hello/World` url which trigger a `session_start`\n",
            "Ok, Can you test with my patch while I search deeper ? Thanks.\n\nDo you know if I can download and install zend server easily for free ?\n",
            "BTW I think the namespace should not be present in the Helper. It's too much specific to Help and List command\n(https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DescriptorHelper.php#L59)\n",
            "As you can see, on https://github.com/sensiolabs/insight/blob/master/Cli/Helper/DescriptorHelper.php#L36-L50, the describe does not need the namespace. It's usefull only in `CommandDescriptor`. IMHO, the namespace should be give via an option.\n",
            "I did not miss the right repo. I show you a sample where the namespace is useless. \n\nAnyway, This is not the main topic.\n",
            "ping @jfsimon \n",
            "I don't think so ;) Thanks for the upcomming PR ;)\n",
            "Closes as #8451 is open\n",
            "ah :( Do you have any work around  ?\n",
            "I will upgrade on 2.3. But this is a huge website, and we are a bit busy right now.\n\nThanks for the tips.\n",
            "@sprain  What is your use-case ? \n\n@jfsimon as discribe in the [doc](http://symfony.com/doc/current/components/routing/introduction.html#defining-routes) an option value can be an array, ex:  An array of methods .\n\nMay be symfony can do an `array_repalace_recursive` instead of an `array_replace`\n",
            "Thank you for your very good / fast support.\n\nI read #7146 ; but I did not really understand this issue.\n\nI do not understand something else: in `$validator->validate($branch, new GroupSequence(array('Preview', 'Branch', 'Step2'));` The `Branch` means all Validators in the `DEFAULT` group ?\nAnd If I do that, All validators which are not in a group will be triggered ? ( I do not want to triggered them)\nAnd will it working with annotation with annotation in POPO ?\n\nAnd my last question, have you a ETA for this feature ? (I really don't want to push you, really)\n\nThanks, again\n",
            "Can we re-open the issue ? The unit test in pr #7789 does not reflect the real word. I added some tests: https://github.com/lyrixx/symfony-standard/blob/sf-debug-form-false/src/Acme/DemoBundle/Tests/Controller/DebugControllerTest.php#L37-L77 ; I used guzzle and buzz.\n\nResults:\n\n```\n1) Acme\\DemoBundle\\Tests\\Controller\\DebugControllerTest::testFormWithHttpTransportWithBuzz with data set #1 ('no', false)\nFailed asserting that two strings are identical.\n--- Expected\n+++ Actual\n@@ @@\n-no\n+yes\n\n2) Acme\\DemoBundle\\Tests\\Controller\\DebugControllerTest::testFormWithHttpTransportWithGuzzle with data set #1 ('no', false)\nFailed asserting that two strings are identical.\n--- Expected\n+++ Actual\n@@ @@\n-no\n+yes\n\n```\n\nSo I dig a little: when you submit `false` with Guzzle: `$_POST['value'] === ''` and with buzz:  `$_POST['value'] === '0'`. BTW, I use nginx 1.2.6 and php 5.4.16.\n\nping @bschussek \n",
            "Or we can add another data-transformer to checkbox that convert `'0'` or `''` to `false` ?\n",
            "Yes, you are all right.\n\nBut can we provide a small data transformer: `BooleanToStringTransformerABitSpecial` ;) to could do the job.\nOf course this data transformer will not be actived by default. It will be the developer responsibility to enable it for only one element. This could be documented in a cookbook entry.\n",
            "What about php 5.3 ?\n",
            "@dlsniper Ok. I just asked if php 5.3 has the same (speed) behavior than php 5.4.\n",
            "@stof Thanks. But why do you want to throw an exception ?\n",
            "@stof I got the main point. But the real question is :  Why is it not supported ? \n",
            "@stof. OK. I got it. Thanks\n",
            "Hello.\n\nYou should save the session\n\n``` php\n$token = new UsernamePasswordToken('admin', 'adminpass', 'secured_area', array( ROLE_ADMIN ));\n$session = $client->getContainer()->get('session');\n$session->set('_security_' . $providerKey, serialize($token));\n$session->save(); // You miss this line\n```\n",
            "I got the same issue with the Form component.\n\n`Forms::createFormFactory()->createBuilder();` will throw: `FieldType is deprecated since version 2.1 and will be removed in 2.3.`\n\nYou can [see it in action](https://github.com/sensiolabs/connect/blob/master/tests/SensioLabs/Connect/Bridge/Symfony/Form/ErrorTranslatorTest.php#L18)\n",
            "It's only a default value, not a requirement.\nIt's just a shortcut to avoid  `defaults={ name = bob }`\n",
            "it is the default php behavior. It's a default value for a variable...\n",
            "@fabpot Yes i will as soon as possible.\n",
            "I rebase and amend my commit. (I changed doc in commit message to be less confusing) \n\nI will try to add tests.\nBut for now, `AnnotationClassLoader::load` is not really tested, and `AnnotationClassLoader::addRoute` is absolutely not tested. So I think I should add tests for these methods ? And then add tests for my patch.\nI will try tomorrow.\n",
            "@fabpot I added new tests. I tried to made very atomic commits.\n",
            "@andremaha Hello, can you run `echo -n 1 && echo -n 1` from you cli and paste output here, like this : \n\n```\n>sensio@gpineau2[~/dev/labs/symfony](master) echo -n 1 && echo -n 1\n11>sensio@gpineau2[~/dev/labs/symfony](master)\n```\n",
            "@stof Sorry, i don't know where is the issue.\n\nI use phpunit 3.6, but IMO it is not related.\n",
            "Hello @smottt \n\nCould you provide more information, like symfony version ?\n\nthanks.\n",
            "Yes, Do you use apache / nginx / something else ? Do you use varnish / squid / something else ?\n\nAre you sure to hit your application with another host ?\n\nCan you add a `debug.php` file in the `web/` folder with the following content and  you copy / paste the output \n\n``` php\nvar_dump($_SERVER);\nvar_dump($_ENV);\n```\n",
            "@fabpot @eriksencosta :\n\nTests are always broken on my laptop.\n\nBefore the merge : \n\n```\n\n1) Symfony\\Component\\Locale\\Tests\\Stub\\StubIntlDateFormatterTest::testFormatWithDefaultTimezoneIntl\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'1970-01-01 00:00:00'\n+'1970-01-01 01:00:00'\n```\n\nAfter the merge :\n\n```\n\nThere were 4 failures:\n\n1) Symfony\\Component\\Locale\\Tests\\Stub\\StubIntlDateFormatterTest::testFormatWithDefaultTimezoneIntl\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'1970-01-01 00:00:00'\n+'1970-01-01 01:00:00'\n\n/home/gregoire/dev/symfony/src/Symfony/Component/Locale/Tests/Stub/StubIntlDateFormatterTest.php:481\n\n2) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleCostaRicanColonsRoundingStub with data set #0 (100, 'CRC', '\u20a1', '%s10\n0')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'\u20a1100'\n+'CRC100'\n\n/home/gregoire/dev/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:164\n\n3) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleCostaRicanColonsRoundingStub with data set #1 (-100, 'CRC', '\u20a1', '(%s100)')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'(\u20a1100)'\n+'(CRC100)'\n\n/home/gregoire/dev/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:164\n\n4) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleCostaRicanColonsRoundingStub with data set #2 (1000.12, 'CRC', '\u20a1', '%s1,000')\nFailed asserting that two strings are equal.\n\n--- Expected\n+++ Actual\n@@ @@\n-'\u20a11,000'\n+'CRC1,000'\n```\n\nSo i follow the README : \n- I installed `libicu-dev`\n- I run `php src/Symfony/Component/Locale/Resources/data/build-data.php`\n- I exported `export USE_INTL_ICU_DATA_VERSION=true`\n\nAnd now : \n\n```\n\n1) Symfony\\Component\\Locale\\Tests\\Stub\\StubIntlDateFormatterTest::testFormatWithDefaultTimezoneIntl\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'1970-01-01 00:00:00'\n+'1970-01-01 01:00:00'\n```\n\nIf you need more info about my laptop, you can read my previous issue #5082\n",
            "May be we should re-open the issue associated with this PR ? is it possible ?\nping @fabpot \n",
            "I tried to isolate the code in this gist : https://gist.github.com/055f749ecaf2b4bc53d4\nI dump the output of the test.php a 3 diffrents commit of form component  ( symfony/form@89d77c3 and symfony/form@9a74ea1 and symfony/form@9e763cd)\n\nThis is very weird.\n\nWhat do you think about it ?\n",
            "Thanks, the mistake was in silex.\n",
            "Oh  nice:) thanks (again). I never think to do this ;) \nBut I read the code wich manage that, shame on me\n",
            "Why dont you do :\n\n```\n'validation_constraint' => new Symfony\\Component\\Validator\\Constraints\\Collection(array(\n  new Assert\\NotBlank(),\n  new Assert\\Email(),\n));\n```\n\n?\n",
            "ok, i understand.\n\nBut you add some fields with the builder ? if yes, just type the same key ?\n",
            "Bench with php 5.4.5\nhttps://gist.github.com/3231244\n",
            ":+1: with @stof. There is no benefits to wait the windows adapter.\n",
            "@Tobion it is very very hard, for the end user, to find this bug. So here, it is\nonly a safe guard. Here it is not about var initialization. It's about\noverriding the constructor. I just use a hack to determine if the end user \nforgot to call the parent.\n",
            "What feature ? \nAbout  it will break suddenly : there is tests ;)\n",
            "@fabpot rebased.\n"
        ],
        "issues": [
            {
                "title": "[Console] Escape exception message during the rendering of an exception",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nreopen #8853 against 2.2 branch\n\nWhen the exception message contains some HTML, this display is\nbroken.\n\nI don't know enought about the differents Output classes.\nMaybe we have to check the current Output class before\nescaping. But for the moment, we allways format the message\nwith error tags, so I guess the escape is not an issue.\n"
            },
            {
                "title": "[FrameworkBundle] Commands can be registered in the DIC",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | don't now |\n| Fixed tickets | #8166 |\n| License | MIT |\n| Doc PR | TODO |\n\nTodo:\n- [ ] Documentation\n- [ ] Clean code (add type hinting)\n- [ ] Add tests\n\nWhat do you think of that ?\n"
            },
            {
                "title": "[PHPDoc] Added @since php doc",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8786 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[PHPDoc] Replaced ['int'=>'integer', 'boolean' => 'Boolean'] to increase consistency",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets |  |\n| License | MIT |\n| Doc PR |  |\n\nAnd also re-align some php doc block\n"
            },
            {
                "title": "[Process] Added ProcessBuilder::setEnvironmentVariables",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[RFC][Console + FrameworkBundle] Allow configure command in dic",
                "body": "Hello.\n\n**Note** (2013/09/05): I have edited this RFC to cleanup old use case and add a\nnew one\n\nSome use case:\n- Log from a command in a new monolog channel ( fixed by https://github.com/symfony/MonologBundle/commit/7d3f9c3c0ba2f92b17e49a62303d801ed627a81e).\n- Register into the application a new command that does not fit in a bundle.\n\nWhat to you think ?\n"
            },
            {
                "title": "[RFC][Process] stdin could be a stream",
                "body": "Hello.\n\nFor now, we can not use a `stream` for `stdin`.\nSee: \n- https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/Process.php#L280 (`strlen` is not possible on `stream`)\n- https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/Process.php#L304 (`substr` is not possible on `stream`)\n\nping @romainneutron ;)\n"
            },
            {
                "title": "[RFC][Form] Add form::getErrorsAsArray",
                "body": "I need in my project `Form::getErrorsAsArray` (like `Form::getErrorsAsString`), to render the error in a json response. It can be useful for a web service.\n\nDo it make sens to add it to the form component ?\n\nHere my code:\n\n``` php\n    public function getErrorsAsArray($form)\n    {\n        $errors = array();\n        foreach ($form->getErrors() as $error) {\n            $errors[] = $error->getMessage();\n        }\n\n        foreach ($form->all() as $key => $child) {\n            if ($err = $this->getErrorsAsArray($child)) {\n                $errors[$key] = $err;\n            }\n        }\n\n        return $errors;\n    }\n```\n\nIf it's ok for you, I will create a PR.\n"
            },
            {
                "title": "[WIP][Security] Added Ldap provider",
                "body": "Bug fix: no, but may be\nFeature addition: yes\nBackwards compatibility break: no, but may be\nSymfony2 tests pass: no, not yet\nFixes the following tickets: -\nTodo: Finish implementation, Add more tests. Fix \\DependencyInjection\\Security\\Factory*`\nLicense of the code: MIT\nDocumentation PR: not available yet\n\nHello.\n\nFirst, it will be useful to have this provider into the security component. Thanks to this, the feature will be available into silex application, and also drupal 8 and ezpublish 5.\n\nI open a PR, but my work is not finished. It could be great to have an early feedback (not about CS, just about architecture)\n\nI read the codebase of bundles available on http://knpbundles.com/search?q=ldap but there is some issues with these bundles: \n- Dependency on `Zend\\Ldap` (opensky)\n- A global username / password account is not needed to check is a user is able to connect to ldap. (all bundle)\n- The factory are no enough flexible.\n\nOf course, I will rebase / squash all my commits before final merge (if happen).\n\nI am really not sure about      f40c85b \n\nI tried to keep the default workflow of the user authentification\nBut with ldap, we can not retrieve user password. The only way to check if a user is in a ldap server, and if he is able to connect to the ldap, it is to try to connect the user against the ldap.\n\nThen, we have an issue in `src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/*Factory.php`. \nFor exemple in https://github.com/lyrixx/symfony/blob/1834aaa11a9342455eaf30f1c6cd7ef69f951bdb/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/FormLoginFactory.php#L65 the `$provider` (AuthentificationProvider) is hardcoded. It should not be.\nSo, just for my test, i changed this value (this change breaks tests).\nBut we have to find a way to do this cleanly. How can we do that ?\n- (A) Duplicate the factory (Not ok with that)\n- (B) Add a new argument createAuthProvider\n- ??\n\nWith A option, there will be lot of code.\nWith B option, we could add BC break.\n"
            },
            {
                "title": "[Console] Escape exception message during the rendering of an exception",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen the exception message contains some HTML, this display is\nbroken.\n\nI don't know enought about the differents Output classes.\nMaybe we have to check the current Output class before\nescaping. But for the moment, we allways format the message\nwith error tags, so I guess the escape is not an issue.\n\nAs this is a bug fix, should I re-open this PR against 2.2 branch ?\n"
            },
            {
                "title": "[TwigBridge] Prevent code extension to display warning",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nDuring functional testing with phpunit and browserkit (and all their friends) when the application returns a `4XX` or a `5XX` response, symfony displays the trace with code context.\n\nDuring a training, few people experienced a very weird issue with php 5.4, symfony 2.3.2, phpunit 3.7, Windows 7 or 8 and SensioLabsDesktop 0.5.\n\nWhen they run functional  tests, and the application returns a `404`, in the  console  there was lot of warnings. It was something like that `Warning: Unexpected character in input:  '\\' (ASCII=92) state=1 in /XXXXX on line 9` With the `@`, no more warnings.\n\nI can't reproduce this issue on my computer (not windows). If needed, I can try to reproduce this bug on Monday at work.\n"
            },
            {
                "title": "[TwigBridge] Prevent code extension to display warning",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nDuring functional testing with phpunit and browserkit (and all their friends) when the application returns a `4XX` or a `5XX` response, symfony displays the trace with code context.\n\nDuring a training, few people experienced a very weird issue with php 5.4, symfony 2.3.2, phpunit 3.7, Windows 7 or 8 and SensioLabsDesktop 0.5.\n\nWhen they run functional  tests, and the application returns a `404`, in the  console  there was lot of warnings. I don't remember, sorry, but it was something about unexpected character and/or encoding. With the `@`, no more warnings.\n\nI can't reproduce this issue on my computer (not windows). If needed, I can try to reproduce this bug on Monday at work.\n\nAnd I am not sure the issue is from symfony... And I can't find the warning message in google. \n"
            },
            {
                "title": " \t[Validator] Removed unnecessary check as symfony requires php >= 5.3.3. ",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | I guess |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[Form] Disable csrf_protection when the security is stateless",
                "body": "When building an API, we use a stateless security. So we have not a session.\nSo It does not make sens to have a csrf sessions based.\n\nWhat do you think ?\n"
            },
            {
                "title": "[Console] Added more semantic commands to detect verbosity",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Console] Added a way to set terminal dimensions",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8595 |\n| License | MIT |\n| Doc PR | n/ |\n"
            },
            {
                "title": "[RFC][Console] Allow overriding terminal dimensions",
                "body": "Terminal dimensions are the real term dimensions which is cool, but sometimes you may want to force the dimensions:\n- functional testing (CF: https://github.com/symfony/symfony/pull/3805/files)\n- when running code in a server (or a VM), but you want a custom width for the ouput (which will be displayed on a website).\n\nWhat do you think ?\n"
            },
            {
                "title": "[Tests] Tests on php 5.5 should pass",
                "body": "Because php 5.5 is stable now\n"
            },
            {
                "title": " \t[HttpFoundation] Fixed NativeSessionStorage:regenerate when does not exists",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8460 |\n| License | MIT |\n| Doc PR | - |\n\n**warning** I did not try to reproduce this bug, so I am not sure it fixes the issue. I just open a PR with the suggested patch. Tests for http foundation are OK. I am not sur it's the best way to fix this issue as I do not understand why symfony reach this code if $_SESSION is not set. \n"
            },
            {
                "title": "[RFC][Console] Give the output to the Description.",
                "body": "I think there is a design issue in https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Helper/DescriptorHelper.php#L68-L70\n\nIt will be more fexible if the descriptor will access the output  because\n- Less memory used\n- The descriptor haven't to deal with `\\n`\n- The ouput is not blocked\n- And Descriptor will be able to use another help.\n\nBut I think it will break the BC :(\n"
            },
            {
                "title": "[2.2][Form] Allowed binding false to a checkbox",
                "body": "I have isolated the issue: https://github.com/lyrixx/symfony-standard/commit/1c931844a0796fe26e2b63ab455ec035d23f1138\n\nI also see #7789 but i was merge into master (in 2.3, now). Can you backport this patch to symfony 2.2 ?\n"
            },
            {
                "title": "[2.3][CssSelector] Added test to highlight a regression",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | no (that's the point) |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nHello.\n\nI tried to use latest Symfony2 version in fapot/sismo, and sismo tests fail because of a regression in CssSelector Component.\n\nYou can easily reproduce it by cloning sismo, run a `composer update`, then `phpunit`.\n\nI tried to debug it, but DomDocument and XPath don't like me.\n\nping @jfsimon\n"
            },
            {
                "title": "[2.4][Filesystem] Fixed doc block on Filesystem::rename",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[HttpKernel] Fixed typo",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | did not changed code |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nThis is just a quick patch.\n\nBut I think we have a  big  issue here. If something wrong happen during the exception handling, the last exception is hidden. Of course, the last exception is logged, But IMHO, this not very handly.\n\nI try to isolate the bug in this simple gist https://gist.github.com/lyrixx/5570964#file-index-php .\nHere the debug is a nightmare for new comers. I let you try and see ;)\nIMHO, the last exception should not be hidden, but display.\n"
            },
            {
                "title": "[2.4][Console] Added status code to CommandTester and ApplicationTester",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes, but not on travis (segfault) |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nTheses classes are already statefull. They contain the input and the\noutput data. So we can safely add the last status code to the class.\n"
            },
            {
                "title": "[Console] Added status code to CommandTester and ApplicationTester",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nTheses classes are already statefull. They contain the input and the\noutput data. So we can safely add the last status code to the class.\n"
            },
            {
                "title": "[DependencyInjection] Add suggestions on ParameterNotFoundException",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | [no] |\n| New feature? | [yes] |\n| BC breaks? | [no] |\n| Deprecations? | [no] |\n| Tests pass? | [yes] |\n| Fixed tickets | [-] |\n| License | MIT |\n| Doc PR | [-] |\n"
            },
            {
                "title": "[Security] Removed unused var",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | I guess |\n| Fixed tickets | - |\n"
            },
            {
                "title": "[2.1][SecurityBundle] Fixed configuration exemple",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[Validation][RFC] Allow to mix group sequence and validation group",
                "body": "I would like to know if it is possible to mix validation group and group sequence ?\n\nI used GroupSequence like this :\n\n``` php\n * @Assert\\GroupSequence({ Branch ,  Step2 })\n * @ProjectAssert\\Configuration(groups={ Step2 })\n */\nclass Branch\n\n    // some property with validator.\n    // and\n    /**\n     * @SensioAssert\\Yaml() \n     */\n    private $configurationVariables;\n\n    /**\n     * @SensioAssert\\Twig()\n     */\n    private $configurationTemplate;\n```\n\nAnd it works like a charm.\n\nBut now, I want to preview the branch configuration. So I **do not need** validate everything. I just want to validate `configurationVariables` and `configurationTemplate` in a first step, and then the whole configuration with `ProjectAssert\\Configuration` in a second step.\n\nSo I added `groups={ preview }` on `configurationVariables` and `configurationTemplate`.\nBut I do not know how to add a group on my validation sequence.\nAFAIK, a POPO can attach only one GroupSequence, and a GroupSequence can not be inside a group.\n"
            },
            {
                "title": "[2.2] Fixed the ConstraintValidator ",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "Updated UPGRADE-2.2.md for twig bridge section",
                "body": "| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | A |\n| --- | --- |\n| Bug fix? \u00a0 \u00a0 \u00a0 | yes |\n| New feature? \u00a0 | no |\n| BC breaks? \u00a0 \u00a0 | no |\n| Deprecations? | no |\n| Tests pass? \u00a0 | yes |\n| Fixed tickets | - |\n| License \u00a0 \u00a0 \u00a0 | MIT |\n| Doc PR \u00a0 \u00a0 \u00a0 \u00a0 | - |\n"
            },
            {
                "title": "Fixed typo with render_* function",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[FrameworkBundle] EventListenner does not work if they are no public",
                "body": "Hello.\n\nIf I set my service to `public= false `, it's not registered as an event subscriber:\n\n``` xml\n<service id= foo.event_listener.request_context  class= %foo.event_listener.request_context.class%  public= false >\n   <argument type= service  id= router.request_context  />\n   <tag name= kernel.event_subscriber  />\n</service>\n```\n\nIf I removed `public= false ` my class is instanciated.\n\nI have no time to go deeper, sorry, but it seems to happen here: https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Compiler/RegisterKernelListenersPass.php#L46\n"
            },
            {
                "title": "[EventDispatcher] Added GenericEvent::setSubject method",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n```\n\nIt is usefull if the observed subject is not an object\nand you don't want to give the subject by reference.\n"
            },
            {
                "title": "[EventDispatcher] Fixed php doc of GenericEvent::__construct",
                "body": "```\nBug fix: yes (doc)\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes (no modified)\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n```\n"
            },
            {
                "title": "[2.2][Routing] Added support for default attributes with default values of method params",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nWith this patch, you can configure your default values likes this:\n\n``` php\n/**\n * @Route( /hi/{name} , name= hi )\n */\npublic function hiAction($name =  Bob )\n{\n    return new Response($name);\n}\n```\n"
            },
            {
                "title": "[2.1][HttpFoundation] Fixed Php doc in Request::get",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nAccording to php code, `Request::get` method does not seek in cookies.\n"
            },
            {
                "title": "[Process][Tests] Prove process fail with chained commands",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: no\nFixes the following tickets: -\nTodo: Fix that\nLicense of the code: MIT\n\nThis PR is against 2.1 branch. Previous PR was #5575\n\nThis PR try to hiligh a regression in Process component.\n\n``` php\n$process = new Process( echo -n 1 && echo -n 1 );\n// or $process = new Process( echo -n 1 ; echo -n 1 );\n$process->run();\nvar_dump('11' == $process->getOutput()); // false, \nvar_dump($process->getOutput()); // '1', \n```\n\nThis test failed because of PR #5543 ; see https://github.com/symfony/symfony/commit/7bafc69f38a3512eb15aad506959a4e7be162e52#L0R233\n"
            },
            {
                "title": "[Process][Tests] Prove process fail",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: no\nFixes the following tickets: -\nTodo: Fix that\nLicense of the code: MIT\n\nI am not sure this is an issue, but the following code does not work : \n\n``` php\n$process = new Process( echo -n 1 ; echo -n 1 );\n$process->run();\nvar_dump('11' == $process->getOutput()); // false, \nvar_dump($process->getOutput()) // 1\n```\n\nI don't know why.\n\ntests are run on php 5.4.7 and ubuntu 11.04\n"
            },
            {
                "title": "[Console] Fixed message exception when command is not avaible",
                "body": "Bug fix: yes\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nLicense of the code: MIT\n\nFixed singular / plural\n`Did you mean this?` VS `Did you mean one of these`\n"
            },
            {
                "title": "[Local] StubIntlDateFormatterTest::testFormatWithDefaultTimezoneIntl",
                "body": "Tests are broken on my computer, I don't know why. But they are ok on travis.\n\nI copy/paste the phpunit output, `php -v`, `php -i` and `php -m`.\n\n```\nphpunit --filter testFormatWithDefaultTimezoneIntl src/Symfony/Component/Locale/Tests/Stub/StubIntlDateFormatterTest.php \nPHPUnit 3.6.11 by Sebastian Bergmann.\n\nConfiguration read from /home/gregoire/dev/symfony/phpunit.xml.dist\n\nF.\n\nTime: 1 second, Memory: 3.25Mb\n\nThere was 1 failure:\n\n1) Symfony\\Component\\Locale\\Tests\\Stub\\StubIntlDateFormatterTest::testFormatWithDefaultTimezoneIntl\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'1970-01-01 00:00:00'\n+'1970-01-01 01:00:00'\n\n/home/gregoire/dev/symfony/src/Symfony/Component/Locale/Tests/Stub/StubIntlDateFormatterTest.php:471\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1.\n```\n\n```\nphp -v\nPHP 5.4.5-1~dotdeb.0 (cli) (built: Jul 22 2012 13:41:30) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\n    with Xdebug v2.2.1, Copyright (c) 2002-2012, by Derick Rethans\n```\n\n```\nphpinfo()\nPHP Version => 5.4.5-1~dotdeb.0\n\nSystem => Linux gregoire 2.6.38-15-generic-pae #64-Ubuntu SMP Fri Jul 6 17:35:46 UTC 2012 i686\nBuild Date => Jul 22 2012 13:40:16\nServer API => Command Line Interface\nVirtual Directory Support => disabled\nConfiguration File (php.ini) Path => /etc/php5/cli\nLoaded Configuration File => /etc/php5/cli/php.ini\nScan this dir for additional .ini files => /etc/php5/cli/conf.d\nAdditional .ini files parsed => /etc/php5/cli/conf.d/10-pdo.ini,\n/etc/php5/cli/conf.d/20-apc.ini,\n/etc/php5/cli/conf.d/20-curl.ini,\n/etc/php5/cli/conf.d/20-gd.ini,\n/etc/php5/cli/conf.d/20-intl.ini,\n/etc/php5/cli/conf.d/20-mcrypt.ini,\n/etc/php5/cli/conf.d/20-memcache.ini,\n/etc/php5/cli/conf.d/20-memcached.ini,\n/etc/php5/cli/conf.d/20-mysql.ini,\n/etc/php5/cli/conf.d/20-mysqli.ini,\n/etc/php5/cli/conf.d/20-odbc.ini,\n/etc/php5/cli/conf.d/20-pdo_mysql.ini,\n/etc/php5/cli/conf.d/20-pdo_odbc.ini,\n/etc/php5/cli/conf.d/20-pdo_pgsql.ini,\n/etc/php5/cli/conf.d/20-pgsql.ini,\n/etc/php5/cli/conf.d/20-xdebug.ini,\n/etc/php5/cli/conf.d/90-my.ini\n\nPHP API => 20100412\nPHP Extension => 20100525\nZend Extension => 220100525\nZend Extension Build => API220100525,NTS\nPHP Extension Build => API20100525,NTS\nDebug Build => no\nThread Safety => disabled\nZend Signal Handling => disabled\nZend Memory Manager => enabled\nZend Multibyte Support => provided by mbstring\nIPv6 Support => enabled\nDTrace Support => disabled\n\nRegistered PHP Streams => https, ftps, compress.zlib, compress.bzip2, php, file, glob, data, http, ftp, zip, phar\nRegistered Stream Socket Transports => tcp, udp, unix, udg, ssl, sslv3, sslv2, tls\nRegistered Stream Filters => zlib.*, bzip2.*, convert.iconv.*, string.rot13, string.toupper, string.tolower, string.strip_tags, convert.*, consumed, dechunk, mcrypt.*, mdecrypt.*\n\nThis program makes use of the Zend Scripting Language Engine:\nZend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\n    with Xdebug v2.2.1, Copyright (c) 2002-2012, by Derick Rethans\n\n\nThis program was built by Dotdeb (http://www.dotdeb.org/).\n\n _______________________________________________________________________\n\n\nConfiguration\n\napc\n\nAPC Support => disabled\nVersion => 3.1.11\nAPC Debugging => Disabled\nMMAP Support => Enabled\nMMAP File Mask =>  \nLocking type => pthread mutex Locks\nSerialization Support => broken\nRevision => $Revision: 325875 $\nBuild Date => Jul 22 2012 16:06:57\n\nDirective => Local Value => Master Value\napc.cache_by_default => On => On\napc.canonicalize => On => On\napc.coredump_unmap => Off => Off\napc.enable_cli => Off => Off\napc.enabled => On => On\napc.file_md5 => Off => Off\napc.file_update_protection => 2 => 2\napc.filters => no value => no value\napc.gc_ttl => 3600 => 3600\napc.include_once_override => Off => Off\napc.lazy_classes => Off => Off\napc.lazy_functions => Off => Off\napc.max_file_size => 1M => 1M\napc.mmap_file_mask => no value => no value\napc.num_files_hint => 1000 => 1000\napc.preload_path => no value => no value\napc.report_autofilter => Off => Off\napc.rfc1867 => Off => Off\napc.rfc1867_freq => 0 => 0\napc.rfc1867_name => APC_UPLOAD_PROGRESS => APC_UPLOAD_PROGRESS\napc.rfc1867_prefix => upload_ => upload_\napc.rfc1867_ttl => 3600 => 3600\napc.serializer => default => default\napc.shm_segments => 1 => 1\napc.shm_size => 32M => 32M\napc.shm_strings_buffer => 4M => 4M\napc.slam_defense => On => On\napc.stat => On => On\napc.stat_ctime => Off => Off\napc.ttl => 0 => 0\napc.use_request_time => On => On\napc.user_entries_hint => 4096 => 4096\napc.user_ttl => 0 => 0\napc.write_lock => On => On\n\nbcmath\n\nBCMath support => enabled\n\nDirective => Local Value => Master Value\nbcmath.scale => 0 => 0\n\nbz2\n\nBZip2 Support => Enabled\nStream Wrapper support => compress.bzip2://\nStream Filter support => bzip2.decompress, bzip2.compress\nBZip2 Version => 1.0.5, 10-Dec-2007\n\ncalendar\n\nCalendar support => enabled\n\nCore\n\nPHP Version => 5.4.5-1~dotdeb.0\n\nDirective => Local Value => Master Value\nallow_url_fopen => On => On\nallow_url_include => Off => Off\nalways_populate_raw_post_data => Off => Off\narg_separator.input => & => &\narg_separator.output => & => &\nasp_tags => Off => Off\nauto_append_file => no value => no value\nauto_globals_jit => On => On\nauto_prepend_file => no value => no value\nbrowscap => no value => no value\ndefault_charset => no value => no value\ndefault_mimetype => text/html => text/html\ndisable_classes => no value => no value\ndisable_functions => no value => no value\ndisplay_errors => STDOUT => STDOUT\ndisplay_startup_errors => On => On\ndoc_root => no value => no value\ndocref_ext => no value => no value\ndocref_root => no value => no value\nenable_dl => Off => Off\nenable_post_data_reading => On => On\nerror_append_string => no value => no value\nerror_log => no value => no value\nerror_prepend_string => no value => no value\nerror_reporting => 32767 => 32767\nexit_on_timeout => Off => Off\nexpose_php => On => On\nextension_dir => /usr/lib/php5/20100525+lfs => /usr/lib/php5/20100525+lfs\nfile_uploads => On => On\nhighlight.comment => <font style= color: #FF8000 >#FF8000</font> => <font style= color: #FF8000 >#FF8000</font>\nhighlight.default => <font style= color: #0000BB >#0000BB</font> => <font style= color: #0000BB >#0000BB</font>\nhighlight.html => <font style= color: #000000 >#000000</font> => <font style= color: #000000 >#000000</font>\nhighlight.keyword => <font style= color: #007700 >#007700</font> => <font style= color: #007700 >#007700</font>\nhighlight.string => <font style= color: #DD0000 >#DD0000</font> => <font style= color: #DD0000 >#DD0000</font>\nhtml_errors => Off => Off\nignore_repeated_errors => On => On\nignore_repeated_source => Off => Off\nignore_user_abort => Off => Off\nimplicit_flush => On => On\ninclude_path => .:/usr/share/php:/usr/share/pear => .:/usr/share/php:/usr/share/pear\nlog_errors => On => On\nlog_errors_max_len => 1024 => 1024\nmail.add_x_header => On => On\nmail.force_extra_parameters => no value => no value\nmail.log => no value => no value\nmax_execution_time => 0 => 0\nmax_file_uploads => 20 => 20\nmax_input_nesting_level => 64 => 64\nmax_input_time => -1 => -1\nmax_input_vars => 1000 => 1000\nmemory_limit => 1024M => 1024M\nopen_basedir => no value => no value\noutput_buffering => 0 => 0\noutput_handler => no value => no value\npost_max_size => 8M => 8M\nprecision => 14 => 14\nrealpath_cache_size => 16K => 16K\nrealpath_cache_ttl => 120 => 120\nregister_argc_argv => On => On\nreport_memleaks => On => On\nreport_zend_debug => Off => Off\nrequest_order => GP => GP\nsendmail_from => no value => no value\nsendmail_path => /usr/sbin/sendmail -t -i  => /usr/sbin/sendmail -t -i \nserialize_precision => 17 => 17\nshort_open_tag => On => On\nSMTP => localhost => localhost\nsmtp_port => 25 => 25\nsql.safe_mode => Off => Off\ntrack_errors => Off => Off\nunserialize_callback_func => no value => no value\nupload_max_filesize => 2M => 2M\nupload_tmp_dir => no value => no value\nuser_dir => no value => no value\nuser_ini.cache_ttl => 300 => 300\nuser_ini.filename => .user.ini => .user.ini\nvariables_order => GPCS => GPCS\nxmlrpc_error_number => 0 => 0\nxmlrpc_errors => Off => Off\nzend.detect_unicode => On => On\nzend.enable_gc => On => On\nzend.multibyte => Off => Off\nzend.script_encoding => no value => no value\n\nctype\n\nctype functions => enabled\n\ncurl\n\ncURL support => enabled\ncURL Information => 7.21.3\nAge => 3\nFeatures\nAsynchDNS => No\nDebug => No\nGSS-Negotiate => Yes\nIDN => Yes\nIPv6 => Yes\nLargefile => Yes\nNTLM => Yes\nSPNEGO => No\nSSL => Yes\nSSPI => No\nkrb4 => No\nlibz => Yes\nCharConv => No\nProtocols => dict, file, ftp, ftps, gopher, http, https, imap, imaps, ldap, ldaps, pop3, pop3s, rtsp, smtp, smtps, telnet, tftp\nHost => i686-pc-linux-gnu\nSSL Version => OpenSSL/0.9.8o\nZLib Version => 1.2.3.4\n\ndate\n\ndate/time support => enabled\n Olson  Timezone Database Version => 2012.3\nTimezone Database => internal\nDefault timezone => Europe/Paris\n\nDirective => Local Value => Master Value\ndate.default_latitude => 31.7667 => 31.7667\ndate.default_longitude => 35.2333 => 35.2333\ndate.sunrise_zenith => 90.583333 => 90.583333\ndate.sunset_zenith => 90.583333 => 90.583333\ndate.timezone => Europe/Paris => Europe/Paris\n\ndba\n\nDBA support => enabled\nSupported handlers => cdb cdb_make db4 inifile flatfile qdbm \n\nDirective => Local Value => Master Value\ndba.default_handler => flatfile => flatfile\n\ndom\n\nDOM/XML => enabled\nDOM/XML API Version => 20031129\nlibxml Version => 2.7.8\nHTML Support => enabled\nXPath Support => enabled\nXPointer Support => enabled\nSchema Support => enabled\nRelaxNG Support => enabled\n\nereg\n\nRegex Library => Bundled library enabled\n\nexif\n\nEXIF Support => enabled\nEXIF Version => 1.4 $Id$\nSupported EXIF Version => 0220\nSupported filetypes => JPEG,TIFF\n\nDirective => Local Value => Master Value\nexif.decode_jis_intel => JIS => JIS\nexif.decode_jis_motorola => JIS => JIS\nexif.decode_unicode_intel => UCS-2LE => UCS-2LE\nexif.decode_unicode_motorola => UCS-2BE => UCS-2BE\nexif.encode_jis => no value => no value\nexif.encode_unicode => ISO-8859-15 => ISO-8859-15\n\nfileinfo\n\nfileinfo support => enabled\nversion => 1.0.5\n\nfilter\n\nInput Validation and Filtering => enabled\nRevision => $Id: e523cdc8829892d1b4f9cb7c3c57b2ba1c36b9ea $\n\nDirective => Local Value => Master Value\nfilter.default => unsafe_raw => unsafe_raw\nfilter.default_flags => no value => no value\n\nftp\n\nFTP support => enabled\n\ngd\n\nGD Support => enabled\nGD Version => bundled (2.0.34 compatible)\nFreeType Support => enabled\nFreeType Linkage => with freetype\nFreeType Version => 2.4.2\nT1Lib Support => enabled\nGIF Read Support => enabled\nGIF Create Support => enabled\nJPEG Support => enabled\nlibJPEG Version => 6b\nPNG Support => enabled\nlibPNG Version => 1.2.44\nWBMP Support => enabled\nXPM Support => enabled\nXBM Support => enabled\n\nDirective => Local Value => Master Value\ngd.jpeg_ignore_warning => 0 => 0\n\ngettext\n\nGetText Support => enabled\n\nhash\n\nhash support => enabled\nHashing Engines => md2 md4 md5 sha1 sha224 sha256 sha384 sha512 ripemd128 ripemd160 ripemd256 ripemd320 whirlpool tiger128,3 tiger160,3 tiger192,3 tiger128,4 tiger160,4 tiger192,4 snefru snefru256 gost adler32 crc32 crc32b fnv132 fnv164 joaat haval128,3 haval160,3 haval192,3 haval224,3 haval256,3 haval128,4 haval160,4 haval192,4 haval224,4 haval256,4 haval128,5 haval160,5 haval192,5 haval224,5 haval256,5 \n\niconv\n\niconv support => enabled\niconv implementation => glibc\niconv library version => 2.13\n\nDirective => Local Value => Master Value\niconv.input_encoding => ISO-8859-1 => ISO-8859-1\niconv.internal_encoding => ISO-8859-1 => ISO-8859-1\niconv.output_encoding => ISO-8859-1 => ISO-8859-1\n\nintl\n\nInternationalization support => enabled\nversion => 1.1.0\nICU version => 4.4.1\nICU Data version => 4.4.0.1\n\nDirective => Local Value => Master Value\nintl.default_locale => no value => no value\nintl.error_level => 0 => 0\n\njson\n\njson support => enabled\njson version => 1.2.1\n\nlibxml\n\nlibXML support => active\nlibXML Compiled Version => 2.7.8\nlibXML Loaded Version => 20708\nlibXML streams => enabled\n\nmbstring\n\nMultibyte Support => enabled\nMultibyte string engine => libmbfl\nHTTP input encoding translation => disabled\nlibmbfl version => 1.3.2\n\nmbstring extension makes use of  streamable kanji code filter and converter , which is distributed under the GNU Lesser General Public License version 2.1.\n\nMultibyte (japanese) regex support => enabled\nMultibyte regex (oniguruma) version => 5.9.1\n\nDirective => Local Value => Master Value\nmbstring.detect_order => no value => no value\nmbstring.encoding_translation => Off => Off\nmbstring.func_overload => 0 => 0\nmbstring.http_input => pass => pass\nmbstring.http_output => pass => pass\nmbstring.http_output_conv_mimetypes => ^(text/|application/xhtml\\+xml) => ^(text/|application/xhtml\\+xml)\nmbstring.internal_encoding => no value => no value\nmbstring.language => neutral => neutral\nmbstring.strict_detection => Off => Off\nmbstring.substitute_character => no value => no value\n\nmcrypt\n\nmcrypt support => enabled\nmcrypt_filter support => enabled\nVersion => 2.5.8\nApi No => 20021217\nSupported ciphers => cast-128 gost rijndael-128 twofish arcfour cast-256 loki97 rijndael-192 saferplus wake blowfish-compat des rijndael-256 serpent xtea blowfish enigma rc2 tripledes \nSupported modes => cbc cfb ctr ecb ncfb nofb ofb stream \n\nDirective => Local Value => Master Value\nmcrypt.algorithms_dir => no value => no value\nmcrypt.modes_dir => no value => no value\n\nmemcache\n\nmemcache support => enabled\nVersion => 3.0.6\nRevision => $Revision: 310129 $\n\nDirective => Local Value => Master Value\nmemcache.allow_failover => 1 => 1\nmemcache.chunk_size => 32768 => 32768\nmemcache.compress_threshold => 20000 => 20000\nmemcache.default_port => 11211 => 11211\nmemcache.hash_function => crc32 => crc32\nmemcache.hash_strategy => consistent => consistent\nmemcache.lock_timeout => 15 => 15\nmemcache.max_failover_attempts => 20 => 20\nmemcache.protocol => ascii => ascii\nmemcache.redundancy => 1 => 1\nmemcache.session_redundancy => 2 => 2\n\nmemcached\n\nmemcached support => enabled\nVersion => 2.0.1\nlibmemcached version => 1.0.8\nSession support => yes\nigbinary support => no\njson support => yes\n\nDirective => Local Value => Master Value\nmemcached.compression_factor => 1.3 => 1.3\nmemcached.compression_threshold => 2000 => 2000\nmemcached.compression_type => fastlz => fastlz\nmemcached.serializer => php => php\nmemcached.sess_binary => 0 => 0\nmemcached.sess_lock_wait => 150000 => 150000\nmemcached.sess_locking => 1 => 1\nmemcached.sess_prefix => memc.sess.key. => memc.sess.key.\n\nmhash\n\nMHASH support => Enabled\nMHASH API Version => Emulated Support\n\nmysql\n\nMySQL Support => enabled\nActive Persistent Links => 0\nActive Links => 0\nClient API version => 5.1.63\nMYSQL_MODULE_TYPE => external\nMYSQL_SOCKET => /var/run/mysqld/mysqld.sock\nMYSQL_INCLUDE => -I/usr/include/mysql\nMYSQL_LIBS => -L/usr/lib -lmysqlclient \n\nDirective => Local Value => Master Value\nmysql.allow_local_infile => On => On\nmysql.allow_persistent => On => On\nmysql.connect_timeout => 60 => 60\nmysql.default_host => no value => no value\nmysql.default_password => no value => no value\nmysql.default_port => no value => no value\nmysql.default_socket => /var/run/mysqld/mysqld.sock => /var/run/mysqld/mysqld.sock\nmysql.default_user => no value => no value\nmysql.max_links => Unlimited => Unlimited\nmysql.max_persistent => Unlimited => Unlimited\nmysql.trace_mode => Off => Off\n\nmysqli\n\nMysqlI Support => enabled\nClient API library version => 5.1.63\nActive Persistent Links => 0\nInactive Persistent Links => 0\nActive Links => 0\nClient API header version => 5.1.63\nMYSQLI_SOCKET => /var/run/mysqld/mysqld.sock\n\nDirective => Local Value => Master Value\nmysqli.allow_local_infile => On => On\nmysqli.allow_persistent => On => On\nmysqli.default_host => no value => no value\nmysqli.default_port => 3306 => 3306\nmysqli.default_pw => no value => no value\nmysqli.default_socket => /var/run/mysqld/mysqld.sock => /var/run/mysqld/mysqld.sock\nmysqli.default_user => no value => no value\nmysqli.max_links => Unlimited => Unlimited\nmysqli.max_persistent => Unlimited => Unlimited\nmysqli.reconnect => Off => Off\n\nodbc\n\nODBC Support => enabled\nActive Persistent Links => 0\nActive Links => 0\nODBC library => unixODBC\nODBC_INCLUDE => -I/usr/include\nODBC_LFLAGS => -L/usr/lib\nODBC_LIBS => -lodbc\n\nDirective => Local Value => Master Value\nodbc.allow_persistent => On => On\nodbc.check_persistent => On => On\nodbc.default_cursortype => Static cursor => Static cursor\nodbc.default_db => no value => no value\nodbc.default_pw => no value => no value\nodbc.default_user => no value => no value\nodbc.defaultbinmode => return as is => return as is\nodbc.defaultlrl => return up to 4096 bytes => return up to 4096 bytes\nodbc.max_links => Unlimited => Unlimited\nodbc.max_persistent => Unlimited => Unlimited\n\nopenssl\n\nOpenSSL support => enabled\nOpenSSL Library Version => OpenSSL 0.9.8o 01 Jun 2010\nOpenSSL Header Version => OpenSSL 0.9.8o 01 Jun 2010\n\npcntl\n\npcntl support => enabled\n\npcre\n\nPCRE (Perl Compatible Regular Expressions) Support => enabled\nPCRE Library Version => 8.12 2011-01-15\n\nDirective => Local Value => Master Value\npcre.backtrack_limit => 1000000 => 1000000\npcre.recursion_limit => 100000 => 100000\n\nPDO\n\nPDO support => enabled\nPDO drivers => mysql, odbc, pgsql\n\npdo_mysql\n\nPDO Driver for MySQL => enabled\nClient API version => 5.1.63\n\nDirective => Local Value => Master Value\npdo_mysql.default_socket => /var/run/mysqld/mysqld.sock => /var/run/mysqld/mysqld.sock\n\nPDO_ODBC\n\nPDO Driver for ODBC (unixODBC) => enabled\nODBC Connection Pooling => Enabled, strict matching\n\npdo_pgsql\n\nPDO Driver for PostgreSQL => enabled\nPostgreSQL(libpq) Version => 8.4.12\nModule version => 1.0.2\nRevision =>  $Id$ \n\npgsql\n\nPostgreSQL Support => enabled\nPostgreSQL(libpq) Version => 8.4.12\nPostgreSQL(libpq)  => PostgreSQL 8.4.12 on i486-pc-linux-gnu, compiled by GCC gcc-4.4.real (Debian 4.4.5-8) 4.4.5, 32-bit\nMultibyte character support => enabled\nSSL support => enabled\nActive Persistent Links => 0\nActive Links => 0\n\nDirective => Local Value => Master Value\npgsql.allow_persistent => On => On\npgsql.auto_reset_persistent => Off => Off\npgsql.ignore_notice => Off => Off\npgsql.log_notice => Off => Off\npgsql.max_links => Unlimited => Unlimited\npgsql.max_persistent => Unlimited => Unlimited\n\nPhar\n\nPhar: PHP Archive support => enabled\nPhar EXT version => 2.0.1\nPhar API version => 1.1.1\nSVN revision => $Id: 2a47d3d0354109d8077e34d59f1228ccfd021d59 $\nPhar-based phar archives => enabled\nTar-based phar archives => enabled\nZIP-based phar archives => enabled\ngzip compression => enabled\nbzip2 compression => enabled\nOpenSSL support => enabled\n\n\nPhar based on pear/PHP_Archive, original concept by Davey Shafik.\nPhar fully realized by Gregory Beaver and Marcus Boerger.\nPortions of tar implementation Copyright (c) 2003-2009 Tim Kientzle.\nDirective => Local Value => Master Value\nphar.cache_list => no value => no value\nphar.readonly => On => On\nphar.require_hash => On => On\n\nposix\n\nRevision => $Id: 967584c6fadb3467f31abe8e13caa8764df85867 $\n\nreadline\n\nReadline Support => enabled\nReadline library => 6.2\n\nDirective => Local Value => Master Value\ncli.pager => no value => no value\ncli.prompt => \\b \\>  => \\b \\> \n\nReflection\n\nReflection => enabled\nVersion => $Id: ee76afbc02b3063f63d87c9d9729b509ac9e10cf $\n\nsession\n\nSession Support => enabled\nRegistered save handlers => files user memcache memcached \nRegistered serializer handlers => php php_binary wddx \n\nDirective => Local Value => Master Value\nsession.auto_start => Off => Off\nsession.cache_expire => 180 => 180\nsession.cache_limiter => nocache => nocache\nsession.cookie_domain => no value => no value\nsession.cookie_httponly => Off => Off\nsession.cookie_lifetime => 0 => 0\nsession.cookie_path => / => /\nsession.cookie_secure => Off => Off\nsession.entropy_file => /dev/urandom => /dev/urandom\nsession.entropy_length => 32 => 32\nsession.gc_divisor => 1000 => 1000\nsession.gc_maxlifetime => 1440 => 1440\nsession.gc_probability => 0 => 0\nsession.hash_bits_per_character => 5 => 5\nsession.hash_function => 0 => 0\nsession.name => PHPSESSID => PHPSESSID\nsession.referer_check => no value => no value\nsession.save_handler => files => files\nsession.save_path => /var/lib/php5 => /var/lib/php5\nsession.serialize_handler => php => php\nsession.upload_progress.cleanup => On => On\nsession.upload_progress.enabled => On => On\nsession.upload_progress.freq => 1% => 1%\nsession.upload_progress.min_freq => 1 => 1\nsession.upload_progress.name => PHP_SESSION_UPLOAD_PROGRESS => PHP_SESSION_UPLOAD_PROGRESS\nsession.upload_progress.prefix => upload_progress_ => upload_progress_\nsession.use_cookies => On => On\nsession.use_only_cookies => On => On\nsession.use_trans_sid => 0 => 0\n\nshmop\n\nshmop support => enabled\n\nSimpleXML\n\nSimplexml support => enabled\nRevision => $Id: 455280fc74f9f002b7314def7a456f6c3080eb92 $\nSchema support => enabled\n\nsoap\n\nSoap Client => enabled\nSoap Server => enabled\n\nDirective => Local Value => Master Value\nsoap.wsdl_cache => 1 => 1\nsoap.wsdl_cache_dir => /tmp => /tmp\nsoap.wsdl_cache_enabled => 1 => 1\nsoap.wsdl_cache_limit => 5 => 5\nsoap.wsdl_cache_ttl => 86400 => 86400\n\nsockets\n\nSockets Support => enabled\n\nSPL\n\nSPL support => enabled\nInterfaces => Countable, OuterIterator, RecursiveIterator, SeekableIterator, SplObserver, SplSubject\nClasses => AppendIterator, ArrayIterator, ArrayObject, BadFunctionCallException, BadMethodCallException, CachingIterator, CallbackFilterIterator, DirectoryIterator, DomainException, EmptyIterator, FilesystemIterator, FilterIterator, GlobIterator, InfiniteIterator, InvalidArgumentException, IteratorIterator, LengthException, LimitIterator, LogicException, MultipleIterator, NoRewindIterator, OutOfBoundsException, OutOfRangeException, OverflowException, ParentIterator, RangeException, RecursiveArrayIterator, RecursiveCachingIterator, RecursiveCallbackFilterIterator, RecursiveDirectoryIterator, RecursiveFilterIterator, RecursiveIteratorIterator, RecursiveRegexIterator, RecursiveTreeIterator, RegexIterator, RuntimeException, SplDoublyLinkedList, SplFileInfo, SplFileObject, SplFixedArray, SplHeap, SplMinHeap, SplMaxHeap, SplObjectStorage, SplPriorityQueue, SplQueue, SplStack, SplTempFileObject, UnderflowException, UnexpectedValueException\n\nstandard\n\nDynamic Library Support => enabled\nPath to sendmail => /usr/sbin/sendmail -t -i \n\nDirective => Local Value => Master Value\nassert.active => 1 => 1\nassert.bail => 0 => 0\nassert.callback => no value => no value\nassert.quiet_eval => 0 => 0\nassert.warning => 1 => 1\nauto_detect_line_endings => 0 => 0\ndefault_socket_timeout => 60 => 60\nfrom => no value => no value\nurl_rewriter.tags => a=href,area=href,frame=src,input=src,form=fakeentry => a=href,area=href,frame=src,input=src,form=fakeentry\nuser_agent => no value => no value\n\nsysvmsg\n\nsysvmsg support => enabled\nRevision => $Id: 6360183f0075ec66a3dfa01633b2ed808dd482af $\n\ntokenizer\n\nTokenizer Support => enabled\n\nwddx\n\nWDDX Support => enabled\nWDDX Session Serializer => enabled\n\nxdebug\n\nxdebug support => enabled\nVersion => 2.2.1\nIDE Key => gregoire\n\nSupported protocols => Revision\nDBGp - Common DeBuGger Protocol => $Revision: 1.145 $\n\nDirective => Local Value => Master Value\nxdebug.auto_trace => Off => Off\nxdebug.cli_color => 0 => 0\nxdebug.collect_assignments => Off => Off\nxdebug.collect_includes => On => On\nxdebug.collect_params => 0 => 0\nxdebug.collect_return => Off => Off\nxdebug.collect_vars => Off => Off\nxdebug.coverage_enable => On => On\nxdebug.default_enable => On => On\nxdebug.dump.COOKIE => no value => no value\nxdebug.dump.ENV => no value => no value\nxdebug.dump.FILES => no value => no value\nxdebug.dump.GET => no value => no value\nxdebug.dump.POST => no value => no value\nxdebug.dump.REQUEST => no value => no value\nxdebug.dump.SERVER => no value => no value\nxdebug.dump.SESSION => no value => no value\nxdebug.dump_globals => On => On\nxdebug.dump_once => On => On\nxdebug.dump_undefined => Off => Off\nxdebug.extended_info => On => On\nxdebug.file_link_format => no value => no value\nxdebug.idekey => no value => no value\nxdebug.max_nesting_level => 100 => 100\nxdebug.overload_var_dump => On => On\nxdebug.profiler_aggregate => Off => Off\nxdebug.profiler_append => Off => Off\nxdebug.profiler_enable => Off => Off\nxdebug.profiler_enable_trigger => Off => Off\nxdebug.profiler_output_dir => /tmp => /tmp\nxdebug.profiler_output_name => cachegrind.out.%p => cachegrind.out.%p\nxdebug.remote_autostart => Off => Off\nxdebug.remote_connect_back => Off => Off\nxdebug.remote_cookie_expire_time => 3600 => 3600\nxdebug.remote_enable => Off => Off\nxdebug.remote_handler => dbgp => dbgp\nxdebug.remote_host => localhost => localhost\nxdebug.remote_log => no value => no value\nxdebug.remote_mode => req => req\nxdebug.remote_port => 9000 => 9000\nxdebug.scream => Off => Off\nxdebug.show_exception_trace => Off => Off\nxdebug.show_local_vars => Off => Off\nxdebug.show_mem_delta => Off => Off\nxdebug.trace_enable_trigger => Off => Off\nxdebug.trace_format => 0 => 0\nxdebug.trace_options => 0 => 0\nxdebug.trace_output_dir => /tmp => /tmp\nxdebug.trace_output_name => trace.%c => trace.%c\nxdebug.var_display_max_children => 128 => 128\nxdebug.var_display_max_data => 512 => 512\nxdebug.var_display_max_depth => 3 => 3\n\nxml\n\nXML Support => active\nXML Namespace Support => active\nlibxml2 Version => 2.7.8\n\nxmlreader\n\nXMLReader => enabled\n\nxmlwriter\n\nXMLWriter => enabled\n\nzip\n\nZip => enabled\nExtension Version => $Id$\nZip version => 1.11.0\nLibzip version => 0.10.1\n\nzlib\n\nZLib Support => enabled\nStream Wrapper => compress.zlib://\nStream Filter => zlib.inflate, zlib.deflate\nCompiled Version => 1.2.1.1\nLinked Version => 1.2.3.4\n\nDirective => Local Value => Master Value\nzlib.output_compression => Off => Off\nzlib.output_compression_level => -1 => -1\nzlib.output_handler => no value => no value\n\nAdditional Modules\n\nModule Name\nsysvsem\nsysvshm\n\nEnvironment\n\nVariable => Value\nGIT_PS1_SHOWDIRTYSTATE => true\nORBIT_SOCKETDIR => /tmp/orbit-gregoire\nSSH_AGENT_PID => 1658\nSHELL => /bin/bash\nTERM => screen\nXDG_SESSION_COOKIE => 29a1f0569e1c5dda9815e88c0000000b-1342687140.875235-1346727117\nHISTSIZE => 10000\nWINDOWID => 58720294\nGNOME_KEYRING_CONTROL => /tmp/keyring-OshB34\nGTK_MODULES => canberra-gtk-module\nUSER => gregoire\nHISTFILESIZE => 10000\nLS_COLORS => no=00:fi=00:di=36:ln=35:pi=30;44:so=35;44:do=35;44:bd=33;44:cd=37;44:or=05;37;41:mi=05;37;41:ex=01;31:*.cmd=01;31:*.exe=01;31:*.com=01;31:*.bat=01;31:*.reg=01;31:*.app=01;31:*.txt=32:*.org=32:*.md=32:*.mkd=32:*.h=32:*.c=32:*.C=32:*.cc=32:*.cxx=32:*.objc=32:*.sh=32:*.csh=32:*.zsh=32:*.el=32:*.vim=32:*.java=32:*.pl=32:*.pm=32:*.py=32:*.rb=32:*.hs=32:*.php=32:*.htm=32:*.html=32:*.shtml=32:*.xml=32:*.rdf=32:*.css=32:*.js=32:*.man=32:*.0=32:*.1=32:*.2=32:*.3=32:*.4=32:*.5=32:*.6=32:*.7=32:*.8=32:*.9=32:*.l=32:*.n=32:*.p=32:*.pod=32:*.tex=32:*.bmp=33:*.cgm=33:*.dl=33:*.dvi=33:*.emf=33:*.eps=33:*.gif=33:*.jpeg=33:*.jpg=33:*.JPG=33:*.mng=33:*.pbm=33:*.pcx=33:*.pdf=33:*.pgm=33:*.png=33:*.ppm=33:*.pps=33:*.ppsx=33:*.ps=33:*.svg=33:*.svgz=33:*.tga=33:*.tif=33:*.tiff=33:*.xbm=33:*.xcf=33:*.xpm=33:*.xwd=33:*.xwd=33:*.yuv=33:*.aac=33:*.au=33:*.flac=33:*.mid=33:*.midi=33:*.mka=33:*.mp3=33:*.mpa=33:*.mpeg=33:*.mpg=33:*.ogg=33:*.ra=33:*.wav=33:*.anx=33:*.asf=33:*.avi=33:*.axv=33:*.flc=33:*.fli=33:*.flv=33:*.gl=33:*.m2v=33:*.m4v=33:*.mkv=33:*.mov=33:*.mp4=33:*.mp4v=33:*.mpeg=33:*.mpg=33:*.nuv=33:*.ogm=33:*.ogv=33:*.ogx=33:*.qt=33:*.rm=33:*.rmvb=33:*.swf=33:*.vob=33:*.wmv=33:*.doc=31:*.docx=31:*.rtf=31:*.dot=31:*.dotx=31:*.xls=31:*.xlsx=31:*.ppt=31:*.pptx=31:*.fla=31:*.psd=31:*.7z=1;35:*.apk=1;35:*.arj=1;35:*.bin=1;35:*.bz=1;35:*.bz2=1;35:*.cab=1;35:*.deb=1;35:*.dmg=1;35:*.gem=1;35:*.gz=1;35:*.iso=1;35:*.jar=1;35:*.msi=1;35:*.rar=1;35:*.rpm=1;35:*.tar=1;35:*.tbz=1;35:*.tbz2=1;35:*.tgz=1;35:*.tx=1;35:*.war=1;35:*.xpi=1;35:*.xz=1;35:*.z=1;35:*.Z=1;35:*.zip=1;35:*.ANSI-30-black=30:*.ANSI-01;30-brblack=01;30:*.ANSI-31-red=31:*.ANSI-01;31-brred=01;31:*.ANSI-32-green=32:*.ANSI-01;32-brgreen=01;32:*.ANSI-33-yellow=33:*.ANSI-01;33-bryellow=01;33:*.ANSI-34-blue=34:*.ANSI-01;34-brblue=01;34:*.ANSI-35-magenta=35:*.ANSI-01;35-brmagenta=01;35:*.ANSI-36-cyan=36:*.ANSI-01;36-brcyan=01;36:*.ANSI-37-white=37:*.ANSI-01;37-brwhite=01;37:*.log=01;32:*~=01;32:*#=01;32:*.bak=01;33:*.BAK=01;33:*.old=01;33:*.OLD=01;33:*.org_archive=01;33:*.off=01;33:*.OFF=01;33:*.dist=01;33:*.DIST=01;33:*.orig=01;33:*.ORIG=01;33:*.swp=01;33:*.swo=01;33:*,v=01;33:*.gpg=34:*.gpg=34:*.pgp=34:*.asc=34:*.3des=34:*.aes=34:*.enc=34:\nSSH_AUTH_SOCK => /tmp/keyring-OshB34/ssh\nTERMCAP => SC|screen|VT 100/ANSI X3.64 virtual terminal:\\\n    :DO=\\E[%dB:LE=\\E[%dD:RI=\\E[%dC:UP=\\E[%dA:bs:bt=\\E[Z:\\\n    :cd=\\E[J:ce=\\E[K:cl=\\E[H\\E[J:cm=\\E[%i%d;%dH:ct=\\E[3g:\\\n    :do=^J:nd=\\E[C:pt:rc=\\E8:rs=\\Ec:sc=\\E7:st=\\EH:up=\\EM:\\\n    :le=^H:bl=^G:cr=^M:it#8:ho=\\E[H:nw=\\EE:ta=^I:is=\\E)0:\\\n    :li#39:co#168:am:xn:xv:LP:sr=\\EM:al=\\E[L:AL=\\E[%dL:\\\n    :cs=\\E[%i%d;%dr:dl=\\E[M:DL=\\E[%dM:dc=\\E[P:DC=\\E[%dP:\\\n    :im=\\E[4h:ei=\\E[4l:mi:IC=\\E[%d@:ks=\\E[?1h\\E=:\\\n    :ke=\\E[?1l\\E>:vi=\\E[?25l:ve=\\E[34h\\E[?25h:vs=\\E[34l:\\\n    :ti=\\E[?1049h:te=\\E[?1049l:us=\\E[4m:ue=\\E[24m:so=\\E[3m:\\\n    :se=\\E[23m:mb=\\E[5m:md=\\E[1m:mr=\\E[7m:me=\\E[m:ms:\\\n    :Co#8:pa#64:AF=\\E[3%dm:AB=\\E[4%dm:op=\\E[39;49m:AX:\\\n    :vb=\\Eg:G0:as=\\E(0:ae=\\E(B:\\\n    :ac=\\140\\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\\\n    :po=\\E[5i:pf=\\E[4i:k0=\\E[10~:k1=\\EOP:k2=\\EOQ:k3=\\EOR:\\\n    :k4=\\EOS:k5=\\E[15~:k6=\\E[17~:k7=\\E[18~:k8=\\E[19~:\\\n    :k9=\\E[20~:k;=\\E[21~:F1=\\E[23~:F2=\\E[24~:F3=\\E[1;2P:\\\n    :F4=\\E[1;2Q:F5=\\E[1;2R:F6=\\E[1;2S:F7=\\E[15;2~:\\\n    :F8=\\E[17;2~:F9=\\E[18;2~:FA=\\E[19;2~:kb=\u007f:K2=\\EOE:\\\n    :kB=\\E[Z:kF=\\E[1;2B:kR=\\E[1;2A:*4=\\E[3;2~:*7=\\E[1;2F:\\\n    :#2=\\E[1;2H:#3=\\E[2;2~:#4=\\E[1;2D:%c=\\E[6;2~:%e=\\E[5;2~:\\\n    :%i=\\E[1;2C:kh=\\E[1~:@1=\\E[1~:kH=\\E[4~:@7=\\E[4~:\\\n    :kN=\\E[6~:kP=\\E[5~:kI=\\E[2~:kD=\\E[3~:ku=\\EOA:kd=\\EOB:\\\n    :kr=\\EOC:kl=\\EOD:km:\nDEFAULTS_PATH => /usr/share/gconf/gnome-classic.default.path\nUSERNAME => gregoire\nSESSION_MANAGER => local/gregoire:@/tmp/.ICE-unix/1460,unix/gregoire:/tmp/.ICE-unix/1460\nPAGER => /usr/bin/most\nXDG_CONFIG_DIRS => /etc/xdg/xdg-gnome-classic:/etc/xdg\nDESKTOP_SESSION => gnome-classic\nPATH => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\nSTY => 3743.pts-0.gregoire\nPWD => /home/gregoire/dev/symfony\nGDM_KEYBOARD_LAYOUT => fr\nEDITOR => /usr/bin/vim\nLANG => fr_FR.UTF-8\nGNOME_KEYRING_PID => 1438\nMANDATORY_PATH => /usr/share/gconf/gnome-classic.mandatory.path\nGDM_LANG => fr\nUBUNTU_MENUPROXY => libappmenu.so\nGIT_PS1_SHOWUNTRACKEDFILES => true\nGDMSESSION => gnome-classic\nHISTIGNORE => ls:cd:[bf]g:exit\nHISTCONTROL => ignoreboth\nHOME => /home/gregoire\nSHLVL => 2\nLANGUAGE => fr:en\nGNOME_DESKTOP_SESSION_ID => this-is-deprecated\nLOGNAME => gregoire\nLESS => -R\nWINDOW => 4\nDBUS_SESSION_BUS_ADDRESS => unix:abstract=/tmp/dbus-35sLHm7BKF,guid=151b4df0b19dc912d371f0f40000001d\nXDG_DATA_DIRS => /usr/share/gnome-classic:/usr/share/gnome:/usr/local/share/:/usr/share/\nWINDOWPATH => 7\nDISPLAY => :0.0\nXAUTHORITY => /var/run/gdm/auth-for-gregoire-NqgFzl/database\nCOLORTERM => gnome-terminal\nOLDPWD => /home/gregoire\n_ => /usr/bin/php\n\nPHP Variables\n\nVariable => Value\n_SERVER[ GIT_PS1_SHOWDIRTYSTATE ] => true\n_SERVER[ ORBIT_SOCKETDIR ] => /tmp/orbit-gregoire\n_SERVER[ SSH_AGENT_PID ] => 1658\n_SERVER[ SHELL ] => /bin/bash\n_SERVER[ TERM ] => screen\n_SERVER[ XDG_SESSION_COOKIE ] => 29a1f0569e1c5dda9815e88c0000000b-1342687140.875235-1346727117\n_SERVER[ HISTSIZE ] => 10000\n_SERVER[ WINDOWID ] => 58720294\n_SERVER[ GNOME_KEYRING_CONTROL ] => /tmp/keyring-OshB34\n_SERVER[ GTK_MODULES ] => canberra-gtk-module\n_SERVER[ USER ] => gregoire\n_SERVER[ HISTFILESIZE ] => 10000\n_SERVER[ LS_COLORS ] => no=00:fi=00:di=36:ln=35:pi=30;44:so=35;44:do=35;44:bd=33;44:cd=37;44:or=05;37;41:mi=05;37;41:ex=01;31:*.cmd=01;31:*.exe=01;31:*.com=01;31:*.bat=01;31:*.reg=01;31:*.app=01;31:*.txt=32:*.org=32:*.md=32:*.mkd=32:*.h=32:*.c=32:*.C=32:*.cc=32:*.cxx=32:*.objc=32:*.sh=32:*.csh=32:*.zsh=32:*.el=32:*.vim=32:*.java=32:*.pl=32:*.pm=32:*.py=32:*.rb=32:*.hs=32:*.php=32:*.htm=32:*.html=32:*.shtml=32:*.xml=32:*.rdf=32:*.css=32:*.js=32:*.man=32:*.0=32:*.1=32:*.2=32:*.3=32:*.4=32:*.5=32:*.6=32:*.7=32:*.8=32:*.9=32:*.l=32:*.n=32:*.p=32:*.pod=32:*.tex=32:*.bmp=33:*.cgm=33:*.dl=33:*.dvi=33:*.emf=33:*.eps=33:*.gif=33:*.jpeg=33:*.jpg=33:*.JPG=33:*.mng=33:*.pbm=33:*.pcx=33:*.pdf=33:*.pgm=33:*.png=33:*.ppm=33:*.pps=33:*.ppsx=33:*.ps=33:*.svg=33:*.svgz=33:*.tga=33:*.tif=33:*.tiff=33:*.xbm=33:*.xcf=33:*.xpm=33:*.xwd=33:*.xwd=33:*.yuv=33:*.aac=33:*.au=33:*.flac=33:*.mid=33:*.midi=33:*.mka=33:*.mp3=33:*.mpa=33:*.mpeg=33:*.mpg=33:*.ogg=33:*.ra=33:*.wav=33:*.anx=33:*.asf=33:*.avi=33:*.axv=33:*.flc=33:*.fli=33:*.flv=33:*.gl=33:*.m2v=33:*.m4v=33:*.mkv=33:*.mov=33:*.mp4=33:*.mp4v=33:*.mpeg=33:*.mpg=33:*.nuv=33:*.ogm=33:*.ogv=33:*.ogx=33:*.qt=33:*.rm=33:*.rmvb=33:*.swf=33:*.vob=33:*.wmv=33:*.doc=31:*.docx=31:*.rtf=31:*.dot=31:*.dotx=31:*.xls=31:*.xlsx=31:*.ppt=31:*.pptx=31:*.fla=31:*.psd=31:*.7z=1;35:*.apk=1;35:*.arj=1;35:*.bin=1;35:*.bz=1;35:*.bz2=1;35:*.cab=1;35:*.deb=1;35:*.dmg=1;35:*.gem=1;35:*.gz=1;35:*.iso=1;35:*.jar=1;35:*.msi=1;35:*.rar=1;35:*.rpm=1;35:*.tar=1;35:*.tbz=1;35:*.tbz2=1;35:*.tgz=1;35:*.tx=1;35:*.war=1;35:*.xpi=1;35:*.xz=1;35:*.z=1;35:*.Z=1;35:*.zip=1;35:*.ANSI-30-black=30:*.ANSI-01;30-brblack=01;30:*.ANSI-31-red=31:*.ANSI-01;31-brred=01;31:*.ANSI-32-green=32:*.ANSI-01;32-brgreen=01;32:*.ANSI-33-yellow=33:*.ANSI-01;33-bryellow=01;33:*.ANSI-34-blue=34:*.ANSI-01;34-brblue=01;34:*.ANSI-35-magenta=35:*.ANSI-01;35-brmagenta=01;35:*.ANSI-36-cyan=36:*.ANSI-01;36-brcyan=01;36:*.ANSI-37-white=37:*.ANSI-01;37-brwhite=01;37:*.log=01;32:*~=01;32:*#=01;32:*.bak=01;33:*.BAK=01;33:*.old=01;33:*.OLD=01;33:*.org_archive=01;33:*.off=01;33:*.OFF=01;33:*.dist=01;33:*.DIST=01;33:*.orig=01;33:*.ORIG=01;33:*.swp=01;33:*.swo=01;33:*,v=01;33:*.gpg=34:*.gpg=34:*.pgp=34:*.asc=34:*.3des=34:*.aes=34:*.enc=34:\n_SERVER[ SSH_AUTH_SOCK ] => /tmp/keyring-OshB34/ssh\n_SERVER[ TERMCAP ] => SC|screen|VT 100/ANSI X3.64 virtual terminal:\\\n    :DO=\\E[%dB:LE=\\E[%dD:RI=\\E[%dC:UP=\\E[%dA:bs:bt=\\E[Z:\\\n    :cd=\\E[J:ce=\\E[K:cl=\\E[H\\E[J:cm=\\E[%i%d;%dH:ct=\\E[3g:\\\n    :do=^J:nd=\\E[C:pt:rc=\\E8:rs=\\Ec:sc=\\E7:st=\\EH:up=\\EM:\\\n    :le=^H:bl=^G:cr=^M:it#8:ho=\\E[H:nw=\\EE:ta=^I:is=\\E)0:\\\n    :li#39:co#168:am:xn:xv:LP:sr=\\EM:al=\\E[L:AL=\\E[%dL:\\\n    :cs=\\E[%i%d;%dr:dl=\\E[M:DL=\\E[%dM:dc=\\E[P:DC=\\E[%dP:\\\n    :im=\\E[4h:ei=\\E[4l:mi:IC=\\E[%d@:ks=\\E[?1h\\E=:\\\n    :ke=\\E[?1l\\E>:vi=\\E[?25l:ve=\\E[34h\\E[?25h:vs=\\E[34l:\\\n    :ti=\\E[?1049h:te=\\E[?1049l:us=\\E[4m:ue=\\E[24m:so=\\E[3m:\\\n    :se=\\E[23m:mb=\\E[5m:md=\\E[1m:mr=\\E[7m:me=\\E[m:ms:\\\n    :Co#8:pa#64:AF=\\E[3%dm:AB=\\E[4%dm:op=\\E[39;49m:AX:\\\n    :vb=\\Eg:G0:as=\\E(0:ae=\\E(B:\\\n    :ac=\\140\\140aaffggjjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~..--++,,hhII00:\\\n    :po=\\E[5i:pf=\\E[4i:k0=\\E[10~:k1=\\EOP:k2=\\EOQ:k3=\\EOR:\\\n    :k4=\\EOS:k5=\\E[15~:k6=\\E[17~:k7=\\E[18~:k8=\\E[19~:\\\n    :k9=\\E[20~:k;=\\E[21~:F1=\\E[23~:F2=\\E[24~:F3=\\E[1;2P:\\\n    :F4=\\E[1;2Q:F5=\\E[1;2R:F6=\\E[1;2S:F7=\\E[15;2~:\\\n    :F8=\\E[17;2~:F9=\\E[18;2~:FA=\\E[19;2~:kb=\u007f:K2=\\EOE:\\\n    :kB=\\E[Z:kF=\\E[1;2B:kR=\\E[1;2A:*4=\\E[3;2~:*7=\\E[1;2F:\\\n    :#2=\\E[1;2H:#3=\\E[2;2~:#4=\\E[1;2D:%c=\\E[6;2~:%e=\\E[5;2~:\\\n    :%i=\\E[1;2C:kh=\\E[1~:@1=\\E[1~:kH=\\E[4~:@7=\\E[4~:\\\n    :kN=\\E[6~:kP=\\E[5~:kI=\\E[2~:kD=\\E[3~:ku=\\EOA:kd=\\EOB:\\\n    :kr=\\EOC:kl=\\EOD:km:\n_SERVER[ DEFAULTS_PATH ] => /usr/share/gconf/gnome-classic.default.path\n_SERVER[ USERNAME ] => gregoire\n_SERVER[ SESSION_MANAGER ] => local/gregoire:@/tmp/.ICE-unix/1460,unix/gregoire:/tmp/.ICE-unix/1460\n_SERVER[ PAGER ] => /usr/bin/most\n_SERVER[ XDG_CONFIG_DIRS ] => /etc/xdg/xdg-gnome-classic:/etc/xdg\n_SERVER[ DESKTOP_SESSION ] => gnome-classic\n_SERVER[ PATH ] => /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games\n_SERVER[ STY ] => 3743.pts-0.gregoire\n_SERVER[ PWD ] => /home/gregoire/dev/symfony\n_SERVER[ GDM_KEYBOARD_LAYOUT ] => fr\n_SERVER[ EDITOR ] => /usr/bin/vim\n_SERVER[ LANG ] => fr_FR.UTF-8\n_SERVER[ GNOME_KEYRING_PID ] => 1438\n_SERVER[ MANDATORY_PATH ] => /usr/share/gconf/gnome-classic.mandatory.path\n_SERVER[ GDM_LANG ] => fr\n_SERVER[ UBUNTU_MENUPROXY ] => libappmenu.so\n_SERVER[ GIT_PS1_SHOWUNTRACKEDFILES ] => true\n_SERVER[ GDMSESSION ] => gnome-classic\n_SERVER[ HISTIGNORE ] => ls:cd:[bf]g:exit\n_SERVER[ HISTCONTROL ] => ignoreboth\n_SERVER[ HOME ] => /home/gregoire\n_SERVER[ SHLVL ] => 2\n_SERVER[ LANGUAGE ] => fr:en\n_SERVER[ GNOME_DESKTOP_SESSION_ID ] => this-is-deprecated\n_SERVER[ LOGNAME ] => gregoire\n_SERVER[ LESS ] => -R\n_SERVER[ WINDOW ] => 4\n_SERVER[ DBUS_SESSION_BUS_ADDRESS ] => unix:abstract=/tmp/dbus-35sLHm7BKF,guid=151b4df0b19dc912d371f0f40000001d\n_SERVER[ XDG_DATA_DIRS ] => /usr/share/gnome-classic:/usr/share/gnome:/usr/local/share/:/usr/share/\n_SERVER[ WINDOWPATH ] => 7\n_SERVER[ DISPLAY ] => :0.0\n_SERVER[ XAUTHORITY ] => /var/run/gdm/auth-for-gregoire-NqgFzl/database\n_SERVER[ COLORTERM ] => gnome-terminal\n_SERVER[ OLDPWD ] => /home/gregoire\n_SERVER[ _ ] => /usr/bin/php\n_SERVER[ PHP_SELF ] => \n_SERVER[ SCRIPT_NAME ] => \n_SERVER[ SCRIPT_FILENAME ] => \n_SERVER[ PATH_TRANSLATED ] => \n_SERVER[ DOCUMENT_ROOT ] => \n_SERVER[ REQUEST_TIME_FLOAT ] => 1343401175.1796\n_SERVER[ REQUEST_TIME ] => 1343401175\n_SERVER[ argv ] => Array\n(\n)\n\n_SERVER[ argc ] => 0\n\nPHP License\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the PHP License as published by the PHP Group\nand included in the distribution in the file:  LICENSE\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\nIf you did not receive a copy of the PHP license, or have any\nquestions about PHP licensing, please contact license@php.net.\n```\n\n```\n[PHP Modules]\napc\nbcmath\nbz2\ncalendar\nCore\nctype\ncurl\ndate\ndba\ndom\nereg\nexif\nfileinfo\nfilter\nftp\ngd\ngettext\nhash\niconv\nintl\njson\nlibxml\nmbstring\nmcrypt\nmemcache\nmemcached\nmhash\nmysql\nmysqli\nodbc\nopenssl\npcntl\npcre\nPDO\npdo_mysql\nPDO_ODBC\npdo_pgsql\npgsql\nPhar\nposix\nreadline\nReflection\nsession\nshmop\nSimpleXML\nsoap\nsockets\nSPL\nstandard\nsysvmsg\nsysvsem\nsysvshm\ntokenizer\nwddx\nxdebug\nxml\nxmlreader\nxmlwriter\nzip\nzlib\n\n[Zend Modules]\nXdebug\n```\n"
            },
            {
                "title": "[Security] Added missing property",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n"
            },
            {
                "title": "Added missing property",
                "body": ""
            },
            {
                "title": "[Form + Validator]validation_constraint as options",
                "body": "Hello, I used to use this code :\n\n``` php\n<?php\n    $constraint = new Assert\\Collection(array(\n        'email' => array(\n            new Assert\\NotBlank(),\n            new Assert\\Email(),\n        ),\n        'password' => new Assert\\NotBlank(),\n    ));\n\n    $datas = array();\n\n    $builder = $app['form.factory']->createBuilder('form', $datas, array('validation_constraint' => $constraint));\n\n    $form = $builder\n        ->add('email', 'email', array('label' => 'Email'))\n        ->add('password', 'password', array('label' => 'Password'))\n        ->getForm()\n    ;\n```\n\nAs you can see here : https://github.com/lyrixx/Silex-Kitchen-Edition/blob/master/src/controllers.php#L17\n\nI updated my vendor this morning, and the validation is broken. Nothing happens. The form is valid even if i don't fill any data into my form\n"
            },
            {
                "title": "[HttpFoundation] Added support for 308 / Permanent Redirect",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes (i guess) [![Build Status](https://secure.travis-ci.org/lyrixx/symfony.png?branch=patch-1)](http://travis-ci.org/lyrixx/symfony)\nFixes the following tickets: -\nTodo: -\n\nI know this is still a draft, but it is already implemented in Firefox.\n\nSee : \n- http://tools.ietf.org/html/draft-reschke-http-status-308-07\n- https://developer.mozilla.org/en/HTTP/HTTP_response_codes#308\n"
            },
            {
                "title": "[EventDispatcher] Removed useless code",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nJust removed useless code.\n\nBut one extra question: Why don't tests always use class constant ?\n"
            },
            {
                "title": "[Console] Added suggest on bad command name",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: namespace ?\n\nAdded something like in `git` :  if user type a wrong command and if a close alternative exists, Command compenent will display a list of similar command(s).\n\nNote : It does not work with namespace. If this PR will be merged, I could work on namespace.\n\nsee : https://github.com/fabpot/Twig/blob/master/lib/Twig/Environment.php#L1003\n"
            },
            {
                "title": "Made some small performance optimizations",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\n---\n\nI changed it because `$a[0]` is 10 time faster than `substr($a, 0, 1)`\n\n```\nphp > $a =  @testttttt  ; $t  = microtime(true); for ($i = 0 ; $i <= 10000000 ; $i ++) { $a[0] ; } ; echo  microtime(true) - $t;\n1.6929659843445\nphp > $a =  @testttttt  ; $t  = microtime(true); for ($i = 0 ; $i <= 10000000 ; $i ++) { substr($a, 0, 1) ; } ; echo  microtime(true) - $t;\n12.946933984756\n```\n\nAdd I fixed a CS typo in CsvFileLoader.php\n"
            }
        ],
        "pr_comments": [
            "This is a king of private namespace, to avoid any naming collisions.\n",
            "You are right. I Thought about this naming. But IMHO, it not enough. \nDo you want I rename this param ?\n",
            "Did not find a better way to avoid a double registration.\n",
            ":+1: with invalid argument exception\n",
            "good point.\n",
            "It is not possible. :(\nmay be, we can introduce a little **optional** coupling by allow the end user to give a translatorInterface to `getErrorsAsArray`\n\nso from the controller `$form->getErrorsAsArray($translator);`\n",
            "Not needed anymore.\n",
            "It could be another configuration param ?\n",
            "Yes of course. We have to find a clever way to fix that.\n",
            "This is a wip. Please read lines above\n",
            "This is for tests of  ldap/ldap class. May be we should remove tests of that class.\n",
            "I don't think it is. The verification is done in LdapAuthenficationProvider.\n",
            "Fixed\n",
            "Added a new param.\n",
            "Fixed.\n",
            "Fixed. Added a new param.\n",
            "Fixed.\n",
            "I removed all tests about ldap/ldap class\n",
            "Ok.\nThis point is my real issue.\n\nI can add another factory, but it will a copy / paste of FormLoginFactory.\nMoreover, a start to work with FormLoginFactory, but I will have to duplicate HttpBasicFactory. And maybe others ...\n\nSo I don't think it's a good idea.\n\nWe need feedback here.\n",
            "I totally agree with you. Of course I will _not_ let this code in place.\n\nSo for now, i will duplicate the factory ..\n",
            "Fixed.\n",
            "Added 2 new factories.\n",
            "Because I need to store the password in the User.\n",
            "What exception can be throw ?\n",
            "Yes, the plain-text password is store in the session.\nWhat do you recommend ?\n",
            "fixed.\n",
            "Fixed thanks.\n",
            "We can use a `UserProvider`, be we will have to add another `User` class which will support `setPassword()`. I think it's useless to add an overhead here.\n\n`UserProvider::loadUserByUsername` is not possible due to ldap limitation. Thats why, IMHO it's easier to no use this method.\n",
            "BTW : It's possible to check if a user exists in the ldap. But the LDAP will not return the password (plain text or not)...\nThen, the query to find the user is very difficult to find.\n",
            "Should I  let the ConnectionException ?\n",
            "I can not figure out how to achieve that.\n",
            "Fixed.\n",
            "Fixed.\n",
            "Fixed.\n",
            "It's a problem ? in this case, the ldap bind can be possible, so a `UsernameNotFoundException` will be throw.\n",
            "Fixed.\n",
            "I don't think, why ?\n",
            "Fixed.\n",
            "@pborreli Thanks, fixed.\n\n@schmittjoh +1 for OAuth. We will see this in another PR. Can you review this one ?\n",
            "@relwell OK, i understand now. You are right. \n",
            "I used to use static everywhere ;)\n",
            "I changed to self, but Why did you said that ? static is slower than self ?\n",
            "I thought it was only for LSB. Can you tell me more about this private vs protected ?\n",
            "@fabpot I fixed name. And also remove `isNormal` as it is useless (I agree with @stof)\n",
            "This can make test unstable, but IMHO, nobody have a resolution of `5000 lines * 100000 columns`\n",
            "Good catch ;) Thanks.\n",
            "Why ?\n",
            "Ok. Is that good now ?\n",
            "I don't understand why I have to do that, But I have updated the patch.\n",
            "I did not know :o Thanks ;)\n",
            "Because I did not think enough ;)\n\nFixed. I added the php doc. \n\nI noticed there is no strict standard in Symfony2 about `@param int` vs `@param integer`. Do you want a PR in order to fix that ?\n",
            "Fixed. Wahoo This PR was very difficult ;) Sorry.\n",
            "@fabpot  fixed.\n",
            "Can you add the  key  of the value to message ? It will be easier to debug with it.\n",
            "@fabpot does not like this kind of markup. This is not  real  markdown. Please use indentation.\n",
            "It seams this constant is never used.\n",
            "do you really think this is more readable ? I found this line quite long\n",
            "@stof will tell you that we do not wrap constructor argument in symfony code base ;)\n",
            "It could be useful to be able to not throw the exception ; like in the HttpKernel.\n\nUse case : you have a long running process like a rabbitmq consumer. With this feature, we could delegate the exception process into a dedicated event listener and make the  raw  command cleaner.\n",
            "Fixed.\n",
            "I did the same thing as above : https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Extension/HttpKernelExtension.php#L60\n\nPeople can do some mistakes.\n",
            "Ok. Fair enought \n",
            "No need for `static` here.\n",
            "this code is in a `spaceless` tag. So you don't need to use `{%-`, `{%` is enougth\nit's the same for other lines.\n",
            "@stof , @Dinduks  ok thanks.\n",
            "OK, I Fixed it.\n",
            "This is a king of private namespace, to avoid any naming collisions.\n",
            "You are right. I Thought about this naming. But IMHO, it not enough. \nDo you want I rename this param ?\n",
            "Did not find a better way to avoid a double registration.\n",
            "This is a king of private namespace, to avoid any naming collisions.\n",
            "You are right. I Thought about this naming. But IMHO, it not enough. \nDo you want I rename this param ?\n",
            "Did not find a better way to avoid a double registration.\n",
            ":+1: with invalid argument exception\n",
            "good point.\n",
            ":+1: with invalid argument exception\n",
            "good point.\n",
            "It is not possible. :(\nmay be, we can introduce a little **optional** coupling by allow the end user to give a translatorInterface to `getErrorsAsArray`\n\nso from the controller `$form->getErrorsAsArray($translator);`\n",
            "It is not possible. :(\nmay be, we can introduce a little **optional** coupling by allow the end user to give a translatorInterface to `getErrorsAsArray`\n\nso from the controller `$form->getErrorsAsArray($translator);`\n",
            "Not needed anymore.\n",
            "It could be another configuration param ?\n",
            "Yes of course. We have to find a clever way to fix that.\n",
            "This is a wip. Please read lines above\n",
            "This is for tests of  ldap/ldap class. May be we should remove tests of that class.\n",
            "I don't think it is. The verification is done in LdapAuthenficationProvider.\n",
            "Fixed\n",
            "Added a new param.\n",
            "Fixed.\n",
            "Fixed. Added a new param.\n",
            "Fixed.\n",
            "I removed all tests about ldap/ldap class\n",
            "Ok.\nThis point is my real issue.\n\nI can add another factory, but it will a copy / paste of FormLoginFactory.\nMoreover, a start to work with FormLoginFactory, but I will have to duplicate HttpBasicFactory. And maybe others ...\n\nSo I don't think it's a good idea.\n\nWe need feedback here.\n",
            "I totally agree with you. Of course I will _not_ let this code in place.\n\nSo for now, i will duplicate the factory ..\n",
            "Fixed.\n",
            "Added 2 new factories.\n",
            "Because I need to store the password in the User.\n",
            "What exception can be throw ?\n",
            "Yes, the plain-text password is store in the session.\nWhat do you recommend ?\n",
            "fixed.\n",
            "Fixed thanks.\n",
            "We can use a `UserProvider`, be we will have to add another `User` class which will support `setPassword()`. I think it's useless to add an overhead here.\n\n`UserProvider::loadUserByUsername` is not possible due to ldap limitation. Thats why, IMHO it's easier to no use this method.\n",
            "BTW : It's possible to check if a user exists in the ldap. But the LDAP will not return the password (plain text or not)...\nThen, the query to find the user is very difficult to find.\n",
            "Should I  let the ConnectionException ?\n",
            "I can not figure out how to achieve that.\n",
            "Fixed.\n",
            "Fixed.\n",
            "Fixed.\n",
            "It's a problem ? in this case, the ldap bind can be possible, so a `UsernameNotFoundException` will be throw.\n",
            "Fixed.\n",
            "I don't think, why ?\n",
            "Fixed.\n",
            "@pborreli Thanks, fixed.\n\n@schmittjoh +1 for OAuth. We will see this in another PR. Can you review this one ?\n",
            "@relwell OK, i understand now. You are right. \n",
            "Not needed anymore.\n",
            "It could be another configuration param ?\n",
            "Yes of course. We have to find a clever way to fix that.\n",
            "This is a wip. Please read lines above\n",
            "This is for tests of  ldap/ldap class. May be we should remove tests of that class.\n",
            "I don't think it is. The verification is done in LdapAuthenficationProvider.\n",
            "Fixed\n",
            "Added a new param.\n",
            "Fixed.\n",
            "Fixed. Added a new param.\n",
            "Fixed.\n",
            "I removed all tests about ldap/ldap class\n",
            "Ok.\nThis point is my real issue.\n\nI can add another factory, but it will a copy / paste of FormLoginFactory.\nMoreover, a start to work with FormLoginFactory, but I will have to duplicate HttpBasicFactory. And maybe others ...\n\nSo I don't think it's a good idea.\n\nWe need feedback here.\n",
            "I totally agree with you. Of course I will _not_ let this code in place.\n\nSo for now, i will duplicate the factory ..\n",
            "Fixed.\n",
            "Added 2 new factories.\n",
            "Because I need to store the password in the User.\n",
            "What exception can be throw ?\n",
            "Yes, the plain-text password is store in the session.\nWhat do you recommend ?\n",
            "fixed.\n",
            "Fixed thanks.\n",
            "We can use a `UserProvider`, be we will have to add another `User` class which will support `setPassword()`. I think it's useless to add an overhead here.\n\n`UserProvider::loadUserByUsername` is not possible due to ldap limitation. Thats why, IMHO it's easier to no use this method.\n",
            "BTW : It's possible to check if a user exists in the ldap. But the LDAP will not return the password (plain text or not)...\nThen, the query to find the user is very difficult to find.\n",
            "Should I  let the ConnectionException ?\n",
            "I can not figure out how to achieve that.\n",
            "Fixed.\n",
            "Fixed.\n",
            "Fixed.\n",
            "It's a problem ? in this case, the ldap bind can be possible, so a `UsernameNotFoundException` will be throw.\n",
            "Fixed.\n",
            "I don't think, why ?\n",
            "Fixed.\n",
            "@pborreli Thanks, fixed.\n\n@schmittjoh +1 for OAuth. We will see this in another PR. Can you review this one ?\n",
            "@relwell OK, i understand now. You are right. \n",
            "You forgot the cache dir ?\n",
            "You forgot the cache dir ?\n",
            "You forgot the cache dir ?\n",
            "this code is in a `spaceless` tag. So you don't need to use `{%-`, `{%` is enougth\nit's the same for other lines.\n",
            "@stof , @Dinduks  ok thanks.\n",
            "this code is in a `spaceless` tag. So you don't need to use `{%-`, `{%` is enougth\nit's the same for other lines.\n",
            "@stof , @Dinduks  ok thanks.\n"
        ],
        "prs": [
            {
                "title": "[FrameworkBundle] Commands can be registered in the DIC",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | don't now |\n| Fixed tickets | #8166 |\n| License | MIT |\n| Doc PR | TODO |\n\nTodo:\n- [ ] Documentation\n- [ ] Clean code (add type hinting)\n- [ ] Add tests\n\nWhat do you think of that ?\n"
            },
            {
                "title": "[PHPDoc] Replaced ['int'=>'integer', 'boolean' => 'Boolean'] to increase consistency",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets |  |\n| License | MIT |\n| Doc PR |  |\n\nAnd also re-align some php doc block\n"
            },
            {
                "title": "[Process] Added ProcessBuilder::setEnvironmentVariables",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[PHPDoc] Added @since php doc",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8786 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[WIP][Security] Added Ldap provider",
                "body": "Bug fix: no, but may be\nFeature addition: yes\nBackwards compatibility break: no, but may be\nSymfony2 tests pass: no, not yet\nFixes the following tickets: -\nTodo: Finish implementation, Add more tests. Fix \\DependencyInjection\\Security\\Factory*`\nLicense of the code: MIT\nDocumentation PR: not available yet\n\nHello.\n\nFirst, it will be useful to have this provider into the security component. Thanks to this, the feature will be available into silex application, and also drupal 8 and ezpublish 5.\n\nI open a PR, but my work is not finished. It could be great to have an early feedback (not about CS, just about architecture)\n\nI read the codebase of bundles available on http://knpbundles.com/search?q=ldap but there is some issues with these bundles: \n- Dependency on `Zend\\Ldap` (opensky)\n- A global username / password account is not needed to check is a user is able to connect to ldap. (all bundle)\n- The factory are no enough flexible.\n\nOf course, I will rebase / squash all my commits before final merge (if happen).\n\nI am really not sure about      f40c85b \n\nI tried to keep the default workflow of the user authentification\nBut with ldap, we can not retrieve user password. The only way to check if a user is in a ldap server, and if he is able to connect to the ldap, it is to try to connect the user against the ldap.\n\nThen, we have an issue in `src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/UserProvider/*Factory.php`. \nFor exemple in https://github.com/lyrixx/symfony/blob/1834aaa11a9342455eaf30f1c6cd7ef69f951bdb/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/FormLoginFactory.php#L65 the `$provider` (AuthentificationProvider) is hardcoded. It should not be.\nSo, just for my test, i changed this value (this change breaks tests).\nBut we have to find a way to do this cleanly. How can we do that ?\n- (A) Duplicate the factory (Not ok with that)\n- (B) Add a new argument createAuthProvider\n- ??\n\nWith A option, there will be lot of code.\nWith B option, we could add BC break.\n"
            },
            {
                "title": "[FramworkBundle] Check event listener services are not abstract",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets |  |\n| License | MIT |\n| Doc PR |  |\n"
            },
            {
                "title": "[Console] Throw an exception if the Command __construct() method is not called",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| license? | MIT |\n\nIt can only happend if the constructor has been overridden\n"
            },
            {
                "title": "[Console] Escape exception message during the rendering of an exception",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nreopen #8853 against 2.2 branch\n\nWhen the exception message contains some HTML, this display is\nbroken.\n\nI don't know enought about the differents Output classes.\nMaybe we have to check the current Output class before\nescaping. But for the moment, we allways format the message\nwith error tags, so I guess the escape is not an issue.\n"
            },
            {
                "title": "[Console] Escape exception message during the rendering of an exception",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen the exception message contains some HTML, this display is\nbroken.\n\nI don't know enought about the differents Output classes.\nMaybe we have to check the current Output class before\nescaping. But for the moment, we allways format the message\nwith error tags, so I guess the escape is not an issue.\n\nAs this is a bug fix, should I re-open this PR against 2.2 branch ?\n"
            },
            {
                "title": "[TwigBridge] Prevent code extension to display warning",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nDuring functional testing with phpunit and browserkit (and all their friends) when the application returns a `4XX` or a `5XX` response, symfony displays the trace with code context.\n\nDuring a training, few people experienced a very weird issue with php 5.4, symfony 2.3.2, phpunit 3.7, Windows 7 or 8 and SensioLabsDesktop 0.5.\n\nWhen they run functional  tests, and the application returns a `404`, in the  console  there was lot of warnings. It was something like that `Warning: Unexpected character in input:  '\\' (ASCII=92) state=1 in /XXXXX on line 9` With the `@`, no more warnings.\n\nI can't reproduce this issue on my computer (not windows). If needed, I can try to reproduce this bug on Monday at work.\n"
            },
            {
                "title": "[TwigBridge] Prevent code extension to display warning",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nDuring functional testing with phpunit and browserkit (and all their friends) when the application returns a `4XX` or a `5XX` response, symfony displays the trace with code context.\n\nDuring a training, few people experienced a very weird issue with php 5.4, symfony 2.3.2, phpunit 3.7, Windows 7 or 8 and SensioLabsDesktop 0.5.\n\nWhen they run functional  tests, and the application returns a `404`, in the  console  there was lot of warnings. I don't remember, sorry, but it was something about unexpected character and/or encoding. With the `@`, no more warnings.\n\nI can't reproduce this issue on my computer (not windows). If needed, I can try to reproduce this bug on Monday at work.\n\nAnd I am not sure the issue is from symfony... And I can't find the warning message in google. \n"
            },
            {
                "title": " \t[Validator] Removed unnecessary check as symfony requires php >= 5.3.3. ",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | I guess |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[Console] Added more semantic commands to detect verbosity",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Console] Added a way to set terminal dimensions",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8595 |\n| License | MIT |\n| Doc PR | n/ |\n"
            },
            {
                "title": "[Tests] Tests on php 5.5 should pass",
                "body": "Because php 5.5 is stable now\n"
            },
            {
                "title": " \t[HttpFoundation] Fixed NativeSessionStorage:regenerate when does not exists",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8460 |\n| License | MIT |\n| Doc PR | - |\n\n**warning** I did not try to reproduce this bug, so I am not sure it fixes the issue. I just open a PR with the suggested patch. Tests for http foundation are OK. I am not sur it's the best way to fix this issue as I do not understand why symfony reach this code if $_SESSION is not set. \n"
            },
            {
                "title": "[2.3][CssSelector] Added test to highlight a regression",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | no (that's the point) |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nHello.\n\nI tried to use latest Symfony2 version in fapot/sismo, and sismo tests fail because of a regression in CssSelector Component.\n\nYou can easily reproduce it by cloning sismo, run a `composer update`, then `phpunit`.\n\nI tried to debug it, but DomDocument and XPath don't like me.\n\nping @jfsimon\n"
            },
            {
                "title": "[2.4][Filesystem] Fixed doc block on Filesystem::rename",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[HttpKernel] Fixed typo",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | did not changed code |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nThis is just a quick patch.\n\nBut I think we have a  big  issue here. If something wrong happen during the exception handling, the last exception is hidden. Of course, the last exception is logged, But IMHO, this not very handly.\n\nI try to isolate the bug in this simple gist https://gist.github.com/lyrixx/5570964#file-index-php .\nHere the debug is a nightmare for new comers. I let you try and see ;)\nIMHO, the last exception should not be hidden, but display.\n"
            },
            {
                "title": "[2.4][Console] Added status code to CommandTester and ApplicationTester",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes, but not on travis (segfault) |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nTheses classes are already statefull. They contain the input and the\noutput data. So we can safely add the last status code to the class.\n"
            },
            {
                "title": "[Console] Added status code to CommandTester and ApplicationTester",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nTheses classes are already statefull. They contain the input and the\noutput data. So we can safely add the last status code to the class.\n"
            },
            {
                "title": "[DependencyInjection] Add suggestions on ParameterNotFoundException",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | [no] |\n| New feature? | [yes] |\n| BC breaks? | [no] |\n| Deprecations? | [no] |\n| Tests pass? | [yes] |\n| Fixed tickets | [-] |\n| License | MIT |\n| Doc PR | [-] |\n"
            },
            {
                "title": "[Security] Removed unused var",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | I guess |\n| Fixed tickets | - |\n"
            },
            {
                "title": "[2.1][SecurityBundle] Fixed configuration exemple",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[2.2] Fixed the ConstraintValidator ",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "Updated UPGRADE-2.2.md for twig bridge section",
                "body": "| Q \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 | A |\n| --- | --- |\n| Bug fix? \u00a0 \u00a0 \u00a0 | yes |\n| New feature? \u00a0 | no |\n| BC breaks? \u00a0 \u00a0 | no |\n| Deprecations? | no |\n| Tests pass? \u00a0 | yes |\n| Fixed tickets | - |\n| License \u00a0 \u00a0 \u00a0 | MIT |\n| Doc PR \u00a0 \u00a0 \u00a0 \u00a0 | - |\n"
            },
            {
                "title": "Fixed typo with render_* function",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[EventDispatcher] Added GenericEvent::setSubject method",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n```\n\nIt is usefull if the observed subject is not an object\nand you don't want to give the subject by reference.\n"
            },
            {
                "title": "[EventDispatcher] Fixed php doc of GenericEvent::__construct",
                "body": "```\nBug fix: yes (doc)\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes (no modified)\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n```\n"
            },
            {
                "title": "[2.2][Routing] Added support for default attributes with default values of method params",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nWith this patch, you can configure your default values likes this:\n\n``` php\n/**\n * @Route( /hi/{name} , name= hi )\n */\npublic function hiAction($name =  Bob )\n{\n    return new Response($name);\n}\n```\n"
            },
            {
                "title": "[2.1][HttpFoundation] Fixed Php doc in Request::get",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nAccording to php code, `Request::get` method does not seek in cookies.\n"
            },
            {
                "title": "[Process][Tests] Prove process fail with chained commands",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: no\nFixes the following tickets: -\nTodo: Fix that\nLicense of the code: MIT\n\nThis PR is against 2.1 branch. Previous PR was #5575\n\nThis PR try to hiligh a regression in Process component.\n\n``` php\n$process = new Process( echo -n 1 && echo -n 1 );\n// or $process = new Process( echo -n 1 ; echo -n 1 );\n$process->run();\nvar_dump('11' == $process->getOutput()); // false, \nvar_dump($process->getOutput()); // '1', \n```\n\nThis test failed because of PR #5543 ; see https://github.com/symfony/symfony/commit/7bafc69f38a3512eb15aad506959a4e7be162e52#L0R233\n"
            },
            {
                "title": "[Process][Tests] Prove process fail",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: no\nFixes the following tickets: -\nTodo: Fix that\nLicense of the code: MIT\n\nI am not sure this is an issue, but the following code does not work : \n\n``` php\n$process = new Process( echo -n 1 ; echo -n 1 );\n$process->run();\nvar_dump('11' == $process->getOutput()); // false, \nvar_dump($process->getOutput()) // 1\n```\n\nI don't know why.\n\ntests are run on php 5.4.7 and ubuntu 11.04\n"
            },
            {
                "title": "[Console] Fixed message exception when command is not avaible",
                "body": "Bug fix: yes\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nLicense of the code: MIT\n\nFixed singular / plural\n`Did you mean this?` VS `Did you mean one of these`\n"
            },
            {
                "title": "[Security] Added missing property",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n"
            },
            {
                "title": "Added missing property",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Added support for 308 / Permanent Redirect",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes (i guess) [![Build Status](https://secure.travis-ci.org/lyrixx/symfony.png?branch=patch-1)](http://travis-ci.org/lyrixx/symfony)\nFixes the following tickets: -\nTodo: -\n\nI know this is still a draft, but it is already implemented in Firefox.\n\nSee : \n- http://tools.ietf.org/html/draft-reschke-http-status-308-07\n- https://developer.mozilla.org/en/HTTP/HTTP_response_codes#308\n"
            },
            {
                "title": "[EventDispatcher] Removed useless code",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nJust removed useless code.\n\nBut one extra question: Why don't tests always use class constant ?\n"
            },
            {
                "title": "[Console] Added suggest on bad command name",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: namespace ?\n\nAdded something like in `git` :  if user type a wrong command and if a close alternative exists, Command compenent will display a list of similar command(s).\n\nNote : It does not work with namespace. If this PR will be merged, I could work on namespace.\n\nsee : https://github.com/fabpot/Twig/blob/master/lib/Twig/Environment.php#L1003\n"
            },
            {
                "title": "Made some small performance optimizations",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\n---\n\nI changed it because `$a[0]` is 10 time faster than `substr($a, 0, 1)`\n\n```\nphp > $a =  @testttttt  ; $t  = microtime(true); for ($i = 0 ; $i <= 10000000 ; $i ++) { $a[0] ; } ; echo  microtime(true) - $t;\n1.6929659843445\nphp > $a =  @testttttt  ; $t  = microtime(true); for ($i = 0 ; $i <= 10000000 ; $i ++) { substr($a, 0, 1) ; } ; echo  microtime(true) - $t;\n12.946933984756\n```\n\nAdd I fixed a CS typo in CsvFileLoader.php\n"
            }
        ]
    },
    "47313": {
        "repos": [
            "The Symfony PHP framework"
        ],
        "commit_comments": [
            "I fixed the stable issue for the 2.2.0-BETA1 release. Sorry about this.\n\nAs for the changes in the YAML component, there were none that would affect your usage of YAML (I've just checked your code). So, it is safe to at least allow ` >=2.1.0,<2.4.0 `.\n",
            "Something like this?\n\n``` php\n<?php\n\nspl_autoload_register(function ($class) {\n    if (file_exists($file = __DIR__.'/'.str_replace('\\\\', '/', $class).'.php')) {\n        require_once $file;\n    }\n});\n\n```\n",
            "It was just a quick example (that I did not test). But I jsut wanted to validate the approach. If that's ok, that will be available with the next versions.\n",
            "@edorian: I'd like to understand your concern better. AFAIK, Symfony YAML 2.2 is totally compatible with the 2.1 version. The recently released 2.2.0 beta2 also includes an autoloader as asked by @sebastianbergmann. If there are some regressions in the YAML component or the Finder one, I'd like to know about them so that we can fix them.\n",
            "fixed now\n",
            "fixedi n 27cc10c\n",
            "fixed since then\n",
            "@Taluu Can you open a new issue?\n",
            "That breaks `FormInterface` contract and makes things fail on at least PHP 5.3. See https://travis-ci.org/fabpot/symfony/jobs/10541904\n",
            "ping @bschussek \n",
            "fixed\n",
            "No, the code is correct\n",
            "Default indentation was 2 in Symfony 2.0 and 4 as of Symfony 2.1. I've fixed that now.\n",
            "@ahundiak Can you create a ticket instead so that we don't loose your comment?\n",
            "ping @vicb \n",
            "fix now, thanks for the report.\n",
            "I've discussed this possibility with others, but I first wanted to fix the security issues. The refactoring can happen later and probably not before Symfony 2.2 anyway.\n",
            "fixed now. Thanks.\n",
            "fixed, thanks.\n",
            "Right, fixed.\n",
            "fixed, thanks.\n",
            "But PHP 5.3.3 and before just do not work. Anyway, you can still deploy your application even with a lower version of PHP, you are just on your own.\n",
            "What do we want? Lie or be honest about the real dependencies? We have numerous bug reports about PHP 5.3.3. People have a really hard time finding the reason of the bug because problems occur randomly. The truth is that PHP 5.3.3 is buggy; it just does not work.\n\nThe other alternative is to keep 5.3.3 in the composer files, keep 5.3.3 is the Symfony requirements and make a big warning if 5.3.4 is installed and in the docs.\n\nWhat do you think?\n",
            "Based on the comments on this commit, I think I'm going to revert to 5.3.3 and add an optional check in the Symfony requirements as we have already done for the annotation problem:\n\n```\n    $this->addRecommendation(\n        version_compare($installedPhpVersion, '5.3.8', '>='),\n        sprintf('Annotations might not work properly due to the PHP bug #55156 before PHP 5.3.8 (%s installed)', $installedPhpVersion),\n        'Install PHP 5.3.8 or newer if your project uses annotations'\n    );\n```\n",
            "see d09bfe755214\nsee sensio/SensioDistributionBundle@5886adae1613c0a72fbb95259a83ae798e86c0d3\n",
            "that is what return does, so it still fits.\n",
            "fixed.\n",
            "@jalliot stupid me. Fixed now. Thanks.\n",
            "What about:  Despite its name, this method does not imply any parent/child relationship... \n",
            "@manuelmazzuola You must report this issue on the fos_rest repository as it must be fixed there.\n",
            "I'm removed the code as it is not even used\n",
            "oops, thanks for catching it!\n",
            "it just works.\n",
            "The previous code did not worked at all as `routes` is an array, not an object. Whenever you override a route, the other ones with the same name are removed, so everything should work as expected.\n",
            "fixed now ;)\n",
            "This is an abstract class. The concrete class is generated under the `app/` directory. So, overriding the ESI class is just a matter of overriding the `getEsi()` method.\n",
            "fixed now\n",
            "You are right. Fixed now.\n",
            "What do you mean?\n",
            "@lsmith77: The code is different from the one we have removed some time ago. Here, I've just fixed a bug because the Store set a wrong `Content-Length` header.\n",
            "Right, this is really just an implementation detail. I'm going to remove these methods altogether.\n",
            "Correct. If you allow the user to change its primary key, then the security issue stil exist. But frankly, I don't think this happens a lot, does it?\n",
            "When we throw the exception, the buffers will be cleared later on and the current content will be displayed on the error page. If I move the cleanup above, we will loose the current output. \n",
            "fixed now\n",
            "@staabm: good catch. fixed now.\n",
            "This has been reverted as the `INI_SCANNER_RAW` mode is buggy. It is unable to parse correctly something like `foo= foo;bar `, which is quite frequent if you are defining a DSN in your `parameters.ini` file.\n",
            "What does it break? Problem was that Doctrine caches the abstract annotations and reused them for all classes extending the abstract class. Adding a `@Controller` annotation is not an option for the 2.0 branch.\n",
            "An abstract class can never be a controller; you must at least extends it to make it usable by PHP. So, I still don't see the problem.\n",
            "Now I understand why it is a problem for your specific case, but the patch actually fixes a much more common use case where you have an abstract controller used by several concrete controller classes:\n\n```\nController/\n    AbstractController.php\n    BlogController.php (extends AbstractController)\n    ForumController.php (extends AbstractController)\n```\n\nIn this case, and if you configure the routing to read all controllers from the `Controller\\` subnamespace, the routes won't be the right ones.\n",
            "This is a bug fix for 2.0 as the common use case does not work.\n",
            "yes, it makes sense. And the exception is quite clear about why it can be needed (which is not the case here):  Please add the class to service  %s  even if it is constructed by a factory since we might need to add method calls based on compile-time checks. \n",
            "That's already taken into account as all  real  whitespaces have already been removed at this point.\n",
            "@api will be in effect when 2.0 is released. I've changed the signature to allow better extensibility in the future, like passing an object.\n",
            "Can you try with the latest Symfony Standard? Should be fixed after this commit on DistributionBundle: https://github.com/sensio/SensioDistributionBundle/commit/029151792beac272548fe9df183e15b9be521870\n",
            "I was thinking about a few different messages for some other HTTP status code like 401, ...\n",
            "no, as by default, we only use it in debug mode in Symfony.\n",
            "This was already the case before.\n",
            "The exception must be thrown when the data is not array and not a Traversable+ArrayAccess.\n",
            "ah ok, I thought you were talking about the if statement. This is fixed now.\n",
            "Can you explain the vulnerability? (reverted)\n",
            "If it returns null, you have a big problem as we are using a Proxy object generated by Doctrine. So, it should never happen.\n",
            "done\n",
            "Good catch. Fixed here: https://github.com/symfony/symfony/commit/9cd15908f374d274c671157289d2f5086a5c236e\n",
            "Can you create a ticket for this issue so that we don't forget about it? Thanks.\n",
            "The dependency is optional. You can pass null (see the constructor below).\n",
            "I'm pretty sure that PHP does not autoload type hints.\n",
            "done here: https://github.com/symfony/symfony/commit/2e1747bf760e01673db5493ae20f240e5a18b05d\n",
            "@vicb: right. fixed here: https://github.com/symfony/symfony/commit/627a7f7cd416aa647c2670ee6f4d027ad647646b\n",
            "second one is what we do.\n",
            "fixed, thanks.\n",
            "Very good catch. Fixed here: https://github.com/symfony/symfony/commit/2d91183d86ac6839d1c86717802ed2bcf09c64f9\n\nThanks.\n",
            "fixed, thanks.\n",
            "When overriding the `matches()` method, you call the parent, right? All methods are either public or protected, so you can use any of them. I fail to understand what you cannot accomplish. Can you share your use case?\n",
            "You're right of course. I don't know what I was thinking when I wrote this line. Thanks.\n",
            "done: https://github.com/symfony/symfony/commit/d6a4bcc7f495c25985bb95520f9f791694e95db4\n",
            "I've just made a small update to avoid the generation of the `orm:` prefix as it's not needed anymore. But as the Doctrine EntityManager class does not add the `use` statements yet, it won't work. In the meantime, you can just add this use statement in the generated classes: `use Doctrine\\ORM\\Mapping as ORM;` and add `ORM\\` for all annotations. Sorry for the inconvenience.\n",
            "@pborreli: Can you remind me why you wanted to set `bypass_shell` to on?\n",
            "should be fixed now.\n",
            "It is a supported extension point as it greatly simplifies the redefinition of existing services like the router.\n",
            "What's the benefit?\n",
            "done\n\nOn 5/11/11 6:21 PM, lsmith77 wrote:\n\n> So that I can use it in https://github.com/FriendsOfSymfony/RestBundle/blob/master/Controller/ExceptionController.php#L129\n> That being said, its a common theme that I ask about such changes: https://github.com/sensio/SensioFrameworkExtraBundle/pull/25\n> \n> Another option might be adding a TemplateReference::fromString() static method?\n",
            "@lsmith77: I've also merged the PR for FrameworkExtraBundle\n",
            "@marijn: it's already included in Symfony SE.\n",
            "I'm trying to have shorter paths, and a less deep directory structure. As I expect that most people will use one file for all their mappings, `config/doctrine.orm.dcm.xml` is better than having an `orm` directory with only one file.\n\nAre you open to add the option of having all mappings in one file into Doctrine 2.1 or 2.2?\n",
            "Now, you have the best of both worlds: a single file or many small ones. You can even have a big file and some small ones if you have entities with lots of metadata. We can see if we can support the same strategy for validation.\n",
            "we are talking about a config/ directory under a bundle. How many config files do you here? One for the routing? One for your services? One for the doctrine metadata (and perhaps of few more if you use one file per entity)? That's not a lot of them.\n",
            "@lenar: `orm` is needed as the ODM uses the same `.dcm.xml` extension.\n",
            "If we add `/doctrine`, we should change the name for the default mapping file from `doctrine.orm.dcm.xml` to something else. Like in symfony1, `schema.orm.dcm.xml`? or `mapping.orm.dcm.xml`?\n",
            "https://github.com/symfony/symfony/commit/d9299e930b0a3b000abf98eaefca1118149587c6\n",
            "The Proxy sub-namespace is for commands that are just proxies to the ones from the Doctrine project.\n",
            "The `doctrine.orm.default_entity_manager` parameter contains the name of the default entity manager (this is a parameter, not a service).\n",
            "Have you tried with the latest version? I have fix a bug here: https://github.com/symfony/symfony/commit/32070f5f6807d8878c6edf8d6c1ad055df1e57ba\n",
            "ok, I understand what's going on now. I will provide a fix ASAP.\n",
            "should be fixed now: https://github.com/symfony/symfony/commit/25ae70eb752272cd08b5225af43ae277b6e7a5bc\n\nCan you confirm that it works for you?\n",
            "It cannot end with / as this is a prefix to something else that must start with a /.\n",
            "Problem is that it's late now to do this as it will probably break a lot of code (which routing file looks like a mess?).\n",
            "The new compiler is indeed stricter (it forbids the usage of the path separator in values). In your case, you must override the default requirement.\n",
            "Sorry, I thought you were passing `11/topic` as a value for `forumId`. I see now the `/topic` is the suffix of the pattern. I've just tested your route and it works fine for me. Can you give me the code that generates the URL?\n",
            "Ok, I've found the problem and it should be fixed now:\n\nhttps://github.com/symfony/symfony/commit/035afc1f4e9dccab7d51614d3a55cfd70052e365\n",
            "reverted\n",
            "AFAIK, the order of bundles registration is not significant.\n",
            "It's not possible. Each bundle configuration is independent from the others.\n",
            "But we should not encourage this practice.\n",
            "This patch is indeed small, but just because of the routing refactoring I did today ;)\n",
            "@benjamindulau: this is indeed a bug.\n",
            "This is fixed now.\n",
            "You can configure it via the `http_port` option of the `router` configuration.\n",
            "Good catch. I totally forgot to have a look at the Apache URL matcher.\n",
            "I have a commit where I remove the ChannelListener but I decided to keep it for now. They look similar but they solve different problems:\n\nThe pros for the _scheme routing requirement:\n- It feels more natural to have this feature in the Routing component (we already have HTTP method requirement); people will probably find it easier to configure it this way.\n- The Routing takes care of generating absolute HTTPS or HTTP URLs when it makes sense (which avoids the redirection round trip most of the time) -- this is probably the biggest advantage of this solution over the previous one.\n- It is faster as the requirement is  compiled  into the cache.\n- You can use the feature even if you don't use the Security component (and almost everybody use the Routing).\n\nThe pros of the ChannelListener:\n- The requirement being defined in the route definition, it's not possible to change it for a third-party bundle (think of the admin gen bundle which you want to be served as HTTPS only).\n- Configuration is on a route basis, and not a regexp like in the Security component (securing everything under `/admin` for instance).\n",
            "Taking on what?\n",
            "Use a file instead of memory.\n",
            "reverted\n",
            "fixed (but it's not used anywhere AFAIK).\n",
            "I have reverted the introduction of the interface.\n",
            "fixed, thanks.\n",
            "Remove files is a slow operation anyway.\n",
            "yes\n",
            "I have not yet reviewed the HttpKernel component for the change from protected to private. \n",
            "done, thanks.\n",
            "hehe, sometimes things can be much easier that they seem to be. I will update the code.\n",
            "That's probably because something coming from an XML file is not cast to a string.\n",
            "yes, these tests are flawed. They need to be rewritten.\n",
            "reverted\n",
            "Can you make another pull request to fix the problems? Thanks.\n",
            "I must have missed something here, but we discussed this patch last Saturday, and I honestly thought that we reached an agreement on it. Anyway, that's not my patch, I don't really care one way or another, so I will let Lukas and Kris discuss the matter and apply whatever you decide.\n",
            "The Controller::redirect() method has been removed as it's not shorter than using the RedirectResponse class directly.\n",
            "That makes sense. I will create a RedirectResponse class.\n",
            "https://github.com/symfony/symfony/commit/353177d1d66ea220137beeedb0d50915b45f88ec\n",
            "Cannot be a sequence as we have a max > 1.\n",
            "we are working on it.\n",
            "It's because some HTTP exceptions are also defined by the Security component.\n",
            "The execute method is not abstract (and so the Command class is not abstract either) because you can use this class as a concrete class. In this case, instead of defining the execute() method, you set the code to execute by passing a Closure to the setCode() method.\n\nHere is the relevant code in run():\n\n```\n    if ($this->code) {\n        return call_user_func($this->code, $input, $output);\n    } else {\n        return $this->execute($input, $output);\n    }\n```\n\nAnd a usage example:\n\n```\n$app = new Application('myapp', '1.0');\n$app->register('project:foo')\n  ->addArgument('name', InputArgument::OPTIONAL, 'The name to greet', 'World')\n  ->addOption('fancy', 'f', InputOption::VALUE_NONE, 'The fancy switch')\n  ->setDescription('This is the project:foo task')\n  ->setHelp('Some help...')\n  ->setCode(\n    function (InputInterface $input, OutputInterface $output)\n    {\n      $output->write('<info>Hello</info> '.$input->getArgument('name').($input->getOption('fancy') ? '!' : ''));\n    }\n  )\n;\n$app->run();\n```\n\nI have just added a comment to the execute(), run(), and setCode() methods to make things clearer:\n\nhttps://github.com/fabpot/symfony/commit/2547bbffc39e7b29b4b4023377e509612d9e8e56\n",
            "There is none. But as there is automatic output escaping, I don't see a need for that.\n",
            "I have renamed it to _SESS.\n",
            "fixed\n",
            "fixed.\n",
            "I don't understand your suggestion. Can you be a bit more explicit?\n",
            "It does matter. Can someone make the change and send a pull request?\n",
            "fixed. thanks.\n",
            "This has been fixed since then\n",
            "I was probably a bit too fast on this one. I have reverted the change for now to allow more discussion.\n",
            "Why? From the spec:\n\n In YAML block styles, structure is determined by indentation. In general, indentation is defined as a zero or more space  characters at the start of a line. \n",
            "Keep the symfony 1.X coding standards.\n",
            "fixed, thanks.\n",
            "fixed, thanks.\n",
            "done in 1a3790a636f78ec7c5b08e6981672cf323428c5c\n",
            "This method has not the `@api` tag, so we will be able to change it in 2.1.\n",
            "good suggestion. fixed now. see http://github.com/fabpot/symfony/commit/c46884044dd42208a7f1e1c9548447835e01f043\n",
            "... which is not really a problem, is it?\n",
            "Because all the components must be independant\n",
            "I'm sure this is possible. The goal is to allow any extension tags anywhere. I think it does not really make sense to force any order for the extension and seems impossible to me. But perhaps I'm missing something here, any other suggestion?\n",
            "IIUC, it means that extension can only be defined after imports, parameters, and services. That's ok and not really a problem. But, in user configuration files, most of the time there is no services defined, so the minOccurs for services cannot be 1.\n",
            "The use case. This is the basic use case. Open any config.xml file, and it's only about extensions.\n",
            "@nifr You should probably add a link to the phar on the website instead of the zip or tar.\n",
            "It looks weird to me. `VALUE_NONE` means that it does not accept any value, which is not the case. This is important as quite a lot of automated tools uses these values to build UI on top the console commands.\n",
            "Missing license block header (probably also on some other files).\n",
            "fixed now\n",
            "I might be wrong, but that's a new  feature ? Or is it already used somewhere?\n",
            "You should probably add some unit tests as this is quite sensitive.\n",
            "@willdurand since 2005\n",
            "No worries, that happens once for everyone ;)\n",
            "yes\n",
            "AFAIU, gzcompress is part of zlib which is not available in PHP by default.\n",
            "As gzcompress is not always available, this PR is not mergeable.\n",
            "You want to include a zlib impl in PHP?\n",
            "IMO, this is wrong. What if you have some heredocs?\n",
            "When would that occur?\n",
            "Very funny. Can you give me an example with a circular reference that would not be detected by PHP itself?\n",
            "That's my point. So, what about removing it altogether?\n",
            "Of course it does. What's the point in adding code that will never be executed?\n",
            "It does not make any sense to keep it.\n",
            "Right. Do you override `security.firewall`?\n",
            "Honestly, I didn't thought that this one would be overridden.\n",
            "I've added a note in the CHANGELOG: f307ef763721b0ba386630e61a1fc576c2507e8c\n",
            "fixed, thanks.\n",
            "Should probably be updated too (time -> duration).\n",
            "should read:  @deprecated Deprecated since version 2.2, to be removed in 2.3. \n",
            "You should also add a note about this in the CHANGELOG and in the UPGRADE file.\n",
            "Are you sure this is an optimization? Have you tested that change? Because, IIRC, static method calls are slower in PHP. So, please do apply micro-optimizations, that does not make sense.\n",
            "The same changes has been in lxml, but then changed to something else again for performance reasons.\n\nSee https://github.com/lxml/lxml/commit/5fc9eac1edea42ec46422c6c7b017ee11c4a9531\n\nI'm no expert in XPath, so I don't know what to think about these changes. What do you think?\n",
            "Can you create a PR with just this commit? After that, I would like to backport fixes that have been done upstream, and try to not diverge too much from upstream (as it makes maintenance easier for us to backport future upstream fixes).\n",
            "Exactly. The project is not independent and many changes have been made. If you can work on that, this would be wonderful!\n",
            "We don't use HTML in our phpdoc (I know that we have some at other places but they should be removed as well). Using Markdown would be better instead as this is probably the new convention that will be adopted by the main phpdoc generators.\n",
            "we never do this in Symfony. We always keep the signature on one line.\n",
            "I know that some CS are wrong at some places. But let's try to not add more exceptions ;)\n",
            "Why have you removed this comment?\n",
            "@henrikbjorn: this class is part of Twig, so it is always available\n",
            "@Seldaek: All core extensions are enabled by default.\n",
            "I realize that you have probably missed the fact that the Debug extension is now part of Twig 1.5.\n",
            "Which one? I don't see anything (useful most of the time) missing now.\n",
            "ok, I've removed the method.\n",
            "no because in this specific case, MB is always the best choice.\n",
            "The big benefit of subscribers is that you don't need to repeat the priority and the method name in the configuration. As all event listeners in Symfony are also used in Silex, that's a big benefit. So, yes, I changed my mind ;)\n",
            "I've updated everything according to the upstream implementation. There is nothing I can do about it.\n",
            "Damned! Some PR merging went wrong and master has been merged into the 2.0 branch.\n",
            "Apparently, I've merged #2258 (which was based on master) on the 2.0 branch.\n",
            "Why not use $this->container->getParameterBag()->resolveValue('...');?\n",
            "@weaverryan: I think Symfony2 and symfony1 behave the same here.\n"
        ],
        "commits": [
            "[DependencyInjection] added a simple way to replace a service by keeping a reference to the old one",
            "merged branch Burgov/patch-4 (PR #8355)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nFixed typo\n\nCommits\n-------\n\n6fdf8cf Fixed typo",
            "[HttpFoundation] added a way to override the Request class",
            "Merge branch '2.3'\n\n* 2.3:\n  Fixing singular form for kisses, accesses and addresses.\n  fixed some circular references\n  [Security] fixed a leak in ExceptionListener\n  [Security] fixed a leak in the ContextListener\n  Ignore posix_istatty warnings\n  removed unused variable\n  [Form] fix iterator typehint\n  typos\n  Button missing getErrorsAsString() fixes #8084 Debug: Not calling undefined method anymore. If the form contained a submit button the call would fail and the debug of the form wasn't possible. Now it will work in all cases. This fixes #8084\n  Use isset() instead of array_key_exists() in DIC\n  Fixed annotation\n  [BrowserKit] fixed method/files/content when redirecting a request\n  [BrowserKit] removed some headers when redirecting a request\n  [BrowserKit] fixed headers when redirecting if history is set to false (refs #8697)\n  [HttpKernel] fixed route parameters storage in the Request data collector (closes #8867)\n  [BrowserKit] Pass headers when `followRedirect()` is called\n  Return BC compatibility for `@Route` parameters and default values\n\nConflicts:\n\tsrc/Symfony/Component/Security/Http/Firewall/ContextListener.php",
            "[Validator] Renamed Condition to Expression and added possibility to set it onto properties",
            "[Validator] added a constraint that runs an expression",
            "[ExpressionLanguage] added the component",
            "[ExpressionLanguage] added support for regexes",
            "[DependencyInjection] added support for expressions in the service container",
            "[HttpFoundation] added ExpressionRequestMatcher",
            "added support for expression in control access rules",
            "added a Twig extension to create Expression instances",
            "[ExpressionLanguage] improved performance",
            "[Routing] added support for expression conditions in routes",
            "mades things more consistent for the end user",
            "added optimized versions of expressions",
            "merged branch gnutix/2.3 (PR #8339)\n\nThis PR was submitted for the 2.3 branch but it was merged into the master branch instead (closes #8339).\n\nDiscussion\n----------\n\n[Routing] Add an extension-point for DI into the Matcher/Generator Dumpers\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nThe Routing's MatcherDumper and GeneratorDumper classes are instantiated very deeply into the `Router::getGenerator()` and `Router::getMatcher()` methods.\n\nThis pull requests aims to :\n 1. separate the instances creation\n 2. ease overriding (lesser risks of changes at framework updates)\n 3. ease dependencies injection for these classes (as we can't inject dependencies in another way, be it service definition, compiler pass or whatever I'm aware of).\n\nAn example of usage would be the following : https://gist.github.com/gnutix/5844630\nIt's a real case I'm having in my company's current project.\n\nCommits\n-------\n\n5a03a7f [Routing] Add an extension-point for DI into the Matcher/Generator Dumpers",
            "fixed typo",
            "merged branch jakzal/templating-delegating-engine (PR #8280)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Templating|FrameworkBundle] Made DelegatingEngine::getEngine() public\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7254\n| License       | MIT\n| Doc PR        | -\n\nAs a bonus I've covered both classes with tests.\n\nCommits\n-------\n\na54cbff [FrameworkBundle] Made DelegatingEngine::getEngine() public.\n3f84cd3 [Templating] Made DelegatingEngine::getEngine() public.\n0a72a99 [FrameworkBundle] Added tests for the DelegatingEngine.\n6c31ab2 [Templating] Added tests for the DelegatingEngine.",
            "[Security] updated the CHANGELOG",
            "Revert  marked some classes as being experimental in 2.3 \n\nThis reverts commit 74cfc84c87ac281d1ed5aeb8eca9c86ae46c50cf.",
            "merged branch alexpods/guess_client_extension_fix (PR #7990)\n\nThis PR was squashed before being merged into the master branch (closes #7990).\n\nDiscussion\n----------\n\n[HttpFoundation][File][UploadedFile] Fix guessClientExtension() method\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n\n1) Change getMimeType() by getClientMimeType() (we are guessing extension based on client information after all)\n2) Add use of missing namespace (ExtensionGuesser)\n3) Add tests for getClientExtension() method\n\nCommits\n-------\n\nbe42dbc [HttpFoundation][File][UploadedFile] Fix guessClientExtension() method",
            "merged branch stof/composer_replace (PR #7995)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nAdded the replace constraint for ProxyManagerBridge\n\nCommits\n-------\n\n912a383 Added the replace constraint for ProxyManagerBridge",
            "[HttpFoundation][File][UploadedFile] Fix guessClientExtension() method",
            "[SecurityBundle] fixed deps on the security component",
            "merged branch tucksaun/patch-1 (PR #7952)\n\nThis PR was submitted for the 2.1 branch but it was merged into the master branch instead (closes #7952).\n\nDiscussion\n----------\n\n[TwigBridge] Make getNodeVisitors call getTranslationNodeVisitor()\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Applies to | 2.1+\n| Tests pass?   | yes\n| Fixed tickets | N/A\n| License       | MIT\n| Doc PR        | N/A\n\nCommits\n-------\n\n20977e2 [TwigBridge] Eased translationNodeVisitor overriding in TranslationExtension",
            "merged branch pborreli/typos-isbn (PR #7761)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nFixed typos\n\nSorry for the multiple PRs\n\nCommits\n-------\n\n6ef7f10 Fixed typos",
            "merged branch Burgov/patch-3 (PR #6702)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n6b669fb Update src/Symfony/Component/Security/Resources/translations/security.nl.xlf\n\nDiscussion\n----------\n\nUpdate src/Symfony/Component/Security/Resources/translations/security.nl.xlf\n\nsee #6668\n\nSome more minor tweaks",
            "[TwigBundle] fixed PHP notice",
            "[Swiftmailer] updated Swiftmailer dep",
            "merged branch mweimerskirch/patch-9 (PR #6682)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nb92973c Fixed German translations for security component\n\nDiscussion\n----------\n\nFixed German translations for security component\n\nauthentication != authorisation\nplus a few other minor things",
            "[Config] renamed keepKeys() to normalizeKeys() (refs #6367)",
            "merged branch fabpot/config-key-normalization (PR #6367)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n6efae29 [TwigBundle] fixed configuration to avoid key normalizations for paths and globals (closes #5998)\ne31d4f1 [Config] allowed the disabling of key normalization on some array nodes\n\nDiscussion\n----------\n\nConfig key normalization\n\nThis is a quick proof-of-concept for a better fix of #6086, where key normalizations can be disabled on specific nodes. The previous patch was not really useful as you were only able to disable key normalization globally for a configuration.\n\nping @lolautruche\n\nThe second commit fixes #5998.\n\n---------------------------------------------------------------------------\n\nby lolautruche at 2012-12-15T15:39:00Z\n\n+1\nThe approach is neat and much better than my workaround. Gives better control and avoids magic :smiley: (even if this *normalization* is still a bit obscure to me).",
            "fixed CS",
            "[HttpKernel] fixed some unit tests",
            "merged branch docteurklein/unique-entity-validator-with-custom-repository-method (PR #4979)\n\nCommits\n-------\n\n4eb54a0 update CHANGELOG\ndb9ea09 [Doctrine] [Bridge] fix repositoryMethod test\n2a6c222 Add a customRepository option to the uniqueEntity validator\n\nDiscussion\n----------\n\n[Doctrine] [Bridge] Add a  repositoryMethod  option to the uniqueEntity validator\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\nLicense of the code: MIT\nDocumentation PR: ~\n\nThis allows to configure the repository method used to verify uniqueness of entity.\nBefore, it was always using `findBy`.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-20T05:35:28Z\n\nCan you add a note in the CHANGELOG?\n\n---------------------------------------------------------------------------\n\nby docteurklein at 2012-07-20T07:17:08Z\n\n@fabpot done.",
            "merged branch aerialls/patch-2 (PR #4597)\n\nCommits\n-------\n\ndacd8aa tweaked UPGRADE file\n\nDiscussion\n----------\n\ntweaked UPGRADE file\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-16T16:56:55Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1635992) (merged dacd8aa5 into bc147d34).",
            "merged branch aubx/croatian_validator_translation_update (PR #3887)\n\nCommits\n-------\n\n771ab45 Updated croatian validator translation and deleted validator xliff file\n\nDiscussion\n----------\n\n[FrameworkBundle][translations]Updated croatian validator translation and deleted validator xliff file\n\nUpdated croatian validator messages.\n\nAlso,  validators.hr.xliff  file was in translations folder so I deleted it (how did it get there? It should be in the 2.0 branch only).",
            "merged branch fabpot/bundle-leaks (PR #8947)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpKernel] fixes some memory leaks\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | kinda\n| New feature?  | no\n| BC breaks?    | kinda as the Bundle `$reflected` property was removed\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\n6307f41 [HttpKernel] removed a circular reference that prevents PHP GC to do its job\n49fe3c7 [HttpKernel] removed the need to use reflection to get a bundle namespace",
            "[HttpKernel] removed a circular reference that prevents PHP GC to do its job",
            "[HttpKernel] removed the need to use reflection to get a bundle namespace",
            "merged branch ricoli/master (PR #7836)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Added Portuguese translation for the currency validator\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | N/A\n| License       | MIT\n\nCommits\n-------\n\na14eee3 [Validator] Added Portuguese translation for the currency validator",
            "added a RequestStack class",
            "[HttpKernel] changed request_stack to a private service",
            "[HttpKernel] renamed the kernel finished event",
            "[HttpKernel] tweaked the code",
            "[HttpKernel] modified listeners to be BC with Symfony <2.4",
            "duplicated the DebugClassLoader in the Debug component",
            "merged branch jakzal/docblock-cleanup (PR #9028)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Translation] Removed a @return annotation\n\nThis is the only `@return null` left...\n\nCommits\n-------\n\nd6f4def [Translation] Removed an unneeded return annotation.",
            "[DependencyInjection] added support for expressions in the service container",
            "merged branch bschussek/issue5038 (PR #5044)\n\nCommits\n-------\n\neeb66dd [Form] Renamed the internal FormView variables  types  and  full_block_name \n6b17640 [Form] Fixed caching of block names when types of forms with the same unique block ID differ\n\nDiscussion\n----------\n\n[Form] Fixed caching of block names when types of forms with the same unique block ID differ\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5038\nTodo: -",
            "merged branch jakzal/2.3-security-tests (PR #8136)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Security] Added tests\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n8d5f39f [Security] Added tests for the DefaultLogoutSuccessHandler.\n30fe940 [Security] Added tests for the DefaultAuthenticationSuccessHandler.\n12d9b0a [Security] Added tests for the DefaultAuthenticationFailureHandler.\n3129bee [Security] Added tests for the remember me ReponseListener.\n573bf07 [Security] Added tests for the SessionAuthenticationStrategy.\n9d3397d [Security] Added tests for the AccessMap.",
            "merged branch Tobion/classloader-refactor (PR #8134)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[ClassLoader] tiny refactoring\n\ntest pass: yes\nbc break: no\n\nCommits\n-------\n\n6394a5b [ClassLoader] tiny refactoring",
            "merged branch Tobion/cacheclear-deprecated-method (PR #8132)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[FrameworkBundle] removed deprecated method from cache:clear command\n\nbc break: no\ntest pass: yes\n\nCommits\n-------\n\n024bd9e [FrameworkBundle] removed deprecated method from cache:clear command",
            "merged branch Tobion/profiler-verbose (PR #8131)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[WebProfiler] remove deprecated verbose option\n\ntest pass: yes\nbc break: no\n\nCommits\n-------\n\n8a4b91b [WebProfiler] remove deprecated verbose option",
            "merged branch bamarni/patch-3 (PR #8125)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Form] [2.3] removed old option\n\nLooks like a leftover from @c8afa886cd7c9598e5fbda661e93210a7786739b\n\nCommits\n-------\n\na8f4501 [Form] [2.3] removed old option",
            "merged branch xanido/fix-list-command (PR #8115)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Console] Add namespace support back in to list command\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | Couldn't spot this issue in the list\n| License       | MIT\n| Doc PR        | NA\n\nAdded a test to prevent this happening again.\n\nCommits\n-------\n\n79a842a [Console] Add namespace support back in to list command",
            "merged branch jakzal/bugfix/interface-check (PR #8143)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Security] Fixed the check if an interface exists.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nre #8136\n\nCommits\n-------\n\nfd151fd [Security] Fixed the check if an interface exists.",
            "merged branch pulzarraider/patch-1 (PR #8142)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[2.3][Validator] Added missing slovak translations\n\nThis commit sholud be also merged to master.\n\nCommits\n-------\n\naf2cd98 Added missing slovak translations",
            "merged branch bamarni/patch-4 (PR #8141)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[2.3][FrameworkBundle] removed HttpFoundation classes from HttpKernel cache\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [no]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| Fixed tickets | [#8126]\n| License       | MIT\n\nSince #7322, class redeclaration errors will occur in non-debug mode when using HttpCache, because the map isn't adaptative, and HttpCache might need HttpFoundation classes even before booting the Kernel. I suggest moving them to the bootstrap instead.\n\nCommits\n-------\n\nc8e5503 [FrameworkBundle] removed HttpFoundation classes from HttpKernel cache",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  Fix several instances of doubled words\n  [Finder] Fix iteration fails with non-rewindable streams\n  [Finder] Fix unexpected duplicate sub path related AppendIterator issue\n  Added type of return value in VoterInterface.\n  Fixed two bugs in HttpCache\n\nConflicts:\n\tsrc/Symfony/Component/Finder/Iterator/RecursiveDirectoryIterator.php",
            "merged branch Tobion/console-event-name (PR #8147)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Console] renamed ConsoleForExceptionEvent into ConsoleExceptionEvent\n\nI wondered about the name and now I figured the problem was already raised in the PR: https://github.com/symfony/symfony/pull/7466#discussion-diff-3503539\n\nSo I think it should be fixed for LTS.\n\nBC break: yes\ntest pass: yes\n\nCommits\n-------\n\n554ab9f [Console] renamed ConsoleForExceptionEvent into ConsoleExceptionEvent",
            "merged branch peterkokot/translations-2.3 (PR #8160)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nslovenian validator translations updated\n\nSlovenian validator component translations updated.\n\nCommits\n-------\n\n35c6768 slovenian validator translations updated",
            "Removed reference to Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType in form.xml",
            "merged branch iJanki/fix_field (PR #8159)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8159).\n\nDiscussion\n----------\n\n[FrameworkBundle] Removed reference to FieldType in form.xml\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [no]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nRemoved reference of deprecated FieldType class in FrameworkBundle form.xml configuragion.\n\nCommits\n-------\n\nbd2e689 [FrameworkBundle] Removed reference to Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType in form.xml",
            "merged branch Tobion/console-dispatcher (PR #8158)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[FrameworkBundle] set the dispatcher in the console application\n\nBC break: no\ntest pass: yes\n\nOtherwise events are not dispatched in symfony frameworkbundle.\nThe first commit fixes a related typehint in the console.\n\nCommits\n-------\n\ne93fc7a [FrameworkBundle] set the dispatcher in the console application\n176a3d4 [Console] fix typehint for Application::setDispatcher",
            "ErrorHandler and fixes",
            "merged branch uuf6429/master (PR #8170)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8170).\n\nDiscussion\n----------\n\nErrorHandler and $context fixes\n\nFixes a minor issue with optional parameters not being optional and added support for `ContextErrorException` class as detailed here: https://github.com/fabpot/Silex/issues/717\n\nCommits\n-------\n\n784726d ErrorHandler and  fixes",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  bumped Symfony version to 2.2.3-DEV\n  updated VERSION for 2.2.2\n  updated CHANGELOG for 2.2.2\n  removed CHANGELOG for 2.1\n  updated VERSION for 2.1.11\n  update CONTRIBUTORS for 2.1.11\n  updated CHANGELOG for 2.1.11\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "updated CHANGELOG for 2.3.0",
            "updated VERSION for 2.3.0",
            "bumped Symfony version to -DEV",
            "Fixed doc block on Filesystem::rename\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -",
            "merged branch lyrixx/filesystem-docblock (PR #8181)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8181).\n\nDiscussion\n----------\n\n[2.4][Filesystem] Fixed doc block on Filesystem::rename\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n891032c [Filesystem] Fixed doc block on Filesystem::rename",
            "[MonologBridge] added integration with the console component",
            "merged branch Tobion/monolog-console-integration (PR #8167)\n\nThis PR was squashed before being merged into the master branch (closes #8167).\n\nDiscussion\n----------\n\n[MonologBridge] added integration with the console component\n\nThis adds integration with the console component by adding ConsoleHandler and ConsoleFormatter which can be used to show log messages in the console output depending on the verbosity settings.\nThis PR splits the reusable classes from symfony/MonologBundle#42 into the bridge.\nIt has been reviewed by @Seldaek\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8033\n| License       | MIT\n| Doc PR        | will be done when this is used by the MonologBundle\n\nCommits\n-------\n\nc0b5996 [MonologBridge] added integration with the console component",
            "merged branch mpartel/progresshelper-clear (PR #8074)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Console] Add clear() to ProgressHelper.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        | symfony/symfony-docs#2642\n\nOne may want to print something else while the progress bar is running.\nThe output will be messy if the progress bar is not removed first.\n\nOne may also want to remove the progress bar after the work is complete.\n\nCommits\n-------\n\n29c71a5 [Console] Add clear() to ProgressHelper.",
            "merged branch lyrixx/console-tester-status-code (PR #8023)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[2.4][Console] Added status code to CommandTester and ApplicationTester\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes, but not on travis (segfault)\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nTheses classes are already statefull. They contain the input and the\noutput data. So we can safely add the last status code to the class.\n\nCommits\n-------\n\n6526166 [Console] Added status code to CommandTester and ApplicationTester",
            "merged branch Seldaek/fix-container-opt (PR #8193)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[DI] Fixes access of aliases shared services\n\nFixes #8096 and I noticed that the aliases methods weren't really needed anymore so I removed them. I think it's fine since they were protected, but did it in a separate commit in case you just want the bugfix.\n\nNote that while the DI tests pass, I didn't run this patch as part of a real app. I'd appreciate if someone has the time to verify it still works given it's slightly critical code.\n\nCommits\n-------\n\n81b122d [DependencyInjection] Add support for aliases of aliases + regression test\nd8c0ef7 [DependencyInjection] Rename ContainerBuilder::$aliases to avoid conflicting with the parent class\nbb797ee [DependencyInjection] Remove get*Alias*Service methods from compiled containers\n379f5e0 [DependencyInjection] Fix aliased access of shared services, fixes #8096",
            "merged branch saem/ticket_8228 (PR #8229)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[FrameworkBundle] Fixed OutOfBoundException when session handler_id is null\n\n[FrameworkBundle] Fixed OutOfBoundException when session handler_id is null\n\nWhen a null is provided for framework.session.handler_id the FrameworkExtension attempts to set the session storage to null for the 'session.storage.php_bridge' by altering the second argument. According to the session.xml service definition, there is no second argument, and it is in fact the first (read, 0 index) argument that should be changed.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8228\n| License       | MIT\n| Doc PR        | N/A\n\nCommits\n-------\n\ne3561ce [FrameworkBundle] Fixed OutOfBoundException when session handler_id is null",
            "Added Greek translation",
            "merged branch lancergr/greek_validator (PR #8225)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8225).\n\nDiscussion\n----------\n\n[Validator] Added Greek translation\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n278090b [Validator] Added Greek translation",
            "Added missing galician (gl) translations",
            "merged branch rubenrua/master (PR #8236)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8236).\n\nDiscussion\n----------\n\nAdded missing galician (gl) translations\n\nCommits\n-------\n\ne179510 Added missing galician (gl) translations",
            "updated CHANGELOG for 2.3.1",
            "updated VERSION for 2.3.1",
            "bumped Symfony version to 2.3.2-DEV-DEV",
            "merged branch AntonioAngelino/2.3 (PR #8258)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nfix-progressbar-start\n\nlastMessagesLength and barCharOriginal should be reset if you want to use 2 or more Progress Bars in the same command flow.\n\nCommits\n-------\n\ne65723c fix-progressbar-start",
            "[Security] fixed usage of the salt for the bcrypt encoder (refs #8210)",
            "merged branch msonnabaum/request-get-encodings (PR #8185)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpFoundation] Added Request::getEncodings() method\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nWe needed access to the Accept-Encoding information in Drupal, and I was surprised to see that there wasn't a method on the request object to access this.\n\nThis PR adds that method.\n\nCommits\n-------\n\n28a8443 [HttpFoundation] Added Request::getEncodings() method",
            "[HttpFoundation] tweaked previous merge (refs #8185)",
            "add namespace parameter to PhpDumper::dump",
            "merged branch zakharovvi/dependencyinjection_phpdumper_namespace (PR #8119)\n\nThis PR was submitted for the 2.3 branch but it was merged into the master branch instead (closes #8119).\n\nDiscussion\n----------\n\n[DependencyInjection] add namespace parameter to PhpDumper::dump\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n97320a5 [DependencyInjection] add namespace parameter to PhpDumper::dump",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  Throw exception if value is passed to VALUE_NONE input, long syntax\n  fixed date type format pattern regex\n  [FrameworkBundle] tweaked previous merge (refs #8242)\n  do not re-register commands each time a Console\\Application is run\n  [Process] moved env check to the Process class (refs #8227)\n  fix issue where $_ENV contains array vals\n  [DomCrawler] Fix handling file:// without a host\n  [Form] corrected interface bind() method defined against in deprecation notice\n  [Finder] Fix SplFileInfo::getContents isn't working with ssh2 protocol\n\nConflicts:\n\tsrc/Symfony/Component/Console/Tests/Input/ArgvInputTest.php\n\tsrc/Symfony/Component/DomCrawler/Link.php\n\tsrc/Symfony/Component/Form/Form.php",
            "merged branch Seldaek/simplesecurity (PR #6069)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Security] Add simpler customization options\n\nThe goal of this is to provide a simpler extension point for people that don't have the time to dive into the whole security factory + authentication provider + user provider + authentication listener + token mess. As it stands, it gives you a way to just create one class that is handling all the security stuff in one (by implementing SimpleFormAuthenticatorInterface and UserProviderInterface) + one or more token classes.\n\nI would like feedback on whether people think this makes sense or not before continuing and doing a SimpleHttpAuthenticatorInterface for non-form based stuff.\n\nJust FYI that's how it would look in security.yml:\n\n```yaml\nsecurity:\n    providers:\n        simple:\n            id: simple_authenticator\n    firewalls:\n        foo:\n            pattern: ^/\n            simple_form:\n                provider: simple\n                authenticator: simple_authenticator\n```\n\n/cc @atrauzzi (who posted a long rant on the ML about how hard this all is, and I can't agree more - I hope it's the right account on github?)\n\nCommits\n-------\n\n74cfc84 marked some classes as being experimental in 2.3\n471e5bc [Security] allowed simple pre-auth to be optional if another auth mechanism already authenticated the user\n01c913b moved the simple HTTP authenticator to a pre-auth one\n887d9b8 fixed wrong Logger interface\n65335ea [Security] Renamed simple_token to simple_http, added support for failure and success handler to both simple firewalls\nf7a11a1 [Security] Add simple_token auth method\n1fe2ed6 [Security] Add SimpleForm authentication",
            "merged branch lsmith77/container_check_alias_in_has_method (PR #8252)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nContainer check alias in has method\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | [![Build Status](https://travis-ci.org/lsmith77/symfony.png?branch=container_check_alias_in_has_method)](https://travis-ci.org/lsmith77/symfony)\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nThis bug might also be in 2.2 but we encountered it in 2.3 and the relevant code was changed slightly from 2.2 to 2.3. We noticed this issue here:\nhttps://github.com/symfony-cmf/RoutingBundle/issues/109\n\nThe issue is caused by the ``$container->has->('router')`` check in the Router related commands:\nhttps://github.com/symfony/FrameworkBundle/blob/master/Command/RouterDebugCommand.php#L32\n\nAs with the CMF we use a chain router service that is aliased to ``router``, the commands do not get registered.\n\nOne could classify this as a BC break, but imho its a bug fix.\n\nCommits\n-------\n\naa79393 also consider alias in Container::has()",
            "merged branch fabpot/bcrypt-salt (PR #8266)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Security] fixed usage of the salt for the bcrypt encoder (refs #8210)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8210\n| License       | MIT\n| Doc PR        | n/a\n\nsee #8210\n\nCommits\n-------\n\nb5ded81 [Security] fixed usage of the salt for the bcrypt encoder (refs #8210)",
            "Feature/fix unit tests",
            "merged branch hostnet/feature/fix-unit-tests (PR #8275)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8275).\n\nDiscussion\n----------\n\nFeature/fix unit tests\n\nFixed two cases where tests were relying on the pcntl extension\n\nCommits\n-------\n\n39477dd Feature/fix unit tests",
            "merged branch jakzal/bugfix/table-helper-multi-byte (PR #8285)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Console] Fixed the table rendering with multi-byte strings.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8284\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\nab1439e [Console] Fixed the table rendering with multi-byte strings.",
            "added a node about HTML extension in readme",
            "merged branch jfsimon/css-selector-readme-update (PR #8287)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8287).\n\nDiscussion\n----------\n\n[CssSelector] added a node about HTML extension in readme\n\nIt's a common mistake to use `CssSelector` with XML without knowing that `HTML` extension must be disbaled first (see #8286). This PR adds a note about that in the component's readme file.\n\nCommits\n-------\n\n4235b26 [CssSelector] added a node about HTML extension in readme",
            "Sorting files while extracting translation messages from a twig templates",
            "merged branch jakzal/2.3-tests-on-php-5.5 (PR #8324)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Intl] Fixed tests failing on PHP 5.5 and removed this version from the allowed failures\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n69ec7c8 Removed PHP 5.5 from the allowed failures.\n3492186 [Intl] Fixed tests failing on PHP 5.5",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [Form] fixed INF usage which does not work on Solaris (closes #8246)\n  Fix grammar\n  bumped Symfony version to 2.2.4\n  updated VERSION for 2.2.3\n  update CONTRIBUTORS for 2.2.3\n  updated CHANGELOG for 2.2.3\n  [Process] Disable exception on stream_select timeout\n  [HttpFoundation] fixed issue with session_regenerate_id (closes #7380)\n  [DomCrawler] added a note about the default charset\n  [Console] fixed regression when calling a command foo:bar if there is another one like foo:bar:baz (closes #8245)\n  force the Content-Type to html in the web profiler controllers\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "Merge branch '2.3'\n\n* 2.3: (33 commits)\n  [Form] fixed INF usage which does not work on Solaris (closes #8246)\n  Fix grammar\n  Removed PHP 5.5 from the allowed failures.\n  [Intl] Fixed tests failing on PHP 5.5\n  bumped Symfony version to 2.2.4\n  updated VERSION for 2.2.3\n  update CONTRIBUTORS for 2.2.3\n  updated CHANGELOG for 2.2.3\n  [DependencyInjection] Replaced try/catch block with an @expectedException annotation in a test.\n  [CssSelector] tweaked README file (closes #8287)\n  added a node about HTML extension in readme\n  [Console] Fixed the table rendering with multi-byte strings.\n  Feature/fix unit tests\n  [Process] Disable exception on stream_select timeout\n  [HttpFoundation] fixed issue with session_regenerate_id (closes #7380)\n  [DomCrawler] added a note about the default charset\n  Throw exception if value is passed to VALUE_NONE input, long syntax\n  fixed date type format pattern regex\n  [Security] fixed usage of the salt for the bcrypt encoder (refs #8210)\n  [FrameworkBundle] tweaked previous merge (refs #8242)\n  ...\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "Add an extension-point for DI into the Matcher/Generator Dumpers",
            "removed unused code",
            "merged branch stof/french_translations (PR #8370)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nAdded missing French validator translations\n\nCommits\n-------\n\n0cc8872 Added missing French validator translations",
            "merged branch jakzal/console-interaction-check (PR #8386)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Console] Avoided an unnecessary check if a stream is an interactive terminal\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nIt only makes sense to do the second check, if the first one evaluates to false (so the `--no-interaction` option was not passed).\n\nRunning `posix_isatty()` raises a warning with some stream types (like in-memory stream). With this patch, warning could be avoided by passing the `--no-interaction option` (which is what we want with an in-memory stream).\n\nThe warning I'm getting is:\n\n```\nPHP Warning:  posix_isatty(): could not use stream of type 'MEMORY' in vendor/symfony/console/Symfony/Component/Console/Application.php on line 866\n```\n\nCommits\n-------\n\ne46fd4e [Console] Avoided an unnecessary check.",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  fixed CS\n  typo first->second\n  Fixed variable name used in translation cache\n\nConflicts:\n\tsrc/Symfony/Bundle/FrameworkBundle/Tests/Translation/TranslatorTest.php\n\tsrc/Symfony/Component/CssSelector/Node/FunctionNode.php\n\tsrc/Symfony/Component/Finder/Tests/Iterator/RealIteratorTestCase.php",
            "fixed CS",
            "Update validators.sk.xlf",
            "merged branch birko/patch-1 (PR #8411)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8411).\n\nDiscussion\n----------\n\nUpdate validators.sk.xlf\n\nupdatet pluralization translations for lenght validators\n\nCommits\n-------\n\n00c2e5c Update validators.sk.xlf",
            "[DI] Fixed bug requesting non existing service from dumped frozen container",
            "merged branch WouterJ/di_alias_dumper_bug (PR #8435)\n\nThis PR was squashed before being merged into the 2.3 branch (closes #8435).\n\nDiscussion\n----------\n\n[DI] Fixed bug requesting non existing service from dumped frozen container\n\nWhen dumping a frozen container without aliases, the method `Container::has()` will throw a * Warning: array_key_exists() expects parameter 2 to be array, null given * warning. It's because `PhpDumper::addAliases` returns `''` if no aliases are given. This will work for a normal constructor, because it calls the `Container::__construct` method, but the frozen constructor doesn't do that. So it requires a `$this->aliases = array();` in the constructor.\n\nThis PR fixes this bug (and adds the test). Bug is introduced in #8252 and 63367a3d5615ff65251ccee4f73223107275f65f\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n8bb4e4d [DI] Fixed bug requesting non existing service from dumped frozen container",
            "CookieJar remove unneeded var, Client remove unneeded else",
            "merged branch entering/browser-kit-beautify-code (PR #8432)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8432).\n\nDiscussion\n----------\n\n[BrowserKit] CookieJar remove unneeded var, Client remove unneeded else\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n10c6799 [BrowserKit] CookieJar remove unneeded var, Client remove unneeded else",
            "merged branch fabpot/removed-unused-code (PR #8440)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nremoved unused code\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\nc60bdf5 removed unused code",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  Update JsonResponse.php\n  [HttpKernel] fixed the inline renderer when passing objects as attributes (closes #7124)\n  [WebProfiler] fix content-type parameter\n  Replace romaji period characters with Japanese style zenkaku period characters\n  Passed the config when building the Configuration in ConfigurableExtension\n\nConflicts:\n\tsrc/Symfony/Bundle/FrameworkBundle/Tests/Functional/Bundle/TestBundle/Resources/config/routing.yml\n\tsrc/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
            "Merge branch '2.3'\n\n* 2.3:\n  Update JsonResponse.php\n  [HttpKernel] fixed the inline renderer when passing objects as attributes (closes #7124)\n  CookieJar remove unneeded var, Client remove unneeded else\n  [DI] Fixed bug requesting non existing service from dumped frozen container\n  Update validators.sk.xlf\n  [WebProfiler] fix content-type parameter\n  Replace romaji period characters with Japanese style zenkaku period characters\n  fixed CS\n  fixed CS\n  [Console] Avoided an unnecessary check.\n  Added missing French validator translations\n  typo first->second\n  Passed the config when building the Configuration in ConfigurableExtension\n  removed unused code\n  Fixed variable name used in translation cache\n\nConflicts:\n\tsrc/Symfony/Component/Console/Event/ConsoleCommandEvent.php",
            "Support multiple IPs for matching",
            "merged branch WouterJ/ips_profiler_matcher (PR #8352)\n\nThis PR was submitted for the 2.3 branch but it was merged into the master branch instead (closes #8352).\n\nDiscussion\n----------\n\n[Profiler] Support multiple IPs for matching\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | tbd\n\nAs matching by IPs is introduced in 2.3, I request this for that version too. Not sure if that's the way it should be done\n\nCommits\n-------\n\nefa4892 [Profiler] Support multiple IPs for matching",
            "[HttpKernel] changed the fragment handler to explicitely disallow non-scalar in generated URIs (refs #8263)",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  Reverts JSON_NUMERIC_CHECK\n  Just a Typo\n  [Yaml] removed wrong comment removal inside a string block\n  Fixing configuration validation error messages.\n  [HtppKernel] fixed inline fragment renderer\n  fixed inline fragment renderer\n  ProgressHelper shows percentage complete.\n  Comment fixed: RedrawFrequency is measured in steps.\n  fix handling of a default 'template' as a string\n\nConflicts:\n\tsrc/Symfony/Component/Console/Helper/ProgressHelper.php\n\tsrc/Symfony/Component/Console/Tests/Helper/ProgressHelperTest.php\n\tsrc/Symfony/Component/HttpKernel/Tests/Fragment/HIncludeFragmentRendererTest.php\n\tsrc/Symfony/Component/HttpKernel/Tests/Fragment/InlineFragmentRendererTest.php",
            "[HttpKernel] added a unit test to demonstrate that passing objects works for inline controllers",
            "merged branch fabpot/fragments-with-non-scalars (PR #8437)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpKernel] changed the fragment handler to explicitely disallow non-scalar in generated URIs (refs #8263)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8263\n| License       | MIT\n| Doc PR        | n/a\n\nWhen using the `render()` function in Twig with a `controller()` reference, the attributes can contain non-scalar. That's fine for the inline strategy, but it cannot work for other strategies as it then involves a proper HTTP request.\n\nSo, this PR properly throw an exception in such situations to avoid difficult to find bugs.\n\nCommits\n-------\n\n43ce368 [HttpKernel] added a unit test to demonstrate that passing objects works for inline controllers\n70f3399 [HttpKernel] changed the fragment handler to explicitely disallow non-scalar in generated URIs (refs #8263)",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  fixed typo\n  bumped Symfony version to 2.2.5\n  updated VERSION for 2.2.4\n  update CONTRIBUTORS for 2.2.4\n  updated CHANGELOG for 2.2.4\n  Fixed NativeSessionStorage:regenerate when does not exists\n  removed extraneous whitespaces\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "updated CHANGELOG for 2.3.2",
            "updated VERSION for 2.3.2",
            "bumped Symfony version to 2.3.3-DEV",
            "merged branch jeremyFreeAgent/feature/deprecatedSwifMailerDataCollector (PR #8520)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[SwiftmailerBridge] Marked MessageDataCollector as deprecated\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | yes\n| Deprecations? | yes\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nNow you can configure several mailers.\n\nLinked to the following PR:\n- [ ] https://github.com/symfony/SwiftmailerBundle/pull/34\n\nCommits\n-------\n\n15bf1d7 [SwiftmailerBridge] Marked MessageDataCollector as deprecated",
            "added greek translation",
            "merged branch lancergr/greek_trans (PR #8522)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8522).\n\nDiscussion\n----------\n\n[Security] added greek translation\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n3a6050b [Security] added greek translation",
            "merged branch dbu/security-dbal-listener-cleanup (PR #8521)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nsecurity acl dbal schema: inject the schema instead of the whole container\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nfollowing a discussion with @Stof on https://github.com/doctrine/DoctrinePHPCRBundle/pull/78 i thought to clean up the code i used as template as well.\n\nCommits\n-------\n\nb960004 security acl dbal schema: inject the schema instead of the whole container",
            "merged branch GromNaN/2.3-di-dump-exception (PR #8524)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[DependencyInjection][2.3] Add exception for service name not dumpable in PHP\n\nSame as #8494 for branch 2.3 since the DI component has been refactored (bb797ee75591f8461dbcc6fdc8a50b5d3aa8fe5a, f1c2ab78af69d5cfa1db2c244dbf22e0303036f2)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8485 #8030\n| License       | MIT\n| Doc PR        | n/a\n\nThrows an exception when the DIC is dumped to PHP, before generating invalid PHP.\nThe regex comes from the PHP doc: http://www.php.net/manual/en/language.oop5.basic.php\n\nCommits\n-------\n\n9ac3556 [DependencyInjection] Add exception for service name not dumpable in PHP",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [PropertyAccess] added moves to pluralMap\n  [Security] fixed issue where authentication listeners clear unrelated tokens\n  fix issue #8499 modelChoiceList call getPrimaryKey on a non object\n  [DependencyInjection] Add exception for service name not dumpable in PHP\n\nConflicts:\n\tsrc/Symfony/Component/DependencyInjection/Dumper/PhpDumper.php\n\tsrc/Symfony/Component/DependencyInjection/Tests/Dumper/PhpDumperTest.php\n\tsrc/Symfony/Component/Security/Tests/Http/Firewall/BasicAuthenticationListenerTest.php",
            "merged branch pborreli/httpfoundation-cs (PR #8535)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpFoundation] Fixed CS\n\nCommits\n-------\n\n7625869 Fixed CS",
            "Added missing files .gitignore",
            "merged branch hason/gitignore (PR #8498)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8498).\n\nDiscussion\n----------\n\nAdded missing .gitignore\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n60bc41d Added missing files .gitignore",
            "[Form] Validation listener remove count()",
            "merged branch entering/form-validationlistener-remove-count (PR #8430)\n\nThis PR was squashed before being merged into the master branch (closes #8430).\n\nDiscussion\n----------\n\n[Form] Validation listener remove count()\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nRemoving what looks a extra count not needed.\n\nCommits\n-------\n\n23a71e5 [Form] Validation listener remove count()",
            "merged branch pborreli/httpkernel-cs (PR #8537)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpKernel] Fixed CS\n\nCommits\n-------\n\n6e35963 Fixed CS",
            "[Console] Make DialogHelper respect interaction settings",
            "merged branch WouterJ/issue_8079 (PR #8452)\n\nThis PR was squashed before being merged into the master branch (closes #8452).\n\nDiscussion\n----------\n\n[Console] Make DialogHelper respect interaction settings\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8079\n| License       | MIT\n| Doc PR        | -\n\nThis is based on @cordoval's #8366, but it tries to not break BC and to be a little more userfriendly.\n\n@stof I can't seem to follow the infinite loop you talked about in #8366 . `DialogHelper::ask` will return the default, which is `null`, that breaks the while loop and it returns the default.\n\nCommits\n-------\n\n1cde723 [Console] Make DialogHelper respect interaction settings",
            "[HttpFoundation] Add accessors methods to session handlers",
            "merged branch dosten/ticket_7683 (PR #8303)\n\nThis PR was squashed before being merged into the master branch (closes #8303).\n\nDiscussion\n----------\n\n[HttpFoundation] Add accessors methods to session handlers\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7683\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n460c696 [HttpFoundation] Add accessors methods to session handlers",
            "Use HMAC construction for remember me cookie hashes",
            "merged branch joncave/rememberme-hmac (PR #8195)\n\nThis PR was submitted for the 2.3 branch but it was merged into the master branch instead (closes #8195).\n\nDiscussion\n----------\n\n[Security] Use HMAC construction for remember me cookie hashes\n\n[Security] Use HMAC construction for remember me cookie hashes\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\nHMAC is a more secure construction for MACs than the secret suffix method that is currently being used by the remember me cookies, see http://rdist.root.org/2009/10/29/stop-using-unsafe-keyed-hashes-use-hmac/.\n\nChanging the MAC scheme means that current cookies will be invalidated and users will have to login again. Though there are no API BC issues.\n\nCommits\n-------\n\nc97e0d0 [Security] Use HMAC construction for remember me cookie hashes",
            "[Security] updated CHANGELOG (refs #8195)",
            "Only load event managers if tagged event subscribers are found",
            "merged branch biozshock/patch-form-fix (PR #8362)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Form] Fix of  PATCH'ed forms are never valid . Fixes #8111\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8111\n| License       | MIT\n\nCommits\n-------\n\na2b1535 [Form] Fix of  PATCH'ed forms are never valid ",
            "Developer friendly Class Not Found and Undefined Function errors.",
            "[Debug] fixed CS",
            "[Debug] made guessing of possible class names more flexible",
            "[Debug] made Debug find FQCN automatically based on well-known autoloaders",
            "[Debug] moved special fatal error handlers to their own classes",
            "[Debug] refactored unit tests",
            "merged branch derrabus/ignore_attributes_in_redirect_controller (PR #8563)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[FrameworkBundle] RedirectCotroller: The ignoreAttributes parameter should be ignored\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nAs discussed in PR #7590, when pointing a route to FrameworkBundle's `RedirectController` the attribute `ignoreAttributes` is added to the new route's attributes, if specified as array. As @lsmith77 wrote in a comment to that PR, this should not be the intended behavior. A valid workaround is to add `ignoreAttributes` itself to this array.\n\nThe problem remained undiscovered by the unit test, as `ignoreAttribues` was not included in the `_route_params` of the faked `Request` object. This PR should fix both, the unit test and the `RedirectController` itself, so the workaround mentioned above is not necessary anymore. Additionally, my fix should not break any routing configuration that is using the workaround.\n\nCommits\n-------\n\ndc1fff0 The ignoreAttributes itself should be ignored, too.",
            "fixed file permission",
            "[DependencyInjection] fixed regression where setting a service to null did not trigger a re-creation of the service when getting it",
            "merged branch fabpot/null-services (PR #8582)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[DependencyInjection] fixed regression where setting a service to null did not trigger a re-creation of the service when getting it (closes #8392)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8392\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\n50d0727 [DependencyInjection] fixed regression where setting a service to null did not trigger a re-creation of the service when getting it",
            "merged branch bronze1man/PR-setLazy-parent-2.3 (PR #8573)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[DependencyInjection] setLazy not work on DefinitionDecorator\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8570\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\n970ce2c [DependencyInjection] fixed #8570",
            "[Form] fixes empty file-inputs get treated as extra field",
            "merged branch Flask/ticket_8548 (PR #8575)\n\nThis PR was squashed before being merged into the 2.3 branch (closes #8575).\n\nDiscussion\n----------\n\n[Form] fixes empty file-inputs get treated as extra field\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8548, #8566\n| License       | MIT\n\nCommits\n-------\n\ne5fba3c [Form] fixes empty file-inputs get treated as extra field",
            "merged branch bronze1man/PR-fixed-test-failure (PR #8591)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[templating] fixed test failure introduted from #8585\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8585\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\n4b7c3b9 [template] fixed test failure introduted from #8585",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  return 0 if there is no valid data\n  [Tests] Tests on php 5.5 should pass\n  [Twig] fixed TwigEngine::exists() method when a template contains a syntax error (closes #88546)",
            "[Debug] added some missing phpdocs",
            "[FrameworkBundle] fixed regression where the command might have the wrong container if the application is reused several times",
            "merged branch fabpot/console-fix (PR #8600)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[FrameworkBundle] fixed regression where the command might have the wrong container if the application is reused several times\n\nCommits\n-------\n\n1bd45b3 [FrameworkBundle] fixed regression where the command might have the wrong container if the application is reused several times",
            "merged branch jfsimon/fix-tests (PR #8618)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Console] fix tests\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n\nCommits\n-------\n\ne4c1b30 [Console] fixed tests",
            "merged branch jfsimon/issue-8130 (PR #8615)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[WebProfilerBundle] make toolbar listener instantiation conditional\n\nIn the `WebProfilerBundle`, if `intercept_redirects` and `toolbar` options are both `false`, the `toolbar.xml` config file should not be loaded as the listener becomes useless.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8130\n\nCommits\n-------\n\n17cbfc8 [WebProfilerBundle] made toolbar listener instantiation conditional",
            "merged branch jfsimon/issue-8294 (PR #8611)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpFoundation] deprecates FlashBag::getIterator() method\n\nThis PR does not fix #8294 but this issue is not fixable. The `FlashBag::getIterator()` method actualy does not make any sense and is confusing. It should be removed. I just added a `@deprecated` tag and `Will be removed in 3.0.` message because removing it now would introduce a BC break. I guess issue #8294 can be closed after merge as it make not more sense than the incriminated method.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8294\n\nCommits\n-------\n\nce8a7d6 [HttpFoundation] deprecated FlashBag::getIterator() method",
            "merged branch bschussek/revert-7678 (PR #8623)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nRevert  [Form] Remove  value  attribute on empty_value option \n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes (together with #8622)\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7678 #8478 #8526\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\ndbd14fc Revert  [Form] Remove  value  attribute on empty_value option ",
            "merged branch langj/readme-link-fix (PR #8632)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nFixes link indices\n\nFixes links in the symfony/intl README.md\n\nCommits\n-------\n\nd1e5710 Fixes link indices",
            "Merge pull request #8634 from bschussek/issue8473\n\n[Form] Changed (Number|Integer)ToLocalizedStringTransformer::reverseTransform() to do rounding",
            "merged branch bschussek/issue8385 (PR #8636)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Form] Fixed: If a form is not present in a request, it is not automatically submitted\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8385\n| License       | MIT\n| Doc PR        | -\n\nThis PR changes the following behavior of `handleRequest()`:\n\nCurrent behavior:\n\n```php\n$_POST = array('foo' => 'bar');\n$form = $factory->createNamed('myform', 'mytype');\n\n//  myform  is not present in the request\n$form->handleRequest();\n\nassert(true === $form->isSubmitted());\n```\n\nBehavior after PR:\n\n```php\n$_POST = array('foo' => 'bar');\n$form = $factory->createNamed('myform', 'mytype');\n\n//  myform  is not present in the request\n$form->handleRequest();\n\nassert(false === $form->isSubmitted());\n```\n\nAs #8385 pointed out, the latter behavior is expected, so I consider the current behavior a bug.\n\nCommits\n-------\n\ncb5e765 [Form] Fixed: If a form is not present in a request, it is not automatically submitted",
            "merged branch bschussek/issue8111 (PR #8638)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Form] Fixed patched forms to be valid even if children are not submitted\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8111\n| License       | MIT\n| Doc PR        | -\n\n#8362 was reverted because it introduces a failing test that is caused by a regression. This PR takes the alternative approach that\n\n* unsubmitted fields in the PATCH request remain unsubmitted\n* `isValid()` ignores unsubmitted children\n* `mapFormsToData()` ignores unsubmitted children\n\nIn my opinion this is a more proper solution than #8362.\n\nCommits\n-------\n\n85330a6 [Form] Fixed patched forms to be valid even if children are not submitted\n50f201e Revert  [Form] Fix of  PATCH'ed forms are never valid  ",
            "merged branch StanAngeloff/issue-8424-refactoring (PR #8514)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Serializer] Added XML attributes support in XmlEncoder\n\nThis is a rebase and refactoring of #8424.\n\n---\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8424\n| License       | MIT\n| Doc PR        | -\n\n---\n\n| New Code | Result\n| --- | ---\n| Code coverage | 100%\n| PSR-2 | No violations\n| PHP-CS-Fixer | No changes\n\n---\n\n### TODO\n\n- [ ] **Q**: I looked through `symfony-docs` for any mention of `xml_root_node_name` which is already implemented, but failed to find any. How to best document those new additions?\n\nCommits\n-------\n\n21218cc [Serializer] Added XML attributes support for DomDocument in XmlEncoder.",
            "[Validator] improved image validator",
            "moved some fixed dep versions from 2.2.* to ~2.2 (refs #8613)",
            "merged branch fabpot/deps-versions (PR #8649)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nmoved some fixed dep versions from 2.2.* to ~2.2\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8613\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\ne18f3ed moved some fixed dep versions from 2.2.* to ~2.2 (refs #8613)",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [HttpKernel] added a missing dep for dev\n  [Form] fixed wrong call to setTimeZone() (closes #8644)\n  Fix issue with \\DateTimeZone::UTC / 'UTC' for PHP 5.4\n  [Form] Removed the  disabled  attribute from the placeholder option in select fields due to problems with the BlackBerry 10 browser\n  [routing] added ability for apache matcher to handle array values\n  removed dead code and fixed CS\n  [Validator] fixed StaticMethodLoader trying to invoke methods of abstract classes (closes #8589)\n\nConflicts:\n\tsrc/Symfony/Bundle/TwigBundle/TokenParser/RenderTokenParser.php\n\tsrc/Symfony/Component/Form/FormConfigBuilder.php\n\tsrc/Symfony/Component/HttpKernel/composer.json\n\tsrc/Symfony/Component/Validator/Tests/GraphWalkerTest.php",
            "Merge branch '2.3'\n\n* 2.3:\n  moved some fixed dep versions from 2.2.* to ~2.2 (refs #8613)\n  [HttpKernel] added a missing dep for dev\n  [Form] fixed wrong call to setTimeZone() (closes #8644)\n  Fix issue with \\DateTimeZone::UTC / 'UTC' for PHP 5.4\n  [Form] Fixed patched forms to be valid even if children are not submitted\n  Revert  [Form] Fix of  PATCH'ed forms are never valid  \n  [Form] Fixed: If a form is not present in a request, it is not automatically submitted\n  Fixes link indices\n  [Form] Removed the  disabled  attribute from the placeholder option in select fields due to problems with the BlackBerry 10 browser\n  Revert  [Form] Remove  value  attribute on empty_value option \n  [routing] added ability for apache matcher to handle array values\n  removed dead code and fixed CS\n  [Validator] fixed StaticMethodLoader trying to invoke methods of abstract classes (closes #8589)",
            "fixed typo",
            "Merge branch '2.3'\n\n* 2.3:\n  fixed typo",
            "merged branch jakzal/process-stop-with-timeout-test (PR #8652)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Process] Increased the timeout in a test to prevent random failures\n\nThis test fails quite often when travis is under a heavy load.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n9f3b1e1 [Process] Increased the timeout in a test to prevent random failures when travis is under a heavy load.",
            "Merge branch '2.3'\n\n* 2.3:\n  [HttpKernel] Added a missing use statement.\n  [Process] Increased the timeout in a test to prevent random failures when travis is under a heavy load.",
            "merged branch Tobion/monolog-logger (PR #8040)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8040).\n\nDiscussion\n----------\n\n[Monolog] fix logger in regards to DebugLoggerInterface\n\nCommits\n-------\n\n438f75c [Monolog] fix logger in regards to DebugLoggerInterface",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  Fix several instances of doubled words\n  [Finder] Fix iteration fails with non-rewindable streams\n  [Finder] Fix unexpected duplicate sub path related AppendIterator issue\n  Added type of return value in VoterInterface.\n  Fixed two bugs in HttpCache\n\nConflicts:\n\tsrc/Symfony/Component/Finder/Tests/FinderTest.php",
            "[TwigBundle] made the filesystem loader compatible with Twig 2.0\n\nWithout adding the exists() method, the code happens to work by chance,\njust because the current implementation of Twig exits() method calls\nfindTemplate().\n\nBut we know that it won't be the case anymore as of Twig 2.0.",
            "merged branch franmomu/add_objective_to_plurals (PR #7594)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[PropertyAccess] Add objectives to pluralMap\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7483\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n6ef92fd [PropertyAccess] Add objectives to pluralMap",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [Console] fix and refactor exit code handling",
            "merged branch hason/security_bundle (PR #8064)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[SecurityBundle] Added missing files for phpunit\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes and no (BC Break in RequestMatcher, symfony/http-foundation: 2.2.x)\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n11497f3 [SecurityBundle] Added missing files for phpunit",
            "fix logger in regards to DebugLoggerInterface",
            "merged branch hason/framework (PR #8061)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[FrameworkBundle] Added missing files for phpunit\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n815cee5 [FrameworkBundle] Added missing files for phpunit",
            "merged branch dlsniper/translation-update (PR #7980)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Updated translation\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a\n\nThis updates the Romanian translations to match the latest changes.\n\nCommits\n-------\n\n3532f2d Updated translation",
            "Eased translationNodeVisitor overriding in TranslationExtension",
            "merged branch Tobion/fragment-render-escaping (PR #7090)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n54d7d25 [HttpKernel] hinclude fragment renderer must escape URIs properly to return valid html\n\nDiscussion\n----------\n\n[HttpKernel] hinclude fragment renderer must escape URIs properly to return valid html\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [no]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| Fixed tickets | [-]\n| License       | MIT\n| Doc PR        | [-]\n\nSince rendering of hinclude fragments returns html/xml, it is marked as safe. So it's not auto-escaped of course. But that means it must properly escape it's input (the URI) when outputting in html context.\nBtw, this does not need to be done for esi because esi tags are processed in middleware which do not go to the client/browser.\n\n---------------------------------------------------------------------------\n\nby Koc at 2013-02-15T22:59:05Z\n\nWill it works correct when `arg_separator.output= &amp; `?\n\n---------------------------------------------------------------------------\n\nby stof at 2013-02-15T23:04:01Z\n\nif your url comes form the routing, yes. It [does not rely on the default separator](https://github.com/symfony/Routing/blob/master/Generator/UrlGenerator.php#L265) to avoid issues when the separator is configured to ``&amp;`` as it would have been escaped again in Twig templates for instance.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-02-16T07:26:19Z\n\nCan you include the proper PR header in the description? Thanks.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2013-02-16T12:28:18Z\n\nAdded.",
            "updated CHANGELOG for 2.2.0-RC3",
            "updated VERSION for 2.2.0-RC3",
            "bumped Symfony version to 2.2.0-RC4-DEV",
            "Fixes AppCache + ESI + Stopwatch problem",
            "merged branch jfsimon/issue-6227 (PR #7180)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7180).\n\nCommits\n-------\n\n6a33bc2 [HttpKernel] Fixes AppCache + ESI + Stopwatch problem\n\nDiscussion\n----------\n\n[HttpKernel] Fixes AppCache + ESI + Stopwatch problem\n\nThere is a very special case when using builtin AppCache class as kernel wrapper, in the case of an ESI request leading to a `stale` response [B]  inside a `fresh` cached response [A]. In this case, `$token` contains the [B] debug token, but the  open `stopwatch` section ID is equal to the [A] debug token. Trying to reopen section with the [B] token throws an exception which must be caught.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| Bug mask?     | no, does @vicb agree?\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #6227, #6230\n\nI tried to find a better solution than just wrapping thrown exceptions with `try/catch`, but IMHO the #6230 solution from @lsmith77 was in fine the best one. I just added some comments in the code to avoid the WTF reactions while reading it.\n\n---------------------------------------------------------------------------\n\nby vicb at 2013-02-25T16:51:51Z\n\n@vicb never agrees :)\n\nI don't have time to check this deeply now but I would like to see a UT.\n\nCould your use case be expressed as  on nested terminate events  ?\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2013-02-25T16:58:49Z\n\n@vicb If I had an idea on how to write a conclusive test for that, I swear, it would be provided in this PR.",
            "[HttpFoundation] Fixed messed up headers",
            "merged branch SamsonIT/fixedMessedUpHeaders (PR #7189)\n\nThis PR was squashed before being merged into the 2.2 branch (closes #7189).\n\nCommits\n-------\n\n850bd5a [HttpFoundation] Fixed messed up headers\n\nDiscussion\n----------\n\n[HttpFoundation] Fixed messed up headers\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a\n\nI ran into this when somewhere in our code the Response object was cast into a string. After that, when send()'ing the Response, the headers would be all mixed up. This is because the __toString in HeaderBag ksorts the headers, while the __toString in ResponseHeaderBag doesn't ksort the corresponding headerNames. This patch ksorts that one as well.\n\nallPreserveCase() is new to 2.2, so this bug doesn't seem to affect earlier versions.\n\nTo be exact, this is where it got introduced: https://github.com/symfony/symfony/commit/63a228c45613bb\n\n---------------------------------------------------------------------------\n\nby Burgov at 2013-02-26T09:27:20Z\n\nB.t.w. another option was to ksort a copy of the headers array in the ResponseBag and leaving the actual thing as-is. Not sure which one would be the best option?",
            "Adds expandable globs support to shell adapters",
            "fix issue 4911",
            "[Finder] adds adapter selection/unselection capabilities",
            "merged branch jfsimon/finder-adapter-selection (PR #7212)\n\nThis PR was squashed before being merged into the 2.2 branch (closes #7212).\n\nCommits\n-------\n\nf40adbc [Finder] adds adapter selection/unselection capabilities\n\nDiscussion\n----------\n\n[Finder] adds adapter selection/unselection capabilities\n\nAs we have many issues with the native finder adapter, it would be good to:\n*  permit selection of a particular adapter which will be choosed over the others until its unselection\n*  permit unselection of adapters to get the finder select trhe best on (by priority)\n*  have `PhpAdapter` selected by default\n\nThis PR adds 2 methods to the `Finder`:\n*  `setAdapter($adapter)`: selects an adapter by its name\n*  `useBestAdapter()`: tells the finder to select best adapter by their priority\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2013-02-28T14:05:25Z\n\n@fabpot I just applied all your good advices, there was no bad one :)",
            "merged branch kriswallsmith/2.2 (PR #6988)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\nda22926 [Validator] gracefully handle transChoice errors\n\nDiscussion\n----------\n\n[Validator] gracefully handle transChoice errors\n\nThis validator annotation was throwing an error for me:\n\n```\n/** @Assert\\Length(min=6, minMessage= Must be 6 characters ) */\n```\n\nTo avoid this error in the current code I would need to provide a message template that accommodates the minimum length being 1, even though that's not the case.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | ~\n| License       | MIT\n| Doc PR        | ~\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2013-02-25T19:41:51Z\n\nping @fabpot\n\nAny thoughts on this change? Having to provide a transChoice template when you know what the pluralization is going to be is a pain in the neck.\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2013-02-25T19:42:11Z\n\nping @bschussek too :)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-02-25T19:57:08Z\n\nI'm +1 for this change. What do you think @bschussek?\n\n---------------------------------------------------------------------------\n\nby vicb at 2013-02-26T10:44:33Z\n\nWould this be a common enough use case to be pushed to the translator ?",
            "Mask PHP_AUTH_PW header in profiler",
            "merged branch lmcd/mask-passwords (PR #6482)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #6482).\n\nCommits\n-------\n\nf3e227a Mask PHP_AUTH_PW header in profiler\n\nDiscussion\n----------\n\nMask PHP_AUTH_PW header in profiler\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-27T17:39:26Z\n\nNot sure about this one. Having public access to the web profiler in the production environment is really bad anyway. There is a ton of information that could help an attacker. So, just hiding this specific bit of information won't make it better.\n\n---------------------------------------------------------------------------\n\nby lmcd at 2012-12-27T18:04:45Z\n\nA few scenarios are suggested here where a developer might want the profiler switched on in production: http://symfony.com/doc/current/book/internals.html\n\nI'm talking specifically about someone gaining malicious access to the filesystem. Ripping database tables are somewhat ineffective at stealing user credentials, considering passwords are usually securely hashed nowadays. But the profiler database would have usernames/passwords just sitting there in plaintext.\n\nI know there is lots of information there to aid an attacker, but so is there in most databases (IP addresses, useragents, names, email addresses etc) - but passwords are widely accepted as the *one* thing that should *never* just be stored in plaintext.",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  Options small typo\n  [Console] fixed unparsed StringInput tokens\n  [TwigBridge] fixed trans twig extractor\n  [DomCrawler] fix handling of schemes by Link::getUri()\n  [Console] Fixed comment\n  [TwigBridge] fixed the translator extractor that were not trimming the text in trans tags (closes #7056)\n  Fixed handling absent href attribute in base tag\n  added a DebuClassLoader::findFile() method to make the wrapping less invasive\n  fixed CHANGELOG\n  bumped Symfony version to 2.1.9-DEV\n  updated VERSION for 2.1.8\n  updated CHANGELOG for 2.1.8\n  StringInput resets the given options.\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "updated CHANGELOG for 2.2.0",
            "updated VERSION for 2.2.0",
            "bumped Symfony version to 2.2.1-DEV-DEV",
            "Add persian translation to Components/Security",
            "merged branch fzerorubigd/master (PR #7226)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7226).\n\nCommits\n-------\n\n80aa012 Add persian translation to Components/Security\n\nDiscussion\n----------\n\nAdd Persian (farsi) Translation to Component/Security\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | somehow :)\n| BC breaks?    | no\n| Tests pass?   | yes\n| License       | MIT\n\nJust add farsi translation to Component/Security",
            "fixed CS",
            "merged branch jfsimon/console-tests-fix (PR #7232)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n5bf2f71 [Console] added deprecation annotation\nf95f8e2 [Console] added string input test\n4b12118 Revert  merged branch jfsimon/issue-6749 (PR #7220) \n\nDiscussion\n----------\n\n[Console] fixes tests\n\nPrevious `StringInputTest::testInputOptionWithGivenString` test was broken.\nTrying make it pass broke the way `StringInput` is used in the console.\n\nTwo things to know abour the `StringInput` class in its actual state:\n*  the second argument in the constructor is useless\n*  the `bind` method **must** be called in order to access arguments/options\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | yes\n| Tests pass?   | yes",
            "Default validation message translation fix.\n\nAdd 'validators' for $translationDomain. Detailed discussion https://github.com/fabpot/Silex/pull/641",
            "merged branch mmuruev/patch-1 (PR #7278)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7278).\n\nCommits\n-------\n\n0cf2656 Default validation message translation fix.\n\nDiscussion\n----------\n\nDefault validation message translation fix.\n\nAdd 'validators' for $translationDomain. Detailed discussion https://github.com/fabpot/Silex/pull/641\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-03-06T08:17:43Z\n\nping @bschussek\n\n---------------------------------------------------------------------------\n\nby stof at 2013-03-06T08:43:53Z\n\n@fabpot Using ``null`` as translation domain would make weird things in the Translator component. So this change is needed IMO to have a sensible default.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2013-03-06T10:42:59Z\n\n:+1:",
            "merged branch Tobion/deprecation-trigger (PR #7266)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\nc0687cd remove() should not use deprecated getParent() so it does not trigger deprecation internally\n708c0d3 adjust routing tests to not use prefix in addCollection\n6180c5b add test for uniqueness of resources\nc0de07b added tests for addDefaults, addRequirements, addOptions\n0a1cfcd adjust RouteCollectionTest for the addCollection change and refactor the tests to only skip the part that really needs the config component\nea694e4 added tests for remove() that wasnt covered yet and special route name\n9e2bcb5 refactor interator test that was still assuming a tree\nceb9ab4 adjust tests to no use addPrefix with options\n2b8bf6b adjusted tests to not use RouteCollection::getPrefix\nacff735 [Routing] trigger deprecation warning for deprecated features that will be removed in 2.3\n\nDiscussion\n----------\n\n[2.2][Routing] Trigger deprecation and refactor tests to not use deprecated methods\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [no]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| License       | MIT\n\n@fabpot please don't squash because it also added new tests",
            "merged branch WouterJ/patch-1 (PR #7284)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\nac0c4ce Fixed typo in UPGRADE-2.2\n\nDiscussion\n----------\n\nFixed typos in UPGRADE-2.2\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | -\n| License       | MIT",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [FrameworkBundle] Fixes invalid serialized objects in cache\n  remove dead code in yaml component\n  fixed typo\n  RedisProfilerStorage wrong db-number/index-number selected\n  [DependencyInjection] added a test for the previous merge (refs #7261)\n  Unset loading[$id] in ContainerBuilder on exception\n  [Console] fixed StringInput binding\n  [Console] added string input test\n  Revert  merged branch jfsimon/issue-6749 (PR #7220) \n  fixed CS\n\nConflicts:\n\tsrc/Symfony/Component/Console/Tests/Input/StringInputTest.php\n\tsrc/Symfony/Component/HttpKernel/Profiler/RedisProfilerStorage.php",
            "merged branch Tobion/scheme-method-def-tolerance (PR #7268)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n54c333d [Routing] unify and fix the loader tests\n41ad9d8 [Routing] make xml loader more tolerant\n\nDiscussion\n----------\n\n[Routing] make xml loader more tolerant\n\nschemes and methods may also be delimited by whitespace, comma or pipe.\nFixes https://github.com/symfony/symfony/pull/6049#issuecomment-11315698\nthis eases migration as now `methods= GET|POST ` also works\nthe second commit unifies the tests and fixes some strange assertions that were useless\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [yes but not really]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| License       | MIT",
            "merged branch gajdaw/finder_unified_tests (PR #7197)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\na59e5e4 [Finder] Unified tests\n\nDiscussion\n----------\n\n[Finder] Unified tests\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nTests for `Finder` are very difficult to read because they contain calls to:\n\n    sys_get_temp_dir() . '/symfony2_finder/'\n\nThis improved version simplifies adding and removing new dirs and files.",
            "Fix warning for buildXml method\n\nFix  Warning: Missing argument 3  for XmlEncoder::buildXml() called several times in XmlEncoder::selectNodeType()",
            "merged branch fabpot/moved_serializer_4 (PR #7292)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7292).\n\nCommits\n-------\n\n4ffe234 Fix warning for buildXml method\n\nDiscussion\n----------\n\nFix missing argument\n\nThis PR was submitted on the symfony/Serializer read-only repository and moved automatically to the main Symfony repository (closes symfony/Serializer#4).\n\nFix  Warning: Missing argument 3  for XmlEncoder::buildXml() called several times in XmlEncoder::selectNodeType()",
            "merged branch Tobion/debug-command (PR #7301)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n15bf033 [FrameworkBundle] fix router debug command\nd16d193 [FramworkBundle] removed unused property of trans update command\n5361f83 [FramworkBundle] fix phpdoc of commands\n\nDiscussion\n----------\n\n[FrameworkBundle] router debug command fix\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [no]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| License       | MIT\n\nSee commits.",
            "fix xargs pipe to work with spaces in dir names",
            "merged branch havvg/hotfix/finder-spaces-in-dir (PR #7302)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7302).\n\nCommits\n-------\n\n3f3cf0c fix xargs pipe to work with spaces in dir names\n\nDiscussion\n----------\n\n[Finder] fix xargs pipe to work with spaces in dir names\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\n.. otherwise grep fails:\n\n````\ngrep: : No such file or directory\ngrep: /Users/havvg/Web: No such file or directory\ngrep: Development/symfony2/src/Symfony/Component/Finder/Tests/Fixtures/dolor.txt: No such file or directory\n```",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [FrameworkBundle] Fix code status in dockblock\n  Fixed test to use Reflection\n  [Finder] fixed a potential issue on Solaris where INF value is wrong (refs #7269)\n  Update RouteCompiler.php\n  [FrameworkBundle] avoids cache:clear to break if new/old folders already exist\n  [HttpKernel] Fixed possible profiler token collision (closes #7272, closes #7171)\n  [ClassLoader] tweaked test\n  [ClassLoader] made DebugClassLoader idempotent\n  [DomCrawler] Fix relative path handling in links\n\nConflicts:\n\tsrc/Symfony/Component/DomCrawler/Link.php\n\tsrc/Symfony/Component/Finder/Iterator/DepthRangeFilterIterator.php\n\tsrc/Symfony/Component/Routing/RouteCompiler.php",
            "merged branch havvg/hotfix/finder-spaces-in-dir (PR #7327)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\na735cbd fix xargs pipe to work with spaces in dir names\n\nDiscussion\n----------\n\n[Finder] fix xargs pipe to work with spaces in dir names\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\n.. otherwise grep fails:\n\n````\ngrep: : No such file or directory\ngrep: /Users/havvg/Web: No such file or directory\ngrep: Development/symfony2/src/Symfony/Component/Finder/Tests/Fixtures/dolor.txt: No such file or directory\n```",
            "[2.2][HttpKernel] fixed wrong option name in FragmentHandler::fixOptions",
            "merged branch Aitboudad/ticket_7309 (PR #7321)\n\nThis PR was squashed before being merged into the 2.2 branch (closes #7321).\n\nCommits\n-------\n\n4f3771d [2.2][HttpKernel] fixed wrong option name in FragmentHandler::fixOptions\n\nDiscussion\n----------\n\n[2.2][HttpKernel] fixed wrong option name in FragmentHandler::fixOptions\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | https://github.com/symfony/symfony/issues/7309\n\n---------------------------------------------------------------------------\n\nby Aitboudad at 2013-03-10T11:38:59Z\n\nHi @fabpot,\ncan you see why  all commits has failed on Travis ?\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2013-03-10T11:42:25Z\n\nThe test expects the option to be called `renderer` and not `strategy` so you need to change the tests.\n\n---------------------------------------------------------------------------\n\nby Aitboudad at 2013-03-10T12:19:19Z\n\n@henrikbjorn thanks it's ok, but there is still 1 test :( in Symfony\\Component\\Form\\Tests\\Extension\\Core\\Type\\TimeTypeTest::testSetDataDifferentTimezones\n@bschussek Can you see why :).",
            "Property accessor custom array object fix",
            "merged branch cystbear/PropertyAccessor-CustomArrayObject-Fix (PR #7320)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7320).\n\nCommits\n-------\n\n7ff2d52 Property accessor custom array object fix\n\nDiscussion\n----------\n\nProperty accessor custom array object fix\n\nCopied `Symfony\\Component\\Form\\Tests\\Fixtures\\CustomArrayObject` to Fixtures dir, and used it in tests to be able run tests separately from Form component,",
            "Update SecurityDataCollector.php\n\nfixed annotations",
            "fixed id case when setting a service (also slightly enhanced an error message)",
            "merged branch fabpot/deic-fix (PR #7333)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7333).\n\nCommits\n-------\n\n6992a9e [DependencyInjection] fixed id case when setting a service (also slightly enhanced an error message)\n\nDiscussion\n----------\n\n[DependencyInjection] fixed id case when setting a service (also slightly enhanced an error message)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a",
            "merged branch janschoenherr/patch-3 (PR #7350)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n4052865 Update time.html.twig\n\nDiscussion\n----------\n\n[WebprofilerBundle] Update time.html.twig\n\nthe  max  variable seems to be unused",
            "merged branch Tobion/null-for-optional-param (PR #7369)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\nd7a7434 [Routing] fix url generation for optional parameter having a null value\n\nDiscussion\n----------\n\n[Routing] fix url generation for optional parameter having a null value\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [no]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes|]\n| Fixed tickets | [#7316]\n| License       | MIT",
            "[HttpKernel] Updated TraceableEventDispatcher.php",
            "merged branch janschoenherr/patch-4 (PR #7365)\n\nThis PR was squashed before being merged into the 2.2 branch (closes #7365).\n\nCommits\n-------\n\nd9ee869 [HttpKernel] Updated TraceableEventDispatcher.php\n\nDiscussion\n----------\n\n[HttpKernel] Updated TraceableEventDispatcher.php\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | no\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nCurrently, if no listeners are registered for an dispatched event, the StopwatchEvent  $eventName.'.loading'  is never being stopped.",
            "merged branch BenoitLeveque/assets-install-finder-issue (PR #7341)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n602cdee replace INF to PHP_INT_MAX inside Finder component.\n\nDiscussion\n----------\n\n[2.2][Finder] fix assets:install issue\n\nI have some bundle with assets, and when i do.\n```\napp/console assets:install --env=prod\n```\nI don't have any of my file inside web/bundles, only empty first level directory like  css \nbug issue introduced by 7c66dffa6b\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-03-13T13:34:10Z\n\nCan you base your patch on the 2.1 branch as the bug is also there? Thanks.\n\n---------------------------------------------------------------------------\n\nby BenoitLeveque at 2013-03-13T14:29:55Z\n\ni didn't reproduce this issue on the latest commit (175cdc0fd04589d6b7abce8a705537e1366df867) on 2.1 branch\n\n---------------------------------------------------------------------------\n\nby taylorotwell at 2013-03-13T14:35:28Z\n\nYeah, it appears the Finder component's recursion is basically broken on the 2.2 branch.\n\n---------------------------------------------------------------------------\n\nby BenoitLeveque at 2013-03-14T13:24:52Z\n\n@fabpot i can't reproduce this issue on the 2.1 branch because you already fix it, see 7241be9b641acff08aad294d57a209b901ff6b21",
            "fix validator translation",
            "merged branch fzerorubigd/master (PR #7384)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7384).\n\nCommits\n-------\n\n7dc1e84 fix validator translation\n\nDiscussion\n----------\n\nfix plural string in persian (fa) translation/ validation component\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes (plural fix in persian translation)\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  sub-requests are now created with the same class as their parent\n  [FrameworkBundle] removed BC break\n  [FrameworkBundle] changed temp kernel name in cache:clear\n  [DoctrineBridge] Avoids blob values to be logged by doctrine\n  [Security] use current request attributes to generate redirect url?\n  [Validator] fix showing wrong max file size for upload errors\n  [TwigBridge] removed double var initialization (refs #7344)\n  [2.1][TwigBridge] Fixes Issue #7342 in TwigBridge\n  [FrameworkBundle] fixed cahe:clear command's warmup\n  [TwigBridge] now enter/leave scope on Twig_Node_Module\n  [TwigBridge] fixed fixed scope & trans_default_domain node visitor\n  [TwigBridge] fixed non probant tests & added new one\n  [BrowserKit] added ability to ignored malformed set-cookie header\n  [Translation] removed wriong 'use'\n  [Translation] added xliff loader/dumper with resname support\n  [TwigBridge] fixes\n\nConflicts:\n\tsrc/Symfony/Bundle/FrameworkBundle/HttpKernel.php\n\tsrc/Symfony/Component/Security/Http/HttpUtils.php\n\tsrc/Symfony/Component/Translation/Loader/XliffFileLoader.php\n\tsrc/Symfony/Component/Translation/Tests/Loader/XliffFileLoaderTest.php",
            "merged branch jfsimon/issue-7185-2.2 (PR #7390)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n53cf12b replaced new occurences of 'Request::create()' with '::create()'\n\nDiscussion\n----------\n\n[2.2] sub-requests are now created with the same class as their parent\n\nFollowing #7381\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7185, #7186",
            "merged branch Tobion/trans-refactor (PR #7058)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n0992032 [Translator] fix metadata\n3b71000 [Translator] fix typecast in transChoice\n88f98c9 [Translator] optimized adding of resources and saving a call to array_unique\ne88bf7b [Translator] fix phpdoc of MessageCatalogueInterface::add and ::replace\nc97ee8d [Translator] mention that the message id may also be an object that can be cast to string in TranslatorInterface and fix the IdentityTranslator that did not respect this\n5a36b2d [Translator] fix MessageCatalogueInterface::getFallbackCatalogue that can return null\nd1c34e8 [Translator] coding style\n\nDiscussion\n----------\n\n[Translator] several fixes and refactorings\n\nReasoning see individual commits.\n\nBC break: no <del>yes because I added an array typehint to `MessageCatalogueInterface::add` and `::replace` since it's required. I could remove the typhint again so there would be no bc break, but IMO having it is much more explicit and consistent as there are already other array typhints as in the constructor.</del>\n\n---------------------------------------------------------------------------\n\nby Tobion at 2013-02-14T09:36:35Z\n\n@fabpot removed typehint and code movement. Added 2 more commits.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2013-03-04T16:14:37Z\n\n@fabpot ping",
            "removing xdebug extension",
            "merged branch pborreli/no-xdebug-travis (PR #7398)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7398).\n\nCommits\n-------\n\ndf99ecf [travis-ci] removing xdebug extension\n\nDiscussion\n----------\n\n[travis-ci] removing xdebug extension\n\nwe don't need it (no coverage), and removing it speeds travis build by 1 minute approx (composer + icu + phpunit)",
            "fixed handling of heredocs",
            "merged branch fabpot/fix-heredocs (PR #7416)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7416).\n\nCommits\n-------\n\n6d29979 [ClassLoader] fixed handling of heredocs\n\nDiscussion\n----------\n\n[ClassLoader] fixed handling of heredocs\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a",
            "[ClassLoader] fixed heredocs handling\n\nThe end of an hereodc must have a newline to avoid PHP syntax errors.",
            "merged branch fabpot/fix-heredocs (PR #7417)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n601da45 [ClassLoader] fixed heredocs handling\n\nDiscussion\n----------\n\n[ClassLoader] fixed heredocs handling\n\nThe end of an hereodc must have a newline to avoid PHP syntax errors.",
            "merged branch stof/toolbar_ie (PR #7423)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n39445c5 [WebProfilerBundle] Fixed the toolbar styles to apply them in IE8\n\nDiscussion\n----------\n\n[WebProfilerBundle] Fixed the toolbar styles to apply them in IE8\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | #7422\n| License       | MIT\n\nCurrently, the toolbar breaks the design of the whole page in IE8 and lower as it does not have styles applied. Even though it is a debugging tool and devs are often using modern browsers, it is painful to be forced to disable it when testing the site in IE (I won't bother about supporting the profiler JS in IE8 though as this is a different page which can be displayed in a modern browser even when testing in IE).\nThe reason of the issue is that [IE8 removes style tags at the beginning when setting the innerHTML](http://social.msdn.microsoft.com/forums/en-US/iewebdevelopment/thread/33fd33f7-e857-4f6f-978e-fd486eba7174/). As the fix is as easy as moving the tag after the div, I don't see a reason to reject this change.\n\nI sent the bugfix to 2.2 because these templates have been refactored a lot between 2.1 and 2.2 so the fix would have been different. However, it is also possible to fix it in 2.1 if you want.",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  Add a public modifier to an interface method\n  [HttpRequest] fixes Request::getLanguages() bug\n  [HttpCache] added a test (cached content should be kept after purging)\n  [DoctrineBridge] Fixed non-utf-8 recognition\n  [Security] fixed HttpUtils class tests",
            "merged branch kherge/2.2 (PR #7428)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n633c051 Fixed invalid file path for hiddeninput.exe on Windows.\n\nDiscussion\n----------\n\n[2.2] [Console] Fix  The system cannot find the path specified.  on Windows for askHiddenResponse().\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | none available\n| License       | MIT\n| Doc PR        | n/a",
            "change wrapped exception message to be more usefull",
            "merged branch gimler/pimp_exception (PR #7433)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7433).\n\nCommits\n-------\n\n9f84528 change wrapped exception message to be more usefull\n\nDiscussion\n----------\n\nchange wrapped exception message to be more usefull\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\nWhen you try to parse a yml file with the XMLLoader you get the following Exception\n\n```\n[Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException]\n[ERROR 4] Start tag expected, '<' not found (in n/a - line 1, column 1)\n\n[InvalidArgumentException]\n[ERROR 4] Start tag expected, '<' not found (in n/a - line 1, column 1)\n```\n\nafter the patch\n```\n[Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException]\nUnable to parse file  /home/.../src/Application/FOS/UserBundle/DependencyInjection/../Resources/config/services.yml .\n\n[InvalidArgumentException]\n[ERROR 4] Start tag expected, '<' not found (in n/a - line 1, column 1)\n```",
            "merged branch Tobion/strict-req-xsd (PR #7424)\n\nThis PR was merged into the 2.2 branch.\n\nCommits\n-------\n\n7ef90d2 fix xsd definition for strict-requirements\n\nDiscussion\n----------\n\nfix xsd definition for strict-requirements\n\nsee https://groups.google.com/forum/?fromgroups=#!topic/symfony-devs/bvHPI5C4dlY",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  updated VERSION for 2.0.23\n  update CONTRIBUTORS for 2.0.23\n  updated CHANGELOG for 2.0.23\n  [Form] fixed failing test\n  [DomCrawler] added support for query string with slash",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  #7106 - fix for ZTS builds\n  Added '@@' escaping strategy for YamlFileLoader and YamlDumper\n  [Yaml] fixed bugs with folded scalar parsing\n  [Form] made DefaultCsrfProvider using session_status() when available\n  Added unit tests to Dumper\n  Update .travis.yml (closes #7355)\n  [HttpFoudantion] fixed Request::getPreferredLanguage()\n  Revert  merged branch jfsimon/issue-6928 (PR #7378) \n  Routing issue with installation in a sub-directory ref: https://github.com/symfony/symfony/issues/7129\n\nConflicts:\n\t.travis.yml\n\tsrc/Symfony/Bundle/FrameworkBundle/Routing/Router.php\n\tsrc/Symfony/Component/Routing/RouteCollection.php",
            "[WebProfiler] added the possibility to override the application name/version in the WDT",
            "merged branch fabpot/webprofiler-customization (PR #7003)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[2.3] [WebProfiler] added the possibility to override the application name/version in the WDT\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\nd35cb9f [WebProfiler] added the possibility to override the application name/version in the WDT",
            "merged branch schmittjoh/routingFix (PR #7458)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\nReverts behavior change to UrlGenerator\n\nI do not want to talk much about the behavior change and whether it makes sense or not because I think it does not matter in this situation anyway.\n\nThe ``generate`` method is tagged with ``@api``, there is no security issue that was fixed. According to the rules set forth at http://symfony.com/doc/current/book/stable_api.html, the semantics of such a method must not be changed.\n\nThere is some more discussion in #6814 and the commit changing the behavior is this one: https://github.com/symfony/Routing/commit/c66d1f9de30fd1b6a86cca10dd79d12c9ba9ff25#diff-0\n\nCommits\n-------\n\na765375 reverts some behavior changes made in c66d1f9de30fd1b6a86cca10dd79d12c9ba9ff25",
            "Add missing use",
            "Remove already defined arguments",
            "merged branch xkobal/master (PR #7436)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7436).\n\nDiscussion\n----------\n\nBugs when RememberMe use token_provider\n\nWhen token_provider is used for remember_me in security.yml, it produces an Exception :\n\nCatchable Fatal Error: Argument 5 passed to Symfony\\Component\\Security\\Http\\RememberMe\\PersistentTokenBasedRememberMeServices::__construct() must be an instance of Symfony\\Component\\Security\\Http\\RememberMe\\LoggerInterface, instance of Symfony\\Bridge\\Monolog\\Logger given, called in /home/overblog/public_html/OverblogUser/app/cache/dev/appDevDebugProjectContainer.php on line 2358 and defined in /home/overblog/public_html/OverblogUser/vendor/symfony/symfony/src/Symfony/Component/Security/Http/RememberMe/PersistentTokenBasedRememberMeServices.php line 46\n\nThe problem comes from missing use in PersistentTokenBasedRememberMeServices and wrong inheritance in security_rememberme.xml.\n\nCommits\n-------\n\na7784e5 Remove already defined arguments\nc3b0ec4 Add missing use",
            "[Security] fixed wrong interface",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  bumped Symfony version to 2.1.10-DEV\n  updated VERSION for 2.1.9\n  update CONTRIBUTORS for 2.1.9\n  updated CHANGELOG for 2.1.9\n  [FrameworkBundle] Reuse definition variable in FormPass\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "merged branch jmikola/2.2-propertyaccess-docs (PR #7511)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[PropertyAccess] Documentation cleanup\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | none\n| License       | MIT\n\nResubmission of #7498\n\nCommits\n-------\n\n8aaa6ef [PropertyAccess] Remove trailing periods from doc blocks\nd78fec9 Fix param docs for PropertyAccessor read method",
            "On OS X, sys_get_tmp_dir() returns /var/private/..., which really is below /private/var.",
            "merged branch webfactory/fix-finder-test-osx (PR #7536)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7536).\n\nDiscussion\n----------\n\nFix Finder tests on OS X\n\n... where sys_get_temp_dir() does not return a realpath().\n\nCommits\n-------\n\n0ed8441 On OS X, sys_get_tmp_dir() returns /var/private/..., which really is below /private/var.",
            "merged branch TerjeBr/persistent-token-provider (PR #7534)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Security/Http/RememberMe] PersistentTokenBasedRememberMeServices bugfix\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass? | yes\n| License       | MIT\n\nThe database and debug layer cannot handle raw random strings. It may contain invalid ut8 characters and whatnot. So, in order to avoid a lot of database bugs, we must base64_encode the random strings.\n\nCommits\n-------\n\n751abe1 Doctrine cannot handle bare random non-utf8 strings",
            "merge branch '2.1' into 2.2\n\n* 2.1:\n  fixed doc references (closes #7515)\n  small changes\n  [SecurityBundle] Fixed configuration exemple\n  idAsIndex should be true with a smallint or bigint id field.\n  Fixed long multibyte parameter logging in DbalLogger:startQuery\n  Keep the file extension in the temporary copy and test that it exists (closes #7482)\n  [Validator][translation][japanese]replaced period to japanese one [Validator][translation][japanese]fixed japanese translation to more practical one [Validator][translation][japanese]fixed message ordering to be consistent with other languages [Validator][translation][japanese]added new validation messages in japanese translation\n\nConflicts:\n\tsrc/Symfony/Component/Validator/Resources/translations/validators.ja.xlf",
            "fixed doc references (closes #7515)",
            "updated CHANGELOG for 2.2.1",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [HttpFoundation] Fixed copy pasted comment from FlashBag in AttributeBag\n  [FrameworkBundle] fixed the discovery of the PHPUnit configuration file when using aggregate options like in -vc app/ (closes #7562)\n  [WebProfilerBundle] removed next pointer class in a template",
            "updated VERSION for 2.2.1",
            "bumped Symfony version to 2.2.2-DEV",
            "merged branch Seldaek/fix-deprecated-logs (PR #7587)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[2.2][HttpKernel] Remove args from 5.3 stack traces to avoid filling log files\n\nFixes #7259 - it just makes the PHP 5.3 behavior match the one on 5.4.\n\nCommits\n-------\n\n99256e4 [HttpKernel] Remove args from 5.3 stack traces to avoid filling log files, fixes #7259",
            "merged branch caponica/HttpKernelExtension_phpdoc_fix (PR #7573)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Symfony\\Bridge\\Twig\\Extension] fixed two methods' documentation blocks\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | None\n| License       | MIT\n\nFixed phpdoc blocks to show that $uri can be passed as a string or ControllerReference (rather than just as a string)\n\nCommits\n-------\n\n2ea5eaa Fixed phpdoc blocks to show that $uri can be passed as a string or ControllerReference (rather than just as a string)",
            "Fix finding ACLs from ObjectIdentity's with different types",
            "merged branch gordalina/multiple-classes-oids-acls (PR #7567)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7567).\n\nDiscussion\n----------\n\n[Security] [ACL] Fix finding ACLs from ObjectIdentity's with different types\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nIf more than one ObjectIdentity with different Type (Class name) is given to AclProvider::findAcls() it would throw an exception stating that it could not find the ACLs\n\nThis fixes this issue which was introduced in 2.2.0-RC3 - see commit 3c3a90b9e5c78f89027169a33e80cfa76b6f6c62\n\n/cc @iBiryukov @schmittjoh\n\nCommits\n-------\n\n8b0bb57 [Security] [ACL] Fix finding ACLs from ObjectIdentity's with different types",
            "merged branch uwej711/fix_locale_is_overridden (PR #7516)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[HttpKernel] fix overwriting of request's locale by LocaleListener if attribute _locale is missing\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7474\n| License       | MIT\n| Doc PR        | n.a.\n\nCommits\n-------\n\ne8cae94 fix overwriting of request's locale if attribute _locale is missing",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [HttpKernel] tweaked previous merge\n  #7531: [HttpKernel][Config] FileLocator adds NULL as global resource path\n  Fix autocompletion of command names when namespaces conflict\n  Fix timeout in Process::stop method\n  fixed CS\n  Round stream_select fifth argument up.\n  Fix Process timeout\n\nConflicts:\n\tsrc/Symfony/Component/Process/Process.php\n\tsrc/Symfony/Component/Process/ProcessBuilder.php",
            "merged branch lyrixx/path-10 (PR #7597)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Security] Removed unused var\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | I guess\n| Fixed tickets | -\n\nCommits\n-------\n\nbd26419 [Security] Removed unused var",
            "fixed handling of  0  input on ask",
            "merged branch kipit/ticket_7549 (PR #7623)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7623).\n\nDiscussion\n----------\n\n[Console] fixed handling of  0  input on ask\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7549\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n18a9eaf [Console] fixed handling of  0  input on ask",
            "merged branch kipit/ticket_7549 (PR #7625)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Console] fixed handling of  0  input on ask\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7549\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n302d44f [Console] fixed handling of  0  input on ask",
            "fixed output of bag values\n\nCall json_encode with flags: JSON_UNESCAPED_SLASHES and\nJSON_UNESCAPED_UNICODE",
            "merged branch pvolok/fix_7540 (PR #7643)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7643).\n\nDiscussion\n----------\n\n[WebProfilerBundle] fixed output of bag values\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7540\n| License       | MIT\n| Doc PR        | -\n\nCall json_encode with flags: JSON_UNESCAPED_SLASHES and\nJSON_UNESCAPED_UNICODE\n\nCommits\n-------\n\n7ee8b10 [WebProfilerBundle] fixed output of bag values",
            "[HttpKernel] fixed the Kernel when the ClassLoader component is not available (closes #7406)",
            "merged branch Seldaek/consmerge (PR #7650)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Console] Fix merging of application definition\n\nFixes #7068, replaces #7158 - the fix there introduces a regression and always shows the application arguments in the commands help (i.e. it lists  command  as an argument to every command, except list because it overrides getNativeDefinition).\n\nCommits\n-------\n\n46909fa [Console] Fix merging of application definition, fixes #7068, replaces #7158",
            "merged branch nlegoff/ie_download_over_ssl (PR #7651)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[HTTPFoundation]  Fix download over SSL using IE < 8 and binary file response\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nrelated to #7153\n\nCommits\n-------\n\n4c51ec7 Fix download over SSL using IE < 8 and binary file response",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  Fix default value handling for multi-value options\n  [HttpKernel] truncate profiler token to 6 chars (see #7665)\n  Disabled APC on Travis for PHP 5.5+ as it is not available\n  [HttpFoundation] do not use server variable PATH_INFO because it is already decoded and thus symfony is fragile to double encoding of the path\n  [Yaml] improved boolean naming ($notEOF -> !$EOF)\n  [Yaml] fixed handling an empty value\n  [Routing][XML Loader] Add a possibility to set a default value to null\n  The /e modifier for preg_replace() is deprecated in PHP 5.5; replace with preg_replace_callback()\n  [HttpFoundation] Fixed bug in key searching for NamespacedAttributeBag\n  [Form] DateTimeToRfc3339Transformer use proper transformation exteption in reverse transformation\n  Update PhpEngine.php\n  [HttpFoundation] getClientIp is fixed.\n\nConflicts:\n\t.travis.yml\n\tsrc/Symfony/Component/Routing/Loader/XmlFileLoader.php\n\tsrc/Symfony/Component/Routing/Loader/schema/routing/routing-1.0.xsd\n\tsrc/Symfony/Component/Routing/Tests/Fixtures/validpattern.xml\n\tsrc/Symfony/Component/Routing/Tests/Loader/XmlFileLoaderTest.php",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  fix overwriting of request's locale if attribute _locale is missing",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [DependencyInjection] fixed wrong exception class\n\nConflicts:\n\tsrc/Symfony/Component/DependencyInjection/ContainerBuilder.php",
            "fixed source messages to accept pluralized messages [Validator][translation][japanese] add messages for new validator",
            "merged branch 77web/validator-translation-ja-2.2plus (PR #7718)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #7718).\n\nDiscussion\n----------\n\n[2.2+][Validator][translation] update Japanese translation for Validator component\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | N/A\n| License       | MIT\n\nCommits\n-------\n\n4ea64cd [Validator][translation][japanese] fixed source messages to accept pluralized messages [Validator][translation][japanese] add messages for new validator",
            "[2.2] Pass ESI header to subrequests",
            "merged branch mweimerskirch/patch-13 (PR #7253)\n\nThis PR was squashed before being merged into the 2.2 branch (closes #7253).\n\nDiscussion\n----------\n\n[2.2] Pass ESI header to subrequests\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7252\n| License       | MIT\n\nCommits\n-------\n\naf819a7 [2.2] Pass ESI header to subrequests",
            "[Config] #7644 add tests for passing number looking attributes as strings",
            "merged branch cordoval/bugfix/7644 (PR #7655)\n\nThis PR was squashed before being merged into the 2.2 branch (closes #7655).\n\nDiscussion\n----------\n\n[Config] #7644 add tests for passing number looking attributes as strings\n\n| Q                       | A                 |\n| -----------------  |:-------------:|\n| Bug fix?            | yes             |\n| New feature     | no               |\n| BC breaks?     | no               |\n| Deprecations?| no               |\n| Tests pass?    | yes             |\n| Fixed tickets    | #7644        |\n| License            | MIT            |\n\nCommits\n-------\n\nd98118a [Config] #7644 add tests for passing number looking attributes as strings",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [HttpFoundation][BrowserKit] fixed path when converting a cookie to a string\n  [BrowserKit] removed dead code\n  [HttpFoundation] fixed empty domain= in Cookie::__toString()\n  fixed detection of secure cookies received over https\n  [Translation] removed an uneeded class property\n  [Translation] removed unneeded getter/setter\n  [Translator] added additional conversion for encodings other than utf-8\n  fix a DI circular reference recognition bug\n  [HttpFoundation] fixed the creation of sub-requests under some circumstances for IIS",
            "[Translation] fixed a unit test",
            "merged branch kgilden/2.2 (PR #7776)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Validator] added missing estonian translation of messages\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | -\n| License       | MIT\n\nThis commit adds missing Estonian translation of messages introduced in 2.2. It's a follow-up to #7769.\n\nCommits\n-------\n\n633b63b [Validator] added missing estonian translation of messages",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  Removed trailing whitespace\n  [Validator] added missing estonian translation of messages\n  Filesystem::touch() not working with different owners (utime/atime issue)\n\nConflicts:\n\tsrc/Symfony/Component/Validator/Resources/translations/validators.et.xlf",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  added missing license blocks",
            "added missing license blocks",
            "made some optimization when parsing YAML files",
            "merged branch jfsimon/issue-6203-2.0 (PR #7239)\n\nThis PR was squashed before being merged into the 2.1 branch (closes #7239).\n\nCommits\n-------\n\nd1f5d25 [FrameworkBundle] Fixes invalid serialized objects in cache\n\nDiscussion\n----------\n\n[FrameworkBundle] Fixes invalid serialized objects in cache\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #6203\n\nFixes 2 problems:\n*  malformed router chache filenames (matcher & dumper)\n*  invalid cache file paths in serialized objects (.meta files)",
            "merged branch igorw/security-constraint (PR #7866)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nFix http-kernel dep in symfony/security\n\nThe current constraint will not match 2.3.x-dev and cause edge cases\nwhere either:\n\n* composer falls back to symfony/symfony because it cannot find a match\n* composer installs 2.2 versions of http-kernel and http-foundation\n\nCommits\n-------\n\n01016be Fix http-kernel dep in symfony/security",
            "Truly disabled profiler in prod",
            "[TwigBridge] added some unit test for the previous commit",
            "save auto-escaping of generated URLs when possible for performance reasons",
            "moved the kernel listener compiler pass to HttpKernel to make it reusable (refs #6643)",
            "make RegisterKernelListenersPass reusable",
            "merged branch Seldaek/verbosityflags (PR #7841)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Console] Add more verbosity levels\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #6066\n| License       | MIT\n| Doc PR        | symfony/symfony-docs#2554\n\nThis adds new verbosity levels.\n\nReplaces #7626 /cc @dlsniper\n\nCommits\n-------\n\n02c2038 Fix tests\n5327ec4 Add notes in UPGRADE and CHANGELOG\n77c9791 [Console] Add tests and support for more types of inputs\n54c1377 [Console] Handle new verbosity levels\ne639686 Revert invalid changes\n8f4d376 Removed unused options\n5bb4163 Fixed tests\nb62d35f Fix handling of --verbose=... and BC break\n16cdb61 Added more verbosity levels",
            "[FrameworkBundle] fixed implementation of previous merge (refs #5865)",
            "new method to create shorthand name from full Controller name",
            "[PropertyAccess] removed an interface as discussion in the previous merge (refs #7263)",
            "merged branch jaugustin/property-access-add-magic-call (PR #7263)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[PropertyAccess] add support for magic call\n\nHi,\n\nI add support for magic call with the `PropertyAccess`\n\nthe is basic implementation, if no `getter`, `isser`, or `hasser` or `_get` is found and there is `__call` then the PropertyAccess call the getter\n\nthe same for setter.\n\nThis functionality is disable by default\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | seems OK (failure/errors are the same on master)\n| Fixed tickets | #4683, #6413, #5309\n| License       | MIT\n| Doc PR        | https://github.com/symfony/symfony-docs/pull/2472\n\n- [x] submit changes to the documentation\n\n@bschussek is this ok ?\n\nCommits\n-------\n\na785baa [PropertyAccess] add support for magic call, related to #4683",
            "made some small tweaks",
            "alternate fix where we had accessor for the BrowerKit request/response instances",
            "fixed Client implementation to return the right Response (closes #4475)",
            "merged branch maerlyn/master (PR #7805)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Hungarian translation for the ISSN validator\n\nCommits\n-------\n\ncd2f0a6 [Validator] Hungarian translation for the ISSN validator",
            "merged branch ajgarlag/fix-issn-option (PR #7804)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Rename requireHyphens to requireHyphen for Issn constraint\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nWhile writing the documentation for the new Issn validator submitted yesterday at https://github.com/symfony/symfony/pull/7756, I've realized that the option ```requireHyphens``` should be renamed to ```requireHyphen``` because only one hyphen is allowed in the ISSN value.\n\nCommits\n-------\n\n94173ec Rename requireHyphens to requireHyphen for Issn constraint",
            "clarified how/when to use client or guessed mime-types and extensions on a File instance (closes #5039)",
            "[HttpFoundation] added some more phpdocs to clarify usage",
            "[HttpFoundation] added a way to inject a custom magic file into FileinfoMimeTypeGuesser (closes #6963)",
            "merged branch jakzal/dumpfile-tests (PR #7801)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Filesystem] Added a missing test case for Filesystem::dumpFile()\n\nThis PR adds a test case for the ``Filesystem::dumpFile()`` method (introduced in #7753).\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | [![Build Status](https://travis-ci.org/jakzal/symfony.png?branch=dumpfile-tests)](https://travis-ci.org/jakzal/symfony)\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n8fcf4c2 [Filesystem] Added a missing test case for Filesystem::dumpFile().",
            "merged branch jakzal/console-tests-cleanup (PR #6989)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Console] Cleaned up the unit tests.\n\nCleaned up some unit tests in the Console component as suggested in #6935. I didn't fully cleanup the Application tests to not to delay this PR. I might do it later as a separate one.\n\n| Q              | A                                        |\n|--------------|--------------------------------|\n| Bug fix?          | no |\n|New feature? | no |\n|BC breaks?    | no |\n|Deprecations? |\tno |\n|Tests pass? | yes |\n|Fixed tickets | #6935 |\n|License | MIT |\n|Doc PR | n/a |\n\nCommits\n-------\n\n5ca04b0 [Console] Cleaned up the unit tests.",
            "Enforce sprintf for exceptions",
            "merged branch jaugustin/fix-DateTimeToLocalizedStringTransformer-7561 (PR #7772)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nfix DateTimeToLocalizedStringTransformer issue #7561\n\nthis PR fix #7561 issue:\n\nThis fix possible issue with new `\\DateTime` throwing `Exception` not handled by the transformer.\n\nCommits\n-------\n\n6ccbbe9 fix DateTimeToLocalizedStringTransformer issue #7561, add tests",
            "merged branch pborreli/dot-ar (PR #7771)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nAdded trailing dot\n\nCommits\n-------\n\n59a9a21 Added trailing dot",
            "Merge branch '2.2'\n\n* 2.2:\n  [Config] #7644 add tests for passing number looking attributes as strings\n  [HttpFoundation][BrowserKit] fixed path when converting a cookie to a string\n  [BrowserKit] removed dead code\n  [HttpFoundation] fixed empty domain= in Cookie::__toString()\n  fixed detection of secure cookies received over https\n  [2.2] Pass ESI header to subrequests\n  [Translation] removed an uneeded class property\n  [Translation] removed unneeded getter/setter\n  [Translator] added additional conversion for encodings other than utf-8\n  fixed source messages to accept pluralized messages [Validator][translation][japanese] add messages for new validator\n  fix a DI circular reference recognition bug\n  [HttpFoundation] fixed the creation of sub-requests under some circumstances for IIS\n\nConflicts:\n\tsrc/Symfony/Component/HttpFoundation/Tests/CookieTest.php",
            "[Validator] tweaked ISSN validator (refs #7756)",
            "[Console] updated CHANGELOG and added some more unit tests",
            "Small update regarding previous commit",
            "Fix to prevent touch from failing if it already exists but made by another user when atime is not used",
            "Rvert testing",
            "Testing",
            "Method each return an instance of Crawler instead DOMElement\n\nMethod each return an instance of Crawler instead DOMElement",
            "Add some unit test",
            "Added html method into Crawler class\n\n* This method allow to get html inside desired element\n* New method is tested",
            "[HttpKernel] allowed any callable to be returned by ControllerResolver::createController",
            "Modify Request::getClientIp() to use IpUtils::checkIp()\n\nAdds the ability to use CIDR notation in the trusted proxy list",
            "Allow setting trusted_proxies using CIDR notation",
            "[HttpFoundation] added some unit tests for ranges of trusted IP addresses",
            "[HttpFoundation] removed obsolete request property",
            "[Request] removed obsolete proxy setting in tests",
            "[DependencyInjection] fixed management of scoped services with an invalid behavior set to null (closes #7636)",
            "[DependencyInjection] fixed PHP notice when the scope is not defined",
            "moved the request scope creation to the ContainerAwareHttpKernel class",
            "Merge branch '2.2'\n\n* 2.2:\n  #7106 - fix for ZTS builds\n  Added '@@' escaping strategy for YamlFileLoader and YamlDumper\n  [Yaml] fixed bugs with folded scalar parsing\n  [Form] made DefaultCsrfProvider using session_status() when available\n  Added unit tests to Dumper\n  Update .travis.yml (closes #7355)\n  [HttpFoudantion] fixed Request::getPreferredLanguage()\n  Revert  merged branch jfsimon/issue-6928 (PR #7378) \n  Routing issue with installation in a sub-directory ref: https://github.com/symfony/symfony/issues/7129",
            "[DependencyInjection] fixed wrong invalid behavior flag",
            "[ClassLoader] fixed handling of heredocs",
            "[DependencyInjection] fixed id case when setting a service (also slightly enhanced an error message)",
            "Unset loading[$id] in ContainerBuilder on exception",
            "merged branch chx/master (PR #7261)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #7261).\n\nCommits\n-------\n\nff8c5ca Unset loading[$id] in ContainerBuilder on exception\n\nDiscussion\n----------\n\nUnset loading[$id] in ContainerBuilder on exception\n\nThis is the same functionality that Container provides.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\n---------------------------------------------------------------------------\n\nby vicb at 2013-03-04T22:43:07Z\n\ncould you add a unit test and use the standard PR header (symfony.com > doc > contributing). thanks.\n\n---------------------------------------------------------------------------\n\nby igorw at 2013-03-04T22:48:02Z\n\nCan you add a test case? EDIT: I guess someone beat me to that comment. :)",
            "[DependencyInjection] added a test for the previous merge (refs #7261)",
            "merged branch jfsimon/issue-7232-2.1 (PR #7236)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\n6681df0 [Console] fixed StringInput binding\n6b98883 [Console] added string input test\n32f1904 Revert  merged branch jfsimon/issue-6749 (PR #7220) \n\nDiscussion\n----------\n\n[Console] fixes tests\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7231\n\n---------------------------------------------------------------------------\n\nby gigablah at 2013-03-02T13:25:10Z\n\nApparently 5b19c892cff52d8d50bcd4b1397cff8972acb9df broke the console shell. I was wondering why all commands executed through the shell in 2.2.0 were throwing  Too many arguments  exception.\n\n---------------------------------------------------------------------------\n\nby stof at 2013-03-02T13:27:09Z\n\n@gigablah This is already fixed in the 2.2 branch as this PR has already been merged in 2.2 (but the revert is also needed in 2.1)\n\n---------------------------------------------------------------------------\n\nby gigablah at 2013-03-02T13:51:44Z\n\nAh, guess I'll have to wait for it to be pushed to the symfony/console repository then.",
            "RedisProfilerStorage wrong db-number/index-number selected",
            "merged branch trivago/webprofiler_redis_add_select (PR #7177)\n\nThis PR was squashed before being merged into the 2.1 branch (closes #7177).\n\nCommits\n-------\n\nc82c754 RedisProfilerStorage wrong db-number/index-number selected\n\nDiscussion\n----------\n\nRedisProfilerStorage wrong db-number/index-number selected\n\nbug: in the webprofiler the wrong database (0) is selected when storage should not go to index 0. on redis connect the default behaviour is to select index/database number 0, but it is necessary to select a special index/database.\nsee: http://rediscookbook.org/multiple_databases.html\n\n[HttpKernel] [Profiler] [RedisProfilerStorage] added select for a db-number/db-index to dsn-patttern\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [yes]\n| New feature?  | [no]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| Fixed tickets |\n| License       | MIT\n\nUsage with index/db-number = 7 :\n```xml\n<!-- config_dev.xml -->\n\n<symfony:profiler only-exceptions= false  dsn= redis://127.0.0.1:6379/7  lifetime= 3600  />\n\n```\n\n```yml\n#config_dev.yml\n\nframework:\n...\n    profiler:\n    ...\n        dsn: redis://127.0.0.1:6379/7\n\n```\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-02-27T07:21:02Z\n\nCan you also add some unit tests?\n\n---------------------------------------------------------------------------\n\nby JohnDoe007 at 2013-02-27T09:36:28Z\n\n@fabpot the function getRedis() is currently not testable, I think. this means I have to do a bigger change to the class, add a public function initRedis() or something and move initialize code there to make the initialization process, where my change is, testable. is this ok to do it in that bugfix/pull request? or should I add this test change to master and only adding this small bugfix to the 2.1-branch?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-03-06T16:47:37Z\n\nThanks, I've merged the fix. Can you work on the changes needed to allow the code to be testable (on the master branch)?",
            "fixed typo",
            "remove dead code in yaml component",
            "merged branch gimler/cleamup_yaml (PR #7264)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #7264).\n\nCommits\n-------\n\nedda254 remove dead code in yaml component\n\nDiscussion\n----------\n\nremove dead code in yaml component\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\nCleanup unused code.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-03-06T16:27:57Z\n\nCan you explain why it is not needed anymore?\n\n---------------------------------------------------------------------------\n\nby igorw at 2013-03-06T16:44:30Z\n\n`$subject` is no longer used anywhere. The `substr` is now done inline in the `preg_match` call. This code is effectively dead.",
            "[FrameworkBundle] Fixes invalid serialized objects in cache",
            "Fix warning for buildXml method\n\nFix  Warning: Missing argument 3  for XmlEncoder::buildXml() called several times in XmlEncoder::selectNodeType()",
            "[DIC] Better handling of enableable configurations",
            "updated CHANGELOGS",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  [DependencyInjection] fixed composer.json\n  [Form] Updated checks for the ICU version from 4.5+ to 4.7+ due to test failures with ICU 4.6\n  fixed CS\n  small fix of #5984 when the container param is not set\n  fixed CS\n  Use better default ports in urlRedirectAction\n  Add tests for urlRedirectAction\n  Update src/Symfony/Component/DomCrawler/Tests/FormTest.php\n  Update src/Symfony/Component/DomCrawler/Form.php\n  [Security] remove escape charters from username provided by Digest DigestAuthenticationListener\n  [Security] added test extra for digest authentication\n  fixed CS\n  [Security] Fixed digest authentication\n  [Security] Fixed digest authentication\n  [SecurityBundle] Convert Http method to uppercase in the config\n  Use Norm Data instead of Data\n\nConflicts:\n\tsrc/Symfony/Bridge/Doctrine/Form/EventListener/MergeCollectionListener.php\n\tsrc/Symfony/Bundle/FrameworkBundle/Controller/RedirectController.php\n\tsrc/Symfony/Component/DependencyInjection/composer.json",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  replaced magic strings by proper constants\n  refactored tests for Request\n  fixed the logic in Request::isSecure() (if the information comes from a source that we trust, don't check other ones)\n  added a way to configure the X-Forwarded-XXX header names and a way to disable trusting them\n  fixed algorithm used to determine the trusted client IP\n  removed the non-standard Client-IP HTTP header\n\nConflicts:\n\tsrc/Symfony/Component/HttpFoundation/Request.php\n\tsrc/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  [HttpFoundation] reverted variable rename\n\nConflicts:\n\tsrc/Symfony/Component/HttpFoundation/Request.php",
            "updated CHANGELOG for 2.1.4",
            "updated VERSION for 2.1.4",
            "bumped Symfony version to 2.1.5-DEV",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  [TwigBundle] Moved the registration of the app global to the environment\n  needs to use simpleContent in xsd to allow empty elements\n  bumped Symfony version to 2.0.19-DEV\n  removed wrong routing xsd statement `mixed= true `\n  removed unused attribute from routing.xsd\n  updated VERSION for 2.0.19\n  update CONTRIBUTORS for 2.0.19\n  updated CHANGELOG for 2.0.19\n\nConflicts:\n\tCONTRIBUTORS.md\n\tsrc/Symfony/Bundle/TwigBundle/Resources/config/twig.xml\n\tsrc/Symfony/Bundle/TwigBundle/TwigEngine.php\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "Fix namespace of Validator and BrowserKit Tests",
            "merged branch franmomu/fix_validator_test_namespace (PR #6177)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #6177).\n\nCommits\n-------\n\n964074a Fix namespace of Validator and BrowserKit Tests\n\nDiscussion\n----------\n\nFix namespace of Validator and BrowserKit Tests\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nTodo: -\nLicense of the code: MIT",
            "Fixed DefaultValue for session.auto_start in NodeDefinition\n\nThis is just for consistency with the node type (Boolean)",
            "merged branch franmomu/auto_start_default_value (PR #6155)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #6155).\n\nCommits\n-------\n\n88811f4 [FrameworkBundle] Fixed DefaultValue for session.auto_start in NodeDefinition\n\nDiscussion\n----------\n\n[FrameworkBundle] Fixed DefaultValue for session.auto_start in NodeDefinition\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets:\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nThis is just for consistency with the node type.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-11-30T07:17:33Z\n\nI don't see the need to change the default value as this is deprecated anyway.\n\n---------------------------------------------------------------------------\n\nby franmomu at 2012-11-30T07:35:35Z\n\nI was trying to validate default values in Config Component and if I do this throws an exception",
            "merged branch franmomu/move_security_digest_data_test (PR #6183)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\nd03281b [Security] Move DigestDataTest.php inside the Security component\n\nDiscussion\n----------\n\n[Security] Move DigestDataTest.php inside the Security component\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nTodo: -\nLicense of the code: MIT",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  [Locale] fixed tests\n  [Config] Fixed tests on Windows\n  [TwigBundle] Fixed tests\n\nConflicts:\n\tphpunit.xml.dist\n\tsrc/Symfony/Bundle/TwigBundle/Tests/TwigEngineTest.php\n\tsrc/Symfony/Component/Locale/Tests/Stub/StubIntlDateFormatterTest.php\n\tsrc/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php",
            "merged branch hason/composer_2_1 (PR #6201)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\n10e5f3b Removed useless branch alias for dev-master in composer.json\n\nDiscussion\n----------\n\n[2.1] Fixed composer.json\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T08:23:35Z\n\nWhy is is useless?\n\n---------------------------------------------------------------------------\n\nby hason at 2012-12-06T08:30:58Z\n\nBecause the ``dev-master`` branch is alias for ``2.2-dev`` as mentioned @stof in https://github.com/symfony/symfony/pull/6196#discussion_r2320254.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T08:33:42Z\n\ngot it now. Can you fix your PR as there are some unrelated commits? Thanks.\n\n---------------------------------------------------------------------------\n\nby hason at 2012-12-06T09:02:50Z\n\nI backported some  unrelated  commits for better usage with composer. Should I remove these?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T09:05:45Z\n\nWe do not backport things. So, please, remove them.\n\n---------------------------------------------------------------------------\n\nby hason at 2012-12-06T10:02:08Z\n\ndone",
            "merged branch bschussek/issue6141 (PR #6206)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\nb604eb7 [DoctrineBridge] Improved performance of the EntityType when used with the  query_builder  option\ndb2ee54 [DoctrineBridge] Improved exception message\n99321cb [DoctrineBridge] Fixed: Exception is thrown if the entity class is not known to Doctrine\n\nDiscussion\n----------\n\n[DoctrineBridge] fixed caching when EntityType is used with the  query_builder  option\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  [HttpFoundation] changed UploadedFile::move() to use move_uploaded_file() when possible (closes #5878, closes #6185)\n  [HttpFoundation] added a check for the host header value\n\nConflicts:\n\tsrc/Symfony/Component/HttpFoundation/File/File.php\n\tsrc/Symfony/Component/HttpFoundation/Request.php\n\tsrc/Symfony/Component/HttpFoundation/Tests/RequestTest.php",
            "merged branch bschussek/issue6190 (PR #6216)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\nca5d9ac [DoctrineBridge] Fixed caching in DoctrineType when  choices  or  preferred_choices  is passed\n\nDiscussion\n----------\n\n[DoctrineBridge] Fixed caching in DoctrineType when  choices  or  preferred_choices  is passed\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #6190\nTodo: -\nLicense of the code: MIT\nDocumentation PR: n/a\n\n---------------------------------------------------------------------------\n\nby craue at 2012-12-06T18:31:43Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby lstrojny at 2012-12-06T18:35:04Z\n\nWhat about a test?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-12-07T12:39:51Z\n\nRemoved CHANGELOG entries and added tests.\n\n---------------------------------------------------------------------------\n\nby craue at 2012-12-07T13:14:02Z\n\nI'm not sure if @fabpot is objected to the changelog entry entirely or just the version number. What is the segfault about for PHP 5.4 in Travis?",
            "merged branch bschussek/issue6141_2 (PR #6217)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\n6e7e08f [Form] Fixed the default value of  format  in DateType to DateType::DEFAULT_FORMAT if  widget  is not  single_text \n\nDiscussion\n----------\n\n[Form] Fixed the  format  option in DateType\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #6141\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nThis PR fixes a regression introduced in #4839. To quote that PR:\n\n> This PR changes DateType and DateTimeType to support HTML5 by default when setting the option  widget  to  single_text .\n\nIn reality, the  format  option now defaults to the HTML5 format always, not just when  widget  is  single_text . This is fixed here.\n\nThe second commit in this PR removes special characters between select/text fields. What, with German locale, was\n\n```\n<day input>.<month input>.<year input>\n```\n\nbefore is now\n\n```\n<day input><month input><year input>\n```\n\nThis is the way date fields are represented on the majority of websites. If you *need* separators, you can have them by setting the  format  option to a custom value:\n\n```php\n$builder->add('myDate', 'date', array(\n    'format' => 'dd.MM.yyyy',\n));\n```\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-07T08:52:21Z\n\nThe second commit should probably be done on master and it changes the behavior.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-12-07T12:23:22Z\n\nOk, I removed the second commit now and removed the entries from the CHANGELOG.",
            "merged branch franmomu/fix_const_in_anonymous_function (PR #6244)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\na37e5e3 [Form] Fix const inside an anonymous function\n\nDiscussion\n----------\n\n[Form] Fix const inside an anonymous function for PHP5.3\n\nRelated with the comment in #6217\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2012-12-10T09:14:20Z\n\n+1 .. would be good to get this merged ASAP // @fabpot @bschussek",
            "Fixed: HeaderBag::parseCacheControl() not parsing quoted zero correctly\n\nWhen having a Cache-Control header like:\n\n    max-age= 0 \n\nisset($match[2]) is true but $match[2] containing:  0 , it is evaluated\nas false and 'true' will be set to  max-age  entry instead of  0 .",
            "merged branch patrickallaert/HeaderBag/QuotedZeroNotParsedCorrectly (PR #6252)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #6252).\n\nCommits\n-------\n\n97d9bf0 Fixed: HeaderBag::parseCacheControl() not parsing quoted zero correctly\n\nDiscussion\n----------\n\nFixed: HeaderBag::parseCacheControl() not parsing quoted zero correctly\n\nWhen having a Cache-Control header like:\n\n    max-age= 0 \n\n```isset($match[2])``` is true but ```$match[2]``` containing: ``` 0 ```, it is evaluated\nas ```false```. The result is that ```true``` will be set to  max-age  entry instead of ``` 0 ```.",
            "Fixed a typo",
            "merged branch DenisGorbachev/patch-2 (PR #6240)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #6240).\n\nCommits\n-------\n\n0f6d534 Fixed a typo\n\nDiscussion\n----------\n\nFixed a typo",
            "Revert  merged branch gajdaw/finder_splfileinfo_fpassthu (PR #4751)  (closes #6224)\n\nThis reverts commit 5608c0c3ee21e6aade3170d6c580bf7ad452a143, reversing\nchanges made to 38c30b71bd2d32ac31920996480d1706402118f2.\n\nConflicts:\n\tsrc/Symfony/Component/Finder/SplFileInfo.php",
            "merged branch le6o/patch-1 (PR #6260)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\nbae5cff fix date in changelog\n\nDiscussion\n----------\n\nfix typo with date in changelog",
            "Fix to allow null values in labels array",
            "merged branch kaywalker/master (PR #5394)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #5394).\n\nCommits\n-------\n\n08bd95e Fix to allow null values in labels array\n\nDiscussion\n----------\n\nFix to allow null values in labels array\n\nFixed false positives on array key is null\n\n---------------------------------------------------------------------------\n\nby stof at 2012-08-30T19:03:02Z\n\n@kaywalker This is still throwing a notice\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-08-31T09:13:33Z\n\nCould you please add a test?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-10-05T16:52:11Z\n\n@bschussek Is it mergeable now?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-10-05T16:58:34Z\n\nThe coding conventions in the test are not correct (too much indentation). Also, please reference this PR in a comment to the test. Last, the test should contain assertions to actually check something. Example:\n\n```\n    // https://github.com/symfony/symfony/pull/5394\n    public function testLabelsContainingNull()\n    {\n        $this->list = new ChoiceList(\n                array($this->obj1, $this->obj2),\n                array('A', null)\n        );\n\n        $this->assertEquals(array(0 => new ChoiceView($this->obj1, '0', 'A'), 1 => new ChoiceView($this->obj2, '1', null)), $this->list->getRemainingViews());\n    }\n```\n\n---------------------------------------------------------------------------\n\nby fmeynard at 2012-11-13T17:36:59Z\n\nI just tried the last commit and everything works correctly.",
            "removed unneeded comment",
            "Improved Cache-Control header when no-cache is sent",
            "[HttpFoundation] added some tests for the previous merge and removed dead code (closes #6037)",
            "[Security] fixed path info encoding (closes #6040, closes #5695)",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  fixed CS\n  removed the Travis icon (as this is not stable enough -- many false positive, closes #6186)\n  [Config] Loader::import must return imported data\n  [HttpFoundation] fixed a small regression\n\nConflicts:\n\tREADME.md\n\tsrc/Symfony/Bridge/Twig/Extension/FormExtension.php\n\tsrc/Symfony/Bundle/FrameworkBundle/Resources/views/Form/attributes.html.php\n\tsrc/Symfony/Bundle/FrameworkBundle/Resources/views/Form/form_widget.html.php\n\tsrc/Symfony/Bundle/FrameworkBundle/Templating/Helper/FormHelper.php\n\tsrc/Symfony/Component/Form/Form.php\n\tsrc/Symfony/Component/HttpFoundation/Request.php\n\tsrc/Symfony/Component/HttpFoundation/SessionStorage/PdoSessionStorage.php\n\ttests/Symfony/Tests/Bridge/Doctrine/Logger/DbalLoggerTest.php",
            "fixed CS",
            "merged branch rybakit/validator_messages (PR #6114)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\n31c32c5 [Validator] Fix typos in validators.ru.xlf\n\nDiscussion\n----------\n\n[Validator] Fix typos in validators.ru.xlf\n\nThis PR fixes PR #6106 as it still [contains some issues](https://github.com/symfony/symfony/pull/6106#discussion_r2215735).  I also removed the word  \u0444\u0430\u0439\u043b\u0430  ([L119](https://github.com/rybakit/symfony/blob/31c32c551fc2a4a9d5140c5ac554fa65874f3321/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf#L119)), as it is not necessary and there is no such addition in the other messages (e.g. [L167](https://github.com/symfony/symfony/blob/2.1/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf#L167), [L171](https://github.com/symfony/symfony/blob/2.1/src/Symfony/Component/Validator/Resources/translations/validators.ru.xlf#L171), ...).",
            "[TwigBundle] Moved the registration of the app global to the environment\n\nThis makes the app global variable available also when accessing the Twig\nenvironment directly instead of using the TwigEngine.\n\nConflicts:\n\tsrc/Symfony/Bridge/Twig/CHANGELOG.md\n\tsrc/Symfony/Bundle/TwigBundle/Resources/config/twig.xml\n\tsrc/Symfony/Bundle/TwigBundle/TwigEngine.php",
            "merged branch hason/tests_2_0 (PR #6197)\n\nThis PR was merged into the 2.0 branch.\n\nCommits\n-------\n\n5fe58bf [Locale] fixed tests\n500cc3c [Config] Fixed tests on Windows\n\nDiscussion\n----------\n\n[2.0] Fixed tests\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-05T15:25:23Z\n\nIs it a backport of some commits that were merged in 2.1/master?\n\n---------------------------------------------------------------------------\n\nby hason at 2012-12-05T22:17:15Z\n\nI backported 65281fb56c57c24352ff6cad18015871bce30c37 and modified 90d6dc379149e1a8d924f97be8c236b9e3bd2de5",
            "fixed CS",
            "removed deprecated functionality from RouteCollection",
            "[TwigBundle] removed deprecated syntax",
            "[Security] removed deprecated classes",
            "[Translation] removed deprecated classes",
            "removed deprecated stuff in the fragment sub-framework",
            "removed deprected way to declared trusted proxies",
            "[HttpFoundation] removed deprecated Request::splitHttpAcceptHeader() method",
            "[Yaml] removed deprecated support of PHP parsin when parsing YAML files",
            "[HttpFoundation] removed deprecated session methods",
            "[Validator] removed deprecated constraints",
            "[Validator] removed deprecated methods",
            "[Form] removed deprecated methods and classes",
            "[FrameworkBundle] removed deprecated cookie options",
            "[FrameworkBundle] removed deprecated options",
            "[Form] updated CHANGELOG",
            "[HttpKernel] added support for the X-Forwarded-For header (closes #6982, closes #7000)",
            "[HttpKernel] fixed the IP address in HttpCache when calling the backend",
            "[DependencyInjection] fixed management of scoped services with an invalid behavior set to null\n\nThe optimization for references has been removed as it does not take\nscopes into account.",
            "[HttpKernel] added a safeguard for when a fragment is rendered outside the context of a master request",
            "[DependencyInjection] added a way to automatically update scoped services\n\nA service can now be marked as synchronized; when set, all method calls\ninvolving this service will be called each time this service is set.\nWhen in a scope, methods are also called to restore the previous version of the\nservice.",
            "[FrameworkBundle] made the Request service synchronized\n\nThis change allows any service to depend on the Request (via a method\ncall) and always have the right Request instance without the need for\nthe service to be in the request scope (you still need to set the\nRequest reference as non-strict).",
            "fixed Request management for RequestListener",
            "[HttpKernel] ensured that the Request is null when outside of the Request scope",
            "fixed Request management for LocaleListener",
            "fixed Request management for FragmentHandler",
            "[FrameworkBundle] added some functional tests",
            "[WebProfilerBundle] removed the display of some information when their value is n/a",
            "[DependencyInjection] fixed a circular call (closes #6864)",
            "renamed some classes and Twig functions to more descriptive names (refs #6871)\n\nHttpContentRenderer has been renamed to FragmentHandler.\nThe RendererStrategy subnamespace has been renamed to Fragment.\nThe strategy classes now have Fragment in their names.\nProxyRouterListener has been renamed to FragmentListener\nThe router_proxy configuration entry has been renamed to fragments.",
            "[Finder] fixed regression in the Finder component (it was possible to use it without using exec before, closes #6357)",
            "removed deprecated message in FieldType",
            "[Validator] fixed broken tests",
            "merged branch franmomu/update_deprecated_calls_all_validator (PR #6743)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n8bfd7a7 Remove custom error handler for deprecations\nefbff0c Change deprecated Min and Max constraint\nc47f027 [Validator][Constraints] Update AllValidator using new Validator API\n\nDiscussion\n----------\n\n[Validator][Constraints] Update AllValidator using new Validator API\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets:\nLicense of the code: MIT",
            "added PropertyAccess in composer.json",
            "merged branch gnugat/refactoring/console-get-help (PR #6789)\n\nThis PR was squashed before being merged into the master branch (closes #6789).\n\nCommits\n-------\n\n917f473 [Console] Removing unnecessary sprintf in Application->getHelp\n\nDiscussion\n----------\n\n[Console] Removing unnecessary sprintf in Application->getHelp\n\nMinor change of the `Symfony\\Component\\Console\\Application->getHelp()`  method.\n\nI have spotted:\n1. an unnecessary `sprintf` call (no `args` arguments);\n2. two ways of adding a new line in the help (an empty string as new entry of the array and a `\\n` at the end of the string).\n\nIt seems to be there since the begining and it looks like a forgoten change to me, so I fixed them by removing the `sprintf` call and using a new array entry (empty string) instead of the `\\n`.\n\n| Q             | A\n| ------------- | ---\n| License       | MIT",
            "renamed proxy to router_proxy",
            "[HttpKernel] renamed path to _path to avoid collision",
            "[HttpKernel] made the Request required when using rendering strategies\n\nThe previous code allowed to pass null as a Request but that does not\nreally make sense as rendering a sub-request can only happen from a\nmaster request. This was done to ease testing but that was a mistake.",
            "removed the need for a proxy route for rendering strategies",
            "made the proxy path configurable",
            "renamed hostname to host in the routing system (closes #6775)\n\nAs explained in #6775, this has been done for the following reasons:\n\n1. It's also Request::getHost()\n2. The term hostname has been obsoleted in\nhttp://tools.ietf.org/html/rfc3986#appendix-D.2 and uses the host only\n3. hostname in the RFC was defined as the registered domain name, but we\nprobably also want to match IP-Adresses with the pattern which is the\nhost = IP-literal / IPv4address / reg-name for.",
            "[Validator] fixed phpdoc",
            "[HttpFoundation] renamed hostname to host in the test to be consistent",
            "tweaked the deprecated error handler to actually display the deprecation message\n\nI've also removed uninterested information (like the trigger_error stack\nframe).",
            "[TwigBridge] fixed format_file to include the line number even if the link text is passed\n\nThat fixes the logs in the profiler where lines were not displayed for\ndeprecated calls.",
            "Merge branch '2.1'\n\n* 2.1:\n  [Yaml] fixed unneeded BC break\n  [DependencyInjection] fixed a bug in the YAML dumper where references where not converted to the @ notation\n  [Yaml] fixed typo\n  updated VERSION for 2.1.7\n  updated CHANGELOG for 2.1.7\n  updated VERSION for 2.0.22\n  update CONTRIBUTORS for 2.0.22\n  updated CHANGELOG for 2.0.22\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "[Console] Removing unnecessary sprintf in Application->getHelp",
            "Merge branch '2.1'\n\n* 2.1: (24 commits)\n  updated license year\n  Update src/Symfony/Component/HttpFoundation/Response.php\n  [Form] Fixed inheritance of  error_bubbling  in RepeatedType\n  [Form] Fixed DateType when used with the intl extension disabled.\n  [HttpFoundation] fix return types and handling of zero in Response\n  [HttpFoundation] better fix for non-parseable Expires header date\n  Fixed missing plural message in portuguese validator\n  Fix Expires when the header is -1\n  [DoctrineBridge] Allowing memcache port to be 0 to support memcache unix domain sockets.\n  [Console] fixed unitialized properties (closes #5935)\n  [Process] Prevented test from failing when pcntl extension is not enabled.\n  Revert  [DoctrineBridge] Improved performance of the EntityType when used with the  query_builder  option \n  [Form] Fixed failing tests for DateTimeToStringTransformer.\n  [Locale] Fixed the StubLocaleTest for ICU versions lower than 4.8.\n  [Bundle] [FrameworkBundle] fixed typo in phpdoc of the SessionListener.\n  [Form] Fixed test regression introduced in #6440\n  [Tests] Fix namespaces\n  Fixed php doc of GenericEvent::__construct\n  HttpUtils must handle RequestMatcher too\n  use preferred_choices in favor of preferred_query\n  ...\n\nConflicts:\n\tsrc/Symfony/Bridge/Propel1/Form/ChoiceList/ModelChoiceList.php",
            "merged branch MaksSlesarenko/added-support-for-propel-enum-types-forms (PR #6715)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n2a7ecf7 Merge branch 'master' of github:MaksSlesarenko/symfony into added-support-for-propel-enum-types-forms\n3ae5b55 added support for propel enum types in PropelTypeGuesser\n\nDiscussion\n----------\n\nadded support for propel enum types in PropelTypeGuesser\n\nadded support for propel enum and mysql enum field types\n\n---------------------------------------------------------------------------\n\nby willdurand at 2013-01-14T19:06:06Z\n\nThe build status is a Travis-CI issue. Should be green.\n\n---------------------------------------------------------------------------\n\nby MaksSlesarenko at 2013-01-16T23:11:52Z\n\n The build status is a Travis-CI issue. Should be green. \nIt definitely should...\n\nPHPUnit 3.7.10 by Sebastian Bergmann.\n\nConfiguration read from ../symfony/symfony/src/Symfony/Bridge/Propel1/phpunit.xml.dist\n\n.......................................\n\nTime: 0 seconds, Memory: 8.50Mb\n\nOK (39 tests, 96 assertions)",
            "[FrameworkBundle] fixed Client::doRequest that must call its parent method (closes #6737)",
            "Merge branch '2.1'\n\n* 2.1:\n  [Yaml] fixed default value\n  Added Yaml\\Dumper::setIndentation() method to allow a custom indentation level of nested nodes.\n  added a way to enable/disable object support when parsing/dumping\n  added a way to enable/disable PHP support when parsing a YAML input via Yaml::parse()\n  fixed CS\n  [Process] Fix docblocks, remove `return` from `PhpProcess#start()` as parent returns nothing, cleaned up `ExecutableFinder`\n  fixes a bug when output/error output contains a % character\n  [Console] fixed input bug when the value of an option is empty (closes #6649, closes #6689)\n  [Profiler] [Redis] Fix sort of profiler rows.\n  Fix version_compare() calls for PHP 5.5.\n  Removed underscores from test method names to be consistent with other components.\n  [Process] In edge cases `getcwd()` can return `false`, then `proc_open()` should get `null` to use default value (the working dir of the current PHP process)\n  Fix version_compare() calls for PHP 5.5.\n  Handle the deprecation of IntlDateFormatter::setTimeZoneId() in PHP 5.5.\n  removed the .gitattributes files (closes #6605, reverts #5674)\n  [HttpKernel] Clarify misleading comment in ExceptionListener\n\nConflicts:\n\tsrc/Symfony/Bundle/WebProfilerBundle/Resources/views/Profiler/toolbar_style.html.twig\n\tsrc/Symfony/Component/Form/Tests/Extension/Core/Type/DateTimeTypeTest.php\n\tsrc/Symfony/Component/Form/Tests/Extension/Core/Type/TimeTypeTest.php\n\tsrc/Symfony/Component/Form/Tests/Util/PropertyPathTest.php\n\tsrc/Symfony/Component/HttpKernel/Profiler/RedisProfilerStorage.php\n\tsrc/Symfony/Component/Process/Process.php",
            "[Yaml] deprecated the possibility to pass a file name to Yaml::parse()",
            "merged branch maerlyn/master (PR #6719)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nf582138 [Security] fix Hungarian translation\n\nDiscussion\n----------\n\n[Security] fix Hungarian translation\n\nFixing a small translation mistake in the Hungarian translation.",
            "added the UPGRADE file for Symfony 3.0",
            "[Routing] updated CHANGELOG",
            "[Routing] renamed hostname pattern to just hostname",
            "[Routing] renamed pattern to path",
            "[Routing] added new schemes and methods options to the annotation loader",
            "merged branch Tobion/loaders (PR #6172)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n237bbd0 fixed and refactored YamlFileLoader in the same sense as the XmlFileLoader\n392d785 removed covers annotation from loader tests and unneeded use statements\n45987eb added tests for the previous XmlFileLoader fixes\nb20d6a7 ensure id, pattern and resource are specified\n8361b5a refactor the XMlFileLoader\n83fc5ff fix namespace handling in xml loader; it could not handle prefixes\n1a60a3c make resource and key attributes required in xsd\n02e01b9 improve exception messages in xml loader\n51fbffe remove unneeded cast\n358e9c4 fix some phpdoc\n\nDiscussion\n----------\n\n[Routing] improve loaders\n\nBC break: no\n\nMain points:\n- fixed Xml loader that could not handle namespace prefixes but is valid xml\n- fixed Yaml loader where some nonsesense configs were not validated correctly like an imported resource with a pattern key.\n\nAdded tests for all. Some refactoring + a few tweaks like better exception messages and more consistency between Xml loader and yaml loader. See also commits.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-12-07T18:16:08Z\n\n@fabpot this is ready\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-12-11T17:30:10Z\n\n@fabpot rebased. Please don't squash to one big commit where one does not see what changed why.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-11T17:32:40Z\n\nI only squash when most commits are CS fixes and feedback.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-12-11T17:37:49Z\n\nWell, you squashed #6022 so it's not possible to revert a specific deprecation.",
            "merged branch franmomu/rename_catalonian_translation (PR #6714)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\neeceafa [Security] Renamed catalonian translation file\n\nDiscussion\n----------\n\n[Security] Renamed catalonian translation file\n\nRenamed as validators file in [Validator](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Resources/translations/validators.ca.xlf) and in [Form](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Resources/translations/validators.ca.xlf) following ISO639-1 language code.",
            "merged branch alexolmos/patch-1 (PR #6712)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nfb52d94 Update src/Symfony/Component/Security/Resources/translations/security.es_CA.xlf\n\nDiscussion\n----------\n\nUpdate src/Symfony/Component/Security/Resources/translations/security.es...\n\n..._CA.xlf",
            "merged branch stloyd/bugfix/console_autocomplete (PR #6604)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n4d7c895 Fix bug where backspacing to an empty string and using the arrow keys would fail. Added test to prevent in future\ncd1def3 Fix bad unit test with undefined offset (spotted by @stloyd)\n7f149ae [Console] Split tests for `DialogHelper` that tests `ask()` method\ne6574de [Console] Fix `stty` reset when using `DialogHelper#ask()` with autocomplete functionality\n\nDiscussion\n----------\n\n[Console] Fix `DialogHelper#ask()` with autocomplete functionality\n\nBug fix: yes\nFeature addition: no\nBC break: no\nSymfony2 tests pass: yes\n\nThis PR fixes failing test after: 9d94fc7 as well as correctly resets `stty` to prevent _strange_ data showing-up in console:\n![console](https://f.cloud.github.com/assets/67402/47882/673a5dae-58ed-11e2-8bab-30a7c41733f5.png)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-01-07T17:27:40Z\n\nping @lmcd\n\n---------------------------------------------------------------------------\n\nby lmcd at 2013-01-08T03:09:51Z\n\nI'm using -1 as a neutral position when incrementing/decrementing the offset using arrow keys. If it started as zero, then it'd be incremented to 1 on down arrow and we'd miss the first (zero-index) match.\n\nAn easier fix for this is to replace all `if ($numMatches > 0)` with `if ($numMatches > 0 && -1 !== $ofs)`\n\nAlso, this:\n\n    if ($i === 0) {\n        $ofs = -1;\n        $matches = $autocomplete;\n        $numMatches = count($matches);\n    }\n\n    // Pop the last character off the end of our string\n    $ret = substr($ret, 0, $i);\n\n    $numMatches = 0;\n\nShould be this:\n\n    if ($i === 0) {\n        $ofs = -1;\n        $matches = $autocomplete;\n        $numMatches = count($matches);\n    }\n    else {\n        $numMatches = 0;\n    }\n\n    // Pop the last character off the end of our string\n    $ret = substr($ret, 0, $i);\n\nEdit: put these parts into a new pull request to avoid confusion https://github.com/symfony/symfony/pull/6614\n\n---------------------------------------------------------------------------\n\nby lmcd at 2013-01-08T03:11:20Z\n\nGood catch on the stty issue :+1:\n\n---------------------------------------------------------------------------\n\nby stloyd at 2013-01-08T12:14:01Z\n\n@fabpot @lmcd I have  merged  fixes from: #6614 and removed those `env`s when used with `stty`.\n\n---------------------------------------------------------------------------\n\nby lmcd at 2013-01-08T12:16:05Z\n\n@stloyd Awesome :)",
            "merged branch Engerim/patch-1 (PR #6706)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nf127781 Update src/Symfony/Bundle/FrameworkBundle/Controller/Controller.php\n\nDiscussion\n----------\n\n[FrameworkBundle] add missing use statement HttpKernelInterface for forward method\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2013-01-11T13:31:01Z\n\n+1",
            "merged branch mweimerskirch/security_lb (PR #6681)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n9471a1c Added Luxembourgish translation for security component\n\nDiscussion\n----------\n\nAdded Luxembourgish translation for security component",
            "merged branch Seldaek/psr3 (PR #6628)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n67d7423 Remove use of deprecated HttpKernel LoggerInterface\ndca4528 [HttpKernel] Extend psr/log's NullLogger class\n1e5a890 [Monolog] Mark old non-PSR3 methods as deprecated\n91a86f8 [HttpKernel][Monolog] Add PSR-3 support to the LoggerInterface\n\nDiscussion\n----------\n\n[HttpKernel][MonologBridge] PSR-3 support\n\nThis enables PSR-3 support and monolog 1.3+. The first commit is the main part. The rest deals with deprecation of short-hand methods (warn/err/crit/emerg) that are fully expanded in PSR-3 (warning/error/critical/emergency).\n\nThe downside of deprecating them is that for bundles it's a bit harder to support older and newer versions. If that is too much of a hassle you can drop that for now and cherry pick the first commit.\n\nThe upside is that it forces people to move towards PSR-3 compatible stuff, which means eventually we could completely drop the LoggerInterface from the framework. In any case I think the documentation should only mention the `Psr\\Log\\LoggerInterface` and people should start hinting against that. The change should be done in core as well I suppose.\n\nAnyway I wanted to throw this out there as it is to get feedback.\n\n---------------------------------------------------------------------------\n\nby stof at 2013-01-09T09:15:15Z\n\n@Seldaek I also think you should change the typehint to use the PSR LoggerInterface in all classes using the logger\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2013-01-09T09:54:55Z\n\nOK updated according to all the feedback. I tested it in an app and it still seems to work so there shouldn't be any major issues.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2013-01-09T09:59:55Z\n\n@fabpot if you merge please merge also the bundle PR, otherwise it won't be possible to update without conflict.\n\n---------------------------------------------------------------------------\n\nby frosas at 2013-01-10T14:59:20Z\n\nI'm trying to understand why a `composer update` of a Symfony 2.1.* resulted in a fatal error. Shouldn't a stable version don't break like this?\n\nAs @olaurendeau points, why Symfony depends 1.* instead of 1.2.*? Or why Monolog 1.3 breaks its public interface (EDIT: I'm not sure about it)? Or why isn't this PR being merged (into branch 2.1) at the same time Monolog 1.3 is released?\n\nPlease, understand I'm not looking for who to blame, it's just I want to know if this situation is unexpected or if otherwise a `composer update` on a stable branch is not as innocent as it seems.\n\n---------------------------------------------------------------------------\n\nby stof at 2013-01-10T15:06:51Z\n\n@frosas it cannot be merged into 2.1 as it is a BC break. The 2.1 branch has been updated to forbid Monolog 1.3 already\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2013-01-10T15:11:58Z\n\n@frosas you can blame me for releasing as 1.3.0 and not 2.0, but technically for monolog this isn't really a BC break, I just added an interface. The problem is due to the way it's used in symfony, it ended up as a fatal error. In any case the situation is now sorted out I think.\n\n---------------------------------------------------------------------------\n\nby frosas at 2013-01-10T15:26:43Z\n\n@stof now I see this `>=1.0,<1.3-dev` change in the 2.1 branch. Now, shouldn't a new (2.1.7) version be released for all of us not in the dev minimum-stability?\n\n@Seldaek then do you see feasible to rely only in X.Y.* versions to avoid this kind of errors?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2013-01-10T15:45:22Z\n\n@frosas relying on X.Y.* is painful because you always need to wait until someone updates the constraint to get the new version. Of course using ~1.3 like in this PR means if I fuck up and break BC people will update to it, but that's a less likely occurrence than the alternative I think, so I would rather not use X.Y.*\n\n---------------------------------------------------------------------------\n\nby frosas at 2013-01-10T15:50:50Z\n\n@Seldaek you are right about this, but I was thinking more in changing it only for the stable versions. EDIT: I mean, how often do you need a new feature in a branch you only apply fixes to?\n\n---------------------------------------------------------------------------\n\nby stof at 2013-01-10T15:57:32Z\n\n@frosas Monolog and Symfony have separate release cycles. Foorcing Symfony users to use an old version of Monolog until they update to a new version of Symfony whereas the newer Monolog is compatible is a bad idea. Thus, as Monolog keeps BC, it does not maintain bugfix releases for all older versions (just like Twig does too). So it would also forbid you to get the fixes done in newer Monolog versions.\n\nThe incompatibility between Symfony 2.1 LoggerInterface and PSR-3 (whereas they expect exactly the same behavior and signature for methods with the same name) is unfortunate and is the reason why we get some issues here.\n\n---------------------------------------------------------------------------\n\nby frosas at 2013-01-10T16:21:06Z\n\n@stof I appreciate you prefer to allow newer versions at the price of having to be constantly monitoring its changes to avoid breaks.\n\nAnother similar but safer strategy would be to stick to X.Y.* versions and upgrade to X.Y+1.* once the new version integration is tested, but I understand this is discutible in projects as close to Symfony as Monolog.\n\nReturning to the issue, what do you say to release this 2.1.7 version? Or is it only me who is having issues here?\n\n---------------------------------------------------------------------------\n\nby stof at 2013-01-10T16:26:20Z\n\n@frosas a minor release should not break BC when following smeantic versionning (Symfony warned about the fact it is not strictly followed for the first releases of 2.x). But as far as monolog is concerned, 1.3 is BC with 1.2.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2013-01-10T16:49:55Z\n\n@frosas sorry I didn't get you still had the problem. I tagged a 2.1.7 of monologbundle which hopefully fixes your issue.",
            "merged branch spolischook/master (PR #6679)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nb74c00f [security][translation] added ukrainian message translations\n\nDiscussion\n----------\n\nAdded ukrainian message translations",
            "merged branch kucharovic/patch-1 (PR #6678)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nc6eb819 Created security.cs.xlf\n\nDiscussion\n----------\n\n[security][tranlation] Created Czech translation to Security",
            "merged branch pborreli/typo-hu (PR #6666)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n9db1515 [Security] Removed extra space\n\nDiscussion\n----------\n\n[Security] Removed extra space",
            "merged branch iambrosi/patch-1 (PR #6663)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\ne908a52 Fixed spanish typos\n\nDiscussion\n----------\n\nFixed spanish typos",
            "merged branch VictorMateo/patch-1 (PR #6662)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n6ae8ca8 Update src/Symfony/Component/Security/Resources/translations/security.es.xlf\n\nDiscussion\n----------\n\nUpdate src/Symfony/Component/Security/Resources/translations/security.es...\n\n....xlf",
            "merged branch stof/enhance_deprecation (PR #6646)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n68257d3 Enhanced the triggering of E_USER_DEPRECATED errors\n\nDiscussion\n----------\n\nEnhanced the triggering of E_USER_DEPRECATED errors\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nDeprecations: no\nSymfony2 tests pass: yes\nFixes the following tickets: none\n\n- Removed useless error handlers around FormEvent as the triggering has\n  been fixed in it.\n- Enhanced the triggering of deprecation errors for places where the BC\n  method provide some user logic needing to be converted to a new way.\n  For instance, AbstractType should trigger the error when the type extending it overwrites the deprecated methods instead of ``setDefaultOptions``, which was not the case previously.\n- Enhanced the deprecation messages to mention the replacement whenever\n  possible.\n\n---------------------------------------------------------------------------\n\nby stof at 2013-01-10T01:23:49Z\n\n@fabpot should I remove ``Symfony\\Component\\Form\\Test\\DeprecationErrorHandler::getFormEvent`` ? It is not used anymore in the testsuite and is not needed anymore as the constructor of FormEvent does not trigger the deprecation erronously.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-01-10T07:24:02Z\n\n@stof: yes, remove it then. Thanks.\n\n---------------------------------------------------------------------------\n\nby stof at 2013-01-10T08:23:14Z\n\ndone",
            "updated VERSION for 2.2.0-BETA1",
            "merged branch ricardclau/improve-creditcard-regexp (PR #6583)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n5be0042 better regexp, more test cases, added comments about each credit card\ncc278af [Validator] Fix `CardSchemeValidator` double violation when value is non-numeric. Making scheme option accept strings in addition to arrays.\n\nDiscussion\n----------\n\n[Validator] Improve regexp for Credit Cards and some more tests\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets:\nTodo: Ensure these regexps are proper (credit card validation is always a pain)\nLicense of the code: MIT\nDocumentation PR:\n\nRegarding Cases excluded from new Regular Expressions:\n\n- Credit card lengths should be respected, these regexp cover lengths in http://en.wikipedia.org/wiki/Bank_card_number\n- Visa length can only be 16 and 13 (older ones)\n- Diners Cards starting by 5 come from a joint venture between Diners Club and MasterCard, and should be processed like a MasterCard (according to http://www.regular-expressions.info/creditcard.html).\n- There seems to be JCB cards starting by 2131 and 1800, I could find them is some places, also found these numbers being tested in Credit Card generators, but some people don't cover them. I don't know their story either\n\nAny comments will be much appreciated!\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-01-06T19:33:27Z\n\nThanks for working on this. It would be very valuable if you can add information about these regexes as comments (with links to relevant sources -- like what you've done in the PR description). Thanks.\n\n---------------------------------------------------------------------------\n\nby ricardclau at 2013-01-06T21:01:52Z\n\nAlways glad to be able to contribute a little bit\n\n@fabpot you mean @link / @see PHPDoc inside CardSchemeValidator.php? Or further comments in this discussion before adding them?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-01-06T21:16:48Z\n\nThe more information we can add in the class, the better it is.\n\n---------------------------------------------------------------------------\n\nby ricardclau at 2013-01-07T20:56:05Z\n\nI've added comments and included code from #6603 as I've said there. If you need something else, please let me know, once this is merged, #6603 can also be closed\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-01-07T21:41:40Z\n\nCan you keep the commit from #6603 to keep ownership?\n\n---------------------------------------------------------------------------\n\nby ricardclau at 2013-01-07T21:44:16Z\n\nI actually have thought about that... let me try my git skills :)\n\n---------------------------------------------------------------------------\n\nby ricardclau at 2013-01-07T21:59:16Z\n\nThere you go!",
            "Revert  merged branch stloyd/feature/kernel_secret_change (PR #6598) \n\nThis reverts commit dbca0403b878049a9b061e25172a6dcf0fcf9933, reversing\nchanges made to 1e6258846a3dca63cf079159ab044accb3dfc5c5.",
            "merged branch bschussek/issue6558_2 (PR #6580)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nbcc5552 [Form] Protected methods in FormConfigBuilder and FormBuilder from being called when it is turned into a FormConfigInterface instance\nfee1bf5 [Form] Introduced base ExceptionInterface\n\nDiscussion\n----------\n\n[Form] Protected methods in FormConfigBuilder and FormBuilder\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nWhen a form is created, a `FormConfigInterface` instance is passed to the constructor of `Form` and then accessible via `getConfig()`. For performance reasons, `FormBuilder` also implements `FormConfigInterface` and is passed here directly instead of copying its values to a new `FormConfig` instance, although protected from further modifications.\n\nIn addition to the already existing guard clauses in the setters, this PR adds guard clauses to the getters of `FormBuilder` to prevent misuse of the  config  object giving unexpected results.\n\nAdditionally, this PR introduces first improvements of the form's `Exception\\` namespace as described in  #6549.\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2013-01-05T18:19:04Z\n\n@bschussek I don't have the time to review this one, but please do not over optimize. We do a lot of weird things. e.g. I have the following code in one of my models.\n\n```php\npublic function validateEmail(ExecutionContextInterface $context)\n{\n    if ((null !== $this->product) && (in_array($this->product->getType(), array(ProductTypeEnum::Software, ProductTypeEnum::Subscription)))) {\n        /** @var $form Form */\n        $form = $context->getRoot();\n        if (($form instanceof Form) && ('foo' == $form->getConfig()->getOption('app_name'))) {\n            $context->validate($this, 'email', 'Email');\n        }\n    }\n}\n```\n\n---------------------------------------------------------------------------\n\nby bschussek at 2013-01-05T18:46:17Z\n\n@mvrhov Absolutely no problem. Most people will use methods from `FormConfigInterface` on the result of `getConfig()`, because that's the type hinted return value, and that's the way it should be. I don't even know how many people are aware that `getConfig()` returns the builder object.\n\nThis PR is for rare cases where people write forward-incompatible hacks by accessing `FormBuilder` methods like `get()`, `getParent()` or the like on `getConfig()` (I don't know why anyone would do this, but you never know...)\n\n---------------------------------------------------------------------------\n\nby vicb at 2013-01-07T11:08:34Z\n\n> Backwards compatibility break: no\n\nReally ?\n\n---------------------------------------------------------------------------\n\nby vicb at 2013-01-07T12:26:22Z\n\nChanging `FormException` from a class to an interface is a BC break (`new FormException()`)\n\n---------------------------------------------------------------------------\n\nby bschussek at 2013-01-07T12:41:20Z\n\n@vicb Fair enough ;) I adapted the CHANGELOG and UPGRADE-2.2.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2013-01-07T15:50:03Z\n\nThis PR break the tests.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2013-01-07T15:50:34Z\n\nI just fixed them and they run on my computer. I'm not sure why Travis fails again.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2013-01-07T15:56:41Z\n\nTravis merged the wrong commit. It merged 42c8987f350650a42d8c968d32cde50fc5d548c0 - see the merge commit here 766f7fe958ea69a302bed6298e55a3001a51e2b8 - when it should have merged cd3f4f9dfe43a526c23f30e16354ff11489b9db1.",
            "updated license year",
            "[Console] fixed unitialized properties (closes #5935)",
            "added MatcherInterface as a marker for all Routing matcher classes",
            "merged branch francisbesset/routing_constant_usage (PR #6449)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n18daa10 [Routing] Used static to call constant in XmlFileLoader\n\nDiscussion\n----------\n\n[2.2][Routing] Used static to call constant in XmlFileLoader\n\nIt is more complicated to override XmlFileLoader if contants are called with `self`.\nThis PR replace `self` to `static`.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\n---------------------------------------------------------------------------\n\nby piotrpasich at 2012-12-21T08:17:14Z\n\n+1",
            "[HttpKernel] fixed bundles var initialization",
            "[HttpKernel] tweaked logging in the exception listener\n\nWhen there is no logger, we should only log critical errors (this is\nmore sensible than the current behavior).",
            "[HttpKernel] refactored logging in the exception listener\n\n * avoid code duplication\n * allow easier overloading of the default behavior",
            "[DependencyInjection] removed hard dependency on the Config component\n\nThe Config component is a hard dependency for the loaders (but loaders\nthemselves are optional); all other classes should not have a hard dep\non Config. The introduction of a new flag allows to remove this\ndependency.\n\nThis commit also fixes skipped test dependencies.",
            "[DependencyInjection] fixed setting a synthetic service on a frozen container",
            "merged branch alsar/slovenian-translation (PR #6311)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n29595d1 added slovenian translations\n\nDiscussion\n----------\n\n[Validator] Added Slovenian translations for card validation",
            "[FrameworkBundle] changed data collector templates to use the new namespaced template names",
            "made the kernel optional in all data collectors",
            "[FrameworkBundle] restricted to only URIs the first argument of the actions helper",
            "updated CHANGELOG and UPGRADE files",
            "added some unit tests (and fixed some bugs)",
            "moved the logic from HttpKernel in FrameworkBundle to the HttpKernel component",
            "[TwigBridge] added a render_* function to ease usage of custom rendering strategies\n\nHere is the code you need to write when using the regular render\nfunction for an ESI strategy:\n\n    {{ render(path('path'), { strategy: 'esi' })\n}}\n\nAnd the same with the new render_* function:\n\n    {{ render_esi(path('path')) }}",
            "[HttpKernel] added a URL signer mechanism for hincludes",
            "[HttpKernel] added missing phpdoc and tweaked existing ones",
            "[HttpKernel] simplified and enhanced code managing the hinclude strategy",
            "[FrameworkBundle] made some services private",
            "[HttpKernel] made the strategy a regular parameter in HttpContentRenderer::render()",
            "[FrameworkBundle] deprecated HttpKernel::forward() (it is only used once now and not part of any interface anyway)",
            "made the content renderer work even when ESI is disabled or when no templating engine is available (the latter being mostly useful when testing)",
            "moved the deprecation logic calls outside the new HttpContentRenderer class",
            "moved the container aware HTTP kernel to the HttpKernel component",
            "[FrameworkBundle] fixed ESI calls",
            "merged branch stloyd/patch-1 (PR #6434)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n2a2c468 Update src/Symfony/Component/Form/Extension/Core/DataTransformer/DateTimeToStringTransformer.php\n\nDiscussion\n----------\n\n[Form] BC change for `preg_match` and old PCRE versions.\n\nFix `preg_match` in `DateTimeToStringTransformer`  to work with older PCRE.",
            "merged branch stloyd/bugfix/tests (PR #6433)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n5aed0d5 [FrameworkBundle] Remove test for class removed in commit 64d43c8\n\nDiscussion\n----------\n\n[FrameworkBundle] Remove test for class removed in commit 64d43c8",
            "fixed CS",
            "merged branch mmenozzi/bsd-fixes (PR #6432)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nad6a6c8 [Finder] Re-enable BsdFindAdapter for Darwin shells and fix it\n\nDiscussion\n----------\n\n[Finder] Re-enable BsdFindAdapter for Darwin shell and fix it\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes (tested both Mac OS X and Debian)\nFixes the following tickets: #6412\n\n----\n\nBSD find command needs  -E  switch to evaluate POSIX regex.\nAdded the ability to Command to insert bits at a given index.\n\nOn some systems (Mac OS X for example) php's function\nsys_get_temp_dir() returns a directory that is a symlink.\nThis causes tests failures because expected paths are different\nfrom path returned by the adapter. So, has been added a realpath.\n\nThe building of sorting command has been totally moved on the adapter so\nthe sorting command for BsdFindAdapter has been fixed.\n\nThe building of content filtering command has been moved on the adapter.\nIn BsdFindAdapter version, -r switch has been replaced with initial grep\nthat srips out blank lines, this way is compatible with BSD shell.",
            "[WebProfilerBundle] replaced yaml_dump by json_encode to make the Web Profiler independent from the YAML component",
            "[WebProfilerBundle] fixed exception panel when no exception is thrown",
            "[TwigBridge] added an extension for the HttpKernel component",
            "[TwigBundle] added the HttpKernel extension to the default Twig loaded extensions",
            "[WebProfilerBundle] replaced usage of the render tag by the render function (to decouple the bundle from TwigBundle)",
            "merged branch 1ed/patch-4 (PR #6382)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n7a06ce8 [WebProfilerBundle] fixed label for attribute\n\nDiscussion\n----------\n\n[WebProfilerBundle] fixed label  for  attribute\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-12-16T10:36:26Z\n\n:+1:",
            "tweaked previous merge",
            "merged branch dlsniper/profiler-time-search (PR #6113)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n5a73d55 Added small test to check if time limit works\n7f6e99b Fixed MongoDB storage missing time range. Fixed UI not searching properly. Removed unnecessary time query.\n3a0ed58 Added ability to search by time when using the profiler\n\nDiscussion\n----------\n\n[WebProfilerBundle] [HttpKernel][Profiler] Added ability to search by time when using the profiler\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\nLicense of the code: MIT\nDocumentation PR: ~\n\nThis PR adds the ability to search in a certain time range for profiles.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-11T14:36:21Z\n\nAnyone willing to help for the MongoDB support? ping @jmikola\n\n---------------------------------------------------------------------------\n\nby jmikola at 2012-12-11T18:42:00Z\n\nTotally. I'm flying between Turkey and New York tomorrow and if I have wifi on the plane (good chance) I'll check this out. Otherwise, later in the week.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-12-11T22:42:19Z\n\nI could have a look on this matter as well tomorrow but I'm not really sure about my schedule. Any help would be greatly appreciated. Thanks!\n\n---------------------------------------------------------------------------\n\nby jmikola at 2012-12-13T21:56:26Z\n\n@dlsniper: Had no wifi on the plane, but I'm available to work on this now. How can we go about it?\n\nShould I submit a PR against your branch? Then you can accept that and my commit should show up in this PR.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-12-13T22:05:21Z\n\n@jmikola I haven't had too much time either but yes, that would be great.\n\nThe change should go here: https://github.com/dlsniper/symfony/blob/b631cd989c2114bb3c34ce9b5868c5d46900a740/src/Symfony/Component/HttpKernel/Profiler/MongoDbProfilerStorage.php#L172 but I clearly lack the skill of making the necessary changes for it.\n\nThank you very much!\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-12-15T21:39:39Z\n\nI've fixed MongoDB driver, adjusted search by time like @jmikola suggested and fixed a UI bug. Can someone please validate this over?\n\nThanks!\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-12-15T21:55:51Z\n\nThe tests seem to be failing because of some locale changes not related to these commits. I encounter the same problem on my laptop and I could try and fix it into a different branch but last time I've tried to fix it it was ok on my side and failing on Travis. Any hints for that?",
            "[TwigBundle] fixed configuration to avoid key normalizations for paths and globals (closes #5998)",
            "[Config] allowed the disabling of key normalization on some array nodes\n\nThis reverts #6086",
            "merged branch ricardclau/rename_choice_to_oneof (PR #6360)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n9071676 create oneof constraint and add deprecation messages in choice, also make choice extend new oneOf constraint to avoid duplicate code\n\nDiscussion\n----------\n\n[Validator] Rename  Choice  to  OneOf \n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #6324\nTodo:\nLicense of the code: MIT\nDocumentation PR: https://github.com/symfony/symfony-docs/issues/2025\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-12-14T18:20:56Z\n\nCan you let `Choice` and `ChoiceValidator` extend the renamed classes? Then we avoid the code duplication. You can also remove `ChoiceValidatorTest` then.\n\n---------------------------------------------------------------------------\n\nby ricardclau at 2012-12-14T18:26:58Z\n\nFor sure! BTW there seems to be a problem with SF2 build when testing BR currency :S maybe it is the new ICU version supported, I guess you are aware of this but just in case!\n\n---------------------------------------------------------------------------\n\nby stof at 2012-12-14T21:14:04Z\n\nthe ``Choice`` constraint should trigger a ``E_USER_DEPRECATED`` in its constructor (and calling the parent constructor) as we agreed on this. The PR adding these calls everywhere is not merged yet, but it would avoid missing it when merging the PRs separately\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-12-14T21:19:45Z\n\nThings missing:\n\n* add a deprecation note to the Validator's CHANGELOG\n* add a block in UPGRADE-2.2 under the Validator's  Deprecations  section that explains how to upgrade with a before/after sample\n* add `trigger_error()` calls to the constructors of `Choice` and `ChoiceValidator`\n\nSee #6180 for more information about how to call `trigger_error()`.\n\n---------------------------------------------------------------------------\n\nby ricardclau at 2012-12-14T22:45:55Z\n\nSorry I was not aware of the trigger_error() agreement, absolutely +1 on it.\n\nI hope I understood everything properly, if there is something else or some other errors please tell me!\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-12-15T08:46:51Z\n\nThe entry in the CHANGELOG is still missing.\n\n---------------------------------------------------------------------------\n\nby ricardclau at 2012-12-15T09:36:28Z\n\nBy the CHANGELOG you mean what I just added right? Hope now it is ok!\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-12-15T09:45:16Z\n\nAwesome! :+1:",
            "[Translation] changed the MetadataAwareInterface method signatures",
            "[Translation] fixed CS in unit tests",
            "[Translation] added Metadata to MessageCatalogue",
            "[Translation] fixed name",
            "[Translation] created a new interface to avoid breaking BC",
            "[Translation] removed some code that is not done anywhere else in Symfony",
            "fixed unit tests",
            "fixed support for Twig loaders when they do not extend Twig_ExistsLoaderInterface",
            "removed the dependency on the container for exception handling",
            "[WebProfilerBundle] decoupled the bundle from TwigBundle",
            "merged branch hizai/patch-2 (PR #6314)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nfc62906 Update basque translation\n\nDiscussion\n----------\n\nUpdate basque translation\n\nUpdate translations in lines 195 and 203",
            "merged branch meigwilym/master (PR #6310)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n6c6bf53 first translation to Welsh\n\nDiscussion\n----------\n\n[Validator][Resources] added new Welsh translation file\n\nAdded a Welsh (cy) version of src/Symfony/Component/Validator/Resources/translations/validators.en.xlf",
            "merged branch stloyd/patch-2 (PR #6280)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\ned13297 [Validator] Card validation - Polish translations\n\nDiscussion\n----------\n\n[Validator] Card validation - Polish translations",
            "merged branch pierredup/validator_translations (PR #6291)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n34df35d Added validation messages for  Afrikaans\n\nDiscussion\n----------\n\n[Validator] Validation messages - Afrikaans translatios",
            "[Serializer] - Test undefined index #",
            "Maintain array structure",
            "Check if key # is defined in $value\n\nIf # is undefined in $value use set the attribute value as $value",
            "merged branch agarfors/master (PR #6290)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n402cfde [Validator] Card validation - Norwegian translations\n\nDiscussion\n----------\n\n[Validator] Card validation - Norwegian translations\n\nNoregian nynorsk translation",
            "merged branch umpirsky/luhn-sr-translation (PR #6278)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nd789e5a Serbian translation for card scheme constraint message.\n76d653f Serbian translation for Luhn constraint message.\n\nDiscussion\n----------\n\nSerbian translation for Luhn constraint message.",
            "merged branch asm89/yaml-inline (PR #6277)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n2f07966 [Yaml] Add test showing that dates before 01 Jan 1970 are correctly parsed\n\nDiscussion\n----------\n\n[Yaml] Add test showing that dates before 01 Jan 1970 are correctly parsed\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nAdds a test related to issue #6275, showing that the Yaml inline parsing supports ISO 8601 dates before 1980.",
            "[WebProfilerBundle] fixed composer.json and added missing PHPUnit configuration",
            "merged branch stloyd/feature/form-labels (PR #6262)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nd5426f0 [Form] Add tests to prove that label is not rendered when is marked as false\n120547c [Form][TwigBridge] Don't set label attributes if is marked as not to be rendered [Form][FrameworkBundle] Add option to disable rendering of label for fields\n36e4556 [Form] Option for not displaying a label by setting label to false. [Form] Fixed formatting & translation ..\n\nDiscussion\n----------\n\n[Form] Added option for not displaying a form-label by setting label to false\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nReplaces: #5421\n\n@fabpot @BenjaminBeck: I was just not sure what to do with  table based  forms, so I left `<td></td>` rendered when there is no label, because I'm not sure that we can hide it easily.\n\n---------------------------------------------------------------------------\n\nby XWB at 2012-12-11T09:30:14Z\n\n:+1:",
            "merged branch vicb/finder-adapters (PR #6253)\n\nThis PR was squashed before being merged into the master branch (closes #6253).\n\nCommits\n-------\n\ne62b5f7 [Finder] cleanup, fixes, improvements\n\nDiscussion\n----------\n\n[Finder] cleanup, fixes, improvements",
            "merged branch hason/patch-1 (PR #6222)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\ne458600 [DependencyInjection] Add deleted argument in Extension::processConfiguration\n\nDiscussion\n----------\n\n[DependencyInjection] Add deleted argument in Extension::processConfigur...\n\n...ation",
            "[Finder] cleanup, fixes, improvements",
            "merged branch vicb/httputils (PR #6005)\n\nThis PR was squashed before being merged into the master branch (closes #6005).\n\nCommits\n-------\n\n577ee80 [HttpFoundation] Move IP check methods to a HttpUtils class for reuse\n\nDiscussion\n----------\n\n[HttpFoundation] Move IP check methods to a HttpUtils class for reuse\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-11-13T18:05:18Z\n\nThanks @stof ! (didn't get my copy paste error as PHP allow calling non static method w/o a warning).\n\n---------------------------------------------------------------------------\n\nby GromNaN at 2012-11-17T23:19:29Z\n\nHaving an `Utils` class with mixed functions doesn't seem to be a good practice. I think the class should be called something like `Symfony\\Component\\HttpFoundation\\IpAddress`.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-11-27T09:37:20Z\n\n@fabpot could this be merged if `HttpUtils` is renamed to `IpUtils` ?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T13:35:28Z\n\nRenaming the class to `IpUtils` is indeed a good idea.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-12-06T14:07:59Z\n\nready !\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T14:39:19Z\n\nCan you add an entry in the CHANGELOG?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-12-06T14:53:09Z\n\ndone, thanks for the reminder !",
            "[HttpFoundation] changed UploadedFile::move() to use move_uploaded_file() when possible (closes #5878, closes #6185)",
            "merged branch vicb/di/ext (PR #6207)\n\nThis PR was squashed before being merged into the master branch (closes #6207).\n\nCommits\n-------\n\n57e9d28 [DI] Add a base class for extension\n\nDiscussion\n----------\n\n[DI] Add a base class for extension\n\ndepends on #6148\n\n@fabpot should we change `addClassesToCompile` & the likes (thinking of traits).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T13:05:05Z\n\nCan you rebase?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T13:06:43Z\n\nhmmm, now that I see the result, I'm not sure it is worth it as the Extension class in the DI component depends on the Config one.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-12-06T13:23:29Z\n\nNo pb, I can remove it, should I remove the `ContainerBuilder` altogether ?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T13:37:18Z\n\nI would keep everything that is strictly in the DI namespace in the DI extension class and everything else in the HttpKernel class as it is now.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-12-06T13:38:59Z\n\nBut this change is **great** if you need the DI without the full stack.\n\nWhat about my other comment ?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-06T13:55:30Z\n\nWhich other comment? This one?  should I remove the ContainerBuilder altogether?  In which case, I don't understand what it means.\n\nWhat about adding 2 classes in the DI component: the base one and another one with the dependency on the config component? Is it overkill?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-12-06T14:06:43Z\n\n>  should I remove the ContainerBuilder altogether? \n\nI mean that the **widely used** (ie loaders) `ContainerBuilder` also depends on Config - that was kind of a joke !\n\nI was refering to my first comment here\n\n> should we change addClassesToCompile & the likes (thinking of traits).\n\nOverkill I don't know but useless for sure: the `ExtensionInterface` depends on `ContainerBuilder` which depends on `Config`.",
            "[HttpFoundation] Move IP check methods to a HttpUtils class for reuse",
            "merged branch nomack84/fix_typo (PR #6210)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\ncf63069 Fixed copy/paste mistake\n\nDiscussion\n----------\n\nFixed copy/paste mistake in #6205\n\n@fabpot Sorry, I had a little copy/paste mistake here #6205",
            "[DI] Add a base class for extension",
            "merged branch asm89/enhance-processbuilder (PR #5853)\n\nThis PR was squashed before being merged into the master branch (closes #5853).\n\nCommits\n-------\n\n63b0059 [Process] Add ability to reset arguments on ProcessBuilder\n\nDiscussion\n----------\n\n[Process] Add ability to reset arguments on ProcessBuilder\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis PR adds the ability to  reset  the arguments set on a `ProcessBuilder`. This allows the builder to be re-used without having to set things like custom environment variables, current working directory etc again.",
            "[HttpFoundation] changed UploadedFile::move() to use move_uploaded_file() when possible (closes #5878, closes #6185)",
            "merged branch nomack84/route_debug_cmd (PR #6205)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nd902e9d [FrameworkBundle] Added hostnamePattern to the router:debug command\n\nDiscussion\n----------\n\n[FrameworkBundle] Added hostnamePattern to the router:debug command\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n\nWhen you use the router:debug command with a specific route, the hostname is not show. I fix this with this PR.  Also I make a little improvement to the requirements section.",
            "merged branch leevigraham/failure_path (PR #5860)\n\nThis PR was squashed before being merged into the master branch (closes #5860).\n\nCommits\n-------\n\nd0057d0 Added failure_path_parameter to mirror target_path_parameter\n\nDiscussion\n----------\n\nAdded failure_path_parameter to mirror target_path_parameter\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nEnable login failure redirect path can be assigned in a form field just like target path.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-10-29T09:40:17Z\n\nPlease also open a PR to the doc repo to document this new feature\n\n---------------------------------------------------------------------------\n\nby leevigraham at 2012-10-29T09:56:29Z\n\n@stof @fabpot Done.",
            "[Process] Add ability to reset arguments on ProcessBuilder",
            "merged branch hason/twigbundle_test (PR #6187)\n\nThis PR was merged into the 2.0 branch.\n\nCommits\n-------\n\nacf1f86 [TwigBundle] Fixed tests\n\nDiscussion\n----------\n\n[2.0][2.1][TwigBundle] Fixed tests",
            "merged branch KingCrunch/feature/static-template-cache (PR #6083)\n\nThis PR was squashed before being merged into the master branch (closes #6083).\n\nCommits\n-------\n\n6236c18 [FrameworkBundle] Added caching to TemplateController\n\nDiscussion\n----------\n\n[FrameworkBundle] Added caching to TemplateController\n\nBecause the main purpose for the `TemplateController` seems to be to render static pages like  disclaimer  and such, it seems useful to allow caching.\n\n    imprint:\n        pattern: /imprint\n        defaults:\n            _controller: SymfonyFrameworkBundle:Template:template\n            template:  ::pages/imprint.html.twig \n            maxAge: 86400\n\n---------------------------------------------------------------------------\n\nby pierredup at 2012-11-21T20:24:53Z\n\nIMHO I think the caching should be allowed to be set optionally\n\n---------------------------------------------------------------------------\n\nby KingCrunch at 2012-11-21T20:38:54Z\n\nI wrote it this way, because I assume, that it will cover more use-cases, than the other way round, but you are right, that this will change the current behaviour. Would like to hear other opinions, because I don't think one uses this action for anything else than fully-static content (means: The current behaviour doesn't feel very useful to me).\n\n---------------------------------------------------------------------------\n\nby pierredup at 2012-11-21T20:48:19Z\n\nI totally agree, but I would then suggest keep the caching on by default, but have the option to turn it off if necessary\n\n---------------------------------------------------------------------------\n\nby pierredup at 2012-11-21T20:52:01Z\n\nActually I think to have caching permanently enabled for static content would probably be the best scenario, but I like to think in terms of flexibility and specific user requirements. It would be great to get some opinions from others on this\n\n---------------------------------------------------------------------------\n\nby KingCrunch at 2012-11-23T21:12:45Z\n\nI thought about it and I come to the conclusion, that it is probably a not so good idea to enable caching by default, because ... well, it's not possible to disable it again. I guess something like this\n\n    {{ render '@AcmeBundle:ArticleController:latest' with {count: 1} }}\n\nmay be not so uncommon as I suggested in the first commit.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-03T22:18:51Z\n\nCan you make a PR for the docs? (symfony/symfony-docs). Thanks.",
            "merged branch colinfrei/deprecatedErrorHandling (PR #6173)\n\nThis PR was squashed before being merged into the master branch (closes #6173).\n\nCommits\n-------\n\n4878ec0 [HttpKernel] [WebProfilerBundle] Better handling of deprecated methods\n\nDiscussion\n----------\n\n[HttpKernel] [WebProfilerBundle] Better handling of deprecated methods\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: yes, if you were expecting E_USER_DEPRECATED or E_DEPRECATED to throw an exception\nSymfony2 tests pass: yes\nFixes the following tickets: #6139 partly, I'd go through and add the actual trigger_error() calls in another (or possibly one per component) PR\nTodo: call trigger_error()\nLicense of the code: MIT\nDocumentation PR: -\n\nI added the deprecation count with the Exception icon in the Profiler Toolbar, and changed the color of it to be yellow for deprecations and red for exceptions (was yellow for exceptions).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-12-03T09:43:09Z\n\nAdding trigger_error calls should be done in one PR to ease the merging. thanks.",
            "merged branch Tobion/patch-4 (PR #6175)\n\nThis PR was merged into the 2.0 branch.\n\nCommits\n-------\n\neec7885 needs to use simpleContent in xsd to allow empty elements\n\nDiscussion\n----------\n\nneeds to use simpleContent in xsd to allow empty elements",
            "fixed previous merge",
            "Merge branch '2.1'\n\n* 2.1:\n  [TwigBundle] Moved the registration of the app global to the environment\n  needs to use simpleContent in xsd to allow empty elements\n  bumped Symfony version to 2.1.5-DEV\n  bumped Symfony version to 2.0.19-DEV\n  removed wrong routing xsd statement `mixed= true `\n  removed unused attribute from routing.xsd\n  [HttpFoundation] added a small comment about the meaning of Request::hasSession() as this is a recurrent question (refs #4541)\n  updated VERSION for 2.1.4\n  updated CHANGELOG for 2.1.4\n  updated VERSION for 2.0.19\n  update CONTRIBUTORS for 2.0.19\n  updated CHANGELOG for 2.0.19\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php\n\tsrc/Symfony/Component/Routing/Loader/schema/routing/routing-1.0.xsd",
            "merged branch Tobion/routing-loaders (PR #6165)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n20dbe47 added annotation\nc73cb8a add default for pattern for clarity\nddd8918 make id attribute required\n62536e5 refactor to an xsd:group\n451dcdc it should be possible to define the defaults, req. and options in any order, just like in YAML\n\nDiscussion\n----------\n\nimprove routing xml scheme\n\nbc break: no\n\nMain points:\n- the xml scheme only allowed defaults, requirements and options in this specific order. but the XmlFileLoader does not have the restriction and the YAML definions does not have such an restriction either. this is now fixed. so you can use\n```\n<requirement key= _locale >en</requirement>\n<default key= _controller >Foo</default>\n```\nBefore it had the be first all defaults, then all requirements, then all options.\n- make id attribute required\n\nFor more changes see commits.",
            "merged branch vicb/realfix (PR #6160)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nbad50ac [HttpFoundation] Request::getRealMethod() now returns UPPERCASE\n\nDiscussion\n----------\n\n[HttpFoundation] Request::getRealMethod() now returns UPPERCASE",
            "merged branch vicb/typo (PR #6268)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n70a69d4 [Routing] fix typo\n\nDiscussion\n----------\n\n[Routing] fix typo",
            "[HttpFoundation] disabled Request _method feature by default (should now be explicitely enabled via a call to enableHttpMethodOverride())",
            "merged branch ragtek/master (PR #6121)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n1db6f05 Update UPGRADE-2.2.md\n\nDiscussion\n----------\n\nRemoved duplicate words in the  validator changes  description in file UPGRADE-2.2.md",
            "merged branch bschussek/drupal-validator (PR #6105)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n24c6530 [Validator] Added instructions on integrating the latest Validator changes to the UPGRADE file\n\nDiscussion\n----------\n\n[Validator] Added instructions on integrating the latest Validator changes\n\nThis is a documentation change only. See the file diff for more information.",
            "merged branch andremaha/validator_russian_translation (PR #6106)\n\nThis PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #6106).\n\nCommits\n-------\n\ne628c26 [Validator] Edited some minor grammar and style errors in russian validation file\n\nDiscussion\n----------\n\n[Validator] Edited some minor grammar and style errors in russian validation file\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR:",
            "merged branch bicpi/add_hasser_hint (PR #6110)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\n06ee53b [Form] improve error message with a  hasser  hint for PropertyAccessDeniedException\n\nDiscussion\n----------\n\n[Form] improve error msg w/ a  hasser  hint for PropertyAccessDeniedException\n\n Hasser  support was added under the 2.1 branch of the Form component\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: no, but fails exactly the same as without this fix\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: symfony/symfony-docs#1958",
            "Edited some minor grammar and style errors in russian validation file",
            "merged branch vicb/acceptheaderfix (PR #6003)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nf4b630d [HttpFoundation] fix #6002\n\nDiscussion\n----------\n\n[HttpFoundation] fix #6002\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-11-13T17:02:45Z\n\nCan you add a test?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-11-13T17:04:23Z\n\nhehe see #6004 there is also a test\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-11-13T17:05:06Z\n\nThere is a test in the original PR, no need for 6004.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-11-13T17:05:20Z\n\nWhich is why is was failing btw\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-11-13T17:06:36Z\n\nThe test in 6002 did not fail for me without your patch.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-11-14T12:47:46Z\n\n@Tobion @vicb What do we do? Just revert #6002 or merge this PR?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-11-14T13:25:51Z\n\nMerge. Go go go :)\n\n----- Reply message -----\nDe :  Fabien Potencier  <notifications@github.com>\nPour\u00a0:  symfony/symfony  <symfony@noreply.github.com>\nCc :  Victor Berchet  <victor@suumit.com>\nObjet : [symfony] [HttpFoundation] fix #6002 (#6003)\nDate : mer., nov. 14, 2012 13:47\n@Tobion @vicb What do we do? Just revert #6002 or merge this PR?\n\n&mdash;\n\nReply to this email directly or view it on GitHub.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-11-14T13:31:22Z\n\n@vicb can you explain what it fixes? As I said, your test does not cover something that would fail without the patch. So I don't see the bug.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-11-14T15:30:55Z\n\n@Tobion php.net states: The `current()` function simply returns the value of the array element that's currently being pointed to by the internal pointer and `reset()` returns the value of the first array element.\n\nI have no clue what the  element that's currently being pointed to by the internal pointer  in this method so `reset()` is probably what you want.\n\nValidated ?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-11-14T16:12:03Z\n\nI agree `reset()` is more explicit here. But `current()` should work just as well in this case because the array pointer can only be at the first item when calling the method. Anyway, this is good to merge. I just hoped there was a unit test that ensures this on my machine. This is why I added the test in my patch. Maybe Fabien can just merge the second commit on #6004\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-11-14T16:20:57Z\n\nAs explained in #6004, there is already a test from my first PR that made Travis go red.",
            "merged branch ruian/patch-2 (PR #6028)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n83b37ff [DependencyInjection] Return self for add...\n\nDiscussion\n----------\n\n[DependencyInjection] Return self for add...\n\nBug fix: no\nForget fix: yes\nFeature addition: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nReturn self instance when call an ADD something method.\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-11-16T13:24:45Z\n\nPlease fix PHPDoc accordingly\n\n---------------------------------------------------------------------------\n\nby ruian at 2012-11-16T13:38:41Z\n\n@pborreli done.",
            "merged branch Tobion/is_object_instance_of (PR #6051)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n966e7d6 [DI] removed unneeded is_object() calls\n\nDiscussion\n----------\n\n[DI] removed unneeded is_object() calls\n\nI searched through all of symfony for occurences of the coding style `(is_object($value) && $value instanceof Object)` with a regex like `is_object\\(\\$[a-zA-z0-9]+\\) && \\$[a-zA-z0-9]+ instanceof `.\nThe `is_object` calls are not needed in this case. Only the DI component made such duplicate checks.",
            "merged branch Tobion/patch-4 (PR #6058)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nacf8a70 [Routing] fix Route recompilation when hostname changed\n\nDiscussion\n----------\n\n[Routing] fix Route recompilation when hostname changed",
            "merged branch egeloen/password-type (PR #6007)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n97f6a1b [Form] Update password type trimming to false\n\nDiscussion\n----------\n\n[Form] Update password trimming to false by default\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: -\nLicense of the code: MIT\nDocumentation PR: ~\n\nHey!\n\nToday, I realize that the password type is by default trimmed. IMHO, this is not the expected behavior. By default, the password type should not trim the input value.\n\nRegards\n\n---------------------------------------------------------------------------\n\nby nomack84 at 2012-11-13T19:16:29Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2012-11-13T19:57:29Z\n\nIMHO password and username fields should be trimmed. whitespace at the beginning and at the end of those fields are not wanted. At least I don't want to deal with a user support where WS on those fields is not trimmed.\n\n---------------------------------------------------------------------------\n\nby egeloen at 2012-11-13T20:08:08Z\n\n@mvrhov I agree with you about username fields and other  text  fields but in case of a password field, if the end user specifies white space at the begin/end of his password, it should not be trimmed. It should simply let it as it is. I open this PR due to two customers who reports me this behavior.\n\n---------------------------------------------------------------------------\n\nby clemherreman at 2012-11-14T10:06:15Z\n\n@mvrhov I agree, username shouldn't be trimmed, however password are kind of special. They should be used * as is *, as lots of users have wicked passwords.\n\nMoreover, usually the password is asked twice, so if there are spaces, they are most likely wanted by the end user.\n\nSo :+1:\n\n---------------------------------------------------------------------------\n\nby clemherreman at 2012-11-14T10:07:27Z\n\nAlso Travis status on this PR is **failed** because of an error when downloading the deps.\n\n---------------------------------------------------------------------------\n\nby geoffrey-brier at 2012-11-14T10:34:56Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-11-14T15:01:43Z\n\nCould you please add a test case to PasswordTypeTest?\n\nPlease also reference this PR in the test\n\n(= add the comment `// https://github.com/symfony/symfony/pull/6007` before the test)\n\n---------------------------------------------------------------------------\n\nby egeloen at 2012-11-14T15:10:36Z\n\n@bschussek I have updated the PR.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-11-14T15:24:34Z\n\nThanks! Could you please squash the commits?\n\n---------------------------------------------------------------------------\n\nby egeloen at 2012-11-14T15:30:11Z\n\n@bschussek Done.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2012-11-14T15:39:47Z\n\nShould this be noted in `UPGRADE` file ? (as this is change of actually BC break =))\n\n---------------------------------------------------------------------------\n\nby egeloen at 2012-11-15T22:59:45Z\n\n@stloyd Where can I put it? In the [UPGRADE-2.2](https://github.com/symfony/symfony/blob/master/UPGRADE-2.2.md) file?\n\n---------------------------------------------------------------------------\n\nby stloyd at 2012-11-15T23:02:51Z\n\n@egeloen IMO yes, according this will go to `master` (which is actual _dev_ branch for `2.2`)\n\n---------------------------------------------------------------------------\n\nby egeloen at 2012-11-16T13:54:04Z\n\n@fabpot I have removed the comment & added an entry in the `UPGRADE-2.2` file.",
            "merged branch vicb/replace (PR #5976)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\ne13b050 Add missing symfony/stopwatch in the replace section of composer.json\n\nDiscussion\n----------\n\nAdd missing symfony/stopwatch in the replace section of composer.json\n\nAnd order the sections alphabeticaly for easier navigation",
            "fixed PDO session handler for Oracle (closes #5829)",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  [Form] Excluded some tests in NumberToLocalizedStringTransformerTest which fail on ICU 4.4, but work on ICU 4.8",
            "added missing tests from previous merge",
            "merged branch AndreyChernykh/2.1 (PR #5524)\n\nCommits\n-------\n\n580d5a7 Typo fix\n\nDiscussion\n----------\n\nTypo fix\n\nTypo fix in  Range  validator constraints.",
            "[Security] removed the 401 error custom status message",
            "merged branch jfsimon/bsd_find (PR #5876)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n2401274 [Finder] Added bsd adapter (need tests).\n\nDiscussion\n----------\n\n[WIP] [Finder] Adds bsd adapter (need tests).\n\n**I have no mac or bsd system. Could someone please tell me if test pass?**\n\nI used this solution to replace `-printf` option: `find . -print0 | xargs -0 stat -f '%i '` (http://stackoverflow.com/questions/752818/why-does-macs-find-not-have-the-option-printf).\n\nToo bad Github didn't handle the file move :(\nThe only difference between the two `find` implementation is:\n  * GNU: https://github.com/jfsimon/symfony/pull/new/bsd_find#L2R48\n  * BSD: https://github.com/jfsimon/symfony/pull/new/bsd_find#L1R46",
            "merged branch jalliot/autoloader-update (PR #5213)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n92e10a8 Updated HttpFoundation and Locale for proper Composer autoloading\n\nDiscussion\n----------\n\nUpdated HttpFoundation and Locale for proper Composer autoloading\n\nThis PR uses better Composer autoloading strategy for the stubs in HttpFoundation and Locale.\n\nIt also fixes a bug inside HttpFoundation's composer.json file where the path for SessionHandlerInterface was wrong.\n\n[![Build Status](https://secure.travis-ci.org/jalliot/symfony.png?branch=autoloader-update)](http://travis-ci.org/jalliot/symfony)\n\nAfter merging this PR and updating the vendors of the SE, you can also merge symfony/symfony-standard#387\n\n---------------------------------------------------------------------------\n\nby datiecher at 2012-09-05T11:15:39Z\n\nAny updates on this issue?\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-09-05T16:43:46Z\n\nWell I guess it is up to @fabpot to decide now :)\n\n---------------------------------------------------------------------------\n\nby drak at 2012-09-07T11:59:22Z\n\n> It also fixes a bug inside HttpFoundation's composer.json file where the path for SessionHandlerInterface was wrong.\n\nIf so should be part of a separate PR imo.",
            "[HttpKernel] normalized HTTP exceptions classes",
            "[HttpKernel] added a way to enable a disable Profiler",
            "[FrameworkBundle] added a way to enable the profiler for the very next request in functional tests (closes #4307)",
            "merged branch Tobion/patch-4 (PR #5293)\n\nCommits\n-------\n\n0f86a33 micro-optim: replace for with foreach\n4efb9fe [Form] Remove unneeded FormUtil constants\n\nDiscussion\n----------\n\n[Form] Remove FormUtil constants\n\nThe constants are not useful from outside the class as the\u00a0$pluralMap is also private. So no need to expose these veriables in the API when they cannot be used in any way. Unfortunately there are not private constants, so use private static. Then I realized the variables can be removed altogether, as they are only used once anyway and the index meaning is already documented in pluralMap.\n\n---------------------------------------------------------------------------\n\nby empire at 2012-08-18T12:58:22Z\n\nFormUtils is abstract class, and maybe subclass (in future) will use this constants, I think changing access modifier to `protected` is better option.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-18T12:59:40Z\n\nThey cannot, as pluralMap is private...\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-08-18T14:11:17Z\n\nextract self::$pluralMap into local variable add small speed up\n4.5499801635742 ms vs 5.7430267333984 ms on 100 iterations\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-18T14:16:47Z\n\nThis is not about performance.\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-08-18T14:21:11Z\n\nyes but adds\nyour changes vs current is\n5.7430267333984 ms vs 6.4971446990967 ms on 100 iterations\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-18T14:29:48Z\n\nHow about `$map =& self::$pluralMap[$i]`?\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-08-18T14:59:57Z\n\nI mean https://gist.github.com/3387253\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-08-18T15:01:45Z\n\nforeach is event faster :)\n(4.1971206665039 ms on my hw)\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-18T15:04:51Z\n\nI see.\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-08-18T15:06:41Z\n\nin first comment i mean code like this:\n```php\n$pluralMap = self::$pluralMap; // do this because access to static property is to slow\n```\n\non my machine & is slower `$map =& $pluralMap[$i]` vs `$map = $pluralMap[$i]`\n5.0 vs 4.8 ms\n\nimho & not needed in read only code\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-18T15:15:03Z\n\nWell, you'd need to benchmark memory too. `=&` should reduce memory primarily in this case.\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-08-18T15:19:35Z\n\n```php\necho memory_get_usage() .  \\n ; // 711536\n\n$a = array_fill(5, 6000, 'banana');\necho memory_get_usage() .  \\n ; // 1497632\n\n$b = $a;\necho memory_get_usage() .  \\n ; // 1497760\n\n$b[1] = 2;\necho memory_get_usage() .  \\n ; // 2283832\n```\n\n1497760  - 1497632 = 128  it is size for variable structure not for its value:\n\n```php\necho memory_get_usage() .  \\n ; // 711536\n\n$a = 1;\necho memory_get_usage() .  \\n ; // 1497632\n\n$b = &$a;\necho memory_get_usage() .  \\n ; // 1497760\n```\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-08-18T17:52:32Z\n\n@Tobion http://schlueters.de/blog/archives/125-Do-not-use-PHP-references.html - search for  copy-on-write  if you don't want to read it all.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-18T19:37:44Z\n\nYeah I know about copy on write. I thought there might be a difference what you assign a sub-element of an array to a variable. But apparently not.\nInterestingly `$a =& $b` takes a little more memory than `$a = $b` according to `memory_get_usage ()` but not when using `memory_get_usage (true)`.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-08-30T08:15:01Z\n\nI don't like the removal of the constants. They introduce meaning into the integers and improve code clarity. The rest looks good.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-30T13:18:19Z\n\nMy opinion of the constants:\n- They are part of the public API (as const are alwalys public) but cannot be used at all, as everything else is private...\n- They are each only used once.\n- The meaning of the indices is already documented in `$pluralMap`\n- They are not used when building `$pluralMap` so they dont imprivate code clarity and consistence either. But doing so would on the other hand make it probably more ugly. So removing them is IMO best solution.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-08-30T15:21:03Z\n\nIf you really need to remove the constants, then please comment the code where they are used accordingly.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-31T00:58:51Z\n\nI dont see what I should comment to make it more understandable, as the the map is already assigned to a named variable like `$suffixLength = $map[1];`.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-08-31T09:12:18Z\n\n> I dont see what I should comment to make it more understandable, as the the map is already assigned to a named variable\n\n`$map[2]` and `$map[3]` is not self-describing.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-31T17:23:15Z\n\n@bschussek Done.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-08-31T22:13:41Z\n\nCould you please squash your commits?",
            "merged branch Tobion/same-requirements-issue (PR #5435)\n\nCommits\n-------\n\n7c5cfeb [Routing] added test why #5238 is not that easy\n\nDiscussion\n----------\n\n[Routing] added test why #5238 is not that easy\n\nThis just adds a test that wasn't covered yet and shows why #5238 is not that easy as I thought at first.",
            "merged branch Tobion/numeric-placeholder (PR #5439)\n\nCommits\n-------\n\nbe28e56 [Routing] disallow numeric named variables in pattern\n\nDiscussion\n----------\n\n[Routing] compile check for numeric named variables in pattern\n\nBecause PHP raises an error for such subpatterns in PCRE and thus would break matching, e.g. this is not allowed as regex `(?<123>.+)`.\nSo add a compile time check for a non-working pattern like '/{123}'.\n\n---------------------------------------------------------------------------\n\nby sstok at 2012-09-06T08:31:42Z\n\nStrangely enough Regex buddy gives no warning or error with the pattern.\nIs the name all numeric invalid or just the beginning?\n\n1e4 and 0xFF would be perfectly valid but returns true with is_nummeric()\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-09-06T08:59:07Z\n\nAny numeric is not valid. I guess this limitation is unique to PHP's binding to PCRE.\nI think it's because the returned matches array of of preg_match contains both the subpattern as integer index and as named variable. So having a numeric named variable would conflict as `array['1'] === array[1]`.",
            "merged branch boombatower/proccess-callable (PR #5466)\n\nCommits\n-------\n\n622102e [Process] change all  documentation type to callable\n\nDiscussion\n----------\n\n[Process] change all  documentation type to callable\n\nUpdate documentation per #5456 instead of mixing in with restart() pull request.",
            "merged branch eventhorizonpl/100ptc_component_httpfundation_p6 (PR #5433)\n\nCommits\n-------\n\n9bc8f65 Cookie tests\n\nDiscussion\n----------\n\nCookie tests\n\nHi,\n\nThis patch adds 100% test coverage for Cookie class.\n\nBest regards,\nMichal",
            "merged branch eventhorizonpl/100ptc_component_httpfundation_p7 (PR #5434)\n\nCommits\n-------\n\n8f46795 tests for HeaderBag\n\nDiscussion\n----------\n\ntests for HeaderBag\n\nHi,\n\nThis patch adds 100% tests coverage for HeaderBag.\n\nBest regards,\nMichal",
            "merged 2.1",
            "replaced self.version/2.1.* by 2.2.* in composer.json files",
            "merged branch Tobion/empty-requirement (PR #5426)\n\nCommits\n-------\n\n02516de [Routing] fix variable with a requirement of '0'\n1f5b793 [Routing] fix setting empty requirement in Route\n\nDiscussion\n----------\n\n[Routing] fix setting empty requirement\n\nFirst commit: A requirement of  ^$  was overlooked and wasn't recognized as empty after stripping it in Route.\nSecond commit: Fixes a requirement of '0' that was ignored by the Compiler.",
            "merged 2.1",
            "merged branch pborreli/config-tweak (PR #5521)\n\nCommits\n-------\n\nbaf2c46 [Config] Little tweak\n\nDiscussion\n----------\n\n[Config] Little tweak\n\nremoved 2 useless call of dirname",
            "merged branch Nanocom/master (PR #5519)\n\nCommits\n-------\n\ncc58b30 [Console] Misuse of str_pad instead of str_repeat\n\nDiscussion\n----------\n\n[Console] Misuse of str_pad instead of str_repeat",
            "Merge branch '2.1'\n\n* 2.1:\n  Create CONTRIBUTING.md file for auto-linking in PR's\n  Added Bulgarian translation\n  [Profiler]Use the abstract method to get client IP\n  Typo fix\n  Fixing incorrect word in twig:lint command description\n  Rename $key parameter to $name for consistency\n  =Minor chnage: replaced function by method\n  Fixed the phpdoc in the DependencyInjection component",
            "merged branch merk/financial-validators (PR #4734)\n\nCommits\n-------\n\n6ff9b04 Add Luhn validator\n\nDiscussion\n----------\n\n[2.2] [Validator] Add Luhn validator\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets:\nTodo: Adding documentation if this PR is blessed.\nLicense of the code: MIT\n\nI submitted these validators to JMSPaymentCoreBundle, because they're payment related, but @schmittjoh feels that they're a better choice for adding to Symfony2.\n\nSee schmittjoh/JMSPaymentCoreBundle#52 for the original submission.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-04T05:19:42Z\n\nI'm +1. @bschussek?\n\n---------------------------------------------------------------------------\n\nby shieldo at 2012-07-04T15:46:05Z\n\n+1 in principle (certainly the Luhn check).  I did wonder whether Visa Electron should also be in there (although, that uses a subset of the Visa range, and the chance that you would be checking for a Visa Electron but *not* Visa at the same time is vanishingly small, so maybe this is unnecessary).\n\n---------------------------------------------------------------------------\n\nby merk at 2012-07-04T21:25:30Z\n\n@shieldo I did have a concern about the Electron as well, but in the case of an online system doing payment processing, I'm not sure anyone would ever need to check if it was an Electron card or not.\n\n---------------------------------------------------------------------------\n\nby merk at 2012-07-04T21:28:25Z\n\nWe could expand the CardScheme stuff further with this list: http://en.wikipedia.org/wiki/List_of_Issuer_Identification_Numbers\n\nIs there any point expanding the validator beyond financial services and into the other sevices listed?\n\n---------------------------------------------------------------------------\n\nby shieldo at 2012-07-04T21:37:41Z\n\n@merk Yes, in actuality there are always going to be cases you can't trap with a regex - I'd say validation like this is working if it catches a majority of cases of invalid numbers, because in reality ones that get through will just fail downstream anyway. The purpose of the validator isn't to identify individual schemes for numbers, it's to do a sanity check across collections of schemes.\n\nI don't really see any point expanding beyond financial services for a core validator (imho) - I'm not sure how stable some of this information is.\n\n---------------------------------------------------------------------------\n\nby Gator92 at 2012-07-11T00:45:50Z\n\n+1 on the Luhn check (without the authorship, just give credit to Greg Knapp), the CardScheme, however, is not really required by most gateways these days, it's a better candidate for a custom constraint.\n\n---------------------------------------------------------------------------\n\nby merk at 2012-07-11T00:47:20Z\n\nI dont object, but Greg's algorithm has a flaw for odd length creditcard numbers. The unit testing written by Infinite caught this.\n\n---------------------------------------------------------------------------\n\nby Gator92 at 2012-07-11T01:35:46Z\n\nYou're right, the Knapp algo is flawed and does not appear to work on odd-numbered length cards.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-11T05:49:22Z\n\n@merk: Can you open two new pull requests? One for each validator?\n\n---------------------------------------------------------------------------\n\nby merk at 2012-07-26T23:42:24Z\n\nPR updated to remove CardScheme into its own PR.\n\nDocumentation PR added to symfony-docs",
            "updated CHANGELOG",
            "[FrameworkBundle] changed Client::enableProfiler() behavior to fail silently when the profiler is not available (it makes it easier to write functional tests)",
            "updated CHANGELOG",
            "merged branch fabpot/profiler-tests (PR #4897)\n\nCommits\n-------\n\n22e9036 updated CHANGELOG\nbafe890 [FrameworkBundle] changed Client::enableProfiler() behavior to fail silently when the profiler is not available (it makes it easier to write functional tests)\nf41872b [FrameworkBundle] added a way to enable the profiler for the very next request in functional tests (closes #4307)\n67b91e5 [HttpKernel] added a way to enable a disable Profiler\n\nDiscussion\n----------\n\n[2.2] added a way to enable the profiler for the very next request in a functional test\n\nBug fix: yes/no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4307\nTodo: -\nLicense of the code: MIT\nDocumentation PR: should be done before merging\n\nAfter merging this PR, we need to disable the profiler in the test environment in Symfony SE.",
            "merged branch romainneutron/ProcessExceptions (PR #5398)\n\nCommits\n-------\n\nc5e7793 [Process] Normalize exceptions\n\nDiscussion\n----------\n\n[Process] Normalize exceptions\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThere were some exceptions in the Process scope but they were not implemented everywhere in the component.\n\nThis PR ensure that all exceptions thrown inside Process implements `Process\\Exception\\ExceptionInterface`.\n\n---------------------------------------------------------------------------\n\nby romainneutron at 2012-08-30T20:05:41Z\n\nTests passes, it's a travis issue, see http://travis-ci.org/#!/symfony/symfony/builds/2287439",
            "merged branch romainneutron/DependencyInjectionExceptions (PR #5399)\n\nCommits\n-------\n\nf2e4802 [Yaml] Normalize exceptions\nb0f5f2e [Serializer] Normalize exceptions\nbcd8db2 [DependencyInjection] Normalize exceptions\n\nDiscussion\n----------\n\nNormalize exceptions\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis PR adds consistence to components which already have their own exception interface.\n\nDependencyInjection, Serializer and Yaml now only throw their own scoped exceptions.\n\nFor other components, it's much more work and could introduce some bugs. It would be better to do it in Symfony 2.2.",
            "merged branch hason/wincache (PR #5436)\n\nCommits\n-------\n\n9135431 [HttpKernel] Added support for WinCache in ConfigDataCollector\n\nDiscussion\n----------\n\n[HttpKernel] Added support for WinCache in ConfigDataCollector\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT",
            "fixed CHANGELOG",
            "merged branch mazen/optional-optimization (PR #5340)\n\nCommits\n-------\n\ne271b17 Remove the string optimization since it causes no real performance gain but increases generation time of the dumped PHP Container\n\nDiscussion\n----------\n\nPhpDumper and large strings\n\nWhen the PhpDumper is dealing with longer strings, the regular expression performed to optimize this can be quite a performance hog.\nIn our case sometimes the dumper takes more then 30 seconds if leaving this enabled. Disabling it will bring it back to sub-second speed.\n\nThis patch makes the optimization optional by passing in an additional container option.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-25T16:57:29Z\n\nI don't like adding yet another option for something that should  just works . It would be better to find a better way to optimise the strings for all cases.\n\n---------------------------------------------------------------------------\n\nby mazen at 2012-08-25T17:22:07Z\n\nI never really tested how much of a runtime difference it incurs when either using the  optimized  version or the non optimized version, so:\n\nHaving an example at hand which generates stable results yields (in a non-debug environment with a booted container using either of the optimization methods):\n\nWithout optimized strings:\n\n```\nTime taken for tests:   14.865 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      217000 bytes\nHTML transferred:       8000 bytes\nRequests per second:    67.27 [#/sec] (mean)\nTime per request:       14.865 [ms] (mean)\nTime per request:       14.865 [ms] (mean, across all concurrent requests)\nTransfer rate:          14.26 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.0      0       0\nProcessing:    14   15  19.7     14     632\nWaiting:       14   15  19.7     14     632\nTotal:         14   15  19.7     14     632\n\nPercentage of the requests served within a certain time (ms)\n  50%     14\n  66%     14\n  75%     14\n  80%     14\n  90%     14\n  95%     14\n  98%     15\n  99%     23\n 100%    632 (longest request)\n```\n\nWith Optimized Strings enabled\n\n```\nTime taken for tests:   14.077 seconds\nComplete requests:      1000\nFailed requests:        0\nWrite errors:           0\nTotal transferred:      217000 bytes\nHTML transferred:       8000 bytes\nRequests per second:    71.04 [#/sec] (mean)\nTime per request:       14.077 [ms] (mean)\nTime per request:       14.077 [ms] (mean, across all concurrent requests)\nTransfer rate:          15.05 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.0      0       0\nProcessing:    14   14   1.3     14      48\nWaiting:       14   14   1.3     14      48\nTotal:         14   14   1.3     14      48\n\nPercentage of the requests served within a certain time (ms)\n  50%     14\n  66%     14\n  75%     14\n  80%     14\n  90%     14\n  95%     14\n  98%     14\n  99%     15\n 100%     48 (longest request)\n```\n\nSo the response times differ by around 0.8ms\n\nBuilding the non-optimized container takes around 800ms\nBuilding the optimized container takes 43 seconds\n\nFrom my Point of View it would just be viable to remove the optimization (since it already incurred some issues fixed in 808088a3ca607bf62f6c70ef7d3a3066f0cfac98).\n\nI do not see a way how to improve the regexps (but by all means I'm no regular expression guru)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-30T07:12:55Z\n\nI'm also for removing these optimizations. What others think?\n\n---------------------------------------------------------------------------\n\nby Baachi at 2012-08-30T07:54:53Z\n\nI'm +1 for removing this feature.\nThe performance boost is to small.",
            "merged branch eventhorizonpl/100ptc_component_httpfundation_p8 (PR #5490)\n\nCommits\n-------\n\n2a35941 ParameterBag tests\n\nDiscussion\n----------\n\nParameterBag tests\n\nHi,\n\nThis patch adds 100% tests coverage for ParameterBag class.\n\nBest regards,\nMichal",
            "merged branch hason/conemu (PR #5498)\n\nCommits\n-------\n\nbb2566c [Console] Console colorization is also provided by ConEmu on Windows\n\nDiscussion\n----------\n\n[Console] Console colorization is also provided by ConEmu on Windows\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nSee http://code.google.com/p/conemu-maximus5/wiki/AnsiEscapeCodes#\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f_\u043e\u043a\u0440\u0443\u0436\u0435\u043d\u0438\u044f\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-09-16T07:43:55Z\n\nCan you add a note about it in the changelog of the component? thanks",
            "fixed CHANGELOG",
            "[FrameworkBundle] fixed the typehint for Kernel on the Client class (refs #4897)",
            "[FrameworkBundle] fixed functional tests",
            "Merge branch '2.1'\n\n* 2.1:\n  [Form] removed comment now that PHPUnit 3.7 is out\n  Add a Sigchild compatibility mode (set to false by default)\n  fix Fatal error: Cannot access private property\n\nConflicts:\n\tsrc/Symfony/Component/Process/Process.php",
            "merged branch jeanmonod/config-with-numeric-checks (PR #4714)\n\nCommits\n-------\n\n71db836 Better config validation handling for numerical values:  * New node type Integer and Float  * New expressions: min() and max()\n\nDiscussion\n----------\n\n[2.2] [Config] Better handling for numerical values:\n\n* New node type Integer and Float\n* New expressions: ifLessThan(), ifGreaterThan(), ifInRange(), ifNotInRange()\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-03T08:50:22Z\n\nAs I said on PR #4713, adding more method clutters the API without any big benefits. I'm -1 on the PR.\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-03T08:54:36Z\n\nI have been discuss it with @schmittjoh at the sflive, he was thinking it could be a good addition.\nIMHO I think that if we want to encourage the usage of bundle configuration validation, we should make it as easy as possible to use...\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-03T08:59:42Z\n\nA real life example:\n\n    ->scalarNode('max_nb_items')\n        ->validate()\n            ->ifTrue(function($v){\n                return !is_int($v) || (is_int($v) && $v<1);\n            })\n            ->thenInvalid('Must be a positive integer')\n        ->end()\n    ->end()\n\ncould be replaced by\n\n    ->integerNode('max_nb_items')\n        ->validate()\n            ->ifLessThan(1);\n            ->thenInvalid('Must be a positive integer')\n        ->end()\n    ->end()\n\n---------------------------------------------------------------------------\n\nby gnutix at 2012-07-03T09:03:06Z\n\nI agree with @jeanmonod on this matter, the bundle configuration validation is already kind of a hassle to understand (and read), so it would be a good addition IMHO.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-03T10:54:32Z\n\n@schmittjoh What's your point of view?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-03T14:10:37Z\n\nThe integer and float nodes are valuable additions imo which I wanted to add myself several times but simply did not have the time for.\n\nAs for the changes to the expression builder, I was not really passionate about them in Paris, but I did not mind either way. However, looking at this PR, I think they would be better implemented as methods on the definition builders, and validated directly by the nodes:\n\n```php\n$builder->integerNode('foo')->range(1, 4)->end();\n$builder->integerNode('foo')->mustBeGreaterThan(5)->end();\n```\n\nThis will also allow for these constraints to be introspected and added to generated documentation.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-03T17:57:25Z\n\n@jeanmonod Can you take into account the comments by @schmittjoh?\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-03T19:40:24Z\n\n@fabpot Yes, I will try to move those 4 checks.\n\n@schmittjoh If I put those tests into the ScalarNodeDefinition did you think it's ok? And did I have to make anything special for the documentation introspection?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-03T19:56:00Z\n\nYou can take a look at the EnumNodeDefinition, and the EnumNode. They are\npretty simple, and should give you a good idea of how to implement it.\n\nOn Tue, Jul 3, 2012 at 9:46 PM, Jeanmonod David <\nreply@reply.github.com\n> wrote:\n\n> @fabpot Yes, I will try to move those 4 checks.\n>\n> @schmittjoh If I put those tests into the ScalarNodeDefinition did you\n> think it's ok? And did I have to make anything special for the\n> documentation introspection?\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/4714#issuecomment-6744309\n>\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-03T21:37:18Z\n\nOK, I just refactor as requested. At the end, I didn't add the range() check. It can be easily done by chaining min and max, like this:\n\n    $builder->integerNode('foo')->min(1)->max(4)->end();\n\n@schmittjoh can you have a look?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-03T21:48:17Z\n\nHave you tested the builder API? Did you maybe forget to commit something?\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-03T21:52:45Z\n\nYes you are right, I forget the definition\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-03T22:15:45Z\n\nOK, I realize now that I misunderstood the concept. I was thinking that a node was able to do self validation. But no, I will have to move my code to the node definition. So let's wait for a new commit...\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-06T06:13:55Z\n\n@schmittjoh I just push the move to definition and the new abstract class Numeric. Can you review it?\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-10T05:12:59Z\n\n@schmittjoh, @fabpot\nI fix all the mention points, can you have a look at the final result?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-10T06:38:20Z\n\nThere are still some excessive blank lines if you want to be perfect, but overall looks good now.\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-07-10T07:05:54Z\n\n@schmittjoh I think the comments of @Baachi are not well placed in the diff. I execute php-cs-fix on all code, so level of perfectness is already good ;)\n\n@fabpot Do you want some more complements before merging?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-10T07:07:21Z\n\n@jeanmonod I'm going to review the code once more and it will be merged for 2.2. Thanks for your work.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-09-18T13:58:48Z\n\n@jeanmonod Can you squash your commits before I merge? Thanks.\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-09-18T14:36:59Z\n\n@fabpot Squash done\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-09-19T04:07:13Z\n\n@jeanmonod One last thing: can you submit a PR on symfony/symfony-docs that update the documentation with the new possibilities?\n\n---------------------------------------------------------------------------\n\nby jeanmonod at 2012-09-20T05:32:01Z\n\n@fabpot OK, Documentation PR done here: https://github.com/symfony/symfony-docs/pull/1732",
            "[Config] fixed CS",
            "updated CHANGELOG",
            "merged branch geecu/help_command_find (PR #5558)\n\nCommits\n-------\n\n6cbeff0 use ->find instead of ->get in the help command to allow command aliases to be used (e.g.  ./app/console help do:sc:ge )\n\nDiscussion\n----------\n\nuse ->find instead of ->get in the help command to allow command aliases...\n\n... to be used (e.g.  ./app/console help do:sc:ge )",
            "Merge branch '2.1'\n\n* 2.1:\n  bumped Symfony version to 2.1.3-DEV\n  updated VERSION for 2.1.2\n  updated CHANGELOG for 2.1.2\n  Fixed FlashBagInterface phpdoc, clarified UPGRADE docs\n  composer is available in travis workers\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "Fix PSR-0 incompatibilty\n\nHaving 2 classes in the same file breaks PSR-0 compability",
            "added a comment",
            "merged branch schmittjoh/refDumper (PR #5559)\n\nCommits\n-------\n\n6bafe5a moved some code to the component\n\nDiscussion\n----------\n\nmoved some code to the component\n\nThis simply moves some code from a command to a dedicated class to make it more reusable.\n\nI wasn't able to run tests because composer failed to install dependencies. Let's see if travis can do better.",
            "fixed CS",
            "Merge branch '2.1'\n\n* 2.1:\n  fixed stringification of array objects in RequestDataCollector (closes #5295)\n  [HttpFoundation] removed the username and password from generated URL as generated by the Request class (closes #5555)\n  [Console] fixed default argument display (closes #5563)\n  Fixing config normalisation example in docblock",
            "merged branch nervo/patch-3 (PR #5577)\n\nCommits\n-------\n\ne0c001b Update src/Symfony/Component/Security/Http/Firewall/UsernamePasswordFormAuthenticationListener.php\n\nDiscussion\n----------\n\nUpdate src/Symfony/Component/Security/Http/Firewall/UsernamePasswordForm...\n\n...AuthenticationListener.php\n\nBetter consistency in request method checking (See L.58)",
            "merged branch Slamdunk/optimize/composer.json (PR #5627)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n45bf523 Optimize autoload prefix in composer.json\n\nDiscussion\n----------\n\nOptimize autoload prefix in composer.json\n\nBy having more specific autoload prefixes it is possible to reduce the\nnumber of stat calls made. Also it prevents conflicts with similar\nnamespaces.\n\nSee ref: https://github.com/zendframework/zf2/commit/e58c6cdbf50dd06b71e76a413fb870c95ab22bf5\n\nSessionHandlerInterface is left intentionally.\n\n---------------------------------------------------------------------------\n\nby sstok at 2012-09-28T08:41:25Z\n\n@Seldaek Is this true? And if so shouldn't this be optimized in Composer it self?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-28T08:48:05Z\n\n@sstok I cannot be optimized in Composer itself. It already optimize things by putting most specific prefixes first.\nComposer matches a prefix. The most specific the prefix is, the better (as it is less likely to match other classes).\n\nFor components, it is quite useless as we don't have component with a name being a prefix for the name of another one.\nFor the main package, it can indeed optimize things if someone was using ``Symfony_`` in an old-way package. This is not likely as there is no reason to have some new Symfony code using the PHP 5.2 naming and symfony1 was not using PSR-0. but it is indeed a working solution.\n\nThis was occuring in Zend Framework as using ``Zend`` for the namespace prefix of ZF2 would match when loading ``Zend_Registry`` (and this was causing issues when using ZF1 and ZF2 together as the PSR-0 path for ``Zend_Registry`` or ``Zend\\Registry`` would be the same, thus loading the wrong file)\n\n---------------------------------------------------------------------------\n\nby Slamdunk at 2012-09-28T09:04:17Z\n\nI know the main reason occurred in ZF doesn't happen in Symfony, but I see only benefits for taking it even so.",
            "Merge branch '2.1'\n\n* 2.1:\n  Added Base64 encoding, decoding to MongoDBProfilerStorage\n  Fix duplicated code and a field name\n  refactor src/Symfony/Component/Translation/Loader/MoFileLoader.php\n  fixed typo\n  Update src/Symfony/Component/Validator/Resources/translations/validators.pl.xlf\n  fixed issue #5596 (Broken DOM with the profiler's toolbar set in position top)\n  [Form] Fixed the testsuite for PHPUnit 3.6 as travis still uses it\n  added dirs generated by build-data.php in locale component to .gitignore\n  [Process] Fixed bug introduced by 7bafc69f38a3512eb15aad506959a4e7be162e52.\n  [Process][Tests] Prove process fail (Add more test case)\n  [Process][Tests] Prove process fail\n  [HttpFoundation] Fixed the tests\n  [DomCrawler] Added test for supported encodings by mbstring\n  [Config] Fixed preserving keys in associative arrays\n  [Console] Fixed return value for Command::run\n  [Locale] Fixed tests\n  [Console] Fix some input tests\n  [Filesystem] Fixed tests on Windows\n  [Config] Fixed tests on Windows",
            "[HttpKernel] Added a bit to convert incomplete objects in the error message",
            "merged branch rrehbeindoi/error-error (PR #5539)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n7fe44da Whitespace corrections\n6d30f20 Switched to using a method to get original class name that did not require string parsing\n3c8d607 Changed test to use a longer form, complete check of the contents of the trace\nde77c88 Whitespace correction\n03a7bb9 Added a unit test to verify incomplete classes do not cause flatten exception to throw\ne562418 Added a bit to convert incomplete objects in the error message\n\nDiscussion\n----------\n\n[HttpKernel] Added a bit to convert incomplete objects in the error message\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes*\n\n\\* no - errors in MongoDbSessionHandlerTest attempting to access private property, however running just src/Symfony/Component/HttpKernel does pass.\n\nObjects of class __PHP_Incomplete_Class are only sometimes an object.\n\n```\n$object = unserialize('O:14: BogusTestClass :0:{}');\n$object instanceof __PHP_Incomplete_Class; // true\nis_object($object); // false\ngettype($object); //  object \n```\n\nSince it is  not an object , the flatter attempts to turn it into a string, it triggers:\n```\n__PHP_Incomplete_Class could not be converted to string.\n```\nWhich then hides the root error message.\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-09-18T16:16:33Z\n\nhave you seen that http://stackoverflow.com/questions/965611/forcing-access-to-php-incomplete-class-object-properties looks like you can still access the object even if it's a __PHP_Incomplete_Class with foreach\n\n---------------------------------------------------------------------------\n\nby rrehbeindoi at 2012-09-18T16:38:38Z\n\nThank you for the tip re: foreach.",
            "[2.2][WebProfilerBundle] Added minimize option to Web Profiler panels",
            "merged branch dlsniper/wpb-improvements (PR #5518)\n\nThis PR was squashed before being merged into the master branch (closes #5518).\n\nCommits\n-------\n\n3303ca2 WPB and WDT improvements\nbe194cb Changed icons to be a bit more consistent\n08241b8 Added minimize option to Web Profiler panels\n\nDiscussion\n----------\n\n[2.2][WebProfilerBundle] Added minimize option to Web Profiler panels\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\nLicense of the code: MIT\nDocumentation PR: ~\n\nI've added a minimize option to the profiler bundle so that you can have more space to work with on the panels.\nYou can view it in action here:http://sf2demo.rodb.ro/app_dev.php/\n\nFeedback is welcomed!\n\nThanks!\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-15T13:36:51Z\n\nI could add a remember option via a cookie if you think this would help, I know I'd want one, but I'm not sure about the general opinion about this. Let me know if I should do it.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-15T17:05:58Z\n\nThe profiler is totally broken when minimizing the menu in your demo.\n\n---------------------------------------------------------------------------\n\nby lennerd at 2012-09-15T17:10:54Z\n\nI would not make it disappear completely. So I think a combination of Cookie and a small visual for open it again would be great to have.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-15T17:15:06Z\n\n@stof I've only enabled a few panels to work in the demo, rest defaults to DB panel. If this is what you mean then it's not broken, it's designed to do so. I've tested the thing on Opera, FF and Chrome (on Linux) before uploading the demo/PR so I'm not sure what's broken. Can you please provide a screenshot?\n\n@lennerd I could be doing something like only display it in the upper left corner and appear on mouse over as an overlay. Would that be better?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-15T17:21:22Z\n\n@dlsniper what I mean is that the text of the menu does not disappear. It simply goes over the panel itself as the menu becomes smaller. And this appears for all panels I tried.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-15T17:22:32Z\n\nhmm, sorry. It is a browser cache issue. It seems like your server was sending cache headers for the assets, and as I already looked at the demo previously (for your DoctrineBundle PR), it kept the old CSS\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-15T17:25:09Z\n\n@stof no problem, the server is configured a bit more on caching side in order to speed it up and save bandwidth ;)\n\n---------------------------------------------------------------------------\n\nby lennerd at 2012-09-15T17:38:41Z\n\n@dlsniper I would use the close button changing to maybe an arrow in the bottom right. So it's more intuitive and you can simply show and hide it if you only want to take a quick look at a small detail behind it.\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-09-15T18:08:02Z\n\nWhat about making this the default, the icons are self explanatory already. The title would then be the  link  text instead.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-15T20:30:51Z\n\n@henrikbjorn I wouldn't make this by default as new people might find it a bit confusing. Hence the suggestion to use the cookie to remember the preference.\n\n---\n\nAlso I'm trying not to break the current format of the menu too much as hiding all that stuff by hand is pain but if I'm allowed to break the current way of displaying the left menu then this is going to be easy.\n\nWhat I didn't understood so far is why is the toolbar displayed on the top as well since we have it on the left side already so I've remove it from my current changes (will be up soonish).\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-15T21:10:03Z\n\n@lennerd what exactly do you mean by 'I would use the close button' there's no close button on the profiler page, only on the toolbar.\n\n---------------------------------------------------------------------------\n\nby lennerd at 2012-09-15T21:21:20Z\n\nThat was the button I was talking about. So that there is a little close button at the bottom right for toggling the toolbar.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-15T23:14:06Z\n\nI've changed the way the menu minimizes now, it hides in the top left corner and it maintains its state on refresh. I'll do something similar for the toolbar tomorrow.\n\nYou can view it on the same URL.\n\nPlease do leave feedback. Thanks!\n\n---------------------------------------------------------------------------\n\nby lennerd at 2012-09-16T01:02:27Z\n\nSorry. I misunderstand your PR.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-16T03:01:06Z\n\n@dlsniper The toolbar is displayed at the top because it gives a quick overview without having to go in each panel. So removing it is a bad idea IMO.\n\nAnd hiding everything is a bad idea IMO. It means navigating is impossible, making it usable when minimizing it (and btw, this would make the cookie a non-sense as it would hide the menu for subsequent pages)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-09-16T06:38:08Z\n\n-1 for removing the toolbar at the top\n\nI prefer the first version where you only hide the menu text but leave the icons. Keeping the state in a cookie is also a must (that cookie might be used to store some other states in the profiler too).\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-09-16T08:14:11Z\n\ni'm not see first version but show icons without text is more useful.\nimho minimize trigger should be always placed on top as it showns in minized state\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-09-16T08:24:49Z\n\nhttp://s14.postimage.org/qkdcr8d4h/image.png\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-16T09:06:50Z\n\n@fabpot I've just had a look on how the timeline stores the selected value and it's using the local storage capabilities. Should I drop the cookie and use the local storage as well to have some sort of uniformity?\nAlso is there any reason why no generic JS library is used? I'm thinking now about jQuery mostly but any other should do just fine I think. I'm not saying that we should use a library when displaying the WDT as it might bump into issues with the frontend but for the rest of the profiler I guess it wouldn't be a problem to use a library, no?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-09-16T09:15:37Z\n\nLet's use the local storage for better consistency. I don't want to embed a JS library as we only need basic JS scripts.\n\n---------------------------------------------------------------------------\n\nby lennerd at 2012-09-16T10:29:20Z\n\n@dlsniper Do we need the up and down arrows any longer?\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-16T14:24:27Z\n\nI've added a minimize mode to the toolbar but the 'design' isn't the best all around, I'll try to improve it in the future.\nIt also remembers the state of the toolbar so that you don't need to hide it every time.\n\n@lennerd we don't need the up/down arrows for now, I've removed on the last commit. Thank you for the new icons ;)\n\nL.E.\nI've made some sort of rounded corner/gradient background in for the minimized toolbar\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-18T22:02:35Z\n\n@pborreli thanks for the idea regarding to auto-minimize on window resize, I'll implement it soon, I don't really have time right now to add the event handling part to Sfjs.\n\nL. E.\nI'm not going to implement the auto-resize as it proved not to be that useful given the fixed width of the panel. If it proves to be a requested thing then I'll improve it if no one else does it before me :)\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-19T20:52:43Z\n\nIf there's nothing else left to be changed/improved/added, I'll lift the WIP tag of this PR so that it can be merged if you consider it.\n\n@fabpot, if this gets its way to the repository, should I rebase this before merging so that it catches the next Symfony 2.1 release as it doesn't break anything? I don't mean the very next release which I've read that it would be done when Doctrine will release their new version but the version after that.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-09-19T20:56:45Z\n\nThis is a new feature, so it can only be included in the master branch.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-23T12:27:41Z\n\nAs soon as this feature goes in master I'll start working on adding AJAX requests to the toolbar to make it even more useful.\n\nLet me know if this change is good to merge or needs more work.\n\nThanks @stof for all the input and @lennerd for the icons.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-23T13:40:38Z\n\nAdding which ajax requests to the toolbar ?\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-09-23T13:49:43Z\n\n'Userland' AJAX requests, so that one could access the information from an AJAX request more straight forward",
            "[2.2][Console] Add ProgressHelper",
            "merged branch leek/feature/progress-helper (PR #3501)\n\nThis PR was squashed before being merged into the master branch (closes #3501).\n\nCommits\n-------\n\n4f3ded7 Actually this is worse\n72a1c65 * Coding standards fixes * Changed `started` to `startTime` * Other fixes/edits\n8249928 * Weeks/months/years is probably unrealistic * Set some sensible padding defaults * Use isset() instead of is_array()\n37b62bf Fixing bug for elapsed time between 1 and 2 seconds\n8fe4568 Special formatting for when there is no maximum set\n75f532f Minor docblock updates\ne436e1a Adding ProgressHelper for Console Component\n\nDiscussion\n----------\n\n[2.2][Console] Add ProgressHelper\n\n[![Build Status](https://secure.travis-ci.org/leek/symfony.png?branch=feature/progress-helper)](http://travis-ci.org/leek/symfony)\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: Yes\nFixes the following tickets: -\nTodo:\n- Add unit tests\n- Add documentation\n\n--\n\nI find myself needing some sort of progress indicator in most of my Console applications.\nIf this is something that could possibly be apart of Symfony, that would be great.\n\n**Example:**\n![Progress Example](http://i.imgur.com/a0wGQ.gif)\n\n---------------------------------------------------------------------------\n\nby jmikola at 2012-03-05T03:08:24Z\n\nDo you have an example of this being used within a console command?\n\nI'd be curious what the performance overhead is. My earliest console commands (nearly 2 years ago) would print status during each iteration (for a database migration) and I found the impact noticeable. After some time, I revised it to only print each X iterations, which often matched up with the batch size inserts/updates.\n\nBut for the last year, I've been using [declare(ticks=X)](http://php.net/manual/en/control-structures.declare.php) and have been quite happy with the results. By tuning the tick interrupt, the performance overhead is very small. It's especially helpful when dealing with processing code that is difficult to interrupt with a manual call to update the progress display, as PHP takes care of invoking the tick handler for me. I've thought about making such a console component helper for it, but I think the implementation is too invasive to abstract into a helper.\n\nHere's an example of it being used in OrnicarMessageBundle's [MongoDBMigrateMetadataCommand](https://github.com/ornicar/OrnicarMessageBundle/blob/master/Command/MongoDBMigrateMetadataCommand.php).\n\n---------------------------------------------------------------------------\n\nby leek at 2012-03-05T04:05:29Z\n\n@jmikola: Here is a simple example:\n\n```php\n<?php\n// ...\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        $progress = $this->getHelperSet()->get('progress');\n        $progress->start($output, 50);\n\n        $i = 0;\n        while ($i++ < 50) {\n            usleep(mt_rand(20000, 200000));\n            $progress->advance();\n        }\n\n        $progress->finish();\n    }\n```\n\nThe performance overhead shouldn't be much more than a standard `$output->write()` call. When used with a loop doing 1000's of iterations, you can set the `redrawFreq` option to something more appropriate to control how often the progress indicator is redrawn to the console.\n\n---------------------------------------------------------------------------\n\nby leek at 2012-03-10T10:05:32Z\n\nAdded some minor updates along with an example GIF of 2 of the progress bars (see edited PR).\n\n---------------------------------------------------------------------------\n\nby jmikola at 2012-03-10T15:22:29Z\n\nWhy does `1 sec` flash over to `1 secs` before `2 secs` is rendered?\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-03-10T15:26:08Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby leek at 2012-03-10T16:07:08Z\n\n@jmikola: Thanks! I didn't even notice that. Fixed.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-03-11T09:04:58Z\n\nWhat an amazing PR.  I feel like I just have to write some code that uses this feature just because it's there!\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-03-11T09:55:50Z\n\nThis is needed a lot, we have a bunch of import scripts where this is useful.\n\n@fabpot what are your thoughts on this?\n\n---------------------------------------------------------------------------\n\nby francoispluchino at 2012-03-14T12:34:38Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-03-14T13:00:42Z\n\ncould you please order the properties & methods by visibility according to the Sf2 CS.\n\n---------------------------------------------------------------------------\n\nby leek at 2012-03-14T19:08:52Z\n\nNo problem - I'll make the requested changes tonight.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-03T22:48:45Z\n\n@fabpot ping\n\n---------------------------------------------------------------------------\n\nby stloyd at 2012-04-14T09:46:31Z\n\n@fabpot Any hope to get this in 2.1 ?\n\n---------------------------------------------------------------------------\n\nby mvriel at 2012-05-15T19:28:34Z\n\n:+1:\n\nTried it out by manually including it in my project and works like a charm\n\n---------------------------------------------------------------------------\n\nby blaugueux at 2012-05-23T18:46:15Z\n\nUp ! It will be great to have this feature in the next release.\n\n@fabpot ping\n\n---------------------------------------------------------------------------\n\nby guilhermeblanco at 2012-05-28T22:58:35Z\n\n@fabpot tried on my app and everything works fine.\nAny plans to merge this one into 2.1?\n\n---------------------------------------------------------------------------\n\nby damonjones at 2012-05-29T02:31:39Z\n\n+1\nThis would be a very nice feature to have in 2.1.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-29T06:18:57Z\n\nThis is scheduled for 2.2.\n\n---------------------------------------------------------------------------\n\nby Burgov at 2012-08-16T13:04:34Z\n\nI have a service which downloads a file using wget though the console component, and reads the progress from stderr. Rather than advancing in steps, i'd like to be able to set the current progress. Something like this method might be a nice addition:\n\n```php\n    public function setCurrent($value, $redraw = false)\n    {\n        $this->advance($value - $this->current, $redraw);\n    }\n```",
            "[Console] converted options to proper setters in ProgressHelper",
            "merged branch simensen/framework-secret (PR #5631)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n8bc9f75 Make secret not be required\n\nDiscussion\n----------\n\n[FrameworkBundle] Make secret not be required\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no (questionable)\nSymfony2 tests pass: yes\nLicense of the code: MIT\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nFramework bundle currently requires that the `secret` key under `framework` be set. The end result is that `kernel.secret` is made available. This is, as far as I can tell, the only required configuration for Framework bundle.\n\nThe only thing that currently uses `kernel.secret` is the Form component and then only if CSRF protection is enabled.\n\nIn the spirit of making Framework more decoupled and not requiring things in the case you don't need them I would like to make framework secret optional.\n\nI followed the pattern used by CSRF support for when Session is disabled to throw a `LogicException` stating that if CSRF support is enabled then the secret should be set.\n\nFor anyone who currently depends on `kernel.secret`, if someone ends up *not* defining `kernel.secret` there will be a dependency error on kernel configuration as `kernel.secret` will not be made available. The biggest downside to this that I could see is that the error message may be slightly confusing; it will complain that there is a dependency on `kernel.secret` when that is generally set by way of adding the Framework secret to the configuration.\n\nAs this relates to Symfony Standard Edition, there should be no changes as there is a default secret set there already anyway.",
            "[Console] added some basic tests for the ProgressHelper class",
            "Merge branch 'progress-helper'\n\n* progress-helper:\n  [Console] added some basic tests for the ProgressHelper class\n  [Console] converted options to proper setters in ProgressHelper\n  [2.2][Console] Add ProgressHelper",
            "merged branch bamarni/classmap-paths (PR #5634)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n3b47088 fixed some classmap paths\n\nDiscussion\n----------\n\nfixed some classmap paths\n\nSince #5213, an error occurs when requiring the locale or http-foundation package with composer, because it doesn't automatically prepend the target-dir to the classmaps.\n\nCf. here for example : https://travis-ci.org/#!/doctrine/DoctrineMongoDBBundle/jobs/2608238\n\ncc @jalliot",
            "[Console] fixed typo",
            "Replaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher\n\nThe ContainerAwareTraceableEventDispatcher class was tied to both the\nSymfony container and the HttpKernel profiler. It made it non reusable\nin another context.\n\nThe new TraceableEventDispatcher only keeps the HttpKernel profiler\nintegration and is able to wrap any other event dispatcher. It makes it\nreusable in frameworks using the Symfony HttpKernel component like\nSilex.\n\nThe only drawback is that we don't have access to the listener\npriorities in the collected data anymore (but the listeners are still\nordered correctly). The change is still worth it I think.",
            "merged branch fabpot/data-collector (PR #5619)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n7ef2e9d Replaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher\n\nDiscussion\n----------\n\nReplaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher\n\nThe ContainerAwareTraceableEventDispatcher class was tied to both the\nSymfony container and the HttpKernel profiler. It made it non reusable\nin another context.\n\nThe new TraceableEventDispatcher only keeps the HttpKernel profiler\nintegration and is able to wrap any other event dispatcher. It makes it\nreusable in frameworks using the Symfony HttpKernel component like\nSilex.\n\nThe only drawback is that we don't have access to the listener\npriorities in the collected data anymore (but the listeners are still\nordered correctly). The change is still worth it I think.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-27T13:38:24Z\n\nYou should add some tests for your new TraceableDispatcher",
            "Revert  merged branch fabpot/data-collector (PR #5619) \n\nThis reverts commit 3f0a370e3b80151e9311ea6ad75674ef7079f7b3, reversing\nchanges made to bf1ab93130860d841a66401213a448fbb36b0bc4.",
            "Replaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher\n\nThe ContainerAwareTraceableEventDispatcher class was tied to both the\nSymfony container and the HttpKernel profiler. It made it non reusable\nin another context.\n\nThe new TraceableEventDispatcher only keeps the HttpKernel profiler\nintegration and is able to wrap any other event dispatcher. It makes it\nreusable in frameworks using the Symfony HttpKernel component like\nSilex.\n\nThe only drawback is that we don't have access to the listener\npriorities in the collected data anymore (but the listeners are still\nordered correctly). The change is still worth it I think.",
            "merged branch fabpot/data-collector (PR #5619)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n2a673d8 Replaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher\n\nDiscussion\n----------\n\nReplaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher\n\nThe ContainerAwareTraceableEventDispatcher class was tied to both the\nSymfony container and the HttpKernel profiler. It made it non reusable\nin another context.\n\nThe new TraceableEventDispatcher only keeps the HttpKernel profiler\nintegration and is able to wrap any other event dispatcher. It makes it\nreusable in frameworks using the Symfony HttpKernel component like\nSilex.\n\nThe only drawback is that we don't have access to the listener\npriorities in the collected data anymore (but the listeners are still\nordered correctly). The change is still worth it I think.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-27T13:38:24Z\n\nYou should add some tests for your new TraceableDispatcher",
            "Merge branch '2.1'\n\n* 2.1:\n  [2.1] Fix SessionHandlerInterface autoloading\n  Remove executable bit from HttpKernel/DependencyInjection/ConfigurableExtension.php\n  [2.0][http-foundation] Fix Response::getDate method\n  [DoctrineBridge] Require class option for DoctrineType\n  [HttpFoundation] fixed the path to the SensioHandlerInterface class in composer.json\n  Support the new Microsoft URL Rewrite Module for IIS 7.0. @see http://framework.zend.com/issues/browse/ZF-4491 @see http://framework.zend.com/code/revision.php?repname=Zend+Framework&rev=24842\n  fixed undefined variable\n  hasColorSupport does not take an argument\n  Improve FilterResponseEvent docblocks Response ref",
            "Fluent interface",
            "merged branch bamarni/patch-8 (PR #5659)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\nba517db removed manual locale stub autoload\n\nDiscussion\n----------\n\nremoved manual locale stub autoload\n\n---------------------------------------------------------------------------\n\nby igorw at 2012-10-03T11:16:07Z\n\nTo add some context to this PR: On the master branch, this is now done through composer.",
            "[TwigBundle] added support for Twig namespaced paths (Twig 1.10)\n\nIn a template, you can now use native Twig template names, instead of\nthe Symfony ones:\n\nBefore (still works):\n\n    {% extends  AcmeDemoBundle::layout.html.twig  %}\n    {% include  AcmeDemoBundle:Foo:bar.html.twig  %}\n\nAfter:\n\n    {% extends  @AcmeDemo/layout.html.twig  %}\n    {% include  @AcmeDemo/Foo/bar.html.twig  %}\n\nUsing native template names is also faster.\n\nThe only drawback is that the new notation looks similar to the way we\nlocate resources in Symfony, which would be\n@AcmeDemoBundle/Resources/views/Foo/bar.html.twig. We could have used\nthe same notation, but it is rather verbose (and by the way, using this\nnotation did not work anyway in templates).",
            "merged branch fabpot/moved_process_1 (PR #5658)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n46d358f Fluent interface\n\nDiscussion\n----------\n\nFluent interface\n\nThis PR was submitted on the symfony/Process read-only repository and moved automatically to the main Symfony repository (closes symfony/Process#1).",
            "[Process] fixed previous merge",
            "merged branch Tobion/compiler (PR #4225)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n005a9a3 [Routing] fixed RouteCompiler for adjacent and nested placeholders\n\nDiscussion\n----------\n\n[2.2] [Routing] fixed RouteCompiler for adjacent placeholders\n\nTests pass: yes\nFeature addition: no\nFixes: #4215\nBC break: no\n\n- Nesting placeholders works now properly, e.g. `/{foo{bar}}`. Only `bar` is a variable, the rest is static text.\n- Variables without separator work now correctly too, e.g. `/{w}{x}{y}{z}.{_format}`. All variables will have the correct default regex in the current manner, that is exclude the previous static char and the next static char (which means disregarding the placeholder in between that have no seperator).\n\nAs you can see, I have not modified any tests, only added some. So this change is BC. The compiler now works under all conditions and does not fail for such patterns.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-08T22:34:58Z\n\nready for review / merging\nThanks @snc for giving a helpful tip.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-06-12T23:22:54Z\n\nfabpot told me, he doesn't like PRs that both fix and enhance stuff. So I reworked this PR so that it only contains the bug fixes.\nThe new PR #4563 contains the feature addition.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-06-26T12:33:43Z\n\nping @fabpot\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-14T16:29:27Z\n\nWhy wait for 2.2? It's a bugfix only, without BC break.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-08-31T17:04:37Z\n\n@fabpot I think this should go into 2.1",
            "[Routing] fix Compiler when previous char of placeholder is no real separator (closes #5423)",
            "[Routing] default requirement of variable should not disallow previous char, but the slash '/' (closes #5469)",
            "[Routing] improve matching performance by using possesive quantifiers when possible (closes #5471)\n\nMy benchmarks showed a performance improvement of 20% when matching routes that make use of possesive quantifiers because it prevents backtracking when it's not needed",
            "merged branch Tobion/patch-2 (PR #5663)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n94f2fb9 added info to routing changelog\n\nDiscussion\n----------\n\nadded info to routing changelog",
            "[2.2][Console] Test default input defintion and default helper set",
            "merged branch dirkaholic/testDefaultInputDefintion (PR #5668)\n\nThis PR was squashed before being merged into the master branch (closes #5668).\n\nCommits\n-------\n\n1117499 [2.2][Console] Test default input defintion and default helper set\n\nDiscussion\n----------\n\n[2.2][Console] Test default input defintion and default helper set\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nSee: https://github.com/symfony/symfony/pull/5638",
            "[HttpKernel] made the ExceptionHandler more flexible",
            "[HttpKernel] fixed regression caused by the previous commit",
            "[2.2] [WIP] [Finder] Adding native finders implementations",
            "merged branch jfsimon/issue-4031 (PR #4061)\n\nThis PR was squashed before being merged into the master branch (closes #4061).\n\nCommits\n-------\n\n32bb754 [2.2] [WIP] [Finder] Adding native finders implementations\n\nDiscussion\n----------\n\n[2.2] [WIP] [Finder] Adding native finders implementations\n\nWork in progress...\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4031\n\nThis PR intends to add native finders implementation based on shell command execution.\nPlanned support concerns:\n- GNU `find` command -> done\n- MS `FINDSTR` command\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-15T06:19:50Z\n\n@jfsimon What's the status of this PR?\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-05-15T06:43:34Z\n\n@fabpot 2 features missing for the GNU find adapter: sorting result with `sort` command and excluding directories; 1 bug (even if tests pass, which let me thing it needs more tests): regex matching is done on full path, not basename. Then I'll need to work on MS `FINDSTR` command adapter (I talked to Pierre Couzy, and he's OK to help when he will have time to). I'll try to push the sort and directory excluding features this week.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-05-15T09:51:20Z\n\nBTW @jfsimon, in the (quite specific) case where you don't precise filenames or other options but only `contains` or `notContains`, you could call `grep` directly without the `find`. That would speed things up a bit more :)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-28T15:20:55Z\n\n@jfsimon Would be nice to be able to include this PR before 2.1.0 beta2. Would you have time to finish the work soon?\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-06-29T11:07:19Z\n\n@fabpot I'd say next week for GNU part with some help from @smaftoul.\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-07-10T08:20:44Z\n\nIt seems that I need to perform some benchmarks as find may not be so fast :/\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-07-10T16:51:19Z\n\n@fabpot @stof do you think I can add benchmark scripts inside the component, or should I create a new repository for that?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-10T16:57:05Z\n\nThen benchmark scripts won't be part of the repository in the end, so you should create a new repo for that.\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-07-13T17:57:03Z\n\n@fabpot @smaftoul Benchmark is ready (more cases to come): https://github.com/jfsimon/symfony-finder-benchmark\nI'm glad to see that `gnu_find` adapter is really faster than the `php` one!\n\n---------------------------------------------------------------------------\n\nby stof at 2012-07-13T19:17:20Z\n\n@jfsimon could you make a gist with the result of the benchmark ? I think many people will be lazy to run it themselves when looking at this ticket, and people using windows will probably be unable to run it at all :)\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-07-13T21:37:50Z\n\nFirst results: https://gist.github.com/3107676\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T07:26:21Z\n\nSorry, I forgot `[Finder]` tag in 3 commits message... is it fixable?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-08-01T08:58:28Z\n\n@jfsimon you can edit the commit message whne doing an interactive rebase.\n\nand btw, you will need to do a rebase anyway: the PR conflicts with master\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T13:11:20Z\n\n@stof Okay, I rebased origin/master. As you can see, above comments are now floating in the air :/\n\nStrangely, rebase broke my tests... I need to fix them :(\n\n---------------------------------------------------------------------------\n\nby stof at 2012-08-01T13:14:11Z\n\nWeird. github still tells me that the PR cannot be merged. Did you fetch the latest master before rebasing ?\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T13:19:25Z\n\nWeird, git fetch only fetched my own repository, I had to `git fetch origin`. I'm rebasing... again.\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T14:50:02Z\n\n@stof Rebase done, tests fixed :)\n\n---------------------------------------------------------------------------\n\nby stof at 2012-08-01T15:18:19Z\n\nhmm, Travis does not seems to agree with the second statement :)\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T17:33:55Z\n\nOuch, I'm really sorry, I was in the wrong tmux window when started tests :/\nGood news, I have to fix my last problem (the regex tested against full path instead of basename) to fix the tests.\nI'm on it.\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T18:16:10Z\n\nGrrr...  I didnt start full test suite, shame on me.\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T19:10:02Z\n\nSame bench than before, but with non empty files: https://gist.github.com/3229865\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T19:23:32Z\n\nIt seems that searching files by their name with regex is really fatser than by glob with find: https://gist.github.com/3229911\n@fabpot should I convert glob to regex when using `contains` and `notContains`?\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T19:55:02Z\n\nIt seems that I'm an idiot, I used `contains` instead of `name`.\nReal bench is here: https://gist.github.com/3230139\n@fabpot sorry for the mess, I should go to bed :/\nResults are still convincing!\n\n---------------------------------------------------------------------------\n\nby stof at 2012-08-01T20:04:42Z\n\nThey are, but the regex are not faster than glob anymore in these results\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T21:17:25Z\n\n@travisbot you failed, not me!\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-08-01T21:18:28Z\n\nAnyone to launch benchmark with php 5.4?\nhttps://github.com/jfsimon/symfony-finder-benchmark\n\n---------------------------------------------------------------------------\n\nby lyrixx at 2012-08-01T22:25:08Z\n\nBench with php 5.4.5\nhttps://gist.github.com/3231244",
            "[Finder] tweaked previous merge",
            "[process] provide a restart method.",
            "merged branch boombatower/process-restart (PR #5456)\n\nThis PR was squashed before being merged into the master branch (closes #5456).\n\nCommits\n-------\n\nbe62fcc [process] provide a restart method.\n\nDiscussion\n----------\n\n[process] provide a restart method.\n\nPull request for issue #5452.\n\nAnother possibility would be to allow for either run() or start() scenarios, but I am not sure that is terribly useful since restart() with a new process lends itself to restarting longer running services when they crash and you want the old process so you can inspect the logs and what not.\n\nOtherwise, something like this might work, but doesn't allow for run() to return status code. Someone can get around that by getting manually on returned process.\n\n```php\n<?php\npublic function restart($method = 'start', $callback = null)\n{\n    if ($this->isRunning()) {\n        throw new \\RuntimeException('Process is already running');\n    }\n\n    if ($method != 'start' && $method != 'run') {\n        throw new \\RuntimeException('Method must be start or run');\n    }\n\n    $process = clone $this;\n    $process->$method();\n    return $process;\n}\n```\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-09-07T07:17:26Z\n\ncan you add some tests please ?",
            "[Process] updated CHANGELOG",
            "[Process] fixed phpdoc",
            "merged branch gigablah/header_caps (PR #5662)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n63a228c Map normalized header names to original capitalization\n\nDiscussion\n----------\n\n[HttpFoundation] Preserve capitalization of response header names\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/gigablah/symfony.png)](http://travis-ci.org/gigablah/symfony)\nLicense of the code: MIT\nFixes the following tickets: -\nTodo: -\n\n`HeaderBag` normalizes header names when they are set. Therefore, custom header names (e.g. X-Sendfile, Vary) are output in lowercase. I've added an array to map header keys to their original capitalization in `ResponseHeaderBag`. Calling `allPreserveCase()` will now output the header array with capitalization preserved.\n\nMore of a cosmetic (and consistency) fix, since HTTP header names are case insensitive.\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-10-03T16:09:31Z\n\nmay not work with\n```\nETag\nContent-MD5\nP3P\nWWW-Authenticate\nX-UA-Compatible\nX-XSS-Protection\n```\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-10-03T17:14:12Z\n\nThis overrhead is not needed most of the time. It should be done in a response listener if you have the issue. But as far as the RFC is concerned, this is not needed.\n\n---------------------------------------------------------------------------\n\nby gigablah at 2012-10-04T13:51:59Z\n\nI've reworked my approach to account for the cases mentioned by @pborreli. `ResponseHeaderBag` now contains an array to map the header keys to their original capitalized names. This is much cleaner compared to string manipulation. I've also added a simple test case.\n\nPlease let me know if there's merit to this, failing which I'll just extend the class in my projects.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-10-04T14:10:28Z\n\n@gigablah This approach looks much better indeed.\n\n---------------------------------------------------------------------------\n\nby gigablah at 2012-10-04T15:29:29Z\n\nThanks! I've squashed the commits and added more test data.\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-10-04T15:49:05Z\n\nThank you, it's a nice PR :+1:",
            "merged branch fabpot/twig (PR #5660)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n5c809d8 [TwigBundle] added support for Twig namespaced paths (Twig 1.10)\n\nDiscussion\n----------\n\n[TwigBundle] added support for Twig namespaced paths (Twig 1.10)\n\nIn a template, you can now use native Twig template names, instead of\nthe Symfony ones:\n\nBefore (still works):\n\n    {% extends  AcmeDemoBundle::layout.html.twig  %}\n    {% include  AcmeDemoBundle:Foo:bar.html.twig  %}\n\nAfter:\n\n    {% extends  @AcmeDemo/layout.html.twig  %}\n    {% include  @AcmeDemo/Foo/bar.html.twig  %}\n\nUsing native template names is also faster.\n\nThe only drawback is that the new notation looks similar to the way we\nlocate resources in Symfony, which would be\n`@AcmeDemoBundle/Resources/views/Foo/bar.html.twig`. We could have used\nthe same notation, but it is rather verbose (and by the way, using this\nnotation did not work anyway in templates).\n\nTODO: update documentation\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-10-03T13:36:56Z\n\nI forgot to mention why I'd like to include this change besides performance: this would allow to share templates between a project using the Symfony2 full-stack framework and any other project using Twig.\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-10-03T13:50:48Z\n\n:+1: Will the old notation be deprecated at some point?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-10-03T14:29:50Z\n\n@fabpot does it still support overwriting templates ?",
            "merged branch docteurklein/fix-router-resolve-string (PR #4995)\n\nThis PR was merged into the master branch.\n\nCommits\n-------\n\n4b86765 [FrameworkBundle] recursively resolve container parameter placeholders for arrays in router _defaults\n\nDiscussion\n----------\n\n[2.2] [FrameworkBundle] avoid trying to resolve container placeholders on arrays on router _defaults\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\nLicense of the code: MIT\nDocumentation PR: ~\n\nPermits to pass arrays in route `_defaults`.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-07-20T13:07:36Z\n\nThis seems weird. An array could contain parameters in it.\n\n---------------------------------------------------------------------------\n\nby docteurklein at 2012-07-20T13:17:00Z\n\n@stof An object too then, no ? Why accepting objects but not arrays ? Would you propose to recursively resolve array values ?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-07-20T13:31:06Z\n\n@docteurklein Resolving array values recursively would be consistent with the way the DIC parameters are resolved. I don't really see how you would resolve objects (and btw, it is pretty much an edge case as you cannot really put an object in your routes if you define them in your YAML or XML config files or with annotations)\n\n---------------------------------------------------------------------------\n\nby docteurklein at 2012-07-20T13:36:43Z\n\n@stof I agree. I can manage recursive array resolving if needed.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-23T13:58:07Z\n\nCan you squash your commits before I merge? Thanks.\n\n---------------------------------------------------------------------------\n\nby docteurklein at 2012-07-23T14:39:17Z\n\n@fabpot  done.",
            "merged branch ruimarinho/es-translation (PR #4892)\n\nCommits\n-------\n\n8a725f8 Updated Spanish translation\n\nDiscussion\n----------\n\nUpdated Spanish translation\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT",
            "merged branch eriksencosta/icu-data-update (PR #5107)\n\nCommits\n-------\n\n33105e0 [Locale] added more information to the README.md regarding the need to build the ICU data when the intl extension ICU data version mismatch the one shipped with Symfony\n3191c70 [Validator] fixed tests, ICU 4.4 (Travis version) does not have the  my  locale\nd7b6bb3 [Locale] updated README.md\n6456361 [Locale] added note about ICU data building: use the same PHP intl/ICU version as the desired version to build\n025f972 [Locale] renamed function\n8da99ca [Locale] updated CHANGELOG.md\nd909360 [Locale] don't create a  current  directory anymore, uses only the ICU version as the name of the data directory\n3f2b4bf [Locale] changed build data script name\n61e3539 [Form][Locale] updated minimum ICU version to 4.0\n0d442c7 [Locale] as of ICU 4.8+, slash ( / ) and dash ( - ) are interchangeable, you can use any of them in a date/time pattern\n90d6dc3 [Locale] fixed tests\n86da1b3 [Locale] added ICU update-data script to be run before the test suite\n5fd4eb1 [Locale] updated ICU data paths\n64ccee7 [Locale] updated ICU data\n0d0a8d4 [Locale] updated script to generate separated data directories for different ICU releases\n\nDiscussion\n----------\n\n[2.1][Locale] ICU data update\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: no\nFixes the following tickets:\nTodo: -\nLicense of the code: MIT\n\n[![Build Status](https://secure.travis-ci.org/eriksencosta/symfony.png?branch=icu-data-update)](http://travis-ci.org/eriksencosta/symfony)\n\nThe tests are passing in Travis only because it uses ICU 4.4. The tests fails in ICU 4.8 and 49.1. The data files now are up-to-date with ICU 49.1.2. The fails are consistent between 32 and 64 bit for the PHP 5.3.3, 5.3.14 and 5.4.4 (each one compiled with ICU 4.2 to 49).\n\nBasically tests that relies on Locale will have some idiosyncrasies:\n\n- Some tests will assert a different value for different ICU versions, mostly for currency/date formatting\n- Some tests will skip if not the latest ICU release, code that format/parse something that is directly based on ICU behavior will always implement the  behavior from the latest release\n- Some tests will make different assertions for different PHP versions (we already have them, just to note)\n\nThe Composer script handler was a very quick implementation, I accept suggestions about it. It basically invokes the `update-data.php` script. I will also rename this script later since it now behave a little bit different from the original script.\n\n@fabpot, @stof: should I add mine Composer `post-install-cmd` script in both the project root and component `composer.json` file?\n\nI'm planning to configure a CI server with a setup similar with mine Symfony development environment to run jobs with the different PHP/ICU releases for the Locale component. But most importantly is to document how I did it since it took a lot of time to have an enviroment that supports all this  ICU hell development . Also, there are some pitfalls regarding testing and to generating the resource bundles for the different ICU versions.\n\nAlmost there! I'll try to update later tomorrow (monday).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-30T08:14:29Z\n\nI would not have added the script in the `composer.json` file but in the `.travis.yml` file directly instead. We don't want this script to be run whenever someone run composer on the repository.\n\n---------------------------------------------------------------------------\n\nby eriksencosta at 2012-07-31T03:07:58Z\n\nOk, moved the script call to the `.travis.yml` file.\n\n---------------------------------------------------------------------------\n\nby eriksencosta at 2012-07-31T12:38:23Z\n\n@stof The last commit was just to backup WIP changes and to ask something to @igorw, it is mine  stage  :)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-06T03:05:16Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2044244) (merged c6a1dcd1 into 20d2e5a1).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-06T03:16:12Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2044311) (merged 76868419 into 20d2e5a1).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-06T03:52:20Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2044425) (merged 7e768eb2 into 20d2e5a1).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-06T04:04:30Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2044461) (merged edaca423 into 20d2e5a1).\n\n---------------------------------------------------------------------------\n\nby eriksencosta at 2012-08-06T04:33:55Z\n\nReady for primetime. The failed test is not related with mine changes.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-07T02:32:19Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/2053806) (merged 386d20c8 into 842b599c).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-07T13:51:59Z\n\nAfter merging this PR, I have more failing tests on my machine:\n\nPHP 5.3.8 - ICU 4.4.1\n\nIs it expected? Is yes, how do we need to run the tests locally?\n\n---------------------------------------------------------------------------\n\nby eriksencosta at 2012-08-07T14:56:23Z\n\n@fabpot Yep, it is expected. You'll need to build the ICU data for this version and export the `USE_INTL_ICU_DATA_VERSION` before running the tests:\n\n    php src/Symfony/Component/Locale/Resources/data/build-data.php\n    export USE_INTL_ICU_DATA_VERSION=1\n    phpunit src/Symfony/Component/Locale/Tests\n\nThe errors happens because the implementation is in sync with the behavior of ICU 49.1.2 and the shipped data is from data version too. Maybe I should add the steps above in the components `README.md` since it is more straightforward.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-07T14:58:44Z\n\n@eriksencosta Yes, that would be good to add some more information in the README file.\n\n---------------------------------------------------------------------------\n\nby eriksencosta at 2012-08-07T15:21:04Z\n\n@fabpot Done!\n\n---------------------------------------------------------------------------\n\nby eriksencosta at 2012-08-07T15:21:29Z\n\nAnd rebased.",
            "merged branch mpiecko/master (PR #5280)\n\nCommits\n-------\n\n58ebd1b [Form] Fixed error bubbling from DateTime widget - Issue #5270\n8ea1607 Update src/Symfony/Component/Form/Extension/Core/Type/DateTimeType.php\n\nDiscussion\n----------\n\n[Form] Fixed error bubbling from DateTime widget - Issue #5270\n\nThis is related to https://github.com/symfony/symfony/issues/5270\n\n---------------------------------------------------------------------------\n\nby mpiecko at 2012-08-16T19:37:45Z\n\nTravisbot shows something like this in it's log:\n\n    [Composer\\Downloader\\TransportException] The  http://nodeload.github.com/phingofficial/phing/zipball/2.4.12  file could not be downloaded (HTTP/1.1 500 Internal Server Error)\n\nSo is it my PR ot Travis CI who fails ... ? I saw this error in some other PR's ...\n\n---------------------------------------------------------------------------\n\nby stloyd at 2012-08-16T20:40:39Z\n\nIt's GitHub =)\n\n---------------------------------------------------------------------------\n\nby mpiecko at 2012-08-17T09:36:31Z\n\nBad GitHub :)\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-08-17T11:21:39Z\n\nCould you please add a test to DateTimeTypeTest?\n\n---------------------------------------------------------------------------\n\nby mpiecko at 2012-08-17T12:23:40Z\n\nSure!\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-08-30T08:20:08Z\n\n:+1:",
            "merged branch romainneutron/ProcessExitCode (PR #5386)\n\nCommits\n-------\n\n407db65 Add @Seldaek remote modifications\n3bfb976 Add unit test demonstrating bad exit code getter for a failing process\n\nDiscussion\n----------\n\nAdd unit test demonstrating bad exit code getter for a failing process\n\nSince symfony/symfony@7b63428698 exit code are not well handled anymore.\n\nThe unit test provided with this PR demonstrates it\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-30T11:05:05Z\n\nping @Seldaek\n\n---------------------------------------------------------------------------\n\nby stof at 2012-08-30T11:13:13Z\n\nWe probably need to enable the workaround only when sigchild is used.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-08-30T12:51:22Z\n\nOk I figured out the problem, the hack is even hackier I guess now, but it should work for people with and without --enable-sigchild at least.",
            "merged branch mtdowling/event_dispatcher_add_iterator (PR #5268)\n\nCommits\n-------\n\n0ad00f8 [EventDispatcher] Adding IteratorAggregate to GenericEvent\n\nDiscussion\n----------\n\n[EventDispatcher] Adding IteratorAggregate to GenericEvent\n\n---------------------------------------------------------------------------\n\nby drak at 2012-08-16T07:43:29Z\n\nWhat is the use case for this that it should be part of the Generic event?\n\n---------------------------------------------------------------------------\n\nby mtdowling at 2012-08-16T17:12:28Z\n\nThis allows for the GenericEvent to be even more generic. Now listeners don't need to know an exact key from the arguments, but rather can iterate over the arguments to find what they are looking for. This makes the GenericEvent more like an array.\n\n---------------------------------------------------------------------------\n\nby mtdowling at 2012-08-17T19:31:04Z\n\nHow would this be a nasty break? It's just giving the GenericEvent more capabilities with IteratorAggregate.\n\nThis is a completely separate PR from the one that flipped the constructor args.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-08-17T19:34:47Z\n\nWhy are you not just doing ``foreach ($event->getArguments() as $arg) { /** ... */ }``?\n\nIf you just have ``foreach ($event)``, to me at least it would not be so clear what we are actually iterating over.\n\n---------------------------------------------------------------------------\n\nby mtdowling at 2012-08-17T19:39:23Z\n\nThis class already has ArrayAccess. If you're already using this class like an array, then I think you should expect to be able to iterate it like an array. I'm just finishing that concept off by implementing IteratorAggregate.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-08-17T19:47:43Z\n\nIndeed, if we already have ArrayAccess which we probably don't want to remove again, then that seems reasonable.",
            "merged branch stof/fix_testsuite (PR #5403)\n\nCommits\n-------\n\n7ef6295 Removed the unnecessary file include\n\nDiscussion\n----------\n\nRemoved the unnecessary file include\n\nAs of Doctrine 2.2, the ORM annotations can be found by the autoloader directly.\n\nThis will also avoid breaking the testsuite in case the dev deps have not been installed as the ORM would not be available in this case (the tests relying on the ORM should already be skipped when it is not available). See #5402",
            "merged branch beberlei/RevertDbalAcl (PR #5253)\n\nCommits\n-------\n\n1b5ad17 Revert  Removed MySQL-exclusive usage of unsigned integer from table creation \n\nDiscussion\n----------\n\n[Security][DBAL] Revert MySQL unsigned removal\n\nRevert  Removed MySQL-exclusive usage of unsigned integer from table creation \n\nThis reverts commit 57694aaa94ec0118f516e8962be2f018c36d2011.\n\nThe problem is underlying in Doctrine DBAL change tracking and should\neither be fixed or ignored there.\n\nI opened a ticket on Doctrine Jira http://doctrine-project.org/jira/browse/DBAL-322\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-14T06:40:47Z\n\nI will merge this PR after we have a release of DBAL that includes the fix for DBAL-322.\n\n---------------------------------------------------------------------------\n\nby acasademont at 2012-08-20T08:01:48Z\n\nThis was already fixed 2 weeks ago in doctrine/dbal#183 so i guess this can be closed\n\n---------------------------------------------------------------------------\n\nby acasademont at 2012-08-20T08:02:06Z\n\nmerged i mean",
            "replaced self.version by 2.1.* in composer.json files",
            "bumped Symfony version to 2.1.2-DEV",
            "merged 2.0",
            "merged branch simensen/normalize-querystring (PR #4711)\n\nCommits\n-------\n\n6296a24 Standalone query string normalization\n\nDiscussion\n----------\n\n[HttpFoundation] Standalone query string normalization\n\nI wanted to leverage query string normalization in a test. I considered copying this code to my own library but I noticed that the only instance data `getQueryString` needed to know from the `Request` was `QUERY_STRING` so I broke the rest out into a standalone static function.\n\n---------------------------------------------------------------------------\n\nby simensen at 2012-07-02T20:05:59Z\n\nI made the requested changes.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-02T20:10:27Z\n\nCan you squash your commits? Thanks.\n\n---------------------------------------------------------------------------\n\nby simensen at 2012-07-02T20:16:52Z\n\nSure, no problem. Hopefully I did it correctly.",
            "[Form] removed comment now that PHPUnit 3.7 is out",
            "merged branch bamarni/patch-6 (PR #5548)\n\nCommits\n-------\n\n589a8b3 composer is available in travis workers\n\nDiscussion\n----------\n\ncomposer is available in travis workers\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-09-19T09:07:30Z\n\nreverted\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-19T09:59:21Z\n\nbtw, in the 2.1 branch, the ``COMPOSER_ROOT_VERSION`` varaible should be set to ``2.1.x-dev``\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-09-19T14:44:48Z\n\n@stof: ok, btw I don't understand the issue, deps are solvable without this, is it a workaround to make this package known as 2.1 even though it's not guessable with the branch name (eg. when using a feature branch for a PR)? I thought this was handled by the branch-alias.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-19T15:54:05Z\n\n@bamarni It is solvable in some cases but not in all of them. Sometimes, when being in a detached head (which is the case when Travis builds PRs), the guessing of the composer root version does not work, and so symfony dev deps depending on some symfony components (Doctrine) will fail because the guessed version would not match ``2.*`` (which is the Doctrine requirement for the components).\n\nbranch aliases have nothing to do with the guessing of the version for the root package.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-19T15:55:25Z\n\nbtw, the only cases where COMPOSER_ROOT_VERSION could be needed is when some of your dependencies have a requirement on your root package. Otherwise, the root version is never needed by composer to resolve deps\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-09-19T16:52:52Z\n\n@stof: in detached head indeed the version can't be guessed with git, so this change avoid potential issues with reciprocal dependencies (I guess it can also be solved by specifying a  version  in composer.json).\n\nBut I still don't get why you say branch aliases have nothing to do with the root package version, isn't the purpose of a  2.1-dev  branch-alias to be matched when specifying this package as a dependency with 2.1.*, no matter the branch name or if git is in detached head?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-09-19T18:59:13Z\n\n@bamarni a **branch** alias is about the aliasing the version of a branch. Look at how it is written. It tells composer that for Symfony, the ``dev-master`` version (so the master branch) should receive an alias ``2.2.x-dev``.\nThis alias will never help you if your root version cannot be guessed as being ``dev-master``.\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-09-19T20:43:19Z\n\nahh... in my mind branch alias was only an alias for the current branch, I forgot that it was a 'branch => alias' map, indeed in that case it can't help at all.\n\nthx for the explanations ;)",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  fixed stringification of array objects in RequestDataCollector (closes #5295)\n  Fixing config normalisation example in docblock\n\nConflicts:\n\tsrc/Symfony/Bridge/Doctrine/DataCollector/DoctrineDataCollector.php\n\tsrc/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php",
            "merged branch krmcbride/mongo-profiler (PR #5556)\n\nThis PR was merged into the 2.1 branch.\n\nCommits\n-------\n\nc120c4d Added Base64 encoding, decoding to MongoDBProfilerStorage\n\nDiscussion\n----------\n\n[HttpKernel] Added UTF8 encoding, decoding to MongoDBProfilerStorage\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nIt didn't take long for us to hit a non-utf8 error using the new `MongoDBProfilerStorage`.  I'm pretty sure the culprit was the Switfmailer DataCollector serializing a message with a PDF attachment.\n\nI thought this would be a good failsafe, although one could ask whether mail message attachments should be serialized at all...\n\n---------------------------------------------------------------------------\n\nby krmcbride at 2012-09-28T17:28:02Z\n\nSwitched encoding/decoding to base64",
            "merged branch drak/fluid_eventdispatcher (PR #3546)\n\nCommits\n-------\n\nca70a35 [FrameworkBundle] Return Event\n876cf96 [EventDispatcher] Add fluid interface on dispatch()\n\nDiscussion\n----------\n\n[2.1][EventDispatcher] Add fluid interface on dispatch()\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nThis patch allows for code like the following:-\n\n    $response = $dispatcher->dispatch('foo', new FooEvent())->getResponse();\n\nand\n\n    if ($dispatcher->dispatch('foo')->isStoppedPropagation()) {\n        // ...\n    }",
            "Merge branch '2.0' into 2.1\n\n* 2.0:\n  [2.0][http-foundation] Fix Response::getDate method\n  Support the new Microsoft URL Rewrite Module for IIS 7.0. @see http://framework.zend.com/issues/browse/ZF-4491 @see http://framework.zend.com/code/revision.php?repname=Zend+Framework&rev=24842\n  fixed undefined variable\n  hasColorSupport does not take an argument\n  Improve FilterResponseEvent docblocks Response ref\n\nConflicts:\n\ttests/Symfony/Tests/Component/HttpFoundation/ResponseTest.php",
            "merged branch vicb/doctrine_deps (PR #5127)\n\nCommits\n-------\n\n4ae54e3 [Composer] Bumped doctrine/orm to 2.2.3\n\nDiscussion\n----------\n\n[Composer] Bumped doctrine/orm to 2.2.3\n\nfix #4966\n\n---------------------------------------------------------------------------\n\nby stloyd at 2012-07-31T15:01:41Z\n\nYou should also _bump_ Security component [deps](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/composer.json#L28).\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-31T15:05:03Z\n\nThe security does not depend on `doctrine/orm`",
            "Unit test for patched method OptionsResolver::validateOptionValues().",
            "validateOptionValues throw a notice if an allowed value is set and the corresponding option isn't.",
            "merged branch hason/command (PR #5585)\n\nCommits\n-------\n\nc869a65 [Console] Fixed return value for Command::run\n\nDiscussion\n----------\n\n[2.1][Console] Fixed return value for Command::run\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nAPI says that Command::run returns integer. This is also necessary if I want to run nested commands.",
            "merged branch Nanocom/console_fix_input_tests (PR #5579)\n\nCommits\n-------\n\ncc46780 [Console] Fix some input tests\n\nDiscussion\n----------\n\n[Console] Fix some input tests\n\nNew PR for console input tests, was previously on the master branch : https://github.com/symfony/symfony/pull/5567",
            "merged branch sli-systems/dc-1 (PR #6080)\n\nThis PR was squashed before being merged into the master branch (closes #6080).\n\nCommits\n-------\n\ne477a2e Handle case of static controller method and controllers using magic __call() method\n\nDiscussion\n----------\n\nHandle case of static controller method and controllers using magic __call() method\n\nImprove collecting controller details for edge cases where:\n- controller is array, but contains class name and static method\n- method doesn't exist, but is handled by magic __call() method\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-11-21T08:12:08Z\n\nCan you add some unit tests?\n\n---------------------------------------------------------------------------\n\nby sli-systems at 2012-11-21T22:19:17Z\n\n@pierredup\nI disagree with the your comment about is_callable() only working with objects. The PHP docs state that the first  argument is a callable, so it can be a string, array, closure, and perhaps more.\n\nThe test I added also shows that the code works as is :)\n\nI've thought about your suggestion of adding reflection to look up the location of __call(). However, I think this doesn't really  add a lot and only complicates matters. Also, as you can see in the new test, there is also __callStatic() to consider.\n\nThe fact that file/line are n/a is  correct, because the most typical case will be that __call() and __callStatic() will delegate to some other method that might not even be in the same class/file (a subclass I would expect), IMHO.\n\n@fabpot\nGood catch  about the '/'. I hope the test is complete enough. Looks more like an exercise on PHP callables than anything else, tho ;)\n\n---------------------------------------------------------------------------\n\nby pierredup at 2012-11-22T04:56:18Z\n\nTrue that ````is_callable```` takes any callable argument, except in the one specific case where you have a ````__call()```` method, and pass an array with the first paramater as a string.\n\nTake the following example:\n\n    class Controller {\n        public function __call($method, $arguments) {}\n    }\n\n    $controller = array('Controller', 'action');\n\n    var_dump(is_callable($controller));\n\nHere ````is_callable($controller)```` will actually return ````false````, where if you have ````$controller = array(new Controller, 'action');```` it would return true.\n\nOf course if you have a ````__callStatic```` method, then it would always return true.\n\nYour tests doesn't seem to cover this use case\n\n---------------------------------------------------------------------------\n\nby sli-systems at 2012-11-22T20:27:05Z\n\nHmm, maybe. I have to admin that I do not know about this case. OTOH, if is_callable returns false is it really callable then? I would think this more of a PHP bug then?\n\nI think I might have come across this case during coding, but then dismissed it because in that case FilterControllerEvent failed already before the data collector code is reached.\n\nIn FilterControllerEvent there is a check on is_callable and a LogicException is thrown if $controller is not callable.\n\nSo, is FilterControllerEvent wrong  too then?\n\n---------------------------------------------------------------------------\n\nby pierredup at 2012-11-22T20:41:14Z\n\nOne would think that if is_callable returns false, then the controller isn't callable, but in the case I mentioned above, the controller is in fact callable. I also thought it was a bug with php, but the php-internals don't seem to think so.\n\nThe problem is, if you specify the class as a string, php looks for a static method, even if you have a __call method, it won't be registered.\n\nI will have a look at the FilterControllerEvent to see if this use case applies there as well.\n\n---------------------------------------------------------------------------\n\nby sli-systems at 2012-11-22T20:50:32Z\n\nRather strange - if that is the case then using is_callable seems pretty pointless and the only way would be to try to execute the controller to find out if it is, in fact, callable...\n\n---------------------------------------------------------------------------\n\nby pierredup at 2012-11-22T20:51:07Z\n\nOkay so it actually seems that the case above isn't callable after all. If the controller is specified as a string, then a static method need to exist. Hence why it works with __callStatic. Only when an instance of the class is specified, will it handle the __call method.\n\n---------------------------------------------------------------------------\n\nby sli-systems at 2012-11-22T20:57:55Z\n\nSo the tests are sufficient then?\n\n---------------------------------------------------------------------------\n\nby pierredup at 2012-11-22T20:59:22Z\n\nYes it is.\nThis happens when you just assume something without actually testing it :)\n\nSorry for the hassle",
            "merged branch bschussek/optimize-events (PR #5089)\n\nCommits\n-------\n\na845a28 [Form] Optimized form events to only be created on demand\n\nDiscussion\n----------\n\n[Form] Optimized form events to only be created on demand\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -",
            "merged branch sun/yaml-indent (PR #5157)\n\nCommits\n-------\n\n3e1a1ab Force the value of Dumper::setIndentation($num) to be of type integer.\n5be7237 Added Yaml\\Dumper::setIndentation() method to allow a custom indentation level of nested nodes.\n\nDiscussion\n----------\n\n[Yaml] Allow custom indentation level for nested nodes\n\nYAML does not specify an absolute indentation level, but a consistent indentation of nested nodes only: http://yaml.org/spec/current.html#indentation%20space/\n\nProjects that are generally using 2 spaces for indentation should be able to retain consistency with their coding standards by supplying a custom value for the new $indent parameter for Yaml::dump() and Dumper::dump().\n\nThe new parameter is a backwards-compatible API addition and defaults to the previous default of 4 (which was changed from 2 via PR #2242 only recently).\n\nThe old $indent parameter is renamed to $level, and remains to be used internally only.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-03T00:24:22Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2024289) (merged 56331202 into b1618d21).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-03T00:29:02Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2024315) (merged eeae28a4 into b1618d21).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-03T02:41:42Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/2024905) (merged 9a82c438 into b1618d21).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-03T07:53:50Z\n\nThis is indeed a BC break as the method signature changed in a non-BC way.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-08-03T08:35:51Z\n\nI think I would prefer to have a static method to be able to change the number of spaces to use on a global basis. It makes more sense and would prevent the BC break. What do you think?\n\n---------------------------------------------------------------------------\n\nby sun at 2012-08-03T13:23:23Z\n\nThanks for your feedback! \u2014 Took some time to think through the static proposal.  Here's what I think:\n\n1. The call from DependencyInjection\\Dumper\\YamlDumper truly was a unexpected/nasty surprise for me.  That is, because it passes a parameter to Yaml\\Dumper that is documented for internal use only, and the surrounding YamlDumper code generally hard-codes lots of assumptions of where exactly the nodes/collections will be output in the dumped YAML structure.  (I think that code can be simplified, cleaned up, and made faster at the same time (hence the todo), but indeed, that probably belongs into a separate issue.)\n1. The essential problem with a static is closely bound to that though; a static property value for the indentation would  stick  and thus hi-jack the DependencyInjection\\Dumper\\YamlDumper, as it hard-codes and thus expects 4 spaces (contrary to any custom indentation).\n1. Most code uses Yaml\\Yaml as utility/helper service directly, so there'd be no clean way to prime the static with a custom value, aside from subclassing the entire thing - in which case this entire issue would sorta become moot, because at the point you're subclassing, you can as well go the extra mile and replace the entire Yaml\\Dumper::dump() to implant the custom indentation level...\n1. Another option would be to use a non-static Yaml\\Dumper::$indent property, supplied through the constructor; i.e.:\n\n        public function __construct($indent = 4)\n\n  ...or alternatively, ::setIndentation(). Essentially requiring people to use and instantiate Yaml\\Dumper directly, if they want to use a custom indentation.\n1. Though in the end, I don't want to sound pedantic, but I *do* wonder a bit about the exact extent of the `@api` tags, as well as `@param`s that are explicitly documented as  internal use only ... :)  That is, because only Yaml\\Yaml is tagged with `@api`, but nothing in Yaml\\Dumper.  The same sorta applies to DependencyInjection\\Dumper\\YamlDumper::dump(), which is tagged with `@api`, but the :.addService() method being adjusted accordingly here is not.  So essentially, when taking those tags (plus the param's description) seriously and in a nitpicky way, then there is no BC break, since no one should rely on their exact implementation... ;)  (I perfectly realize that this is a long shot :))\n\nSo... depending on the final stance on the last point, I'd either move forward with the current proposal in this PR.  Otherwise, I'd suggest the non-static property on Yaml\\Dumper - in which case we'd likely try to swap out the static Symfony\\Component\\Yaml\\Yaml helper with a Drupal\\Component\\Yaml\\Yaml in order to always instantiate the dumper with the custom indentation.  What do you think?\n\n---------------------------------------------------------------------------\n\nby sun at 2012-08-04T22:57:21Z\n\nAlright.  While I believe I made some good points in my last comment, I've taken the fully backwards-compatible path:\n\n- added the new $indent parameter only to Yaml::dump()\n- added a new Dumper::$intendation property and Dumper::setIndentation() method, to control the indentation level within the scope of a single Dumper instance only.\n\nDo you think this is acceptible? :)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-05T06:16:22Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2039120) (merged 5be7237b into c99f9d29).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-07T07:51:04Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/2055164) (merged 3e1a1abd into c99f9d29).\n\n---------------------------------------------------------------------------\n\nby sun at 2012-08-07T07:53:18Z\n\nOnly one environment failed, and the [test failure](http://travis-ci.org/#!/symfony/symfony/jobs/2055165/L203) seems unrelated to this PR.",
            "merged branch jfsimon/issue-5196 (PR #5197)\n\nCommits\n-------\n\nc2207da [Console] Removed unused phpunit annotation.\nc0c61da [Console] Added current style appliance for all styled text.\n696a653 [Console] Removed text transformation for empty styles.\nc7e324a [Console] Added test for non style tag formatting.\n\nDiscussion\n----------\n\n[Console] Non style tags dont disturb formatting anymore\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nFixes issue #5196.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-06T19:35:20Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/2050455) (merged c0c61da0 into 842b599c).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-08-07T07:47:31Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/2055153) (merged c2207da6 into 842b599c).",
            "merged branch bschussek/bootstrap (PR #5112)\n\nCommits\n-------\n\nb982883 [Form] Moved FormHelper back to FrameworkBundle\ncb62d05 [Form] [Validator] Fixed issues mentioned in the PR\n2185ca8 [Validator] Added entry point  Validation  for more convenient usage outside of Symfony2\ned87361 [Form] Moved FormHelper creation to TemplatingExtension\n87ccb6a [Form] Added entry point  Forms  for more convenient usage outside of Symfony\n\nDiscussion\n----------\n\n[Form] [Validator] Added more convenient entry points for stand-alone usage\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nThis PR greatly simplifies the usage of the Form and Validator component when used outside of Symfony2. Check out the below code to get an idea about the simplified usage:\n\n```php\n<?php\n\nuse Symfony\\Component\\Validator\\Validation;\nuse Symfony\\Component\\Validator\\Mapping\\Cache\\ApcCache;\nuse Symfony\\Component\\Form\\Forms;\nuse Symfony\\Component\\Form\\Extension\\HttpFoundation\\HttpFoundationExtension;\nuse Symfony\\Component\\Form\\Extension\\Csrf\\CsrfExtension;\nuse Symfony\\Component\\Form\\Extension\\Csrf\\CsrfProvider\\SessionCsrfProvider;\nuse Symfony\\Component\\Form\\Extension\\Templating\\TemplatingExtension;\nuse Symfony\\Component\\Form\\Extension\\Validator\\ValidatorExtension;\nuse Symfony\\Component\\HttpFoundation\\Session;\nuse Symfony\\Component\\Templating\\PhpEngine;\n\n$session = new Session();\n$secret = 'V8a5Z97e...';\n$csrfProvider = new SessionCsrfProvider($session, $secret);\n$engine = new PhpEngine(/* ... snap ... */);\n\n$validator = Validation::createValidator();\n// or\n$validator = Validation::createValidatorBuilder()\n    ->addXmlMapping('path/to/mapping.xml')\n    ->addYamlMapping('path/to/mapping.yml')\n    ->addMethodMapping('loadValidatorMetadata')\n    ->enableAnnotationMapping()\n    ->setMetadataCache(new ApcCache())\n    ->getValidator();\n\n$formFactory = Forms::createFormFactory();\n// or\n$formFactory = Forms::createFormFactoryBuilder()\n    // custom types, if you're too lazy to create an extension :)\n    ->addType(new PersonType())\n    ->addType(new PhoneNumberType())\n    ->addTypeExtension(new FormTypeHelpTextExtension())\n    // desired extensions (CoreExtension is loaded by default)\n    ->addExtension(new HttpFoundationExtension())\n    ->addExtension(new CsrfExtension($csrfProvider))\n    ->addExtension(new TemplatingExtension($engine, $csrfProvider, array(\n        'FormBundle:Form'\n    ))\n    ->addExtension(new ValidatorExtension($validator))\n    ->getFormFactory();\n\n$form = $formFactory->createBuilder()\n    ->add('firstName', 'text')\n    ->add('lastName', 'text')\n    ->add('age', 'integer')\n    ->add('gender', 'choice', array(\n        'choices' => array('m' => 'Male', 'f' => 'Female'),\n    ))\n    ->getForm();\n\nif (isset($_POST[$form->getName()])) {\n    $form->bind($_POST[$form->getName()]);\n\n    if ($form->isValid()) {\n        // do stuff\n    }\n}\n\nreturn $engine->render('AcmeHelloBundle:Hello:index.html.php', array(\n    'form' => $form->createView(),\n));\n```\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-07-30T10:08:42Z\n\nI should maybe add a comment about the benefits of this change, in case they are not self-explanatory:\n\n* class construction with default configuration is now a one-liner\n* userland code is decoupled from core implementations \u2192 userland code doesn't break if we change constructor signatures\n* easier to understand, since many core classes are now created internally\n* easy to discover the possible settings \u2192 just look at (FormFactory|Validator)BuilderInterface\n* usage of custom interface implementations is supported, just like before\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-31T08:18:53Z\n\nThe new syntax is great.\n\nI have one comment though about this PR about support of PHP as a templating system (support for Twig is provided by the bridge and it was already easy to configure Twig as a templating system for forms -- see Silex for instance).\n\nThe `FormHelper` has been moved into the Form component. This helper is only useful when using the PHP templating system (which is not what we recommend people to use), but the default templates are still in the Framework bundle. So using the Form component as standalone with PHP as a templating system still requires to install the bundle to get access to the default templates. Am I missing something? Do we want to move the PHP templates to the Form component too?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-07-31T08:28:28Z\n\n@fabpot it is even worse than that: the FormHelper currently uses the theme by using ``$theme . ':' . $block . '.html.php`` IIRC. This is not compatible with the default template name parser of the component expecting a path. And the FrameworkBundle template name parser does not support accessing a template outside a bundle AFAIK.\nSo moving the templating to the component would require some refactoring in the FormHelper and the template name parser. However, I think it is worth it. Some people complained that using the form rendering (outside the full-stack framework) was requiring either setting up Twig with the bridge, or adding FrameworkBundle in the project (which means including most of the code of the full-stack framework). Having the Templating rendering in the standalone component could be a great idea\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-31T08:42:53Z\n\nBut then, I don't want to promote the Templating component or the PHP templating system. Twig is always a better alternative and this should be what people use most of the time, PHP being the rare exception.\n\nAnyway, we are too close from the first 2.1 RC, so any big refactoring will have to wait for 2.2.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-07-31T09:02:10Z\n\nthen maybe we should keep the FormHelper in FrameworkBundle for now as it is tied to the FrameworkBundle template name parser anyway currently.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-07-31T14:22:35Z\n\n> it it is even worse than that: the FormHelper currently uses the theme by using ``$theme . ':' . $block . '.html.php`` IIRC. This is not compatible with the default template name parser of the component expecting a path.\n\nThis is why the templates are still in FrameworkBundle. I think they should be moved too, but then we have to change\n\n* the default theme to an absolute file path\n* the FrameworkBundle name parser to accept absolute paths\n\nI think this can wait until 2.2. Baby steps.\n\n> I don't want to promote the Templating component or the PHP templating system.\n\nWe can both promote Twig while making Templating as easy to use as possible. If people want to use Templating, they probably have a reason. We don't have to make their lives more painful than necessary.\n\nBtw: Templating is a *lot* faster for rendering forms than Twig. On Denis' form, Templating takes 1.15 seconds while Twig takes 2.\n\nAbout moving the helpers, we have two choices:\n\n* Move each helper to the respective component. This would not require new releases of the Templating component when we add more helpers in other component.\n\n* Move all helpers to Templating. This does not make that much sense for Form, as then Form has support for Templating (TemplatingRendererEngine) and Templating has support for Form (FormHelper), which is a bit weird. I personally prefer a stacked architecture, where Templating is at the bottom and Form-agnostic, and Form (or any other component) builds upon that.\n\nI'm fine with both approaches. I'll move FormHelper back to FrameworkBundle, and we can decide for a direction in 2.2.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-07-31T14:36:30Z\n\nDone.",
            "merged branch vicb/lenient_generator (PR #5114)\n\nCommits\n-------\n\n03bbaaf [Routing] Add an interface for configuring strict_parameters\n\nDiscussion\n----------\n\n[RFC][Routing] Add an interface for configuring strict_parameters\n\nThis is a proposal to fix #4697 (related to #4592).\n\nThe main point left to discuss was the name of the interface, which is now `LenientInterface`. We could change the name to anything else is someone has a better idea.\n\n@stof @Tobion what do you think ?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-07-30T16:34:20Z\n\n@vicb I already said I had no idea to name it, and it has not changed. :)\nSo let's wait for other people to see if they have a better idea\n\n---------------------------------------------------------------------------\n\nby breerly at 2012-07-30T16:38:38Z\n\nMaybe `PermissibleInterface` or `PermissiveInterface`.\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-07-30T17:00:09Z\n\n`StrictUrlGeneratorInterface`, `StrictParametersInterface` or `StrictInterface`\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-07-30T17:04:46Z\n\n:+1: for `PermissiveInterface`\n\n---------------------------------------------------------------------------\n\nby stof at 2012-07-30T17:07:59Z\n\nyes, because the Router currently can only use this interface to set it to ``not-strict``. It assumes that the url generator is already strict by default (which is probably a bad assumption btw as the base class for the generated generator can be changed)\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-07-30T17:09:33Z\n\n@stof thx, got it\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-07-30T17:10:03Z\n\nthis interface realize setting Strict by setStrictParameters, and get by getStrictParameters, and imho named it by `Strictable` is more logic\n\n---------------------------------------------------------------------------\n\nby pborreli at 2012-07-30T17:11:07Z\n\n@Partugal let's try to find an english term :)\n\n---------------------------------------------------------------------------\n\nby Partugal at 2012-07-30T17:11:31Z\n\n)\n\n---------------------------------------------------------------------------\n\nby breerly at 2012-07-30T17:15:23Z\n\n@Partugal I like using  able  in interface names because it describes a behavior instead of a noun. This type of naming makes following the Interface Segregation Principle easy to follow. Good work.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-30T18:24:26Z\n\nAs explained by @stof I did not consider `StrictInterface` because as of now the interface is used to disabled the strict bevahior (which is enabled by default).\n\nI am not satisfied with `PermissiveInterface` / `LenientInterface` because implementing this interface does not mean that the generator will be permissive but only that the behavior is configurable - yes I did consider `Configurable` but the term is a too vague.\n\n---------------------------------------------------------------------------\n\nby breerly at 2012-07-30T18:35:45Z\n\nI see. Perhaps ```StrictConfigurableInterface``` would do the trick.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-07-30T21:02:21Z\n\nI think renaming strict_parameters to `strict_requirements` is the way to go because it determines how requirements are handled when generating a URL. Also we should allow another option:\nstrict_requirements = true: throw exception for mismatching requirements\nstrict_requirements = null: return null as URL for mismatching requirements and log it.\nstrict_requirements = false: return the URL with the given parameters without checking the requirements and don't log it.\n(Maybe use constants for these).\nThe Interface I would then call `ConfigurableRequirementsInterface` or `RequirementsHandlingInterface`.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-31T07:23:24Z\n\nThanks all for the feeback, this is what is now implemented:\n\n- A `ConfigurableRequirementsInterface` that should be implemented by generators that can be configure not to throw an exception when the parameters do not match the requirements,\n- The interface has two methods: `setStrictRequirements()` and `isStrictRequirements()`,\n- `setStrictRequirements()` always gets called to configure the generator (whatever the option value is)\n\nNote: The Router option name has not changed (i.e. `strict_parameters`)\n\nDoes that fit everyone ?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-31T07:39:22Z\n\nSo the option name is now consistent (`strict_requirements`) with the interface. We should sync the change [in the standard edition](https://github.com/symfony/symfony-standard/blob/master/app/config/config.yml#L11) if we agree to merge this.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-31T07:51:47Z\n\n@vicb you forgot to rename the property in `UrlGenerator` as @stof mentioned above.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-31T07:59:57Z\n\n@fabpot fixed. If the code is ok, I'll squash the commits and open a PR on symfony-standard",
            "merged branch bschussek/httpfoundationextension (PR #5103)\n\nCommits\n-------\n\n173b929 [Form] Completely decoupled CoreExtension from HttpFoundation\n\nDiscussion\n----------\n\n[Form] Completely decoupled CoreExtension from HttpFoundation\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -",
            "merged branch bschussek/options-efficiency (PR #5102)\n\nCommits\n-------\n\n57ac110 [Form] Removed unnecessary method call\n27ab56d [OptionsResolver] Removed LazyOption class and improved performance a tiny bit\n\nDiscussion\n----------\n\n[OptionsResolver] Removed LazyOption class and improved performance\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -",
            "merged branch pborreli/filesystem-windows (PR #5088)\n\nCommits\n-------\n\n03c3712 [Filesystem] Fixed 2 tests throwing error on windows\n3689bb8 [Filesystem] Fixed 3 failing tests on windows\n\nDiscussion\n----------\n\n[Filesystem] Fixed 5 tests on windows\n\nFixing 3 test expecting wrong folders :\n\n```\n-'C:\\Users\\pascal\\AppData\\Local\\Temp\\\\1343425847694\\file'\n+'C:\\Users\\pascal\\AppData\\Local\\Temp\\1343425847694\\file'\n```\n\nFixed 2 tests on Windows caused by symlink function throwing error when first argument is not existent :\n```\nsymlink(): Could not fetch file information(error 2)\n```",
            "merged branch Dattaya/framework-bundle/assets-install-command (PR #5084)\n\nCommits\n-------\n\nf402a16 [FrameworkBundle] AssetsInstallCommand. Made 'web' as a default folder.\n\nDiscussion\n----------\n\n[FrameworkBundle] AssetsInstallCommand. Made 'web' as a default folder.\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: not sure\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n\n>'The target directory (usually  web )'\n\nIt is indeed a folder that's usually used to install assets, why not making it as a default value?",
            "merged branch bschussek/issue5029 (PR #5042)\n\nCommits\n-------\n\nfb002d8 [Form] Fixed variable passing from outer to inner blocks of the same FormView instance\n\nDiscussion\n----------\n\n[Form] Fixed variable passing from outer to inner blocks of the same FormView instance\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5029\nTodo: -\n\nThis PR fixes two bugs.\n\nThe first bug is described in #5029. The second parameter to the  form_label  function in Twig, if given, always overwrote whatever label was defined previously.\n\n```\n{# null would overwrite whatever is currently set #}\nform_label(form, null, { ... })\n```\n\nThe second bug affected passing variables from outer to inner blocks. In the following example,  label_attr  would not be forwarded to the  form_label  function.\n\n```\nform_row(form, {  label_attr : {  class :  my_class  }})\n```\n\nBoth bugs are fixed now.",
            "merged branch gedrox/patch-1 (PR #5041)\n\nCommits\n-------\n\n0ea3769 Fix not recognized  type  option exception\n\nDiscussion\n----------\n\n[Form] Fixed not recognized  type  option exception\n\nThe exception about not recognized  type  option was raised when  date ,  datetime ,  time  type was guessed by validator type guesser using the date related constraint.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-07-25T11:30:23Z\n\nThanks! :+1:",
            "merged 2.0",
            "Revert  merged branch stof/serializable_role (PR #4925) \n\nThis reverts commit b0750f6dcd1e6f8b1be2c1e6604d4cbb785c9a8e, reversing\nchanges made to d09bfe7552148d1d36b65487dfcbd378830b55a0.",
            "[WebProfilerBundle] removed remaining request retrieval from the container",
            "[HttpKernel] fixed HTTP exception headers in ExceptionHandler",
            "ensured that an exception is always converted to an error response (and that we keep the HTTP status code and headers)",
            "merged branch craue/patch-23 (PR #4869)\n\nCommits\n-------\n\n20ae693 added missing dot\n\nDiscussion\n----------\n\nadded missing dot",
            "merged branch stof/unique_validator_error_mapping (PR #4868)\n\nCommits\n-------\n\nac78755 [DoctrineBridge] Added an option to choose the subpath for the violation\n\nDiscussion\n----------\n\n[DoctrineBridge] Added an option to choose the subpath for the violation\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3866\nTodo: -\n\nBy default, the UniqueEntityValidator maps the violation on the first\nfield of the UniqueEntity constraint. The new option allows to control\nthis behavior if a better mapping is suited.",
            "merged branch jfsimon/issue-4752 (PR #4832)\n\nCommits\n-------\n\n50cf928 [Console] Removed pointless constant.\n14bd5ba [Console] 'formatBlock' helper now escape messages.\naaf4950 [Console] Implemented '<' escaping.\n8cf82b7 [Console] Added '<' escaping tests.\n\nDiscussion\n----------\n\nIssue 4752\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4752\n\nThis PR adds possibility to escape `<` chars with `\\` to avoid formatting mess.\nIn addition, `FormatterHelper::formatBlock()` method auto-escapes messages.",
            "merged branch bschussek/issue3387 (PR #4835)\n\nCommits\n-------\n\n5b057f8 [Form] Fixed DateType to use  format  for creating the year and day choices\n\nDiscussion\n----------\n\n[Form] Fixed DateType to use  format  for creating the year and day choices\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3490\nTodo: -",
            "[Process] fixed setTimeout() to not allow negative timeout values (closes #4647)",
            "merged branch bschussek/fix (PR #4478)\n\nCommits\n-------\n\nd6e8001 Fixed mistake in UPGRADE file\na1cd8ae [Form] Removed invalid tests introduced again upon merge\n\nDiscussion\n----------\n\n[Form] Fixed failing tests in master\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-01T06:24:55Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1495799) (merged d6e80012 into e0825289).",
            "[FrameworkBundle] tweaked previous merge",
            "merged branch merk/routing-bug (PR #4823)\n\nCommits\n-------\n\nc061c30 Router#resolveString should return null instead of empty string when $value is null\na1d1a02 Null default value route regression\n\nDiscussion\n----------\n\n[Router] Null default value route regression\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4823\nTodo:\nLicense of the code: MIT\nDocumentation PR:\n\n---\n\nThe commit by @vicb 0555913fbbad5ce29b7dd836155f832d5cfc288f introduces a regression in the handling of default values that are null, while there are requirements still set for this value.\n\nThis is a failing test case and fix for the issue.\n\n---------------------------------------------------------------------------\n\nby merk at 2012-07-10T04:24:40Z\n\nNow contains a fix, tests now pass.",
            "merged branch michaelperrin/upgrade_to_21 (PR #4802)\n\nCommits\n-------\n\n81eb722 Simpler sentence concerning upgrade of the form_label function\nf6f1bb5 Update to the  Upgrade to v2.1  documentation: the way HTML attributes are passed for the `form_label` function has changed.\n\nDiscussion\n----------\n\nUpdate upgrade to 2.1 documentation concerning form_label\n\nThe way HTML attributes are passed for the `form_label` function has changed since this commit :\nhttps://github.com/symfony/symfony/commit/167e64f79992f6366108fde1548e2a2c9552d3c6\n\nI also made a PR for the documentation:\nhttps://github.com/symfony/symfony-docs/pull/1542",
            "merged branch frosas/start-session-on-generate-csrf-token (PR #4781)\n\nCommits\n-------\n\n6d94f3e Ensure there is a session before getting the session id\n\nDiscussion\n----------\n\n[Form] Ensure there is a session before getting the session id\n\nSolves  The CSRF token is invalid. Please try to resubmit the form  error when a form is generated before the session is started.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-09T10:23:32Z\n\nAdding a CSRF token only makes sense if you are on a page with a  user . If not (and if you don't use HTTP auth or whatever), then there is no need for a CSRF token.\n\n---------------------------------------------------------------------------\n\nby frosas at 2012-07-09T14:42:40Z\n\nThis PR doesn't change any logic on whether a CSRF token is added or not, it just fixes a bug when a token is requested.",
            "merged branch bamarni/master (PR #4792)\n\nCommits\n-------\n\n6c9c2ec [ClassCollectionLoader] fixed comment striping on classes in global namespace\n\nDiscussion\n----------\n\n[ClassCollectionLoader] fixed comment striping on classes in global namespace\n\nComments aren't striped when the class is in the global namespace, this adds a fake namespace to let the fixNamespaceDeclaration method handling the formating, so we can remove a method.\n\nI've also put dev as minimum policy in composer, otherwise I couldn't install dependencies.",
            "merged branch asm89/refactor-authentication-success-handling (PR #4599)\n\nCommits\n-------\n\nbb138da [Security] Fix regression after rebase. Target url should be firewall dependent\neb19f2c [Security] Add note to CHANGELOG about refactored authentication failure/success handling [Security] Various CS + doc fixes [Security] Exception when authentication failure/success handlers do not return a response [Security] Add authors + fix docblock\nf9d5606 [Security] Update AuthenticationFailureHandlerInterface docblock. Never return null\n915704c [Security] Move default authentication failure handling strategy to seperate class [Security] Update configuration for changes regarding default failure handler [Security] Fixes + add AbstractFactory test for failure handler\nc6aa392 [Security] Move default authentication success handling strategy to seperate class [Security] Update configuration for changes regarding default success handler [Security] Fix + add AbstractFactory test\n\nDiscussion\n----------\n\n[Security] Refactor authentication success handling\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=refactor-authentication-success-handling)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR extracts the default authentication success handling to its own class as discussed in #4553. In the end the PR will basically revert #3183 (as suggested by @schmittjoh) and fix point one of #838.\n\nThere are a few noticeable changes in this PR:\n- This implementation changes the constructor signature of the `AbstractAuthentictionListener` and `UsernamePasswordFormAuthenticationListener` by making the `AuthenticationSuccessHandler` mandatory (BC break). If this WIP is approved I will refactor the failure handling logic too and then this will also move one place in the constructor\n- This PR reverts the change of making the returning of a `Response` optional in the `AuthenticationSuccessHandlerInterface`. Developers can now extend the default behavior themselves\n\n@schmittjoh Any suggestions? Or a +1 to do the failure logic too?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-06-17T23:53:07Z\n\n+1 from me\n\n@fabpot, what so you think?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-19T08:15:48Z\n\nCan you add a note in the CHANGELOG? Thanks.\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-06-19T10:22:20Z\n\nI will, but I'll first do the same for the failure logic.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-21T08:03:14Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1671555) (merged 17c8f66f into 55c6df99).\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-06-21T08:45:38Z\n\n:+1: thank you @stof. I think this is good to go now.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-21T08:50:28Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1671817) (merged 8982c769 into 55c6df99).\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-06-21T14:23:58Z\n\n@schmittjoh @fabpot The `LogoutListener` currently throws an exception when the successhandler doesn't return a `Response` ([link](https://github.com/symfony/symfony/blob/9e9519913d2c5e2bef96070bcb9106e1e389c3bd/src/Symfony/Component/Security/Http/Firewall/LogoutListener.php#L101)). Should this code check for this too?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-06-21T14:26:49Z\n\nYes, this code was removed, but needs to be re-added here as well.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-21T15:08:59Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1674437) (merged 5afa240d into 55c6df99).\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-06-26T06:01:02Z\n\n@fabpot Can you make a final decision on this? If you decide on point 3, this code can be merged.  I agree with the arguments of @stof about the option handling and it 'only' being a BC break for direct users of the security component. I even think these direct users should be really careful anyway, since the behavior of the success and failurehandlers now change back to how they acted in 2.0.\n\nNow I am thinking about it, can't the optional parameters of this class move to setters anyway? That will make it cleaner to extend.\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-06-28T10:29:50Z\n\nping @fabpot\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-28T17:23:02Z\n\nI'm ok with option 1 (the BC break). After doing the last changes, can you squash your commits before I merge? Thanks.\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-07-06T21:59:54Z\n\n@fabpot I rebased the PR, added the authors and also ported the fix that was done in 8ffaafa86741a03ecb2f91e3d67802f4c6baf36b to be contained in the default success handler. I also squashed all the CS and 'small blabla fix' commits. Is it ok now?\n\nEdit: travisbot will probably say that the tests in this PR fail, but that is because current master fails on form things\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-07-08T18:53:05Z\n\nI rebased the PR, tests are green now: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=refactor-authentication-success-handling)](http://travis-ci.org/asm89/symfony).",
            "fixed CS",
            "merged branch asm89/patch-2 (PR #3521)\n\nCommits\n-------\n\n9fbb9b0 Fix small typos in IcuResFileDumper\n\nDiscussion\n----------\n\nFix small typos in IcuResFileDumper",
            "merged branch fabpot/classloader-optim (PR #4729)\n\nCommits\n-------\n\n3f9e8ff [ClassLoader] made ClassCollectionLoader::load() automatically include class dependencies\n6f4d281 [ClassLoader] added missing support for PHP 5.4 traits\n\nDiscussion\n----------\n\nClassloader optimization\n\nThe first commit fixes support for PHP 5.4 trait.\n\nThe second one does several things:\n\n * it optimizes the recent merge so that the reflection class instance is only loaded once;\n * we use the fact that we now get all class dependencies to automatically add all class dependencies to the map.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-03T17:26:46Z\n\nI've updated to take into accounts traits.\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-04T11:58:57Z\n\ngreat job :+1:\n\nI can't see it in the diff as this part hasn't changed, but somewhere in the autoReload block there is :\n```\nif ($meta[1] != $classes) {\n    $reload = true;\n}\n```\n\nIt should be array_unique($classes), otherwise the file would be perpetually regenerated in autoReload mode when the input contains duplicate, because they're implicitely removed when dumping the files.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-04T13:20:04Z\n\n@bamarni I've added an `array_unique` call at the top (this bug existed before by the way).",
            "merged branch Tobion/patch-3 (PR #4720)\n\nCommits\n-------\n\n51b610f [Profiler] fix typehint\n\nDiscussion\n----------\n\n[Profiler] fix typehint\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-03T10:23:25Z\n\nThe profiler only works with Twig anyway.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-07-03T10:29:18Z\n\nRight. But why does he have this error: https://github.com/symfony/symfony/commit/f47b9a6625fdb8160d476f6c18f83249021fe57a#commitcomment-1532164\n\nAnd since the class only uses methods of the general interface, I thought this makes it more reliable.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-03T10:37:26Z\n\nIt was unrelated and I fixed that problem already.",
            "[ClassLoader] made ClassCollectionLoader::load() automatically include class dependencies",
            "merged branch vicb/auto_start (PR #4724)\n\nCommits\n-------\n\nc5470b0 [Session] Removes references to the deprecated 'auto_start' setting\n\nDiscussion\n----------\n\n[Session] Removes references to the deprecated 'auto_start' setting\n\nfix #4721",
            "merged branch bamarni/compile-classes (PR #4694)\n\nCommits\n-------\n\n26a1e0b [ClassLoader] ordered ClassCollectionLoader writing to avoid redeclaration at runtime\n\nDiscussion\n----------\n\n[HttpKernel] allowed classes to compile to be prepended\n\nI had an issue when registering JMSDIExtraBundle before the frameworkBundle, because the bundle is adding a class to compile wich extends a class to compile added by the frameworkbundle (https://github.com/schmittjoh/JMSDiExtraBundle/blob/master/HttpKernel/ControllerResolver.php#L39).\n\nIn my kernel, the bundle was registered before the frameworkbundle, if it's the case, the class is writed before the symfony core class in the cache file, so it will trigger the autoloader to load the symfony core class, then we'll have a fatal error because we're declaring 2 times the same class.\n\nI'm suggesting to add a way to prepend the classes to compile added by an extension, this way we could force classes from the core bundle to pe prepended, and avoid this kind of error with other bundles adding classes extending core classes or implementing core interface. I've also added it to the frameworkbundle.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-07-01T12:32:28Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1750090) (merged a989d35c into a1b73887).\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-01T12:45:46Z\n\nThis doesn't sound really failure proof, better would be to resolve the compiled classes in a way that handles the dependencies gracefully regardless of the order that they are registered in.\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-01T13:03:15Z\n\nyes that would be much cleaner, even if it's not perfect, I don't have any other examples, but I think in most of situations this error happens because of the frameworkbundle late registration?\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-01T23:07:24Z\n\nI've added an automatic reordering as suggested. Now I don't get the error whatever the order of FrameworkBundle and JMSDIExtraBundle is.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-02T10:02:33Z\n\nDoes the algo really works ?\n\nLet's say I have the following hierarchy `A < B < C` and the classes added in the following order; `C, B, A`. I believe that the algo would return `B, A, C` instead of `A, B, C`.\n\nAn other question: should the dependency resolution be implemented in the `ClassCollectionLoader` rather than in the compiler pass ?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-02T10:23:11Z\n\n @bamarni could you confirm the issue with the algo ? If it is confirmed, do you have time to work on a fix ?\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-02T11:05:53Z\n\nthe algo looks correct, there is a loop checking dependencies and appending the parent classes at the begining so it should also work with A > B > C, but I'll check and add a unit test.\n\nYou're right about the location it could belong there if we want a general fix, should I put it in the ClassLoader component?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-02T11:28:14Z\n\nYep please move the code to the ClassLoader.\n\nYou could also add some cache mechanism:\n- ReflectionClass could be cached (they might be use mulitple times when some dependencies exist and are also used by the class loader)\n- May be you could also cache the hierarchy of the classes\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-02T17:25:08Z\n\n@vicb : indeed there were something wrong with the algo when it needed to handle more than 1 level of dependency, it's fixed, I've added a few test case and it passes.\n\nCaching the dependencies found with reflection would be useful if people are dumping several files with some similar classes in the same process, but I don't see why we would need to cache the hierarchy?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-02T18:29:06Z\n\n@bamarni I was referring to a local cache (ie local variable).\n\n- On the first iteration, the code instantiate a reflection class,\n- On other iteration you would instantiate again a reflection class for a subset of the classes\n- ...\n- In the end the former code instantiate again a reflection class for each class in order to get the file name, ...\n\nI was also thinking of an other algo: count the number of parent classes for each classes to include and order classes according to this number. This would be a single loop only, what do you think ?\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-02T19:32:34Z\n\nhum good idea counting the parents is cleaner, even though it looks enough, would it also make sense to treat interfaces and classes separately? I'm thinking about a file with all the interfaces at the begining (ordered by number of parents desc), then the classes would be appended (ordered by number of parents desc too).\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-07-03T07:05:07Z\n\nThere is no real benefit in making the interfaces appear first but you can do it if it doesn't make the code more complex.\n\nPlease also add the `@throws` annotation to the methods.\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-03T09:37:28Z\n\n@vicb : I've changed it to use the parents count, looks good to me.\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-03T12:23:46Z\n\nchanged\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-07-03T12:42:29Z\n\nfixed",
            "merged branch shieldo/patch-7 (PR #4741)\n\nCommits\n-------\n\n6751c87 [Profiler] fixed a couple of minor typos in a test\n\nDiscussion\n----------\n\n[Profiler] fixed a couple of minor typos in a test",
            "[ClassLoader] added missing support for PHP 5.4 traits",
            "merged branch Tobion/encode-rel-path (PR #4722)\n\nCommits\n-------\n\n5c6f848 [Routing] use faster approach for encoding rel segments\n25d326b [Routing] fix encoding of path segments '.' and '..'\n\nDiscussion\n----------\n\n[Routing] fix encoding of path segments '.' and '..'\n\n#4559 for master",
            "merged branch Tobion/4166 (PR #4530)\n\nCommits\n-------\n\n3466896 [Routing] fix encoding of static static, so UrlGenerator produces valid URLs\n\nDiscussion\n----------\n\n[Routing] fix encoding of static text\n\nFixes #4166\n\nAs requested by Fabien, I split #4205 into multiple PRs.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T12:49:32Z\n\ngithub tells me this PR cannot be merged automatically. Could you rebase it ?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-06-09T13:12:55Z\n\nDone\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T13:18:18Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1576266) (merged 3466896a into 15b5aa4f).",
            "merged branch fabpot/charset-fix (PR #4716)\n\nCommits\n-------\n\nd9439ab made the charset overridable (closes #2072)\n\nDiscussion\n----------\n\nmade the charset overridable (closes #2072)\n\nThe charset was configurable in a configuration file but it never worked:\n\n    framework:\n        charset: ISO-8859-1\n\nNow, like for the cache and log dirs, you can configure the charset by\noverriding the getCharset() method in the app kernel:\n\n    public function getCharset()\n    {\n        return 'ISO-8859-1';\n    }\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-03T07:26:04Z\n\nSee #2072 for the previous attempts to fix this issue.",
            "made the charset overridable (closes #2072)\n\nThe charset was configurable in a configuration file but it never worked:\n\n    framework:\n        charset: ISO-8859-1\n\nNow, like for the cache and log dirs, you can configure the charset by\noverriding the getCharset() method in the app kernel:\n\n    public function getCharset()\n    {\n        return 'ISO-8859-1';\n    }",
            "merged branch fabpot/locale-listener (PR #4692)\n\nCommits\n-------\n\n88caf3a [HttpKernel] removed the storage of the current locale in the session\n\nDiscussion\n----------\n\n[HttpKernel] removed the storage of the current locale in the session\n\nBefore this commit, the current locale was stored in the session (if one\nwas already started). That way, for the next requests, even if the\nrequest locale attribute was not set, the locale was  restored .\n\nBut this is a really bad practice as it means that the same URL can have\na different content depending on the previous requests. It would have\nbeen better if the Vary header was set but the locale can be different\nfrom the value coming from the Accept-Language anyway.\n\nThis is a BC break but fortunately, you can restore the 2.0 behavior by\ncreating a simple event listener that contains the logic removed by this\ncommit.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-07-01T06:56:48Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1748659) (merged 009e30f0 into 2e356c1a).\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-01T08:15:46Z\n\nHow about using a cookie instead? It would remove the BC break, and also be possible to use a vary header?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-01T09:13:44Z\n\nThe goal is to make Symfony as stateless as possible; introducing a cookie would defeat this goal.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-07-01T09:19:37Z\n\n@fabpot - thank you for bringing this to attention. I was meaning to do it a long time ago. The requested language is entirely a per request issue and must always be so. URLs must only ever return one content, and not multiple (e.g. different languages). The correct way to behave is to detect the language based on URL and failing that where a language is not requested, to look at the preferred language from the browser request and if available it can be redirected to that resource (e.g. /fr). This is what we do in Zikula. We have a further session based setting for  preferred language  which if set will override the browser default.\n\nIn summary:\n\n1. If the language is specified in the GET request, return that language always. E.g. domain.com/fr/foo should return a French version of foo\n\n2. If no language is specified in the GET request: first check the session for a preferred language, otherwise check the browser string for the preferred language and then if necessary, redirect to that resource. We have a setting which additionally say  always have language in URL, and don't put language code in URL for default language \n\nThis means what in Zikula we only ever have one URL per language version of a page, but it still allows for users to set their preferred language which is taken in to account mainly when they visit the homepage (but in fact any page without a specific language in the request).\n\n---------------------------------------------------------------------------\n\nby drak at 2012-07-01T09:38:06Z\n\n+1 on this PR. Basically the request locale should be in the Request object and calculated according to the applications preferences.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-01T12:38:25Z\n\nI agree that content must be detected based on the request, but I strongly disagree with relying entirely on the URL.\n\n@fabpot, if you think about it using a cookie would still be stateless. There would be no state whatsoever, the detection would be entirely based on the request. Whether the language information is transmitted in the URL or as part of request headers is for the developer to decide eventually, at least IMO. My suggestion would just provide a default which is more BC.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-07-01T20:08:50Z\n\n@schmittjoh it's not entirely from the URL, there are browser preferences and also user defaults ca nalso available but the latter is slightly higher level. IMO it's not really Symfony's job here, it's application level specific. We have a pretty good working example of that in Zikula. Anyone can easily implement your own requirements with a listener.\n\nWhat is absolutely clear however is it is wrong for one URL to deliver more than one version of any content.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-07-01T21:16:52Z\n\nI'm 100% for this change. My suggestion would just be more BC while still keeping Symfony2 stateless. Of course, it can be easily implemented in userland if we do not care about BC here.\n\nRegarding different URLs per content, I do not think that this is our decision to make. Generally, developers should be able to make whatever content negotation they see fit. Whether they rely solely on the URL, or also take other request headers into account should not be limited by Symfony2.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-02T10:37:26Z\n\nI've added a paragraph in the UPGRADE file with a listener example that can be used to keep BC.",
            "[Security] updated CHANGELOG",
            "merged branch uwej711/security_target_path_master (PR #4409)\n\nCommits\n-------\n\n8ffaafa Make the session entry for the target url firewall dependent.\n\nDiscussion\n----------\n\n[Security] Make the session entry for the target url firewall dependent.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets:\nLicense of the code: MIT\n\nIf there are two firewalls (eg. main and admin), calling an protected admin url\nwill direct you to the login form of the admin. If I ignore this and go to the login\nform of the main firewall directly I will end up being redirected to the stored\nadmin target url, which will lead me to the admin login form again.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T09:33:44Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1431566) (merged 8ffaafa8 into 45849ce3).\n\n---------------------------------------------------------------------------\n\nby uwej711 at 2012-06-09T08:05:54Z\n\nDoesn't this make sense or did this slip through? Or is there something missing?",
            "[WebProfilerBundle] tweaked previous merge",
            "[HttpKernel] removed the storage of the current locale in the session\n\nBefore this commit, the current locale was stored in the session (if one\nwas already started). That way, for the next requests, even if the\nrequest locale attribute was not set, the locale was  restored .\n\nBut this is a really bad practice as it means that the same URL can have\na different content depending on the previous requests. It would have\nbeen better if the Vary header was set but the locale can be different\nfrom the value coming from the Accept-Language anyway.\n\nThis is a BC break but fortunately, you can restore the 2.0 behavior by\ncreating a simple event listener that contains the logic removed by this\ncommit.",
            "merged branch Partugal/parameterBag (PR #4468)\n\nCommits\n-------\n\n1227cc2 add escapeValue to ParameterBagInterface\n\nDiscussion\n----------\n\nadd escapeValue to ParameterBagInterface\n\n#4465\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-30T18:01:47Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1479725) (merged 1227cc2a into 49e213ce).\n\n---------------------------------------------------------------------------\n\nby drak at 2012-05-31T02:42:44Z\n\n@bschussek - there are a few form tests failing that seem to have been merged into master and thus all other unrelated PRs are failing their travis build checks. @fabpot",
            "[Yaml] fixed parsing when a mapping is mixed within a sequence and vice-versa (closes #4634)",
            "merged branch wodor/profiler_rely_on_profile_3372 (PR #3373)\n\nCommits\n-------\n\n1472283 fixed CS\nbc73487 renamed template to TemplateManager , moved profiler to the deps of manager\n5fd6ed6 properties protected\nabd0eb7 generating template names moved out from controller  to another class\n6138e80 [Profiler] relying on config of displayed profile  instead of current config.\n\nDiscussion\n----------\n\n[2.2][Profiler] relying on config of displayed profile  instead of current config\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: code of ProfilerController is not covered by any test\nFixes the following tickets: #3372\nTodo: ~\n\nThis fixes the exception which is raised when viewed profile has other  data collectors than in config of currently run profiler.\nexplained here\nhttps://github.com/symfony/symfony/issues/3372\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-02-16T06:11:00Z\n\nThis should probably be done on the 2.0 branch. Also, I think we need to check if the panel is actually available in the current profiler (if not, we won't be able to display it anyway). So, both checks are important.\n\n---------------------------------------------------------------------------\n\nby wodor at 2012-02-18T10:15:40Z\n\ndefects mentioned by Stof are fixed",
            "[HttpKernel] added some unit tests",
            "added Request::getSchemeAndHttpHost() and Request::getUserInfo() (closes #4312, refs #3416, refs #3056)",
            "merged branch albyrock87/master (PR #4662)\n\nCommits\n-------\n\n4d0cfbb Fix Italian translations in Validator\n\nDiscussion\n----------\n\nFix Italian translation in Validator\n\nI hope this time it'll work!\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-26T11:08:19Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1709695) (merged 4d0cfbb6 into 42212394).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-26T15:17:30Z\n\nThat's weird. It still does not appear on your account: https://github.com/albyrock87/symfony is a 404.\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-06-26T15:20:51Z\n\nhe renamed the repository instead i think https://github.com/albyrock87/symfony-fix-form-validation-italian",
            "Revert  merged branch everzet/config-additions-from-rw (PR #4619) \n\nThis reverts commit 041286e6011f2bfbf4c39c9d64f97f6c50e88974, reversing\nchanges made to 4c8ea3181db3a7ca111a1bfe9428b9f8f2739238.",
            "updated VERSION for 2.1.0",
            "[Security] removed test that fail on PHP 5.3.3",
            "merged branch jcowgill/console-windows-fix (PR #4594)\n\nCommits\n-------\n\nbb87a71 [Console] Use 'mode' command to detect terminal size on Windows\n\nDiscussion\n----------\n\n[Console] Use 'mode' command to detect terminal size on Windows\n\nThis PR uses the windows 'mode' command to get the terminal height and width on windows.\n\nI've left in the ANSICON stuff but I'm not sure if that's needed after this.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-16T10:37:25Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1634120) (merged a490b6ec into f881d282).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-16T16:17:24Z\n\nping @Seldaek\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-06-16T17:03:22Z\n\nIt's a good addition, but you should still use ANSICON first if it's available. mode returns the buffer size and not the window size, which means the lines are not the real terminal height, but the buffer setting. ANSICON has both informations and hence allows you to be more correct. For columns/width both offer equally good information since the buffer size is not bigger than the window.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-17T10:41:21Z\n\nCan you squash your commits before I merge? Thanks.\n\n---------------------------------------------------------------------------\n\nby jcowgill at 2012-06-17T13:23:01Z\n\nYes that's fine.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-18T12:04:43Z\n\n@jcowgill there are still 3 commits.\n\n---------------------------------------------------------------------------\n\nby jcowgill at 2012-06-18T14:59:51Z\n\nWoops, it's done now",
            "merged branch aerialls/fs_exists (PR #4586)\n\nCommits\n-------\n\n38cad9d [Filesystem] added exists method\n\nDiscussion\n----------\n\n[Filesystem] added exists method\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets:\nTodo:\nLicense of the code: MIT\nDocumentation PR:\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-15T16:29:20Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1629204) (merged ebd1a4c6 into f881d282).\n\n---------------------------------------------------------------------------\n\nby sstok at 2012-06-16T09:05:48Z\n\nShouldn't it be better to stop on the first failure? as all the others files will be false automatically.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-16T10:21:49Z\n\nindeed. We should avoid unnecessary filesystem IO by returning false as soon as it is known\n\n---------------------------------------------------------------------------\n\nby aerialls at 2012-06-16T11:55:24Z\n\nIndeed it's better this way. fixed!\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-16T12:01:16Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1634615) (merged 8d98f417 into 76b2ed46).",
            "merged branch shieldo/fix_docblock_typo (PR #4590)\n\nCommits\n-------\n\nbfe5e58 [Form] fixed typo in docblock\n\nDiscussion\n----------\n\n[Form] fixed typo in docblock\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-15T20:03:08Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1630865) (merged bfe5e585 into f881d282).",
            "moved validator translation files to the Form and Validator components to make them reusable (closes #4588)",
            "[Validator] avoid to get information from the cache when we already have them locally (also fixes usage of this class when not using a cache)",
            "[Security] fixed some unit tests for PHP 5.3.3 (see https://bugs.php.net/bug.php?id=53727)",
            "merged branch shieldo/fix_docblock (PR #4579)\n\nCommits\n-------\n\n9e71b42 [Validator] fixed typo in docblock\n\nDiscussion\n----------\n\n[Validator] fixed typo in docblock",
            "merged branch Burgov/enhance_form_error_message (PR #4557)\n\nCommits\n-------\n\nb5cf337 [Form] Enhanced the form error message\n\nDiscussion\n----------\n\n[Form] Enhanced the form error message\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThe error message on type mismatch is a bit obscure:\n\nThe form's view data is expected to be an instance of class Samson\\Bundle\\TRSBundle\\Entity\\Labour, but has the type object. You can avoid this error by setting the  data_class  option to null or by adding a view transformer that transforms object to Samson\\Bundle\\TRSBundle\\Entity\\Labour.\n\nThis commit changes it to:\n\nThe form's view data is expected to be an instance of class Samson\\Bundle\\TRSBundle\\Entity\\Labour, but is an instance of class Closure. You can avoid this error by setting the  data_class  option to null or by adding a view transformer that transforms an instance of Closure to an instance of class Samson\\Bundle\\TRSBundle\\Entity\\Labour.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-12T14:04:08Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1601478) (merged 70a15df6 into 77839690).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-12T14:06:31Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1601507) (merged 12ec4dbd into 77839690).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-12T14:13:09Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1601517) (merged b5cf337c into 77839690).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-06-12T18:21:31Z\n\n:+1: Thanks!",
            "merged branch Burgov/builder_getparent_call_fix (PR #4556)\n\nCommits\n-------\n\n1e83206 [Form] FormBuilderInterface->getParent() doesn't take any arguments (anymore)\n\nDiscussion\n----------\n\n[Form] FormBuilderInterface->getParent() doesn't take any arguments (anymore)\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-12T13:43:25Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1601018) (merged 9826ca66 into 77839690).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-12T13:51:33Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1601030) (merged 1e83206e into 77839690).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-06-12T18:21:56Z\n\n:+1: Thanks again! :)",
            "merged branch symfony/domcrawler-encoding (PR #4214)\n\nCommits\n-------\n\nc9ebe67 [DomCrawler] fixed encoding when using addHtmlContent() (fixes #3881)\n\nDiscussion\n----------\n\n[DomCrawler] fixed encoding when using addHtmlContent() (fixes #3881)\n\nAfter looking around, this is clear that loadHtml() resets the encoding set on the DomDocument instance. So, the only workaround that actually works (and which is not an ugly hack) is to use `mb_convert_encoding` when it exists.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-05-07T12:38:43Z\n\n+1 (Side note: Using your fork of symfony for PRs would be good I think, otherwise it creates noisy versions on packagist.)",
            "merged branch stloyd/framework_session_fix (PR #4460)\n\nCommits\n-------\n\n2e299aa [FrameworkBundle] Sync with latest changes in session handlers\n\nDiscussion\n----------\n\n[FrameworkBundle] Sync with latest changes in session handlers\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4458\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-30T10:12:54Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1475863) (merged 2e299aa8 into f5355f60).",
            "merged 2.0",
            "merged branch ruian/fix_cs_docblock (PR #4466)\n\nCommits\n-------\n\n26f5ac4 Fix CS phpdoc FormConfigEditorInterface\n\nDiscussion\n----------\n\nFix CS phpdoc FormConfigEditorInterface\n\nJust a CS fixer",
            "merged branch frosas/patch-1 (PR #4469)\n\nCommits\n-------\n\nd55f7ed MethodNotImplementedException -> MethodArgumentValueNotImplementedException\ncea6489 Accept calling setLenient(false)\n\nDiscussion\n----------\n\nAvoid IntlDateFormatter::setLenient(false) to throw an exception\n\nRight now it is breaking because the changes introduced here:\n\nhttps://github.com/symfony/symfony/commit/f541844c781309b63d899f82525c93731c4c2fef\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-31T01:35:44Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1483621) (merged cea6489d into 49e213ce).",
            "merged branch nomack84/rename_form_methods (PR #4473)\n\nCommits\n-------\n\ncbc9944 [Bridge][Form] Rename some deprecated methods\n\nDiscussion\n----------\n\n[Bridge][Form] Rename some deprecated methods\n\nThis pull request is for renaming some deprecated Form's methods from the Bridge namespace.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-31T12:20:59Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1486874) (merged cbc99442 into 78747e6c).\n\n---------------------------------------------------------------------------\n\nby nomack84 at 2012-05-31T12:27:29Z\n\nThe fail is not my fault.",
            "merged branch neilferreira/master (PR #4472)\n\nCommits\n-------\n\n85db221 Since getClientIp() no longer takes a parameter, removed that old test\n7b5328f getClientIp() will now only return valid IP addresses, rather than assuming the X_FORWARDED_FOR is the first comma seperated value.\n\nDiscussion\n----------\n\ngetClientIp() will now only return valid IP addresses, rather than assuming the X_FORWARDED_FOR is the first comma seperated value.\n\nFixes #4471\n\nI'm not sure why an empty string was being returned in the first place, rather than null.  Any ideas?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-31T08:59:12Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1485615) (merged 68c17e07 into 78747e6c).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-31T09:02:57Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1485634) (merged 9c1ba1c4 into 78747e6c).\n\n---------------------------------------------------------------------------\n\nby neilferreira at 2012-05-31T09:04:16Z\n\nSorted, I'm guessing I need to squash the commits?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-31T09:21:30Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1485732) (merged 7b5328f1 into 78747e6c).\n\n---------------------------------------------------------------------------\n\nby igorw at 2012-05-31T09:38:07Z\n\nWith what value did it fail? Can you add a test case for that `HTTP_X_FORWARDED_FOR ` value?\n\n---------------------------------------------------------------------------\n\nby neilferreira at 2012-05-31T10:45:11Z\n\nAnyone have any idea why that function returns an empty string instead of null ?\n\n---------------------------------------------------------------------------\n\nby neilferreira at 2012-05-31T11:34:12Z\n\n@igorw done, I've also removed an old test that should have been removed when getClientIp() started using the 'trust proxy' variable concept.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-31T11:38:19Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1486534) (merged 85db2213 into 78747e6c).",
            "Revert  merged branch nomack84/rename_form_methods (PR #4473) \n\nThis reverts commit 136b7868f7dfbb5108a3d60aec726950d3430091, reversing\nchanges made to 78747e6cc5f6d65c27bd315b5627d9265af332f2.",
            "merged branch niklasf/html-safe-json-response (PR #4510)\n\nCommits\n-------\n\n5c2fbfa [HttpFoundation] Make JsonResponse HTML safe.\n\nDiscussion\n----------\n\n[HttpFoundation] Make JsonResponse HTML safe.\n\nAfter porting Drupal 8 to the HTTP Kernel, we noticed regressions on our JSON responses.\n\nThe original issue was http://drupal.org/node/479368. To summarize that:\n- Doing the changes in this pull requests is backwarts compatible, because >>As RFC4627-2.5 clearly states that  Any character *may* be escaped , we can avoid special treatment of characters ',  , <, > and & by an HTML parser through simple substitution with a Unicode escape sequence (\\uXXXX).<<\n- A number of characters MUST be escaped for the JSON parser. These are:  , \\, U+0000 - U+001F\n\nSince PHP 5.3 we can simply get RFC compliant safe JSON by passing a few flags to json_encode().\n\nCurrent issue: http://drupal.org/node/1619446.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-07T14:49:12Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1558213) (merged 1200e27d into 1541fe26).\n\n---------------------------------------------------------------------------\n\nby sun at 2012-06-07T15:33:44Z\n\nIt would be a good idea to add an inline comment to explain what is being done; e.g.:\n\n`// Encode <, >, ', &, and   for RFC4627-compliant JSON, which may also be embedded into HTML.`\n\n---------------------------------------------------------------------------\n\nby niklasf at 2012-06-07T15:41:24Z\n\nThanks, @sun. Pushed.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-07T15:50:25Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1558974) (merged 5c2fbfab into 1541fe26).",
            "merged branch alexandresalome/feat-profiler-view-all (PR #4506)\n\nCommits\n-------\n\n4d29c75 [WebProfilerBundle] Add a button  View all  in top of the page\n\nDiscussion\n----------\n\n[WebProfilerBundle] Add a button  View all  in top of the page\n\nThis is a link in the toolbar to search for last queries. This actions is\noften achieved and having a link in top of the page to reach the 10 last\nqueries seems useful.\n\nView on Twitpic: http://twitpic.com/9ti0yx\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-06T20:04:49Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1550622) (merged 4d29c755 into 1541fe26).\n\n---------------------------------------------------------------------------\n\nby nomack84 at 2012-06-06T20:36:10Z\n\n+1",
            "merged branch jfsimon/issue-4495 (PR #4496)\n\nCommits\n-------\n\n5f328de [console] Fixed docblock.\nc80e156 [console] Added style stack getter in formatter.\n0ae5a45 [console] Removed hardcoded empty style from styles stack.\n\nDiscussion\n----------\n\n[console] Removed hardcoded style formatter from style stack.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThis PR make it possible to replace OutputFormatter again.\nFixes issue #4495.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-06T15:29:44Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1531654) (merged c80e156f into 1541fe26).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-06T15:29:53Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1533586) (merged 5f328dee into 1541fe26).",
            "merged branch Ph3nol/ph3-routing-component-fixes (PR #4486)\n\nCommits\n-------\n\na6d32de UrlMatcher class indent and doc fixes\n\nDiscussion\n----------\n\n[Routing] PHP CS and doc minor fixes\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-02T12:03:36Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1507232) (merged a6d32de1 into 1541fe26).",
            "merged branch shiroyuki/master (PR #4481)\n\nCommits\n-------\n\n06cc9ff Adjust the width of the timeline in the profiler dynamically when the (browser) window is resized.\n\nDiscussion\n----------\n\nAdjust the width of the timeline in the profiler dynamically when the (browser) window is resized.\n\n(Rework of [PR 4476](https://github.com/symfony/symfony/pull/4476))\n\nInstead of making the developer to resize the width of the visual presentation of the timeline in the profile manually, this change is to make the profiler adjust the width of the timeline dynamically when the (browser) window is resized.\n\nAlso, this change introduce the cleaner HTML/JavaScript code and URL as the result of:\n\n* the removal of 'width' from the query string as the width is now controlled by JavaScript.\nthe removal of 'threshold' from the query string as the threshold is now passed between pages via HTML5 LocalStorage.\n* Please note that at the time of submitting the pull request, GitHub didn't pick up some commits to deal with the trailing white spaces.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-01T18:30:49Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1501464) (merged 06cc9ff3 into 1541fe26).",
            "merged branch alexandresalome/twig-linter-context (PR #4452)\n\nCommits\n-------\n\ndf5590e [TwigBundle] Fix return code in LintComand\n604a79a [TwigBundle] Fix line start in twig:lint command\n91936b5 [TwigBundle] Fancy output for twig:lint\n\nDiscussion\n----------\n\n[TwigBundle] Fancy output for twig:lint\n\nPrevious PR : #3804\n\n@marcw @fabpot Since no exception is raised, the return code is always 0. Do I add ``return rand(64, 113)`` ?\n\nScreenshot : http://twitpic.com/9qql09\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-29T21:18:33Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1470256) (merged 91936b53 into adf07f1e).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-29T21:21:54Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1470353) (merged 604a79ab into adf07f1e).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-30T16:45:24Z\n\n@alexandresalome just return 1 in case of a problem.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-06T20:06:04Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1550631) (merged df5590ec into adf07f1e).",
            "merged branch rowanmanning/ticket_4516 (PR #4517)\n\nCommits\n-------\n\n326991b Reset image styling for the web-profiler toolbar\n\nDiscussion\n----------\n\nReset image styling for the web-profiler toolbar\n\nThis fixes the issue #4516 by resetting image styling to browser defaults, which is what the toolbar expects.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: n/a\nFixes the following tickets: #4516\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-08T11:34:36Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1565938) (merged 326991bd into f8e68e58).",
            "[HttpFoundation] added some unit tests (refs #4510)",
            "merged branch kriswallsmith/console-visibility (PR #4526)\n\nCommits\n-------\n\nd13dce0 [Console] reduced visibility to protected\n\nDiscussion\n----------\n\n[Console] reduced visibility to protected\n\nThis is an internal method and should be cast as such.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-08T21:27:13Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1571579) (merged d13dce06 into b84b46ba).",
            "merged branch paul-matthews/master (PR #4042)\n\nCommits\n-------\n\n478227d Fixed quoting issues with Yaml Inline Parser\n\nDiscussion\n----------\n\n[Yaml] fix parsing quotes problem\n\nAdded some basic checking for quotes on their own within strings. Used single quote ' followed by  ,  and  :  to denote the end of the current string to test.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4021\nTodo: N/A\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-07T09:22:56Z\n\nAfter doing the requested changes, can you squash your commits? Thanks.\n\n---------------------------------------------------------------------------\n\nby paul-matthews at 2012-05-09T13:29:45Z\n\nResolved and squashed\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T13:30:30Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1285048) (merged 5ce6d4e1 into 6c714095).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T13:31:06Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1285057) (merged 3592fcec into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T13:33:40Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1285094) (merged e209f786 into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T13:37:42Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1285153) (merged 0967b513 into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-09T14:00:29Z\n\nIt looks like that another commit is in your PR that should not be there.\n\n---------------------------------------------------------------------------\n\nby paul-matthews at 2012-05-09T15:52:35Z\n\nRight-o will remove\n\n---------------------------------------------------------------------------\n\nby paul-matthews at 2012-05-09T15:54:15Z\n\nresolved\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T15:57:15Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1286339) (merged fc276209 into e66a0bb3).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-10T05:20:18Z\n\nApparently, some tests do not pass anymore after the patch. Can you have a look at them? Thanks.\n\n---------------------------------------------------------------------------\n\nby paul-matthews at 2012-05-10T11:20:45Z\n\nSure - looking into it.\n\n---------------------------------------------------------------------------\n\nby paul-matthews at 2012-05-10T17:55:53Z\n\nI believe that's fixed.\n\nThe entire suite works locally now.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T17:55:54Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1297641) (merged 884c02ed into fae4523f).\n\n---------------------------------------------------------------------------\n\nby paul-matthews at 2012-05-10T17:57:03Z\n\nUnsure why travis fails.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T18:00:28Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1297650) (merged 478227d9 into fae4523f).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T13:24:52Z\n\n@fabpot :+1:",
            "merged branch greg0ire/position_switching (PR #4533)\n\nCommits\n-------\n\nf541a54 [Form] implement force append / prepend\n\nDiscussion\n----------\n\nimplement force append / prepend\n\nSee #4494 and #4473\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T12:33:07Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1575997) (merged b0ed9b26 into 3bb7dc0b).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T12:53:29Z\n\n@fabpot :+1: for me.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T12:57:54Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1576150) (merged 5e45b5d3 into 3bb7dc0b).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T13:41:05Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1576322) (merged d51c5437 into 3bb7dc0b).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-09T14:47:37Z\n\nCan you add a mention in the CHANGELOG please?\n\n---------------------------------------------------------------------------\n\nby greg0ire at 2012-06-09T14:58:25Z\n\nCouldn't find anything relevant to update in the CHANGELOG of the form component, but the UPGRADE file contains something I could update.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T15:06:27Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1576951) (merged 6b45ba66 into 3bb7dc0b).\n\n---------------------------------------------------------------------------\n\nby greg0ire at 2012-06-09T15:06:51Z\n\nSquashed all the commits into one.",
            "merged branch henrikbjorn/require-authentication (PR #4525)\n\nCommits\n-------\n\n6a01d3d [Security] Check post_only option and request method\n\nDiscussion\n----------\n\n[Security] Take `post_only` into consideration in requiresAuthentication\n\nChange requiresAuthentication to look at the `post_only` option. Fixes #4524\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-08T18:26:21Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1570033) (merged 6d799494 into b84b46ba).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T11:34:59Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1575681) (merged af676bb5 into b84b46ba).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T14:01:21Z\n\n@henrikbjorn could you squash the commit, or cherry-pick the third one so that it is the only one ? The reverted commit seems weird in the PR.\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-06-09T14:18:08Z\n\n@stof there. Actually it cannot be squashed. But maybe what i did was wrong.\n\n``` shell\ngit reset --hard b84b46ba1a4e1197d1e8874c395bcf661d52191d\ngit cherry-pick af676bb5d01f835b2f9913e129e6c6eb3320dd26\ngit push -f henrikbjorn require-authentication\n```\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T14:22:59Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1576658) (merged 6a01d3dd into 3bb7dc0b).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T14:39:25Z\n\n@fabpot :+1:",
            "merged branch jfsimon/issue-4475 (PR #4497)\n\nCommits\n-------\n\n06976fc Updated upgrade 2.1 file.\n110ccd8 [BrowserKit] Updated changelog.\n686854b [http kernel] Added client response type test.\nce7e1e6 [browser kit] Client now stores filtered response after request.\n\nDiscussion\n----------\n\n[browser kit] Client now stores filtered response after request.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes/no, choice is your\nSymfony2 tests pass: yes\n\n`Symfony\\Component\\HttpKernel\\Client::request()` method now returns a `Symfony\\Component\\BrowserKit\\Response` instance.\n\nFixes issue #4475.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-05T08:58:00Z\n\nThis *is* as BC break as it changes the class returned by the method, even if the BC break is a bugfix to respect the epxected behavior :)\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-06-05T09:05:32Z\n\n@stof you're right!\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-06T15:29:54Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1533533) (merged 686854b2 into 1541fe26).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T10:12:18Z\n\n@jfsimon can you add a note in the changelog of the component and in the upgrade file ?\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-06-09T10:51:00Z\n\n@stof done!\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T11:12:43Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1575524) (merged 06976fcd into 1541fe26).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T12:50:16Z\n\n@fabpot :+1:",
            "Revert  merged branch jfsimon/issue-4475 (PR #4497) \n\nThis reverts commit f8a09db5e2364d66465358fe393ce51b49b07144, reversing\nchanges made to ae2ec36e275d6b43c9d6d7b91b9611f10101df0e.",
            "merged branch niklasf/request-matcher-interface (PR #4363)\n\nCommits\n-------\n\n2277500 [Routing][HttpKernel] Add RequestMatcherInterface.\n\nDiscussion\n----------\n\n[Routing][HttpKernel] Add RequestMatcherInterface.\n\nFirst try at implementing #4351.\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T19:37:07Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1392716) (merged 457496db into ea33d4d3).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T19:47:51Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1392939) (merged 78effa98 into ea33d4d3).\n\n---------------------------------------------------------------------------\n\nby everzet at 2012-05-21T20:17:03Z\n\nNo tests?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T20:18:18Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1393392) (merged 6564fb6a into ea33d4d3).\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-05-21T20:35:14Z\n\nYou need to remove the type-hint from the constructor, and probably add an exception instead where the matching methods are called to ensure that either ``UrlMatcherInterface``, or ``RequestMatcherInterface`` were passed. Alternatively, you could also add such a check to the constructor.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-22T06:52:01Z\n\nrelated to symfony/symfony#4020\n\n---------------------------------------------------------------------------\n\nby niklasf at 2012-05-25T11:11:45Z\n\nReverted the changes to UrlMatcher.php.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-25T12:46:06Z\n\n@niklasf: it looks good now except for the listener constructor (see @schmittjoh suggestion above). Can you fix that and add some unit tests to ensure that everything works as expected? Thanks.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-25T12:52:59Z\n\nAnother solution could be to make the ``RequestMatcherInterface`` extend the ``MatcherInterface`` to keep the typehint in the constructor\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-25T13:52:26Z\n\nI thought about that as well, but that does not make sense.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-25T14:12:19Z\n\nWell, the RouterInterface extends UrlMatcherInterface anyway (and it should stay this way as it would be a huge BC break) so I guess most people will implement both interfaces when implementing the RquestMatcherInterface\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T15:26:22Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1433963) (merged 8f36204c into ff4d446c).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T15:33:13Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1433996) (merged 6d2f2cd9 into ff4d446c).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T15:39:01Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1434060) (merged 3c1d89e2 into ff4d446c).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T22:06:34Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1437398) (merged 3ab997c1 into ff4d446c).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T22:06:47Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1437385) (merged d8c0e387 into ff4d446c).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-26T06:41:31Z\n\nCan you add a note in the CHANGELOG of the component?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-26T08:12:40Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1440435) (merged c7458733 into 9e951991).\n\n---------------------------------------------------------------------------\n\nby niklasf at 2012-05-26T08:14:41Z\n\n@fabpot: Sorry, not sure how: Under 2.1.0 or in a new section? As the first or last entry of the list?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-26T10:20:23Z\n\n@niklasf the new interface should be mentioned in the changelog of the Routing component\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-26T10:30:06Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1440837) (merged 34ea86a9 into 9e951991).\n\n---------------------------------------------------------------------------\n\nby niklasf at 2012-06-02T15:27:01Z\n\nAh ... so there were two pitfalls:\n\n- PHPUnit clones the arguments of mocked functions. So they wouldn't equal.\n- createGetResponseEventForUri() disables routing on purpose. So not using that helper, now.\n\nTests should be passing.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-02T15:30:28Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1509054) (merged 7fab0118 into 1541fe26).",
            "merged branch dlsniper/wdt-session-metadata (PR #4428)\n\nCommits\n-------\n\n8dd2af7 Added Session Metadata info to the Request section of the WDT\n\nDiscussion\n----------\n\n[WebProfilerBundle] Added Session Metadata info to the Request section of the WDT\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/dlsniper/symfony.png?branch=wdt-session-metadata)](http://travis-ci.org/dlsniper/symfony)\nFixes the following tickets: #4181\nTodo: ~\nLicense of the code: MIT\nDocumentation PR: ~\n\nThis PR adds some session metadata available into the WDT (Created, Last used, Lifetime specifically).\nIf you'd like to see more info then let me know.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-26T21:11:56Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1443801) (merged 9b0b4383 into 9e951991).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-26T21:24:27Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1443856) (merged 31858319 into 9e951991).\n\n---------------------------------------------------------------------------\n\nby drak at 2012-05-27T00:48:37Z\n\nNice addition.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-05-31T21:21:37Z\n\n@drak While using this patch on a production application I've noticed that the `$request->hasSession()` section will fail to recognize that there's no session anymore in the app if I'm not using the auto-start feature. I'm using the latest master branch, updated today around 12:00 UTC. Clearly this is not the right place to discuss that there's a problem with ::hasSession() but I wanted to ask someone else for an opinion before creating the issue/fix for it.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T10:14:05Z\n\n@dlsniper create an ticket for it, and it will become the best place to discuss it :)\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-09T10:42:58Z\n\nOk, but then can this be merged meanwhile?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T10:58:39Z\n\n@fabpot  :+1:\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-09T17:36:24Z\n\nI've opened #4529 to address the issue seen in the comment.",
            "merged branch l3l0/add-options-resolver-test (PR #4545)\n\nCommits\n-------\n\n83ff200 [OptionsResolver] Added options resolver tests to improve coverage\n\nDiscussion\n----------\n\n[OptionsResolver] Added options resolver tests\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes [![Build Status](https://secure.travis-ci.org/l3l0/symfony.png?branch=add-options-resolver-test)](http://travis-ci.org/l3l0/symfony)\nLicense of the code: MIT\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-10T09:14:34Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1581756) (merged 320617b6 into 6266b72d).\n\n---------------------------------------------------------------------------\n\nby l3l0 at 2012-06-10T11:41:15Z\n\nFixed test names and replaced loop with iterator_to_array\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-10T11:44:49Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1582569) (merged 68588202 into 6266b72d).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-06-10T12:38:47Z\n\nCould you please also squash the commits into one and prefix the commit message with  [OptionsResolver] ?\n\n---------------------------------------------------------------------------\n\nby l3l0 at 2012-06-10T12:56:20Z\n\nCommits squashed\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-10T13:01:35Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1583038) (merged 83ff200e into 6266b72d).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-06-10T14:52:16Z\n\nThanks! @fabpot :+1:",
            "moved the Security Twig extension to the bridge",
            "[TwigBridge] updated composer file",
            "moved the UserPassword validator from the security bundle to the security component to make it reusable outside the full-stack framework",
            "merged branch sbusch/patch-1 (PR #3526)\n\nCommits\n-------\n\nafbb8f2 Fixed misleading help for  name  argument as search for services with wildcards is not implemented\n\nDiscussion\n----------\n\n[FrameworkBundle, Console] Changed help text for container:debug command\n\nFixed help for  name  argument as search for services with wildcards is not implemented in ContainerDebugCommand",
            "merged branch bamarni/master (PR #4153)\n\nCommits\n-------\n\na2b3d3c added cache service definition\n\nDiscussion\n----------\n\n[Doctrine Bridge] Added a method to load a cache definition\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nFollowing this discussion (https://github.com/doctrine/DoctrineBundle/pull/62), this will let DoctrineBundle, MongodbBundle and CouchdbBundle share the same code for cache definitions.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-04-30T06:56:49Z\n\n+1 for this PR.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-30T06:57:58Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-30T15:41:05Z\n\nCan you add a note abou this change in the CHANGELOG?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-30T15:46:48Z\n\ndoes it really need to be in the changelog ? End-users don't know about this at all. The only guys affected by this change are the maintainers of the different Doctrine bundles as they can remove some code now.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-30T16:41:21Z\n\n@stof: right\n\n@bamarni: Can you squash your commits?\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-04-30T17:03:38Z\n\n@fabpot : done\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-04-30T17:22:07Z\n\n@bamarni can you also do a patch for the docs after this gets merged so that people know about this change and know how to use it?\n\nThank you!\n\n---------------------------------------------------------------------------\n\nby bamarni at 2012-04-30T17:29:05Z\n\n@dlsniper : no problem ;)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-30T18:29:03Z\n\nping @beberlei",
            "[DependencyInjection] made a small cleanup",
            "[DependencyInjection] fixed anonymous services handling in XmlFileLoader\n\nPrevious to this commit, it was not possible to have anonymous services\nas arguments AND anonymous services in custom configs",
            "[DependencyInjection] added support for anonymous services as properties (closes #2964)",
            "[DomCrawler] converted all usage of filter() to filterXPath() in unit tests to be less dependent on CssSelector",
            "[DomCrawler] fixed encoding when using addHtmlContent() (fixes #3881)",
            "merged branch vicb/route_compiler (PR #4219)\n\nCommits\n-------\n\n9907df2 [Routing] Fix a regression introduced by #4170\n\nDiscussion\n----------\n\n[Routing] Fix a regression introduced by #4170\n\nSee https://github.com/symfony/symfony/commit/8232aa150b70572b1d378f202d886539946853a3#commitcomment-1300310\n\nLet's wait to confirm the fix is ok before merging\n\n@stephpy, @mvrhov ?\n\n(Travis is not ok since 5.3.3 is not supported).\n\n---------------------------------------------------------------------------\n\nby stephpy at 2012-05-07T16:17:44Z\n\nYes it's OK !\n\nThanks :)\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-07T16:20:38Z\n\nSo your originally proposed spec is not the same anymore.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-07T16:22:38Z\n\n@Tobion\n\n* fixed.\n* no it is not as it couldn't work in this case.",
            "merged branch shieldo/session_docblock_typos (PR #4216)\n\nCommits\n-------\n\n8ff11c1 [HttpFoundation] fixed docblock typos in session class\n\nDiscussion\n----------\n\n[HttpFoundation] fixed docblock typos in session class",
            "merged branch Seldaek/parambag (PR #4220)\n\nCommits\n-------\n\n3d9990a [DependencyInjection] Add ParameterBag::remove\n\nDiscussion\n----------\n\n[DependencyInjection] Add ParameterBag::remove",
            "raised the minimum version of Twig to 1.7",
            "removed 5.3.3 from Travis as it is not (yet) available",
            "merged branch gajdaw/2_1_component_yaml_fix_4022 (PR #4126)\n\nCommits\n-------\n\n80a2a92 [2.1][Component][Yaml] fix 4022\n\nDiscussion\n----------\n\n[2.1][Component][Yaml] fix 4022\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/gajdaw/symfony.png?branch=2_1_component_yaml_fix_4022)](http://travis-ci.org/gajdaw/symfony)\nFixes the following tickets: #4121, #4022, #4135\nTodo:\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-27T13:03:15Z\n\nWhy is it marked as ``[2.2]`` if it is a bugfix ?\n\n@fabpot ping\n\n---------------------------------------------------------------------------\n\nby gajdaw at 2012-04-27T14:42:21Z\n\nThe title should be [2.1] - now it is correct.\n\nI marked it 2.0 and PR was for 2.0 originally.\n\nFabien suggested that it should go to master branch: https://github.com/symfony/symfony/pull/4121#issuecomment-5362990\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-07T09:17:31Z\n\nThat does not work when you have something after the unindented collection:\n\n    collection:\n        key:\n        - a\n        - b\n        - c\n    foo: bar\n\n---------------------------------------------------------------------------\n\nby gajdaw at 2012-05-07T11:11:30Z\n\n@fabpot Last commit contains test with your yaml:\n\n    collection:\n        key:\n        - a\n        - b\n        - c\n    foo: bar\n\nEverything seems fine. Can you give me a hint: what do you mean, when you say  That does not work ?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-07T12:36:19Z\n\nSorry, the failing test is the following:\n\n    test: Key/value after unindented collection\n    brief: >\n        Key/value after unindented collection\n    yaml: |\n        collection:\n            key:\n            - a\n            - b\n            - c\n            foo: bar\n    php: |\n        array('collection' => array('key' => array('a', 'b', 'c'), 'foo' => 'bar'))\n\n---------------------------------------------------------------------------\n\nby gajdaw at 2012-05-07T15:48:26Z\n\n@fabpot Last commit passed your test.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-07T17:28:21Z\n\nCan you squash your commits? Thanks.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-08T05:32:58Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1273487) (merged 20891c58 into 919604ab).\n\n---------------------------------------------------------------------------\n\nby gajdaw at 2012-05-08T05:36:51Z\n\nDone.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-08T07:23:47Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1274162) (merged 80a2a92e into 898ff4e0).",
            "merged branch pgodel/patch-1 (PR #4238)\n\nCommits\n-------\n\n190024a Provide a clearer error message when message in trans tag is not a simple text.\n\nDiscussion\n----------\n\nClearer error message when message in trans tag is not a simple text\n\nProvide a clearer error message when message in trans tag is not a simple text.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T13:34:52Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1285069) (merged 190024ae into e54f4e46).",
            "merged branch shieldo/patch-4 (PR #4234)\n\nCommits\n-------\n\n8009675 [Validator] corrected small docblock typo\n\nDiscussion\n----------\n\n[Validator] corrected small docblock typo\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T10:30:15Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1284151) (merged 8009675d into e54f4e46).",
            "merged branch corphi/master (PR #4231)\n\nCommits\n-------\n\nbe35099 Replaced &raquo; and &nbsp; for XHTML compatibility\n0a0e74b Replaced &raquo; by &#187; (for XHTML compatibility)\n\nDiscussion\n----------\n\nChanges for XHTML compatibility\n\nWhen using Symfony in XHTML mode, some entities cause YSODs. These changes should prevent that.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-09T00:24:35Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1281344) (merged be350994 into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-09T00:46:19Z\n\n+1",
            "merged branch jakzal/UpgradeFix (PR #4229)\n\nCommits\n-------\n\n942cfc7 [Form] Removed index_generation mention from the UPGRADE instructions as the option no longer exists.\n\nDiscussion\n----------\n\n[Form] Removed index_generation mention from the UPGRADE instructions\n\nThe index_generation option no longer exists.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/jakzal/symfony.png?branch=UpgradeFix)](http://travis-ci.org/jakzal/symfony)\nFixes the following tickets: #4108\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-08T13:05:58Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1275789) (merged 942cfc7a into e54f4e46).",
            "[HttpKernel] added more fine-grained information about the version (the constant are named after the PHP ones)",
            "merged branch vicb/session_nnhandlers (PR #4227)\n\nCommits\n-------\n\n12e22c0 [Session] Memcache/d cleanup, test improvements\n788adfb [Session] Pdo Handler cleanup\n0216e05 [HttpFoundation][Session] Assume that memcache(d) instances are already configured\n72d21c6 [HttpFoundation][Session] change possible replace() & set() for set only()\n\nDiscussion\n----------\n\n[Session] Non-native Session handlers\n\nA few item to discuss. Needs @drak inputs.\n\n* 72d21c66 is trivial,\n* 0216e056 is about memcache(d) handlers\n    * I don't think the handlers should configure the memcache(d) instances. Those instances are injected into the storage so they should already be confidured (this will be done in the CacheBundle when available)\n    * A SW prefix has been added to the memcached handlers so that the same instance of memcached can be shared - you can still set the `Memcached::OPT_PREFIX_KEY` before injecting the memcached instance.\n    * It was not possible to use an expiration > 30days before, see [php.net](http://www.php.net/manual/en/memcached.expiration.php)\n* 788adfb6 is trivial (cleanup in the PDO handler)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-08T09:49:03Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1274808) (merged 788adfb6 into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby drak at 2012-05-09T15:20:38Z\n\nOverall this PR looks good to me. Since Memcache/d objects are passed by DI anyway, there is no need to provide a way to configure the objects here.\n\nHowever, I am not sure it's consistent to provide internal handling of the prefix/expire if we are saying the objects should be configured and injected - if we hand over all configuration to the injected objects, that's exactly what we should do. In the case of the `Memcache` handler there is no handling for prefix by the Memcache object that is why it's handled internally.\n\nUnless there are some other technical consideration I've missed, I would also not expect the same Memcache/d object to be used in all use cases (e.g. session storage and database caching layer).   I realise we are trying to unify things in one cache component, but I am not entirely convinced session storage would necessarily have to be part of that nor that  one object fits all  is practical or wise.\n\nAs far as I am aware, apart from default settings, memcache/memcached instances retain their own settings once configured so it's quite feasible to expect there might be a couple of differently configured instances in a complex system.\n\nIn summary, I would remove the `$memcachedOptions` config entirely from the `MemcachedHander` along with the associated prefix and time and let it all be configured by the injected `Memcached` instance.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T07:32:53Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1293064) (merged 12e22c0d into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-10T07:34:31Z\n\n@drak thanks for your feeback.\n\nAbout the prefix: it might be necessary to avoid collisions when you re-use the same instance of `memcache/d`. This is why the prefix is handled internally and not by `memcached` (it would be global and not serve the purpose then).\n\nAbout the ttl:\n\n* `memcache/d` can not handle ttl > 30 days (they would consider the time as an absolute timestamp then) and this is why the PR always convert the ttl to an absolute ts (`time() + $ttl`)\n* Moreover I think that the ttl should be initialized by the `Session`: there is no reason why the ttl should be different from the `gc_maxlifetime`. I think this is out of the scope of this PR.\n\nAbout sharing `memcache/d ` instances: it will be possible but it does not mean that you have to, you still can use different instances if this suit your needs.\n\nThe tests have been improved.\n\nIf you are ok with the latest changes, this PR should be ready to be merged\n\n---------------------------------------------------------------------------\n\nby drak at 2012-05-10T09:29:18Z\n\n@vicb - I think it's ok to merge now. You are right about the TTL since PHP will pass a maxlifetime not a timestamp, and since memcached varies how it treats $expire, it does need to be normalised in the handler. I'm not necessarily 100% convinced about the prefix, but I don't object.  Nice work.\n\n/cc @fabpot",
            "merged branch vicb/session_pdo_storage (PR #4244)\n\nCommits\n-------\n\nb865b09 [Session] Fix the PDO handler for mysql concurrent write\n\nDiscussion\n----------\n\n[RFC][Session] Make the PDO handler looks less hacky\n\nRelated discussion: https://github.com/symfony/symfony/commit/ebc2f01e5b4e567c49ae99cb6bd01b4d07039748#commitcomment-1304221\n\nThe current code works but looks hacky (`$dbTimeCol = CASE WHEN $dbTimeCol = :time THEN (VALUES($dbTimeCol) + 1) ELSE VALUES($dbTimeCol) END`).\n\nTodo: wrap the mysql specific code in a `try...catch` if we choose this PR way (to be consistent with all other PDO invocations).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T07:50:39Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1293131) (merged b865b096 into 48099a85).",
            "[Form] fixed wrong class path (closes #4239)",
            "merged branch vicb/session_pdo_cleanup (PR #4246)\n\nCommits\n-------\n\n51b753a [Session] cleanup of the PDO storage\n\nDiscussion\n----------\n\n[Session] cleanup of the PDO storage\n\nand adding what was missing from #4244\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T10:40:33Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1293901) (merged 51b753a6 into 62594291).",
            "merged branch Tobion/doc-link (PR #4140)\n\nCommits\n-------\n\n709be4b [WDT] added documentation link\n\nDiscussion\n----------\n\n[WDT] added documentation link\n\nThis adds a documentation link in the WDT for the appropriate branch according to the current symfony version.\n@weaverryan there is no documentation branch yet for the currently created 2.1 branch.\nAlso it might be a nice feature to redirect the dev branch to master automatically on the website. I.e. `http://symfony.com/doc/2.1/index.html` -> `http://symfony.com/doc/master/index.html`\n@fabpot It might be a good idea to introduce a `Kernel::BRANCH` constant. So there would be no need to extract the branch from the symfony version in `ConfigDataCollector`. And bumping new versions/branches would be in one place.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-27T14:17:07Z\n\nMaybe the documentation server should redirect to the right version according to `Kernel::VERSION` (i.e. using rewritting) ?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-27T14:31:49Z\n\nThat would be best yes.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-10T06:03:45Z\n\nFYI, I've added some more constants about the Symfony version: 48099a852cc3 (modeled after PHP constants)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-10T07:08:57Z\n\nI've just updated the website to accept any `HttpKernel::VERSION` string. Some redirection examples:\n\n * 2.0.12 -> current\n * 2.0 -> current\n * 2.0.12-DEV -> current\n * 2.1 -> master\n * 2.1.0-DEV -> master\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-10T12:49:16Z\n\n:thumbsup: for updating the website. But I think you missed to return 404 for a non-existent main doc page.\nhttp://symfony.com/doc/2.4/book/controller.html -> 404 as expected\nhttp://symfony.com/doc/2.4/index.html -> does not return 404 (and all links there are dead)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T15:12:07Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1296057) (merged 04adf361 into a01dec00).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-10T17:21:06Z\n\nI've fixed the doc index for non-existing versions. Can you squash your commits before I merge? Thanks.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-10T22:49:18Z\n\ndone\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T22:52:13Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1300414) (merged 709be4b7 into fae4523f).",
            "merged branch Ringosan/check_cs_fixes (PR #4263)\n\nCommits\n-------\n\n0bcc5fa [check_cs] Fixed and optimized the coding standard script\n\nDiscussion\n----------\n\n[check_cs] Fixed and optimized the coding standard script\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\nLicense of the code: MIT\nDocumentation PR: ~\n\nMinor optimizations and fixes for the coding standard script. Fixes paths to skipped files which have now been moved.\n\n[check_cs] Optimized coding standards script\n\n* Defined skipped files array outside of foreach loop\n* Reduced calls to $file->getRealPath() to one\n\n[check_cs] Fixed skipped file paths\n\nPaths to skipped files have changed since test files have been moved\ninto individual components\n\n[check_cs] Optimized coding standards script\n\n* Removed nested foreach loop\n\n[check_cs] Minor formatting change\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T15:46:18Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1306159) (merged 0bcc5fa2 into 554e0738).",
            "removed some files from check_cs as they have been fixed now",
            "merged branch hason/phpunitlocale (PR #4256)\n\nCommits\n-------\n\nae714f6a Set init.default_locale to 'en' in phpunit.xml.dist\n\nDiscussion\n----------\n\nSet init.default_locale to 'en' in phpunit.xml.dist\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T07:40:53Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1302695) (merged ae714f6a into 554e0738).",
            "merged 2.0",
            "merged branch hason/plural_validators (PR #4259)\n\nCommits\n-------\n\n030dd2f Added English plural messages\n077a594 Added Czech plural messages\n\nDiscussion\n----------\n\nPlural validators\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T08:47:46Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1303101) (merged 030dd2fa into 554e0738).",
            "merged branch gajdaw/finder_contains_exception_test (PR #4056)\n\nCommits\n-------\n\nf2fea97 [Component][Finder] tests and condition: contains() used on dir\n\nDiscussion\n----------\n\n[Component][Finder] tests and condition: contains() used on dir\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n`Finder::contains()` and `Finder::notContains()` can't be used on directories.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-08T06:33:11Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1273818) (merged f2fea974 into 919604ab).",
            "switched to use mbstring whenever possible instead of iconv",
            "merged branch MattKetmo/php-icon (PR #4270)\n\nCommits\n-------\n\n9f772c7 [WDT] Ajusted the color of the PHP logo\n\nDiscussion\n----------\n\n[WebProfilerBundle] Ajusted the color of the PHP logo\n\nSince the redesign of the Web-Debug-Toolbar in #3850, a new PHP icon has been added, but its color is a bit darker (`#000000`) than the other icons in the toolbar (`#302e32` for the Symfony2 logo). @stloyd also noticed it [here](https://github.com/symfony/symfony/pull/3850#issuecomment-5137859).\n\nThis (minor) PR aims to ajust the background color of the PHP logo to keep a certain homogeneity.\n\nThe color change can be see there (before/after) : http://twitpic.com/9kbs4p\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-12T21:03:31Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1316131) (merged 9f772c78 into e1934527).",
            "merged branch sstok/patch-2 (PR #4272)\n\nCommits\n-------\n\n498b814 [FrameworkBundle] minor fix in TranslationUpdateCommand <info> was not properly closed.\n\nDiscussion\n----------\n\n[FrameworkBundle] TranslationUpdateCommand <info> was not properly closed.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-13T13:43:06Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1319869) (merged 498b8140 into e1934527).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-13T17:06:25Z\n\nCan you reopen a PR on the 2.0 branch as this is a bug fix? Thanks.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-13T18:09:39Z\n\n@fabpot this command is a 2.1 feature (even if it was added 6 month ago and so seems already old). There is nothing to fix in 2.0",
            "merged branch hason/localeexceptions (PR #4250)\n\nCommits\n-------\n\n6438c80 [Locale] Updated exception messages\n\nDiscussion\n----------\n\n[Locale] Updated exception messages\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-10T15:12:46Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1296098) (merged 60eabc7c into fae4523f).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T21:27:29Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1309320) (merged 6438c808 into dd0da03c).\n\n---------------------------------------------------------------------------\n\nby hason at 2012-05-14T09:23:26Z\n\n@fabpot corrected",
            "merged branch duplabe/customnormalizer-fix (PR #4273)\n\nCommits\n-------\n\ne647eaa [Serializer] Fix CustomNormalizer supportsDenormalization interface check.\n\nDiscussion\n----------\n\n[Serializer] Fix CustomNormalizer supportsDenormalization interface check.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nFixes the previous PR: https://github.com/symfony/symfony/pull/4257\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-13T20:57:00Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1322002) (merged e647eaa6 into 459942b4).",
            "merged branch willdurand/form-date-types (PR #4204)\n\nCommits\n-------\n\nceb5ce6 [Form] fixed tests\na1e3a59 [TwigBridge] Switched to composer\ndf36afb [Form] Added tests\n6d5ad3b [Form] Added right HTML types to Datetime/Date/Time types if single_text is true\n\nDiscussion\n----------\n\n[Form] Added right HTML types to Datetime/Date/Time types if single_text is true\n\nWhen you set the `widget` option to `single_text`, you get a HTML input tag which is fine, but you the type is `text`, and it's wrong. You don't have any other way to get the right `type` as this attribute is defined to the FormView instance itself (see FileType for instance).\n\nThis PR adds right HTML types like the FileType does.\n\nCheers,\nWilliam\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-05-09T16:04:16Z\n\n@fabpot anything else to do there?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-11T16:28:43Z\n\nadding some unit tests?\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-05-11T16:35:40Z\n\nfair point :)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-12T16:34:43Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1314731) (merged 2631c8b7 into cb905c5f).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-12T17:14:12Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1314902) (merged ceb5ce6e into e1934527).\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-05-12T17:16:17Z\n\n@fabpot ok, so I had to fix some other tests but there is a weird dependency between the tests in TwigBridge, and the Form component. I fixed the test suite's setup in the TwigBridge, and fixed some failing tests.",
            "merged branch bschussek/issue4213 (PR #4284)\n\nCommits\n-------\n\n9215c44 [Form] fix failing tests for remove call on an objectCollection\n076a104 [Form] Created failing test for PropertyPath modifying collections while iterating them\n\nDiscussion\n----------\n\n[Form] Fixes PropertyPath not to remove elements while iterating a collection\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4212, #4213\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue4213)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-14T18:56:29Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1329584) (merged 9215c447 into 46ffbd52).",
            "[HttpKernel] fixed unit tests when run standalone (closes #4266, patch from Gator92)",
            "added @ to all chmod() calls to avoid PHP warnings (operation not permitted) when using CIFS or NTFSa (closes #2125)",
            "[WebProfilerBundle] re-added a div that were removed during the last update of the toolbar (closes #4265, #4282)",
            "merged branch igorw/validator-suggest-doctrine-common-2.1 (PR #4290)\n\nCommits\n-------\n\n4b0cdde [Validator] Change default of ValidatorFactory::buildDefault to exclude annotations\nc7a8678 [Validator] Move doctrine/common dependency from require to suggest\n\nDiscussion\n----------\n\n[Validator] Move doctrine/common dependency from require to suggest\n\n`doctrine/common` is only used for the annotations, so it should be made optional.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-15T07:11:13Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1334026) (merged 4b0cdde2 into 114c34f8).",
            "merged branch bschussek/options (PR #3968)\n\nCommits\n-------\n\n95727ff [OptionsResolver] Updated PHP requirements to 5.3.3\n1c5f6c7 [OptionsResolver] Fixed issues mentioned in the PR comments\nd60626e [OptionsResolver] Fixed clear() and remove() method in Options class\n2b46975 [OptionsResolver] Fixed Options::replace() method\n16f7d20 [OptionsResolver] Improved implementation and clarity of the Options class\n6ce68b1 [OptionsResolver] Removed reference to non-existing property\n9c76750 [OptionsResolver] Fixed doc and block nesting\n876fd9b [OptionsResolver] Implemented fluid interface\n95454f5 [OptionsResolver] Fixed typos\n256b708 [OptionsParser] Renamed OptionsParser to OptionsResolver\n04522ca [OptionsParser] Added method replaceDefaults()\nb9d053e [Form] Moved Options classes to new OptionsParser component\n\nDiscussion\n----------\n\nExtracted OptionsResolver component out of Form\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=options)\n\nThis PR refactors the options-related code of the Form component into a separate component. See the README file for usage examples.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-04-17T18:11:03Z\n\nTo me it seems like we have some redundancy with the Config/Definition component. I'm wondering if these two can/should be merged somehow?\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-04-17T18:14:44Z\n\nI would also suggest merging this into the Config component. Its current name too closely resembles Python's optparser lib, which could create confusion.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-17T18:18:49Z\n\nMerge conflict artifacts are fixed now.\n\n@schmittjoh Do we? Isn't the idea of the Config component to read complex configuration from different configuration providers? (YAML, XML, Annotations etc.)\n\nThe idea of this parser is to be highly performant and to be usable in simple classes. If this can be achieved with the Config component, I'm happy to learn more.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-04-17T18:27:08Z\n\nThe config component is basically a super intelligent version of array_merge and the like.\n\nAbout performance, I haven't really done any tests to say something about the impact. I think it's safe to say that it would be at least slower than your implementation in its current form due to the additional indirection. However, we could probably add a caching layer.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-17T18:31:22Z\n\nHave you checked the README I wrote? Are you sure the Config component is intended for the same purpose and not *way* too complex in this case?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-17T18:51:14Z\n\nYou also forgot to update the ``replace`` section of the root composer.json file.\n\nAnd regarding doing such thing with the Config Definition stuff, it would be more difficult: it builds the tree of values with their defaults, and then merges stuff coming from different sources. The form component however receives defaults from different places (which also define the allowed keys at the same time) and then receives user options only once. And it needs to handle easily default values which depend from other values. So I think both implementations are useful for different needs (however, we could argue about making it a subnamespace in the Config component, but this would add yet another different stuff in it)\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-17T18:58:03Z\n\n@bschussek You need to add this component to the main composer.json too.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2012-04-18T06:54:17Z\n\ndoesn't this overlap a bit with the ``TreeBuilder`` in the Config component?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2012-04-18T06:59:12Z\n\nah just saw @stof's comment .. i think the biggest argument against TreeBuilder is that it was designed for a very specific purpose and performance wasn't one of them. where as Form needs something that performs fast. so yeah i do see different use cases, but i don't think this means we should have a new component.\n\nfurthermore while i haven't read the code in details i am surprised it doesn't make use of http://php.net/manual/en/function.array-replace-recursive.php to merge defaults into a user supplied options array.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-18T08:10:49Z\n\n@stof, @jalliot: Fixed.\n\n> furthermore while i haven't read the code in details i am surprised it doesn't make use of http://php.net/manual/en/function.array-replace-recursive.php to merge defaults into a user supplied options array.\n\n@lsmith77: Because that's not what this component does. The key feature of this component is to resolve default values of options that depend on the *concrete* values of other options. I invite you to read the README.\n\nIs it a good idea to merge this into Config? I think that both components address different audiences and different purposes. The idea of this one is to initialize classes with simple, run-time provided arrays. The idea of Config is to load and validate complex configurations from storage providers, such as the filesystem.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-18T08:18:48Z\n\nNote: Not all relevant code of this component is shown in the diff. The (crucial) Options and LazyOption classes have only been moved out of Form.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2012-04-18T08:20:02Z\n\n> Is it a good idea to merge this into Config? I think that both components address different audiences and different purposes. The idea of this one is to initialize classes with simple, run-time provided arrays. The idea of Config is to load and validate complex configuration values from the filesystem (typically).\n\ndecoupled is all fine, but to me this feels a bit too granular. but i am just expressing a gut feeling here\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-18T08:34:03Z\n\nI think too it should be included in the config component (maybe in a subnamespace). Indeed the behaviour is too different to be merged into the current component but its purpose is similar and is all about *configuration* (hence the name of the component). Otherwise we could also split the current Config component into smaller components as it seems to me there are already parts of it that are totally unrelated to each other.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-18T11:30:55Z\n\n@jalliot Can you go into detail which parts that are and what changes you suggest?\n\n@kriswallsmith Any other naming suggestion?\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-18T11:34:35Z\n\n@bschussek I don't know the current component well enough but that's the impression I had last time I looked at its code but I may be wrong.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-18T19:30:43Z\n\n@bschussek the Definition subnamespace of the Config component is standalone. It is not directly related to the Loader part\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-19T09:32:48Z\n\n@stof So what do you recommend?\n\nI think this is also a question of marketing. Is the Definition subnamespace intended to be used totally separately of the loaders? What are the use cases? If there are good use cases, it makes sense to me to extract the Definition part into a separate component. Otherwise not.\n\nIt is also a question of marketing, because the purpose of a component should be communicable in simple words (quoting @fabpot). The purpose of Config is (copied from the README):\n\n> Config provides the infrastructure for loading configurations from different data sources and optionally monitoring these data sources for changes. There are additional tools for validating, normalizing and handling of defaults that can optionally be used to convert from different formats to arrays.\n\nI think this purpose is completely different than that of OptionsParser.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-19T11:39:50Z\n\nThe current description itself shows the current state: what is advocated as the main goal of the component (and was the original part) is the loader stuff. But the Definition part (mentioned as  additional tools ) is bigger in term of LOC\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-19T11:55:17Z\n\n@stof: Yes, this is a fact, but what's your opinion? How do we proceed with this PR?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-19T12:21:44Z\n\nWell, my opinion is that the current Config component may deserve to be split into 2 components (as someone may need only part of it). But this would be a huge BC break. @fabpot what do you think ?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-23T10:14:57Z\n\n@fabpot Can we merge this?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-10T06:45:20Z\n\n@bschussek I'm +1 for this PR but as mentioned by @kriswallsmith, we must find another name as `OptionsParser` immediately make me think of something related to the CLI.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-10T06:47:45Z\n\nHowever, after thinking about it again, I would vote for keeping it in its own component instead of adding yet another independant part in Config, to avoid forcing Form users to get the whole Config component\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-10T09:09:36Z\n\nI'm having difficulties finding a better name. The main difference to CLI option parsers is that these actualy *parse* a string, while this class only receives an array of options (does not do any parsing). Otherwise both have the same purpose.\n\nA couple of other suggestions:\n\n* OptionsLoader (likely confused with our filesystem loaders)\n* OptionsResolver\n* OptionsMerger\n* OptionsMatcher (not accurate)\n* OptionsBuilder (likely confused with the builder pattern)\n* OptionsJoiner\n* OptionsBag (likely confused with the session bags)\n* OptionsConfig (likely confused with Config)\n* OptionsDefinition (likely confused with Config\\Definition)\n* OptionsSpec\n* OptionsCombiner\n* OptionsInitializer\n* OptionsComposer\n\nThe difficulty is to find a name that best reflects its purpose:\n\n```\n$parser->setDefaults(...);\n$parser->setRequired(...);\n$parser->setOptional(...);\n$parser->setAllowedValues(...)\n$parser->parse($userOptions);\n```\n\nThe only of the above examples that makes sense to me here is OptionsResolver -> resolve($userOptions).\n\nIdeas?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-10T09:56:54Z\n\nOptionsResolver seems a better name than OptionsParser\n\n---------------------------------------------------------------------------\n\nby luxifer at 2012-05-10T09:59:45Z\n\nAgree with @stof\n\n---------------------------------------------------------------------------\n\nby r1pp3rj4ck at 2012-05-10T10:03:53Z\n\nI don't really like the plural in the name, but OptionsResolver seems better than OptionsParser. OptionResolver maybe?\n\n---------------------------------------------------------------------------\n\nby sstok at 2012-05-10T10:10:14Z\n\n@r1pp3rj4ck Options makes more sense as they can be nested/deeper, and thus are multiple.\n\nAgree with @stof also.\n\n---------------------------------------------------------------------------\n\nby r1pp3rj4ck at 2012-05-10T10:13:01Z\n\n@sstok well, we have multiple events too and the name is EventDispatcher, not EventsDispatcher. Actually none of the component names are plural.\n\n---------------------------------------------------------------------------\n\nby newicz at 2012-05-10T10:33:50Z\n\nOptionsResolver - I find it suggesting that there is some kind of problem to be resolved and there's not,\nmaybe OptionsDefiner but it isn't good aswell this is a tough one",
            "merged branch scoolen/json-decode-params (PR #4283)\n\nCommits\n-------\n\n38cbbe7 Moved JSON encoding and decoding to separate classes which expose all their available parameters\n\nDiscussion\n----------\n\n[Serializer][JsonEncoder] Exposed json_encode and json_decode params\n\nIn `JsonEncoder::decode()` you are unable to change the `$assoc` parameter from `json_decode`. I created two sub-classes that handle JSON encoding and decoding while exposing all the available parameters from `json_encode` and `json_decode`. You can now do this:\n\n```php\n$jsonEncoder = new JsonEncoder(new JsonEncode(JSON_HEX_TAG), new JsonDecode(true, 1024));\n$serializer = new Serializer(array(), array($jsonEncoder));\n```\n\nAdditionally I made `json_last_error()` available from `JsonEncoder`:\n```php\n$jsonEncoder->getLastEncodingError();\n$jsonEncoder->getLastDecodingError();\n```\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: N/A\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-14T18:46:16Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1329496) (merged 38cbbe71 into 46ffbd52).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-15T05:07:04Z\n\nping @Seldaek / @lsmith77\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-05-15T09:47:48Z\n\nThis looks fine to me, I asked him to submit the PR, but I wanted to get feedback from others.",
            "fixed CS",
            "merged branch bschussek/options-resolver (PR #4292)\n\nCommits\n-------\n\nd2c162d [OptionsResolver] Added methods isKnown() and isRequired()\n\nDiscussion\n----------\n\n[OptionsResolver] Added methods isKnown() and isRequired()\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-15T14:42:10Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1336375) (merged d2c162d8 into 563f77a3).",
            "merged 2.0",
            "Merge branch '2.0'\n\n* 2.0:\n  fixed phpdoc @param alignment",
            "fixed 2.0 merge",
            "fixed phpdoc @param alignment",
            "fixed test",
            "merged 2.0",
            "merged branch Herzult/feature/collection_size_validator (PR #4149)\n\nCommits\n-------\n\n3a5e84f [Validator] Add CollectionSize constraint\n\nDiscussion\n----------\n\n[Validator] Add CollectionSize constraint\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nI will also send a PR to the documentation as soon as this one is accepted.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-29T08:24:28Z\n\n-1\n\nI dislike the rising amount of very specific constraints in the core. Can't we add this to Size?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-29T09:01:39Z\n\n@bschussek #3918 implements what you propose but then the messages are not valid any more:\n\n```php\n<?php\n    public $minMessage = 'This value should be {{ limit }} or more';\n    public $maxMessage = 'This value should be {{ limit }} or less';\n    public $invalidMessage = 'This value should be a valid number';\n```\n\nI can imagine 2 solutions:\n\n- adding some more message,\n- rename the `Size` constraint to `Range` and create a new `Size` constraint for arrays / countables.\n\nWhat do you think ?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-29T09:27:53Z\n\nI'd prefer the second solution and merge `Size` with `SizeLength` as well.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-29T09:34:50Z\n\n@bschussek It would make sense. @makasim @Herzult any one of you would like to contribute this (i.e. rename the current Size to Range and create a new Size supporting arrays / countables / strings) ?\n\n---------------------------------------------------------------------------\n\nby Herzult at 2012-04-29T14:31:12Z\n\nYep, I'm on it.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-29T15:22:44Z\n\n@Herzult could you take the other comment into account and merge SizeLength into you Size ?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-29T15:33:05Z\n\nThe guessers should also be modified (it might also affect the ODM which is in an other repo, if so it would be good to sync the changes).\n\n---------------------------------------------------------------------------\n\nby Herzult at 2012-04-29T16:38:19Z\n\n@stof the problem merging SizeLength into Size is that they don't have the same required options & messages.\n\n---------------------------------------------------------------------------\n\nby Herzult at 2012-04-29T16:47:40Z\n\nAnd what about renaming Range to Interval and SizeLength to IntervalLength?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-29T16:54:38Z\n\nWell, SizeLength is about matching the length of a string currently. Nothing related to intervals\n\n---------------------------------------------------------------------------\n\nby Herzult at 2012-04-29T17:29:40Z\n\nHere are the current names:\n\n * **Size** for collection (countable) size\n * **Range** for numbers\n * **SizeLength** for strings\n\nMerging **SizeLength** into **Size** is maybe not appropriate because collections and strings are different things. It'll be hard to find messages that fit both collections and strings. Maybe we had better to find a better name for both. What do you think?\n\nAbout the ValidatorTypeGuesser, I'll update it as soon as we know ow to name the constraints.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-29T17:43:01Z\n\nSize is a good name for both strings and  collections , could we have two sets of strings and select according to the type ?\n\n---------------------------------------------------------------------------\n\nby Herzult at 2012-04-29T22:39:55Z\n\nI tried to merge them together, what do you think?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-30T06:52:37Z\n\nI think your changes are great, may be @bschussek has more feedback. The ValidatorTypeGuesser and the translation are yet to be updated.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2012-05-01T12:32:28Z\n\nAm I missing something or `SizeLength` for strings is a duplicate for `MinLength` and `MaxLength` constraints?\n\n---------------------------------------------------------------------------\n\nby Herzult at 2012-05-02T13:29:36Z\n\nYep, that's true. But the only link between this PR and the SizeLength constraint is that I merged it to the one I introduced.\n\n---------------------------------------------------------------------------\n\nby Herzult at 2012-05-07T07:48:01Z\n\n@bschussek what do you think?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-10T19:51:26Z\n\n@Herzult this PR looks good to me, could you update the changelog and update guides, try to factorize the code and squash the commits ? Thanks.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T15:42:35Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1306112) (merged 8d8e6443 into 4ac3bddb).\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-11T21:42:21Z\n\n* could #4259 be helpful ?\n* please squash the commits.\n* please create a PR / issue on [symfony-docs](https://github.com/symfony/symfony-docs)\n\nthanks for the updates.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-13T18:38:18Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1321123) (merged eeda9044 into 4ac3bddb).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-13T18:45:12Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1321146) (merged 491ca19a into 8b54eb56).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-14T11:29:39Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1326110) (merged 44865024 into 8b54eb56).\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-14T11:49:37Z\n\n@Herzult what about plural translations ?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-14T16:52:37Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1328677) (merged 93480f95 into 46ffbd52).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-14T17:03:13Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1328705) (merged 326c3b81 into 46ffbd52).\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-14T20:19:18Z\n\nthanks for the updates, this PR looks fine to me. @bschussek ?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-16T06:45:51Z\n\n@Herzult can you squash your commits ?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-16T11:20:44Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1344811) (merged 3a5e84f4 into 58b6ef23).",
            "merged branch stof/fix_interface (PR #4306)\n\nCommits\n-------\n\n11e0d23 [HttpKernel] Fixed the BundleInterface\n\nDiscussion\n----------\n\n[HttpKernel] Fixed the BundleInterface\n\nThe kernel expects bundles to implement ContainerAwareInterface (a fatal\nerror occurs if the method is not implemented). This is done in the base\nclass but not enforced in the interface.\n\nI spotted it when trying to mock the BundleInterface and pass the mock to the kernel. I created the branch based on master because it is changing the interface but I'm wondering if it should go in 2.0 instead as a bugfix. Someone implementing strictly the interface currently would not be able to use the kernel.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-17T10:41:19Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1354421) (merged 11e0d232 into 5314836d).",
            "merged branch clemens-tolboom/filedumper-backup (PR #4302)\n\nCommits\n-------\n\n189874d FileDumper does no backup.\n\nDiscussion\n----------\n\nFileDumper does no backup.\n\nBackup check path missed a '/'. So no backup was made.\n\nRemoved the repeating path construction by replacing it by new variable.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-16T14:14:58Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1345963) (merged 189874d0 into 5314836d).",
            "merged branch jocl/master (PR #4211)\n\nCommits\n-------\n\nd3fee9b [Finder] ignoreDotFiles(true) filter does not match (issue #4106)\n\nDiscussion\n----------\n\nFix for issue #4106 [Finder] ignoreDotFiles(true) filter does not match\n\nI added new dot test files:\n * .bar\n * .foo/\n * .foo/.bar\n\nChanged the tests and made a fix to finder that seems to okay for me.\n\nI hope my first PR is well arranged ;-)\nIf not I will be pleased to get feedback...\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-11T10:20:51Z\n\nCould you squash you commits ?\n\nThere is also an issue when `ignoreDotFiles(false)` is called twice, could you add a failing TC and fix the code ?\n`$this->ignore = $this->ignore ^ static::IGNORE_DOT_FILES;` should be `$this->ignore = $this->ignore & ~static::IGNORE_DOT_FILES;`\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T12:43:53Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1304510) (merged 72c320bc into ff7c4757).\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-11T13:09:32Z\n\nYou need to:\n\n- tackle the related issue I have mentioned,\n- squash the commit,\n- rebase,\n- force push to your branch.\n\nhttp://symfony.com/doc/current/contributing/code/patches.html has some more info.\n\nAs a fix, did you consider sending it to the 2.0 branch - your mention it as a BC in the commit comment but it really is a bug fix.\n\n---------------------------------------------------------------------------\n\nby jocl at 2012-05-11T13:33:30Z\n\nThank you. I will try it.\n\nHasn't ```ignoreVCS(false)``` the same twice calling problem with\n```$this->ignore = $this->ignore ^ static::IGNORE_VCS_FILES;```?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-05-11T13:36:22Z\n\nyep, good catch !\n\n---------------------------------------------------------------------------\n\nby jocl at 2012-05-12T10:32:06Z\n\nI mentioned it as BC, since I found no place in documentation with the information that dotFiles are ignored by default. I was also wondering that it is default behavior.\n\nBut if I only read the code, it is a 100% bug.\n\nAs soon as the PR is merged, I think we should also add a little notice in documentation like it is for ignoreVCS():\nhttp://symfony.com/doc/master/components/finder.html#files-or-directories\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-15T05:47:49Z\n\nI think you should keep these changes on master. Last thing before I can merge: can you squash your commits as explained by @vicb?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-15T08:20:04Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1334337) (merged 525919fa into ff7c4757).\n\n---------------------------------------------------------------------------\n\nby jocl at 2012-05-15T08:23:24Z\n\nI am sorry, of wasting your time... totally confused about using git. I feel a little bit squashed :-) of a the possible actions.\nI hope it is squashed now. And next time I will use the issue/ticket branch I made.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-15T08:35:59Z\n\nThat's still not good. Squashing is explained here: http://symfony.com/doc/current/contributing/code/patches.html#rework-your-patch\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-15T20:44:14Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1339390) (merged d3fee9b2 into 03d4b026).",
            "merged branch vierbergenlars/patch-1 (PR #4311)\n\nCommits\n-------\n\nfa705db Fix trailing comma in composer (closes #4310)\n\nDiscussion\n----------\n\nFix trailing comma in composer (bug #4310)\n\nThis pull request fixes bug #4310\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-17T19:10:37Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1359128) (merged fa705db6 into e351c9f0).",
            "merged 2.0",
            "Merge branch '2.0'\n\n* 2.0:\n  fixed CS\n  fixed CS",
            "fixed CS",
            "removed empty files",
            "merged branch stof/profiler_fix (PR #4332)\n\nCommits\n-------\n\nbeb8d18 [WebProfilerBundle] Fixed the displaying of the toolbar in the profiler\n\nDiscussion\n----------\n\n[WebProfilerBundle] Fixed the displaying of the toolbar in the profiler\n\nWhen re-adding the clearing div a few days ago, you forgot to put it in the ``if``, thus breaking the design of the profiler (adding 50px above the toolbar)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T22:37:12Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1371378) (merged beb8d184 into 18132c18).",
            "merged 2.0",
            "removed unused use statements",
            "merged branch clemens-tolboom/pofileloader-pluralhandling (PR #4336)\n\nCommits\n-------\n\n4c4d889 Fixed PoFileLoader pluralhandling from interval to index.\n\nDiscussion\n----------\n\n[BUG] PoFileLoader pluralhandling uses interval instead of index.\n\nPoFileLoaders parsed Gettext messages as interval but should have used indexed.\n\nI added index only message strings to MessageSelectorTest to reflect this.\n\n(this is part of https://github.com/symfony/symfony/pull/4249)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-19T10:11:09Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1373653) (merged 4c4d8890 into 58b92453).",
            "merged branch clemens-tolboom/pofileloader-emptytranslations (PR #4337)\n\nCommits\n-------\n\ndd60166 Fixed for allowing empty translation.\n\nDiscussion\n----------\n\nFixed for allowing empty translation.\n\nPoFileLoader should accept empty translations.\n\nPoFileLoader calls array_filter just before returning the $messages thus filtering empty translations.\n\nFor Drupal we need to be able to load and then translate incomplete PO and POT files.\n\n(this is part of [[WIP]: Allow Drupal to use Translate component](https://github.com/symfony/symfony/pull/4249))\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-19T11:14:39Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1373933) (merged 5ee0b1e6 into 58b92453).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-19T12:09:48Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1374129) (merged dd601662 into 58b92453).",
            "merged branch clemens-tolboom/pofileloader-better-whitelines (PR #4339)\n\nCommits\n-------\n\nfb6cf3e Allow for missing whitelines.\n\nDiscussion\n----------\n\nAllow for missing whitelines.\n\nThe Gettext specification allows for 'whitespace is optional' between message string.\n\nFor this to work PoFileLoader needs to save found messages on more places while processing. Thus a new method is introduced.\n\nFor the tests to work PoFileDumper was changed slightly to only emit white-lines when necessary.\n\nI added more documentation from the GNU gettext documentation to make the code more understandable.\n\nWhen [[BUG] PoFileLoader pluralhandling uses interval instead of index.](https://github.com/symfony/symfony/pull/4336) this patch needs some small rework.\n\n(this is part of [[WIP]: Allow Drupal to use Translate component)](https://github.com/symfony/symfony/pull/4249)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-19T12:44:19Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1374295) (merged fb6cf3ef into 58b92453).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-19T13:19:29Z\n\nyou need to rebase your branch. github tells us it cannot be merged automatically",
            "merged branch conf/fix-tests-master (PR #3722)\n\nCommits\n-------\n\n0bde12c Added some skipifs to prevent fatal errors on missing extensions.\n\nDiscussion\n----------\n\nAdded some skipifs to prevent fatal errors on missing extensions.\n\n2.0 branch is ok, this should fix errors on master.",
            "merged branch kbond/extensible-httpcache (PR #3716)\n\nCommits\n-------\n\n8f11f2dd shortened if/else syntax\n2b8c2bc [FrameworkBundle] made http_cache dir extensible\n\nDiscussion\n----------\n\n[FrameworkBundle] make http_cache dir extensible\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nI have a use case where I don't want the httpcache cleared on `cache:clear`.  Currently, it is awkward to change this directory.\n\n[![Build Status](https://secure.travis-ci.org/kbond/symfony.png?branch=extensible-httpcache)](http://travis-ci.org/kbond/symfony)",
            "merged branch drak/clear_tag (PR #3940)\n\nCommits\n-------\n\n80f96b7 [DependencyInjection] Add ability to clear tags by name.\n\nDiscussion\n----------\n\n[DependencyInjection] Add ability to clear tags by name.\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-14T07:50:51Z\n\n@drak Just for information, what is the use case?\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-14T08:40:13Z\n\nI'm using this to filter (and prevent) some listeners from being loaded\ninto the dispatcher.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2012-04-14T09:37:39Z\n\ntags are used by compiler passes. bundles that set these tags expect some defined bundle to take some specific actions on the given services. as such this is already a fairly  fragile  relationship. once other compiler passes then start messing with these tags it can get even more tricky. then again, as long as you know what you are doing ..\n\nthat being said .. this method just adds convenience, since one could always just get all the tags, unset and reset them in bulk.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-14T09:42:04Z\n\n@lsmith77 - exactly.",
            "merged branch willdurand/propel-bridge (PR #3949)\n\nCommits\n-------\n\n51e19d5 Added propel1-bridge to the main composer.json\nfba5d68 [Propel1] Added composer.json\nbbf0122 [Propel1] Fixed phpunit.xml.dist\n\nDiscussion\n----------\n\nAdded composer.json to the Propel bridge\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-15T00:14:12Z\n\nyou need to add it in the ``replace`` section for the main package too\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-04-15T00:17:13Z\n\nAh done, I forgot that file, thanks.",
            "merged branch craue/patch-20 (PR #4230)\n\nCommits\n-------\n\n64101ab separate numeric value from suffix in File constraint's error message `$uploadIniSizeErrorMessage`\nff122d3 fixed tests\n868d649 separate numeric values from suffixes in File constraint's error message `$maxSizeMessage`\n\nDiscussion\n----------\n\n[Validator] separate numeric values from suffixes in File validation error messages\n\nThis change allows me to locale-aware format the numbers in a form theme, i.e., to use a comma instead of a dot. If there's a better way without re-implementing the entire validator, let me know.\n\nSuch changes also allow for using a different separator than the usual space in translations.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-08T19:14:16Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1278845) (merged f7c50098 into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-08T19:23:31Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1278940) (merged ce1cdafc into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby r1pp3rj4ck at 2012-05-10T11:05:18Z\n\nI don't know if there is a better way to do this, but I like the idea anyway.\n\n---------------------------------------------------------------------------\n\nby craue at 2012-05-11T14:18:52Z\n\nSeparated numeric values and suffixes for `$maxSizeMessage` and `$uploadIniSizeErrorMessage` now. Can't find any other relevant places (in other validators). Might be merged if accepted.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T14:19:10Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1305246) (merged 438da7dd into e54f4e46).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-11T21:22:25Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1309277) (merged 64101aba into dd0da03c).\n\n---------------------------------------------------------------------------\n\nby sstok at 2012-05-13T13:29:07Z\n\nUsing the NumberFormatter class would be an option, but that would also add a dependency when using Validation as stand-alone so using the {{ suffix }} is a good idea.\n\n---------------------------------------------------------------------------\n\nby craue at 2012-05-13T14:15:54Z\n\nUsing a NumberFormatter (if available) directly in the validator might indeed be a good option. In either case, having the numeric value separated from its suffix looks cleaner.\n\n---------------------------------------------------------------------------\n\nby craue at 2012-05-19T13:36:00Z\n\n@fabpot: Would you merge this?",
            "merged branch shieldo/fix_exception_message (PR #4173)\n\nCommits\n-------\n\n69e0451 [Security] fixed English grammar in exception message\n\nDiscussion\n----------\n\n[Security] fixed English grammar in exception message",
            "[HttpKernel] fixed typo",
            "merged branch pulzarraider/memcache_profiler_update (PR #4150)\n\nCommits\n-------\n\n1f6c8d5 [HttpKernel] Added mock objects for Memcache(d) and Redis\ne17217b [HttpKernel] Remove destructive flush() from memcache(d) storage profilers\n\nDiscussion\n----------\n\n[HttpKernel] Memcache and Redis profiler storage update\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nChanges of this PR:\n\n- change ```purge()``` method of memcache(d) profiler storage to delete only required items and be less destructive,\n- mock objects for Redis and Memcache(d) storages were added to make unit tests independent from memcache(d)/redis extensions and memcache(d)/redis servers running on localhost.",
            "merged branch adanlobato/master (PR #4130)\n\nCommits\n-------\n\n42a73f4 Typo fix\n\nDiscussion\n----------\n\n[Typo] Removed extra 's'",
            "merged branch shieldo/patch-3 (PR #4128)\n\nCommits\n-------\n\nca52348 [Validator] fixed grammar in exception message\n\nDiscussion\n----------\n\n[Validator] fixed grammar in exception message",
            "merged branch bschussek/issue3994 (PR #4046)\n\nCommits\n-------\n\n246c885 [Form] Fixed: Default value of 'error_bubbling' is now determined by the 'single_control' option\nd3bb4d0 [Form] Renamed option 'primitive' to 'single_control'\n167e64f [Form] Fixed: Field attributes are not rendered in the label anymore. Label attributes are now passed in  label_attr \n68018a1 [Form] Dropped useless test that is guaranteed by OptionsParser tests and that needs to be adapted very often\n649752c [Form] Fixed: CSRF token was not displayed on empty complex forms\nc623fcf [Form] Fixed: CSRF protection did not run if token was missing\neb75ab1 [Form] Fixed results of the FieldType+FormType merge.\n\nDiscussion\n----------\n\n[Form] Fixed errors introduced in the FieldType+FormType merge\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: #3994, #4000, #2294, #4118\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3994)\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-22T15:39:20Z\n\n`primitive` is a pretty abstract option name. It depends on the person what he considers primitive. Maybe more explicit naming or better documentation what it means.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-22T15:47:29Z\n\nBetter suggestions?\n\nThe distinction here is between primitive and complex forms, where primitive forms are such forms that can be represented by a single HTML tag. This obviously needs to be documented.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-22T15:49:45Z\n\nMaybe `single_widget` or something like that.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-23T13:09:43Z\n\n@Tobion @bschussek would `elementary` be better than `primitive` ?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-23T13:17:04Z\n\nand `compound \\ composite` better than `complex` ?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-23T14:08:33Z\n\n@vicb I fail to see how elementary/compound is easier to understand than primitive/complex. Maybe single_widget, but what's the opposite of this case? multi_widget?\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-23T14:15:09Z\n\nActually I am fine with anything... as long as it is documented.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-23T14:22:31Z\n\nStill I think that this unveals a more profound naming problem. How do we (also in the documentation) name forms with children (formerly  forms ) and forms without children (formerly  fields )?\n\nShould we refer to them as\n\n* forms and fields?\n* complex and primitive forms?\n* ...\n\nWe must first answer this question before we can find an intuitive option name. If the documentation always switches between different terminologies, neither will it be understandable nor will this option be easy to remember.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-23T15:10:32Z\n\n> Still I think that this unveals a more profound naming problem. How do we (also in the documentation) name forms with children (formerly  forms ) and forms without children (formerly  fields )?\n\nTo make it clear, I would rather say forms that **can have** children and forms that **can not have** children (i.e. Empty collections have no children but they can have and this is reason why you have to introduce those options, right ? - that could be a good example for the doc).\n\nIt will probably be better to refer to  complex  /  primitive  forms in the doc (and use the  form  /  field  terms to explain them).\n\nNote: I think @Tobion concern is that  primitive  /  complex  could be pejorative terms (this is why I have proposed  elementary  /  compound ).\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-23T16:00:54Z\n\n1. primitive/complex is subjective (and could be pejorative too)\n2. elementary/compound is more explicit so probably better than primitive/complex\n3. I dislike this option in general. Does it make sense to change this option from a user perspective? I guess it's always the same as long as the widget structure stays the same. So it should be resolved at a higher level dynamically from the widget structure and not exposed to any configuration.\n4. In documentation I would use the terms forms and fields. Because all people with HTML knowledge will understand that fields cannot have sub-fields whereas forms can. But since this distinction is not findable in code, it should be mentioned that all these are implemented as a form hierarchy.\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2012-04-23T16:02:00Z\n\nhow about simple and complex?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-23T16:06:33Z\n\n@Tobion It does not make sense to change this option from the user perspective, still the overloading type has to propagate to FormType whether it is a form or a field, so that the default behaviour is correct.\n\nA second option how to implement this is to add a method `isField` to FormTypeInterface that can be overloaded and receives the options. I don't really like to introduce new methods here unless absolutely required.\n\nWhat about renaming the option  primitive  to  is_field ? The blocks in the template would then be named  form_widget_field  and  form_widget_form .\n\n---------------------------------------------------------------------------\n\nby tristanbes at 2012-04-25T14:01:06Z\n\nOh, I should've seen this before, i thought I was doing something wrong. (empty collections gets an input field bug)\n\nPlease big :UP: on this. When will it be merged ? @bschussek\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-25T15:30:28Z\n\n+1 for  is_field  and  form_widget_field  but I would rather use  form_widget_compound  instead of  form_widget_form  which is quite strange.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-26T16:34:04Z\n\n@Tobion  simple  and  compound  then?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-26T16:49:58Z\n\nno  field  and  compound \n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-26T17:17:02Z\n\nI don't like  field  for a simple reason: Consider the  date  type. We are typically speaking of the  date  field there. But technically, the  date  field is a compound field. So?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-26T21:17:37Z\n\nI don't understand the open question. You proposed  is_field  and  form_widget_field  yourself. So calling the template block  form_widget_field  is a comprehensible consequence of  is_field . I wouldn't call the date type with multiple inputs a field.\n\n---------------------------------------------------------------------------\n\nby tristanbes at 2012-04-26T21:52:39Z\n\nWe should take a decision cause right here i got all my forms that are broken because of the empty collection rendering as input field :-).\n\nI guess we are many in that situation.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-27T08:28:16Z\n\nI renamed  primitive  to  single_control  now to match with the HTML specification which names all input elements (input, select etc.)  controls . The opposite is now  compound .\n\nMeanwhile, I added a fix for #4118.\n\n@fabpot This is ready for merge now.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-27T10:22:49Z\n\nHm, I know naming things is hard and sometimes not really important. But since users need to know which block to override, it is essential to make it clear. I think there is still one issue.\nThe block is named `form_widget_single_control` in order, as you said, to abstract away if it's an input, select etc. But in fact it can only render `input` and nothing else. So this is misleading.\nSo you could also simply name it `form_widget_input`.\nApart from that I agree with everything.",
            "merged branch hollodk/master (PR #4127)\n\nCommits\n-------\n\ne590b7a Fixed a typo\n\nDiscussion\n----------\n\nfix for issue #4123\n\nTranslation issue... fixed a typo.",
            "removed the main CHANGELOG file for 2.1",
            "merged 2.0",
            "merged branch pminnieur/patch-3 (PR #4099)\n\nCommits\n-------\n\na210920 fixed indention\n\nDiscussion\n----------\n\nfixed indentation",
            "fixed sub-requests with a different method than the main request",
            "merged branch ruimarinho/profiler_ie7 (PR #4032)\n\nCommits\n-------\n\nffc074b [Profiler] Fixed IE7 JavaScript errors\n\nDiscussion\n----------\n\n[Profiler] Fixed IE7 JavaScript errors\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nRequires merge of another [PR](https://github.com/doctrine/DoctrineBundle/pull/61) available on the `doctrine/DoctrineBundle` repository (compatibility changes to `db.html.twig`).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-20T14:15:22Z\n\nThat does not work for me.",
            "merged branch weaverryan/remove_security_factories (PR #4058)\n\nCommits\n-------\n\na9d8197 Removing the security_factories.xml file - not needed after sha: 413756c103dec9cd640db569cc678357995a3cd1\n\nDiscussion\n----------\n\nRemoving the security_factories.xml file - not needed after sha: 413756c...\n\nHi guys!\n\nThis is just a left-over file. See sha: 413756c103dec9cd640db569cc678357995a3cd1\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThanks!",
            "merged branch jalliot/pdo_tests (PR #4051)\n\nCommits\n-------\n\ne509e6f Skip PDOSessionHandlerTest if PDO SQLite is not available\n\nDiscussion\n----------\n\nSkip PDOSessionHandlerTest if PDO SQLite is not available",
            "merged branch jalliot/patch-3 (PR #4044)\n\nCommits\n-------\n\n128ac26 Added missing '%' in DI component README\n\nDiscussion\n----------\n\nAdded missing '%' in DI component README\n\n---------------------------------------------------------------------------\n\nby ruian at 2012-04-21T10:37:12Z\n\n@fabpot PR ok",
            "fixed typo",
            "merged 2.0",
            "merged branch gimler/patch-1 (PR #4040)\n\nCommits\n-------\n\n1137670 add resource links for the console component\n\nDiscussion\n----------\n\nadd resource links for the console component",
            "merged branch drak/genericevent (PR #3784)\n\nCommits\n-------\n\n70a6de9 [EventDispatcher] Remove data property\n4ff92b9 [EventDispatcher] Added generic event class.\n\nDiscussion\n----------\n\n[EventDispatcher] Added generic event class.\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nProvides a ready to go all purpose event object.\n\n---------------------------------------------------------------------------\n\nby Koc at 2012-04-04T17:53:41Z\n\nWhat use case of this?\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-04T17:57:46Z\n\nIt generically fits observer pattern use for those who do not want to make a specific event class for each and every little thing.  This is akin to EventArgs + a subject.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-20T07:55:05Z\n\nThis is basically what we had in symfony 1.x.\n\nSome comments:\n\n * I would remove the `data` as it makes things more complex and more difficult to understand (as arguments is an array, you can put your data there too);\n * I would use the standard `set`, `get`, `all`, ... methods for the `arguments` related methods\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-20T08:11:31Z\n\nOK, I'll rework the class.  Thank you for your consideration.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-20T08:56:53Z\n\n@fabpot - I did some work on the class, but it seemed strange to not use get/setArgument because there is another property, the subject. This is mentioned in the conventions guide:\n\n```\nFor many relations where the convention does not apply, the following methods must be used instead (where XXX is the name of the related thing):\n```\n\nIf you still want me to change it, let me know.",
            "merged branch willdurand/propel-transformer (PR #4024)\n\nCommits\n-------\n\n9447b84 [Propel1] Allowed PropelObjectCollection only in CollectionToArrayTransformer\ne43d0fa reverse transform into PropelObjectCollection\n\nDiscussion\n----------\n\nPropel transformer\n\nPrefer this PR over #3966",
            "merged branch michal-pipa/composer-fix (PR #3986)\n\nCommits\n-------\n\na514072 Added Monolog to composer.json as dev dependency\n\nDiscussion\n----------\n\nAdded Monolog to composer.json as dev dependency\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/michal-pipa/symfony.png?branch=composer-fix)](http://travis-ci.org/michal-pipa/symfony)\nFixes the following tickets: -\nTodo: -\n\nMonolog was missing in dev composer dependences. It was present in `vendors.php`: https://github.com/symfony/symfony/blob/35e6c8ed0fb1ee329c26868c87e0fb5c54eef06a/vendors.php\n\nWithout this code coverage report generation fails with error message: `Fatal error: Class 'Monolog\\Handler\\ChromePHPHandler' not found`.",
            "merged branch msabramo/patch-1 (PR #3988)\n\nCommits\n-------\n\n1863b28 Fix typo: Resonse -> Response\n\nDiscussion\n----------\n\nFix typo: Resonse -> Response",
            "merged branch eriksencosta/cs-fixes (PR #3750)\n\nCommits\n-------\n\ncf67870 fixed line break to LF\n013f998 updated license blocks\nbec231f fixed CS\n\nDiscussion\n----------\n\nfixed CS",
            "merged branch lsmith77/HttpFoundation_test (PR #3744)\n\nCommits\n-------\n\n925b65d updated reference to tests\n\nDiscussion\n----------\n\nupdated reference to tests\n\nthis is basically the format used in all other components.\n\nhowever i am not sure if it really makes sense to list ``phpunit -c src/Symfony/Component/HttpFoundation/``, since this relative path could be confusing for anyone using the standalone components. But even if using ``symfony/symfony`` the path is wrong relative to the location of the README.md.",
            "merged branch ruimarinho/sort_by_time (PR #3745)\n\nCommits\n-------\n\ndcf82d7 [Finder] Added sortBy options based on accessed, changed and modified times\n\nDiscussion\n----------\n\n[Finder] Added sortBy options based on accessed, changed and modified times\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes",
            "merged branch havvg/hotfix/propel-modelchoice-readonly-models (PR #3731)\n\nCommits\n-------\n\n64c7183 clean file docs in Propel1 fixtures\n97ba218 accept read-only models in ModelChoiceList\n\nDiscussion\n----------\n\naccept read-only models in ModelChoiceList\n\nPing @willdurand\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-03-30T08:57:14Z\n\n:+1:",
            "merged branch eriksencosta/cs-fixes (PR #3757)\n\nCommits\n-------\n\n2cac50d fixed CS (missing or misplaced license blocks)\n\nDiscussion\n----------\n\nfixed CS (missing or misplaced license blocks)",
            "moved event dispatcher classes to the EventDispatcher component",
            "merged branch symfony/event_dispatcher_classes_move (PR #3760)\n\nCommits\n-------\n\n93848be moved event dispatcher classes to the EventDispatcher component\n\nDiscussion\n----------\n\nmoved event dispatcher classes to the EventDispatcher component\n\nI have moved the two specialized event dispatcher classes from the FrameworkBundle bundle to the EventDispatcher component.\n\nIt makes them reusable outside the Symfony full-stack framework as they can be quite useful (people like @drak has a use for them for instance).\n\nIt makes the event dispatcher component *optionally* rely on DependencyInjection and HttpKernel for these classes, like what we have in other components.\n\nWhat do you think?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-02T16:02:01Z\n\nyou forgot to update the ``suggests`` section of the composer.json file. Otherwise, it is fine\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-02T16:06:34Z\n\nw00t, thanks @fabpot!\n\nI'm biased of course, but the optional dependency to `DependencyInjection` is a much more logical dependency that the previous one, to `FrameworkBundle`. It immediately shows of the DIC also.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-04-02T16:06:39Z\n\n+1, the  no dependencies  should really be changed to  minimal dependencies \n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-04-02T16:09:48Z\n\n@schmittjoh should properly be  minimal optional dependencies  otherwise people will be scared i think :) And reading  minimal dependencies  reminds me when trying to use a zf1 component standalone.\n\n+1\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-02T16:12:57Z\n\n@schmittjoh Honestly speaking, some of the Sf2 components do already have a few dependencies with each other, but where there are, they all minimal and rather logical anyway.  It's not like some libraries I could mention where one lib required about 10 deps which each rely on a bunch of other things - in the end, you need everything just for one feature :-P\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-02T16:14:28Z\n\n@drak there was not optional dependency to FrameworkBundle previously as no code of the component was using FrameworkBundle (the dependency was the other way)\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-02T16:18:31Z\n\n@stof, yeah but I was talking about other components like Security, DependencyInjection, HttpKernel for example which has a mix of optional and required deps.  It's not true to say all Sf2 components are 100% standalone in all cases.",
            "merged branch stof/twig_engine_move (PR #3761)\n\nCommits\n-------\n\ndbab7e1 [TwigBridge] Added a TwigEngine in the bridge\n\nDiscussion\n----------\n\n[TwigBridge] Added a TwigEngine in the bridge\n\nThis TwigEngine implements the interface available in the component.\nthe TwigBridge in TwigBundle now extends this class and provides only\nthe additional methods for the FrameworkBundle interface.\n\nThis will allow people to support the PhpEngine and Twig in their code more easily when using the component as they don't need to reimplement the class.\nI originally thought about when I helped @dragoonis to integrate the Templating component in the PPI framework 2.0 as he talked about adding the support for Twig later too.",
            "merged branch stof/autoloader_refactoring (PR #3756)\n\nCommits\n-------\n\nf1f1494 Added an exception when passing an invalid object to ApcClassLoader\nf5cb167 [ClassLoader] Added a DebugClassLoader using composition\n0e54a22 Updated the changelog\neae772e [ClassLoader] Added an ApcClassLoader\n4d1333f Changed the test autoloading to use the new autoloader\n09850bd [ClassLoader] Added a simplified PSR-0 ClassLoader\n\nDiscussion\n----------\n\nAutoloader refactoring\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/stof/symfony.png?branch=autoloader_refactoring)](http://travis-ci.org/stof/symfony)\n\nAs discussed in #3623, I added a new ClassLoader instead of modifying the UniversalClassLoader, to be able to use the method names without BC concerns. The new class works the same than the composer autoloader regarding the handling of fallbacks, to be able to reuse namespace maps generated by composer.\n\n```php\n<?php\n\n// autoload.php\nrequire_once __DIR__.'/vendor/symfony/class-loader/Symfony/Component/ClassLoader/ClassLoader.php';\n\n$loader = new Symfony\\Component\\ClassLoader\\ClassLoader();\n\n$map = require __DIR__.'/vendor/.composer/autoload_namespaces.php';\n$loader->addPrefixes($map);\n\n$loader->register();\n```\n\nDifferences with the composer class loader:\n\n- Composer's ``add`` method is named ``addPrefix`` in the Symfony ClassLoader\n- the methods related to the class map are removed as Symfony has a separate laoder for class maps\n- the ``addPrefixes`` method is added, accepting a namespace map.\n\nI also added a new ApcClassLoader which uses composition instead of inheriting from a class loader, which makes it far more easier to reuse (we could wrap a Composer autoloader with it for instance).\n\n```php\n<?php\n\n$composerLoader = require __DIR__.'/vendor/.composer/autoload.php';\n\n// no need to require the file manually as Composer already registered its autoloader\n$cachedLoader = new Symfony\\Component\\ClassLoader\\ApcClassLoader('autoload.my_app', $composerLoader);\n\n$cachedLoader->register();\n// unregister the Composer autoloader as we wrapped it in the ApcClassLoader\n$composerLoader->unregister();\n```\n\nTODO:\n\n- refactor the Debug class loader to use composition too to be able to support different class loaders\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-02T16:31:28Z\n\nCan you update the CHANGELOG and the UPGRADE file accordingly?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-02T16:47:43Z\n\nI added a note in the CHANGELOG. There is nothing to add in the UPGRADE file as the change is fully BC (I did not change the UniversalClassLoader at all so it can still be used).\n\nI'm working on the Debug loader right now so please wait a bit before merging\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-02T17:12:11Z\n\nHere is a new DebugClassLoader using composition too. this way, it is able to support the UniversalClassLoader, the ApcUniversalClassLoader (without dropping the use of APC as done previously), the new ClassLoader, the new ApcClassLoader and even the composer autoloader.\nI'm not sure about the use of ``method_exists`` as it could break if an autoloader implements a protected ``findFile`` method (crappy PHP :cry:) but hardcoding the supported classes would be a pain and requiring an interface would make the autoloaders more difficult to use (as the interface would need to be required first) and would drop the support of the composer autoloader.",
            "merged branch Tobion/PhpMatcherDumper-Improvement (PR #3763)\n\nCommits\n-------\n\n56c1e31 performance improvement in PhpMatcherDumper\n\nDiscussion\n----------\n\nperformance improvement in PhpMatcherDumper\n\nTests pass: yes\n\nThe code generation uses a string internally instead of an array. The array wasn't used for random access anyway.\nI also removed 4 unneeded iterations this way (when imploding, when merging and twice when applying the extra indention). A `preg_replace` could also be saved under certain circumstances by moving it.\nAnd there was a small code errror in line 139.",
            "merged branch drak/sessionmeta (PR #3718)\n\nCommits\n-------\n\n8a0e6d2 [HttpFoundation] Update changelog.\n4fc04fa [HttpFoundation] Renamed MetaBag to MetadataBag\n2f03b31 [HttpFoundation] Added the ability to change the session cookie lifetime on migrate().\n39141e8 [HttpFoundation] Add ability to force the lifetime (allows update of session cookie expiry-time)\nec3f88f [HttpFoundation] Add methods to interface\n402254c [HttpFoundation] Changed meta-data responsibility to SessionStorageInterface\nd9fd14f [HttpFoundation] Refactored for moved tests location.\n29bd787 [HttpFoundation] Added some basic meta-data to Session\n\nDiscussion\n----------\n\n[2.1][HttpFoundation] Added some basic meta-data to Session\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nReferences the following tickets: #2171\nTodo: -\n\nSession data is stored as an encoded string against a single id.  If we want to store meta-data about the session, that data has to be stored as part of the session data to ensure the meta-data can persist using any session save handler.\n\nThis patch makes it much easier to determine the logic of session expiration.  In general a session expiry can be dealt with by the gc handlers, however, in some applications more specific expiry rules might be required.\n\nSession expiry may also be more complex than a simple, session was idle for x seconds.  For example, in Zikula there are three security settings, Low, Medium and High.  The rules for session expiry are more complex as under the Medium setting, a session will expire after x minutes idle time, unless the rememberme option was ticked on login.  If so, the session will not idle.  This gives the user some control over their experience.  Under the high security setting, then there is no option, sessions will expire after the idle time is reached and login the UI has the rememberme checkbox removed.\n\nThe other advantage is that under this methodology, there can be a UI experience on expiry, like  Sorry, your session expired due to being idle for 10 minutes .\n\nKeeping in the spirit of Symfony2 Components, I am seeking to make session handling flexible enough to accommodate these general requirements without specifically covering expiration rules. It would mean that it would be up to the implementing application to specifcally check and expire session after starting it.\n\nExpiration might look something like this:\n\n    $session->start();\n    if (time() - $session->getMetadataBag()->getLastUpdate() > $maxIdleTime) {\n        $session->invalidate();\n        throw new SessionExpired();\n    }\n\nThis commit also brings the ability to change the `cookie_lifetime` when migrating a session. This means one could move from a default of browser only session cookie to long-lived cookie when changing from a anonymous to a logged in user for example.\n\n    $session->migrate($destroy, $lifetime);\n\n---------------------------------------------------------------------------\n\nby drak at 2012-03-30T18:18:43Z\n\n@fabpot I have removed [WIP] status.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-03-31T13:34:57Z\n\nNB: This PR has been rebased and the tests relocated as per recent master changes.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-03T02:16:43Z\n\n@fabpot - ping",
            "merged branch jfsimon/master (PR #3613)\n\nCommits\n-------\n\n2a90871 [Console] Removed previously introduced BC break.\n90a2a6e [Console] Undecorated formatter must update style stack too.\nbd7e01a [Console] Fixed output formatter test broken by new implementation.\na1add4b [Console] Updated output formatter to use style stack.\n4f298dd [Console] Added formatter style stack.\n93ffe54 [Console] Added getters to output formatter style (and its interface).\n48e6b49 [Console] Updated formatter test to match styles bug fix.\nad334b6 [Console] Fixed empty style appliance.\n31d5fe5 [Console] Fixed output formatter docblock.\n\nDiscussion\n----------\n\n[Console] Fixes formatter nested style appliance.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nWhen outputing styled text in the console, you sometimes face to a confusing behavior: style tags cannot be nested. If tou try something like `<fg=blue>Hello <fg=red>world</fg=red>!</fg=blue>`, the trailing `!` will not be styled.\n\nThis PR introduce a new FormatterOutputStyleStack to keep open/closed styles informations up-to-date. It slightly changes OutputFormatter implementation which no longer uses `OutputFormatterStyle::apply()` method, but the new `OutputFormatterStyle::getTerminalSequence()`.\n\n**Question:** I don't une `OutputFormatterStyleInterface` but `OutputFormatterStyle` to type `OutputFormatterStyleStack` methods arguments (to avoid BC break on the interface). Do you think it's right?\n\n**Notice:** I also needed to fix some tests broken by new implementation.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-03-16T10:27:56Z\n\nAdding new methods in an interface is a BC break for people implementing it\n\n---------------------------------------------------------------------------\n\nby jfsimon at 2012-03-16T10:33:21Z\n\n@stof indeed... this is a problem, should I remove them? If I do so, I should use `OutputFormatterStyle` instead of the interface to type arguments in `OutputFormatterStyleStack` right?",
            "merged branch maastermedia/translations (PR #3769)\n\nCommits\n-------\n\n2519544 slovenian translations updated to latest list\n\nDiscussion\n----------\n\nSlovenian translations updated to latest list\n\nThank you!",
            "merged branch pulzarraider/translation_update_sk (PR #3772)\n\nCommits\n-------\n\nb5de295 Slovak translation update\n\nDiscussion\n----------\n\n[FrameworkBundle] Slovak translation update",
            "merged branch stloyd/patch-3 (PR #3771)\n\nCommits\n-------\n\n1456e1e Polish translations sync\n\nDiscussion\n----------\n\n[Validators] Polish translations sync",
            "Revert  merged branch jfsimon/master (PR #3613) \n\nThis reverts commit 959158f9b94ecdd7e21af0f44683d0b57c8e8ec7, reversing\nchanges made to b9de0be3499c938926401219711353476ed100c9.",
            "merged branch stof/routing_options_import (PR #3775)\n\nCommits\n-------\n\n3c32569 [Routing] Added the possibility to define options for imported resources\n\nDiscussion\n----------\n\n[Routing] Added the possibility to define options for imported resources\n\nCloses #2772",
            "merged branch stof/en_translations (PR #3782)\n\nCommits\n-------\n\na2f65f7 [FrameworkBundle] Added the translation file for the en locale\n\nDiscussion\n----------\n\n[FrameworkBundle] Added the translation file for the en locale\n\nThis fixes the translation when the fallback is set to another language.\nThis new file can be used as reference by translators to find missing keys\nin their translations as every contributor will be able to update it when\nadding new keys.\n\nSee the discussion on #3773",
            "merged branch excelwebzone/hebrew_translations (PR #3787)\n\nCommits\n-------\n\nbec2f0f Fix hebrew grammar\n1b48abb Hebrew translation update\n\nDiscussion\n----------\n\nHebrew translation update",
            "merged branch marcw/feat-patch-changelog (PR #3788)\n\nCommits\n-------\n\nf5bc208 Updates CHANGELOG for commit f718859.\n\nDiscussion\n----------\n\nUpdates CHANGELOG for commit f718859.",
            "merged branch drak/caed (PR #3783)\n\nCommits\n-------\n\nd04638a [EventDispatcher] More logical positions for classes.\n\nDiscussion\n----------\n\n[EventDispatcher] More logical positions for classes.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-04T18:59:02Z\n\nah sorry, I looked at the patch too fast. Only the interface is moved",
            "[Yaml] fixed phpdoc (closes symfony/Yaml#3)",
            "merged branch drak/ismethod (PR #3800)\n\nCommits\n-------\n\n33881dd [HttpFoundation] Add more tests for casing\naec1339 [HttpFoundation] Coding standards.\nbf33bd4 update changelog\n3dc72cd Add isMethod() to Request object\n\nDiscussion\n----------\n\n[HttpFoundation] Add isMethod() to Request object.\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nJustification is for convenience.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2012-04-06T07:14:44Z\n\n+1",
            "merged branch Seldaek/validator_yaml (PR #3794)\n\nCommits\n-------\n\n8ceb569 Fix typo\n8702ea5 [Validator] Allow empty keys in the validation config\n\nDiscussion\n----------\n\n[Validator] Allow empty keys in the validation config\n\nThis allows you to just list fields that don't have validation rules (yet), for future reference it's kinda helpful. Right now if they're not commented out a fatal is thrown because null isn't an array.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-05T15:34:09Z\n\nCould you add a test please?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-04-05T15:34:48Z\n\nThe dummy key I added in the test makes it fail without the fix.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-05T15:46:54Z\n\nAh, that's perfect, I overlooked that. Thanks!",
            "merged 2.0",
            "merged branch ruimarinho/icu-48-fix (PR #3748)\n\nCommits\n-------\n\n8689e9c [WIP] [Locale] Fixes NumberFormatter tests failing when using ICU 4.8 or 4.8.1\n\nDiscussion\n----------\n\n[WIP] [Locale] Fixes NumberFormatter tests failing when using ICU 4.8 or 4.8.1.1\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: no\nTodo: fix DateFormatter\n\nThe ICU CLDR 2.0 data has been updated on ICU 4.8 and the same data set is used on version 4.8.1.1. The problem is related to [this commit](http://bugs.icu-project.org/trac/changeset?reponame=&new=31307%40icu%2Ftrunk%2Fsource%2Fdata%2Fcurr%2Fen.txt&old=31074%40icu%2Ftrunk%2Fsource%2Fdata%2Fcurr%2Fen.txt) which has since been updated with new data and subsequently shipped with version 49.\n\nThe `DateFormatter` tests are still failing - see this [gist](https://gist.github.com/2004d40e5167286028ea). Suggestions are welcomed on how to handle this part.\n\nTest results with PHP 5.4.0 with ICU 4.8.1.1 on OSX:\n\n````\nFAILURES!\nTests: 5917, Assertions: 12749, Failures: 26, Incomplete: 11, Skipped: 47.\n```\n\nwith this WIP patch:\n\n```\nFAILURES!\nTests: 5917, Assertions: 12749, Failures: 13, Incomplete: 11, Skipped: 47.\n```",
            "moved a fixture file",
            "merged branch jjbohn/feature/property-path-hasser (PR #3549)\n\nCommits\n-------\n\nb6ac1aa [FORM] Give PropertyPath ability to read hassers\n\nDiscussion\n----------\n\n[Form] Give PropertyPath ability to read hassers\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nUsing a `hasser` instead of `isser` for Boolean values is pretty common. I've found myself using `issers` a handful of times just to make an interface play nice with the form component, but the code reads funny now. I don't think we should be accounting for every possible `getter` variation, but I think this one is common enough that it warrants a discussion.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-03-11T08:25:31Z\n\nI tend to agree with with. What do you think @bschussek?\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-03-16T22:42:28Z\n\nI'm not so sure. There are lots of reasons to write a *hasser* that accepts an argument (i.e. `User::hasRole($role)`). Doesn't seem as clean as *issers* and *getters*.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-03-16T22:49:14Z\n\n> There are lots of reasons to write a hasser that accepts an argument\n\nMay be can check for 0 args as we are already using reflexion ?\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-03-16T22:55:43Z\n\nIn that case we should check that there are either 0 arguments or only optional arguments and also consider adding the same logic to the other varieties.\n\n---------------------------------------------------------------------------\n\nby jjbohn at 2012-03-16T23:37:47Z\n\nPassing arguments seems like a pretty big departure for PropertyPath. How would you annotate that? I'm not sure I see a common use case for needing arguments when mapping data to and from forms.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-03-16T23:50:22Z\n\n@jjbohn it is not about passing arguments but about using the hasser only if it does not have required arguments\n\n---------------------------------------------------------------------------\n\nby jjbohn at 2012-03-17T01:54:18Z\n\nAh. I see. I have a tendency to read @kriswallsmith comments wrong :D. I could see that but iirc, there's not any current check like this on the other accessors. Happy to add it though if there's a consensus.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-03-17T11:24:34Z\n\nWhat's the point is checking the hasser/getter/isser arguments. It's up to the developer to check if he can use them or not. Let's not complexify the code for this.\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-03-17T15:37:39Z\n\nMy concern is that someone writes a hasser method on their model that is not intended for use with the form component but it's called anyway, leading to WTFs.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-03T22:28:21Z\n\n@fabpot what's your decision about this ?\n\n@jjbohn you need to rebase your PR. It conflicts with master as tests have been moved\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-05T14:53:55Z\n\n@kriswallsmith is right. The check for 1 === $method->getNumberOfRequiredParameters() can (and should) easily be added to all of the if-clauses here.\n\nApart from that, I'm okay with adding this.",
            "merged branch jmikola/di-yaml-loader-test (PR #3808)\n\nCommits\n-------\n\n1c3e4ac [DependencyInjection] Fix Yaml file loader test\n\nDiscussion\n----------\n\n[DependencyInjection] Fix Yaml file loader test\n\nThis broke when 2.0 was recently merged into master with b9daae28476385d16984a729b9e7c8e30911fa23, as the Yaml fixture change from 24a0d0a2dcf334efc7d85f1c816c01d7fa4111f8 was not included.\n\nhttps://twitter.com/webmozart/status/188325579894947840",
            "merged branch eriksencosta/readme-fixes (PR #3814)\n\nCommits\n-------\n\nf3efea3 [Propel1Bridge][TwigBridge] fixed export instructions in the README files\n\nDiscussion\n----------\n\n[Propel1Bridge][TwigBridge] fixed export instructions in the README files",
            "merged branch eriksencosta/patch-1 (PR #3813)\n\nCommits\n-------\n\n46c7ae1 added composer.lock to .gitignore\n\nDiscussion\n----------\n\nadded composer.lock to .gitignore",
            "merged branch bschussek/issue3738 (PR #3807)\n\nCommits\n-------\n\n6584721 [Form] Improved labels generated by default from form names\n6e0b03a [Form] Fixed label of prototype in CollectionType\nfc342d1 Merge remote branch 'umpirsky/collection-name' into issue3738\nf91660d Added test for prototype label.\n\nDiscussion\n----------\n\n[Form] Fixed default label generated for the CollectionType prototype\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3738, #3739\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3738)\n\n(the fact that the build fails seems to origin from the broken master)",
            "merged branch chmielot/3446-empty-multiple-entity-choice (PR #3734)\n\nCommits\n-------\n\na430f3d [#3446] [Form] Fix getChoicesForValues of EntityChoiceList on empty values\n\nDiscussion\n----------\n\n[Form] Fix reverseTransform on multiple entity form type\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3446, #3727\nTodo: -\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-03T23:05:55Z\n\n@bschussek ping\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-03T23:06:45Z\n\nThis is an alternate implementation for #3727\n\n---------------------------------------------------------------------------\n\nby chmielot at 2012-04-04T13:47:27Z\n\nOK, this is another possibility to fix this issue with working tests. What do you think about this?\n\n---------------------------------------------------------------------------\n\nby chmielot at 2012-04-04T13:51:27Z\n\nOK, just done.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-04T13:51:39Z\n\n@beberlei @bschussek ping\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-06T18:50:37Z\n\n@fabpot :+1:",
            "merged branch eriksencosta/cs-fixes (PR #3816)\n\nCommits\n-------\n\nabd59c3 Merge branch 'master' into cs-fixes\nf5f0506 [TwigBundle] fixed CS\n\nDiscussion\n----------\n\nCS fixes",
            "fixed CS",
            "merged branch eriksencosta/pt_BR-translations (PR #3817)\n\nCommits\n-------\n\nbf51a58 [FrameworkBundle] fixed pt_BR translations (added commas to take a breath :)\ndc94e27 [FrameworkBundle] synced pt_BR translations\n\nDiscussion\n----------\n\nsynced and fixed pt_BR translations",
            "merged branch jakzal/FilesystemTests (PR #3811)\n\nCommits\n-------\n\n100e97e [Filesystem] Fixed warnings in makePathRelative().\nf5f5c21 [Filesystem] Fixed typos in the docblocks.\nd4243a2 [Filesystem] Fixed a bug in remove being unable to remove symlinks to unexisting file or directory.\n11a676d [Filesystem] Added unit tests for mirror method.\n8c94069 [Filesystem] Added unit tests for isAbsolutePath method.\n2ee4b88 [Filesystem] Added unit tests for makePathRelative method.\n21860cb [Filesystem] Added unit tests for symlink method.\na041feb [Filesystem] Added unit tests for rename method.\n8071859 [Filesystem] Added unit tests for chmod method.\nbba0080 [Filesystem] Added unit tests for remove method.\n8e861b7 [Filesystem] Introduced workspace directory to limit complexity of tests.\na91e200 [Filesystem] Added unit tests for touch method.\n7e297db [Filesystem] Added unit tests for mkdir method.\n6ac5486 [Filesystem] Added unit tests for copy method.\n1c833e7 [Filesystem] Added missing docblock comment.\n\nDiscussion\n----------\n\n[Filesystem] Fixed a bug in remove() being unable to unlink broken symlinks\n\nWhile working on test coverage for Filesystem class I discovered a bug in remove() method.\n\nBefore removing a file a check is made if it exists:\n\n    if (!file_exists($file)) {\n        continue;\n    }\n\nProblem is [file_exists()](http://php.net/file_exists) returns false if link's target file doesn't exist. Therefore remove() will fail to delete a directory containing a broken link. Solution is to handle links a bit different:\n\n    if (!file_exists($file) && !is_link($file)) {\n        continue;\n    }\n\nAdditionally, this PR improves test coverage of Filesystem component.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\n---------------------------------------------------------------------------\n\nby cordoval at 2012-04-07T00:55:59Z\n\n\u270c.|\u2022\u0361\u02d8\u203f\u2022\u0361\u02d8|.\u270c\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-07T06:12:34Z\n\nTests do not pass for me:\n\n    PHPUnit 3.6.10 by Sebastian Bergmann.\n\n    Configuration read from /Users/fabien/work/symfony/git/symfony/phpunit.xml.dist\n\n    .........................EE.......\n\n    Time: 0 seconds, Memory: 5.25Mb\n\n    There were 2 errors:\n\n    1) Symfony\\Component\\Filesystem\\Tests\\FilesystemTest::testMakePathRelative with data set #0 ('/var/lib/symfony/src/Symfony/', '/var/lib/symfony/src/Symfony/Component', '../')\n    Uninitialized string offset: 29\n\n    .../rc/Symfony/Component/Filesystem/Filesystem.php:183\n    .../rc/Symfony/Component/Filesystem/Tests/FilesystemTest.php:434\n\n    2) Symfony\\Component\\Filesystem\\Tests\\FilesystemTest::testMakePathRelative with data set #1 ('var/lib/symfony/', 'var/lib/symfony/src/Symfony/Component', '../../../')\n    Uninitialized string offset: 16\n\n    .../rc/Symfony/Component/Filesystem/Filesystem.php:183\n    .../rc/Symfony/Component/Filesystem/Tests/FilesystemTest.php:434\n\n    FAILURES!\n    Tests: 34, Assertions: 67, Errors: 2.\n\n---------------------------------------------------------------------------\n\nby jakzal at 2012-04-07T07:26:15Z\n\nSorry for this. For some reason my PHP error reporting level was to low to catch this...\n\nShould be fixed now but I needed to modify the makePathRelative() (this bug existed before).",
            "merged branch bschussek/issue3661 (PR #3821)\n\nCommits\n-------\n\ne0ce6b4 [Form] Fixed required value guessed by ValidatorTypeGuesser\n\nDiscussion\n----------\n\n[Form] Fixed required value guessed by ValidatorTypeGuesser\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no*\nSymfony2 tests pass: yes\nFixes the following tickets: #3661\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3661)\n\nThe documentation states that a field is set to required if constrained with NotBlank or NotNull and to not required otherwise. Due to a bug this was not the case and fields were always required. This is now fixed.\n\nThe consequence is that some fields that were required before by default are not required anymore. The only difference is that the HTML5  required  attribute disappears, because server-side validation did not occur before anyway.",
            "[Process] added a note about user-defined error exist codes",
            "merged branch jakzal/SetCookieWithMultipleCookiesBugFix (PR #3823)\n\nCommits\n-------\n\n7f92833 [BrowserKit] Fixed cs.\ndf3da28 [BrowserKit] Using assertNull instead of assertEquals.\n87890d3 [BrowserKit] Fixed CookieJar issue being unable to parse multiple cookies from Set-Cookie.\n\nDiscussion\n----------\n\n[BrowserKit] Fixed CookieJar being unable to parse multiple cookies\n\nFix proposition for #3109\n\nMy fix splits value of *Set-Cookie* header by comma. Than it checks each extracted part if it starts with a cookie-name (token). If check is positive cookie is added to the list. Otherwise it's appended to the previous value. First element is always added to the list.\n\n[rfc6265](http://tools.ietf.org/html/rfc6265) defines cookie-name with token:\n\n    cookie-name = token\n    token = <token, defined in [RFC2616], Section 2.2>\n\ntoken is defined in [rfc2616](http://tools.ietf.org/html/rfc2616#section-2.2) as follows:\n\n    token = 1*<any CHAR except CTLs or separators>\n    CHAR = <any US-ASCII character (octets 0 - 127)>\n    separators =  (  |  )  |  <  |  >  |  @ \n                  |  ,  |  ;  |  :  |  \\  | < >\n                  |  /  |  [  |  ]  |  ?  |  = \n                  |  {  |  }  | SP | HT\n\nThat means cookie-name can be built out of following set of characters: *! # $ % & ' * + - . ^ _ ` | ~ 0-9 A-Z a-z*\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes",
            "merged branch jakzal/FilesystemBugFix (PR #3828)\n\nCommits\n-------\n\n22e2ad8 [Filesystem] Fixed relative path calculation for end path which is a subdirectory of the start path.\nbc93787 [Filesystem] Fixed relative path calculation for paths with various combinations of trailing directory separators.\n\nDiscussion\n----------\n\n[Filesystem] Fixed relative path calculation\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes",
            "merged branch eriksencosta/test-fixes (PR #3830)\n\nCommits\n-------\n\nfdee352 [TwigBridge] updated suggested packages\ndad1750 [TwigBridge] updated TestCase as an abstract class\n140ac20 [TwigBridge] fixed bootstrap\n\nDiscussion\n----------\n\n[TwigBridge] updated Composer suggested packages and test fixes\n\n---------------------------------------------------------------------------\n\nby eriksencosta at 2012-04-08T06:13:53Z\n\nRebased.",
            "merged 2.0",
            "merged branch ruimarinho/exception_css_tweaks (PR #3827)\n\nCommits\n-------\n\nfad114b Tweaked the exceptions layout CSS in order to display the error message even when wrapped around <pre> tags\n\nDiscussion\n----------\n\nTweaked the exceptions layout CSS in order to display the error message even when wrapped around <pre> tags\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: ![Build status](https://secure.travis-ci.org/ruimarinho/symfony.png?branch=exception_css_tweaks)\nFixes the following tickets: -\nTodo: -\n\nEver been in a situation when you're debugging code wrapped around `<pre>` tags and that code throws an exception? If you're familiar with this screenshot, you have :-) ![Image](http://i.imgur.com/dwxdD.png)\n\nThis PR is just a little tweak to the exceptions layout CSS in order to allow your to view the exception message. It also fixes a word break when messages are too long. ![Image 2](http://i.imgur.com/whxZv.png).\n\nThe build is currently failing due to an unmerged patch from the 2.0 branch.",
            "merged branch marcw/feat-twig-lint (PR #3804)\n\nCommits\n-------\n\n8726ade Adds more features to twig:lint command\n1d7e9d9 Adds a linter command for templates\n\nDiscussion\n----------\n\nAdds a linter command for templates\n\nLet's this PR be stoffed. ;)\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-06T15:48:18Z\n\nChecking a single file is very limited. Checking a whole directory would be more useful, wouldn't it?\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-04-06T17:56:57Z\n\nI think you should provide a way to validate all templates for a given bundle, something like:\n\n    php app/console twig:lint @MySuperBundle\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-04-06T18:03:45Z\n\nWouldnt it be better to throw some kind of exception if the lint is erroneous?\n\n---------------------------------------------------------------------------\n\nby marcw at 2012-04-07T11:22:34Z\n\n@Tobion @willdurand  You can do that by combining unix tools.\n@henrikbjorn Why ?\n\n---------------------------------------------------------------------------\n\nby marcw at 2012-04-07T11:27:11Z\n\nUpdated.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-04-07T13:15:53Z\n\n@marcw it would be indeed nice to have support for a bundle/directory out of the box as some of the Symfony2 users might not be running unix or know the right commands to make this work.\n\nI could help you with a PR in your repo if you want.\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-04-07T18:55:34Z\n\n@marcw as the console component will catch them and convert them into the right error code, also will display what went wrong instead of just dieing.\n\n---------------------------------------------------------------------------\n\nby marcw at 2012-04-08T09:15:37Z\n\nUpdated with all comments and requested features.",
            "[TwigBundle] tweaked previous merge",
            "[TwigBundle] added correct file name in twig:lint exception reporting",
            "[TwigBundle] simplified code",
            "merged branch alessandro1997/issue-3848 (PR #3849)\n\nCommits\n-------\n\n78d6f3f [Filesystem] Written missing tests.\n1998f3f [Filesystem] Added silence operator to rename().\n7ce5a52 [Filesystem] Fixed docs for rename().\n3f2865b [Filesystem] rename() throws RuntimeException on error (fixes #3848).\n\nDiscussion\n----------\n\n[Filesystem] rename() throws RuntimeException on error.\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3848\n\n---------------------------------------------------------------------------\n\nby alessandro1997 at 2012-04-09T19:32:23Z\n\nI have a doubt: I can't write any tests since the rename() function generates a warning if an error occurs. Should I use the silence operator or what else?\n\nMaybe @stof could enlighten me?",
            "merged branch vicb/url_decoding (PR #3780)\n\nCommits\n-------\n\n55014a6 [Routing] Request methods always return a raw path, fix the matcher to decode only once\nd17ba0e Fixed base URL detection when request URI contains encoded chars\n\nDiscussion\n----------\n\n[RFC] Fix issues with url decoding\n\nRelated: #2324, #2963, #2962, #2579\n\n### This PR fixes two issues:\n\n* `+` in paths were turned to     by `urldecode()`\n* `urldecode()` was called a few times (and a different number of times according to which part of the path was handled, see #2962 for details).\n\n### BC Breaks:\n\n* `Request::getPathInfo()`, `Request::getBaseUrl()` and `Request::getBasePath` now return the raw (encoded) path (vs a decoded path before this PR). You should check any calls to these methods in your code and wrap them in `rawurldecode()` if needed.\n* The `UrlMatcher` now decodes the URL only once (i.e. variable are no more decoded twice) and use `rawurldecode()` to support `+`.\n\n### Notes:\n\n* @arnaud-lb, the first commit is based on your #2963 so I put your name for the commit,\n\n### Comment history from the original PR:\n\n@vicb\n\n**The state before this PR:**\n\n* getRequestUri() returns an **encoded** value\n* getPathInfo() returns a **decoded** value\n* getBaseUrl() returns a **decoded** value\n* getBasePath() returns a **decoded** value\n\nThe decoded value is wrong as `urldecode` is used in place of `rawurldecode` turning `+` into a space character (#2324).\n\nThe matcher starts by urldecoing the path (it is already decoded as explained right before) and then urldecodes each variable one more time.\n\nWe end up with a path being decoded twice and variables being decoded three times.\n\n`Request::getUri()` calls both `getBaseUrl()` and `getPathInfo()` so that the return URI is **decoded**.\n\n**The state after the PR:**\n\n* getRequestUri() returns an **encoded** value\n* getPathInfo() returns an **encoded** value\n* getBaseUrl() returns an **encoded** value\n* getBasePath() returns an **encoded** value\n\nWe are consistent and we have the raw values everywhere - there is no (easy) way to get the encoded value back once it has been decoded as it is done in the current code.\n\nThe matcher relies on an encoded value and decode the value only once (using `rawurldecode` to support `+`s).\n\nSo basically this PR:\n\n* fix a bug - URL with `+` are now supported,\n* makes paths consistent - encoded values everywhere, including `getUri()`\n* makes variables consistent: they are decoded only once - the same as query string parameters.\n\nThere are some BC breaks:\n\n* getPathInfo() returns an encoded value vs a decoded one before,\n* getBaseUrl() returns an encoded value vs a decoded one before.\n* getBasePath() returns an encoded value vs a decoded one before.\n\nAny code relying on the output of one of the 2 previous methods should be checked and upgraded if needed. I am interested in the use cases where your code need to be updated.\n\n@Seldaek\n\nI checked a few projects and this is what I found (usage of getPathInfo & getBaseUrl):\n\n- One use case of getPathInfo to check if the url started with `/something/` which is a prefix used for all  overlay  content which had to be treated differently somewhere => most likely unaffected\n- One use case for checking path prefixes by regex in our [CorsBundle](https://github.com/nelmio/NelmioCorsBundle/blob/master/EventListener/CorsListener.php#L52-56) => potentially affected depending on the complexity of regexes I'd say\n\n@vicb\n\nThanks @Seldaek for reporting the use cases. You second case would be solved by `rawurldecode`ing the path info which is a minimal change.\n\nAnd in general I think we have to expand to doc to specify the url format that should be used.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-04T13:42:21Z\n\nI'll squash the commits before this gets merged but for now it make the review easier.",
            "merged branch pminnieur/patch-2 (PR #3852)\n\nCommits\n-------\n\na56bea6 removed `param_converter` from symfony-1.0.xsd\n\nDiscussion\n----------\n\nremoved `param_converter` from symfony-1.0.xsd\n\nI think its a relict of the SensioFrameworkExtraBundle?",
            "removed obsolete files",
            "merged branch yethee/sync_ru_trans (PR #3863)\n\nCommits\n-------\n\n362ac78 [FrameworkBundle] Sync Russian translations\n\nDiscussion\n----------\n\n[FrameworkBundle] Sync Russian translations",
            "merged branch bschussek/issue3278 (PR #3860)\n\nCommits\n-------\n\n004c873 [Form] Fixed display of DateTimeType and TimeType when displayed as  single_text  and  with_seconds  is false\n\nDiscussion\n----------\n\n[Form] Fixed display of [Date]TimeType when displayed as  single_text  and  with_seconds  is false\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3278\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3278)",
            "merged branch bschussek/issue3839 (PR #3859)\n\nCommits\n-------\n\n61d792e [Form] Changed checkboxes in an expanded multiple-choice field to not include the choice index\nbc9bc4a [Form] Fixed behavior of expanded multiple-choice field when submitted without ticks\n2e07256 [Form] Simplified choice list API\n2645120 [Form] Fixed handling of expanded choice lists, checkboxes and radio buttons with empty values (  )\n\nDiscussion\n----------\n\n[Form] Fixed handling of empty values in checkbox/radio/choice type\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3839, #3366\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3839)\n\nThis PR fixes the processing of checkboxes and radio buttons with empty  value  attributes as well as of expanded choice forms with empty values. Additionally, some unnecessary complexity has been removed of the new ChoiceList API.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-10T13:56:12Z\n\nYou probably need to change some things in the CHANGELOG file too\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-10T14:39:24Z\n\nNo. This is an update of a previous post-2.0 PR, the CHANGELOG is still accurate.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-10T14:46:47Z\n\nwell, doesn't it require changes to the description of previous changes related to the ChoiceList ? It does in the UPGRADE file so it is weird if the CHANGELOG does not require any change.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-10T14:56:05Z\n\nFeel free to check yourself :)",
            "merged branch bschussek/issue3732 (PR #3819)\n\nCommits\n-------\n\nc4e68a3 [Form] Moved logic of addXxx()/removeXxx() methods to the PropertyPath class\n\nDiscussion\n----------\n\n[Form] Moved logic of addXxx()/removeXxx() methods to the PropertyPath class\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3732\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3732)\n\nThe addXxx()/removeXxx() methods should now be called correctly in ChoiceType and CollectionType.\n\nPropertyPath now favors addXxx()/removeXxx() over setXxx() for collections. For example:\n\n```\n$propertyPath = new PropertyPath('article.tags');\n\n// Tries to use addTag()/removeTag() and only uses setTags() (et al.)\n// if not found\n$propertyPath->setValue($article, $tags);\n```\n\nFor other languages than English or very irregular plurals, a custom singular can be set by separating it with a pipe:\n\n```\n$propertyPath = new PropertyPath('article.genera|genus');\n```\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-07T12:40:39Z\n\nAgain, the failing build is not my fault.",
            "merged 2.0",
            "merged branch jfsimon/master (PR #3869)\n\nCommits\n-------\n\n5b5b2c8 [Console] Fixed and added formatter tests.\n4ee8cfb [Console] Updated formatter to use style stack.\nbd1d28c [Console] Added formatter style stack tests.\nb63bd0e [Console] Added formatter style stack.\n\nDiscussion\n----------\n\n[Console] Fixed formatter nested style appliance in a proper way.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nWhen outputing styled text in the console, you sometimes face to a confusing behavior: style tags cannot be nested. If tou try something like `<fg=blue>Hello <fg=red>world</fg=red>!</fg=blue>`, the trailing `!` will not be styled.\n\nThis PR introduce a new FormatterOutputStyleStack to keep open/closed styles informations up-to-date.",
            "[Console] fixed CS",
            "[Console] fixed typo",
            "merged 2.0",
            "merged branch hhamon/command_description_fixes (PR #3871)\n\nCommits\n-------\n\nb4f0a04 [TwigBundle] fixed twig:lint command description.\n809933f [FrameworkBundle] fixed translation:update command description.\n\nDiscussion\n----------\n\nCommand description fixes\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -",
            "merged branch Tobion/patch-1 (PR #3870)\n\nCommits\n-------\n\n810b2e1 fix formatting of changelog-2.1.md\n\nDiscussion\n----------\n\nfix formatting of changelog-2.1.md\n\nFix indention for correct display. Also a few language fixes.",
            "merged branch bschussek/issue3635 (PR #3820)\n\nCommits\n-------\n\n65aa387 [Form] Fixed index generation in EntityChoiceList if ID is not an integer\n\nDiscussion\n----------\n\n[Form] Fixed index generation in EntityChoiceList if ID is not an integer\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3635\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3635)",
            "merged branch kimhemsoe/xcache_classloader (PR #3809)\n\nCommits\n-------\n\nc36651b Fixed spelling error\nf123684 Removed leftover from c/p\nb74a5d4 Updated to new cache loader pattern.\n7e66908 Added XCache class loader\n\nDiscussion\n----------\n\n[ClassLoader] Added XCache class loader\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nThere is no tests, as it seems there is no way to use xcache storage functions from CLI.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-06T20:12:09Z\n\nPlease implement a XcacheClassLoader following the same pattern than the new ApcClassLoader instead\n\n---------------------------------------------------------------------------\n\nby cordoval at 2012-04-07T14:20:47Z\n\n- should include tests\n- should include documentation (will you also update the component documentation for this new class?)\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-07T14:25:00Z\n\n@cordoval the PR explains why there is no tests: xcache canot be used in the CLI.\n\n---------------------------------------------------------------------------\n\nby cordoval at 2012-04-07T14:26:43Z\n\nok @stof sorry it said it seemed not to be possible, i thought it was possible but I am wrong.\n\n---------------------------------------------------------------------------\n\nby kimhemsoe at 2012-04-07T15:01:24Z\n\n@cordoval My english is really horrible. I would not mind if someone else could do that task for me. We also need to add doc for the new ApcClassLoader.\n\n---------------------------------------------------------------------------\n\nby cordoval at 2012-04-07T15:03:57Z\n\nI wish you can explain me more then about this class and how to use it in code so then I can write easily the documentation :D deal?\n\n---------------------------------------------------------------------------\n\nby kimhemsoe at 2012-04-07T15:21:25Z\n\nDeal :P\n\nThe XcacheClassLoader and ApcClassLoader replaces the old ApcUniversalClassLoader.\nThey giving us support for using another loader then UniversalClassLoader, without duplicating the cache layer.\nAslong it have a public function findFile($class) method.\n\n $loader = new ClassLoader();\n\n// register classes with namespaces\n$loader->add('Symfony\\Component', __DIR__.'/component');\n$loader->add('Symfony', __DIR__.'/framework');\n\n$cachedLoader = new XcacheClassLoader('my_prefix', $loader);\n\n// activate the cached autoloader\n$cachedLoader->register();\n\nThink that is more or less the essence of this.\n\n---------------------------------------------------------------------------\n\nby cordoval at 2012-04-09T08:28:53Z\n\nit is not add but registerNamespace right?\n\nso the main idea is to get rid of the restriction to use Apc with Universal loader\n\nwhat is the comparative advantage between APC and Xcache?\n\n---------------------------------------------------------------------------\n\nby kimhemsoe at 2012-04-09T08:55:23Z\n\nYes if the $loader (class finder) were to be a instance UniversalClassLoader.\n\nYes the main idea is to be able to reuse the cache layer with any class loader there obey to the one restriction.\n\nDifference between apc and xcache and why to use what is coming down to taste and your setup. We use xcache as APC have some issues in fastcgi setups. when we upgrade to php54 at somepoint we get to chance to move to php-fpm wich solves these issues. Short story: Slightly out of scope for any documentation in here :-P",
            "updated CHANGELOG",
            "merged branch tvlooy/GetSetMethodNormalizer (PR #3582)\n\nCommits\n-------\n\n039ff6f allow more control on GetSetMethodNormalizer by using callback functions and an ignoreAttributes list\n\nDiscussion\n----------\n\nallow more control on GetSetMethodNormalizer\n\nHere is an other attempt. You would use this as follows:\n\n    $serializer = new \\Symfony\\Component\\Serializer\\Serializer(\n        array(new \\Symfony\\Component\\Serializer\\Normalizer\\GetSetMethodNormalizer()),\n        array('json' => new \\Symfony\\Component\\Serializer\\Encoder\\JsonEncoder())\n    );\n\n    $callbacks = array('books' => function ($books) { return NULL; });\n\n    return new Response(\n        $serializer->serialize($paginator->getRows(), 'json', $callbacks),\n        200,\n        array('Content-Type' => 'application/json')\n    );\n\nBesides of returning NULL, you could also do things like:\n\n    $callbacks = array(\n        'books' => function ($books) {\n            $ids = array();\n            foreach ($books as $book) {\n                $ids[] = $book->getId();\n            }\n            return $ids;\n        },\n        'author' => function ($author) {\n            return $author->getId();\n        },\n        'creationDate' => function ($creationDate) {\n            return $creationDate->format('d/m/Y');\n        },\n    );\n\nThe commit is not complete yet. But at this point I am interested in your opinions.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2012-03-12T22:53:18Z\n\nin general i agree that using a callback is a good solution to provide more power without complicating the API or implementation in this case.\n\nplease add a test case, this should also help illustrate how this can be used in practice.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-03-13T04:54:33Z\n\nNote that your change breaks the API defined by the interface, i.e. someone using this method needs to type-hint the serializer implementation, not the interface.\n\nIt also adds a parameter to the public API of the serializer which will only work with one specific normalizer. What if another normalizer needs additional information, should another parameter be added to the serialize method? What about deserialization?\n\nBottom line is, the serializer component was simply not designed for this kind of thing. I've tried to make it more flexible before creating the bundle, but some things simply cannot be fixed in a sane way.\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-03-13T06:07:45Z\n\nWould just adding a setCallbacks() to the GetSetMethodNormalizer be a better solution? That doesn't touch the API. I will try to write some tests this evening.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-03-13T16:22:50Z\n\nThat would definitely be better.\n\nYou would then need to retrieve the normalizer instance before calling ``serialize`` on the serializer which also leaves a stale taste, but I have no other solution for now.\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-03-13T21:32:26Z\n\nSo, this should be it then. Yet an other usage example:\n\n    $normalizer = new \\Symfony\\Component\\Serializer\\Normalizer\\GetSetMethodNormalizer();\n    $normalizer->setCallbacks(\n        array(\n            'books' => function ($books) {\n                $ids = array();\n                foreach ($books as $book) {\n                    $ids[] = $book->getId();\n                }\n                return $ids;\n            },\n        )\n    );\n    $serializer = new \\Symfony\\Component\\Serializer\\Serializer(\n        array($normalizer),\n        array('json' => new \\Symfony\\Component\\Serializer\\Encoder\\JsonEncoder())\n    );\n\n    return new Response(\n        $serializer->serialize($paginator->getRows(), 'json'),\n        200,\n        array('Content-Type' => 'application/json')\n    );\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-03-18T21:16:48Z\n\nAnything else needed for this to get pulled in?\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-03-19T18:33:58Z\n\nHm, I like to keep it that way because I like the fact that not passing a callable will result in a warning instead of silently skipping it. You don't get that behaviour by treating it as null.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-03-19T23:15:37Z\n\nI was unclear: the code should throw an exception when an element is not callable, this is why `null` will not be supported any more (it is not a callback as the `setCallbacks` indicate).\n\nThey are several way to support the former behavior:\n\n* the cb can return a defined interface,\n* the cb can throw a defines exc,\n* by adding a `setIgnoredAttributes` method\n\nPlease also squash your commits.\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-03-20T21:02:06Z\n\nYes, I like the setIgnoredAttributes solution. I changed it and squashed the commits.\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-03-26T20:07:36Z\n\nsome improvements and squashed the commits\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-03T22:36:15Z\n\n@tvlooy Please rebase your branch. It conflicts with master because of the move of tests.\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-04-04T07:43:47Z\n\n@stof I will do it on saturday, if that is ok with you.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-10T18:29:30Z\n\nIs it mergeable now? ping @Seldaek, @schmittjoh.\n\n---------------------------------------------------------------------------\n\nby tvlooy at 2012-04-10T18:55:04Z\n\nyes, it should be",
            "merged branch richardmiller/validation_path_upgrade (PR #3874)\n\nCommits\n-------\n\n6433ca0 Removed duplicated content\n60d9aff Added info on changes to setting validation subpath to UPGRADE-2.1.md\n\nDiscussion\n----------\n\nAdded info on changes to setting validation subpath to UPGRADE-2.1.md\n\nAs per GH-3424\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-11T11:05:00Z\n\nyou duplicated it\n\n---------------------------------------------------------------------------\n\nby richardmiller at 2012-04-11T11:07:17Z\n\nI've closed the other one - there was a mess with the commits and an unnecessary merge.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-11T11:30:00Z\n\n@richardmiller I'm talking about the content\n\n---------------------------------------------------------------------------\n\nby richardmiller at 2012-04-11T11:35:40Z\n\n@stof, ah sorry misunderstood, one of those days it seems :)\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-11T11:42:21Z\n\nI should have commented inline to make it more clear",
            "merged branch kmohrf/ticket_2827_validator_mail_A_RR_DNS_hostcheck (PR #3799)\n\nCommits\n-------\n\nf617e02 [Validator] added less-strict email host verification\n\nDiscussion\n----------\n\n[Validator] added less-strict email host verification\n\nuhhhhh, my first pull request :>. uhm... tell me if i did something wrong :)\n\n#### Request info\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes... well,not really (i guess master branch is not passing - at least i didnt broke the email test)\nFixes the following tickets: #2827\n\n#### Description\nNew checkHost attribute in email constraint will make the validator check for only one of MX, A or AAAA DNS resource records to verify it as a valid email address.",
            "merged branch vicb/routing_improvements (PR #3876)\n\nCommits\n-------\n\n9307f5b [Routing] Implement bug fixes and enhancements\n\nDiscussion\n----------\n\n[Routing] Implement bug fixes and enhancements (from @Tobion)\n\nThis is mainly #3754 with some minor formatting changes.\n\nOriginal PR message from @Tobion:\n\nHere a list of what is fixed. Tests pass.\n\n1. The `RouteCollection` states\n\n    > it overrides existing routes with the same name defined in the instance or its children and parents.\n\n    But this is not true for `->addCollection()` but only for `->add()`. addCollection does not remove routes with the same name in its parents (only in its children). I don't think this is on purpose.\n    So I fixed it by making sure there can only be one route per name in all connected collections. This way we can also simplify `->get()` and `->remove()` and improve performance since we can stop iterating recursively when we found the first and only route with a given name.\n    See `testUniqueRouteWithGivenName` that fails in the old code but works now.\n\n2. There was an bug with `$collection->addPrefix('0');` that didn't apply the starting slash. Fixed and test case added.\n\n3. There is an issue with `->get()` that I also think is not intended. Currently it allows to access a sub-RouteCollection by specifing $name as array integer index. But according to the PHPdoc you should only be allowed to receive a Route instance and not a RouteCollection.\n    See `testGet` that has a failing test case. I fixed this behavior.\n\n4. Then I recognized that `->addCollection` depended on the order of applying them. So\n\n        $collection1->addCollection($collection2, '/b');\n        $collection2->addCollection($collection3, '/c');\n        $rootCollection->addCollection($collection1, '/a');\n\n    had a different pattern result from\n\n        $collection2->addCollection($collection3, '/c');\n        $collection1->addCollection($collection2, '/b');\n        $rootCollection->addCollection($collection1, '/a');\n\n    Fixed and test case added. See `testPatternDoesNotChangeWhenDefinitionOrderChanges`.\n\n5. PHP could have ended in an infinite loop when one tried to add an existing RouteCollection to the tree. Fixed by throwing an exception when this situation is detected. See tests `testCannotSelfJoinCollection` and `testCannotAddExistingCollectionToTree`.\n\n6. I made `setParent()` private because its not useful outside the class itself. And `remove()` also removes the route from its parents. Added public `getRoot()` method.\n\n7. The `Route` class throwed a PHP warning when trying to set an empty requirement.\n\n8. Fixed issue #3777. See discussion there for more info. I fixed it by removing the over-optimization that was introduced in 91f4097a0905e but didn't work properly. One cannot reorder the route definitions, as is was done, because then the wrong route might me matched before the correct one. If one really wanted to do that, it would require to calculate the intersection of two regular expressions to determine if they can be grouped together (a tool that would also be useful to check whether a route is unreachable, see discussion in #3678) We can only safely optimize routes with a static prefix within a RouteCollection, not across multiple RouteCollections with different parents.  This is especially true when using variables and regular expressions requirements.\nI could however apply an optimization that was missing yet: Collections with a single route were missing the static prefix optimization with `0 === strpos()`.\n\n9. Fixed an issue where the `PhpMatcherDumper` would not apply the optimization if the root collection to be dumped has a prefix itself. For this I had to rewrite `compileRoutes`. It is also much easier to understand now. Addionally I added many comments and PHPdoc because complex recursive methods like this are still hard to grasp.\nI added a test case for this (`url_matcher3.php`).\n\n10. Fix that `Route::compile` needs to recompile a route once it is modified. Otherwise we have a wrong result. Test case added.",
            "merged branch jakzal/FilesystemMirrorCleanup (PR #3844)\n\nCommits\n-------\n\nefad5d5 [Filesystem] Prevented infiite loop on windows while calling mirror on symlink. Added test for mirroring symlinks.\n\nDiscussion\n----------\n\n[Filesystem] Prevented infinite loop on windows while mirrorring symlinks\n\nFirst check for filetype in *mirror()* method is:\n\n    if (is_link($file)) {\n        $this->symlink($file, $target);\n\nlater we see:\n\n    } elseif (is_file($file) || ($copyOnWindows && is_link($file))) {\n        $this->copy($file, $target, isset($options['override']) ? $options['override'] : false);\n\nThe later check for links on windows (*$copyOnWindows && is_link($file)*) won't ever get called. Calling *symlink()* in *mirror()* on windows would lead to calling *mirror()* again.\n\nNote that I didn't actually try running it on windows platform. I added a test for mirroring symlinks (non-windows test). I think it'd be good if someone added some windows specific tests to this class.\n\nI also modified the target path:\n\n    $target = $targetDir.'/'.str_replace($originDir.DIRECTORY_SEPARATOR, '', $file->getPathname());\n\nIt didn't use DIRECTORY_SEPARATOR and is equivalent to:\n\n    $target = str_replace($originDir, $targetDir, $file->getPathname());\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~",
            "merged branch hason/validator (PR #552)\n\nCommits\n-------\n\nf9a486e [Validator] Added support for pluralization of the SizeLengthValidator\nc0715f1 [FrameworkBundle], [TwigBundle] added support for form error message pluralization\n7a6376e [Form] added support for error message pluralization\n345981f [Validator] added support for plural messages\n\nDiscussion\n----------\n\n[Validator] Added support for plural error messages\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nTodo: create translations for en and update others (FrameworkBundle)\n\n[![Build Status](https://secure.travis-ci.org/hason/symfony.png?branch=validator)](http://travis-ci.org/hason/symfony)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011-05-14T20:41:01Z\n\n@bschussek: What's your opinion?\n\n---------------------------------------------------------------------------\n\nby stof at 2011-09-04T13:14:29Z\n\n@hason could you rebase your branch on top of master and update the PR ?\n\nYou also need to change the messages in the constraint that uses the pluralization to a pluralized format.\n\n---------------------------------------------------------------------------\n\nby stof at 2011-10-16T18:06:22Z\n\n@hason ping\n\n---------------------------------------------------------------------------\n\nby stof at 2011-11-11T14:58:19Z\n\n@hason ping again\n\n---------------------------------------------------------------------------\n\nby stof at 2011-12-12T20:39:10Z\n\n@hason ping again. Can you update your PR ?\n\n---------------------------------------------------------------------------\n\nby hason at 2011-12-12T21:29:14Z\n\n@stof I hope that I will update PR this week.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-01-15T19:07:32Z\n\nLooks good to me.\n\n---------------------------------------------------------------------------\n\nby canni at 2012-02-02T17:28:54Z\n\n@hason can you update this PR and squash commits, it conflicts with current master\n\n---------------------------------------------------------------------------\n\nby hason at 2012-02-09T07:21:41Z\n\n@stof, @canni Rebased.\n\nWhat is the best solution for the translation of messages?\n\n1. Change messages in the classes and all xliff files?\n2. Keep messages in the classes and change all xliff files?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-02-09T08:19:41Z\n\nThe constraints contain the en message so you will need to modify them to update the message\n\n---------------------------------------------------------------------------\n\nby hason at 2012-02-09T08:55:55Z\n\nI prefer second option. The Validator component should be decoupled from the Translation component. The constraints contain the en message which is also the key for Translation component. We should create validators.en.xlf in the FrameworkBundle for en message. I think that this is better solution. What do you think?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-04T02:22:02Z\n\n@hason Please rebase your branch. It conflicts with master because of the move of the tests\n\n@fabpot ping",
            "merged branch richardmiller/bc_break_changes_in_upgrade (PR #3877)\n\nCommits\n-------\n\nf23b4fa Added some bc breaks from the changelog into UPGRADE-2.1.md\n\nDiscussion\n----------\n\nAdded some bc breaks from the changelog into UPGRADE-2.1.md",
            "merged branch bschussek/issue3354 (PR #3789)\n\nCommits\n-------\n\n8329087 [Form] Moved calculation of ChoiceType options to closures\n5adec19 [Form] Fixed typos\ncb87ccb [Form] Failing test for empty_data option BC break\nb733045 [Form] Fixed option support in Form component\n\nDiscussion\n----------\n\n[Form] Fixed option support in Form component\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: #3354, #3512, #3685, #3694\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3354)\n\nThis PR also introduces a new helper `DefaultOptions` for solving option graphs. It accepts default options to be defined on various layers of your class hierarchy. These options can then be merged with the options passed by the user. This is called *resolving*.\n\nThe important feature of this utility is that it lets you define *lazy options*. Lazy options are specified using closures that are evaluated when resolving and thus have access to the resolved values of other (potentially lazy) options. The class detects cyclic option dependencies and fails with an exception in this case.\n\nFor more information, check the inline documentation of the `DefaultOptions` class and the UPGRADE file.\n\n@fabpot: Might this be worth a separate component? (in total the utility consists of five classes with two associated tests)\n\n---------------------------------------------------------------------------\n\nby beberlei at 2012-04-05T08:54:10Z\n\n The important feature of this utility is that it lets you define lazy options. Lazy options are specified using closures \n\nWhat about options that are closures? are those differentiated?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-05T08:57:35Z\n\n@beberlei Yes. Closures for lazy options receive a Symfony\\Component\\Form\\Options instance as first argument. All other closures are interpreted as normal values.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-05T11:09:49Z\n\nI'm wondering if these classes should go in the Config component. My issue with it is that it would add a required dependency to the Config component and that the Config component mixes many different things in it already (the loader part, the resource part, the definition part...)\n\n---------------------------------------------------------------------------\n\nby sstok at 2012-04-06T13:36:36Z\n\nSharing the Options class would be great, and its more then one class so why not give it its own Component folder?\nFilesystem is just one class, and that has its own folder.\n\nGreat job on the class bschussek :clap:\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-10T12:32:34Z\n\n@fabpot Any input?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-10T13:54:13Z\n\n@fabpot Apart from the decision about the final location of DefaultOptions et al., could you merge this soon? This would make my work a bit easier since this one is a blocker.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-10T18:08:18Z\n\n@bschussek: Can you rebase on master? I will merge afterwards. Thanks.",
            "merged branch Tobion/named-variables (PR #3884)\n\nCommits\n-------\n\nf666836 [Routing] simplified regex with named variables\n\nDiscussion\n----------\n\n[Routing] simplified regex with named variables\n\nTest pass: yes\nBC break: no\n\nSince PHP 5.2.2 subpatterns in regex can be simplified from `?P<name>` to `?<name>` (see http://www.php.net/manual/en/regexp.reference.subpatterns.php).\nThis enhances readability.",
            "merged branch richardmiller/bc_break_changes_in_upgrade (PR #3883)\n\nCommits\n-------\n\n7276a04 Added some more bc breaks to UPGRADE-2.1.md from the changelog\n\nDiscussion\n----------\n\nAdded some more bc breaks to UPGRADE-2.1.md from the changelog",
            "merged branch richardmiller/fixing_typos_in_changelog (PR #3885)\n\nCommits\n-------\n\n3686799 A few changes from proofreading CHANGELOG-2.1md\n\nDiscussion\n----------\n\nA few changes from proofreading CHANGELOG-2.1md",
            "[HttpFoundation] added missing variable declaration",
            "merged branch willdurand/fix-form-type-doc (PR #3880)\n\nCommits\n-------\n\n6f56dfc [Form] Fixed DateType default options\n779d3bb [Form] Fixed documentation, and the DateType (default options)\n\nDiscussion\n----------\n\n[Form] Fixed documentation, and the DateType (default options)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-11T16:48:04Z\n\nThat breaks the tests.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-04-11T16:50:35Z\n\nI got an error with the Form test suite before to write this patch..\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-04-11T16:53:30Z\n\nNevermind, I can see broken tests.. I'm on, sorry\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-04-11T16:57:52Z\n\n@fabpot fixed.\n\n```\nOK, but incomplete or skipped tests!\nTests: 945, Assertions: 1439, Incomplete: 11.\n```",
            "merged branch jalliot/acl_proxies-2 (PR #3826)\n\nCommits\n-------\n\n6483d88 [Security][ACL] Fixed ObjectIdentity::fromDomainObject and UserSecurityIdentity::from(Account|Token) when working with proxies\n\nDiscussion\n----------\n\n[WIP] Fixed ACL handling of Doctrine proxies\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/jalliot/symfony.png?branch=acl_proxies-2)](http://travis-ci.org/jalliot/symfony)\nFixes the following tickets: #3818, #2611, #2056, #2048, #2035 and probably others\nTodo: Fix tests, update changelog\n\nHi,\n\nAs per @fabpot's request, here is #3818 ported to `master`.\n\n> Here is a new attempt to fix all the issues related to Symfony ACL identities and Doctrine proxies.\n> It only fixes the issue for Doctrine >=2.2 (older versions of Doctrine will still not work properly with ACL because `Doctrine\\Common\\Util\\ClassUtils` didn't exist before and proxy naming strategy was not consistent between all Doctrine implementations (ORM/ODM/etc.)).\n\n/cc @schmittjoh @beberlei\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-04-09T00:07:52Z\n\nI'm -1 on adding a dependency on the Doctrine class.\n\nThe naming scheme was designed in a generic way, we should just copy the method.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-09T00:13:07Z\n\n@schmittjoh The ACL component requires Doctrine DBAL already (and as such Common) so I don't think this is really an issue at the moment. If (when?) the component is refactored to be decoupled from Doctrine, then maybe we will have to change that.\nBut I can also copy the class (where?) if you think it is better :)\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-04-09T01:01:27Z\n\nI'd suggest ``Symfony\\Component\\Security\\Core\\Util\\ClassUtils``.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-09T11:16:19Z\n\n@fabpot @schmittjoh It's done: I've backported the ClassUtils class and its tests from Doctrine Common into the Security component. Maybe this PR can be merged into 2.0 as well now, what do you think?\n\n---------------------------------------------------------------------------\n\nby oscherler at 2012-04-11T06:27:20Z\n\nThere seems to be a consensus that ACLs don\u2019t (fully?) work with Doctrine < 2.2, i.e. in Symfony 2.0. Can it therefore be documented somewhere, typically on the main documentation page on the subject? http://symfony.com/doc/current/cookbook/security/acl.html\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-11T07:36:25Z\n\n@oscherler You can make ACL work with Doctrine < 2.2 and without this patch if you use something like this code (note this is for ORM only but it can be adapted for ODM; it also assumes that your identifier can be retrieved with `getId()`):\n\n``` php\n<?php\n\nuse Doctrine\\ORM\\Proxy\\Proxy;\nuse Symfony\\Component\\Acl\\Domain\\ObjectIdentity;\n\n$domainObject = ... // some Doctrine entity (maybe a proxy...)\n\nif ($domainObject instanceof Proxy) {\n    $objectIdentity = new ObjectIdentity($domainObject->getId(), get_parent_class($domainObject));\n} else {\n    $objectIdentity = new ObjectIdentity($domainObject->getId(), get_class($domainObject));\n}\n```\nIt is ugly but it is the only way to get the correct identity for < 2.2. Never use `ObjectIdentity::fromDomainObject` with a proxy and without this patch!\nThe same applies to `UserSecurityIdentity`.\n\nThis should indeed be documented in the doc for 2.0. /cc @weaverryan\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-04-11T22:34:37Z\n\nI just fixed the tests and squashed the commits.\nI didn't write a test for `UserSecurityIdentity::fromAccount` and `fromToken` because I didn't really have time to look for a clean solution (without creating a full UserInterface implementation for instance...). Anyway the test for `ObjectIdentity::fromDomainObject` should be enough I guess...\nDon't hesitate to add one if you think it is necessary. /cc @schmittjoh\n\n@fabpot Apart from @beberlei approval to use MIT license, I think it is ready for merge.",
            "merged branch kimhemsoe/process_deadlock (PR #3888)\n\nCommits\n-------\n\n89a5c1a [process] Added destructor to process to make sure handles are always closed in the right order.\n\nDiscussion\n----------\n\n[process] Added destructor to process to make sure handles are always cl...\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -",
            "merged branch Tobion/generator-cache (PR #3892)\n\nCommits\n-------\n\n03d30fd [Routing] remove duplicated cache of compiled routes\n\nDiscussion\n----------\n\n[Routing] remove duplicated cache of compiled routes\n\nThe UrlGenerator caches compiled routes for generating URLs. But the Route class caches it's compiled route itself as long as it does not get modified. So compiled routes are cached twice which makes no sense in my opinion.\n\nTest pass: yes\nBC break: no",
            "merged branch bschussek/issue3539 (PR #3898)\n\nCommits\n-------\n\n2e5182f [Form] Clarified the CHANGELOG entry about the activation of addXxx()/removeXxx() methods\n\nDiscussion\n----------\n\n[Form] Clarified the CHANGELOG entry about the activation of addXxx()/removeXxx() methods",
            "merged branch jalliot/patch-1 (PR #3895)\n\nCommits\n-------\n\n36d96e6 Update changelog for latest fix in ACL component\n\nDiscussion\n----------\n\nUpdate changelog for latest fix in ACL component",
            "merged branch Tobion/generator-dumper (PR #3894)\n\nCommits\n-------\n\n382b083 [Routing] improved generated class by PhpGeneratorDumper\n27a05f4 [Routing] small optimization of PhpGeneratorDumper\n\nDiscussion\n----------\n\n[Routing] improved PhpGeneratorDumper\n\nTest pass: yes\nBC break: no\n\nThe first commit only replaces arrays with strings and makes some cosmetic changes, so that it's more readable. This makes the `PhpGeneratorDumper` consistent in style with `PhpMatcherDumper` that I fixed recently and should slightly improve performance of the generation of the class.\n\nThe second commit changes the output of the `PhpGeneratorDumper->dump` and tries to optimize the resulting class that is used to generate URLs. It's best explained with an example.\n\nBefore my changes:\n\n```php\nclass ProjectUrlGenerator extends Symfony\\Component\\Routing\\Generator\\UrlGenerator\n{\n    static private $declaredRouteNames = array(\n       'Test' => true,\n       'Test2' => true,\n    );\n\n    /**\n     * Constructor.\n     */\n    public function __construct(RequestContext $context)\n    {\n        $this->context = $context;\n    }\n\n    public function generate($name, $parameters = array(), $absolute = false)\n    {\n        if (!isset(self::$declaredRouteNames[$name])) {\n            throw new RouteNotFoundException(sprintf('Route  %s  does not exist.', $name));\n        }\n\n        $escapedName = str_replace('.', '__', $name);\n\n        list($variables, $defaults, $requirements, $tokens) = $this->{'get'.$escapedName.'RouteInfo'}();\n\n        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $absolute);\n    }\n\n    private function getTestRouteInfo()\n    {\n        return array(array (  0 => 'foo',), array (), array (), array (  0 =>   array (    0 => 'variable',    1 => '/',    2 => '[^/]+?',    3 => 'foo',  ),  1 =>   array (    0 => 'text',    1 => '/testing',  ),));\n    }\n\n    private function getTest2RouteInfo()\n    {\n        return array(array (), array (), array (), array (  0 =>   array (    0 => 'text',    1 => '/testing2',  ),));\n    }\n}\n```\n\nAfter my changes in second commit:\n\n```php\nclass ProjectUrlGenerator extends Symfony\\Component\\Routing\\Generator\\UrlGenerator\n{\n    static private $declaredRoutes = array(\n        'Test' => array (  0 =>   array (    0 => 'foo',  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]+?',      3 => 'foo',    ),    1 =>     array (      0 => 'text',      1 => '/testing',    ),  ),),\n        'Test2' => array (  0 =>   array (  ),  1 =>   array (  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/testing2',    ),  ),),\n    );\n\n    /**\n     * Constructor.\n     */\n    public function __construct(RequestContext $context)\n    {\n        $this->context = $context;\n    }\n\n    public function generate($name, $parameters = array(), $absolute = false)\n    {\n        if (!isset(self::$declaredRoutes[$name])) {\n            throw new RouteNotFoundException(sprintf('Route  %s  does not exist.', $name));\n        }\n\n        list($variables, $defaults, $requirements, $tokens) = self::$declaredRoutes[$name];\n\n        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $absolute);\n    }\n}\n```\n\nAs you can see, there is no need to escape the route name and invoke a special method anymore. Instead the route properties are included in the static route array directly, that existed anyway. Is also easier to read as defined routes and their properties are in the same place.",
            "merged 2.0",
            "merged branch drak/eventsubscribersnotice (PR #3902)\n\nCommits\n-------\n\ne199049 [EventDispatcher] Fixed edge case not covered by tests that generated E_NOTICES\n\nDiscussion\n----------\n\n[EventDispatcher] Fixed edge case not covered by tests.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nFixes case not covered by tests.",
            "merged branch willdurand/add-all-method-to-form-builder (PR #3886)\n\nCommits\n-------\n\nbe2456b [Form]\u00a0[Tests] Used assertCount()\n4120f13 [Form] Added all() method to the FormBuilder class\n\nDiscussion\n----------\n\n[Form] Added all() method to the FormBuilder class\n\nIn order to perform some introspection on a FormBuilder instance,\nwe need to be able to get its children. Almost everything is accessible\nin this class, but the children are not.\n\nThis PR adds a all() method to respect the current API (get(), remove(),\n...).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-12T09:54:04Z\n\n:+1:",
            "merged branch Tobion/route-compiler (PR #3891)\n\nCommits\n-------\n\ncb47b03 [Routing] small refactoring + language fixes\n\nDiscussion\n----------\n\n[Routing] small refactoring + language fixes\n\ntests pass, no bc break\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-12T06:42:19Z\n\n@Tobion could you squash your commits ?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-12T19:25:03Z\n\ndone",
            "merged branch drak/kernel_dicb (PR #3909)\n\nCommits\n-------\n\n82bbf3b [HttpKernel] Allow override of ContainerBuilder instance used to build container\n\nDiscussion\n----------\n\n[HttpKernel] Allow override of ContainerBuilder class in Kernel\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nThe ContainerBuilder class is hard coded into the `buildContainer()` method and is therefor not extensible.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-13T04:54:28Z\n\nI would definitely prefer a `getContainerBuilder()` that returns a container builder. But why would you want to do that?\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T05:12:13Z\n\n@fabpot - The use case is to override the behaviour of the compilation that is performed by the kernel on the container.  There is no way to override the compile() method called on the builder because the class is created hard in `Kernel::buildContainer()`. This was the simplest way to change it without other cascading changes.\n\nIf we had a method which returned a container builder instance, would it just be something that creates a container builder, or acts as a getter on a property? The reason I ask is there is no real need to have a container builder persisting in a property, so a method that just returns a `new ContainerBuilder()` would also work but then we have to deal with the constructor as there is no way to set a ParameterBag on a container and `Kernel::buildContainer()` needs that.\n\nBasically, my reasoning is that since this particular container is just a throwaway, it seems ok to control the class name that was used to create the throwaway builder.\n\nSo are you suggesting doing this instead?\n\n    protected function getContainerBuilder()\n    {\n        return new ContainerBuilder(new ParameterBag($this->getKernelParameters()));\n    }\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-04-13T05:22:20Z\n\nYes this was my suggestion. But are you sure you cannot solve your problems with compiler passes?\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T05:38:29Z\n\n@fabpot, yes, this particular issue can't be solved by compiler passes.  I'll adapt the PR.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T05:46:03Z\n\n@fabpot, amended as per your suggestion.",
            "[FrameworkBundle] fixed name collision",
            "merged branch Tobion/httpkernel-test (PR #3906)\n\nCommits\n-------\n\nc331f4a HttpKernel test fix on windows\n\nDiscussion\n----------\n\nHttpKernel test fix on windows\n\nThe changes in `StopwatchEventTest` are only for consistency with the other tests in this file.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T04:16:19Z\n\n@fabpot - This seems to be an eternal problem with the these particular tests. I wonder if there is a better way to do this.  How about a simple greater than condition to show time has elapsed?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-13T04:33:04Z\n\nThe tests are fine. I didn't change them. Just made it more consistent.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T04:49:20Z\n\nYes, but if you look at the history of these tests files, they are constantly being tweaked for whatever reason (and they often fail on windows builds randomly). This is a clear indication the tests are not robust and a different approach is probably warranted if it can be found.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T04:52:53Z\n\n@Tobion - regarding the commit message, what does  fix  refer to if the tests are fine?\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-04-13T04:56:39Z\n\nThe test in `KernelTest` did not pass for me. That's fixed.",
            "merged branch asm89/configurable-session-save-path (PR #3912)\n\nCommits\n-------\n\nc0e7ee9 [FrameworkBundle] Make session save path configurable\n\nDiscussion\n----------\n\n[FrameworkBundle] Make session save path configurable\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=configurable-session-save-path)](http://travis-ci.org/asm89/symfony)\n\nMakes it possible to configure the session save path. It still defaults to saving sessions in the kernel cache dir. This might not be appropriate if you want to keep your user sessions after deploying your application.\n\nAs promised to @fabpot I will also do a PR on the docs explaining why this might be useful.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T10:16:17Z\n\nIt might be good to default this value to `%kernel.cache_dir%/sessions`.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2012-04-13T10:30:58Z\n\n@drak https://github.com/symfony/symfony/pull/3912/files#L0R184\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-13T10:31:57Z\n\n@stloyd need my eyes checked :-P",
            "merged branch bschussek/remove-form-validator (PR #3797)\n\nCommits\n-------\n\n6df7a72 [Form] Deprecated FormValidatorInterface and moved implementations to event listeners\n\nDiscussion\n----------\n\n[Form] Removed FormValidatorInterface and notion of form validators\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=remove-form-validator)\n\nThis cleanup has been lying on a disk for a while, so here it goes.\n\nThe FormValidatorInterface has been removed in order to reduce the complexity of the Form API. The same expressivity can be achieved by using POST_BIND event listeners. The POST_VALIDATE event introduced in e6577debf6892afeb2d10eb8a3a0fae0d55c9545 can be replaced by a POST_BIND listener with low priority.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-11T15:19:24Z\n\nRebased on master.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-04-12T12:46:14Z\n\n@fabpot Can this be merged?",
            "merged branch vicb/profiler/listener (PR #3920)\n\nCommits\n-------\n\nb611db8 [Profiler] Sub requests are not Main requests\n2551270 [Profiler] Minimize the number of Profile writes\n\nDiscussion\n----------\n\n[HttpKernel] Profiler Listener tweaks\n\n* `setParent()` is called in [`Profile::addChild()`](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profile.php#L180) in 2.1\n* The profiles are now only saved once only in the listener (either at the end of the main request or on an exception)\n* The profiles are now only saved once only in the TraceableEventDispatcher (twice for the root profile when there is a kernel.terminate' event\n\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler/listener)](http://travis-ci.org/vicb/symfony)\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-04-13T11:15:25Z\n\nNot so sure for the save part... I'll double check",
            "merged branch jmikola/doctrine-unique-proxies (PR #3933)\n\nCommits\n-------\n\n41bdf26 [DoctrineBridge] Initialize proxies in UniqueEntityValidator\n\nDiscussion\n----------\n\n[DoctrineBridge] Initialize proxies in UniqueEntityValidator\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=master)](http://travis-ci.org/jmikola/symfony)\nFixes the following tickets: #3163\n\n---------------------------------------------------------------------------\n\nby stof at 2012-04-13T18:17:57Z\n\nI think you should use ``$em->initializeObject($value)`` instead (which is a no-op for other objects)\n\n---------------------------------------------------------------------------\n\nby jmikola at 2012-04-13T18:24:22Z\n\n@stof: Thanks for the suggestion. I wasn't aware of that method.",
            "merged branch stof/form_cleanup (PR #3931)\n\nCommits\n-------\n\n538819a [Form] Fixed the tests\n9e956a8 [Form] Cleaned the FormValidatorInterface deprecation\n\nDiscussion\n----------\n\n[Form] Cleaned the FormValidatorInterface deprecation\n\nThis fixes my feedback on #3797\n\n[![Build Status](https://secure.travis-ci.org/stof/symfony.png?branch=form_cleanup)](http://travis-ci.org/stof/symfony)",
            "merged 2.0",
            "merged branch stloyd/tests (PR #3941)\n\nCommits\n-------\n\nbfc1aaf [Tests] Use proper assertions\n\nDiscussion\n----------\n\n[Tests] Use proper assertions\n\n* `assertEquals(false, *)` -> `assertFalse(*)`\n* `assertEquals(true, *)` -> `assertTrue(*)`\n* `assertEquals(null, *)` -> `assertNull(*)`\n* `assertEquals(x, count(*))` -> `assertCount(x, *)`\n* `assertSame(false, *)` -> `assertFalse(*)`\n* `assertSame(true, *)` -> `assertTrue(*)`\n* `assertSame(null, *)` -> `assertNull(*)`\n\n![Travis CI](https://secure.travis-ci.org/stloyd/symfony.png?branch=tests)\n\n---------------------------------------------------------------------------\n\nby drak at 2012-04-14T08:44:16Z\n\nThis is nice, but the commit message leads one to believe bugs are beings fixed, when actually it's just about using PHPUnit shortcut/covenience methods.",
            "[Routing] removed code that was not ready to be pushed",
            "[Console] fixed typo",
            "merged branch drak/sessionarray (PR #3735)\n\nCommits\n-------\n\n8dd2c27 [HttpFoundation] Further micro-optimization.\n54c5d5e [HttpFoundation] Micro-optimisation.\n\nDiscussion\n----------\n\n[HttpFoundation] Micro-optimisation.\n\nRef #3729\n\n---------------------------------------------------------------------------\n\nby robocoder at 2012-03-30T11:45:02Z\n\nIf you pre-flip your $validOptions arrays, you can use isset() instead of in_array() in the loop.\n\nThis changes the performance from O(m * n) to O(m).\n\n---------------------------------------------------------------------------\n\nby drak at 2012-03-30T11:53:24Z\n\n@robocoder What is the expense of the array_flip though?\n\n---------------------------------------------------------------------------\n\nby robocoder at 2012-03-30T11:56:21Z\n\nWhy would you use array_flip if the array doesn't change?  Change $validOptions = array('x', 'y', ...) to $validOptions = array('x' => 0, 'y' => 0, ...), then change the in_array() to use isset().\n\n---------------------------------------------------------------------------\n\nby stof at 2012-03-30T11:57:08Z\n\n@drak a loop. But it will be done only once before the other loop so it will be O(n + m) instead of O(m * n)\n\n---------------------------------------------------------------------------\n\nby drak at 2012-03-30T12:00:47Z\n\nOk :)",
            "merged branch vicb/component_tests (PR #3736)\n\nCommits\n-------\n\n234ce4d [PhpUnit] Fix the path to the boostrap files in the components\n\nDiscussion\n----------\n\n[PhpUnit] Fix the path to the boostrap files in the components",
            "merged branch ocubom/fix-empty-string-argument (PR #3728)\n\nCommits\n-------\n\naac6ad8 [Console] avoid warning parsing empty string argument\n\nDiscussion\n----------\n\n[Console] avoid warning parsing empty string argument\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nWhen passing an empty string argument (`app/console add:list  item1      item3 `) the argument parser generates an invalid offset warning and ignores the argument. The parsing usually fails with some kind of invalid number of arguments error.\n\nThis fix the error cheching the empty string case and storing it as an argument",
            "merged branch havvg/master (PR #3700)\n\nCommits\n-------\n\ndd4d46a add limit to logger explosion\n\nDiscussion\n----------\n\nadd limit to logger explosion\n\nThis limit is required to display complete query with e.g.  array  type in it.\n\nping @willdurand",
            "merged branch robocoder/patch-1 (PR #3701)\n\nCommits\n-------\n\n33382cd Add exception-controller attribute to xsd\n\nDiscussion\n----------\n\nAdd exception-controller attribute to xsd",
            "merged branch schmittjoh/configurableExtension (PR #3632)\n\nCommits\n-------\n\n3f2b917 added a configurable extension base class\n\nDiscussion\n----------\n\nadded a configurable extension base class\n\nThis is mostly a convenience class which provides first-class integration with the Config/Definition component.",
            "merged branch nervo/patch-1 (PR #3684)\n\nCommits\n-------\n\n09054f7 [Validator] Fix switch breaking in max/min length for constraint guesser, when a  Symfony\\Component\\Validator\\Constraints\\Type  constraint type is not in numeric types array\n\nDiscussion\n----------\n\n[Validator] Fix form type guesser\n\n[Validator] Fix switch breaking in max/min length for constraint guesser, when a  Symfony\\Component\\Validator\\Constraints\\Type  constraint type is not in numeric types array\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-03-23T14:19:27Z\n\nYou're right, thanks for the fix (I did break it !)",
            "merged branch IamPersistent/collection (PR #2416)\n\nCommits\n-------\n\nfbd2a0e make suggested changes for default value\nc507b1d update variable name to match the option name\nb53f000 add the ability to set the form prototype name in CollectionType. this will aid in handling nested collections in forms\n\nDiscussion\n----------\n\n[Form] Collection\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: [#1324](https://github.com/symfony/symfony/issues/1324)\n\nadd the ability to set the form prototype name in CollectionType. this will aid in handling nested collections in forms\n\n---------------------------------------------------------------------------\n\nby IamPersistent at 2011/10/17 02:54:45 -0700\n\nActually, as an afterthought, I looked over at the issues and this is basically https://github.com/symfony/symfony/issues/1324 just adding an extra option instead of using the prototype option.\n\n@stloyd, my thought was handling the case where someone was  clever  enough to set the 'prototype_name' option to   . But I could be over-thinking :)\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/10/17 03:00:23 -0700\n\n@IamPersistent IMO if someone is setting this option, he should be aware of that problem, also AFAIK `$$$$` could be *valid* name too ;-)\n\n---------------------------------------------------------------------------\n\nby IamPersistent at 2011/10/17 03:02:14 -0700\n\n@stloyd, I'm fine with changing it, I'll wait to see what everyone else has to say about this request vs using the prototype option for the name in 1324\n\n---------------------------------------------------------------------------\n\nby IamPersistent at 2011/10/17 03:28:49 -0700\n\n@stloyd, @stof, I made the suggested changes, now I suppose, let the debate begin over PR1324 vs this\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/10/17 03:47:53 -0700\n\nIMO this PR makes changing prototype name in more clean way, so I would prefer this one over that proposed in #1324.",
            "bumped versions of Twig and Swiftmailer",
            "[Translation] added support for more than one fallback locale",
            "merged branch danielholmes/patch-2 (PR #2302)\n\nCommits\n-------\n\n84808f4 [DependencyInjection] Removed unused property\n\nDiscussion\n----------\n\n[DependencyInjection] Removed unused property\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -",
            "Fix data serialization when using process isolation (closes #614)",
            "moved {globals} in TestCaseMethod so that the condition can be executed",
            "Fix typos",
            "added -c as an alias for --configuration",
            "added support for directory for the --configuration option",
            "Revert  Create output directory when it does not exist \n\nThis reverts commit 909e849ac18b11afa7637a7b173ab918d270fb98.",
            "Fix PHPT test suite\n\nPHPT tests are skipped if the word  skip  is found in the output.\nCurrently, no tests are skipped as the SKIPIF section never display  skip .\n\nThe fix is to switch from die() to echo (optional but there is no need to die)\nand to prefix all messages with  skip ",
            "Create output directory when it does not exist",
            "Remove usage of ob_end_clean() in TestCaseMethod.tpl.dist to avoid possible notices",
            "Change the XML configuration paths to be converted to absolute paths based on the directory of the XML file instead of the current working directory.\n\nIt makes the configuration paths more predictable.\n\nBefore the patch, you were forced to run the phpunit command from the same directory as the XML configuration file.\nFor instance, to run the PHPUnit tests, you must use the following:\n\n  cd PHPUnit/Tests/\n  phpunit --configuration=configuration.xml\n\nAfter the patch, the above still works, but you can also run the tests from the main PHPUnit directory:\n\n  cd ../..\n  phpunit --configuration=PHPUnit/Tests/configuration.xml\n\nThe patch also changes the paths contained in the current test suite of PHPUnit, as it assumes that PHPUnit is run from the XML file directory.",
            "[Process] added Process::getExitCodeText() (closes #2818)",
            "merged branch drak/session_interface2 (PR #3343)\n\nCommits\n-------\n\n09b348d [HttpFoundation] Forward compatibility tweak to allows direct use of \\SessionHandlerInterface\n\nDiscussion\n----------\n\n[HttpFoundation] Forward compatibility tweak\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -",
            "merged branch bschussek/issue3022 (PR #3322)\n\nCommits\n-------\n\ncde34fd [Form] Throwing an AlreadyBoundException in `add`, `remove`, `setParent`, `bind` and `setData` if called on a bound form\n\nDiscussion\n----------\n\n[Form] Throwing an AlreadyBoundException in `add`, `remove`, `setParent`, `bind` and `setData` if called on a bound form\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: **yes**\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3022)\n\nThe above mentioned methods now throw an exception because when invoked on a bound form they might cause strange side effects. You should rely on event listeners instead of modifying bound forms.\n\nSee also #3022",
            "[FrameworkBundle] added a missing class in the compile cache",
            "merged branch henrikbjorn/doctrine-unique-validator (PR #3275)\n\nCommits\n-------\n\n928e352 Change the array access used in UniqueEntityValidator\n\nDiscussion\n----------\n\n[DoctrineBridge] Change the array access used in UniqueEntityValidator\n\nMongoDB ODM Cursor does not implement ArrayAccess and therefor using\n`$result[0]` will fail. `reset()` rewinds the array and returns the\nfirst element value.\n\nDoctrineMongoDBBundle#77\n\n/cc @beberlei\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-02-06T08:09:25Z\n\nMade a mistake, the findBy call would still return a cursor. Changed the findBy to findOneBy we only want one result anyway.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-02-06T08:11:26Z\n\nfindOneBy is wrong: you will not detect duplicate anymore if you return a single element\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-02-06T08:28:03Z\n\n@stof before it was only the first result that was used anyway so if it had found 3 results it would only have used the first one. Performance is apparently the biggest issue with findOneBy so this have been reverted.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-02-06T08:31:17Z\n\n@henrikbjorn no, we use other results too: if ``count()`` is not 1, the validation fails\n\n---------------------------------------------------------------------------\n\nby stof at 2012-02-06T08:36:06Z\n\nBtw, running the testsuite would have tell you there is an issue when using findOneBy as it was breaking a test :)\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-02-06T10:45:44Z\n\nWhy doesn't this validator use a SELECT COUNT anyway?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-02-06T10:57:00Z\n\n@bschussek because we need to check if an existing value is for the same object or another one. Otherwise, the valdiation would fail as soon as you are editing an existing object without changing the unique value\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-02-06T11:03:40Z\n\n@stof @bschussek other changes that should be done? Else it should be ready to be merged ?\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-02-06T13:00:57Z\n\n@stof done an rebased.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-02-06T13:04:44Z\n\n:+1: /cc @fabpot",
            "merged branch bschussek/issue3161 (PR #3253)\n\nCommits\n-------\n\n9a4e22e [Form] Disallowed infinity in NumberToLocalizedStringTransformer\n\nDiscussion\n----------\n\n[Form] Disallowed infinity in NumberToLocalizedStringTransformer\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3161\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3161)",
            "merged branch canni/simple_fixes (PR #3252)\n\nCommits\n-------\n\nd02f172 Code readability fixes, removed unneeded typecasts and checks\n\nDiscussion\n----------\n\nCode readability fixes, removed unneeded typecasts and checks\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -",
            "merged branch bschussek/issue1540 (PR #3239)\n\nCommits\n-------\n\n9b0245b [Form] Made prefix of adder and remover method configurable. Adders and removers are not called if  by_reference  is disabled.\n49d1464 [Form] Implemented MergeCollectionListener which calls addXxx() and removeXxx() in your model if found\n7837f50 [Form] Added FormUtil::singularify()\n\nDiscussion\n----------\n\n[Form] Forms now call addXxx() and removeXxx() in your model\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1540\nTodo: adapt documentation\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue1540)\n\nAdds functionality for calling `addXxx` and `removeXxx` method in your model. All types returning a collection of values are affected:  collection ,  choice  (with multiple selection) and  entity  (with multiple selection).\n\nExample:\n\n    class Article\n    {\n        public function addTag($tag) { ... }\n        public function removeTag($tag) { ... }\n        public function getTags($tag) { ... }\n    }\n\nAnd the controller:\n\n    $form = $this->createFormBuilder($article)\n        ->add('tags')\n        ->getForm();\n\nUpon modifying the form, addTag() and removeTag() are now called appropiately.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-02-01T18:23:49Z\n\nReally great\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-02-01T18:24:04Z\n\nGreat !!\n\nTwo suggestions:\n\n* make  add  and  remove  configurable,\n* introduce a base class for the remove listeners with (final?) `::getSubscribedEvents()` and `::getEventPriorities()`\n\n---------------------------------------------------------------------------\n\nby haswalt at 2012-02-01T18:57:46Z\n\n+1 this\n\n---------------------------------------------------------------------------\n\nby daFish at 2012-02-01T19:54:46Z\n\n+1\n\n---------------------------------------------------------------------------\n\nby michelsalib at 2012-02-01T20:55:37Z\n\nCan wait to have it!\nIt will save lots of time trying to solve WTF effects and making workarounds.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-02-02T09:37:12Z\n\n@vicb: Your first point is done. The second, I don't understand.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-02-02T09:40:50Z\n\n@bschussek your branch conflicts with master according to github\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-02-02T09:52:40Z\n\n@bschussek my point is that I can stand hard-coded priorities which are error prone. A better solution might be to introduce constants (in `FormEvents` / `FormEventPriorities` ?) with meaningful names.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-02-02T10:21:52Z\n\n@stof Rebased\n\n@vicb I know, but who is responsible for managing priorities? There is no central entitty that can do this. (btw this is a general problem of the priority system of the EventDispatcher)\n\n@fabpot Ready to merge.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-02-02T10:23:28Z\n\n@bschussek doesn't each form has is own dispatcher so there is no need for a global registry here, something local to the form could be good enough.",
            "fixed CS",
            "merged branch sellingsource/EXPOSE_FORM_VALIDATORS (PR #2983)\n\nCommits\n-------\n\n601d462 [Form] Added getValidators() to Form class\n\nDiscussion\n----------\n\n[Form] Added getValidators() to Form class\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nI am working implementing client side validation in a bundle that adds validation rules via a form builder. I am currently unable to pull the validators from the Form class which is making the implementation incredibly difficult.\n\nI noticed that the transformers are currently exposed and based on some feedback I got on IRC I am guessing these weren't exposed simply because no one needed them at the time.\n\n---------------------------------------------------------------------------\n\nby mlively at 2011-12-28T20:54:41Z\n\nSide note: It would be incredibly helpful to have this in the current branch of symfony. I implemented it on master because it is a new feature, but I would be more than happy to patch it into 2.0 if you would like.\n\n---------------------------------------------------------------------------\n\nby canni at 2012-01-11T10:15:46Z\n\n:+1:\n\nAs this is new feature it cannot fit into 2.0 series, but 2.1 is just few clicks ahead, maybe this feature will  fit into  ;)\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-01-31T08:23:05Z\n\nping @fabpot\n:+1:\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-31T08:51:26Z\n\n@mlively could you rebase your branch ? it conflicts with the current master\n\n---------------------------------------------------------------------------\n\nby mlively at 2012-01-31T21:38:39Z\n\nYes, I can do that might be later today.",
            "merged branch gimler/fix_phpdocs (PR #3176)\n\nCommits\n-------\n\n5bf1143 fix some translations component phpdocs\n\nDiscussion\n----------\n\nfix some translations component phpdocs\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes",
            "[HttpFoundation] added some info in Request:get() phpdoc",
            "changed the default XLIFF extension to .xlf instead of .xliff (this is BC and .xliff files are still valid)",
            "[FrameworkBundle] fixed previous commit",
            "fixed tests",
            "[WebProfilerBundle] changed memory display in the WDT to MB instead of KB",
            "merged 2.0",
            "merged branch kriswallsmith/security/demeter-fix (PR #2816)\n\nCommits\n-------\n\n41872cd [Security] added SecurityContextInterface::getUser()\n\nDiscussion\n----------\n\n[Security] added SecurityContextInterface::getUser()\n\nThis changes helps the common use case of fetching the current user and better complies with the [Law of Demeter][1].\n\nBefore (still works):\n\n    $token = $context->getToken();\n    $user = $token ? $token->getUser() : null;\n\nAfter:\n\n    $user = $context->getUser();\n\nThe fine print:\n\n```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\n```\n\n[1]: http://en.wikipedia.org/wiki/Law_of_Demeter",
            "merged 2.0",
            "merged branch kbond/config_dump (PR #1099)\n\nCommits\n-------\n\n73ac773 [Config] added ability to set info message and example to node definition\n\nDiscussion\n----------\n\n[2.1] [Config] added ability to set info message to node definition\n\nThe configuration TreeBuilder lends itself to be hooked into for reference documentation generation.  This ``setInfo()`` method allows the addition of a message to a node for use in doc generation.\n\nExample (``Symfony/Bundle/WebProfilerBundle/DependencyInjection/Configuration.php``):\n\n```php\n<?php\n// ...\n$treeBuilder = new TreeBuilder();\n$rootNode = $treeBuilder->root('web_profiler');\n\n$rootNode\n    ->children()\n        ->booleanNode('verbose')->defaultTrue()\n            ->setInfo('Setting to false hides some secondary information to make the toolbar shorter.')->end()\n        ->booleanNode('toolbar')->defaultFalse()\n            ->setInfo('Enable/Disable the display of the web debug toolbar containing a summary of the profiling data.')->end()\n        ->booleanNode('intercept_redirects')->defaultFalse()\n            ->setInfo('Intercepts the redirects and gives you the opportunity to look at the collected data before following the redirect.')->end()\n    ->end()\n;\n\nreturn $treeBuilder;\n// ...\n```\n\nI think a core console command would be great (ie: ``config:reference:dump web_profiler``) or even a frame in the profiler.  The way bundle configuration processing is not enforced makes this difficult currently.  Perhaps adding a ``getConfiguration()`` method to ``ExtensionInterface``.  Thoughts?\n\nCertainly this change would allow for a third party bundles or sites (ie symfony.com) to generate bundle reference docs.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/05/25 10:36:10 -0700\n\n:+1: finally some effort in this direction, although as @schmittjoh said without generation this won't bring us very far. But if it allows everyone to document their stuff already, I think it's still a plus, otherwise we'll have generation without content. And content without generation is still useful for people looking at the sources.\n\n---------------------------------------------------------------------------\n\nby Problematic at 2011/05/25 10:52:42 -0700\n\n+1, even if the only thing it does is save me some WTFs later looking through my own code.\n\n---------------------------------------------------------------------------\n\nby weaverryan at 2011/05/25 10:59:25 -0700\n\n@kbond and I talked about this a bit over the weekend and decided that he should at least get this first step going. It *is* of limited use in its current state (thought @Problematic and @Seldaek bring up a good points), but we need some ideas on where to go next.\n\nAs @kbond says, nothing really ties the DI extension to a config class now. Should we add a `getConfiguration()` or `getTreeBuilder()`? How can we make it so that we *know* which `TreeBuilder` to use for each DI extension config alias?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/05/25 11:21:05 -0700\n\nI think this is great and I dont think we need to require a generator if the API makes sense.\nOne thing the API should also cover is setting a custom error message in case of a validation error. Just something to keep in mind.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/05/25 11:26:05 -0700\n\n@weaverryan I think that ``getConfiguration`` would be better than ``getTreeBuilder`` as this is still the method implemented by the ``ConfigurationInterface``. Of course this method should be optionnal (defaulting to return ``null``)\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/05/25 13:09:26 -0700\n\nThe ``ConfigurationInterface`` API would need to be locked down more.  For example, FrameworkBundle's ``Configuration`` class has a constructor.  I am afraid if we lock it down too much we could lose its flexibility.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/05/25 13:24:51 -0700\n\n@kbond the constructor **cannot** be enforced by an interface. This is why I was talking about adding a ``getConfiguration`` method in the extension. This way, the extension can do whatever it wants to instantiate the Configuration, passing whatever param you want.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/05/25 14:12:03 -0700\n\nSorry meant the ``ExtensionInterface``.  I would like the ``getConfiguration`` method enforced.  How would we tackle the FrameworkBundle?  To retrieve it's configuration you need the ``ContainerBuilder``.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/05/25 14:38:02 -0700\n\nThe only way I can see the bundle method working is if the method was manually overridden for each bundle (returns null by default).  The fact that ``Configuration`` classes may or may not have constructors prevent it from being automated.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/05/26 06:24:37 -0700\n\nI think we should avoid *searching* if at all possible.\n\nThe only real thing you might need to build your configuration is the ``ContainerBuilder``.  What about passing it to the ``Extension`` class constructor?  Then it could be accessed in a ``getConfiguration()`` method.  Looking at the internals, I can't see how I could do that but thought I would throw it out there.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/05/26 06:31:46 -0700\n\nThe constructor is not a good idea IMO as the ContainerBuilder passed to an extension is not the main one when using the ``load`` method. So passing it in the constructor is bad IMO. Passing it to the ``getConfiguration`` method would be better IMO.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/05/26 08:04:08 -0700\n\nBased on the comments I am seeing 2 ways of implementing a ``getConfiguration()`` method.  I have started branches for both ways:\n\n1.  ``getConfiguration()`` in Bundle class: https://github.com/kbond/symfony/commit/3fb1c889afff009c331e4d76e301fbc4ae0ad463\n2.  ``getConfiguration()`` in Extension class: https://github.com/kbond/symfony/commit/cf05ec20fcea909d6974eeab374a2698151e6fbb\n\nI have updated the ``FrameworkBundle`` in both.\n\nOn another note, I think one ``Configuration`` class per Bundle should be enforced.  Any reason why we can't do this?  The only core bundle that has more than one is ``SecurityBundle`` and I don't get why it needs two (not saying it shouldn't, I just don't know why).\n\n---------------------------------------------------------------------------\n\nby stof at 2011/05/26 08:15:52 -0700\n\nOne configuration class per bundle does not make any sense as each configuration class is responsible to merge an array of configurations. So a bundle providing several extension (not the common use case at all but supported) would need several configuration classes as each extension would get a different set of configuration.\n\nand if you look at what a Configuration class do, it merges several configurations in an intelligent way and normalizes it. Look at why a second one is used in the SecurityBundle and you will see that this is a perfectly valid use of it. The Config component is not limited to DI extensions configuration.\n\nAnd for the 2 implementations, I prefer the one putting it in the extension. Here are my reasons:\n- a bundle supports having several extensions so returning only one Configuration class for the bundle is broken in this case (for which extension is it ? and what about the others ?)\n- the extension is the class using the Configuration, not the bundle. So it is logical to put it in it\n- this removes code duplication to instantiate the Configuration as the extension can use the method.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/05/27 08:41:58 -0700\n\nCreated a *rough* initial ``config:dump`` console command.  Works for all core bundles.  Still needs some work for the more complex Node types.\n\nHad some issues getting it to work with ``AsseticBundle`` and ``SecurityBundle``.  There is some code duplication I couldn't figure out how to avoid.\n\n@weaverryan I tried to mimic the YAML format you have in the reference docs.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/06/02 08:09:57 -0700\n\nI reduced the scope of this PR to just the API to document configuration nodes and access the configuration object from an extension.  Like stated initially, if it makes sense we should add it and worry about the generation later.\n\nI am still going to work on a console ``config:dump`` command but in another branch.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/04 05:36:09 -0700\n\n@kbond could you rebase your PR ? It conflicts with the current master branch.\n\nApart from that, the way to add info on the node seems good to me. @schmittjoh what do you think ?\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/09/04 06:59:29 -0700\n\nWill do, give me a few days (on vacation)\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/09/06 08:48:55 -0700\n\n@stof should i squash the commits into 1?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/06 09:00:46 -0700\n\nIf you want, but it is not necessary here IMO. the history is not a mess as in some other PR with lots of changes.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/09/06 10:14:32 -0700\n\nOk, rebased.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/15 07:49:17 -0700\n\n@kbond will you be around for the IRC meeting in 10mins?\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/09/22 08:13:37 -0700\n\nThere is a rudimentary config dump command based on this PR available for testing here: https://github.com/kbond/symfony/tree/config_dump_command\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/16 11:03:57 -0700\n\n@fabpot @schmittjoh ping\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/11 07:01:12 -0800\n\n@fabpot ping\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/11/22 07:14:58 -0800\n\nI added a new interface as discussed in the irc meeting.  Is this ok?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/12 12:38:38 -0800\n\n@fabpot this PR conflicts with master once again, needing to rebase it. It would be good to review it so that we don't need to keep it pending for each further change in master\n\n@kbond can you do the rebase ?\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/12/12 19:35:05 -0800\n\nrebased.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/13 02:56:02 -0800\n\n@kbond: Can you squash your commits before I merge this PR? Thanks.\n\n---------------------------------------------------------------------------\n\nby kbond at 2011/12/13 03:09:09 -0800\n\n@fabpot done.",
            "updated CHANGELOG for 2.1",
            "merged branch stloyd/profiler_by_method (PR #2824)\n\nCommits\n-------\n\n5f22268 [Profiler] Sync with master\n1aef4e8 Adds collecting info about request method and allowing searching by it\n\nDiscussion\n----------\n\n[WebProfiler] Add ability to filter data by request method\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: #1515\n\nFor discussion & description checkout: #1515 & #2279\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/11 10:02:41 -0800\n\nAfter merging this PR, the toolbar is not displayed anymore for me.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/12 14:18:20 -0800\n\n@fabpot the toolbar works for me using this branch",
            "updated CHANGELOG for 2.1",
            "[WebProfilerBundle] added the method information in the profiler",
            "[WebProfilerBundle] made the profile URL clickable only when the method is GET or HEAD",
            "merged 2.0",
            "merged branch Tobion/patch-2 (PR #2866)\n\nCommits\n-------\n\nf44bcaf fix error due to merging 2.0 into master\n\nDiscussion\n----------\n\n(WebProfilerBundle) fix error resulting from merging 2.0 into master",
            "merged branch ocubom/fix-absolute-paths-detection (PR #2809)\n\nCommits\n-------\n\n600066e [Templating] fixed 'scheme://' not detected as absolute path\ne6f2687 [HttpKernel] fixed 'scheme://' not detected as absolute path\nb50ac5b [Config] fixed 'scheme://' not detected as absolute path\n\nDiscussion\n----------\n\n[Config][HttpKernel][Templating] 'scheme://' paths not detected as absolute\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no (99%)\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nThe method ```isAbsolutePath``` does not detect URL schemes as absolute. This makes imposible the use of wrappers to access remote files or the use of files (mostly configuration or templates) stored on phar archives (uses the scheme ```phar://``` in the path).\n\nThree classes implement this methods: ```Symfony\\Component\\Config\\FileLocator```, ```Symfony\\Component\\HttpKernel\\Util\\Filesystem``` and ```Symfony\\Component\\Templating\\Loader\\FilesytemLoader```. All are updated. Also includes a new check  on all related tests (```Symfony\\Component\\HttpKernel\\Util\\Filesystem``` lacks of test).",
            "merged 2.0",
            "merged branch lsmith77/serializer_interface (PR #2530)\n\nCommits\n-------\n\n0776b50 removed supports(De)Serializiation()\n72b9083 SerializerAwareNormalizer now only implements SerializerAwareInterface\n97389fa use Serializer specific RuntimeException\ncb495fd added additional unit tests for deserialization\n967531f fixed various typos from the refactoring\n067242d updated serializer tests to use the new interfaces\nd811e29 CS fix\n351eaa8 require a (de)normalizer inside the (de)normalizable interfaces instead of a serializer\nc3d6123 re-added supports(de)normalization()\n078f7f3 more typo fixes\nc3a711d abstract class children should also implement dernormalization\n2a6741c typo fix\nd021dc8 refactored encoder handling to use the supports*() methods to determine which encoder handles what format\nf8e2787 refactored Normalizer interfaces\n58bd0f5 refactored the EncoderInterface\nb0daf35 split off an EncoderInterface and NormalizerInterface from SerializerInterface\n\nDiscussion\n----------\n\n[Serializer] split off an EncoderInterface and NormalizerInterface from SerializerInte\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes (but not inside a stable API)\nSymfony2 tests pass: ![Build Status](https://secure.travis-ci.org/lsmith77/symfony.png?branch=serializer_interface)\nFixes the following tickets: #2153\n\nThe purpose is to make it easier for other implementations that only implement parts of the interface due to different underlying approaches like the JMSSerializerBundle.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/11/01 03:36:17 -0700\n\nActually, you can keep the current interface and I will just provide an adapter, sth like the following:\n\n```php\n<?php\n\nclass SymfonyAdapter implements SymfonyInterface\n{\n    public function __construct(BundleInterface $serializer) { /* ... */ }\n    // symfony serializer methods mapped to bundle methods\n}\n```\nI like to provide an adapter instead of implementing the interface directly since the bundle can be used standalone right now, and I don't want to add a dependency on the component just for the sake of the interface.\n\nHowever, I do not completely see the purpose of the component. When would someone be recommended to use it? Everything the component does, the bundles does at the same level with the same complexity or simplicity (however you want to view that).\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/01 03:40:55 -0700\n\nstandalone in what way? you mean even out of the context of Symfony? In that context imho you should ship that code outside of a Bundle.\n\nRegardless, how will that adaptor work? How would you implement methods like ``getEncoder()``? Afaik you can't and this is what this PR is about, splitting the interface to enable people to more finely specify what they provide.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/11/01 04:03:56 -0700\n\nI would just throw exceptions when something is not supported.\n\nThe more important question though is what is the goal of the component in the long-term, i.e. what problems is it supposed to solve, or in which cases should it be used?\n\nBecause right now it seems to me - correct me if I'm wrong - that the only purpose is that people don't have to install an extra library. However, that might even be frustrating for users because they need to migrate their code to the bundle as soon as they need to customize the serialization process which you need in 99% of the cases. For deserialization, the situation in the component is even worse. So, if my assessment is correct here (i.e. component to get started fast, if you need more migrate to the bundle), I think it would be better and less painful to have them start with the bundle right away.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/01 04:15:10 -0700\n\nWell then imho it would be better to split the interface.\n\nI think the serializer component is sufficient for many situations and imho its easier to grok. Furthermore the normalizer/encoder concept it can be used in situations where JMSSerializerBundle cannot be used.\n\nAnd splitting up the interfaces has exactly the goal of reducing the  frustrations  caused by out growing the the component.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/11/01 04:29:39 -0700\n\nI don't agree, but it's a subjective thing anyway.\n\nSo, whatever interface you come up with (preferably as few methods as possible), I will provide an adapter for it.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/07 08:45:25 -0800\n\nWhat's the status of this PR?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/07 10:28:14 -0800\n\nfrom my POV its good to go. but would like a nod from someone else in terms of the naming of the new interfaces\n\nOn 07.11.2011, at 17:45, Fabien Potencier <reply@reply.github.com> wrote:\n\n> What's the status of this PR?\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2530#issuecomment-2655889\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/08 11:37:40 -0800\n\n@lsmith77 what about doing the same for the ``NormalizerInterface`` instead of adding a new interface with a confusing name ? The Serializer class could implement ``Normalizer\\NormalizerInterface`` by adding the 2 needed methods instead of duplicating part of the interface.\n\nThe next step is to refactor the Serializer class so that it choose the encoder and the decoder based on the ``support*`` methods. But this could probably be done in a separate PR.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/08 11:51:27 -0800\n\nyeah .. i wanted to do that once we are in agreement on the encoder stuff. question then is if we should again split off Denormalization. i guess yes.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/08 12:06:34 -0800\n\nok done ..\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/08 12:59:51 -0800\n\ni guess the next big task is to add more tests .. had to fix way too few unit tests with all this shuffling around .. will also help validating the concept. i should also test this out in a production application.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/14 13:27:48 -0800\n\n@ericclemmons can you also have a look at this PR and potentially help me adding tests?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/07 07:32:06 -0800\n\n@lsmith77: Is it ready to be merged? Should I wait for more unit tests?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/07 07:34:56 -0800\n\nIf you merge it I am afraid I might get lazy and not write tests. This is why I changed the topic to WIP. I promise to finish this on the weekend.\n\nNote however I was planning to write the tests for 2.0 and send them via a separate PR.\nOnce that PR is merged into 2.0 and master. I would then refactor them to work for this PR.\nThis way both 2.0 and master will have tests.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/07 07:42:15 -0800\n\n@lsmith77: sounds good. Thanks.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/11 12:02:12 -0800\n\n@fabpot ok i am done from my end.\n@schmittjoh would be great if you could look over the final interfaces one time and give your blessing that you will indeed be able to provide implementations for these interfaces inside JMSSerializerBundle (even if just via an adapter)\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/12 12:43:49 -0800\n\n@schmittjoh can you take a look as requested by @lsmith77 ?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/12/13 03:33:23 -0800\n\nAre the supports methods necessary? This is what I'm using in the bundle:\nhttps://github.com/schmittjoh/JMSSerializerBundle/blob/master/Serializer/SerializerInterface.php\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/13 04:08:49 -0800\n\n@schmittjoh without them determining if something is supported will always require an exception, which is pretty expensive. especially if one iterates over a data structure this can cause a lot of overhead.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/12/13 04:24:18 -0800\n\nmy question was more if you have a real-world use case where this is useful?\n\nOn Tue, Dec 13, 2011 at 1:08 PM, Lukas Kahwe Smith <\nreply@reply.github.com\n> wrote:\n\n> @schmittjoh without them determining if something is supported will always\n> require an exception, which is pretty expensive. especially if one iterates\n> over a data structure this can cause a lot of overhead.\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2530#issuecomment-3122157\n>\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/13 04:28:08 -0800\n\nyes .. this serializer .. since it traverses the tree and decides what is the current normalizer one by one (aka not via visitors as in your implementation). without the supports*() methods it would need to have the normalizer throw exceptions, but this is not exceptional, its the normal code flow to have to iterate to find the correct normalizer.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/12/13 04:30:36 -0800\n\ncan we split it off into a second interface?\n\nOn Tue, Dec 13, 2011 at 1:28 PM, Lukas Kahwe Smith <\nreply@reply.github.com\n> wrote:\n\n> yes .. this serializer .. since it traverses the tree and decides what is\n> the current normalizer one by one (aka not via visitors as in your\n> implementation). without the supports*() methods it would need to have the\n> normalizer throw exceptions, but this is not exceptional, its the normal\n> code flow to have to iterate to find the correct normalizer.\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2530#issuecomment-3122315\n>\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/13 04:33:27 -0800\n\nhmm .. i guess we could .. these methods in a way are implementation specific and are mainly public because its different objects interacting with each other, though for users of the lib they can also be convenient at times.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/14 09:13:53 -0800\n\nok i reviewed things again and just removed those two methods, since the possibility for these methods to be feasible is too tied to the implementation and for this particular implementation supportsEncoding() and supportsDecoding() are still available.\n\nso all ready to be merged ..\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/14 09:15:44 -0800\n\nhmm i realized one thing just now:\nhttps://github.com/lsmith77/symfony/commit/cb495fd7a36fe7f895bec1686e8742ae5b5cb550\n\nthat commit should also be included in 2.0 .. i am not sure what the most elegant way is to make that happen ..\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/14 10:10:16 -0800\n\n@lsmith77: commit cb495fd7a36fe7f895bec1686e8742ae5b5cb550 cannot be cherry picked in 2.0 as is as the tests do not pass:   Fatal error: Call to undefined method Symfony\\Component\\Serializer\\Serializer::supportsDenormalization() in tests/Symfony/Tests/Component/Serializer/SerializerTest.php on line 150 \n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/14 10:11:55 -0800\n\nah of course .. i just removed that method :) .. then never mind .. all is well.",
            "merged branch Seldaek/post_response (PR #2791)\n\nCommits\n-------\n\n7c2f11f Merge pull request #1 from pminnieur/post_response\n9f4391f [HttpKernel] fixed DocBlocks\n2a61714 [HttpKernel] added PostResponseEvent dispatching to HttpKernel\n915f440 [HttpKernel] removed BC breaks, introduced new TerminableInterface\n7efe4bc [HttpKernel] Add Kernel::terminate() and HttpKernel::terminate() for post-response logic\n\nDiscussion\n----------\n\n[HttpKernel] Add Kernel::terminate() and HttpKernel::terminate() for post-response logic\n\nThis came out of a discussion on IRC about doing stuff post-response, and the fact that right now there is no best practice, and it basically requires adding code after the `->send()` call.\n\nIt's an attempt at fixing it in an official way. Of course terminate() would need to be called explicitly, and added to the front controllers, but then it offers a standard way for everyone to listen on that event and do things without slowing down the user response.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/06 02:41:26 -0800\n\nWe discussed it on IRC and I suggested a way to avoid the BC break of the interface: adding a new interface (``TerminableInterface`` or whatever better name you find) containing this method.\nHttpKernel, Kernel and HttpCache can then implement it without breaking the existing apps using the component (Kernel and HttpCache would need an instanceof check to see if the inner kernel implements the method)\n\nFor Symfony2 users it will mean they have to change their front controller to benefit from the new event of course, but this is easy to do.\n\nBtw, Silex can then be able to use it without *any* change for the end users as it can be done inside ``Application::run()``\n\n---------------------------------------------------------------------------\n\nby pminnieur at 2011/12/06 11:47:03 -0800\n\n@Seldaek: I opened a pull request so that the discussion on IRC is fulfilled and no BC breaks exist: https://github.com/Seldaek/symfony/pull/1/files\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/07 07:59:49 -0800\n\nAny real-world use case for this?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/12/07 08:10:31 -0800\n\nDoing slow stuff after the user got his response back without having to implement a message queue. I believe @pminnieur wanted to use it to send logs to loggly?\n\n---------------------------------------------------------------------------\n\nby pminnieur at 2011/12/07 09:08:41 -0800\n\nIts a good practice to defer code execution without the introduction of a new software layer (like gearman, amqp, whatever tools people use to defer code execution) which may be way too much just for the goal of having fast responses, whatever my code does.\n\nMy real world use case which made me miss this feature the first time:\n\n > I have a calendar with a scheduled Event. For a given period of time, several Event entities will be created, coupled to the scheduled event (the schedule Event just keeps track of `startDate`, `endDate` and the `dateInterval`). Let's say we want this scheduled Event to be on every Monday-Friday, on a weekly basis, for the next 10 years.\n\nThis means I have to create `10*52*5` Event entities before I could even think about sending a simple redirect response. If I could defer code execution, I'd only save the scheduled Event, send the redirect response and after that, I create the `10*52*5` entities.\n\nThe other use case was loggly, yes. Sending logging data over the wire before the response is send doesn't make sense in my eyes, so it could be deferred after the response is send (this especially sucks if loggly fails and i get a 500 --the frontend/public user is not interested in a working logging facility, he wants his responses).\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2011/12/07 10:07:03 -0800\n\nThis would help significantly, but the real problem, that your process is busy and unavailable for the next request, is still there.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/07 10:15:18 -0800\n\nI think this is the wrong solution for a real problem.\n\nSaying  Its a good practice to defer code execution without the introduction of a new software layer  is just wrong.\n\nIt is definitely a good practice to defer code execution, but you should use the right tool for the job.\n\nI'm -1.\n\n---------------------------------------------------------------------------\n\nby pminnieur at 2011/12/07 10:25:44 -0800\n\nIt should just give a possibility to put unimportant but heavy lifting code behind the send request with ease. With little effort people could benefit from the usage of `fastcgi_finish_request` without introducing new software, using `register_shutdown_function` or using `__destruct `(which works for simple things, but may act weird with dependencies).\n\nIt should not simulate node.js ;-) I agree that the real problem is not solved, but small problems could be solved easily. I personally don't want to setup RabbitMQ or whatever, maintain my crontab or any other software that may allow me to defer code execution.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/12/08 01:08:32 -0800\n\n@fabpot: one could say that on shared hostings it is still useful because they generally don't give you gearman or \\*MQs. Anyway I think it'd be nice to really complete the HttpKernel event cycle.\n\n---------------------------------------------------------------------------\n\nby pminnieur at 2011/12/08 01:48:57 -0800\n\nnot only on shared hostings, sometimes teams/projects just don't have the resources or knowledge or time to setup such an infrastructure.\n\n---------------------------------------------------------------------------\n\nby videlalvaro at 2011/12/08 01:53:06 -0800\n\nI can say we used `fastcgi_finish_request` quite a lot at poppen with symfony 1.x. It certainly helped us to send data to Graphite, save XHProf runs, send data to RabbitMQ, and so on.\n\nFor example we used to connect to RabbitMQ and send the messages _after_ calling `fastcgi_finish_request` so the user never had to wait for stuff like that.\n\nAlso keep in mind that if you are using Gearman or RabbitMQ or whatever tool you use to defer code execution\u2026\u00a0you are not deferring the network connection handling, sending data over the wire and what not. I know this is obvious but is often overlooked.\n\nSo it would be nice to have an standard way of doing this.\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2011/12/13 01:42:23 -0800\n\nThis could have been useful recently while implementing a  Poor mans cronjob  system. The solution was to do a custom Response object and do the stuff after send have been called with a Connection: Close header and ignore_user_abort(); (Yes very ugly)",
            "updated CHANGELOG for 2.1",
            "[HttpKernel] added request and response as arguments to the TerminableInterface::terminate() method",
            "Merge branch '2.0'\n\n* 2.0:\n  [FrameworkBundle] Added functional tests.\n  [Form] Added missing use statements (closes #2880)\n  [Console] Improve input definition output for Boolean defaults\n  [SecurityBundle] Changed environment to something unique.\n  2879: missing space between catch and the brace\n  #2688: Entities are generated in wrong folder (doctrine:generate:entities Namespace)\n  [TwigBundle] Fix the exception message escaping",
            "[HttpKernel] added the terminate() call to the Client",
            "[SwiftmailerBundle] added support for the new memory spool",
            "merged branch kriswallsmith/process/builder (PR #2902)\n\nCommits\n-------\n\nd7712a3 [Process] added ProcessBuilder\n\nDiscussion\n----------\n\n[Process] added ProcessBuilder\n\nThis class was copied from Assetic.\n\n```\nBug fix: no\nFeature addition: yes\nBC break: no\nSymfony2 test pass: oui\n```",
            "merged branch stof/doctrine_profiling (PR #2895)\n\nCommits\n-------\n\n8713c2d [DoctrineBridge][DoctrineBundle] Refactored the DBAL logging\n\nDiscussion\n----------\n\n[DoctrineBridge][DoctrineBundle] Refactored the DBAL logging\n\nThis allows enabling the logging and the profiling separately. This is useful for instance when doing batch processing leading to memory issue because of the profiling. In such case, the only solution currently is to disable the logging totally whereas disabling only the use of the profiler would allow seeing the queries in the logs (and the profiles are not collected in the CLI anyway).\n\nI'm not sure about the place where the ``Stopwatch`` should be used. Keeping it in the ``DbalLogger`` with Monolog was the easy way as it allows using the DBAL class directly to collect queries for the profiler but technically the ``Stopwatch`` is used by the profiler.\n\nthe bundle changes are part of the PR to avoid letting the bundle in a broken state. I will also submit them to the doctrine/DoctrineBundle repo\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/16 02:33:05 -0800\n\nTests do not pass for me (even after upgrading the Doctrine deps to their latest versions):\n\n    There was 1 error:\n\n    1) Symfony\\Bundle\\DoctrineBundle\\Tests\\ContainerTest::testContainer\n    Argument 1 passed to Doctrine\\DBAL\\Logging\\LoggerChain::addLogger() must implement interface Doctrine\\DBAL\\Logging\\SQLLogger, instance of Doctrine\\Dbal\\Logging\\DebugStack given\n\n    vendor/doctrine-dbal/lib/Doctrine/DBAL/Logging/LoggerChain.php:39\n    src/Symfony/Component/DependencyInjection/ContainerBuilder.php:777\n    src/Symfony/Component/DependencyInjection/ContainerBuilder.php:349\n    src/Symfony/Bundle/DoctrineBundle/Tests/ContainerTest.php:22\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/16 04:24:46 -0800\n\nthis is weird. DebugStack implements the interface, and the test passes for me\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/16 05:30:11 -0800\n\nactually, the test pass when I run the `ContainerTest.php` file alone, but fail when I'm running the whole test suite.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/16 05:39:15 -0800\n\nI'm not able to run the whole testsuite. With intl enabled, it fails before the first test somewhere in the Locale component tests (Intl seems to be broken on 5.3.8 on windows as using the constructor of the intl classes gives me ``null`` in the variable). And after disabling intl, I got an error about allowed memory size exhausted during the EntityType tests\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/12/16 05:42:09 -0800\n\n@stof And here goes Travis with help! ;-)\n\nJust log in there, enable hook for your symfony repo, force an push, and watch result at: http://travis-ci.org/#!/stof/symfony\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/16 05:47:57 -0800\n\nNote: when running only the testsuite for bundles, I also get such an error after about 450 of the 500 tests. It seems like the garbage collector does not clean the memory between tests...\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/16 05:52:08 -0800\n\nanyway, the error seems really weird as the class implements the interface. I don't see how it could be passed without implementing it\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/16 06:10:43 -0800\n\n@stloyd Travis allows me to see that this issue is not specific to @fabpot's computer. But it does not allow me to debug the test as I only get the result of the test, which does not make any sense",
            "fixed typo",
            "Merge branch '2.0'\n\n* 2.0:\n  fixed functional tests so that the cache/logs are specific to one version of Symfony (to avoid weird side effects)\n  [FrameworkBundle] Prove client insulation and non-insulation works in session tests.\n  [FrameworkBundle] Add tests to prove functional testing works with simultaneous clients.\n  [FrameworkBundle] Small changes to test setup.\n  [DoctrineBundle] Fixed incorrectly shown params\n  [SwiftmailerBundle]\u00a0fixed the send email command when the queue does not extends Swift_ConfigurableSpool",
            "[FrameworkBundle] fix a functional test",
            "merged branch canni/stderr_in_console_commands (PR #2900)\n\nCommits\n-------\n\ncab0334 [Console] Enable stderr support\n\nDiscussion\n----------\n\n[Console] Enable stderr support\n\nBug fix: no\nFeature addition: yes\nBC break: no\nSymfony2 test pass: yes, but some tests had to be modified\n\nNow all error messages goes to stdout, we cannot separate error\nfrom normal behaviour, this enables writing to stderr stream,\nso scripts ran e.g. from cron, can benefit from this well known concept.\n\nThere are 2 much nicer implememntations, but:\n1) First requires to break the `@api` tagged interfaces.\n2) Second requires rewrite of `execute` command declatarion all commands in bundles.\n\n---------------------------------------------------------------------------\n\nby canni at 2011/12/16 07:08:29 -0800\n\n@stof corrected, thx",
            "updated CHANGELOG for 2.1",
            "added nl2br use as it is now part of Twig core",
            "merged branch andrewtch/plain-commands (PR #2914)\n\nCommits\n-------\n\n2181f6c Fixed space\n5f98b73 Raw output of commands in app/console list\n\nDiscussion\n----------\n\nRaw output of commands in app/console list\n\nBreaks compatibility: no\nFeature addition: yes\nSymfony test pass: yes, with appropriate modifications\n\nSimply, it adds ```--raw``` parameter to ```app/console list``` command. With this key, ```list``` returns simply command names.\n\nThis is mainly useful in command completion / embedding, like https://github.com/andrewtch/oh-my-zsh/tree/symfony2-completion/plugins/symfony2 ; I know about the presence of --xml, but in some environments (like shell scripts) parsing XML could be a problem.\n\nThis is an unobtrusive feature addition that is not likely to add problems in future.\n\n---------------------------------------------------------------------------\n\nby andrewtch at 2011/12/18 04:09:58 -0800\n\nfixed",
            "[Console] fixed previous merge",
            "updated CHANGELOG for 2.1",
            "fixed CS",
            "removed unused use statements",
            "merged 2.0",
            "[TwigBundle] added Twig Debug extension support",
            "merged branch juliendidier/twig-security-class (PR #2835)\n\nCommits\n-------\n\n60ebaaa [SecurityBundle] fix service class by adding a parameter, on twig extension\n\nDiscussion\n----------\n\n[SecurityBundle] fix service class by adding a parameter, on twig extension\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nTo override the is_granted twig function, the class of TwigExtension is now set in a parameter.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/10 10:38:38 -0800\n\nFirst thing, you could overwrite the extension at the twig level by simply registering another twig extension with the same ``getName`` method.\n\nAnd second point, replacing core Twig functions is probably one of the best way to forbid you to use third party bundles as the change will also impact their code. Do you really need to do it (especially considering that this function simply calls the security context and all the logic is in the context) ?\n\n---------------------------------------------------------------------------\n\nby juliendidier at 2011/12/10 15:43:08 -0800\n\nYes, overriding ```is_granted``` function is probably a bad example. But having it set as parameter allow you to redefine it (if you know what you are doing).",
            "merged branch stloyd/proper_asserts (PR #2916)\n\nCommits\n-------\n\nfd174a2 [Tests] Use proper assertion for counting\n\nDiscussion\n----------\n\n[Tests] Use proper assertion for counting\n\n```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n```\n\nDocs PR: symfony/symfony-docs#924",
            "merged branch stof/doctrine_choice_list (PR #2921)\n\nCommits\n-------\n\n200ed54 [DoctrineBridge] Extracted the common type and made the choice list generic\n3c81b62 [Doctrine] Cleanup and move loader into its own method\n7646a5b [Doctrine] Dont allow null in ORMQueryBuilderLoader\n988c2a5 Adjust check\n3b5c617 [DoctrineBridge] Remove large parts of the EntityChoiceList code that were completly unnecessary (code was unreachable).\nb919d92 [DoctrineBridge] Optimize fetching of entities to use WHERE IN and fix other inefficencies.\n517eebc [DoctrineBridge] Refactor entity choice list to be ORM independant using an EntityLoader interface.\n\nDiscussion\n----------\n\n[DoctrineBridge] Refactor EntityChoiceList\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no (99%)\nSymfony2 tests pass: yes\n\nThis decouples the ORM from the EntityChoiceList and makes its much more flexible. Instead of having a  query_builder  to do smart or complex queries you can now create  loader  instances which can arbitrarily help loading entities.\n\nAdditionally i removed lots of code that was unnecessary and not used by the current code.\n\nThere is a slight BC break in that the EntityChoiceList class is now accepting an EntityLoaderInterface instead of a querybuilder. However that class was nested inside the EntityType and should not be widely used or overwritten.\n\nThe abstract class DoctrineType is meant to be used as base class by other Doctrine project to share the logic by simply using a different type name and a different loader implementation.\n\nThis PR replaces #2728.\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/12/19 09:20:43 -0800\n\nThanks for doing the last refactorings, this is now fine from my side as well.",
            "merged branch stof/entity_provider (PR #2923)\n\nCommits\n-------\n\nf1199c0 [DoctrineBridge] Decoupled the EntityUserProvider from the ORM\n\nDiscussion\n----------\n\n[DoctrineBridge] Decoupled the EntityUserProvider from the ORM\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\n\nThe entity provider can now be used by any Doctrine project implementing the interfaces from Doctrine Common 2.2.",
            "merged branch dustin10/cache-clearers (PR #2857)\n\nCommits\n-------\n\n3ae976c fixed CS\n84ad40d added cache clear hook\n\nDiscussion\n----------\n\n[Cache][2.1] Added cache clear hook\n\nAllows bundles to hook into the `cache:clear` command by using the `kernel.cache_clearer` tag instead of using the `event_dispatcher` service.\n\nSee #1884\n\nBug fix: No\nFeature addition: Yes\nBackwards compatibility break: No\nSymfony2 tests pass: Yes\nFixes the following tickets: #1884\nReferences the following tickets: #1884\n\n---------------------------------------------------------------------------\n\nby dustin10 at 2011/12/16 11:03:54 -0800\n\nRebased to squash all commits into one.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/17 05:27:29 -0800\n\n@fabpot: we figured that priorities wouldn't be needed for cleaning .. haven't tested the PR, but conceptually it looks good to me and aside from the priority stuff its modeled after the cache warners.\n\n---------------------------------------------------------------------------\n\nby dustin10 at 2011/12/19 09:46:26 -0800\n\n@fabpot Updated to pass cache dir to `clear` method.\n\n---------------------------------------------------------------------------\n\nby dustin10 at 2011/12/19 10:02:21 -0800\n\n@stof and @fabpot Another thought I just had. Should the `$this->getContainer()->get('cache_clearer')->clear($realCacheDir);` call in the `CacheClearCommand` be done before the warming?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/19 10:03:59 -0800\n\nindeed. the clearing should be done before the warming.\n\n---------------------------------------------------------------------------\n\nby dustin10 at 2011/12/19 10:19:28 -0800\n\nSquashed all commits into one. Let me know if there is anything else.\n\n---------------------------------------------------------------------------\n\nby dustin10 at 2011/12/19 10:31:50 -0800\n\nFixed extra lines.",
            "updated CHANGELOG for 2.1",
            "merged 2.0",
            "merged branch stloyd/missingClientTransformer (PR #2421)\n\nCommits\n-------\n\n49d2685 [Form] Add default validation to TextType field (and related)\n\nDiscussion\n----------\n\n[Form] Add default transformer to TextType field (and related)\n\nBug fix: yes&no (?)\nFeature addition: yes (?)\nBC break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1962.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/12/19 03:43:37 -0800\n\n@fabpot ping ;-)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/19 10:58:20 -0800\n\nIs it really needed? I have a feeling that it enforces unneeded constraints, but I can be wrong of course.\n\n---------------------------------------------------------------------------\n\nby hlecorche at 2011/12/20 02:31:03 -0800\n\nIt's needed because with TextType field, and without the ValueToStringTransformer, the user data (when sending the form) can be an array !!!\n\nFor example:\n- if there is a TextType field\n- and if there is a MaxLengthValidator\n- and if the user data (when sending the form) is an array\nSo the exception  Expected argument of type string, array given in src\\Symfony\\Component\\Validator\\Constraints\\MaxLengthValidator.php at line 40  is thrown",
            "Merge branch '2.0'\n\n* 2.0:\n  [HttpKernel] fixed unit tests that can fail randomly",
            "[HttpFoundation] added support for streamed responses\n\nTo stream a Response, use the StreamedResponse class instead of the\nstandard Response class:\n\n    $response = new StreamedResponse(function () {\n        echo 'FOO';\n    });\n\n    $response = new StreamedResponse(function () {\n        echo 'FOO';\n    }, 200, array('Content-Type' => 'text/plain'));\n\nAs you can see, a StreamedResponse instance takes a PHP callback instead of\na string for the Response content. It's up to the developer to stream the\nresponse content from the callback with standard PHP functions like echo.\nYou can also use flush() if needed.\n\nFrom a controller, do something like this:\n\n    $twig = $this->get('templating');\n\n    return new StreamedResponse(function () use ($templating) {\n        $templating->stream('BlogBundle:Annot:streamed.html.twig');\n    }, 200, array('Content-Type' => 'text/html'));\n\nIf you are using the base controller, you can use the stream() method instead:\n\n    return $this->stream('BlogBundle:Annot:streamed.html.twig');\n\nYou can stream an existing file by using the PHP built-in readfile() function:\n\n    new StreamedResponse(function () use ($file) {\n        readfile($file);\n    }, 200, array('Content-Type' => 'image/png');\n\nRead http://php.net/flush for more information about output buffering in PHP.\n\nNote that you should do your best to move all expensive operations to\nbe  activated/evaluated/called  during template evaluation.\n\nTemplates\n---------\n\nIf you are using Twig as a template engine, everything should work as\nusual, even if are using template inheritance!\n\nHowever, note that streaming is not supported for PHP templates. Support\nis impossible by design (as the layout is rendered after the main content).\n\nExceptions\n----------\n\nExceptions thrown during rendering will be rendered as usual except that\nsome content might have been rendered already.\n\nLimitations\n-----------\n\nAs the getContent() method always returns false for streamed Responses, some\nevent listeners won't work at all:\n\n* Web debug toolbar is not available for such Responses (but the profiler works fine);\n* ESI is not supported.\n\nAlso note that streamed responses cannot benefit from HTTP caching for obvious\nreasons.",
            "made some cosmetic changes",
            "moved a test in the constructor",
            "added the possibility to change a StreamedResponse callback after its creation",
            "[HttpKernel] fixed some unit tests that can fail",
            "merged branch Burgov/fix_entity_choice_list (PR #2942)\n\nCommits\n-------\n\nc60f036 fixed typo\n231e79c fixed entity choice list BC break\n\nDiscussion\n----------\n\nfixed EntityChoiceList BC break\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: fixes a BC break\nSymfony2 tests pass: yes\n\nThis PR resolves a serious BC break introduced in commit b919d92b523eb5fb35e25f40245d8d00e67627ef\nPrior to this commit, it was possible to use the entity shorthand notation in the EntityChoiceList constructor, but it broke because the EntityChoiceList now expects the second argument to be the actual class name\n\nThere is another issue at hand here, but I'm not sure how to fix it:\n\nThe EntityChoiceManager expects an Doctrine\\Common\\Persistence\\ObjectManager instance, then the ClassMetadata is fetched from it and the method getIdentifierFieldNames is called on it. Yet, according to the docblock, getClassMetadata of the ObjectManager returns an instance of Doctrine\\Common\\Persistence\\Mapping\\ClassMetadata, which doesn't have a getIdentifierFieldNames() method.\n\nSo either the EntityChoiceList should expect an instance of EntityManager, or it should be rewritten to not use getIdentifierFieldNames() anymore.\n\nAny ideas?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/22 03:48:49 -0800\n\nping @beberlei\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/12/22 04:02:30 -0800\n\nThe fix is valid\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/22 04:54:53 -0800\n\n@beberlei getIdentifierFieldNames should probably be added in the interface too. Currently, we only have isIdentifier in it.\n\nThis methods needs to be implemented in the MongoDB ODM though (simply returning ``array($this->getIdentifier())``",
            "merged branch Burgov/doctrine_choice_with_proxy_object_fix (PR #2944)\n\nCommits\n-------\n\n0a9ea26 fixed the display of the current value in a doctrine entity type, when the current value is for example an instance of Doctrine\\Orm\\Proxy\\Proxy and is not yet initialized\n\nDiscussion\n----------\n\nfixed the display of the current value in a doctrine entity type\n\n when the current value is an instance of Doctrine\\Orm\\Proxy\\Proxy\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nArguably, this is a Doctrine issue rather than a Symfony one, but when the current value in the entity type is a proxy instance, no item is selected, because  $this->reflFields[$this->identifier[0]]->getValue($entity);  (in ClassMetadata) always returns null unless the entity is loaded\n\n---------------------------------------------------------------------------\n\nby Gregwar at 2011/12/22 07:07:34 -0800\n\n+1 for this\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/22 08:30:44 -0800\n\n@fabpot this is good for the merge now",
            "merged branch stof/entity_provider_registry (PR #2928)\n\nCommits\n-------\n\n373ab4c Fixed tests added from 2.0\n9653be6 Moved the EntityFactory to the bridge\ncaa105f Removed useless use statement\n24319bb [DoctrineBridge] Made it possible to change the manager used by the provider\n\nDiscussion\n----------\n\n[DoctrineBridge] Made it possible to change the manager used by the provider\n\nThis improves the support of several entity managers by allowing using a non-default one for the provider.\n\nIt is BC for the user as the default value for the name is ``null`` which means using the default one.\n\nI'm preparing the PR for DoctrineBundle too\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/19 14:16:38 -0800\n\nI'm wondering if the EntityFactory used to integrate the bundles with SecurityBundle should be moved to the bridge or not. Moving it (making the key and the abstract service id configurable) would allow reusing it in all Doctrine bundles instead of copy-pasting it (see the CouchDBBundle pull request linked above).\nThe bridge was initially meant to integrate third party libraries with the components and this class is about the SecurityBundle, not the component. But on the other hand, we already share the abstract DI extension between the bundles using the bridge.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/19 14:17:48 -0800\n\n@fabpot @beberlei thoughts ?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/21 04:43:50 -0800\n\n@fabpot @beberlei what do you thing about moving the EntityFactory to the bridge ?\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2011/12/21 05:10:56 -0800\n\nMissing mongodb bundle\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/21 05:52:06 -0800\n\n@henrikbjorn I was planning to send the PR for mongodb too but the namespace change was not merged yet yesterday. And now, you want to wait for the answer to know if I need to copy-paste the factory to the mongodb bundle too or if I move it to the bridge\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/12/21 15:14:17 -0800\n\nI think moving it to the Bridge makes sense if we can re-use across all the bundles then. Also it is really about integrating security with doctrine, so its a bridge topic.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/22 08:39:52 -0800\n\nI updated the PR to move the factory to the bridge. The DoctrineBundle and DoctrineCouchDBBundle PRs are updated too.\n\n@fabpot the PR should be ready to be merged\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/22 08:53:02 -0800\n\nTests do not pass for me:\n\n    ...E\n\n    Time: 0 seconds, Memory: 14.75Mb\n\n    There was 1 error:\n\n    1) Symfony\\Tests\\Bridge\\Doctrine\\Security\\User\\EntityUserProviderTest::testSupportProxy\n    Argument 1 passed to Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider::__construct() must implement interface Doctrine\\Common\\Persistence\\ManagerRegistry, instance of Doctrine\\ORM\\EntityManager given, called in tests/Symfony/Tests/Bridge/Doctrine/Security/User/EntityUserProviderTest.php on line 89 and defined\n\n    src/Symfony/Bridge/Doctrine/Security/User/EntityUserProvider.php:35\n    tests/Symfony/Tests/Bridge/Doctrine/Security/User/EntityUserProviderTest.php:89\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/22 08:56:33 -0800\n\n@fabpot I fixed it before your comment (thanks travis ^^). It was the test added in my other PR to 2.0 and so not updated in the original commit. I forgot it when rebasing",
            "[Security] made the logout path check configurable",
            "merged 2.0",
            "fixed merge",
            "merged branch stloyd/profile_simplify (PR #2950)\n\nCommits\n-------\n\n9daa2a6 [Profiler] Add function to get parent token directly\n\nDiscussion\n----------\n\n[Profiler] Add function to get parent token directly\n\n```\nBug fix: no\nFeature addition: kinda\nBackwards compatibility break: no\nSymfony2 tests pass: yes",
            "merged branch willdurand/filesystem-component (PR #2949)\n\nCommits\n-------\n\n4afc6ac Updated CHANGELOG-2.1\n3d3239c Added Filesystem Component mention in composer.json\n5775a0a Added composer.json\nb26ae4a Added README\nfbe9507 Added LICENSE\n818a332 [Component] Moved Filesystem class to its own component\n\nDiscussion\n----------\n\nFilesystem component\n\nRelated to #2946\n\nWilliam\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/22 10:58:25 -0800\n\nyou need to add the new component in the ``replace``  section of the main composer.json, and you also need to add it as a dependency for FrameworkBundle as it defines a service using it.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/22 10:59:34 -0800\n\nand you need to update the changelog file\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/12/22 11:06:04 -0800\n\n@stof thanks. Is it ok ?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/22 11:13:31 -0800\n\nmentioning the move only once in the changelog would probably be enough (and it is especially not needed in the FrameworkBundle section IMO) but otherwise it's fine",
            "Merge branch '2.0'\n\n* 2.0:\n  [Twig] made code compatible with Twig 1.5",
            "merged branch drak/cs (PR #2953)\n\nCommits\n-------\n\n79793e4 Coding standards and removing whitespace.\n\nDiscussion\n----------\n\nCoding standards and removing whitespace.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nPlease note `2.0` cs passes, this is specifically for the `master` branch.",
            "merged branch drak/cs_js (PR #2960)\n\nCommits\n-------\n\n628016d Partial revert of b6a7167 JS syntax requires space in `else if`.\n\nDiscussion\n----------\n\nPartial revert of b6a7167 JS syntax requires space in `else if`\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nReferences the following tickets: -",
            "merged 2.0",
            "merged branch javiereguiluz/add-image-validator-spanish-translation (PR #2969)\n\nCommits\n-------\n\n341dc2b [FrameworkBundle] Added Image validator messages translation for Spanish\n\nDiscussion\n----------\n\n[FrameworkBundle] Added Image validator messages translation for Spanish",
            "reverted wrong CD fix",
            "merged branch webfactory/tolerant_esi_include (PR #2952)\n\nCommits\n-------\n\ncae7db0 Be more tolerant and also accept <esi:include ...></esi:include>, also if it is not 100% standards compliant.\n\nDiscussion\n----------\n\nBe more tolerant and also accept <esi:include ...></esi:include>\n\nI know this is not 100% standards compliant, but:\n\nWe need to do some XHTML processing on the output using PHP's DOM extension and the underlying libxml2.\n\nlibxml2 seems to be unable to keep the <esi:include /> tag as such and will expand it to ```<esi:include ...></esi:include>```.\n\nNote this has nothing to do with having LIBXML_NOEMPTYTAG set (http://php.net/manual/de/domdocument.savexml.php). Rather it seems to be a problem for libxml that it cannot recognize <esi:include> as an  EMPTY  tag (in the DTD sense) because it is not defined in a standard xhtml1-strict DTD.",
            "[HttpKernel] added a unit test for previous merge",
            "Merge branch '2.0'\n\n* 2.0:\n  [TwigBridge] changed composer.json max version for Twig\n  use the forward compat version in the Filesystem service",
            "Merge branch '2.0'\n\n* 2.0:\n  changed composer.json max version for Twig",
            "merged branch loalf/patch-1 (PR #2981)\n\nCommits\n-------\n\n60f845f 'for' was duplicated\n\nDiscussion\n----------\n\n'for' was duplicated",
            "merged branch mshtukin/master (PR #2979)\n\nCommits\n-------\n\n1bc10e5 Forgotten </trans-unit> tag added\n\nDiscussion\n----------\n\nForgotten </trans-unit> tag added\n\non src/Symfony/Bundle/FrameworkBundle/Resources/translations/validators.es.xlf",
            "merged 2.0",
            "merged 2.0",
            "merged branch alefranz/patch-1 (PR #2997)\n\nCommits\n-------\n\nde9d7d8 Updated italian traslation of validator\n\nDiscussion\n----------\n\nUpdated italian traslation of validator",
            "merged branch inanimatt/patch-1 (PR #2994)\n\nCommits\n-------\n\n7e48f97 Fix speling misteak :)\n\nDiscussion\n----------\n\nFix speling misteak :)\n\nJust a little one, but it's in a subtitle.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/12/29 08:45:42 -0800\n\nMisteak ? ^^ You misspelled your commit message :)\n\n---------------------------------------------------------------------------\n\nby inanimatt at 2011/12/29 08:48:56 -0800\n\nThat was a joke :P",
            "Merge branch '2.0'\n\n* 2.0:\n  [Tests] Skip segfaulting form test\n  Rename test file\n  [BrowserKit] added missing @return PHPDoc for the Client::submit() method.\n  also test PHP 5.3.2, since this is the official lowest supported PHP version",
            "Revert  merged branch kriswallsmith/security/demeter-fix (PR #2816) \n\nThis reverts commit 76ba2bc7accbea356c9a5bf5231bf786f50ffd90, reversing\nchanges made to 4730f4303b1a266185226ee05fa9f93f0468a2e1.",
            "[FrameworkBundle] changed the implementation of Controller::getUser() to be similar to the one from GlobalVariables::getUser()",
            "[Routing] fixed wrong namespaces in tests",
            "[Routing] removed trailing slash support for routes that are not available for GET/HEAD methods (as the redirection will always occurs with a GET/HEAD request, closes #2626)",
            "moved EngineInterface::stream() to a new StreamingEngineInterface to keep BC with 2.0",
            "merged branch symfony/streaming (PR #2935)\n\nCommits\n-------\n\n887c0e9 moved EngineInterface::stream() to a new StreamingEngineInterface to keep BC with 2.0\n473741b added the possibility to change a StreamedResponse callback after its creation\n8717d44 moved a test in the constructor\ne44b8ba made some cosmetic changes\n0038d1b [HttpFoundation] added support for streamed responses\n\nDiscussion\n----------\n\n[HttpFoundation] added support for streamed responses\n\nTo stream a Response, use the StreamedResponse class instead of the\nstandard Response class:\n\n    $response = new StreamedResponse(function () {\n        echo 'FOO';\n    });\n\n    $response = new StreamedResponse(function () {\n        echo 'FOO';\n    }, 200, array('Content-Type' => 'text/plain'));\n\nAs you can see, a StreamedResponse instance takes a PHP callback instead of\na string for the Response content. It's up to the developer to stream the\nresponse content from the callback with standard PHP functions like echo.\nYou can also use flush() if needed.\n\nFrom a controller, do something like this:\n\n    $twig = $this->get('templating');\n\n    return new StreamedResponse(function () use ($templating) {\n        $templating->stream('BlogBundle:Annot:streamed.html.twig');\n    }, 200, array('Content-Type' => 'text/html'));\n\nIf you are using the base controller, you can use the stream() method instead:\n\n    return $this->stream('BlogBundle:Annot:streamed.html.twig');\n\nYou can stream an existing file by using the PHP built-in readfile() function:\n\n    new StreamedResponse(function () use ($file) {\n        readfile($file);\n    }, 200, array('Content-Type' => 'image/png');\n\nRead http://php.net/flush for more information about output buffering in PHP.\n\nNote that you should do your best to move all expensive operations to\nbe  activated/evaluated/called  during template evaluation.\n\nTemplates\n---------\n\nIf you are using Twig as a template engine, everything should work as\nusual, even if are using template inheritance!\n\nHowever, note that streaming is not supported for PHP templates. Support\nis impossible by design (as the layout is rendered after the main content).\n\nExceptions\n----------\n\nExceptions thrown during rendering will be rendered as usual except that\nsome content might have been rendered already.\n\nLimitations\n-----------\n\nAs the getContent() method always returns false for streamed Responses, some\nevent listeners won't work at all:\n\n* Web debug toolbar is not available for such Responses (but the profiler works fine);\n* ESI is not supported.\n\nAlso note that streamed responses cannot benefit from HTTP caching for obvious\nreasons.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/12/21 06:34:13 -0800\n\nJust an idea: what about exposing flush() to twig? Possibly in a way that it will not call it if the template is not streaming. That way you could always add a flush() after your </head> tag to make sure that goes out as fast as possible, but it wouldn't mess with non-streamed responses. Although it appears flush() doesn't affect output buffers, so I guess it doesn't need anything special.\n\nWhen you say  ESI is not supported. , that means only the AppCache right? I don't see why this would affect Varnish, but then again as far as I know Varnish will buffer if ESI is used so the benefit of streaming there is non-existent.\n\n---------------------------------------------------------------------------\n\nby cordoval at 2011/12/21 08:04:21 -0800\n\nwonder what the use case is for streaming a response, very interesting.\n\n---------------------------------------------------------------------------\n\nby johnkary at 2011/12/21 08:19:48 -0800\n\n@cordoval Common use cases are present fairly well by this RailsCast video: http://railscasts.com/episodes/266-http-streaming\n\nEssentially it allows faster fetching of web assets (JS, CSS, etc) located in the &lt;head>&lt;/head>, allowing those assets to be fetched as soon as possible before the remainder of the content body is computed and sent to the browser. The end goal is to improve page load speed.\n\nThere are other uses cases too like making large body content available quickly to the service consuming it. Think if you were monitoring a live feed of JSON data of newest Twitter comments.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/12/21 08:54:35 -0800\n\nHow does this relate the limitations mentioned in:\nhttp://yehudakatz.com/2010/09/07/automatic-flushing-the-rails-3-1-plan/\n\nAm I right to understand that due to how twig works we are not really streaming the content pieces when we call render(), but instead the entire template with its layout is rendered and only then will we flush? or does it mean that the render call will work its way to the top level layout template and form then on it can send the content until it hits another block, which it then first renders before it continues to send the data?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/21 09:02:53 -0800\n\n@lsmith77 this is why the ``stream`` method calls ``display`` in Twig instead of ``render``. ``display`` uses echo to print the output of the template line by line (and blocks are simply method calls in the middle). Look at your compiled templates to see it (the ``doDisplay`` method)\nRendering a template with Twig simply use an output buffer around the rendering.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/21 09:24:33 -0800\n\n@lsmith77: We don't have the Rails problem thanks to Twig as the order of execution is the right one by default (the layout is executed first); it means that we can have the flush feature without any change to how the core works. As @stof mentioned, we are using `display`, not `render`, so we are streaming your templates for byte one.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/21 09:36:41 -0800\n\n@Seldaek: yes, I meant ESI with the PHP reverse proxy.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/21 09:37:34 -0800\n\n@Seldaek: I have `flush()` support for Twig on my todo-list. As you mentioned, It should be trivial to implement.\n\n---------------------------------------------------------------------------\n\nby fzaninotto at 2011/12/21 09:48:18 -0800\n\nHow do streaming responses deal with assets that must be called in the head, but are declared in the body?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/21 09:52:12 -0800\n\n@fzaninotto: What do you mean?\n\nWith Twig, your layout is defined with blocks ( holes ). These blocks are overridden by child templates, but evaluated as they are encountered in the layout. So, everything works as expected.\n\nAs noted in the commit message, this does not work with PHP templates for the problems mentioned in the Rails post (as the order of execution is not the right one -- the child template is first evaluated and then the layout).\n\n---------------------------------------------------------------------------\n\nby fzaninotto at 2011/12/21 10:07:35 -0800\n\nI was referring to using Assetic. Not sure if this compiles to Twig the same way as javascript and stylesheet blocks placed in the head - and therefore executed in the right way.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/21 10:34:59 -0800\n\n@Seldaek: I've just added a `flush` tag in Twig 1.5: https://github.com/fabpot/Twig/commit/1d6dfad4f55c721ec7b6e674ef225b8442bce896\n\n---------------------------------------------------------------------------\n\nby catchamonkey at 2011/12/21 13:29:22 -0800\n\nI'm really happy you've got this into the core, it's a great feature to have! Good work.",
            "merged branch jmikola/MongoDbProfilerStorageTest (PR #3008)\n\nCommits\n-------\n\n3ef0594 [HttpKernel] Fix missing $method argument in MongoDbProfilerStorageTest\n\nDiscussion\n----------\n\n[HttpKernel] Fix missing $method argument in MongoDbProfilerStorageTest\n\n```\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n```\n\nThis test case fixes failures related to a signature change for ProfilerStorageInterface::find(). See: 1aef4e806b5a99312b82a0b10a9d2e2f4d4314ba and 5f2226807cfe4f37c461709d41f991d615cf0684.\n\nThis was easily missed as the test case is skipped unless a MongoDB server is running.",
            "fixed typo",
            "[Templating] simplified PhpEngine as it cannot implements the streaming interface",
            "[HttpKernel] added the path info in the request data collector",
            "[WebProfilerBundle] moved the computation of the Router panel at runtime",
            "[BrowserKit] first attempt at fixing CookieJar (closes #2209)",
            "[WebProfilerBundle] fixed some bugs",
            "[FrameworkBundle] removed the possibility to pass a non-scalar attributes when calling render() to make the call works with or without a reverse proxy (closes #2941)",
            "[HttpKernel] fixed doubled results for the file profiler (closes #2915)",
            "[FrameworkBundle] allowed attributes of the render() method to be arrays",
            "[TwigBridge] added missing transchoice filters whe extracting translations from templates",
            "[TwigBridge] moved the default value for the translation domain to the Node compilation (allows to know when a domain has been provided by the user)",
            "[TwigBridge] allow the domain translation to be null when calling the trans and transchoice filters (to allow passing a locale without hardcoding the messages domain)",
            "[TwigBridge] removed obsolete file",
            "[TwigBridge] added a way to specify a default domain for a Twig template (via the 'trans_default_domain' tag)\n\nNote that the tag only influences the current templates. It has no effect on included files to avoid unwanted side-effects.",
            "merged branch rouffj/propel-extension (PR #3011)\n\nCommits\n-------\n\n20f96bd Fix CS\n2f47cca [Propel1] Add a PropelExtension\n\nDiscussion\n----------\n\n[Propel1] Add a PropelExtension\n\nThe propel extension allow to use propel specific type (ModelType) outside of\nSymfony2.\n\n---------------------------------------------------------------------------\n\nby rouffj at 2012/01/01 15:36:10 -0800\n\n@Stof Fixed :).\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012/01/02 07:38:22 -0800\n\n:+1:",
            "[DoctrineBundle] removed the bundle (migrated to the Doctrine organization)",
            "merged branch henrikbjorn/security-extension-check-path (PR #3005)\n\nCommits\n-------\n\nc37c145 [SecurityBundle] Only throw exception if check_path looks like an url\n\nDiscussion\n----------\n\n[SecurityBundle] Only throw exception if check_path looks like an url\n\nfixes #2954 and enables the usage of route names like you can in all other paths",
            "merged branch igorw/streaming (PR #3017)\n\nCommits\n-------\n\n7ae9348 [streaming] Document and test that Transfer-Encoding is absent\n83c23ca [streaming] Do not set a Transfer-Encoding header of chunked\n\nDiscussion\n----------\n\n[HttpFoundation] Do not set a Transfer-Encoding header of chunked for streaming responses\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThis is an adjustment to the streaming introduced in #2935.\n\nApache expects the response to already be in chunked format when the Transfer-Encoding header is set to chunked, which causes it to not deliver the streamed body.\n\nIf no Content-Length is set on the response (regardless of Transfer-Encoding), web servers will automatically switch to chunked Transfer-Encoding, and handle the chunking for you.\n\nI have tested this with Apache 2.2.2 and nginx 1.0.5. Testing with other webservers is appreciated.",
            "updated CHANGELOG for 2.1",
            "merged branch stealth35/fix_2630 (PR #3023)\n\nCommits\n-------\n\nf4890c2 [Translation] Po/MoFileLoader parse plurization rules\n\nDiscussion\n----------\n\n[Translation] Po/MoFileLoader parse plurization rules\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/stealth35/symfony.png?branch=fix_2630)](http://travis-ci.org/stealth35/symfony)Fixes the following tickets: #2630\nTodo: Not happy with the pluralize style\n\n```\nmsgid  foo \nmsgid_plural  foos \nmsgstr[0]  bar \nmsgstr[1]  bars \n```\nto\n\n```\narray (\n    'foo' => 'bar',\n    'foos' => '{0} bar|{1} bars'\n)\n```",
            "merged 2.0",
            "merged branch franmomu/patch-1 (PR #3033)\n\nCommits\n-------\n\n0ed3497 [FrameworkBundle][translations] Updated Catalan translation\n\nDiscussion\n----------\n\n[FrameworkBundle][translations] Updated Catalan translation\n\nAdded some translations\n\n---------------------------------------------------------------------------\n\nby stof at 2012/01/04 19:14:29 -0800\n\nCan you send the trans-unit 41 to the 2.0 branch as it is already part of the 2.0 release (ids 42 and above are new for 2.1)\n\n---------------------------------------------------------------------------\n\nby franmomu at 2012/01/05 00:53:49 -0800\n\nOf course, I didn't realize",
            "merged 2.0",
            "fixed previous merge",
            "merged branch antonbabenko/master (PR #2995)\n\nCommits\n-------\n\n1cd74ec Added norwegian translations of validators\n\nDiscussion\n----------\n\nAdded norwegian translations of validators\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/29 10:14:43 -0800\n\nCan you send a PR to the 2.0 branch instead of master to add these translation for the ids 1 to 41 (missing in your PR btw) ? and then another PR to master for the ids 42 to 48 which are new for 2.1 ?\n\n---------------------------------------------------------------------------\n\nby antonbabenko at 2011/12/29 10:59:39 -0800\n\nOk, will do, but where can I find the correct original one ? I took german file as the most complete. Some languages have different amount of phrases and sources.\n\n---------------------------------------------------------------------------\n\nby javiereguiluz at 2011/12/29 11:23:04 -0800\n\n@antonbabenko you can use the Spanish translation as an example (it was updated very recently and I initially made the same mistake ;) ):\n\n  * #2968 for 2.0 branch (added id 41)\n  * #2969 for master branch (added ids 42 - 48)\n\n---------------------------------------------------------------------------\n\nby antonbabenko at 2011/12/29 11:28:03 -0800\n\nThanks Javier.",
            "merged branch vicb/test/TwigBridge (PR #3044)\n\nCommits\n-------\n\ndcee6ff [TwigBridge] Improve test coverage\n\nDiscussion\n----------\n\n[TwigBridge] Improve test coverage\n\nrelated to https://github.com/fabpot/Twig/issues/580\n\n[Travis is happy](http://travis-ci.org/#!/vicb/symfony/builds/484594) but it seems he doesn't like branch name with `/` when displaying status images.\n\nIt could have been submitted against 2.0 but there is an issue here: the bridge is tied to Twig so that would mean testing against every single Twig version shipped with 2.0 which I don't want.\n\nI have  solved  the issue by ensuring that Twig version is at least 1.5.0 in the tests set up. This is not a perfect solution but I can not imagine something better for now.",
            "merged branch canni/empty_root_form_name (PR #2936)\n\nCommits\n-------\n\n3702541 Add tests\n4f38b14 Remove `elseif`\na5efe6a Add info to CHANGELOG-2.1\n3d20e39 [Form] Enable empty root form name\n\nDiscussion\n----------\n\n[Form] Enable empty root form name\n\nBC Break: no\nFeature addition: yes\nSymfony2 tests pass: yes\nFixes the following issues: #2790\nTodo: need more testing\n\nThis PR enables usage of empty string as a form name (only at root level).\n\n---------------------------------------------------------------------------\n\nby canni at 2011/12/21 09:44:51 -0800\n\n@stof corrected\n\n---------------------------------------------------------------------------\n\nby canni at 2012/01/03 01:23:37 -0800\n\n@Tobion corrected, thx\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012/01/05 19:22:25 -0800\n\n@canni: Can you add some unit tests for this new feature? Thanks.\n\n---------------------------------------------------------------------------\n\nby canni at 2012/01/06 03:09:39 -0800\n\n@fabpot Will do :)\n\n---------------------------------------------------------------------------\n\nby canni at 2012/01/07 07:36:10 -0800\n\n@fabpot done.",
            "Revert  merged 2.0 \n\nThis reverts commit 7000e944fd05446c75fdc35fd811005cbe2fa5c4, reversing\nchanges made to 9d9013d662b311ae541fa98433441d330a83a869.",
            "merged branch ericclemmons/2863-getsetmethodnormalize-lcfirst (PR #3051)\n\nCommits\n-------\n\n707bcc3 Updated CHANGELOG with GetSetNormalizer BC change\n85bf553 GetSetMethodNormalizer uses lcfirst instead of strtolower when computing method names\n01fcb1b Updated GetSetMethodNormalizerTest to expect camelCased functions instead of lowercased\n\nDiscussion\n----------\n\n[Serializer] GetSetMethodNormalizer uses `lcfirst` instead of `strtolower` (on master)\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: #2863\n\nRebased PR #2977 onto `master` (was on `2.0`).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012/01/06 10:57:23 -0800\n\nCan you add a note in the CHANGELOG to explain the change and the potential BC break?\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2012/01/08 13:34:17 -0800\n\n@fabpot Updated `CHANGELOG-2.1` since this is going onto `master`.\n\n---------------------------------------------------------------------------\n\nby stof at 2012/01/08 13:48:59 -0800\n\n@ericclemmons you should rebase your branch on top of master. github says it cannot be merged as is\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2012/01/08 14:02:11 -0800\n\n@stof Done.  (There was another Serializer entry in the CHANGELOG that didn't exist when I made this branch.)",
            "merged 2.0",
            "merged branch maastermedia/translations (PR #3064)\n\nCommits\n-------\n\n10ecaba slovenian validators.xlf updated\n\nDiscussion\n----------\n\nValidators.sl.xlf updated\n\nPR sent intentionally to symfony:master because of different translations set in translations.XYZ.xlf and translations.XYZ.xliff in current 2.0 branch.",
            "merged branch Seldaek/console_opts (PR #3060)\n\nCommits\n-------\n\n7f7b853 [Console] Format simple arrays nicer\n\nDiscussion\n----------\n\n[Console] Format simple arrays nicer\n\nMinor cosmetic adjustment for simple (i.e. with sequential numeric keys) arrays",
            "[Console]\u00a0tweaked previous merge",
            "merged branch Seldaek/console_opts2 (PR #3061)\n\nCommits\n-------\n\nc7ab9ba [Console] Allow redefinition of application options descriptions\n\nDiscussion\n----------\n\n[Console] Allow redefinition of application options descriptions\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThis allows you to redefine an `InputOption` as long as it keeps the same semantic (same default, same name, same alias, same modes). There are two purposes:\n\n- Modifying the description with a more accurate one\n- Making sure the option appears in your commands' help\n\nConcrete example: I often want to provide a verbose version of commands. It's an elegant and very common pattern, but I basically can't document what is going to happen if you do `--verbose` since the base Application already defines `--verbose`. Also the `--verbose` option does not appear when you do `console <command> --help`, which means people probably won't think of using that option.",
            "merged 2.0",
            "merged branch pulzarraider/updated_sk_validator (PR #3072)\n\nCommits\n-------\n\nc8bafcf Updated validators.sk.xlf file\n\nDiscussion\n----------\n\n[FrameworkBundle] Slovak translations updated\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-09T20:33:53Z\n\ncan you send the ids below 41 to the 2.0 branch ? Only 42-28 are new for 2.1\n\n---------------------------------------------------------------------------\n\nby pulzarraider at 2012-01-09T20:39:42Z\n\nDone, see #3073.",
            "merged branch Seldaek/route_redirect (PR #3074)\n\nCommits\n-------\n\naf32590 [FrameworkBundle] Use only _route_params to generate redirect routes\n\nDiscussion\n----------\n\n[FrameworkBundle] Use only _route_params to generate redirect routes\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nRoutes in RedirectController are generated using all request attributes, which is inconvenient since I abuse request attributes to store other things (device types and such) relevant to the app. It renders the RedirectController useless since it adds unrelated query parameters to URLs it creates.",
            "merged branch hhamon/dead_code_cleanup (PR #3086)\n\nCommits\n-------\n\nf750e54 [HttpKernel] removed unused local $event variable in Stopwatch::stopSection() method.\ndefdac6 [DependencyInjection] removed unused private property $parameterBag in ResolveParameterPlaceHoldersPass::process() method.\n1ad3d86 [DependencyInjection] removed unused $compiler local variable in RepeatedPass::process() method.\n7088d94 [DependencyInjection] fixed wrong local variable name in RemoveUnusedDefinitionsPass::process() method.\na7f857d [Console] removed unused $position parameter in Shell::autocompleter() method.\nef6297a [BrowserKit] removed unused $name variable in CookieJar::allValues() method.\n\nDiscussion\n----------\n\nDead code cleanup",
            "merged branch vicb/stopwatch (PR #3088)\n\nCommits\n-------\n\nc0ad1ac [HttpKernel] Minor fixes in the Stopwatch\n\nDiscussion\n----------\n\n[HttpKernel] Minor fixes in the Stopwatch\n\nNot a breakthrough, fixing `'0'` handling at 2 places, some re factoring (fluid interface)",
            "merged 2.0",
            "fixed some phpdoc",
            "merged branch henrikbjorn/twig-bridge-resources (PR #3099)\n\nCommits\n-------\n\n348a3c6 [TwigBridge] Use reflection to get guess the file path for form resources fixes #3093\n\nDiscussion\n----------\n\n[TwigBridge] Use reflection to guess the file path for form resources\n\nFixes #3093",
            "merged branch henrikbjorn/framework-bundle-composer (PR #3100)\n\nCommits\n-------\n\n78ce60c Add config as required\n10b3cde [FrameworkBundle] Add missing dependency and recommended libraries fixes #3094\n\nDiscussion\n----------\n\n[FrameworkBundle] Add missing dependency and recommended libraries\n\nFixes #3094\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-01-12T17:31:14Z\n\nYou forgot the dependency on config? Is it on purpose\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-01-12T17:39:20Z\n\nthe config is recommended package on the DependencyInjection component.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-12T17:40:56Z\n\n@henrikbjorn yeah, but it is *required* dependency for FrameworkBundle, not only recommended\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-01-12T17:41:56Z\n\nwell it will install it by default as it is recommended.\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-12T17:43:05Z\n\n@henrikbjorn yeah, but it will be skipped if the user asks to avoid recommended packages (the flag is not implemented yet IIRC) which would break FrameworkBundle as it requires the component",
            "merged branch bschussek/optional-form-child-validation (PR #3128)\n\nCommits\n-------\n\n0c70a41 [Form] Made validation of form children configurable. Set the option  cascade_validation  to `true` if you need it.\n\nDiscussion\n----------\n\n[Form] Made validation of form children configurable\n\nBug fix: yes\nFeature addition: yes\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: #797\nTodo: adapt documentation\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=optional-form-child-validation)\n\nChild forms now aren't validated anymore by default. This is not a problem as long as @Valid constraints are properly put in your model. If you want to enable cascading validation, for example when there is no connection between the parent and the child model, you can set the option  cascade_validation  in the parent form to true.\n\nThis change is not backwards compatible, but from my estimation the break should not affect many applications.\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-01-16T19:59:25Z\n\n:+1:",
            "merged branch gimler/encoder_fix (PR #3122)\n\nCommits\n-------\n\nf3c413d add missing class var; add phpdocs\n\nDiscussion\n----------\n\nadd missing class var; add phpdocs\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-01-16T11:12:27Z\n\nWe don't document properties, especially private ones.\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-01-16T11:20:44Z\n\nGood doc always help and should be accepted even for private properties.\n\nHowever sometimes doc isn't necessary: `The digest algorithm to use` does not bring more information than the name itself `MessageDigestPasswordEncoder::algorithm`, the `@var`  annotation could be useful - even more for objects & arrays.\n\n---------------------------------------------------------------------------\n\nby gimler at 2012-01-16T11:37:54Z\n\ni have remove the private property comments.",
            "merged branch beberlei/DoctrineUniqueValidator (PR #2724)\n\nCommits\n-------\n\n59397cf [DoctrineBridge] Generalize EntityValidator to work with any validation service and against any Common ClassMetadata provider\n\nDiscussion\n----------\n\n[DoctrineBridge] Generalize EntityValidator to work with any validation ...\n\n...service and against any Common ClassMetadata provider. Also decoupled the Bridge from its implicit dependency on the  doctrine.orm.vaildator.unique  service.\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: no",
            "merged branch javiereguiluz/add-unique-entity-spanish-translation (PR #2968)\n\nCommits\n-------\n\neb2d6e6 [FrameworkBundle] Added UniqueEntity message translation for Spanish\n\nDiscussion\n----------\n\n[FrameworkBundle] Added UniqueEntity message translation for Spanish",
            "[TwigBridge] changed composer.json max version for Twig",
            "changed composer.json max version for Twig",
            "merged branch weaverryan/parameter_bag_phpdoc (PR #2965)\n\nCommits\n-------\n\na9b54df [HttpFoundation] Adding some additional PHPDoc to ParameterBag\n\nDiscussion\n----------\n\nParameter bag phpdoc\n\nHi guys!\n\nVery basic - just noticed that a few spots were a little light in PHPDoc while doing some docs stuff. Especially with core components that are being used by other groups, loading up on more PHPDoc may be a good idea where it's light.\n\nThanks!",
            "merged 2.0",
            "merged branch beberlei/RemoveAbtractDoctrineBundle (PR #2484)\n\nCommits\n-------\n\n661421f [Doctrine] Remove AbstractDoctrineBundle and move code into Doctrine Bridge\n\nDiscussion\n----------\n\n[WIP] [Doctrine] Remove abtract doctrine bundle\n\nRemove AbstractDoctrineBundle and move code into Doctrine Bridge. It is a BC break because all the  other  Doctrine Bundles MongoDB ODM, CouchDB ODM and PHPCR need to be updated to cope with this.\n\nI will prepare PRs for them aswell and then remove the [WIP] here.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: #2463\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/10/26 12:32:51 -0700\n\nHere are all 3 PRs, can we coordinate on merging them somehow?\n\nhttps://github.com/symfony/DoctrineMongoDBBundle/pull/50\nhttps://github.com/symfony-cmf/symfony-cmf/pull/118\nhttps://github.com/doctrine/DoctrineCouchDBBundle/pull/4\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/10/26 12:33:38 -0700\n\nPing @lsmith77 @jwage\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/10/26 12:35:29 -0700\n\nall good for me ..\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/26 14:58:01 -0700\n\nWell, this does not fix #2463. A change done in the bridge will still be able to break the service definitions of the other bundles or require tricky stuff to keep different versions of the logic.\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/10/26 22:49:39 -0700\n\n@stof true, that is what https://github.com/doctrine/common/pull/71 will be about.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/10/26 23:51:25 -0700\n\nComment just for linking cross PRs and for watching ;-) doctrine/common#71\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/10/31 08:18:45 -0700\n\nplease add forward compatibly into symfony 2.0 as per #2522\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/11/01 05:11:34 -0700\n\nThis doesn't make sense imho, since the number of people using the doctrine extension is 4 and everybody also prepared their pull request for this.\n\nThe problem is really that we need a branch for the MongoDB Bundle\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/11/01 05:40:49 -0700\n\n@fabpot i created a branch in MongoDBBundle for 2.0 so this is ready to be merged.",
            "merged branch beberlei/FormErrors (PR #2533)\n\nCommits\n-------\n\n149bdb9 Enhance error messages with regard to form type properties.\n\nDiscussion\n----------\n\n[Form] Enhanced error messages\n\nWith this patch its much easier to see what went wrong with a form type and what the possible options are.\n\nAlso added tests for this error conditions.",
            "merged branch ericclemmons/1735-entity_choice_list_group_by (PR #2464)\n\nCommits\n-------\n\n6cb7acf CS - camelCase & curly braces\nd9b7abb Added EntityChoiceList test for `group_by` and invalid, deep property paths\ne6554d6 Removed Closure support from group_by (PropertyPath strings only)\n037933a CS - (String) renamed to (string)\n7ad0f05 Added group_by test for EntityType\n882482a Added group_by tests for EntityChoiceList\n040e988 `EntityChoiceList` now supports grouping of entities by property path or closure\nb171a6a Added `group_by` to EntityType\n\nDiscussion\n----------\n\n[Doctrine] [Form] EntityType+EntityChoiceList supports grouping choices\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1735\n\nPer the discussion in #1735, `EntityType` does not immediately support grouping options, though I updated support for it in `EntityChoiceList` in fb9d951b1d220a3a84a0228ca2fee7c7b8883bd5.\n\nThis PR accomplishes the following:\n\n* Adds optional `group_by` property to `EntityType` that supports either a `PropertyPath` or a `\\Closure` that is evaluated on the entity choices\n* Support for groups is added via the constructor in `EntityChoiceList`\n* Groups are created prior to `EntityChoiceList#loadEntities` via a new `groupEntities` function\n* Added tests for `EntityChoiceList`\n* Added test for `EntityType` `group_by` support\n\n*There is an alternative version that only modifies `EntityType`, but that requires the addition of `EntityType#buildView(...)`, which is messy, IMO: https://github.com/ericclemmons/symfony/compare/master...1735-entity_type_group_by*\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/10/25 01:48:23 -0700\n\nping @beberlei\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/10/25 03:06:05 -0700\n\nI didnt run the tests, but generally this looks very good and is a good extension.\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/11/01 06:25:09 -0700\n\n@fabpot i revewied this and it looks very good, tests all pass, i think this is a very nice addition.",
            "updated CHANGELOG for 2.1",
            "merged branch stof/serialize_resource (PR #2529)\n\nCommits\n-------\n\ncbd0c3c [Config] Implemented Serializable on resources\n\nDiscussion\n----------\n\n[Config] Implemented Serializable on resources\n\nbug fix: no\nfeature addition: no\nBC break: not really. you simply need to clear your cache in debug mode\ntest passes: yes\n\nSerializing private variables without implementing Serializable uses far more space as it prepend the fully qualified class name before the name of each property. This change allows keeping the meta file smaller.",
            "merged branch benjamindulau/type_validator (PR #2532)\n\nCommits\n-------\n\n05a4e9d [Validators][Type] Added support for ctype_* functions + tests\n\nDiscussion\n----------\n\n[Validators][Type] Added support for ctype_* functions + tests\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nNot sure if the ctype_* functions support should be included in the AssertTypeValidator or in a dedicated one.\nWhat do you think ?",
            "updated CHANGELOG for 2.1",
            "merged 2.0",
            "merged branch snc/patch-4 (PR #2540)\n\nCommits\n-------\n\n316eacb Fixed merge conflict.\n\nDiscussion\n----------\n\nFixed merge conflict\n\nThere was a merge conflict in the composer.json file of the doctrine bridge...",
            "merged branch danielcsgomes/master (PR #2569)\n\nCommits\n-------\n\n3fe1e6d Added new pt_PT translations.\n\nDiscussion\n----------\n\nAdded new pt_PT translations",
            "merged branch drak/docblocks (PR #2546)\n\nCommits\n-------\n\n09e1e60 Grammar changes.\nb4d0f4b Grammar changes\na0e62f0 Fix typos.\ne6627fb Docblocks.\n\nDiscussion\n----------\n\n[HttpFoundation] Docblocks.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: n/a\nFixes the following tickets: -\n\nAdded missing docblocks and type hints.  Improves use with IDE and auto-generated API docs.",
            "[Yaml] Yaml::parse() does not evaluate loaded files as PHP files by default anymore\n\nThis has been done to avoid security issues.\n\nTo get back the old behavior, call Yaml::enablePhpParsing() first.",
            "[Console] added an exception when overriding an existing argument (added some unit tests for option and arguments overriding)",
            "merged branch docteurklein/ticket_2424 (PR #2429)\n\nCommits\n-------\n\n78883f9 Allow syntax like ``{% render  AcmeDemoBundle:Frontend/Default:index  %}``\n\nDiscussion\n----------\n\nAllow syntax like ``{% render  AcmeDemoBundle:Frontend/Default:index  %}`\n\nAllow syntax like ``{% render  AcmeDemoBundle:Frontend/Default:index  %}``\n\nBug fix: yes\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #2424\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/18 07:44:48 -0700\n\n@docteurklein still the same issue. github says it conflicts. Are you sure you fetched the latest version ?\nThus it should be sent to 2.0 IMO as it is a bugfix\n\n---------------------------------------------------------------------------\n\nby docteurklein at 2011/10/18 07:51:21 -0700\n\n@stof Yes, i'm pretty sure I followed the patches sending flow. (http://symfony.com/doc/2.0/contributing/code/patches.html\n\nMy tools are telling me it's ok.\nI then merged it into master without any problem, which is up to date with upstream.\n\nSorry for the inconvenience.\nI'll try to send it to 2.0 branch.\n\n---------------------------------------------------------------------------\n\nby docteurklein at 2011/10/18 07:53:52 -0700\n\n@stof, what's wrong with https://github.com/docteurklein/symfony/commits/ticket_2424 ?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/18 08:28:21 -0700\n\nhmm, seems like github has an issue when determining if it conflicts or not. It's sad\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2011/10/20 09:49:56 -0700\n\nDosent this already work ? as classes are namespaces the / should be a \\ i think ?\n\nWorks for routes at least.",
            "[TwigBundle] fixed inheritance in TimedTwigEngine",
            "added the real template name when an error occurs in a Twig template",
            "merged 2.0",
            "[TwigBundle] fixed exception class name",
            "[HttpKernel] fixed file storage for the profiler",
            "[HttpKernel] fixed some unit tests",
            "[Security] made exceptions thrown by the user checker and the checkAuthentication() method use the hideUserNotFoundExceptions flag",
            "merged branch dpb587/patch-sectok (PR #2414)\n\nCommits\n-------\n\nab9caa0 [Security] Check for request's session before attempting writes.\ndabff0e [Security] Support removing tokens from a session.\n\nDiscussion\n----------\n\n[Security] Support removing tokens from a session.\n\nCurrently there is no way to remove a session's security token without invalidating the entire session and all its data (the ContextListener will only update the session if a token is non-null and non-anonymous). This patch fixes that.\n\nI consider this a bug and I found no tests to prove otherwise. Let me know if I'm mistaken. Originally mentioned at https://groups.google.com/d/topic/symfony-devs/ojLvh0WUbfo/discussion\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\n---------------------------------------------------------------------------\n\nby ms937 at 2011/10/24 05:19:21 -0700\n\nThis change looks good to me. In fact I'm using similar patch in my app and it works as intended. Also, several other people requested this on the mailing list. Could someone from Symfony team merge this? Thanks.",
            "updated CHANGELOG for 2.1",
            "merged 2.0",
            "merged branch dbu/fix-routing-exception-doc (PR #2566)\n\nCommits\n-------\n\n57040a8 document exceptions on the interfaces, inheritDoc on implementations, use statements instead of fully qualified exception names\n\nDiscussion\n----------\n\nFix routing exception doc\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nThis is only documentation cleanup for the url matcher and generator interfaces as they did not properly reflect the exceptions that are expected to be thrown. when the exceptions are not respected, unexpected behaviour can happen.\n\n---------------------------------------------------------------------------\n\nby dbu at 2011/11/07 00:49:08 -0800\n\nok, changed that. thought in an interface definition we would not want to  use  exceptions just for doc, but its changed now.\n\ni rebased on the upstream master and got this additional commit about portuguese translations, no idea why this happened. and my local git diff does not show it either. is it creating problems in the pull request or can you still merge?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/07 01:11:31 -0800\n\n@dbu: Can you squash your commits and remove a commit that is not related to this PR? Thanks a lot.\n\n---------------------------------------------------------------------------\n\nby dbu at 2011/11/07 23:49:37 -0800\n\nok, done. thanks to you, i learn a lot about git :-)\n\nfor the record: i did git rebase --soft  on the commit id before my first commit, then git reset HEAD and git checkout on all the files not related to my changes, then commit again with the consolidated message, then git push --force origin fix-routing-exception-doc",
            "merged branch canni/enable_validation_groups_callback (PR #2498)\n\nCommits\n-------\n\nd08ec5e Add DelegatingValidator tests\ne1822e7 Enable dynamic set of validation groups by a callback or Closure\n\nDiscussion\n----------\n\n[Form][Validator] Enable dynamic set of validation groups based on callback\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nSymfony2 tests written for new feature: yes\ncloses tickets: #2498 #1151\n\nThis will allow developer to pass a Closure or a callback array as a Validation groups option of a form. Eg:\n\n```\nclass ClientType extends AbstarctType\n{\n// ...\n    public function getDefaultOptions(array $options)\n    {\n        return array(\n            'validation_groups' => function(FormInterface $form){\n                // return array of validation groups based on submitted user data (data is after transform)\n                $data = $form->getData();\n                if($data->getType() == Entity\\Client::TYPE_PERSON)\n                    return array('Default', 'person');\n                else\n                    return array('Default', 'company');\n            },\n        );\n    }\n// ...\n}\n```\n\n```\nclass ClientType extends AbstarctType\n{\n// ...\n    public function getDefaultOptions(array $options)\n    {\n        return array(\n            'validation_groups' => array(\n                'Acme\\\\AcmeBundle\\\\Entity\\\\Client',\n                'determineValidationGroups'\n            ),\n        );\n    }\n// ...\n}\n```\n\nThis will make developers life easier !\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/10/27 06:39:56 -0700\n\nDoes that work if your ClientType were added to another form type?\n\ne.g.\n\n```php\n<?php\n\nclass MyComplexType extends AbstractType\n{\n    public function buildForm(FormBuilder $builder, array $options)\n    {\n        $builder->add('client', new ClientType());\n    }\n\n    // ...\n}\n```\n\n---------------------------------------------------------------------------\n\nby canni at 2011/10/27 06:44:33 -0700\n\nThis is doing nothing more than injecting array of validation groups, should work, but I have not tested this use case.\n\n---------------------------------------------------------------------------\n\nby canni at 2011/10/28 01:58:26 -0700\n\nPHPUnit output\n\n```\nOK, but incomplete or skipped tests!\nTests: 5011, Assertions: 12356, Incomplete: 36, Skipped: 32.\n```\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/02 11:37:47 -0700\n\nNow functionality is complete, test are written, and implementation is clean. :)\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/11/02 11:50:44 -0700\n\nCan tou `squash` your commits ? Thanks.\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/02 11:58:41 -0700\n\nDone\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/07 07:51:18 -0800\n\nCan you add some tests for the `DelegatingValidator` class, which is where we can ensure that the new feature actually works as expected?\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/07 13:53:16 -0800\n\nOK, I've written proof-of-concept tests, also I've squashed few commits to make things clear.\nPersonally I think this should go straight into 2.0 series, as it do not beak BC, and a feature is really nice to use.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/07 14:17:15 -0800\n\n@canni the 2.0 branch is for bug fixes, not for new features. This is the difference between maintenance releases and minor releases.",
            "updated CHANGELOG for 2.1",
            "merged branch mrtorrent/patch-1 (PR #2582)\n\nCommits\n-------\n\n0e7540b Fix typo in changelog\n\nDiscussion\n----------\n\nFix typo in changelog\n\nMinor typo fix",
            "merged branch stealth35/patch-14 (PR #2581)\n\nCommits\n-------\n\n796c6b2 [Locale] add getIcuVersion and getIcuDataVersion to Locale\n\nDiscussion\n----------\n\n[Locale] add getIcuVersion and getIcuDataVersion to Locale\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/11/09 00:51:30 -0800\n\n@stof thank for your review",
            "updated CHANGELOG for 2.1",
            "merged branch stof/gettext_loader (PR #2412)\n\nCommits\n-------\n\nd974a4a Merge pull request #4 from stealth35/test_mo_loader\ncf05646 delete useless tests\n19f9de9 [Translation] fix gettext tests\n965f2bf Merge pull request #3 from stealth35/test_mo_loader\n9c2a26d [Translation] add Mo loader tests\n9af2342 [Translation] Added the gettext loaders\n\nDiscussion\n----------\n\n[Translation] Added the gettext loaders\n\nThis is the squashed version of the work done by @xaav in #634.\n\n@stealth35 you said you will work on the dumpers. do you have some stuff on it ?\n\n---------------------------------------------------------------------------\n\nby drak at 2011/10/24 19:28:43 -0700\n\nIs there any more progress with this?\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/10/25 00:57:19 -0700\n\nI work on the dumpers, but the Po loader is wrong, caus' the Po ressource can be multiline,\n\n     msgid   \n      Here is an example of how one might continue a very long string\\n \n      for the common case the string represents multi-line output.\\n \n\nhttp://www.gnu.org/software/gettext/manual/gettext.html#PO-Files\n\nAnyway the Po format is an intermediate format to Mo file, (like .txt to .res file for ICU), IMO we can just support the real gettext format : Mo\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/11/03 02:00:24 -0700\n\n@stof The MO Dumper is ready (stealth35/symfony@f2d1d5b4de17a125550945777c7d21dcb75ad7e6), should we keep the PO format ?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/07 08:50:59 -0800\n\n@stealth35: The PO is what people will use for their translations. They will then dump it to MO. So, we need both PO and MO loaders and dumpers.\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/11/08 01:25:39 -0800\n\n@fabpot, I'm ready for both dumpers, you can merge this, and I'll open a PR for the dumpers\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/08 22:37:47 -0800\n\nI've just had a look at this PR code again and I see that the unit tests are pretty slim. Is it possible to add some tests for the mo loader?\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/11/09 01:15:25 -0800\n\n@fabpot test send to @stof :v:\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/09 02:22:55 -0800\n\nand merged in this branch\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/09 02:39:09 -0800\n\nThe tests do not pass for me:\n\n    There was 1 error:\n\n    1) Symfony\\Tests\\Component\\Translation\\Loader\\MoFileLoaderTest::testLoadDoesNothingIfEmpty\n    InvalidArgumentException: MO stream content has an invalid format.\n\n    /Users/fabien/work/symfony/git/symfony/src/Symfony/Component/Translation/Loader/MoFileLoader.php:79\n    /Users/fabien/work/symfony/git/symfony/src/Symfony/Component/Translation/Loader/MoFileLoader.php:46\n    /Users/fabien/work/symfony/git/symfony/tests/Symfony/Tests/Component/Translation/Loader/MoFileLoaderTest.php:34\n\n    --\n\n    There was 1 failure:\n\n    1) Symfony\\Tests\\Component\\Translation\\Loader\\PoFileLoaderTest::testLoad\n    Failed asserting that two arrays are equal.\n    --- Expected\n    +++ Actual\n    @@ @@\n     Array (\n    -    'foo' => 'bar'\n     )\n\n    /Users/fabien/work/symfony/git/symfony/tests/Symfony/Tests/Component/Translation/Loader/PoFileLoaderTest.php:25",
            "updated CHANGELOG for 2.1",
            "merged branch thomasbibb/master (PR #2559)\n\nCommits\n-------\n\n269a5e6 Added the ablity to get a requests ContentType\n\nDiscussion\n----------\n\nAdded getContentType\n\nI've added the ability for Symfony\\Component\\HttpFoundation\\Request to return the ContentType from serverBag this uses the $formats array to determine if the requested ContentType is valid.\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/11/03 20:00:51 -0700\n\nHave you considered squashing a couple of your commits?  They seem doubled up.\n\nTrivial, I know, but it will make each commit stand on its own (instead of appearing as a typo correction)\n\n---------------------------------------------------------------------------\n\nby thomasbibb at 2011/11/04 02:02:36 -0700\n\ndone.\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/11/04 07:25:20 -0700\n\nYou may need to do a `git push -f origin master`.  Check the commits tab to see the duplicate history:\n\n> https://github.com/symfony/symfony/pull/2559/commits\n\nWheeeee, rebasing is fun!\n\n---------------------------------------------------------------------------\n\nby thomasbibb at 2011/11/04 12:26:06 -0700\n\nThere we got thats better :)\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/11/04 12:55:07 -0700\n\n:thumbsup:  Now let's see if it gets approved by @fabpot :)\n\n---------------------------------------------------------------------------\n\nby thomasbibb at 2011/11/06 03:39:12 -0800\n\nI've removed the space between the method name and the parenthesis.\n\n---------------------------------------------------------------------------\n\nby thomasbibb at 2011/11/06 04:05:15 -0800\n\ndone.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/06 23:44:22 -0800\n\nCan you added some unit tests?",
            "merged branch stealth35/gettext_dumper (PR #2590)\n\nCommits\n-------\n\n56cb7a5 [Translation] add gettext PO and MO Dumper\n\nDiscussion\n----------\n\n[Translation] add gettext PO and MO Dumper\n\nSee #2412\n\n    Bug fix: no\n    Feature addition: yes\n    Backwards compatibility break: no\n    Symfony2 tests pass: yes\n    Fixes the following tickets: -",
            "Merge branch '2.0'\n\n* 2.0:\n  Added a class to the logs ol element to prevent hiding it when toggling an exception (fixes #2589).\n  Remove only the security token instead of the session cookie.\n  Clear session cookie if user was deleted, is disabled or locked to prevent infinite redirect loops to the login path (fixes #1798).",
            "merged branch snc/issue-1798-sf21 (PR #2598)\n\nCommits\n-------\n\n4d80ebd Remove security token if user was deleted, is disabled or locked to prevent infinite redirect loops to the login path (fixes #1798).\n\nDiscussion\n----------\n\n[2.1] Fix for issue 1798\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1798\n\nThis is a simplified PR of #2528 for the master branch.",
            "merged branch drak/eventdispatcher_opimization (PR #2597)\n\nCommits\n-------\n\n0fe8ac6 [EventDispatcher] Removed unused argument.\n\nDiscussion\n----------\n\n[EventDispatcher] Removed unused parameter in doDispatch().\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nRemoved unused parameter.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/11/10 02:30:01 -0800\n\nA simple $foo($arg) is faster than call_user_func, fine, but with all the if/else logic here are you sure it is still faster?\n\n---------------------------------------------------------------------------\n\nby drak at 2011/11/10 06:44:41 -0800\n\ncall_user_func is inordinately slow, I'll make some benchmarks. The if logic here is pretty, two conditionals for array callables or one conditional for closures/functions.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/11/10 12:45:27 -0800\n\nAfter doing some benchmarks, there are savings to be made in all cases except when the listener is an instantiated object when it's marginally slower, so I've reverted these changes and made this PR just to remove the unused argument in `doDispatch()`. You can see the benchmark code here: https://gist.github.com/1356129.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/11/10 12:46:55 -0800\n\nThis PR is ready for consideration.",
            "Revert  merged branch drak/eventdispatcher_opimization (PR #2597) \n\nThis reverts commit db6fea9fd014b9272627ee8c715368b7a1918741, reversing\nchanges made to 47b09f791b832761621348d6a526a303a5428522.",
            "merged branch rouffj/cs (PR #2624)\n\nCommits\n-------\n\nfb0379d Fix some CheckStyle violations on Components.\n\nDiscussion\n----------\n\nFix some CheckStyle violations on Components.\n\nOn casts, Control signature etc.\n\nThis Pull request follow the #2618 (https://github.com/symfony/symfony/pull/2618) where @stof had some trouble to merge it.",
            "Merge branch '2.0'\n\n* 2.0:\n  [Form] fixed previous merge\n  [Form] simplified previous merge\n  Also identify FirePHP by the X-FirePHP-Version header\n  [TwigBundle] Extract output buffer cleaning to method\n  [TwigBundle] Do not clean output buffering below initial level\n  Fixed rendering of FileType (value is not a valid attribute for input[type=file])\n  Added tests for string fix in DateTimeToArrayTransformer (8351a112861cd1cc71fbe35d69455c504d2f6acf).\n  Added check for array fields to be integers in reverseTransform method. This prevents checkdate from getting strings as arguments and throwing incorrect ErrorException when submitting form with malformed (string) data in, for example, Date field. #2609\n  [Translation] removed unneeded methods\n  [Translation] added detection for circular references when adding a fallback catalogue\n  [DomCrawler] trim URI in getURI\n  [Yaml][Tests] Fixed missing locale string for Windows platforms which caused test to fail",
            "merged 2.0",
            "Merge branch '2.0'\n\n* 2.0:\n  changed the way we store the current ob level (refs #2617)",
            "Merge branch '2.0'\n\n* 2.0:\n  [FrameworkBundle] fixed a unit test\n  [Form] Check for normal integers. refs 0427b126c15a0a27cd7033375e30371ae6a4e516\n  [Form] Replace `an` with `is`",
            "Merge branch '2.0'\n\n* 2.0:\n  [HttpKernel] fixed Content-Length header when using ESI tags (closes #2623)\n  [HttpFoundation] added an exception to MimeTypeGuesser::guess() when no guesser are available (closes #2636)\n  [Security] fixed HttpUtils::checkRequestPath() to not catch all exceptions (closes #2637)\n  [DoctrineBundle] added missing default parameters, needed to setup and use DBAL without ORM\n  [Transation] Fix grammar.\n  [TwigBundle] Fix trace to not show 'in at line' when file/line are empty.",
            "merged branch jdreesen/trans-update-3 (PR #2646)\n\nCommits\n-------\n\n5e57854 [FrameworkBundle] Updated German validator translation\n\nDiscussion\n----------\n\n[FrameworkBundle] Updated German validator translation",
            "merged 2.0",
            "fixed Swiftmailer bridge composer.json",
            "merged branch snc/login-referer (PR #2518)\n\nCommits\n-------\n\nf9a65ba Redirect to default_target_path if use_referer is true and the referer is the login_path.\n\nDiscussion\n----------\n\nLogin redirect\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\n\nRedirect to default_target_path if use_referer is true and the referer is the login_path.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/10/30 10:52:38 -0700\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/10/30 11:04:16 -0700\n\n@snc BC break ?\n\n---------------------------------------------------------------------------\n\nby snc at 2011/10/30 12:11:39 -0700\n\nWell I'm sure it is never intended by a developer to be redirected to the login page after logging in but it could be possible that the controller which displays the login form handles this case, so my change would break it.",
            "updated CHANGELOG for 2.1",
            "added event priorities in the profiler",
            "[FrameworkBundle] changed the session listeners to be subscribers",
            "[SecurityBundle] fixed typos in functional tests",
            "merged branch canni/fix_closure_declaration (PR #2662)\n\nCommits\n-------\n\n264a033 Fixed uncompatible closure declaraction in FileldTypeValidatorExtensionTest\n\nDiscussion\n----------\n\n[tests]Fix closure declaration in validation groups tests\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nThis is just small fix for `Closure` declaration in `FieldTypeValidatorExtensionTest`, this is not bug, but if someone will look at this declaration in test, it may lead to misunderstanding.",
            "fixed previous merges partially, there still seems to be a problem with the test client",
            "changed priorities for kernel.request listeners\n\nThe Firewall is now executed after the Router. This was needed to have access\nto the locale and other request attributes that are set by the Router. This\nchange implies that all Firewall specific URLs have proper (empty) routes like\n`/login_check` and `/logout`.",
            "merged the two Router listener hooks (this hack was needed when the Firewall was registered between those two hooks; this is not needed anymore)",
            "merged the two Locale listener hooks (this hack was needed when the Firewall was registered before the Routing; this is not needed anymore)",
            "merged branch stof/security_providers (PR #2454)\n\nCommits\n-------\n\nd2195cc Fixed phpdoc and updated the changelog\n9e41ff4 [SecurityBundle] Added a validation rule\nb107a3f [SecurityBundle] Refactored the configuration\n633f0e9 [DoctrineBundle] Moved the entity provider service to DoctrineBundle\n74732dc [SecurityBundle] Added a way to extend the providers section of the config\n\nDiscussion\n----------\n\n[WIP][SecurityBundle] Added a way to extend the providers section of the config\n\nBug fix: no\nFeature addition: yes\nBC break: <del>no (for now)</del> yes\nTests pass: yes\n\nThis adds a way to extend the ``providers`` section of the security config so that other bundles can hook their stuff into it. An example is available in DoctrineBundle which is now responsible to handle the entity provider (<del>needs some cleanup as the service definition is still in SecurityBundle currently</del>). This will allow PropelBundle to provide a ``propel:`` provider for instance.\n\nIn order to keep BC with the existing configuration for the in-memory and the chain providers, I had to allow using a prototyped node instead of forcing using an array node with childrens. This introduces some issues:\n\n- impossible to validate easily that a provider uses only one setup as prototyped node always have a default value (the empty array)\n- the ``getFixableKey`` method is needed in the interface to support the XML format by pluralizing the name.\n\nHere is my non-BC proposal for the configuration to clean this:\n\n```yaml\nsecurity:\n    providers:\n        first:\n            memory: # BC break here by adding a level before the users\n                users:\n                     joe: { password: foobar, roles: ROLE_USER }\n                     john: { password: foobarbaz, roles: ROLE_USER }\n        second:\n            entity: # this one is BC\n                class: Acme\\DemoBundle\\Entity\\User\n        third:\n            id: my_custom_provider # also BC\n        fourth:\n            chain: # BC break by adding a level before the providers\n                 providers: [first, second, third]\n```\n\nWhat do you think about it ? Do we need to keep the BC in the config of the bundle or no ?\n\nBtw note that the way to register the factories used by the firewall section should be refactored using the new way to provide extension points in the extensions (as done here) instead of relying on the end user to register factories, which would probably mean a BC break anyway.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/10/23 09:19:23 -0700\n\ni don't think we should keep BC. the security config is complex as is .. having BC stuff in there will just make it even harder and confusing.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/10/23 09:41:25 -0700\n\nIs the security component tagged with `@api` ?\n\nSo basically, we just have to create a factory (`ModelFactory` for instance) and to register it in the `security` extension, right ? Seems quite simple to extend and much better than the hardcoded version\u2026\n\nWhy did you call the method to pluralize a key `getFixableKey` ?\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/10/23 14:48:26 -0700\n\nChanging security config will introduce risk for users. We should avoid that\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/23 15:34:47 -0700\n\n@beberlei as the config is validated, it will simply give them an exception during the loading of the config if they don't update their config.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/24 01:01:42 -0700\n\n@schmittjoh @fabpot Could you give your mind about it ?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/31 17:08:12 -0700\n\n@fabpot @schmittjoh ping\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/11 14:08:18 -0800\n\nI updated the PR by implementing my proposal as the latest IRC meeting agreed that we don't need to keep the BC for this change. This allows to add the validation rule now.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/16 11:16:06 -0800\n\n@fabpot ping\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/16 22:29:05 -0800\n\n@stof: Before merging, you must also add information about how to upgrade in the CHANGELOG-2.1.md file.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/17 00:01:23 -0800\n\n@fabpot done",
            "fixed some tests broken by previous merge",
            "merged branch beberlei/DoctrineInfoMappingException (PR #2656)\n\nCommits\n-------\n\n6d7e6a8 [DoctrineBundle] Enhance error reporting during mapping validation when nested exceptions occur.\n\nDiscussion\n----------\n\nDoctrine info mapping exception\n\nBetter error handling when nested exceptions occur (which is commonly possible with reflection errors).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/16 02:10:13 -0800\n\nIt should probably be done on the 2.0 branch, no?\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/11/18 02:11:06 -0800\n\nIts not necessarily a bugfix but an enhancement.",
            "merged branch rouffj/cs (PR #2671)\n\nCommits\n-------\n\nc89d45b Fix cs\n\nDiscussion\n----------\n\nFix cs\n\n---------------------------------------------------------------------------\n\nby rouffj at 2011/11/17 23:30:29 -0800\n\nlsmith77: ok, so i revert my change only on RequestMatcher file ?",
            "[Swiftmailer] fixed composer.json",
            "merged branch willdurand/propel-bridge (PR #2191)\n\nCommits\n-------\n\n5e4b7cb Renamed Propel Bridge: Propel => Propel1\ncdad7ab Introducing the Propel Bridge\n\nDiscussion\n----------\n\nIntroducing the Propel Bridge\n\nBasic bridge with stable components for Propel.\n\nThis should not affect anything except the need to maintain this code (even if the most part is safe thanks to `@api` tag). As Propel future is linked to Symfony2, to maintain this bridge should not be a problem.\nDon't flame me for this proposal, I do that  knowingly .\n\nRegards,\nWilliam.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/15 12:22:12 -0700\n\nIMO, it would be better to put this code in a repo owned by the Propel organization than in the core.\n\n---------------------------------------------------------------------------\n\nby Richtermeister at 2011/09/15 15:33:02 -0700\n\nYay, great to see this, very much looking forward to using Propel again.\n\n---------------------------------------------------------------------------\n\nby GromNaN at 2011/09/16 01:37:53 -0700\n\n+1 for @stof proposition.The Silex Core should stay lightweight.\n\nSilex definitely need a site or at least a page in the doc to list all the community extensions.\n\n---------------------------------------------------------------------------\n\nby odino at 2011/09/16 01:39:40 -0700\n\nSilex? :)\n\n---------------------------------------------------------------------------\n\nby GromNaN at 2011/09/16 01:43:20 -0700\n\nOups, I was looking at Silex PR and got this PR.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/10/08 01:01:56 -0700\n\n@willdurand we should maybe make this a topic for the next IRC meeting.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/10/09 10:26:22 -0700\n\nAgreed :)\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/03 14:18:02 -0700\n\nGood to go ?\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/04 03:34:37 -0700\n\nJust removed the `Query` class. /cc @Stof\n\nAnything else?\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/05 08:45:34 -0700\n\n@fabpot : good to merge ?\n\nThe PropelBundle has a `bridge` branch. I'm ready, I'm just waiting you merge this PR to tag the PropelBundle for Symfony 2.0, and after that I'll merge the `bridge` branch into the `master`.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/16 22:32:42 -0800\n\nWhat about renaming the directory from `Propel` to `Propel1`? That way, we will be able to have a `Propel` bridge for Propel 2.0.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/16 23:18:56 -0800\n\nIt won't be consistent with the PropelBundle but I guess we don't have any other choice.. So I'm +1 for that.\n\nIf it's ok, I'll update this PR, just tell me.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/17 07:09:58 -0800\n\nyes, +1 for renaming\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/17 07:11:45 -0800\n\nWhy rename it to ``Propel1``? I think its enough to eventually add a ``Propel2``.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/17 07:14:05 -0800\n\n`Propel1` is for BC.\n`Propel` will be the Propel's future :)\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/17 07:17:02 -0800\n\nsounds like a bad idea .. and what happens when you come out with ``Propel3`` ?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/17 07:17:31 -0800\n\n@willdurand Maybe the bundle should renamed the same way, for consistency and to let ``PropelBundle`` for the Propel 2 one ? (but this should probably be discussed in another issue tracker)\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/17 07:30:21 -0800\n\nThat way we'll be able to handle both Propel 1 & 2 without BC break. You may want to upgrade Symfony2 but not Propel nor PropelBundle. Propel1 bridge has a limited lifetime.\n\n@stof : the PropelBundle will be tagged and a branch will probably appear for Propel1 compatibility.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/17 07:34:10 -0800\n\n@willdurand if Symfony provides a Propel bridge using the same namespace for Propel2 and then Propel3, this means that the Sf2 update changing the bridge to use the Propel3 code will make Sf2 incompatible with Propel2 even if you have a tag for Propel2 in the PropelBundle (as you will need to downgrade Symfony to the older tag too). As long as bridges are in the main Symfony repo, they are upgraded the same time Symfony is upgraded and they can bump the requirements.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/17 07:37:13 -0800\n\nYes but Propel 1 is frozen, almost dead as we won't add any new features.\nPropel2 is the future and there is no plan for a Propel3 which will break BC.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/17 07:57:05 -0800\n\nUpdated!",
            "merged branch xkobal/patch-1 (PR #2683)\n\nCommits\n-------\n\n4d1e352 To avoid having 2 different default values for env.\n\nDiscussion\n----------\n\nTo avoid having 2 different default values for env.\n\n- 1 come from app/console\n- application default env value ignore kernel env.",
            "merged branch flevour/add-security-auth-manager-parameter (PR #2658)\n\nCommits\n-------\n\n2adc36c [Security] renamed security option to erase_credentials\n104b697 [Security] added configurable option security.erase_credentials_from_token\nede55d2 [Security] added configuration parameter for AuthorizationManagerProvider\n\nDiscussion\n----------\n\n[Security] added configuration parameter to AuthorizationManagerProvider\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: 2657\nTodo: -\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/16 10:30:34 -0800\n\nYou should also add a configurable option under the `security` entry to ease the configurability.",
            "updated CHANGELOG for 2.1",
            "merged branch stof/security_factories (PR #2668)\n\nCommits\n-------\n\n413756c [BC break][SecurityBundle] Changed the way to register factories\n\nDiscussion\n----------\n\n[BC break][SecurityBundle] Changed the way to register factories\n\nAs discussed in #2454, this changes the way to register the factories to let each bundles register the factories it provides.",
            "updated CHANGELOG for 2.1",
            "merged branch pborreli/travis (PR #2664)\n\nCommits\n-------\n\ncfc7be2 [CI] travis-ci.org integration\n\nDiscussion\n----------\n\ntravis-ci.org integration\n\nTravis CI is an open, distributed build system for the open source community.\n\nHere the blog post for the PHP support announcement : http://about.travis-ci.org/blog/first_class_php_support_on_travis_ci/\n\nEach commit in the repo will trigger travis-ci.org hook and will launch phpunit against multiple version of PHP (5.3.8, 5.4.0RC1 and soon 5.3.2, 5.3-snapshot and 5.4-snapshot)\n\nFor now we noticed almost no false-positive or downtime.\n\nAn icon to show the status of the repo (or a specific build) is included in my PR (change pborreli by symfony).\n\nhttp://about.travis-ci.org/docs/user/languages/php/\n\nThis doesn't replace our jenkins platform in any case. it's another way to bulletproof our code and a great way for a contributor to check his Symfony fork before to submit any PR, like that :\n\n[![Build Status](https://secure.travis-ci.org/pborreli/symfony.png?branch=travis)](http://travis-ci.org/pborreli/symfony)\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/17 07:55:57 -0800\n\neventually they will also add support to automatically run tests for PR's\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/17 08:02:29 -0800\n\nI don't want to support more than one CI. Let's concentrate on Jenkins.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/17 08:04:10 -0800\n\ni am sorry .. but this is a bad decision ... mostly because you don't know what travis CI can do compared to our own jenkins. this needs to be discussed.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/17 08:04:59 -0800\n\nyeah, travis-ci is really really fine to execute tests with different PHP versions, etc without any effort!\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/17 08:06:59 -0800\n\nalso our own Jenkins seems not to work. I cannot even access it on http://ci.symfony.com\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/17 08:10:36 -0800\n\njenkins atm is still necessary to tests on other OS and add artifacts like code sniffer etc.\nhowever travis enables users to easily CI their feature branches, but to make this easy we have to provide the setup of the main repo. its simple and it also doesn't hurt to have another setup in case our setup is broken (like is atm) and it doesn't cost us anything.\n\n---------------------------------------------------------------------------\n\nby pborreli at 2011/11/17 08:10:59 -0800\n\nour jenkins platform already execute tests with multiple version de PHP and OS (Windows, Linux)\n\nAdding .travis.yml file to the official repo will not remove our work in Jenkins platform, but it does add a very good (and free) way for contributors to bulletproof their code before submit a PR.\n\nI don't want to compare travis-ci and Jenkins, this is not the same architecture, Jenkins is configurable, Travis is distributed you don't have to install it you register, click and it's done.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/17 08:53:31 -0800\n\n@pborreli does the Jenkins CI works currently ? And if yes, did the url change ?\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/11/17 09:00:26 -0800\n\n:+1: for Travis CI\n\n---------------------------------------------------------------------------\n\nby jmikola at 2011/11/17 09:59:28 -0800\n\nI would urge a reconsideration here as well. If not now, then perhaps in the near future when Travis CI's anticipated features come to fruition. The dot-file addition seems even less invasive than adding `composer.json` files to our various components, and both are strong gestures of support for these community initiatives.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/11/20 23:56:28 -0800\n\nTravis CI only runs the tests suite if I'm not mistaking so it's a big -1 for me against Jenkins.\n\nWith Jenkins we can other analysis tools like PMD, PDepend, Docblox, PHPLOC, PHPCPD...\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/21 00:03:17 -0800\n\nThis is not the same usage sir!\nWithout any effort you'll be able to test all branches on different PHP version, and to provide a visual feedback.\nThere is nothing to do... I don't know why you're against.\n\nLe 21 nov. 2011 \u00e0 08:56, Hugo Hamon<reply@reply.github.com> a \u00e9crit :\n\n> Travis CI only runs the tests suite if I'm not mistaking so it's a big -1 for me against Jenkins.\n>\n> With Jenkins we can other analysis tools like PMD, PDepend, Docblox, PHPLOC, PHPCPD...\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2664#issuecomment-2812352\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/21 00:08:01 -0800\n\ndid you read up on what travis actually offers? did you read my RFC on the mailinglist?\n\nif did you would realize that your answer misses the point entirely.\n\nit would be like me saying big -1 for jenkins since we do not test feature branches and PRs.\n\nagain the topic isnt if travis replaces jenkins, the two are simply complementary services and travis requires the addition of a single file in order to do its magic. thats it.\n\nOn 21.11.2011, at 08:56, Hugo Hamon <reply@reply.github.com> wrote:\n\n> Travis CI only runs the tests suite if I'm not mistaking so it's a big -1 for me against Jenkins.\n>\n> With Jenkins we can other analysis tools like PMD, PDepend, Docblox, PHPLOC, PHPCPD...\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2664#issuecomment-2812352\n\n---------------------------------------------------------------------------\n\nby pborreli at 2011/11/21 00:08:06 -0800\n\n@hhamon test execution and code analysis are two different parts of continuous integration, travis-ci only focuses (for now) on test execution and does it nicely, and this is what you are looking for as contributor when you want to work in Symfony code to provide a bug fix.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/11/21 00:33:22 -0800\n\nFor me Travis-CI is just a new fashion and fancy tool. I agree with you it's nice because you can have CI with minimum effort but this tool also has drawbacks:\n\n  * Limited features\n  * This is an hosted platform so if Travis is down, we won't have CI\n\nJenkins is made for that and it's a proven solution. Why would you like to add or change to a distributed fancy tool instead of using a standard and proven tool.\n\nJenkins does the job well, I'm for having only one CI tool that does not rely on an external service.\n\nMy 2 cents.\n\n---------------------------------------------------------------------------\n\nby pborreli at 2011/11/21 00:38:07 -0800\n\nThis is not about Symfony having a CI or not, this is about contributors able to test their commits against multiple version of PHP before making a PR.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/11/21 00:42:08 -0800\n\nSo you mean the CI of the main repository of symfony will remain in Jenkins but you want the contributors to integrate their branches in Travis before asking for a pull request in symfony/symfony?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/21 00:46:40 -0800\n\n@hhamon come on .. please read before posting.\n\nhere is my related RFC http://groups.google.com/group/symfony-devs/browse_frm/thread/723964b675c698dd\n\n---------------------------------------------------------------------------\n\nby pborreli at 2011/11/21 00:53:10 -0800\n\nSymfony is already under Jenkins, this will not change. (server will be back public this week)\n\nAdding .travis.yml to the main repo will provide :\n- ability for any contributor to monitor any branch before PR (they can't add it without exclude it from PR) easily with travis-ci.org\n- an aditional tool to monitor test execution of the main repository.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/11/21 01:04:13 -0800\n\nI'm semi convinced by testing PRs. At first it looks an interesting idea in the fact that we could check the PR before integration. But, anyway, when a PR is integrated by Fabien, the tests suite is run one more time and the code pushed to the master is rechecked just after with our Jenkins.\n\nDouble check looks interesting but do we really need it? I'm not convinced, especially if we have a well configured custom CI server based on Jenkins.\n\n---------------------------------------------------------------------------\n\nby pborreli at 2011/11/21 01:10:52 -0800\n\ni said **before** PR, means you can play, fix, test your commit on your own fork easily.\n\n---------------------------------------------------------------------------\n\nby willdurand at 2011/11/21 01:14:06 -0800\n\n@hhamon that way you'll be able to configure your fork and test your branches before to PR them...\nIt's really useful.\n\nLe 21 nov. 2011 \u00e0 10:10, Pascal Borreli<reply@reply.github.com> a \u00e9crit :\n\n> i said **before** PR, means you can play, fix, test your commit on your own fork easily.\n>\n> ---\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2664#issuecomment-2812921\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/11/21 01:16:19 -0800\n\nOk so I'm still unconvinced.\n\n  * How many contributors do really write unit tests when they submit a patch?\n  * How many of them do really launch the tests suite before committing?\n  * How many contributors do really know what unit tests are and what CI is?\n\nI'm sure they are just a few...\n\nSo, asking them to CI and monitor their code before sending a PR is not so simple.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/11/21 01:18:22 -0800\n\n:+1: this is only viable if Travis CI automatically does that on PRs and posts the result as comment.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/21 01:25:31 -0800\n\nMost contributors do know about unit tests and CI, since most PR's are send by a small group of people. Those that do not yet know about unit tests and CI should learn about that. Furthermore the point is that thx to travis setting up automated testing of all branches in your symfony fork requires going to a page and clicking on one button.\n\nAnd yes fairly soon travis will automatically monitor and test PR's even if the person who send the PR has no clue what travis, unit tests or CI servers are.\n\nBut for me as a contributor its a huge advantage already in its current form. This opposition is extremely frustrating because you are complaining about what amounts to a freaking single file called  .travis.yml  that provides real value to several frequent contributors. I am sorry but there is nothing to discuss here but to simply merge.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/11/21 01:28:24 -0800\n\n@hhamon All your question is answered [here](http://symfony.com/contributors), check commits from top 20-30 contributors. Check how many commit were done by this amount of contributors. Most of them test PR before commiting or even better they add/fix existing tests.\n\nIf I can test my code automaticlly and I don't need to run my own CI or _whatever_ (yes, I'm lazy, as most of us, programmers, thats why we develop automatic jobs and other cool stuff), I will love it, I will use it, I will propagate it to others.\n\nSo I'm totally :+1:.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/11/21 01:34:54 -0800\n\nI totally agree on the fact that all contributors should be aware / learn what unit tests are and what CI is. I also agree on the fact that most important symfony contributors are quite few people that know these subjects. But as a contributor, I don't care about monitoring my own commit as my fork only contains my current commits before submitting a patch I just want to make sure the tests suite passes on my computer.\n\nThe core team will then integrate my code, relaunch the tests suite, push to the master that is continuously integrated by Jenkins. I think they are enough security checks on the code base with our current workflow.\n\nAnyway, I'm not against Travis or any other CI tool. I just find the proposed CI process overweight.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/21 01:37:30 -0800\n\n overweight  there is no weight at all .. there is nothing of any significants to do .. the proposed solution is  weightless  but provides real world benefits. not sure why you are not getting that.\n\n---------------------------------------------------------------------------\n\nby pierrejoye at 2011/11/21 01:37:34 -0800\n\n@fabpot\n\nBonjour :)\n\nI'd to suggest to reconsider this proposal.\n\nCI is not the business of a single (and limited) tool like Jenkins. What jenkins provides is a small part of what a project need. Travis provides other features and possibilities for the non  core  developers or for forks, read: Get contributors test their stuff in a very easy and efficient way, without having to worry about CI or having much clue about it. Only a matter of adding a note to your  how to contribute  howto.\n\nI'm also sure other tools may make their way to the PHP world in a near future. Focuson on Jenkins only only because it has a hype is a mistake imo. Just like what some do in php.net, it only does 10% of what we actually need there, for example.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/11/21 01:42:18 -0800\n\nAnyway, I'm certainly wrong and it's just my point of view at the moment. I first need to experiment the whole worklow to be convinced and give a +1.\n\n---------------------------------------------------------------------------\n\nby pierrejoye at 2011/11/21 01:46:15 -0800\n\n@hhamon also it is one single file (or so), don't see how it can hurt or bloat sf2 repo :)\n\n---------------------------------------------------------------------------\n\nby videlalvaro at 2011/11/21 01:46:27 -0800\n\nI don't understand what's the opposition against travis-ci.\n\na) The discussion is not about Jenkins vs. Travis as some guys seem to put it. No one is talking of replacing Jenkins.\n\nb) For me using travis is about transparency. It's about letting the community, both contributors and users, see what's going on with the new additions to the framework, both in master branch and in PRs. Yes you can do that if the Symfony CI, but that means we need to know the CI URL of every OS project we use. With travis you get all that in a central place. Before cloning a repo on github I can already see their build status and decide on based on it's build status.\n\nAlso as @jmikola said\u2026 this is as intrusive as adding the `composer.json` to our packages. Is just **one** invisible file in the repo source tree.\n\nMy 2.-\n\n---------------------------------------------------------------------------\n\nby Palleas at 2011/11/21 01:47:05 -0800\n\nA discussion about adding or not a single (!) yml file to the main symfony repo and integrating a tool that would provide nothing but awesomeness to this community. Interesting.\n\nBig :+1: on this.\n\n---------------------------------------------------------------------------\n\nby bergie at 2011/11/21 01:50:54 -0800\n\n+1 from me for Travis CI integration. While it is great that Symfony2 has its own dedicated CI environment, having Travis _in addition to that_ only brings benefits:\n\n* Easy for contributors to test their own stuff before sending pull requests\n* More visibility to the fact that Symfony2 is a high-quality, tested PHP framework, especially outside traditional PHP circles\n* Handy fallback for when the official CI environment is down\n\nI wrote some notes on how Travis is already helping us in Midgard development: http://lists.midgard-project.org/pipermail/dev/2011-November/003111.html\n\n---------------------------------------------------------------------------\n\nby naholyr at 2011/11/21 04:47:46 -0800\n\nHow can one be against adding a 5-lines dot-file in a project and let it work alone forever, without configuring anything or even consuming any resource of yours ?\nCan anyone provide an easier way for contributors to test their changes ? The  forker  just has to log in travis-ci.org and click  on , and his changes are tested, no need to install anything.\nIf that still matters, I highly :+1: Travis integration for all those reasons.\n\n---------------------------------------------------------------------------\n\nby digitalkaoz at 2011/11/21 06:31:35 -0800\n\nsimply +1 for integrating travis...\n\nbut for every component, there will be more than just one `.travis.yml` ;)\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/11/21 06:36:05 -0800\n\n@digitalkaoz Travis should be added only to main folder, just like in this PR, nowhere else. Components are __not__ disbrubuted with tests, so there is no need for adding there `.travis.yml`.\n\n---------------------------------------------------------------------------\n\nby kertz at 2011/11/21 06:46:45 -0800\n\n:+1: for Travis\n\n---------------------------------------------------------------------------\n\nby cordoval at 2011/11/21 07:14:02 -0800\n\n:+1: for travis\n\n---------------------------------------------------------------------------\n\nby simensen at 2011/11/21 09:13:40 -0800\n\n+1 for Travis.\n\nAs far as I can tell, it is virtually zero work to support Travis. Given that it would provide us with a way to ensure that the code being submitted at leasts passes the basic `phpunit` tests I think it is well worth the amount of work (zero) it will take to support it.\n\nIf down the line it becomes a pain (for example, maybe certain test need to be rewritten to work correctly on Travis...) we can revisit it. But for now it seems like all pros and very little cons to use Travis *in addition to* Jenkins.\n\n---------------------------------------------------------------------------\n\nby ivanrey at 2011/11/21 20:48:16 -0800\n\n+1 for travis",
            "tweaked travis configuration",
            "merged branch Seldaek/eventdisp (PR #2572)\n\nCommits\n-------\n\nfabe818 [EventDispatcher] Add reference to the EventDispatcher on the Event\n\nDiscussion\n----------\n\n[EventDispatcher] Add reference to the EventDispatcher on the Event\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nI don't like registering event listeners unless they are really used, it seems wasteful. So I tend to register listeners for the response event in other listeners, only when they will be required. @stof has [brought to my attention](https://github.com/nelmio/NelmioCorsBundle/commit/fb243ace83c55280d8a7841a0fbaf22a4e947600#commitcomment-696467) that this may cause issues in Silex or any other situation where event listeners are not lazy loaded, since it creates a circular reference in that case.\n\nWith this PR, avoiding the circular reference is possible, without bloating the response listener with unnecessary  do I need to do anything?  code.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/11/06 05:28:39 -0800\n\nDid you do any benchmarks? It's just a feeling, but registering a listener at runtime might be more expensive than just having it always executed.\n\nAlso, I find these dynamic listeners a bit of a code smell. They are not easily testable, and the control flow is harder to track. Besides, you do not take into account subrequests which might happen in between.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/11/06 09:34:27 -0800\n\nI don't see why it would be slower, if it's a commonly fired event yes you blast away the `sorted` listener cache every time you add one, but most of the time those optional listeners are for the response, which is typically not sorted yet when you add the listener, so I don't think there is any overhead.\n\nAs for the code smell, of course it's a matter of preference, but I have the opposite view on control flow, I find it weird that listeners are registered when they are not used in the end, while doing it my way I think it's more clear what happens.\n\nFor sub-requests, I'm not sure what you mean. In this instance, and in most response listeners I have seen, the sub-requests are always ignored anyway by the listener.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/11/10 06:07:45 -0800\n\nI don't see how loading up the dispatcher with a bunch of callables can be expensive - it's just loading an array basically.\n\nWouldn't it be better to have a separate `DispatcherAwareEvent extends Event`\n\n    class DispatcherAwareEvent extends Event\n    {\n        protected $dispatcher;\n\n        public function setDispatcher(EventDispatcher $dispatcher)\n        {\n            $this->dispatcher = $dispatcher;\n        }\n\n        public function getDispatcher()\n        {\n            return $this->dispatcher;\n        }\n\nThis can then be used as a base class for what you need `MyEvent extends DispatcherAwareEvent`\n\n       $event = new MyEvent($dispatcher, $foo);\n       $dispatcher->dispatch($event);\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/11/10 06:18:57 -0800\n\n@drak: Every event is part the event dispatching system and therefore should be aware of the dispatcher imo. It's not like the ContainerAwareInterface which is gluing things that do not especially have to know about the DIC together.\n\nIf we do that, then we have to start arguing every time we need the dispatcher in a given event, because the original author did not think it was necessary, and then that will only make it into the next minor version, etc. Not fun at all.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/11/10 06:36:26 -0800\n\nBy the way, the event dispatchers looks to be pretty well optimized given the fact that it only sorts listeners if they are called, and then only once.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/11/10 12:33:28 -0800\n\nIt just seems weird.  I mean, following on, why isn't the event name a compulsory parameter also? - again, you can say both ways, if you need it, make it part of your custom Event class, or since it's a required param to be able to dispatch an event in the first place, make it part of the base Event class.  All I'm saying it it seems suspicious when it could be achieved a different way.\n\nFor example, you could inject the dispatcher into the listener itself and then the event handler could access the dispatcher if it needs:\n\n    class MyListener\n    {\n        public function __construct(EventDispatcher $eventDispatcher)\n        {\n            //...\n        }\n\n        public function someListener(Event $event)\n        {\n            //...\n        }\n    }\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/10 15:20:07 -0800\n\n@drak The issue when injecting the dispatcher in the listener is described in the issue: circular dependency: you need to create the dispatcher before the listener (as it is injected in it) and when the listener is not lazy-loaded (in Silex for instance), you need to create it before the dispatcher.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/11/10 21:15:45 -0800\n\nIndeed, although it might not unreasonable to expect to create the dispatcher first...  but anyway I'm convinced!\n\nInjecting the dispatcher could lead to some __very interesting possibilities__ as standard.  While we are at it though, we should have a getter and setter for `$name` in the `Event` class and `$event->setName($eventname)` in the `dispatch()` method.  Allowing an event to know it's name is very useful.  It allows a single listener to be registered for multiple names, and even makes the event object reusable. I don't know why $name was removed, it was in the Symfony 1 dispatcher and while the new dispatcher is brilliant from an OO point of view, missing the name as standard is a big shame.\n\n+1 from me.",
            "updated CHANGELOG for 2.1",
            "merged branch tecbot/config_builder (PR #2542)\n\nCommits\n-------\n\nfc4e628 [Config] added append to the node builder\n\nDiscussion\n----------\n\n[Config] added append to the node builder\n\nBug fix: no\nFeature addition: yes\nBC break: no\ntest pass: true\n\nthe problem is that i can only append a node if i have an array node, but if the current node is the node builder i can not append a node (and i think the node builder is like a array node).\n\n---------------------------------------------------------------------------\n\nby tecbot at 2011/11/16 23:23:16 -0800\n\n@fabpot: any chance to merge this?",
            "merged branch beberlei/DoctrineValidation (PR #2535)\n\nCommits\n-------\n\n47ebf08 Fix some bugs\nfad825e Add DoctrineValidationPass to DoctrineBundle#buildContainer\na064acd Implement feature to add validations based on the Manager-Type (ORM, MongoDB, CouchDB)\n\nDiscussion\n----------\n\n[WIP] Validation on a Doctrine Manager Basis\n\nHello,\n\nwe have had problems before with validation that is  persistence  related. Unique-validators or any other validation that is based on services that depend on persistence.\n\nThe problem is two-fold:\n\n1. In annotations you cannot define validators for all persistence layers you support, because then users need them all installed.\n2. In XML/YAML the same is true, since there is only one validation.xml or validation.yml file looked for.\n\nNow one solution is to have three model classes that extend from a base class to get around this (like FOSUserBundle does) but that is cumbersome. This PR provides a new solution that is Doctrine specific (and takes the responsibility out of the Core).\n\nEach Doctrine Bundle (ORM, CouchDB, MongoDB, PHPCR) can add this compiler pass with a manager type name:\n\n    $container->addCompilerPass(new DoctrineValidationPass('orm'));\n\nThis leads to the compiler pass searching for additional validation files  Resources/config/validation.orm.yml  and  Resources/configvalidation.orm.xml .\n\nMy first idea was to put this into the Resources/config/doctrine folder as well, but then it is detected as mapping file of course.\n\nRegarding tests, this is not easily testable without a full fledged bundle setup, i tested this inside Acme Demo Bundle, however for a good unit-test we probably need a filesystem abstraction testing layer. Has anyone a good idea how to test this without having to setup another test-bundle? I can't use the one from DoctrineBundle since this code is in the Bridge.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/13 23:12:06 -0800\n\n@beberlei: Is it still WIP?\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/11/15 10:47:49 -0800\n\n@fabpot it is complete, but it has no tests, that was the WIP part. :-)\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2011/11/15 23:56:11 -0800\n\nI wanted to refactor how validation is managed today, so it could do one validation file per class, same as with Doctrine but @stof pointed me to this PR. I still find this a great idea as the validation is easier to find.\n\n```php\n        foreach ($container->getParameter('kernel.bundles') as $bundle) {\n            $reflection = new \\ReflectionClass($bundle);\n            $bundleDir = dirname($reflection->getFilename());\n\n            //check for per class validation files\n            if (is_dir($dir = $bundleDir . '/Resources/config/validation')) {\n                $finder = new Finder();\n                $finder\n                    ->name('*'.$extension)\n                    ->in($dir);\n\n                foreach ($finder as $file) {\n                    $files[] = realpath($file);\n                    $container->addResource(new FileResource($file));\n                }\n            }\n\n            //global validation file?\n            if (is_file($file = $bundleDir . '/Resources/config/validation'.$extension)) {\n                $files[] = realpath($file);\n                $container->addResource(new FileResource($file));\n            }\n        }\n```",
            "[EventDispatcher] Add name property to Events refs #2572\n\nShould be merged/cherry-picked after #2572 closes.",
            "fixed a unit test broken by previous merge",
            "updated CHANGELOG for 2.1",
            "merged branch greg0ire/patch-1 (PR #2604)\n\nCommits\n-------\n\n5b30812 See this issue : https://github.com/symfony/symfony/issues/2433\n\nDiscussion\n----------\n\nSee this issue : https://github.com/symfony/symfony/issues/2433\n\nI changed the access speficiers to `protected`, which makes easier to extend this class if one needs to like I did.\n\n---------------------------------------------------------------------------\n\nby greg0ire at 2011/11/10 06:55:12 -0800\n\nPrecision on the problem I had : I wanted to use a `CollectionType` and display a collection element attribute as the label for this element. I had no choice but to extend `ResizeFormListener` and `CollectionType`.",
            "merged 2.0",
            "fixed a merge problem",
            "merged 2.0",
            "fixed bad merge",
            "merged branch lsmith77/travis-ci-master (PR #2699)\n\nCommits\n-------\n\n3f9a0bf set travis-ci icon to master\n\nDiscussion\n----------\n\nset travis-ci icon to master",
            "merged branch Seldaek/composerfix2 (PR #2701)\n\nCommits\n-------\n\ne7215ae Fix composer.json\n\nDiscussion\n----------\n\nFix composer.json files\n\n>=2.1 does not include the 2.1.0-dev versions, since those are lesser than 2.1.0 stable, so nothing is really working right now.",
            "merged 2.0",
            "merged 2.0",
            "merged 2.0",
            "removed unused use statements",
            "merged branch canni/failed_login_event (PR #2678)\n\nCommits\n-------\n\n09562df Update CHANGELOG for 2.1, describe new auth events\ncf09c2d added authentication success/failure events\n\nDiscussion\n----------\n\n[Security] Implementation of a  failed login  event, replaces: PR #1307\n\nAs I have to use this feature I have completed its implementation.\n\nBugfix: no\nFeature addition: yes\nSymfopny2 tests pass: yes\nReplaces/closes PR: #1307\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/11/18 23:57:56 -0800\n\nUsually, this event is used for the wrong reasons (to customize what happens on authentication failure). Can you move your implementation to the AuthenticationProviderManager instead?\n\nsee https://github.com/schmittjoh/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/AuthenticationProviderManager.php#L103\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/19 06:00:36 -0800\n\nGood point :) I'll not rewrite yours work, I've cherry-picked yours commits. (BTW you added call to `setEventDispatcher` on `security.authentication.manager` to commit related to some different work ;)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/22 00:12:19 -0800\n\nThe new files are missing the LICENSE header. As far as I can see, @schmittjoh fork has a different license from the Symfony one. This needs to be clarified before I can merge this PR.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/11/22 01:53:09 -0800\n\nNo biggy, MIT is fine here.\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/22 01:57:51 -0800\n\n@fabpot done\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/22 02:22:47 -0800\n\n@canni: Can you update the CHANGELOG file (to reference the changes and the BC breaks -- like the move of KernelEvents for instance).\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/22 02:40:33 -0800\n\n@fabpot: no problem & done\n\nPS I haven't realized that namespace change of `SecurityEvents` is actually a BC Break, thx for pointing this.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/22 03:06:17 -0800\n\n@canni: What about keeping a `SecurityEvents` class in the `Http` namespace that just extends the new one. That way, we don't break BC.\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/22 03:53:01 -0800\n\n@fabpot: that will force us to remove `final` keyword form one of classes.\n\nMaybe we can add new, not extending class e.g.: `GeneralSecurityEvents` or `AuthenticationEvents`, that way we dont break BC and dont introduce confusion in naming?\n\n---------------------------------------------------------------------------\n\nby canni at 2011/11/22 05:53:15 -0800\n\n@fabpot: I've removed the BC break, and squashed schmittjoh commits, to keep things nice and clear.",
            "[WebProfilerBundle] added missing image for the routing in the web profiler",
            "merged branch aboks/stopwatch_tests_win (PR #2732)\n\nCommits\n-------\n\na4e0697 [HttpKernel] Fixed failing Stopwatch tests due to usleep() accuracy on Windows\n\nDiscussion\n----------\n\n[HttpKernel] Fixed failing Stopwatch tests on Windows\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nDue to the system clock resolution on Windows platforms calls to `usleep()` might take less time than expected/requested, causing the Stopwatch tests to fail. Lowering the lower bounds in these tests by 10% makes the tests pass consistently on my platform.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/11/27 05:02:13 -0800\n\nThanks, I've had similar issues running tests here.",
            "merged branch ericclemmons/2545-expanded-grouped-choices (PR #2731)\n\nCommits\n-------\n\n7a8e1b3 ChoiceType flattens nested Choices when expanded\n82b0b37 Added ChoiceType test for flattening grouped Choices when expanded\n\nDiscussion\n----------\n\nFixed #2545 - ChoiceType flattens grouped Choices when expanded\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #2545\n\n**Problem**: With PR #2464, a bug was discovered when nested choices threw a exception during rendering.\n\n**Solution**: Nested choices are flattened prior to creating checkbox/radio fields.",
            "merged branch Seldaek/composerjson (PR #2719)\n\nCommits\n-------\n\n6d5b296 Adjust doctrine requirements\n628cce1 Adjust composer files to strictly require known to work packages\n\nDiscussion\n----------\n\nAdjust composer files to strictly require known to work packages\n\nI also bumped doctrine common to 2.2, because it seems 2.1 doesn't have the AbstractManagerRegistry stuff that is used by symfony 2.1. Please someone correct me if this is wrong.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/25 07:59:53 -0800\n\nIt should be done on the 2.0 branch too, no?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/11/26 16:11:25 -0800\n\nWell as we discussed the 2.0 branch is not a priority right now, but yes if someone wants to port the changes to 2.0 it'd be good.",
            "merged branch drak/stopwatch (PR #2734)\n\nCommits\n-------\n\n97dd2cc [HttpKernel] Removed unused property.\n\nDiscussion\n----------\n\n[HttpKernel] Removed unused property.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nCleaned up unused property.",
            "merged branch helmer/date_translation_domain (PR #2752)\n\nCommits\n-------\n\n0b5c4b2 [Form] Date, Time, DateTimeType forget translation domain\n\nDiscussion\n----------\n\n[Form] Date, Time, DateTimeType forget translation domain\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nRecently, ``translation_domain`` option was added to form options. In case of complex types like ``DateType``, ``TimeType`` and ``DateTimeType``, this option should be carried along to sub-types.",
            "merged branch francisbesset/form_error_message (PR #2748)\n\nCommits\n-------\n\n9e6a10a [Form] Added FormError::getMessage() and use it in Form class\n\nDiscussion\n----------\n\n[Form] Added FormError::getMessage()\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/11/29 18:38:40 -0800\n\nShould this go through the translator, similar to how `field_errors` renders error messages?\n\n> https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig#L253\n\n---------------------------------------------------------------------------\n\nby stof at 2011/11/29 23:11:24 -0800\n\n``getErrorsAsString`` is there for a debugging purpose so injecting the translator in the Form class just for it seems wrong. And the logic used here is exactly what the identity translator does.",
            "merged branch ericclemmons/2743-traceableeventdispatcher-closure (PR #2744)\n\nCommits\n-------\n\nc4303f3 TraceableEventDispatcher uses 'Closure' as the StopWatch name for Closures\n0b5499e TraceableEventDispatcher test for Closures\n\nDiscussion\n----------\n\n[FrameworkBundle] (PR) TraceableEventDispatcher creates NOTICE on Closures\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #2743\n\nCurrently a `\\Closure` will cause the error:\n\n> Notice: Undefined index: class in ...\\TraceableEventDispatcher`\n\nThe test will fail in the event this Notice occurs & passes when the Closure fires correctly.\n\n**Note**: If you use error suppression (`@$dispatcher->dispatch('onFooEvent')`), then the notice does not occur (as expected) and the listener fires correctly.  This, in my opinion, is expected behavior.\n\nIf you'd like this change rebased against another branch, let me know...",
            "[FrameworkBundle] make the code more generic",
            "merged branch excelwebzone/dev (PR #2706)\n\nCommits\n-------\n\n8710a13  Added example to the change log file\nc9a2b49  Fixed xml encoder test script, and group `item` tags into an array\na0561e5  Replaced `item` with `*item` when parsing XML string\n\nDiscussion\n----------\n\nReplaced `item` with `*item` when parsing XML string\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/23 22:14:12 -0800\n\nTests do not pass:\n\n1) Symfony\\Tests\\Component\\Serializer\\Encoder\\XmlEncoderTest::testDecode\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n         'key2' => 'val'\n-        'A B' => 'bar'\n         'Barry' => Array (...)\n+        'item' => Array (...)\n     )\n     'qux' => '1'\n )\n\n.../tests/Symfony/Tests/Component/Serializer/Encoder/XmlEncoderTest.php:173\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/24 22:57:37 -0800\n\nI don't understand the patch anymore. I don't see any use of `*item` in the code.\n\n---------------------------------------------------------------------------\n\nby excelwebzone at 2011/11/24 23:04:07 -0800\n\nI run some testing and you can't use '*item' XML parser reject it. So I modified it to convert it to an array.. Look at the test script change\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/24 23:13:30 -0800\n\nSo, you probably need to change the CHANGELOG as well? You should add an example which shows a before/after example.\n\n---------------------------------------------------------------------------\n\nby excelwebzone at 2011/11/24 23:15:51 -0800\n\nYes, forgot to change that..\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/11/25 01:27:42 -0800\n\nping @Seldaek, @lsmith77\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/11/25 04:16:43 -0800\n\nThere are other meta-names available in the XmlEncoder, @-something for attributes, then there is something happening with a # but I'm not quite sure what. I'm just saying, maybe *item isn't the best name, if it introduces a third metacharacter. Apart from that I'm fine with it.\n\n---------------------------------------------------------------------------\n\nby excelwebzone at 2011/11/25 08:45:31 -0800\n\nMaybe we can rename it to `wildcard` instead\n\n---------------------------------------------------------------------------\n\nby excelwebzone at 2011/11/25 15:12:09 -0800\n\nAny chance we can push this throw?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/11/27 04:06:25 -0800\n\nhere is the old PR #2682\n@Seldaek: i think your comment was made for an older version of the patch.\n\noverall I am fine with the change, the Serializer component takes a fairly simple approach. it is also not designed to really produce XML or JSON cleanly from the same data. it will really only be able to output a clean API for one or the other with the same data structure.\n\n---------------------------------------------------------------------------\n\nby excelwebzone at 2011/12/01 06:25:24 -0800\n\n@fabpot can we merge this change",
            "merged 2.0",
            "merged branch excelwebzone/dev (PR #2763)\n\nCommits\n-------\n\n6726350  Formatted xml string in CHANGELOG\n\nDiscussion\n----------\n\nFormatted xml string in CHANGELOG",
            "merged branch jmikola/2.0-LoaderResolverInterface (PR #2785)\n\nCommits\n-------\n\n7c1cbb9 [Config] Use LoaderResolverInterface for type-hinting\n48b084e fixed typo\n8ad94fb merged branch hhamon/doctrine_bridge_cs (PR #2775)\n240796e [Bridge] [Doctrine] fixed coding conventions.\n7cfc392 check for session before trying to authentication details\n648fae7 merged branch proofek/domcrawlerform-radiodisabled (PR #2768)\n3976b7a [DoctrineBridge] fixed CS\n9a04783 merged branch beberlei/SecurityEntityRepositoryIdentifierFix (PR #2765)\n3c83b89 [DoctrineBridge] Catch user-error when the identifier is not serialized with the User entity.\n36c7d03 Fixed GH-2720 - Fix disabled atrribute handling for radio form elements\n\nDiscussion\n----------\n\n[Config] Use LoaderResolverInterface for type-hinting\n\n```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\n```\n\nI've listed this as a BC break because we're changing the argument type-hint, but I think it's unlikely to affect anyone.",
            "merged branch drak/patch-1 (PR #2784)\n\nCommits\n-------\n\n541888d [EventDispatcher] Added missing object destruction in test tearDown() and removed duplicated tests.\n\nDiscussion\n----------\n\n[EventDispatcher] Merge two test cases into one.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\nRef https://github.com/symfony/symfony/commit/667c24d73da03b6076609c8d616e982ecf493cdd#commitcomment-766966\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/04 19:43:32 -0800\n\n``testGetName`` could also be removed as it is already tested by ``getSetName``, and same for the event dispatcher.\n\nBasically, you cannot test the setter without testing the associated getter so no need for 2 tests for them as it is forced to be duplicate for part of them (and no need to use so long names IMO)\n\n---------------------------------------------------------------------------\n\nby drak at 2011/12/05 00:49:22 -0800\n\nI've refactored the test to remove duplication, I pushed as a rebase so the new commit is 541888d referencing the same discussion.",
            "merged branch pulse00/master (PR #2787)\n\nCommits\n-------\n\n9fcea7f [DoctrineBundle] added EntityManager to use statements in registry (IDE support)\n\nDiscussion\n----------\n\n[DoctrineBundle] added Doctrine\\ORM\\EntityManager to use statements in Registry\n\nAdds type inference support for return types in IDEs.",
            "merged branch jmikola/master-DependencyInjectionExceptions (PR #2786)\n\nCommits\n-------\n\nda0773c Note DependencyInjection exception changes in the 2.1 changelog\n9a090bc [DependencyInjection] Fix class check and failure message in PhpDumper test\n2334596 [DependencyInjection] Use component's SPL classes in dumped service container\n3c02ea2 [DependencyInjection] Use exception class for API doc generation\n47256ea [DependencyInjection] Make exceptions consistent when ContainerBuilder is frozen\nb7300d2 [DependencyInjection] Fix up @throws documentation\n123f514 [DependencyInjection] Use component-specific SPL exceptions\ncf2ca9b [DependencyInjection] Create additional SPL exceptions\nba8322e [DependencyInjection] Format base exception classes consistently\n\nDiscussion\n----------\n\n[DependencyInjection] Refactor usage of SPL exceptions\n\n```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\n```\n\nThis was something discussed on the mailing list recently and a topic at the last IRC meeting. The DependencyInjection component was what I had in mind while discussing this with @lsmith a few weeks ago, as I found that it already had some local SPL exceptions, which weren't being used directly (only as base classes for the compiler exceptions). This PR replaces uses of core SPL exceptions with the component's equivalents. I've listed it as BC-breaking to be safe, but I don't think it should cause any trouble, since the new exceptions are sub-classes of those originally used.\n\nI purposely avoided changing the exceptions in the dumped PHP container. If we agree that's worth doing, it would be a trivial addition to the PR.\n\n---------------------------------------------------------------------------\n\nby jmikola at 2011/12/04 22:38:47 -0800\n\nOne question I came across while implementing this PR: the doc blocks in ContainerInterface reference InvalidArgumentException (actually the component's local SPL equivalent), but there is no practical need for that class to be used in the file. How will the API doc generator handle this? Do we need to change the doc block reference to the full class path?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/05 01:20:31 -0800\n\nWhy have you not replaced the exception in the dumped container code? I don't see any drawback.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/12/05 03:39:25 -0800\n\nit would even be better to be consistent in the generated code\n\n---------------------------------------------------------------------------\n\nby jmikola at 2011/12/05 09:48:05 -0800\n\nI'll update the exceptions in the dumped container code as well. Thanks for the feedback.\n\n---------------------------------------------------------------------------\n\nby jmikola at 2011/12/05 10:41:21 -0800\n\nOk, this should be ready to review and merge. Tests needed some updating, but they still pass.",
            "merged branch jmikola/patch-1 (PR #2793)\n\nCommits\n-------\n\nea2b0e5 Note LoaderResolverInterface type hinting in the 2.1 changelog\n\nDiscussion\n----------\n\nNote LoaderResolverInterface type hinting in the 2.1 changelog\n\nAlthough #2785 was originally opened against 2.0, its merge to master seems to be intentional. This documents the BC break that some experienced (see: FriendsOfSymfony/FOSRestBundle#155).",
            "merged branch kriswallsmith/security/invalid-user-provider (PR #2789)\n\nCommits\n-------\n\n70e9332 added check for invalid user providers\n\nDiscussion\n----------\n\n[security] added check for invalid user providers\n\nI've added an exception if an invalid user provider is passed into a context listener.\n\nThe FOSFacebookBundle configuration has been documented wrong for a long time. This exception prevent users from configuring the security layer incorrectly.\n\n```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\n```\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/12/06 00:40:08 -0800\n\nWhat about doing that in the 2.0 branch?\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2011/12/06 03:23:59 -0800\n\nIt is possible it will break some applications -- a non-user provider that is not first in the array may never be called.",
            "[HttpKernel] removed the _route entry from _route_params",
            "merged branch Tobion/patch-1 (PR #3130)\n\nCommits\n-------\n\n5de5382 improved formatting of changelog-2.1\nbf5ccb0 resolved conflict\n\nDiscussion\n----------\n\nimproved markdown formatting of upgrade file\n\nFixed the indention so that the detailed descriptions are part of the corresponding changelog list item.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-01-17T09:24:04Z\n\nIt does not merge cleanly.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-01-17T10:02:14Z\n\n@fabpot should be good to go now",
            "Merge branch '2.0'\n\n* 2.0:\n  Updated Serbian translation.\n  fixed CS\n  [Locale][Testing] Fixed breaking tests if 'intl' extension is not installed (#3139)\n  [Bridge] [Twig] fixed typo in a comment of the Twig FormExtension extension.",
            "merged branch umpirsky/serbian-translation-update (PR #3167)\n\nCommits\n-------\n\nf6b3ea2 New validation messages and translated to Serbian language.\n\nDiscussion\n----------\n\nNew validation messages and translated to Serbian language.\n\nIt would be nice for translators to be notified somehow when new validation messages appear. I copied those from French translation, not sure if that is the right way to go?\n\nAlso, in addition, I would like to contribute sr@latin translation. To explain, Serbian language have dual alphabet, both cyrillic and latin. I'm not sure if Symfony locale supports locale variants? Can you suggest right translation file name for this?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-21T19:20:31Z\n\nPlease send the ids up to 41 to the 2.0 branch. Only 42 and above are new in 2.1\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-21T19:23:48Z\n\nRegarding serbian latin translations, there is an issue here: both cyrillic and latin serbian share the same locale id ``sr_SP``\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-21T19:33:01Z\n\nok, looking a bit more about it, it seems like the right way to handle this is to use ``sr_Latn`` and ``sr_Cyrl`` for the 2 variants\n\n---------------------------------------------------------------------------\n\nby umpirsky at 2012-01-21T20:28:37Z\n\nBut ids 42 and above can be merged to master (2.1), right?\n\nI think they share `sr_RS`, not `sr_SP` as you said.\n\nSo, `validators.sr.xlf` should be renamed to `validators.sr_Cyrl.xlf` and for latig added `validators.sr_Latn.xlf`?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-01-21T21:00:18Z\n\nyeah, but previous ids should be merged in 2.0 first to avoid merge conflicts later\n\n---------------------------------------------------------------------------\n\nby umpirsky at 2012-01-21T22:37:15Z\n\nDone https://github.com/symfony/symfony/pull/3168",
            "merged branch timewasted/patch-1 (PR #3158)\n\nCommits\n-------\n\n9e55cda Only call recover() when spool is a Swift_FileSpool\nd2a0c74 Use if/else instead of ternary operator\n15c666b Add a  recover-timeout  option to allow recovering messages that have taken too long to send\n\nDiscussion\n----------\n\n[SwiftmailerBundle] Add a  recover-timeout  option to swiftmailer:spool:send\n\nThis would allow for easy resending of messages that were marked as being sent, but for whatever reason were never actually sent.",
            "merged branch lstrojny/feature/form-http-delete (PR #3159)\n\nCommits\n-------\n\n0b7e2e0 Support for DELETE method in forms\n\nDiscussion\n----------\n\n[Form] Support DELETE HTTP verb\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: none\nTodo: -\n\nAs `Symfony\\Component\\HttpFoundation\\Request` already support DELETE requests nicely by parsing the request for us, support for the HTTPs DELETE verb can be easily done.\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2012-01-20T06:00:49Z\n\nThis is wrong. The body for DELETE method is supposed to be empty or if present ignored.\nAlso the DELETE is supposed to remove the resource identified by uri, so the same code as for GET should be executed.\n\n---------------------------------------------------------------------------\n\nby lstrojny at 2012-01-20T08:56:22Z\n\nI don\u2019t think that\u2019s the case. The HTTP standard does not state explicitly that DELETE does not have a body. See this [StackOverflow thread](http://stackoverflow.com/questions/2539394/rest-http-delete-and-parameters)",
            "merged branch canni/fix_cs (PR #3146)\n\nCommits\n-------\n\n3cfaade [CS] Fix usage of assertCount\n\nDiscussion\n----------\n\n[CS] Fix usage of assertCount\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n\n[![Build Status](https://secure.travis-ci.org/canni/symfony.png)](http://travis-ci.org/canni/symfony)",
            "merged branch sprain/sprain/xml-encoder-cdata (PR #3134)\n\nCommits\n-------\n\n9cb513f Now\u2026\u00a0no more tabs!\n7f34643 [Pull Request 3134] Improved code based on comments\n90abc0f [Serializer][XmlEncoder] add CDATA padding only if necessary\n\nDiscussion\n----------\n\n[Serializer][XmlEncoder] add CDATA padding only if necessary\n\nChanged XML encoder so CDATA padding is only added to value if necessary.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-01-17T21:34:59Z\n\nYou should add some unit tests.",
            "[Serializer] fixed unit tests after previous merge + added a new one",
            "merged branch blogsh/dynamic_constraints (PR #3114)\n\nCommits\n-------\n\n92f820a Renamed registerConstraints to loadDynamicValidatorMetadata\ndd12ff8 CS fix, getConstraints renamed\n09c1911 [Validator] Improved dynamic constraints\n54cb6e4 [Validator] Added dynamic constraints\n\nDiscussion\n----------\n\n[Validator] Dynamic constraints\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nBy now the Validator component is based on a per-class configuration of\nconstraints, but in some cases it might be neccessary to add new constraints\ndynamically at runtime.\nThis pull request adds a  ConstraintProviderInterface  to the Validator component. If an object is validated that implements this interface the method  getConstraints  is used to add dynamic constraints:\n\n    class User implements ConstraintProviderInterface\n    {\n        protected $isPremium;\n        protected $paymentInformation;\n\n        public function getConstraints(ClassMetadata $metadata)\n        {\n            if ($this->isPremium) {\n                $metadata->addPropertyConstraint('paymentInformation', new NotBlank());\n            }\n        }\n    }\n\n---------------------------------------------------------------------------\n\nby alexandresalome at 2012-01-15T11:20:04Z\n\nRelated to #1151\n\n---------------------------------------------------------------------------\n\nby canni at 2012-01-16T09:22:28Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-01-16T12:32:44Z\n\nI think this is a good addition. I think we still have a naming problem though. When constraints are loaded using a static method, the default name for the loader method is `loadValidatorMetadata`. Since the method for dynamic constraint loading is basically the same, I think the two names should be related.\n\nSolution (1): Rename the method in your interface to `loadDynamicValidatorMetadata`. Ugly and long.\n\n    class MyClass implements ConstraintProviderInterface\n    {\n        public static loadValidatorMetadata(ClassMetadata $metadata) ...\n\n        public loadDynamicValidatorMetadata(ClassMetadata $metadata) ...\n    }\n\nSolution (2): Rename the default method name in `StaticMethodLoader` to `registerConstraints` and adjust the docs. Breaks BC.\n\n    class MyClass implements ConstraintProviderInterface\n    {\n        public static registerConstraints(ClassMetadata $metadata) ...\n\n        public registerDynamicConstraints(ClassMetadata $metadata) ...\n    }\n\n@fabpot: Are we allowed to break BC here? If not, we should probably stick to (1).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-01-16T12:36:14Z\n\nI would prefer to not break BC if possible.\n\n---------------------------------------------------------------------------\n\nby blogsh at 2012-01-16T15:25:46Z\n\nSo  loadDynamicValidatorMetadata  would be the best solution?\n\n---------------------------------------------------------------------------\n\nby althaus at 2012-01-17T13:39:19Z\n\n>So  loadDynamicValidatorMetadata  would be the best solution?\n\nSounds fine for me based on @bschussek's comment.",
            "updated CHANGELOG for 2.1",
            "merged branch kriswallsmith/csrf-token-helper (PR #3080)\n\nCommits\n-------\n\n753c067 [FrameworkBundle] added $view['form']->csrfToken() helper\ne1aced8 [Twig] added {{ csrf_token() }} helper\n\nDiscussion\n----------\n\n[Twig] [FrameworkBundle] added CSRF token helper\n\nI've added a templating helper and Twig function for generating a CSRF token without the overhead of creating a form.\n\n```html+jinja\n<form action= {{ path('user_delete', { 'id': user.id }) }}  method= post >\n    <input type= hidden  name= _method  value= delete >\n    <input type= hidden  name= _token  value= {{ csrf_token('delete_user_' ~ user.id) }} >\n    <button type= submit >delete</button>\n</form>\n```\n\n```php\n<?php\n\nclass UserController extends Controller\n{\n    public function delete(User $user, Request $request)\n    {\n        $csrfProvider = $this->get('form.csrf_provider');\n        if (!$csrfProvider->isCsrfTokenValid('delete_user_'.$user->getId(), $request->request->get('_token')) {\n            throw new RuntimeException('CSRF attack detected.');\n        }\n\n        // etc...\n    }\n}\n```\n\nThe test that is failing on Travis appears to be unrelated, but I may be wrong?\n\n```\n1) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\LocalizedRoutesAsPathTest::testLoginLogoutProcedure with data set #1 ('de')\nRuntimeException: OUTPUT:\nCatchable fatal error: Argument 3 passed to Symfony\\Bundle\\FrameworkBundle\\Controller\\TraceableControllerResolver::__construct() must be an instance of Symfony\\Component\\HttpKernel\\Debug\\Stopwatch, instance of Symfony\\Bundle\\FrameworkBundle\\Controller\\ControllerNameParser given, called in /tmp/2.1.0-DEV/StandardFormLogin/cache/securitybundletest/appSecuritybundletestDebugProjectContainer.php on line 94 and defined in /home/vagrant/builds/kriswallsmith/symfony/src/Symfony/Bundle/FrameworkBundle/Controller/TraceableControllerResolver.php on line 37\n```\n\n---------------------------------------------------------------------------\n\nby pablodip at 2012-01-10T14:18:45Z\n\nAs you don't need forms to use the csrf provider, how about putting its service without the form prefix? It could even make sense to put the CsrfProvider as a component since you can use it standalone and in more cases than only forms. It would be a small component though.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-01-10T17:54:14Z\n\nI think it would be more clear to generate the token in the controller. Doing so in the template will spread the CSRF intention across template and controller. So I don't think this extension is necessary.\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-01-10T17:58:14Z\n\n@pablodip I'm open to the idea of a Csrf component. This would be a good place for some nonce classes as well.\n\n@Tobion I disagree. One use case is for a list of users, each with a delete form. Iterating over the users in the controller and generating a token for each, just to iterate over them again in the view is a waste and adds complexity.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-01-10T18:05:14Z\n\nI see. But I don't understand why the intention needs to be different for each user to delete. Usually the intention is the same for each form type. I thought this is enough.\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-01-10T18:06:13Z\n\nYes, a static intention would suffice.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-01-10T18:07:08Z\n\nThen your use case is not valid anymore.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-01-10T18:12:25Z\n\nI would suggest to make a cookbook article out of it about how to create a simple form without the form component.\nAnd include such things as validating the result using the validator component and checking the CSRF.\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-01-10T21:32:50Z\n\nThis helper makes it easier to use CSRF protection without a form and we should make it as easy as possible. Spreading the intention across controller and template is not concerning to me. Either way, a cookbook entry is a great idea.\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-01-10T21:47:12Z\n\nWell, it's just one line more without this helper. So I disagree it makes it really easier when you know how to use the CsrfProvider which is a pre-condition anyway since you must still validate its correctness by hand.\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2012-01-13T13:24:15Z\n\nAnother use case is when rendering a page with a bunch of simple buttons with different intentions: delete user, delete comment, follow, unfollow... Creating all of these in the controller just leads to spaghetti.\n\n---------------------------------------------------------------------------\n\nby jwage at 2012-01-17T21:55:53Z\n\n:+1: lots of use cases for something like this @OpenSky",
            "[HttpKernel] added some unit tests for ExceptionHandler and\nFlattenException",
            "[HttpKernel] fixed indentation of generated HTML in ExceptionHandler",
            "Revert  merged branch blogsh/dynamic_constraints (PR #3114) \n\nThis reverts commit 6b9a355fb0d39c92180265e589bd2890afc50706, reversing\nchanges made to 811ead8589fe0d310657161df6afe373873a4f39.",
            "[HttpKernel] added arguments to ExceptionHandler (closes #2739)",
            "merged branch 1ed/hungarian-validator-messages (PR #3170)\n\nCommits\n-------\n\n0f680c2 [FrameworkBundle] updated hungarian validator messages\n\nDiscussion\n----------\n\n[FrameworkBundle] updated hungarian validator messages",
            "removed debug code",
            "merged branch bschussek/issue3161 (PR #3204)\n\nCommits\n-------\n\n0533c1b [Form] Fixed: IntegerToLocalizedStringTransformer does not accept  NaN  as valid number anymore\n8c63d6d [Form] Fixed: NumberToLocalizedStringTransformer does not accept  NaN  as valid number anymore\naaa9de6 Added test case for checking that 'NaN' string converts into TransformationFailedException in NumberToLocalizedStringTransformer\n\nDiscussion\n----------\n\n[Form] Disallowed  NaN  as input in number fields\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3161, #3196\nTodo: nothing\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3161)",
            "merged branch vicb/profiler (PR #3190)\n\nCommits\n-------\n\nb879397 [Profiler] Optimize time panel IS\nd4300b9 [WebProfilerBundle] Tweak the time view\n416a2a4 [Stopwatch] Fix some logic\n8c3505e [Profiler] Tweak PHPDoc\n3bcd154 [HttpKernel] Tweak the Profile class - DRY\n\nDiscussion\n----------\n\n[Profiler] Stopwatch related tweaks\n\n* Some fixes in the stopwatch logic,\n* Some JS fixes,\n* Make use of modern JS.",
            "merged branch m0ppers/master (PR #3184)\n\nCommits\n-------\n\nb177786 Make twig optimizations configurable\n\nDiscussion\n----------\n\noptimizations not configurable\n\nValid option for twig but missing in the configuration. I am currently hardsetting this in my own bundle.",
            "merged branch vicb/profiler.logger (PR #3200)\n\nCommits\n-------\n\na52c675 [WebProfilerBundle] Improve the logger panel\n\nDiscussion\n----------\n\n[WebProfilerBundle] Improve the logger panel\n\nNo more need to hit 'refresh'",
            "merged branch bschussek/issue3219 (PR #3221)\n\nCommits\n-------\n\n5aa5987 [Form] Fixed: form children are always validated in group  Default \n\nDiscussion\n----------\n\n[Form] Fixed: form children are always validated in group  Default \n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3219\nTodo: -\n\n![Travis Build Status](https://secure.travis-ci.org/bschussek/symfony.png?branch=issue3219)\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-01-30T12:44:43Z\n\n@craue: Can you verify whether this PR fixes your problem?\n\n---------------------------------------------------------------------------\n\nby craue at 2012-01-30T12:53:59Z\n\nYeah, it does. :+1:",
            "merged branch rdohms/patch-1 (PR #3232)\n\nCommits\n-------\n\n7b79cc2 Fixing typo in XLIFF Dumper\n\nDiscussion\n----------\n\nFixing typo in XLIFF Dumper\n\nThere was a typo in the service name for the XLIFF Dumper",
            "merged branch ericclemmons/3194-router-prefix-imports (PR #3245)\n\nCommits\n-------\n\n534843d Updated CHANGELOG-2.1 to reflect imported route support of default values and requirements\n3c28ab7 No prefix is required to override imported RouteCollections\nc373d5b Added RouteCollectionTest#testAddCollectionOverridesDefaultsAndRequirements\n\nDiscussion\n----------\n\n[Router] RouteCollection `prefix` optional for default values/requirements\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3194\n\n[![Build Status](https://secure.travis-ci.org/ericclemmons/symfony.png)](https://secure.travis-ci.org/ericclemmons/symfony.png)\n\nWith the commit 2e1344eb7ef1e4a6c5cc21e098fd2a6404f2b289 (thanks @vicb!), imported routes could have `defaults` and `requirements` set, but only as long as there is a `prefix`.\n\nThisfix allows any imported route to have defaults set, whether or not `prefix` is set.\n\n(See #3194 for specifics)\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-02-02T06:01:51Z\n\nBehavior is now consistent.\n\n_FYI, You should thank `git-dag` here, `gitk` & `git-cola` are also helpful to filter commits._",
            "merged branch drublic/master (PR #3242)\n\nCommits\n-------\n\n2374e54 Break paths in exceptions hard with css if necessary\n\nDiscussion\n----------\n\nExceptions: Break source-paths with CSS\n\nSometimes in exceptions absolute paths of files are pretty long and need more than one line.\n\neg.: `/Volumes/Macintosh HD/Users/blabla/Sites/project/files/src/SomeProjectsName/SomeProjectsNameFrontendBundle/Controller/CreateController.php`\n\nThis should be displayed within the width of the `h1`.\n\nUsing CSS `word-break: break-all;`.",
            "updated CHANGELOG for 2.1",
            "revert 89fd965 (refs #2339)",
            "[Routing] added a unit test to document an intended behavior (defaults and requirements are overriden when defined in the addPrefix method)",
            "[Routing] added a matcher that helps debugging matching problems",
            "[FrameworkBundle] added a command to help debugging route matching problems",
            "[WebProfilerBundle] added a profiler panel for the router",
            "updated CHANGELOG for 2.1",
            "[Routing] fixed side-effect in the PHP matcher dumper",
            "Merge branch '2.0'\n\n* 2.0:\n  [Routing] fixed side-effect in the PHP matcher dumper",
            "moved the Swiftmailer data collector to the Swifmailer bridge",
            "[SwiftmailerBundle] replaced MessageLogger class with the one from Swiftmailer 4.1.3",
            "merged branch bmatzner/patch-1 (PR #2459)\n\nCommits\n-------\n\nc46fe16 Adding  sf-toolbar  class to toolbar wrapper to make it possible to check for its existance prior to js instantiation (in order to change page layout when profiler toolbar is enabled)\n\nDiscussion\n----------\n\n[WebProfilerBundle] Adding  sf-toolbar  class to toolbar wrapper to make it possible to check\n\nAdding  sf-toolbar  class to toolbar wrapper to make it possible to check for its existance prior to js instantiation (in order to change page layout when profiler toolbar is enabled)",
            "[Console] made the defaults in Application more easily customizable",
            "merged branch mvrhov/dbal_sessstorage_fix (PR #2384)\n\nCommits\n-------\n\n0907111 session data needs to be encoded because it can contain non binary safe characters e.g null. Fixes #2067\n\nDiscussion\n----------\n\nsession data needs to be encoded because it can contain non binary safe characters e.g null., part 2\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: #2067\n\nI'm marking this as a compatibility break because session table should be cleared and even if not cleared all currently logged in users will be logged out.\n\nThis is the fix for a same issue in DBAL session storage made against master.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/10/12 02:44:19 -0700\n\nIf I understand this correctly, only the PgSqlPlatform is affected by this. What do you think about adding an ``\u00ecnstanceof PgSqlPlatform`` check?\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2011/10/12 03:47:52 -0700\n\nIt's the same for sqlite, it just happens that mysql escapes \\0, so we can say it's driver dependent.\nThe Drupal guys had the same issue http://drupal.org/node/690746 , they changed to column type to bytea for pgsql and for mysql to blob, also in Drupal report you can find that storing this into a session hash_file('md5', 'CHANGELOG.txt', TRUE) will trigger the similar problem in mysql.\nThe other thing to consider is what I mentioned in original bugreport, e.g igbinary as default serializer for session data.",
            "[WebProfilerBundle] adjusted the default canvas size for the timeline",
            "merged 2.0",
            "merged 2.0",
            "[HttpKernel] added a way to get the original values returned by the router",
            "merged 2.0",
            "removed unused use statements",
            "Merge branch '2.0'\n\n* 2.0:\n  fixed CS",
            "fixed CS",
            "[Routing] added the possibility to define default values and requirements for placeholders in prefix",
            "-",
            "[Routing] added support for _scheme requirement in UrlMatcher (see 07aae9849536cb5fdd0d901aa7eb113b5a8c054e)",
            "[HttpKernel]\u00a0fixed event priority (if not, there is a problem when an exception occurs during one of the event registered before this one)",
            "merged branch dbu/fix-router-dependency-injection (PR #2450)\n\nCommits\n-------\n\n6b02ffb fix a typo in the routing dependency injection configuration. the request_context service is named router, not routing\n\nDiscussion\n----------\n\nfix a typo in the routing dependency injection configuration\n\nfix a typo in the routing dependency injection configuration. the request_context service is named router.request_context , not routing.request_context\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: ? - should not unless somebody relied on the bug\nSymfony2 tests pass: yes\nFixes the following tickets: no ticket\n\ni ran\nphpunit src/Symfony/Bundle/FrameworkBundle/Tests/\nand\nphpunit tests/Symfony/Tests/Component/Routing/",
            "merged branch Seldaek/composerjson (PR #2447)\n\nCommits\n-------\n\nc89bccb Replace 2.1.* and not any version above 2.1\n\nDiscussion\n----------\n\nReplace 2.1.* and not any version above 2.1",
            "[HttpKernel] removed usage of assertCount which has been introduced in PHPUnit 3.6",
            "merged branch dbu/router-cache-warmup-interface (PR #2451)\n\nCommits\n-------\n\n96235a6 cs fix\n46a69f1 define a WarmableInterface and only warm the cache if it implements warmable to allow replacing the core router. this fixes #2422. combining routers will only really work when #2450 is merged too.\n\nDiscussion\n----------\n\ndefine a WarmableInterface and only warm the cache if it implements warmable\n\ndefine a WarmableInterface and only warm the cache if it implements warmable to allow replacing the core router. this fixes #2422. combining routers will only really work when #2450 is merged too.\n\nBug fix: yes\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes*\nFixes the following tickets: #2422\n\n(*) tests:\nsuccess for\nphpunit src/Symfony/Bundle/FrameworkBundle/Tests/\nand\nphpunit tests/Symfony/Tests/Component/Routing/\n\nbut when running all tests, i have to put gc_disable() into autoload to avoid segmentation fault and then get (after 3000 successful tests):\n\nPHP Fatal error:  Call to undefined method Symfony\\Tests\\Component\\HttpKernel\\Debug\\StopwatchTest::assertCount() in /home/david/liip/symfony-cmf/cmf-sandbox/vendor/symfony/tests/Symfony/Tests/Component/HttpKernel/Debug/StopwatchTest.php on line 84\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/22 08:46:31 -0700\n\n@dbu assertCount is new in PHP 3.6. It seems like the test of the new 2.1 feature has been written using 3.6-RC.\n\n---------------------------------------------------------------------------\n\nby dbu at 2011/10/22 09:40:07 -0700\n\n@stof: ah, thanks for the hint. i hope you mean php 3.4 and not 3.6? but i assume symfony 2.1 should be able to run on 3.3, right?\n\nanyways, the tests run through if i disable the StopWatch, so i guess we can consider the tests succeeding.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/22 09:41:28 -0700\n\nthis is a method of PHPUnit TestCase class. I was talking about the PHPUnit version",
            "moved WarmableInterface to the HttpKernel component",
            "merged branch snc/upgrade-session-locale (PR #2446)\n\nCommits\n-------\n\nc915f48 Added another  before  possibility to retrieve the locale from a Twig template.\n\nDiscussion\n----------\n\nAdded {{ app.session.locale }} to UPGRADE-2.1.md\n\nAdded another  before  possibility to retrieve the locale from a Twig template.",
            "merged branch mvrhov/cache_warmup_exception (PR #2445)\n\nCommits\n-------\n\n6b872cf Check if cache_warmer service is available before doing the actual cache warmup\n40fb76d [Framework] removed wrong listener\n\nDiscussion\n----------\n\nfix cache warump exception when service is not available\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: N/A\n\nfixes [Symfony\\Component\\DependencyInjection\\Exception\\ServiceNotFoundException]\n  You have requested a non-existent service  cache_warmer . in console when FrameworkBundle is removed from kernel.",
            "merged 2.0",
            "added Stopwatch support in debug mode, added a timeline representing the stopwatch events in the web profiler\n\nEnjoy!",
            "merged branch symfony/security_user_validator (PR #2232)\n\nCommits\n-------\n\n7d3c2df [SecurityBundle] added a validator for the user password\n\nDiscussion\n----------\n\n[SecurityBundle] added a validator for the user password\n\nThis validator is useful when you want to validate that an input value\nis equal to the user current password (in a form where the user can change\nhis password for instance).\n\nNote that this should not be used to validate a login form as this is\ndone automatically by the built-in security mechanism.\n\n---------------------------------------------------------------------------\n\nby Palleas at 2011/09/21 08:36:14 -0700\n\nThis is kinda what I wrote for my project 2 days ago, I'm definitely +1 on this ;-)\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/09/21 08:45:55 -0700\n\n:+1:",
            "merged branch marekkalnik/multiple_entity_managers (PR #2184)\n\nCommits\n-------\n\n4ca09a9 [Validator] Validate object with it's own entity manager by default\n\nDiscussion\n----------\n\n[Validator] Validate object with it's own entity manager by default\n\nWhile working with multiple object managers the default validation uses default entity manager, requiring the dev to create own validation services for each entity using other entity managers. This commit causes entity to be validated (by default) by it's own entity manager, while still preserving a possiblity to specifiy $constraint->em.\n\nThis is was a pull request to 2.0, changed to master according to stof's suggestion.",
            "updated CHANGELOG for 2.1",
            "merged branch alexandresalome/profiler-toolbar-position (PR #2114)\n\nCommits\n-------\n\n132fbe3 [WebProfilerBundle] Merge position and css_position\ndefdb82 [WebProfilerBundle] Remove unused line\n69a50ab [WebProfilerBundle] Add the posibility to specify position of toolbar\n\nDiscussion\n----------\n\n[WebProfilerBundle] Add the posibility to specify position of toolbar\n\nI'm facing a project where everything is at the bottom of the page, positioned with CSS.\n\nThis PR adds the possibility to specify the position of the toolbar, with configuration :\n\n    web_profiler:\n        toolbar: true\n        intercept_redirects: false\n        css_position:        top\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/06 12:11:27 -0700\n\nLooking at the code rendering the toolbar, there is already a ``position`` parameter used to display the toolbar on top in the profiler. Maybe we could look into reusing it instead of having a second one named ``css_position``.\nBut the phpdoc says ``bottom, normal, or null -- automatically guessed``. Using ``bottom`` will result in ``position: bottom`` in the CSS, which is broken. @fabpot is it simply a left-over of a previous version ?\n\n---------------------------------------------------------------------------\n\nby alexandresalome at 2011/09/16 00:56:11 -0700\n\nI merged parameters and changed the documentation for 3 values : ```bottom, top or normal```.",
            "[WebProfileBundle] added missing position attribute in XSD",
            "[WebProfilerBundle] removed normal as a valid position for the toolbar as it is only to be used by the profiler",
            "[WebProfilerBundle] fixed height of the toolbar",
            "updated CHANGELOG for 2.1",
            "[WebProfileBundle] fixed unit tests",
            "merged branch stloyd/profile_info (PR #1594)\n\nCommits\n-------\n\nfea74db Added information page with better messages for Profiler\n\nDiscussion\n----------\n\n[WebProfiler] Added information page with better messages\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/08/30 23:29:27 -0700\n\n@fabpot Any decision about this ?",
            "[WebProfilerBundle] tweaked some templates",
            "[WebProfilerBundle] moved the token not found error to the new info page",
            "[WebProfilerBundle] tweaked profiler CSS",
            "merged branch stloyd/patch-1 (PR #2237)\n\nCommits\n-------\n\n4dae5b8 [WebProfilerBundle] Cleanuped css\n\nDiscussion\n----------\n\n[WebProfilerBundle] Cleanuped css",
            "merged branch yethee/ru_translation (PR #2238)\n\nCommits\n-------\n\ne1aabd2 [FrameworkBundle] Updated the Russian translations.\n\nDiscussion\n----------\n\n[FrameworkBundle] Updated the Russian translations.\n\nAdded translations for a new error messages of image validator.\nAdded translations for the user password validator.",
            "updated CHANGELOG for 2.1",
            "merged branch helmer/target_path (PR #2228)\n\nCommits\n-------\n\n022a9a7 [Security] Make saving target_path extendible\n\nDiscussion\n----------\n\n[Security] Make saving target_path extendible\n\nThe problem lies in how Security component handles ``target_path`` - the latest request URI is always stored. This can lead to problems in following scenarios:\na) The response type of the request is not HTML (think JSON, XML ..)\nb) The URI matches a route that does not listen to HTTP GET\n\nI opened a [PR](https://github.com/symfony/symfony/pull/604) months ago, to partly solve scenario A, which did not make it. Now I am proposing a different solution - user can extend ``ExceptionListener`` and override the logic behind setting the ``target_path`` to match his precise needs.\n\nIn my simplified scenario, I would be using:\n\n```\nprotected function setTargetPath(Request $request)\n{\n    if ($request->isXmlHttpRequest() || 'GET' !== $request->getMethod()) {\n        return;\n    }\n\n    $request->getSession()->set('_security.target_path', $request->getUri());\n}\n```\n\n@Seldaek, @schmittjoh, @lsmith77, thoughts?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/09/21 02:37:02 -0700\n\nSeems like a better solution for flexibility's sake. Would be quite awesome if you could add a cookbook entry to symfony/symfony-docs about this, otherwise I'm afraid we'll have to explain it over and over again :)\n\n---------------------------------------------------------------------------\n\nby helmer at 2011/09/21 03:38:57 -0700\n\n[Cookbook](https://github.com/helmer/symfony-docs/commit/b22c5e666edb2586840884e32f8209425125c30d) entry done. Perhaps though I rushed ahead ..\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/09/21 03:52:01 -0700\n\nThanks. You can already do a pull request against symfony-docs, just reference this pull request in it so it's not merged before this is merged.",
            "merged branch excelwebzone/hebrew_translations (PR #2243)\n\nCommits\n-------\n\n58d78f0  Updated the hebrew translations\n\nDiscussion\n----------\n\nUpdated the hebrew translations",
            "merged branch jdewit/master (PR #2242)\n\nCommits\n-------\n\n6d8c4a8 change nested collection indentation from 2 to 4\n\nDiscussion\n----------\n\nChanged Yaml Dumper nested collection indentation\n\nThis PR changes the dumpers nested collection indentation from 2 to 4 which seems to be the standard.",
            "fixed unit tests broken by previous merge",
            "[DependencyInjection] changed the default YAML indentation to 4 spaces instead of 2",
            "merged branch jc-/master (PR #2151)\n\nCommits\n-------\n\nf4784f7 [DomCrawler] Submit on a <form> node\n\nDiscussion\n----------\n\nDomCrawler - ability to submit a form that doesn't have any buttons\n\nThe proposed modification allows to submit above a &lt;form&gt; tag.\nUsing the DomCrawler component (among others), I have to interact with a remote site that has a form without a submit button (submitted automatically by javascript). This prompted the quick fix I'm sending. Please tell me if there is anything I should do differently and I'll modify it.\nThanks :)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/12 00:46:07 -0700\n\nLooks good to me. Can you add some unit tests for this new behavior? Thanks.\n\n---------------------------------------------------------------------------\n\nby jc- at 2011/09/12 02:27:25 -0700\n\nHonored to meet you. I'm trying to run the test suite but 24 tests fail even without my commit. I'll try to get it sorted out and submit tests for this ASAP.",
            "[DomCrawler] added unit tests for previous merge",
            "[TwigBridge] fixed message keys extraction when no domain is defined in the template",
            "[TwigBridge] rewrote the Twig translation extractor\n\n* The extractor is now reusable as this is a proper Twig node visitor\n* The new extractor covers more cases",
            "merged branch lsmith77/template_locator (PR #2128)\n\nCommits\n-------\n\nafc0971 make it easier to customize the cache lookup in the TemplateLocator\n\nDiscussion\n----------\n\nmake it easier to customize the cache lookup in the TemplateLocator\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/22 01:21:56 -0700\n\nDo you any use case for that?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/22 01:27:06 -0700\n\nYes in the ThemeBundle we override the default cache to include the key + theme:\nhttps://github.com/liip/liipthemebundle/pull/9/files#L7R53\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/22 01:29:18 -0700\n\nthough i just thought about it .. if we do not put this into 2.0, it might not be worth the trouble.\n\n---------------------------------------------------------------------------\n\nby pjedrzejewski at 2011/09/22 02:19:42 -0700\n\n+1 for this.",
            "merged 2.0",
            "merged branch stloyd/repeatedtype (PR #1453)\n\nCommits\n-------\n\n67c33a8 Rebased with master, and fixed wrong behavior with proper tests coverage\nf8a6a4b Be sure that both fields have same value for required option in RepeatedType\n0679220 Additional test coverage for changes in RepeatedType\nb23d47d moved options test form from class->method scope\n5fe5556 fixed accidental permission change\na969434 [Form] fixed CS, merged options, added tests\n8819db3 [Form] Allow setting different options to repeating fields\n\nDiscussion\n----------\n\n[2.1] [Form] Allow setting different options at RepeatedType fields\n\nThis an test covered version of #1348 (rebased with master).\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/06/27 04:18:19 -0700\n\n@fabpot What do you think about this ? I'm just not sure that we should allow setting `required` per field, IMO better would be forcing this option from default `$options['options']` and ignore that field in `$options['first_options']` and/or `$options['second_options']`.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/07/02 00:00:04 -0700\n\n@fabpot ping.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/07/06 05:45:56 -0700\n\nLet's discuss this new feature for 2.1.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/08/24 01:12:59 -0700\n\nRebased with master.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/04 05:02:42 -0700\n\n@fabpot What do you think about this feature ? It is now time to discuss it :)\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/22 00:18:29 -0700\n\nTests do not pass.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/09/24 01:54:42 -0700\n\n@fabpot Should be ok now.",
            "[Form] added some missing tests for previous merge",
            "updated CHANGELOG for 2.1",
            "[Form] reverted partially previous commit",
            "Merge branch '2.0'\n\n* 2.0:\n  bumped Symfony version to 2.0.3-DEV\n  updated VERSION for 2.0.2\n  update CONTRIBUTORS for 2.0.2\n  updated CHANGELOG for 2.0.2\n  updated vendors for 2.0.2\n  merged branch helmer/target_path (PR #2228)",
            "fixed version and vendors",
            "merged 2.0",
            "[Form] added a method to help debugging forms (Form::getAllErrorsAsString())",
            "merged branch Agileshop/master (PR #2272)\n\nCommits\n-------\n\n9817772 add zh-CN translation\n416eaa9 add validator's zh_CN translation\n\nDiscussion\n----------\n\nadd zh-CN translation",
            "Merge branch 'form-errors'\n\n* form-errors:\n  [Form] added a method to help debugging forms (Form::getAllErrorsAsString())",
            "[Form] added tests for previous merge",
            "merged branch Seldaek/commands (PR #1470)\n\nCommits\n-------\n\nd675c28 [FrameworkBundle] Use Router instead of RouterInterface\nae7ae8d [FrameworkBundle] Moved router_listener from web to router.xml since it depends on the router\n35a9023 [FrameworkBundle] Added isEnabled to Router commands, fixes #1467\n536d979 [Console] Added Command::isEnabled method that defines whether to add the command or not\n\nDiscussion\n----------\n\n[2.1] [Console] Added Command::isEnabled method\n\nThis addresses #1467.\n\nThe idea is to allow commands to evaluate whether they can run or not, since they are automatically registered.\n\n- It's useful for the two router:* commands since they're optional (router can be disabled), but part of the FrameworkBundle that is not really optional.\n- It could be useful for third party code as well.\n- It's BC.\n- aa95bb0d395810b29a3e654673e130736d9d1080 should address the issue in #1467, while the other commits just make sure the command is not registered at all if the router isn't standard.\n\nOne issue remains though:\n\n- A few other services like twig helpers get the `r\u00f2uter` injected, this means that if there is really **no** router service defined, there is still an error. I'm not sure how to fix those beyond adding `on-invalid= null ` but I'm not sure if that's desirable. I guess we could argue that the router is a big candidate for replacement/suppression, and as such it should be truly optional, but if we do it I don't know where it'll lead. I don't want to end up in a situation where half the dependencies are optional to support every possible combination. @fabpot wdyt?\n\n---------------------------------------------------------------------------\n\nby kriswallsmith at 2011/06/28 16:19:46 -0700\n\nI'd rather see us not register a command instead of register and then disable it. Can we do the same thing you've done here in the bundle's registerCommands() method?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/06/28 16:51:36 -0700\n\nNote that it's never really registered. During the registration it's checked and skipped if not enabled.\n\nHowever, doing it as you suggest means overriding/copy-pasting all the code from the core Bundle class, which I don't like so much. It also means adding code specific to those two commands in a somewhat unrelated place, which I also don't like.\n\nI'm not saying the current solution is perfect, but from the alternatives I considered, it's the best I have found.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/04 04:58:04 -0700\n\n@Seldaek your branch conflicts with master. could you rebase it ?\n\n@fabpot what do you think about this PR ?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/09/04 08:39:05 -0700\n\nRebased",
            "merged branch drak/paramaterbag_filter (PR #2261)\n\nCommits\n-------\n\nc4a0f79 Updates according to suggestions.\n6aec789 Added tests.\n54454ba Added generic filtering to ParameterBag.\n\nDiscussion\n----------\n\nAdded generic filtering to ParameterBag.\n\nAdds filtering convenience using PHP's filter_var() e.g.\n\n    $request->get->filter($key, '', false, FITLER_SANITIZE_STRING);\n\nSee http://php.net/manual/en/filter.filters.php for capabilities.\n\n---------------------------------------------------------------------------\n\nby GromNaN at 2011/09/25 15:41:50 -0700\n\nWhat is the use case ?\n\n---------------------------------------------------------------------------\n\nby drak at 2011/09/25 15:52:19 -0700\n\nInput variable validation/sanitization.  ParameterBag has a few built in like `getAlnum()` for example.  This method offer's PHP's full filtering and sanitization suite.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/27 00:56:41 -0700\n\nCan you add some unit tests for this new feature?\n\n---------------------------------------------------------------------------\n\nby drak at 2011/09/27 00:58:56 -0700\n\nSure thing.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/09/27 01:07:03 -0700\n\nBefore I make the commit, is the method name ok for you or would you prefer it is called `getFiltered()`?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/27 01:13:46 -0700\n\n`filter` sounds good to me.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/09/27 02:37:01 -0700\n\nI've added some tests.\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/09/27 02:42:42 -0700\n\n@drak IMO you must check that user don't use unknown filter and/or flags for filter.\n\n---------------------------------------------------------------------------\n\nby drak at 2011/09/27 02:48:38 -0700\n\n@stloyd - I'm not sure that's practical at all, this is a wrapper for a built-in PHP function and I don't understand why we would need validate arguments for a PHP function - it's the coder's job to use the API correctly - none of the inputs to this function are coming from a web request.  It would also mean that the API would need to keep track of any upstream changes to constants in the PHP engine (which are just integers after all).  It's really just not practical.\n\n---------------------------------------------------------------------------\n\nby stealth35 at 2011/09/27 05:16:50 -0700\n\n@drak it's could be cool to use `filter_id` :v:\n\n    if (is_string) {\n        $filter = filter_id($filter);\n    }\n\n---------------------------------------------------------------------------\n\nby drak at 2011/09/27 07:05:42 -0700\n\n@stealth35 regarding this\n\n    if (is_string) {\n        $filter = filter_id($filter);\n    }\n\nI believe strongly in the use of IDEs when coding and autocomplete nicely provides when you type `FILTER_`.  Additionally, `filter_id()` only works on filters, but not for the flags, so I'm not entirely sure how useful it would be overall compared to using a good IDE (which you need when working with complex frameworks anyhow, imo :)\n\n---------------------------------------------------------------------------\n\nby drak at 2011/09/27 07:30:10 -0700\n\nOk check it now.",
            "updated CHANGELOG for 2.1",
            "merged branch aerialls/getuser (PR #1990)\n\nCommits\n-------\n\nf7bf7b5 fixed condition\n181332b added a Controller:getUser() shortcut to recover the current user\n\nDiscussion\n----------\n\n[2.1] added a Controller:getUser() shortcut to recover the current user",
            "[FrameworkBundle] tweaked some error messages",
            "updated CHANGELOG for 2.1",
            "[DomCrawler] added a way to get parsing errors for Crawler::addHtmlContent() and Crawler::addXmlContent() via libxml functions",
            "merged 2.0",
            "[Translator] fixed merge with 2.0",
            "merged branch CodeMeme/assets-install-relative-symlink (PR #1173)\n\nCommits\n-------\n\ndd20f01 Fixed assets:install to use a relative path instead of an absolute\n\nDiscussion\n----------\n\n[2.1] Fixed  assets:install  to create relative instead of absolute symlinks\n\nThis is a fairly simple fix so that the symlinks are relative to the resources rather than an absolute path that breaks from machine-to-machine or upon deployment.\n\nWe were trying to figure out why styles were messed up for other contributors, but then found that the paths were hard-coded for my machine :)\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/06/04 09:44:11 -0700\n\nAny other thoughts/updates on this?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/06/04 22:31:39 -0700\n\nWe have such a feature in symfony1 and IIRC it does not work very well. One problem is when you use symlink for some bundles. Then, you should not use a relative symlink as there is a common path between the two.\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/06/05 09:55:00 -0700\n\nSorry, I didn't think that we would be an issue since the Bundle  Best Practices  states to not include other bundles as dependencies.\n\nIf absolute links are a must, then the next alternative is for collaborators to add  /web/bundles  to .gitignore and each person run  assets:install  upon installation/update.\n\nI was personally hoping there were a way to have this versioned for easier deployment.\n\nOn Jun 5, 2011, at 12:31 AM, fabpot<reply@reply.github.com> wrote:\n\n> We have such a feature in symfony1 and IIRC it does not work very well. One problem is when you use symlink for some bundles. Then, you should not use a relative symlink as there is a common path between the two.\n>\n> --\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/1173#issuecomment-1303600\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2011/06/27 04:56:58 -0700\n\n``` php\n<?php\n// ...\n->addOption('relative', null, InputOption::VALUE_NONE, 'The --symlink option will generate relative paths')\n// ...\n```\n\nand just default to absolute paths ?\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/06/27 08:37:50 -0700\n\nI'm very supportive of that compromise.  Up to @fabpot if I should add this back in, since relative paths were apparently problematic with symfony1.\n\n---------------------------------------------------------------------------\n\nby sbusch at 2011/07/15 08:46:01 -0700\n\n+1\n\nI'm developing on Mac and the files are mounted on a Linux box which serves the project. The paths are not the same on those two systems. If I accidentally install assets on my Mac the absolute paths won't work on the Linux webserver.\n\nOther scenario: one teammate could add those symlinks by accident to the git repository, which breaks all other installations.\n\nRelative symlinks could help a lot in these cases.\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/07/15 08:47:53 -0700\n\n@sbusch Your issues are the same as mine, which prompted this ticket :)\n\nUntil this gets @fabpot's blessing, it's best to simply add `web/bundles` to your `.gitignore` file and tell your users to always run `assets:install --symlink` each time they pull down code & something breaks ;)\n\n---------------------------------------------------------------------------\n\nby sbusch at 2011/07/15 08:58:33 -0700\n\nThe handling (calculation) of relative symlinks IMO fits better to the `symlink()` method of `\\Symfony\\Component\\HttpKernel\\Util\\Filesystem`. Possible method signature:\n\nsymfony/src/Symfony/Component/HttpKernel/Util/Filesystem.php:\n\n```php\n<?php\n// ...\n\n    /**\n     * Creates a symbolic link or copy a directory.\n     *\n     * @param string  $originDir     The origin directory path\n     * @param string  $targetDir     The symbolic link name\n     * @param Boolean $copyOnWindows Whether to copy files if on Windows\n     * @param Boolean $makeRelative  Whether to try to create a relative link\n     */\n    public function symlink($originDir, $targetDir, $copyOnWindows = false, $makeRelative = false)\n    {\n```\n\nAnd what about changing the `--symlink` option to optionally have a value, instead of adding a new depending option? E.g. `--symlink[=absolute|relative]`, with  absolute  as default:\n\nsymfony/src/Symfony/Bundle/FrameworkBundle/Command/AssetsInstallCommand.php:\n\n```php\n<?php\n// ...\n\nclass AssetsInstallCommand extends ContainerAwareCommand\n{\n    /**\n     * @see Command\n     */\n    protected function configure()\n    {\n        $this\n            ->setDefinition(array(\n                new InputArgument('target', InputArgument::REQUIRED, 'The target directory (usually  web )'),\n            ))\n            ->addOption('symlink', null, InputOption::VALUE_OPTIONAL, 'Symlinks the assets instead of copying it. Allowed values:  absolute  (default) and  relative .', 'absolute')\n            ->setHelp(<<<EOT\nThe <info>assets:install</info> command installs bundle assets into a given\ndirectory (e.g. the web directory).\n\n<info>./app/console assets:install web [--symlink]</info>\n\nA  bundles  directory will be created inside the target directory, and the\n Resources/public  directory of each bundle will be copied into it.\n\nTo create a symlink to each bundle instead of copying its assets, use the\n<info>--symlink</info> option. Use <info>--symlink=relative</info> for relative symlinks.\nEOT\n            )\n            ->setName('assets:install')\n        ;\n    }\n\n    /**\n     * @see Command\n     *\n     * @throws \\InvalidArgumentException When the target directory does not exist\n     */\n    protected function execute(InputInterface $input, OutputInterface $output)\n    {\n        if (!is_dir($input->getArgument('target'))) {\n            throw new \\InvalidArgumentException(sprintf('The target directory  %s  does not exist.', $input->getArgument('target')));\n        }\n\n        if ($input->hasOption('symlink'))\n        {\n            if (!function_exists('symlink')) {\n                throw new \\InvalidArgumentException('The symlink() function is not available on your system. You need to install the assets without the --symlink option.');\n            }\n            if (!in_array($input->getOption('symlink'), array('absolute', 'relative'))) {\n                throw new \\InvalidArgumentException(sprintf('Invalid value  %s  for option  symlink ', $input->getOption('symlink')));\n            }\n        }\n\n        $filesystem = $this->getContainer()->get('filesystem');\n\n        // Create the bundles directory otherwise symlink will fail.\n        $filesystem->mkdir($input->getArgument('target').'/bundles/', 0777);\n        foreach ($this->getContainer()->get('kernel')->getBundles() as $bundle) {\n            $originDir = $bundle->getPath().'/Resources/public';\n            if (is_dir($originDir)) {\n                $targetDir = $input->getArgument('target').'/bundles/'.preg_replace('/bundle$/', '', strtolower($bundle->getName()));\n                $output->writeln(sprintf('Installing assets for <comment>%s</comment> into <comment>%s</comment>', $bundle->getNamespace(), $targetDir));\n\n                $filesystem->remove($targetDir);\n\n                if ($input->hasOption('symlink')) {\n                    $filesystem->symlink($originDir, $targetDir, false, $input->getOption('symlink') == 'relative');\n                } else {\n                    $filesystem->mkdir($targetDir, 0777);\n                    $filesystem->mirror($originDir, $targetDir);\n                }\n            }\n        }\n    }\n```\n\n---------------------------------------------------------------------------\n\nby sbusch at 2011/07/15 09:04:46 -0700\n\n@ericclemmons: yes, that's our current workaround. I started with manually converting absolute links to relative ones, but that quickly got very annoying ;-)\n\nAfter that I tried to implement the generation of relative links by myself (where the proposals of my previous comment come from) until I found your PR.\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2011/07/18 00:20:38 -0700\n\n@sbush if it defaults to something how would you turn it off ?\n\n---------------------------------------------------------------------------\n\nby stof at 2011/07/18 00:26:16 -0700\n\n@henrikbjorn a default value for the option is used when using ``--symlink`` without the value. If you don't use the option at all, it is disabled.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/07/18 11:58:29 -0700\n\nIn fact no. The default value seems to be also used when the option is not set at all. @fabpot is this intended ?\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/07/19 05:18:29 -0700\n\nSymlinks on windows, although technically possible, don't quite work with PHP on most setups. Also git doesn't seem to support them either on windows (not sure why not). For those reasons, and although I'm sure this doesn't apply to every project, I would recommend you just have everyone run `assets:install [--symlink]` on their local machine, and make that command run on the server as part of your deployment process.\n\n---------------------------------------------------------------------------\n\nby ericclemmons at 2011/07/19 06:15:34 -0700\n\nNobody is even entertaining --relative?\n\nOn Jul 19, 2011, at 7:18 AM, Seldaek<reply@reply.github.com> wrote:\n\n> Symlinks on windows, although technically possible, don't quite work with PHP on most setups. Also git doesn't seem to support them either on windows (not sure why not). For those reasons, and although I'm sure this doesn't apply to every project, I would recommend you just have everyone run `assets:install [--symlink]` on their local machine, and make that command run on the server as part of your deployment process.\n>\n> --\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/1173#issuecomment-1606463\n\n---------------------------------------------------------------------------\n\nby Gregwar at 2011/08/10 08:56:27 -0700\n\nI agree with the idea of proposing a --relative option, I'm currently working on a Samba mounted filesystem and I'm forced to create manually symlinks to get things working since the paths are not the same",
            "moved makePathRelative to Filesystem",
            "[FrameworkBundle] added a --relative option to assets:install",
            "updated CHANGELOG for 2.1",
            "merged branch jalliot/subscriber-improv (PR #2148)\n\nCommits\n-------\n\n5146a1f [EventDispatcher] Added possibility for subscribers to subscribe several times for same event\n\nDiscussion\n----------\n\n[EventDispatcher] Added possibility for subscribers to subscribe several times for same event\n\n[EventDispatcher] Added possibility for subscribers to subscribe several times for same event\n\ncloses #2146\n\nAnd it is of course fully BC :)\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/09 17:34:07 -0700\n\nIf merged, #2021 will have to reflect the change too",
            "Merge branch '2.0'\n\n* 2.0:\n  fixed usage of LIBXML_COMPACT as it is not always available\n  Fixed the phpdoc",
            "[Translation] fixed usage of LIBXML_COMPACT as it is not always available",
            "merged branch lenar/input-isatty (PR #1699)\n\nCommits\n-------\n\nfd00ed0 [Console] Check if dialog helper actually exists\n0f7bf41 [Console] Detect if interactive mode is possible at all\n\nDiscussion\n----------\n\n[Console] Detect if interactive mode is possible at all\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/07/19 22:52:14 -0700\n\nYou can use the dialog helper without a tty (think unit tests). see https://github.com/sensio/SensioGeneratorBundle/blob/master/Tests/Command/GenerateDoctrineCrudCommandTest.php#L24\n\n---------------------------------------------------------------------------\n\nby lenar at 2011/07/25 06:18:48 -0700\n\n@fabpot: this change doesn't prevent those tests from running (and successfully so). Please reconsider including.\n\n---------------------------------------------------------------------------\n\nby lenar at 2011/07/27 01:30:20 -0700\n\nRebased.",
            "merged branch hason/shell (PR #1484)\n\nCommits\n-------\n\n060d75d [Console] fixed CS and simplified code\na5ff635 [Console] added support for interactive shell without readline extension\n\nDiscussion\n----------\n\n[2.1] [Console] added support for interactive shell without readline extension\n\n---------------------------------------------------------------------------\n\nby lmcd at 2011/06/30 15:12:56 -0700\n\nVery useful! Pre-installed PHP on OS X ships without readline.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/06/30 15:24:47 -0700\n\n@lmcd You can already use the console, just not the shell.\n\n---------------------------------------------------------------------------\n\nby lmcd at 2011/06/30 15:27:00 -0700\n\n@stof Yep I know, but it would be nice to use the shell :)\n\n---------------------------------------------------------------------------\n\nby hason at 2011/07/01 01:54:34 -0700\n\n@stof Interactive generators will not work on Windows and Mac OS X without these simple changes. I think this is bad news.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/07/01 01:58:59 -0700\n\nYup, it's definitely a good addition.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/07/01 01:59:26 -0700\n\n@fabpot: I'm not sure why this is tagged 2.1, but IMO this should go in now.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/07/01 01:59:44 -0700\n\n@hason This is not true. The shell is only used when running the console with the ``-s`` option. A command can be interactive without using the shell (I'm on Windows)\n\n---------------------------------------------------------------------------\n\nby lmcd at 2011/07/01 02:08:17 -0700\n\n@stof Yea true, the interactive generators are fine without readline, however I don't think this dependancy should prevent people using the shell on Win/Mac.\n\n---------------------------------------------------------------------------\n\nby hason at 2011/07/01 02:28:10 -0700\n\n@stof This is good news :) I was hasty.\n\n---------------------------------------------------------------------------\n\nby lmcd at 2011/07/04 02:03:36 -0700\n\nI'm feeling inclined to remove readline entirely for 2.1 and roll our own solution to support things like this in the shell: http://lmcd.me/v/sf-autocomplete-2.mov\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/04 04:55:37 -0700\n\nwhat is the status of this PR ?",
            "[Console] tweaked previous merge",
            "updated CHANGELOG for 2.1",
            "[Validator] added a SizeLength validator",
            "added a Size validator",
            "[Validator] added support for grapheme_strlen when mbstring is not installed but intl is installed",
            "Merge branch '2.0'\n\n* 2.0:\n  [Validator] added support for grapheme_strlen when mbstring is not installed but intl is installed\n  removed separator of choice widget when the separator is null",
            "Merge branch '2.0'\n\n* 2.0:\n  [composer] add missing deps for FrameworkBundle\n  [composer] change ext/intl to the new ext-intl syntax\n  [composer] fix monolog-bridge composer.json, add more inter-component deps\n  [composer] add composer.json",
            "updated composer.json for 2.1",
            "updated composer.json for 2.1",
            "merged branch jalliot/event-subscriber (PR #2021)\n\nCommits\n-------\n\n3223c5a Removed now useless test\n21cf0ac Backported new behaviour from PR #2148 and removed check for interface at run-time\n8b240d4 Implementation of kernel.event_subscriber tag for services.\n\nDiscussion\n----------\n\nAdded missing kernel.event_subscriber tag (closes #2012)\n\nThis PR adds a ``kernel.event_subscriber`` tag which allows to register services as event subscribers in the same way ``kernel.event_listener`` allows to register them as event listeners.\nThe service is still lazy loaded and the DIC does not need to be recompiled for every modification in the service's code.\n\nThere is one important thing to remember:\nIf the service is created by a factory, the class parameter **MUST** reflect the real class of the service, although it is not needed at the moment for the DIC. For that issue, we could either forbid services created by factories or add a note to the documentation.\n\nThis PR closes #2012.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/08/24 06:42:18 -0700\n\nI'm not sure the test is good enough so feel free to add some more.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/08/25 03:46:20 -0700\n\nI re-implemented the check for EventSubscriberInterface in ContainerAwareEventDispatcher because I think the overhead is minimum and it allows to use this method even without the tag (at run-time).\nI also added some tests for RegisterKernelListenersPass.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/04 02:42:00 -0700\n\n@jalliot Your branch conflicts with the current master. could you rebase it ?\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/04 02:57:03 -0700\n\nRebased\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/13 02:19:46 -0700\n\n@fabpot What do you think about this PR? At the moment, the subscribers are not really usable in Symfony2 because of the lack of this tag.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/13 04:17:46 -0700\n\nI don't like subscribers. There are other PRs on adding more support for them, but the reality is that they are complex for no added benefit. I'm wondering if it wouldn't be better to just remove them altogether.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/13 04:38:20 -0700\n\n@fabpot Well I prefer listeners too but I think that if Symfony2 does support subscribers (which it does at the moment), it should do it properly and completely, thus allowing to register subscriber services like here or to register several methods for one same event like in #2148.\nBut I guess that if you merged those 2 PRs (well actually this one would have to be modified first if #2148 is merged but I'll do it then), many use cases would be covered and people should stop asking for more support :) (except maybe for removing the static modifier but this would be wrong IMO and prevent entirely this PR).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/28 11:47:10 -0700\n\n@jalliot: #2148 has been merged. Can you update this PR accordingly? thanks.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/28 12:00:44 -0700\n\nSure thing. Will do it as well as removing the check for the interface tonight or tomorrow :)\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/29 08:53:17 -0700\n\n@fabpot Check for interface removed and #2148 merged. Also rebased on latest master.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/29 09:09:11 -0700\n\nTests do not pass.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/29 09:18:48 -0700\n\n@fabpot Fixed",
            "updated CHANGELOG for 2.1",
            "added RouterInterface::getRouteCollection()",
            "merged branch jalliot/trans-fr (PR #2305)\n\nCommits\n-------\n\nf9b2be9 Added french translation for SizeLength and UserPassword constraints\n\nDiscussion\n----------\n\nAdded french translation for SizeLength and UserPassword constraints\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/30 13:45:46 -0700\n\n47 is already taken for  This value should be the user current password . Should be 48.\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/30 13:59:01 -0700\n\n@fabpot Fixed and added translation for 47 as well.",
            "merged branch jalliot/missing-guessers (PR #2306)\n\nCommits\n-------\n\nee0fe7a Added guessers for Size and SizeLength constraints\n\nDiscussion\n----------\n\nAdded guessers for Size and SizeLength constraints\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\n---------------------------------------------------------------------------\n\nby jalliot at 2011/09/30 13:40:37 -0700\n\nBTW, I've noticed that some constraints currently don't have guessers in 2.0:\n\n* ``False`` (which could be guessed as a checkbox)\n* ``True`` (which could be guessed as a required checkbox)\n* ``Choice`` (which could be guessed as a choice type with medium confidence and with the choice list being guessed as the list provided for the constraint)\n\nAre there any reasons why this is not implemented in 2.0 or should I try to make a PR for it?\n\nThere is also the ``Collection`` case but I guess it would be too difficult for this one...",
            "merged branch aboks/translations_nl (PR #2307)\n\nCommits\n-------\n\n0299d38 [FrameworkBundle] Updated Dutch validator translations\n\nDiscussion\n----------\n\n[FrameworkBundle] Updated Dutch validator translations\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -",
            "[Security] changed a RuntimeException to LogicException for consistencies between the different Token classes (closes #2310)",
            "merged branch excelwebzone/hebrew_translations (PR #2314)\n\nCommits\n-------\n\neac2a77  Oops.. translated the variable by mistake\n51b3b59  Updated Hebrew validator translations (trans-unit id= 48 )\n\nDiscussion\n----------\n\nUpdated Hebrew validator translations (trans-unit id= 48 )",
            "merged 2.0",
            "[Translation] changed some unit tests for PHPUnit 3.6.0 compatibility",
            "merged branch alifity/id-trans-unit-47-48 (PR #2316)\n\nCommits\n-------\n\n8404b35 Updated indonesian translations for trans-unit 47 and 48\n\nDiscussion\n----------\n\nUpdated indonesian translations for trans-unit 47 and 48",
            "merged branch SongoQ/polish_translations (PR #2315)\n\nCommits\n-------\n\n31840b9 Updated Polish validator translations (trans-unit id= 47  and id= 48 )\n\nDiscussion\n----------\n\nUpdated Polish validator translations (trans-unit id= 47  and id= 48 )",
            "merged 2.0",
            "merged branch yethee/ru_translations (PR #2318)\n\nCommits\n-------\n\n9219cf9 [FrameworkBundle] Sync the Russian translations with the SizeLength constraint\n\nDiscussion\n----------\n\n[FrameworkBundle] Sync the Russian translations with the SizeLength const",
            "merged branch SongoQ/polish_translations (PR #2319)\n\nCommits\n-------\n\n4909169 Typo, should be  znak\u00f3w \n\nDiscussion\n----------\n\n[FrameworkBundle] Polish validator translations - Typo, should be  znak\u00f3w ",
            "[FrameworkBundle] moved a parameter in the same file as the one where the service is defined for better consistency",
            "Merge branch '2.0'\n\n* 2.0:\n  [DoctrineBundle] fixed a unit test (detected thanks to PHP 3.6.0)\n  [Form] Fixed lacking attributes in DateTimeType",
            "merged branch helmer/return_void (PR #2337)\n\nCommits\n-------\n\nc4226bb Removed redundant  @return void -s\n\nDiscussion\n----------\n\nRemoved redundant  @return void -s\n\n.. as mandated by [symfony-docs](https://github.com/symfony/symfony-docs) [PR#754](https://github.com/symfony/symfony-docs/pull/754)",
            "merged branch Seldaek/trans_charset (PR #2339)\n\nCommits\n-------\n\n5473d3b [Translation] Allow use of UTF-8 encoded catalogues into non-UTF-8 applications\ndeb6dea [Translation] Add failing tests to verify that UTF-8 lang files can't be used with another charset\n\nDiscussion\n----------\n\nAllow use of UTF-8 catalogues in non-UTF-8 applications\n\nThis is #2313 but targetting the master branch.\n\nBug fix: yes\nFeature addition: ?:)\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nThe problem I'm having is that, while porting an existing app, we are using UTF-8 everywhere to have a migration path ready, but the current application and DB is still in ISO-8859-1, which means translations containing accented chars are broken.\n\nAlso, we didn't hit the issue yet since we don't use forms much, but I imagine we would have similar issues with core translations for the validator which are all UTF-8 encoded.\n\nNote that I explicitly suppressed this conversion in case your application is setup as UTF-8, to make sure most people are not affected by any slow down this introduces.",
            "merged branch schmittjoh/dbalSessionStorage (PR #2182)\n\nCommits\n-------\n\n3f8e8c9 fixes a session max lifetime handling\n3abb7f3 fixed some conflicts with garbage collection\na1888b2 added a dbal session storage\n\nDiscussion\n----------\n\nDbal session storage\n\nAdds a session storage based on Doctrine DBAL.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/14 13:39:28 -0700\n\nguess it would be nice to then provide a service inside the DoctrineBundle that reuses a global DoctrineDBAL connection, guess the connection to use would then need to be configured via the doctrine app config.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/09/14 13:42:34 -0700\n\nI haven't found a sane way to provide automatic configuration that's why I left this to the user to implement. It's also relatively easy:\n\n```yml\nservices:\n    dbal_session_storage:\n        class: Symfony\\Bridge\\Doctrine\\HttpFoundation\\DbalSessionStorage\n        arguments: [@database_connection]\n\nframework:\n    session: { storage_id: dbal_session_storage }\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/14 13:57:48 -0700\n\n@lsmith77 There is an issue about reusing another DBAL connection: if the transaction is aborted by the ORM, the session could be aborted too as you cannot have 2 independent transactions AFAIK\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/14 13:59:57 -0700\n\nnot sure how this is relevant. i mean why does the transaction need to be left open? just begin, write, commit ..\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/14 14:02:39 -0700\n\nand what if the transaction of the ORM is still opened (let's say you use SimpleThingsTransactionalBundle) ?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/14 14:06:12 -0700\n\nwell thats a bit of an edge case imho. also i wonder if SimpleThingsTransactionalBundle shouldn't make sure that its transaction is closed before the session is written.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/09/14 14:06:56 -0700\n\nIt closes them.\n\nOn Wed, Sep 14, 2011 at 11:06 PM, Lukas Kahwe Smith <\nreply@reply.github.com>wrote:\n\n> well thats a bit of an edge case imho. also i wonder if\n> SimpleThingsTransactionalBundle shouldn't make sure that its transaction is\n> closed before the session is written.\n>\n> --\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2182#issuecomment-2098100\n>\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/14 14:15:02 -0700\n\n@schmittjoh Does it close them **before** writing the session ?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/09/14 14:44:15 -0700\n\nI think either commit, or rollback is called, but @beberlei can probably answer that better.\n\nAnyway, it is not really related to this PR because it is up to the user which connection is used.\n\n---------------------------------------------------------------------------\n\nby stof at 2011/09/14 14:58:48 -0700\n\nI know that one of them is called. But if they are called after the session is persisted to the DB, a rollback is an issue as it will rollback the session persistence as well.\nThe PR is indeed fine. What need to be changed is the doc about how to use it, to advocate using a separate connection instead of the default one (which is used in your example)\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/09/15 02:57:34 -0700\n\nThere is no doc yet, but lets see what @fabpot thinks of all of this first.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/15 04:57:57 -0700\n\nAny benefits over using the PDO session storage?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/15 05:00:50 -0700\n\ncleaner code, potentially better support for niche RDBMS, centralized logging and finally afaik DoctrineDBAL has emulation for nested transactions.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/09/15 05:11:00 -0700\n\nThe benefits (for me) are:\n\n- logging queries\n- better interoperability with existing build processes (migrations)\n- better database interoperability\n- re-using existing connection (I don't have the problem that Stof mentioned above)\n\n---------------------------------------------------------------------------\n\nby beberlei at 2011/09/15 06:18:22 -0700\n\nThe nested transactions is the problem here as @stof already said. If you reuse the default connection and use nested transactions that fail then this will make your session not save. That is why the docs should recommend you create a second connection for a dbal based session storage, even if it is using the same database. The PDO session storage would be a second connection besides DBAL aswell.\n\nI like the migrations/schema hook though to create the table automatically through schema commands.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2011/09/15 10:45:31 -0700\n\nok, looks good to me. Can you add some documentation about its usage (like the possible keys for options)? Is it possible to add some tests too?\n\n---------------------------------------------------------------------------\n\nby jdreesen at 2011/09/22 06:34:11 -0700\n\nwhy did you close this?\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/09/30 06:26:12 -0700\n\nI can't put more time into this PR, however I'm using it for some time already, and there shouldn't be any major issues as it is basically copy/paste from the PDO session.",
            "updated CHANGELOG for 2.1",
            "fixed CS",
            "[TwigBundle] made table_layout.html.twig useable as a trait",
            "Merge remote branch 'brikou/check_cs'\n\n* brikou/check_cs:\n  fixed root search path to include only './src' and './tests'\n  fixed 'base search dir' + fixed 'blank line inserted' when line before ends with colon",
            "Merge remote branch 'stof/security_login'\n\n* stof/security_login:\n  Added the support of the locale in the login path and the check path",
            "[DoctrineBridge] fixed field guesser",
            "[Templating] fixed cache loader as the logical name can contain characters not valid on some OSes",
            "Merge remote branch 'vicb/form-collection-rendering'\n\n* vicb/form-collection-rendering:\n  [Form] Fix collection rendering",
            "Merge remote branch 'DerekRoth/patch-1'\n\n* DerekRoth/patch-1:\n  A constructor returning null is counter-intuitive. BTW, isn't this a intl bug ?",
            "[DoctrineBundle] fixed typo",
            "[Config] added a guard against circular references",
            "Merge remote branch 'schmittjoh/security'\n\n* schmittjoh/security:\n  [SecurityBundle] fixed a regression\n  [SecurityBundle] re-use local variable\n  [SecurityBundle] added validation for check paths\n  [SecurityBundle] added user_providers option for remember_me\n  [Security/Core] added missing method to interface",
            "merged stloyd/form_label",
            "Merge remote branch 'fivestar/controller-signature'\n\n* fivestar/controller-signature:\n  [FrameworkBundle] Fixed phpdoc.\n  [FrameworkBundle] Fixed signature of the Controller::createForm() to accept string type",
            "[FrameworkBundle] renamed getProfiler to getProfile (as the method now returns a Profile instance)",
            "[DoctrineBundle] fixed doctrine:generate:entity",
            "[HttpKernel] added Filesystem::isAbsolutePath()",
            "added missing license headers",
            "Merge remote branch 'weaverryan/controller_form_methods'\n\n* weaverryan/controller_form_methods:\n  [FrameworkBundle] Adding two form-related methods to the base controller",
            "Merge remote branch 'vicb/form-misc-fix-2'\n\n* vicb/form-misc-fix-2:\n  [Form] fix calling closures\n  [Form] Add a missing property delcaration in the ResizeFormListener",
            "Merge remote branch 'kriswallsmith/assetic/dump-fixes'\n\n* kriswallsmith/assetic/dump-fixes:\n  [AsseticBundle] fixed command unit test\n  [AsseticBundle] added env and debug mode to assetic:dump output\n  [AsseticBundle] made --watch sleep period a command option\n  [AsseticBundle] added a --force option to assetic:dump --watch\n  [AsseticBundle] fixed typo in dump --watch",
            "fixed form_rest() for embedded forms (refs #1051, #1115)",
            "[HttpFoundation] added some phpdoc",
            "Merge remote branch 'CodeMeme/1058-fix-radio-input-listener'\n\n* CodeMeme/1058-fix-radio-input-listener:\n  Fix for RadioInputListener's empty value erroneously becoming extra data Refs #1058\n  Added test for RadioInputListener bug treating no data as extra data",
            "fixed a unit test and CS",
            "Merge remote branch 'beberlei/YamlRoutingLoader'\n\n* beberlei/YamlRoutingLoader:\n  [Routing] Remove exception condition in YamlFileLoader::load() as its duplicating a check that is done in parseRoute() anyways. This changes allows to extend the YamlFileLoader without having to duplicate the whole method.",
            "Merge remote branch 'kriswallsmith/http/session-fixes'\n\n* kriswallsmith/http/session-fixes:\n  [HttpFoundation] updated session to only save on destruct if started\n  [HttpFoundation] fixed locale accessor after session clear\n  [HttpFoundation] removed unnecessary method",
            "Merge remote branch 'kertz/PdoSessionStorage_mysql'\n\n* kertz/PdoSessionStorage_mysql:\n  [PdoSessionStorage] Added insert... on duplicate",
            "updated vendors, fixed typo",
            "merged kriswallsmith/form/csrf-intention",
            "added exceptions when APC is not enabled",
            "Merge remote branch 'kriswallsmith/assetic/asset-config'\n\n* kriswallsmith/assetic/asset-config:\n  Revert  [AsseticBundle] updated configuration to assume values with integer keys are inputs \n  [AsseticBundle] updated configuration to assume values with integer keys are inputs\n  [AsseticBundle] made test of route loader less brittle\n  [AsseticBundle] added the ability to define assets outside of the view layer\n  [AsseticBundle] injected container into factory for better stability",
            "[HttpFoundation] added HeaderBag::__toString()",
            "[HttpFoundation] added Request::__toString()",
            "Merge remote branch 'stloyd/patch-2'\n\n* stloyd/patch-2:\n  Throw an exception when APC is not loaded but cache is enabled in app config",
            "Merge remote branch 'Chekote/firefox_put_fix'\n\n* Chekote/firefox_put_fix:\n  Fixed content type for urlencoded forms being too specific. For example, this will now function will clients (such as Firefox) that append the charset to the content type header. Uses 0 === strpos() as per @kriswallsmith suggestion.",
            "[HttpKernel] fixed previous commit",
            "[HttpKernel] changed ExceptionHandler to be more like ErrorHandler",
            "Merge remote branch 'jmikola/patch-1'\n\n* jmikola/patch-1:\n  [Form] Refer to FormView explicitly in its own getParent() type-hint",
            "[DependencyInjection] tweaked error messages",
            "[DoctrineBundle] fixed doctrine:generate:entity command when the entity to generate has sub-namespaces",
            "Merge remote branch 'vicb/form-doc-method-order'\n\n* vicb/form-doc-method-order:\n  [Form] Order method according to their visibility to respect the CS\n  [Form] Add phpDoc for form builder and fix method declaration order to conform to the CS",
            "Merge remote branch 'lenar/exception-logging'\n\n* lenar/exception-logging:\n  More information about exception when logging",
            "[FrameworkBundle] added a note",
            "[HttpKernel] tweaked the default ESI cache strategy",
            "[Form] tweaked code (closes #855)",
            "Merge remote branch 'pborreli/unit-test-coverage'\n\n* pborreli/unit-test-coverage:\n  [Validator] Added unit tests\n  [Locale] Silenting error to test return value\n  [Locale] Added symfony 1 test cases\n  [EventDispatcher] Full coverage\n  [DomCrawler] Full coverage\n  [Translation] Full coverage",
            "added support for PUT method",
            "Merge remote branch 'Seldaek/session_storage'\n\n* Seldaek/session_storage:\n  [FrameworkBundle] Do not override the session storage for test",
            "Merge remote branch 'udat/translator-typo'\n\n* udat/translator-typo:\n  [FrameworkBundle] Fixed typo",
            "Merge remote branch 'stof/firephp'\n\n* stof/firephp:\n  [MonologBundle] Fixed CS\n  [MonologBundle] Fixed the handling of subrequests in FirePHPHandler",
            "Merge remote branch 'hidenorigoto/translate-UPDATE-file-beta2'\n\n* hidenorigoto/translate-UPDATE-file-beta2:\n  updated translation of UPDATE file (beta2)",
            "Merge remote branch 'ptheg/master'\n\n* ptheg/master:\n  Search engines should not indexing Profiler",
            "[HttpKernel] refactored the ErrorHandler class",
            "moved ErrorHandler management to the distributions",
            "[HttpKernel] fixed typo",
            "[FrameworkBundle] made some small tweaks",
            "[FrameworkBundle] simplified code",
            "[MonologBundle] fixed previous commit",
            "[DoctrineBundle] made the ORM configuration service private (there are accessible via the entity manager anyway)",
            "[DoctrineBundle] added a way to  reload  an entity manager\n\nReloading entity managers is useful when doing transactions with Doctrine2.\nWhen you catch a Doctrine exception, you must close the entity manager. A\nclosed entity manager cannot be used anymore; so you need to get a fresh one.\n\nIn the 'catch' block, call 'reload()' method instead of 'close()' to get a new\nentity manager:\n\n    $em->getConnection()->beginTransaction(); // suspend auto-commit\n    try {\n        //... do some work\n    } catch (Exception $e) {\n        $em->getConnection()->rollback();\n\n        // call reload() instead of close()\n        $em = $em->reload();\n    }",
            "[DoctrineBundle] introduced a Registry class\n\nThe Registry knows all connections and entity managers declared into a service\ncontainer. The Registry is available via the 'doctrine' service.\n\nIf can be used to get connections and entity managers by name:\n\nBefore:\n\n$em = $this->get('doctrine.orm.entity_manager');\n$em = $this->get('doctrine.orm.foobar_entity_manager');\n\nAfter:\n\n$em = $this->get('doctrine')->getEntityManager();\n$em = $this->get('doctrine')->getEntityManager('foobar');\n\nIt is better for several reasons:\n\n * we rely less on naming conventions\n * IDEs will be able to auto-complete methods",
            "[DoctrineBundle] changed the Registry to return a new instance if the current em is closed\n\n    $em = $this->get('doctrine')->getEntityManager();\n\n    $em->getConnection()->beginTransaction(); // suspend auto-commit\n    try {\n        //... do some work\n    } catch (Exception $e) {\n        $em->getConnection()->rollback();\n        $em->close();\n\n        // get a new EM\n        $em = $this->get('doctrine')->getEntityManager();\n    }",
            "[DoctrineBundle] removed redundant check",
            "changed Application to have nice error messages when something bad happens early on the CLI",
            "Merge remote branch 'schniper/patch-1'\n\n* schniper/patch-1:\n  Fix Compass class path",
            "Merge remote branch 'kriswallsmith/my-email-address'\n\n* kriswallsmith/my-email-address:\n  updated my email address",
            "updated UPDATE file",
            "[DoctrineBundle] renamed doctrine.registry to doctrine\n\nThe best practice is now to get things from the registry:\n\nBefore:\n\n$em = $this->get('doctrine.orm.entity_manager');\n$em = $this->get('doctrine.orm.foobar_entity_manager');\n\nAfter:\n\n$em = $this->get('doctrine')->getEntityManager();\n$em = $this->get('doctrine')->getEntityManager('foobar');\n\nSeveral benefits:\n\n * we rely less on naming conventions\n * IDEs will be able to auto-complete methods",
            "[DoctrineBundle] introduced a Registry class\n\nThe Registry knows all connections and entity managers declared into a service\ncontainer. The Registry is available via the 'doctrine.registry' service.\n\nIf can be used to get connections and entity managers by name (instead of\nusing DIC parameters -- more information in the UPDATE file), and to 'reload'\nclosed entity managers.\n\nReloading entity managers is useful when doing transactions with Doctrine2.\nWhen you catch a Doctrine exception, you must close the entity manager. A\nclosed entity manager cannot be used anymore; so you need to get a fresh one.\n\nIn the 'catch' block, call 'reload()' method instead of 'close()' to get a new\nentity manager:\n\n    $em->getConnection()->beginTransaction(); // suspend auto-commit\n    try {\n        //... do some work\n    } catch (Exception $e) {\n        $em->getConnection()->rollback();\n\n        // call reload() instead of close()\n        $em = $em->reload();\n    }",
            "[DoctrineBundle] added some phpdoc",
            "[DoctrineBundle] removed unneeded parameter definition",
            "removed the doctrine.orm.class_metadata_factory_name parameter",
            "Merge remote branch 'Infranology/icu-update'\n\n* Infranology/icu-update:\n  [Locale] updated ICU data, changes to note:",
            "updated Assetic vendor",
            "Merge remote branch 'opensky/form-interface-use-statements'\n\n* opensky/form-interface-use-statements:\n  [Form] Remove unnecessary use statements in EventListeners",
            "Merge remote branch 'sasezaki/fixed-typo-domcrawler'\n\n* sasezaki/fixed-typo-domcrawler:\n  fixed typoe on Exception message",
            "Merge remote branch 'kriswallsmith/update-tweak'\n\n* kriswallsmith/update-tweak:\n  added note about document_root removal",
            "[DoctrineBundle] simplified code",
            "Merge remote branch 'Brouznouf/patch-1'\n\n* Brouznouf/patch-1:\n  [Serializer] Fix bug when denormalize a class in cache",
            "[FrameworkBundle] fixed typo",
            "Merge remote branch 'kriswallsmith/process/default-executable'\n\n* kriswallsmith/process/default-executable:\n  [Process] added optional argument for default executable",
            "[DoctrineBundle] removed doctrine.dbal.types parameter",
            "Merge remote branch 'mweimerskirch/validators_translations'\n\n* mweimerskirch/validators_translations:\n  [FrameworkBundle] Validator messages: added German translation\n  [FrameworkBundle] Validator messages: added Luxembourgish translation",
            "Merge remote branch 'udat/110425-fixes'\n\n* udat/110425-fixes:\n  [Bridge][Twig] removed unused argument passed to setRendered() method\n  [Translation] removed unnecessary default parameter value\n  [Templating] removed unused argument passed to setRendered() method\n  [HttpKernel] removed unused argument passed to ClosureLoader constructor\n  [BrowserKit] fixed typo\n  [Routing] removed redundant parameter in addRoute method",
            "[TwigBundle] removed obsolete code",
            "[Form] fixed unit tests",
            "[DoctrineBundle] renamed DIC class parameters (they end with .class instead of _class to follow the convention of other bundles)",
            "[DependencyInjection] added NonExistentParameterException that indicates where a non-existent parameter is being used",
            "Merge remote branch 'xmontana/master'\n\n* xmontana/master:\n  Validator messages: added Catalan translation",
            "Merge remote branch 'pborreli/phpdoc-fix'\n\n* pborreli/phpdoc-fix:\n  [Phpdoc] Cleaning/fixing\n  [FrameworkBundle] Fixed typo in css",
            "[FrameworkBundle] removed the router.options.resource_type and routing.resource arguments",
            "[TwigBundle] removed obsolete code",
            "udpated UPDATE file",
            "Merge branch 'form'\n\n* form: (291 commits)\n  [FrameworkBundle] updated method call\n  [Form] Removing excess option in the TimezoneType\n  [FrameworkBundle] Adding check for invalid form type for better exception message\n  [TwigBundle] Removing dbug text in form template\n  [Form] Removed obsolete code in TextType\n  [Form] fixed translations escaping\n  [Form] Adding a check that the choice_list option on the ChoiceType implements the ChoiceListInterface.\n  [Form] added support for groups in form validation (when using array data)\n  [Form] fixed error bubbling for choices when expanded is true\n  [Form] added a unit test\n  [Form] Removed obsolete view variables\n  [Form] Renamed ChoiceUtil to FormUtil and gave its methods more general names\n  [Form] Changed separator for Twig blocks from double underscore to single underscore to match the PHP template separator\n  [Form] Removed StripTagsListenerTest\n  [Form] Removed StripTagsListener. Its implementation is insufficient and needs to be replaced by a better one.\n  [Form] added a way to specify the form constraint when building the form (useful if you work with arrays instead of objects)\n  [Form] Added test for 'email' type and fixed a few bugs\n  [Form] Removed obsolete constraints from validation.xml\n  Revert  [Form] removed validation.xml file (not used anymore) \n  Added html5 email input to the forms\n  ...",
            "Merge remote branch 'kriswallsmith/assetic/runtime-is-funtime'\n\n* kriswallsmith/assetic/runtime-is-funtime:\n  [AsseticBundle] fixed router and controller\n  [AsseticBundle] removed fake front controller from URL before creating route\n  [AsseticBundle] updated twig integration to check debug mode at runtime rather than compile time since twig cannot vary its cache by debug mode",
            "[Console] made ApplicationTester::getDisplay() work even in case of an error during execution and changed returned value of ApplicationTester to the command exit code",
            "Merge remote branch 'hhamon/http_cache_fix'\n\n* hhamon/http_cache_fix:\n  [HttpKernel] private $traces property was not initialized to an empty array. When using the getLog() method to debug traces, it led to a warning in the apache error log.",
            "Revert  Merge remote branch 'lsmith77/prevent_redundant_DI_method_calls' \n\nThis reverts commit 0d61ae06b43222ea80fd409e2743827df3f1c083, reversing\nchanges made to 8e3d125902fa3fe98f5e71b390cd5e03db457196.",
            "Merge remote branch 'lsmith77/prevent_redundant_DI_method_calls'\n\n* lsmith77/prevent_redundant_DI_method_calls:\n  do not add method calls from interface injection if a method call has already been set manually",
            "fixed CS",
            "Merge remote branch 'vicb/event_debug'\n\n* vicb/event_debug:\n  [FrameworkBundle] Make some TraceableEventDispacther properties private\n  [Event] Tweak phpDoc for consistency\n  [FrameworkBundle] Add error detection to the TraceableEventDispatcher",
            "Merge remote branch 'beberlei/YamlValidatorFix'\n\n* beberlei/YamlValidatorFix:\n  [FrameworkBundle][Validation] Fix bug where YAML Validation files are not detected.",
            "[DomCrawler] fixed various bug with URIs",
            "Merge remote branch 'vicb/bundle_inheritance'\n\n* vicb/bundle_inheritance:\n  [Kernel] Fix bundle inheritance",
            "Merge remote branch 'vicb/wdtb_and_events'\n\n* vicb/wdtb_and_events:\n  [WebProfilerBundle] Event panel: details & links to the listener method when applicable\n  [WebProfilerBundle] Tweak html markup and css\n  [WebProfilerBundle] Update the event panel layout\n  [WebProfilerBundle] Style abbr elements",
            "Revert  [WebProfilerBundle] Tweak html markup and css \n\nThis reverts commit 60b96e7c5747b6721be88177428f6377e620f457.\n\nI want to be able to display several toolbars on the same page",
            "[WebProfileBundle] replaced an inclusion with a macro",
            "Merge remote branch 'vicb/file_link_format'\n\n* vicb/file_link_format:\n  [FrameworkBundle] Make specifying a custom file_link_format easier\n  [FrameworkBundle] Fix for getting the file link format fallback to XDebug configuration",
            "[FrameworkBundle] removed the debug.file_link_format parameter",
            "Merge remote branch 'kriswallsmith/assetic/filter-file'\n\n* kriswallsmith/assetic/filter-file:\n  [AsseticBundle] added easy way to add a file to a filter definition",
            "merged vicb/event_dispatcher",
            "[FrameworkBundle] simplified code",
            "Merge remote branch 'danielholmes/phpunit_xml_dir'\n\n* danielholmes/phpunit_xml_dir:\n  [FrameworkBundle] removed function for checking for phpunit.xml in cwd\n  [FrameworkBundle] fixed error with arg reversing from previous changes\n  [FrameworkBundle] refactored getPhpUnitXmlDir in to separate parts and added support for --confguration=... style phpunit flag\n  [FrameworkBundle] fixed getPhpUnitXmlDir to work with directory paths with spaces in them",
            "[FrameworkBundle] fixed CS",
            "Merge remote branch 'vicb/wdtb_css'\n\n* vicb/wdtb_css:\n  [WebProfilerBundle] Tweak the wdtb css",
            "Merge remote branch 'vicb/resource_path'\n\n* vicb/resource_path:\n  Update for Bundle names long again (= include the 'Bundle' suffix)\n  [Kernel] Make locateResource() throws an exception when a resource from a Bundle hides a custom resource\n  [Kernel] Make resources overriding consistent across bundle directories and resource directories\n  [Kernel] Improve test semantic\n  [Kernel] Update tests with shorter bundle names\n  [Kernel] Restore the tests for the locateResource method\n  Resource paths should use the full bundle name (with the 'Bundle' postfix)",
            "[HttpKernel] fixed CS",
            "Merge remote branch 'subsven/master'\n\n* subsven/master:\n  Add (Boolean) cast to constructor arguments\n  Add a configuration option to restrict profiler storage to the master request",
            "Merge remote branch 'vicb/link_format'\n\n* vicb/link_format:\n  [Templating] Fix for getting the file link format from XDebug settings",
            "[MonologBundle] fixed typo",
            "[Routing] optimized the output of the PHP matcher dumper",
            "fixed typo",
            "reverted Merge remote branch 'kriswallsmith/kernel/shorter-bundle-names'",
            "[MonologBundle] fixed typo",
            "updated UPDATE file",
            "Merge remote branch 'weaverryan/prevent_exception_on_handle_exception'\n\n* weaverryan/prevent_exception_on_handle_exception:\n  [HttpKernel] Wrapping the end of handleException() in a try-catch to prevent response listeners from throwing another exception",
            "Merge remote branch 'weaverryan/better_import_exception_and_bug_fix'\n\n* weaverryan/better_import_exception_and_bug_fix:\n  [Config] Improving the exception when a resource cannot be imported\n  [DependencyInjection] Fixing a bug where  ignore_errors  doesn't work in YAML and XML",
            "[Process] added some missing accessors/mutators",
            "[WebProfilerBundle] removed redundant info",
            "[Process] changed run() behavior to always populate getOutput() and getErrorOutput()",
            "[HttpKernel] fixed test",
            "[HttpKernel] made the _route request attribute _internal for embedded controller renderings",
            "Merge remote branch 'hidenorigoto/translate-UPDATE-file'\n\n* hidenorigoto/translate-UPDATE-file:\n  translated UPDATE.md file into Japanese",
            "Merge remote branch 'schmittjoh/security'\n\n* schmittjoh/security:\n  [Security] added another example to update file\n  [Security] Remove unneeded and invalid use statement",
            "Merge remote branch 'kriswallsmith/doctrine/test-fixes'\n\n* kriswallsmith/doctrine/test-fixes:\n  [FrameworkBundle] fixed shorter bundle name in test\n  [HttpKernel] updated tests for shorter bundle names\n  [DoctrineMongoDBBundle] updated tests with shorter bundle names\n  [DoctrineBundle] updated tests with shorter bundle names",
            "Merge remote branch 'mbontemps/httpCache-fix'\n\n* mbontemps/httpCache-fix:\n  Add a public getter for the Esi instance\n  Fix kernel access in HttpCache due to kernel attribute privatization",
            "Merge remote branch 'tecbot/master'\n\n* tecbot/master:\n  fixed CS for previous commit\n  [DoctrineMongoDBBundle] fixed logger when value is a GridFS file",
            "[DoctrineBundle] made sure that the Doctine cache is not shared between different applications",
            "Merge remote branch 'pborreli/windows-fix-process'\n\n* pborreli/windows-fix-process:\n  [Process] Better guess of php bin executable path\n  [Process] Removed useless getenv",
            "Merge remote branch 'weaverryan/kernel_controller_exception_message'\n\n* weaverryan/kernel_controller_exception_message:\n  [HttpKernel] Making the  no response returned from controller  more explanatory when it's possible that the user forgot a return statement in his/her controller",
            "[Form] fixed DefaultFormFactory",
            "[Form] fixed Twig theme tests",
            "[Form] removed unused constructor argument from Type\\FieldType (themeFactory and template)",
            "[Form] changed DefaultFormFactory to be more 'useable'",
            "[Form] fixed two unit tests",
            "[Form] removed unused use statement and fixed phpdoc",
            "[Form] reverted the templating part to be similar to what we have today",
            "[Form] moved the template context creation to the Form class\n\nMoving the template context creation makes sense and allows for simpler code for the end user:\n\nBefore:\n\n        return array('post' => $post, 'form' => $this->get('form.factory')->createTemplateContext($form));\n\nAfter:\n\n        return array('post' => $post, 'form' => $form->getContext());",
            "[Form] removed DefaultFormFactory as it does not help that much and adds some confusion",
            "Merge remote branch 'stof/zend_config'\n\n* stof/zend_config:\n  Changed default priority to INFO\n  [ZendBundle] Added a Configuration class",
            "fixed CS",
            "[FrameworkBundle] fixed class loading order",
            "[Routing] changed interface of the router twig extension as we don't need a full router",
            "[Finder] added Finder::append() method to be able to combine several Finder instances into one",
            "[ClassLoader] added ClassLoaderInterface",
            "[ClassLoader] removed ClassLoaderInterface\n\nAs the autoloader cannot autoload the interface, it makes things more complicated\nfor a very small benefit.",
            "[SecurityBundle] made the anonymous key parameter configurable and random by default",
            "[EventDispatcher] tagged the guaranteed BC API",
            "[Console] fixed a test",
            "fixed assetic vendor",
            "-",
            "[ResourceWatcher] added exception classes for the component",
            "[ResourceWatcher] removed unneeded code",
            "[ResourceWatcher] added an exception when inotify is not available",
            "[Config] made ResourceInterface extends Serializable",
            "[ResourceWatcher] removed dead code",
            "[ResourceWatcher] added the possibility to watch files that do not exist yet\n\n* fixed DELETED event when starting to watch a file that does not exist yet\n* fixed files that are deleted and then re-created",
            "Merge remote branch 'aurelijus/wrong_arguments_for_exception'\n\n* aurelijus/wrong_arguments_for_exception:\n  removed 0\n  Updated arguments for MethodNotAllowedHttpException",
            "[Console] fixed PHP notice",
            "[Finder] tagged the guaranteed BC API",
            "Merge remote branch 'kriswallsmith/framework/protocol-relative-base-urls'\n\n* kriswallsmith/framework/protocol-relative-base-urls:\n  [Templating] updated assets helper to leave protocol-relative URLs untouched\n  [FrameworkBundle] cleaned up test class",
            "[HttpKernel] ensured that all 4xx/5xx responses are handled by the exception listener\n\nThis commit ensures that Symfony has the same behavior whether you use Exceptions or Response instances.\nFor instance, the controllers below will have now the same behavior:\n\nfunction ()\n{\n    return new Response('Not Found', 404);\n}\n\nfunction ()\n{\n    throw new NotFoundHttpException();\n}",
            "[HttpFoundation] added some missing accessors to Response",
            "removed special management of 403 exceptions in security\n\n* added an AccessDeniedHttpException in HttpKernel\n* changed ExceptionListener to re-throw an AccessDeniedHttpException\n\nThere was no reason to handle 403 differently than any other exception (404, ...)",
            "[Routing] added supported for multiple route annotations for a single controller",
            "Merge remote branch 'naderman/watch-debug'\n\n* naderman/watch-debug:\n  [AsseticBundle] Throw exception if --watch is used without --debug.",
            "[Routing] fixed the / problem in a URL segment",
            "Merge remote branch 'schmittjoh/propertyAnnotations'\n\n* schmittjoh/propertyAnnotations:\n  [DependencyInjection] added some tests\n  [DependencyInjection] adds property injection",
            "Merge remote branch 'everzet/crawler-privatisation-fixes'\n\n* everzet/crawler-privatisation-fixes:\n  [DomCrawler] moved private methods under public ones (readability)",
            "[WebProfilerBundle] updated the close icon for the WDT",
            "[EventDispatcher] refactored the code\n\n * The array returned by getListeners() now removes the listener hash as the key (as this is an implementation detail)\n * The sort method now guarantees that a listener registered before another will stay in the same order even for the same priority (for BC)\n * Made various optimizations",
            "[HttpKernel] renamed default profiler table to sf_profiler_data",
            "[SecurityBundle] made a small tweak to the WDT panel",
            "[Config] added the possibility to use a Closure for default values",
            "[SecurityBundle] added a note about why a user can be logged in but not authenticated",
            "[FrameworkBundle] miror changes to container:debug",
            "Merge remote branch 'francisbesset/translation_fr'\n\n* francisbesset/translation_fr:\n  [FrameworkBundle] Fixed latest typo in french validators translation\n  [FrameworkBundle] Fixed others typo in french validators translation\n  [FrameworkBundle] Fixed typo in french validators translation\n  [FrameworkBundle] Added french validators translation",
            "[WebProfilerBundle] hmmmm",
            "[WebProfilerBundle] fixed WDT controller to keep the current flashes",
            "Merge remote branch 'kriswallsmith/dic/false-circular-ref-fix'\n\n* kriswallsmith/dic/false-circular-ref-fix:\n  [DependencyInjection] fixed false positive when detecting circular references if a service throws an exception during creation",
            "[WebProfilerBundle] fixed WDT to keep the current flashes for one more request",
            "Merge remote branch 'schmittjoh/visibilityChanges'\n\n* schmittjoh/visibilityChanges:\n  [Security] renamed Twig function has_role to is_granted\n  [Security] some more visibility changes\n  [Security] added some more tests\n  [Security] fixed some left-overs\n  [Security] various changes, see below\n  [Security] Bugfix - Ensure that passwords is of string type. Function BasePasswordEncoder::comparePasswords haven't been working properly for numeric (plaintype) passwords.",
            "Merge remote branch 'stof/doctrine_simplify'\n\n* stof/doctrine_simplify:\n  Removed the short syntax in DoctrineBundle\n  [DoctrineAbstractBundle] Removed obsolete code as the normalization is now done by the Configuration classes\n  [DoctrineMongoDBBundle] Removed the short syntax for the configuration",
            "Merge remote branch 'stof/doctrine_tests'\n\n* stof/doctrine_tests:\n  Fixed test",
            "Merge remote branch 'umpirski/russian-validator-translation'\n\n* umpirski/russian-validator-translation:\n  Applied fixes suggested by @yethee.",
            "Merge remote branch 'vicb/profiler_template'\n\n* vicb/profiler_template:\n  [WebProfilerBundle] Remove dead code\n  [WebProfilerBundle] Better handling of queries with an empty result\n  [WebProfilerBundle] Improve the  token not found  page\n  [WebProfilerBundle] Always remember the query including the token\n  [WebProfilerBundle] Apply missing styles",
            "[Routing] removed the normalizeUrl() method and renamed url to pathinfo as this is more correct",
            "Merge remote branch 'mvrhov/validatorsTransSlo'\n\n* mvrhov/validatorsTransSlo:\n  Draft Slovenian translation",
            "Merge remote branch 'Seldaek/wdt'\n\n* Seldaek/wdt:\n  [FrameworkBundle] Highlight error logs in red and not green\n  [FrameworkBundle] Fix alignment of <li> with the selected class and small opera glitch\n  [FrameworkBundle] Don't hide logs by default in exception pages",
            "Merge remote branch 'Exeu/webprofiler-fixes'\n\n* Exeu/webprofiler-fixes:\n  Fixed the Profiler-Layout of MongoDBBundle to work without actuvating the DoctrineBundle",
            "removed the status message from HttpException, changed the signature so that most useful arguments are first, fixed many small problems introduced with previous HTTP exception refactoring\n\nQuote from HTTP (bis) spec (Part 2 - 5.1.1):\n\nThe Reason Phrase exists for the\nsole purpose of providing a textual description associated with the\nnumeric status code, out of deference to earlier Internet application\nprotocols that were more frequently used with interactive text\nclients.  A client SHOULD ignore the content of the Reason Phrase.",
            "Merge remote branch 'aurelijus/routehelper_cachedrouter_fix'\n\n* aurelijus/routehelper_cachedrouter_fix:\n  Add cache warmed routers support to RouteHelper",
            "[WebProfilerBundle] made various changes to the profiler",
            "Check if config/template file is actually readable before further processing",
            "Merge remote branch 'kriswallsmith/assetic/factory-workers'\n\n* kriswallsmith/assetic/factory-workers:\n  [AsseticBundle] added compiler pass for factory workers",
            "Merge remote branch 'kriswallsmith/assetic/update'\n\n* kriswallsmith/assetic/update:\n  [AsseticBundle] updated for assetic changes",
            "Documentation corrected in EnsureProductionSettingsDoctrineCommand.php",
            "Merge remote branch 'kriswallsmith/zend/compiled-classes'\n\n* kriswallsmith/zend/compiled-classes:\n  [ZendBundle] added classes to compile",
            "Merge remote branch 'kriswallsmith/assetic/rm-phpcs'\n\n* kriswallsmith/assetic/rm-phpcs:\n  [AsseticBundle] removed PHP_CodeSniffer dependency",
            "[TwigBundle] fixed typo",
            "[BrowserKit] fix phpdoc for Client::followRedirect()",
            "Merge remote branch 'stof/doctrine_charset'\n\n* stof/doctrine_charset:\n  Removed default value for the DBAL charset",
            "[Security] adds abstract user provider definition",
            "reverted changes to the adaptive cache loader cache",
            "[DoctrineBundle] added missing entry in XSD",
            "[HttpKernel] added escaping to the profiler SQLite storage",
            "[TwigBundle] added the security context and the user as global variables when they are defined",
            "refactored exception management (removed the ExceptionManager)",
            "[HttpFoundation] added Request::getClientIp()",
            "removed Symfony\\Framework\n\nThings have been moved to Symfony\\Component\\HttpKernel\nand Symfony\\Bundle\\FrameworkBundle\n\nThe kernel configuration namespace was removed and merged\nwith the main web configuration namespace (kernel:config => web:config,\nkernel:test => web:test, and kernel:session => web:session):\n\nBefore:\n<kernel:config charset= UTF-8  error_handler= null  />\n\n<web:config csrf-secret= xxxxxxxxxx >\n    <web:router resource= %kernel.root_dir%/config/routing.xml  />\n    <web:validation enabled= true  annotations= true  />\n</web:config>\n\nAfter:\n<web:config csrf-secret= xxxxxxxxxx  charset= UTF-8  error-handler= null >\n    <web:router resource= %kernel.root_dir%/config/routing.xml  />\n    <web:validation enabled= true  annotations= true  />\n</web:config>\n\nRenamed classes:\n\nSymfony\\{Framework => Bundle\\FrameworkBundle}\\Cache\\Cache\nSymfony\\{Framework => Bundle\\FrameworkBundle}\\Client\nSymfony\\{Framework => Bundle\\FrameworkBundle}\\Debug\\EventDispatcher\nSymfony\\{Framework => Bundle\\FrameworkBundle}\\Debug\\EventDispatcherTraceableInterface\nSymfony\\{Framework => Bundle\\FrameworkBundle}\\EventDispatcher\nSymfony\\{Framework => Component\\HttpFoundation}\\UniversalClassLoader\nSymfony\\{Framework => Component\\HttpKernel}\\Bundle\\Bundle\nSymfony\\{Framework => Component\\HttpKernel}\\Bundle\\BundleInterface\nSymfony\\{Framework => Component\\HttpKernel}\\ClassCollectionLoader\nSymfony\\{Framework => Component\\HttpKernel}\\Debug\\ErrorException\nSymfony\\{Framework => Component\\HttpKernel}\\Debug\\ErrorHandler\nSymfony\\{Bundle\\FrameworkBundle => Component\\HttpKernel}\\Debug\\ExceptionListener\nSymfony\\{Framework => Component\\HttpKernel}\\Kernel",
            "[HttpKernel] added Closure support to ControllerResolver",
            "[ExpressionLanguage] added the component",
            "[DependencyInjection] added support for expressions in the service container",
            "[ExpressionLanguage] added support for regexes",
            "[HttpFoundation] added ExpressionRequestMatcher",
            "added support for expression in control access rules",
            "added a Twig extension to create Expression instances",
            "[ExpressionLanguage] improved performance",
            "[Routing] added support for expression conditions in routes",
            "mades things more consistent for the end user",
            "[Validator] added a constraint that runs an expression",
            "added optimized versions of expressions",
            "[Validator] Renamed Condition to Expression and added possibility to set it onto properties",
            "merged branch Tobion/security-fix-typo (PR #9069)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Security] fix typo and remove unused logger\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\nCommits\n-------\n\na33cc51 [Security] remove unused logger\n62de9c1 [Security] fix typo",
            "merged branch stloyd/bugfix/use_statement (PR #9079)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nFix `use` statements in HttpKernel\\Client\n\nCommits\n-------\n\n5d5ea9a Fix `use` statements in HttpKernel\\Client",
            "Merge branch '2.3'\n\n* 2.3:\n  fixes RequestDataCollector bug, visible when used on Drupal8\n  [Console] fixed exception rendering when nested styles\n  [Console] added some more information about OutputFormatter::replaceStyle()\n  [Console] fixed the formatter for single-char tags\n  [Console] Escape exception message during the rendering of an exception\n  [DomCrawler] fixed HTML5 form attribute handling\n  Making tests pass on mac os x without this change tests would fail under mac os x at least in 10.8.2\n  [BrowserKit] Fixed the handling of parameters when redirecting\n  [Process] Properly close pipes after a Process::stop call\n  fixed bytes conversion when used on 32-bits systems\n  Typo fix\n  HttpFoundation RequestTest - Fixed indentation and removed comments\n  HttpFoundation Request test for #8619\n  LICENSE files moved to meta folders\n  added missing method in the UPGRADE file for 2.2 (closes #8941)\n  [Form] Fixed:  required  attribute is not added to <select> tag if no empty value\n  [Translation] Removed an unneeded return annotation.\n  [DomCrawler] Added missing docblocks and removed unneeded return annotation.\n\nConflicts:\n\tsrc/Symfony/Component/Process/Tests/AbstractProcessTest.php",
            "merged branch Tobion/console-nulloutput (PR #8037)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Console] fix Output classes\n\nPlease see commits.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\nCommits\n-------\n\n940b788 [Console] use inheritdoc for Output classes\nbd61b92 [Console] fix phpdoc of Output classes (esp. regarding the new verbosities)\n9dcc9fa [Console] fix abstract Output class that fasly claims to support guessing of decorated variable.\n2628d88 [Console] the default type value should use the constant in OutputInterface::write\nee0cc40 [Console] fix NullOutput\na290f87 [Console] fix test for NullOutput that does not print anything and add a failing test for verbosity",
            "merged branch paradoxe/master (PR #8043)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Form][Twig] Removed an extra table column in the  button_row  block template\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n6d5bc7a [Twig][Form] Removed extra table colunm in the button_row block template",
            "merged branch jakzal/bugfix/segfaulting-tests (PR #8032)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nFixed the tests on PHP 5.3.3\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7754\n| License       | MIT\n| Doc PR        | -\n\nPHPUnit with PHP 5.3.3 couldn't handle garbage collecting properly.\n\nCommits\n-------\n\n0617ed1 [Console] Removed the descriptor from data set providers.",
            "merged branch ramonornela/master (PR #8029)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nImprovement composer.json Console\n\nAdded suggest to composer.json.\n\nCommits\n-------\n\n5e6245f [ADD] Component_Console -add suggest in the composer.json to event-dispatcher",
            "tweaked previous merge (refs #8029)",
            "[BrowserKit] should not follow redirects if status code is not 30x",
            "Revert  merged branch armetiz/master (PR #8045) \n\nThis reverts commit a6dd5db60d1eb56be917fcc38244bcca168740a9, reversing\nchanges made to da6f190a6b630d6fc17729e04061308e573b47c7.",
            "adding missing Farsi translations",
            "merged branch empire/patch-validator-fa (PR #8060)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8060).\n\nDiscussion\n----------\n\n[Validator] added missing Farsi translations\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | -\n| License       | MIT\n\nFarsi translations for the following validators\n\n-  IBAN\n-  ISBN\n-  ISSN\n-  Currency\n-  EqualTo\n-  IdenticalTo\n-  NotEqualTo\n-  NotIdenticalTo\n-  GreaterThan\n-  GreaterThanOrEqual\n-  LessThan\n-  LessThanOrEqual;\n\nCommits\n-------\n\n026f2ac [Validator] adding missing Farsi translations",
            "remove check for PHP bug #50731",
            "merged branch xabbuh/issue8007-master (PR #8052)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8052).\n\nDiscussion\n----------\n\nremove check for PHP bug #50731\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8007\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\n28534a6 remove check for PHP bug #50731",
            "Update validators.ru.xlf\n\n[Validator] russian language update",
            "updated CHANGELOG for 2.3.0-RC1",
            "merged branch jakzal/2.3-cssselector-test-location (PR #8090)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[CssSelector] Moved a test into the Tests folder.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\nb2e52e8 [CssSelector] Moved a test into the Tests folder.",
            "merged branch jakzal/bugfix/intl-tests-covers (PR #8082)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Intl] Fixed the class namespaces in the @covers annotations.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | no\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\na39db7b [Intl] Fixed the class namespaces in the @covers annotations.",
            "merged branch lazyhammer/issue-8068 (PR #8072)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[CssSelector] Fix :nth-last-child() translation\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8068\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\n2d9027d [CssSelector] Fix :nth-last-child() translation",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [CssSelector] Fix :nth-last-child() translation\n  Fix Crawler::children() to not trigger a notice for childless node\n\nConflicts:\n\tsrc/Symfony/Component/CssSelector/Node/FunctionNode.php\n\tsrc/Symfony/Component/CssSelector/Tests/Node/FunctionNodeTest.php",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [Console] fix and refactor exit code handling\n\nConflicts:\n\tsrc/Symfony/Component/Console/Application.php",
            "merged branch weaverryan/resource-loader-show-previous-exception (PR #8089)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Config] Including exception message to clarify the underlying issue\n\nHi guys!\n\nIn the framework if you, for example, make a syntax error in YAML, then the true, clear message (e.g. Unable to parse at line 5 (near  framework ) is nested, and harder to visually see. This includes that message in the main exception so that users can debug more easily.\n\nI see this quite a bit, it's a choke point for newcomers :).\n\nBefore: Cannot import resource  /path/to/app/config/config.yml  from  /path/to/app/config/config_dev.yml .\n\nAfter: Cannot import resource  /path/to/app/config/config.yml  from  /path/to/app/config/config_dev.yml . (Unable to parse at line 5 (near  framework ).)\n\nCorrections and comments warmly appreciated.\n\nThanks!\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | --\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\n435012f [Config] Adding the previous exception message into the FileLoaderLoadException so it's more easily seen",
            "fix double variable assignment in ContainerDebugCommand",
            "merged branch hason/web-profiler-bundle (PR #8103)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[WebProfilerBundle] Fixed composer.json\n\nCommits\n-------\n\nd4f5389 [WebProfilerBundle] Fixed composer.json",
            "merged branch jakzal/2.3-router-tests (PR #8102)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Routing] Added Router tests and fixed an exception message\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\ne61ba7d [Routing] Added Router tests and fixed an exception message.",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [Validator] fixed metadata serialization\n  Fixed metadata serialization",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  added trusted hosts check\n\nConflicts:\n\tsrc/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php",
            "updated CHANGELOG for 2.3.3",
            "updated VERSION for 2.3.3",
            "bumped Symfony version to 2.3.4-DEV",
            "merged branch bschussek/icu51 (PR #8680)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Intl] Updated stubs to reflect ICU 51.2\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nIn addition to the upgrade of the ICU component to ICU 51.2, this PR upgrades the stub classes to behave like their C counterparts do with ICU 51.2.\n\nCommits\n-------\n\n8fa0453 [Intl] Updated stubs to reflect ICU 51.2",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  added missing support for the new output API in PHP 5.4+\n  Fixed bug introduced in #8675\n  made the filesystem loader compatible with Twig 2.0\n  bumped Symfony version to 2.2.6\n  updated VERSION for 2.2.5\n  update CONTRIBUTORS for 2.2.5\n  updated CHANGELOG for 2.2.5\n  replaced deprecated Twig features\n\nConflicts:\n\tsrc/Symfony/Bridge/Twig/Extension/FormExtension.php\n\tsrc/Symfony/Bridge/Twig/Extension/RoutingExtension.php\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "Fix empty process argument escaping on Windows",
            "merged branch helmer/processutils_patch (PR #8691)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8691).\n\nDiscussion\n----------\n\n[Process] Fix empty process argument escaping on Windows\n\nPR #6796 introduced a regression on Windows platform (symfony 2.3.0+), forgetting to escape explicitly requested empty arguments to ```  ``` and return an empty string instead.\n\nThis behaviour is imo unintended and renders the component unusable for corner-cases, where you indeed want to specify an empty argument. One good example of this is assetic and compass, which (up to this day) relies on existence of empty parameters on windows.\n\nSome panic and related links on the topic:\nhttps://github.com/kriswallsmith/assetic/issues/455\nhttps://github.com/kriswallsmith/assetic/pull/471\nhttp://stackoverflow.com/questions/17001517/symfony2-3-with-compass ([diff](http://marker.to/KrctHM))\nhttp://stackoverflow.com/questions/17135219/symfony-2-compass-with-assetic-on-windows-xp\n\nPlease consider a merge to master and a backport to 2.3.x\n\nCommits\n-------\n\na91537a Fix empty process argument escaping on Windows",
            "merged branch EmmanuelVella/validators (PR #8577)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nValidators\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\nThis PR avoid comparison validators to be executed if the compared value is null.\n\nCommits\n-------\n\n48338fc Ignore null value in comparison validators",
            "Make sure ContextErrorException is loaded during compile time errors",
            "merged branch ShiraNai7/master (PR #8688)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #8688).\n\nDiscussion\n----------\n\n[Debug] Make sure ContextErrorException is loaded during compile time errors\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | no\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a\n\n### Description\n\nWhen the `ErrorHandler->handle()` attempts to throw a `ContextErrorException` the script might die with a Fatal Error because the class is not found.\n\n    FatalErrorException: Error: Class 'Symfony\\Component\\Debug\\Exception\\ContextErrorException' not found in ...\n\nThat effectively hides the original error and causes confusion.\n\n### Cause\n\nThe cause is a bug/limitation of PHP that makes class autoloading completely inactive during  compiling .\n\nRelevant PHP source code in `zend_execute_API.c`:\n\n    /* The compiler is not-reentrant. Make sure we __autoload() only during run-time\n     * (doesn't impact functionality of __autoload()\n    */\n    if (!use_autoload || zend_is_compiling(TSRMLS_C)) {\n\n#### More information about the PHP bug/limitation:\n- https://bugs.php.net/bug.php?id=65322\n- many duplicates/relevant: https://www.google.com/search?btnG=1&pws=0&q=site%3Abugs.php.net+autoload+error+handling\n\n### The fix\n\nThe most simple way to fix this is to manually ensure that `ContextErrorException` is loaded and if not, load it. This is what I did.\n\nAnother way is to detect if autoloading is available (possible by prepending a temporary autoloader) and act accordingly (how?).\n\n### The test\n\nI also added a test case that would fail with a fatal error if the error handler does not successfully throw an exception in case of a compile time error. But I'm not sure if this is the best way or if there should be a test case at all.\n\n###\n\nCommits\n-------\n\nb0082ab [Debug] Make sure ContextErrorException is loaded during compile time errors",
            "[Form] Moved auto_initialize option to the BaseType",
            "merged branch jakzal/2.3-form-button-fix (PR #8349)\n\nThis PR was squashed before being merged into the 2.3 branch (closes #8349).\n\nDiscussion\n----------\n\n[Form] Moved auto_initialize option to the BaseType\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8162\n| License       | MIT\n| Doc PR        | -\n\nI'm not fully confident in this change, so let someone review it before mergin please. My thinking was - since  auto_initialized  option is always passed to a form factory, it should be required by the base type.\n\nCommits\n-------\n\n6ed0fdf [Form] Moved auto_initialize option to the BaseType",
            "[FrameworkBundle] made code more generic",
            "Fix internal sub-request creation\n\nFixes the creation of internal sub-request in case of disabled trusted\nclient-ip header",
            "merged branch lazyhammer/fix-inline-fragment (PR #7893)\n\nThis PR was submitted for the master branch but it was merged into the 2.3 branch instead (closes #7893).\n\nDiscussion\n----------\n\n[HttpKernel] Fix internal sub-request creation\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | n/a\n| License       | MIT\n| Doc PR        | n/a\n\nFixes the creation of internal sub-request in case of disabled trusted\nclient-ip header.\n\nCommits\n-------\n\n85d5413 [HttpKernel] Fix internal sub-request creation",
            "[TwigBridge] removed superflous ; when rendering form_enctype() (closes #8660)",
            "merged branch fabpot/form_enctype-fix (PR #8731)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nform_enctype() fix (closes #8660)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8660\n| License       | MIT\n| Doc PR        | n/a\n\nCommits\n-------\n\n572ba68 [TwigBridge] removed superflous ; when rendering form_enctype() (closes #8660)",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  corrected English grammar (s/does not exists/does not exist)\n  [Process] Add more precision to Process::stop timeout\n  [Process] Avoid zombie process in case of unit tests failure\n  [Process] Fix #8739\n  [Process] Add failing test for #8739\n  [Process] Fix CS\n  Fixed documentation grammar for AuthenticationManagerInterface::authenticate()\n  [Validator] fixed the wrong isAbstract() check against the class (fixed #8589)\n  [TwigBridge] Prevent code extension to display warning\n  Use strstr instead of strpos\n\nConflicts:\n\tsrc/Symfony/Component/Finder/Shell/Command.php\n\tsrc/Symfony/Component/Process/Process.php",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [Process] Revert change\n  [Process] Fix #8746 : slowness added in unit tests since #8741",
            "merged branch romainneutron/fix-8742 (PR #8744)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Process] Fix #8742 : Signal-terminated processes are not successful\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | require #8741 to be merged to pass tests\n| Fixed tickets | #8742\n| License       | MIT\n\nCommits\n-------\n\n909fab6 [Process] Fix #8742 : Signal-terminated processes are not successful",
            "[Process] Fix for #8754 (Timed-out processes are successful)",
            "merged branch romainneutron/fix-8754 (PR #8756)\n\nThis PR was squashed before being merged into the 2.3 branch (closes #8756).\n\nDiscussion\n----------\n\n[Process] Fix for #8754 (Timed-out processes are successful)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8754\n| License       | MIT\n\nCommits\n-------\n\nfa01e6b [Process] Fix for #8754 (Timed-out processes are successful)",
            "merged branch bschussek/fix-submit (PR #8764)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[Form] Fixed: Added  validation_groups  option to submit button\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8209\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\nc342715 [Form] Fixed: Added  validation_groups  option to submit button",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  Added sleep() workaround for windows php rename bug\n  [HttpKernel] removed unused variable\n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  [Process] Use a consistent way to reset data of the process latest run\n  CS fix\n  [HttpFoundation] Fixed removing a nonexisting namespaced attribute.\n  [Validation] Fixed IdentityTranslator to pass correct Locale to MessageSelector\n  SwiftMailerHandler in Monolog bridge now able to react to kernel.terminate event\n\nConflicts:\n\tsrc/Symfony/Component/Process/Process.php",
            "merged branch Seldaek/untrusted (PR #8810)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nInclude untrusted host in the exception message\n\n`Invalid *` error message without the actual value that triggered them are really unhelpful to debug issues.\n\nCommits\n-------\n\nfd2f633 Include untrusted host in the exception message",
            "[HttpKernel] added a comment to warn about possible inconsistencies",
            "added a functional test for locale handling in sub-requests",
            "fixed locale of sub-requests when explicitely set by the developer (refs #8821)",
            "Fixed issue #6932 - Inconsistent locale handling in subrequests\n\nThe fix consists in passing the locale in the controller reference,\ninside the routablefragment renderer.",
            "[HttpFoundation] added constants for HTTP status code in Response",
            "removed deps checks in unit tests\n\nAs Composer is now widely used in the PHP world, having to run composer\ninstall before running the test suite is expected. This also has the\nnice benefit of removing a bunch of code, making things easier to\nmaintain (there is only one place to declare a dev dependency), and\nprobably more.",
            "[HttpKernel] fixed event listeners order when wrapped within a TraceableEventDispatcher (closes #8426)",
            "change the stopwatch argument to be any valid expression",
            "removed code that prevents the stopwatch to work properly",
            "Created stopwatch tag",
            "fixed CS",
            "removed unneeded safeguard as it's already done during compilation",
            "Added reloading of fallback catalogues when calling addResource() (#7715)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7715\n| License       | MIT\n| Doc PR        |",
            "merged branch pborreli/bug-7860 (PR #7863)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Console] is not ambiguous anymore if it has a perfect match command name (closes #7860)\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes, locally\n| Fixed tickets | #7860\n| License       | MIT\n| Doc PR        | no\n\nCommits\n-------\n\nbe34917 [Console] find command even if its name is a namespace too (closes #7860)",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  [BrowserKit] fixed BC break done recently\n  [Process] Fix #5594 : `termsig` must be used instead of `stopsig` in exceptions when a process is signaled\n  Rename misprint property (from warmer to finder)\n  Add This field is missing RU translation\n\nConflicts:\n\tsrc/Symfony/Component/Process/Process.php\n\tsrc/Symfony/Component/Validator/Resources/translations/validators.ru.xlf",
            "[Translation] fixed a unit test",
            "Merge branch '2.1' into 2.2\n\n* 2.1:\n  Fix getPort() returning 80 instead of 443 when X-FORWARDED-PROTO is set to https",
            "merged branch bschussek/fix-validator (PR #7919)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Validator] Fixed: $traverse and $deep is passed to the visitor from Validator::validate()\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n59b78c7 [Validator] Fixed: $traverse and $deep is passed to the visitor from Validator::validate()",
            "merged branch WouterJ/fix_namespaces (PR #7967)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[TwigBundle] Fixed 2 namespaces\n\nSomething went wrong with the namespaces in the test directory in 2.2\n\nCommits\n-------\n\n1788c6b Fixed 2 namespaces",
            "Fixed fatal error in normalize/denormalizeObject.",
            "merged branch jakzal/form-validator-tests-fix (PR #7996)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\nFixed failing 2.2 tests\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\n1858b96b7dc473fcab09533b17ace9a24b8d3d86 introduced a mocked context and therefore `getExecutionContext()` is was renamed to `getMockExectionContext()`.\n\nCommits\n-------\n\nef87ba7 [Form] Fixed a method name.",
            "merged branch jakzal/bugfix/finder-test (PR #8150)\n\nThis PR was merged into the 2.2 branch.\n\nDiscussion\n----------\n\n[Finder] Fixed a path in a test\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nTest case was introduced in 45b68e02bd5838c0288db360ce117b714f9ceaca.\n\nIt's probably better to be explicit rather than to rely on a path position in the array. Position in 2.1 was different than in the other branches.\n\nCommits\n-------\n\n127f3bd [Finder] Fixed a path in a test.",
            "fix arab translation",
            "merged branch bghazy/master (PR #8169)\n\nThis PR was submitted for the master branch but it was merged into the 2.2 branch instead (closes #8169).\n\nDiscussion\n----------\n\nfix arab translation\n\nfix arab translation\n\nCommits\n-------\n\ne9051b3 fix arab translation",
            "merged branch davefx/patch-1 (PR #7729)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nIf cannot start session due to already-sent headers, show the file and line that have sent them\n\nIf session cannot be started because of already-sent headers, show the file and line from which the output has been started.\n\nCommits\n-------\n\n00d2643 Showing file that has sent headers if cannot start session",
            "[HttpFoundation] fixed CS of previous merge",
            "merged branch egeloen/f-container-params-debug (PR #6550)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[FrameworkBundle] Allow to debug container parameters\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nFixes the following tickets: ~\nTodo: -\nLicense of the code: MIT\nDocumentation PR: ~\n\nHey!\n\nThis PR adds a new command which allows to debug container parameters. IMO, being able to list all available parameters is very useful. We can now know which parameters we can inject into our services.\n\nRegards\n\nCommits\n-------\n\nceb401d Add parameters debug to the container:debug command\n64388c1 [FrameworkBundle] Allow to debug container parameters",
            "merged branch sprain/validator-iban (PR #6677)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Form] [Validator] Added IBAN validator\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nLicense of the code: MIT\n\nValidation for International Bank Account Numbers\nhttp://en.wikipedia.org/wiki/International_Bank_Account_Number\n\nI don't know if the community likes new validators. I have been using this in many projects and would love to see it integrated directly with Symfony.\n\nCommits\n-------\n\nc8906f4 [Validator] Added IBAN validator",
            "[Validator] fixed CS",
            "merged branch pvolok/fix_7421 (PR #7660)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[DomCrawler] Allow schema-less url in the base tag\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7421\n| License       | MIT\n| Doc PR        | -\n\nCommits\n-------\n\n6bf9c68 [DomCrawler] allowed schema-less url in the base tag",
            "[Validator] Added ISBN validator",
            "merged branch thewholelifetolearn/master (PR #6718)\n\nThis PR was squashed before being merged into the master branch (closes #6718).\n\nDiscussion\n----------\n\n[Validator] Added ISBN validator\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nLicense of the code: MIT\n\nFor information about ISBN-10 and ISBN13: https://en.wikipedia.org/wiki/Isbn\n\nThis constraint permits to valid a ISBN-10 code, a ISBN-13 code or both on a value\n\nCommits\n-------\n\n4582261 [Validator] Added ISBN validator",
            "[Validator] fixed CS",
            "added missing information in the CHANGELOGS",
            "[SecurityBundle] [HttpFoundation] Allow for multiple IP address in security access_control rules",
            "merged branch Olden/russian_translations (PR #7745)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Russian translation of the IBAN & ISBN validator messages\n\nAdded the Russian translation for new validators.\n\nCommits\n-------\n\nca00f21 [Validator] Russian translation of the IBAN & ISBN validator messages",
            "merged branch patie/master (PR #7744)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Added Slovak translations for IBAN and ISBN messages.\n\nCommits\n-------\n\n2890a3f [Validator] Added Slovak translations of IBAN and ISBN",
            "merged branch jakzal/iban-isbn-pl-translations (PR #7743)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Added Polish translations for IBAN and ISBN messages.\n\n| Q | \tA\n| ------------- | ---\n| Bug fix?\t| no\n| New feature?\t| no\n| BC breaks?\t| no\n| Deprecations?\t| no\n| Tests pass?\t| yes\n| Fixed tickets\t|\n| License | \tMIT\n| Doc PR\t| ~\n\nCommits\n-------\n\n811fc30 [Validator] Added Polish translations for IBAN and ISBN messages.",
            "merged branch 77web/translation-ja-iban-isbn (PR #7747)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] added Japanese translation for IBAN & ISBN messages\n\n| Q             | A\n| ------------- | ---\n| Fixed tickets | N/A\n| License       | MIT\n\nCommits\n-------\n\n3719cd5 [Validator] added Japanese translation for IBAN & ISBN messages",
            "[HttpFoundation] [HttpKernel] Internal sub-requests should have X-Forwarded-For header providing real client IP",
            "merged branch guilhermeblanco/client_ip_fix (PR #7559)\n\nThis PR was squashed before being merged into the master branch (closes #7559).\n\nDiscussion\n----------\n\n[HttpFoundation] [HttpKernel] Internal sub-requests should have X-Forwarded-For header providing real client IP\n\nThis is a better alternative to fix issue highlighted in #7554 and #7557.\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #7554, #7557\n| License       | MIT\n\nWhen dealing with inline fragment renderer, it emulates an internal request by overriding the REMOTE_ADDR on Request. This is true, since conceptually request came from local server.\nThe problem that this introduces is that overriding the server value, it turns into an impossible state to retrieve the real client ip, only returning the local server IP (which is hardcoded to 127.0.0.1).\n\nThis patch takes the same approach as a Varnish call (it behaves the exact same way, reusing all code built for handling client ip handling on sub-requests), populating the X-Forwarded-For header and also making getClientIp smarter by removing possible local IP addresses from being considered as the client IP address.\n\nCommits\n-------\n\n773e109 [HttpFoundation] [HttpKernel] Internal sub-requests should have X-Forwarded-For header providing real client IP",
            "[HttpKernel] optimized previous merge",
            "[DialogHelper] Multiselect : added an option to the  select  function that makes the possibility of multiselect options.",
            "merged branch quiqueporta/multiselect (PR #7602)\n\nThis PR was squashed before being merged into the master branch (closes #7602).\n\nDiscussion\n----------\n\n[DialogHelper] Multiselect : added an option to the  select  function that makes the possibility of multiselect options.\n\nWhen the option list appears, you can select more than one value separated by comma.\n\n Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets |\n| License       | MIT\n| Doc PR        |\n\nCommits\n-------\n\nc8a5e02 [DialogHelper] Multiselect : added an option to the  select  function that makes the possibility of multiselect options.",
            "[master] Better documentation for",
            "merged branch felicitus/master (PR #7494)\n\nThis PR was squashed before being merged into the master branch (closes #7494).\n\nDiscussion\n----------\n\n[master] Better documentation for\n\nFixes #7492\n\nCommits\n-------\n\nb1e14b2 [master] Better documentation for",
            "[Serializer] fixed CS",
            "merged branch maxbeutel/pr/custom-template-escaping (PR #7479)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[TwigBundle] Make twig extension handle custom template escaping guesser\n\nI wanted to add a custom template escaping guesser for twig like in http://twig.sensiolabs.org/doc/recipes.html#using-the-template-name-to-set-the-default-escaping-strategy\n\nThis pull request allows you register a service id and a method as a custom guesser:\n\n    twig:\n        autoescape: my_service:guess\n\nDocumentation is missing for this PR and the unit tests are not that good. I\u00b4d work on it if this PR has any chance of getting merged?\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | none\n| License       | MIT\n| Doc PR        | (missing)\n\nCommits\n-------\n\nc2c1ed0 make twig extension handle custom template escaping guesser",
            "[TwigBundle] removed @ when defining an autoescaping service, and fixed XSD to use - instead of _",
            "merged branch bamarni/http-kernel-lazy-classmap (PR #7322)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpKernel] made the classmap lazy-loaded\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | [no]\n| New feature?  | [yes]\n| BC breaks?    | [no]\n| Deprecations? | [no]\n| Tests pass?   | [yes]\n| License       | MIT\n\nsee https://github.com/symfony/symfony-standard/pull/437#issuecomment-14667140\n\nInstead of managing this from HttpCache, I suggest to handle it at Kernel's level, what do you think?\n\nCommits\n-------\n\n2aefe21 [HttpKernel] made the classmap lazy-loaded",
            "merged branch jskvara/master (PR #7757)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Added Czech translations for IBAN and ISBN validators\n\nAdded Czech translations for IBAN and ISBN validators\n\nCommits\n-------\n\n565f612 [Validator] Added Czech translations of IBAN and ISBN",
            "merged branch Aitboudad/patch-1 (PR #7758)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] Added Arabic translations for IBAN & ISBN messages\n\nCommits\n-------\n\nfd9eaae [Validator] Added Arabic trans of ISBN validator",
            "[Console] made the shel prompt easily customizable (closes #7710)",
            "[Validator] Added ISSN Validator",
            "merged branch pborreli/grammar-typo (PR #7768)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nFixed typos\n\nCommits\n-------\n\n0a12fd6 Fixed typos",
            "Mitigate dependency upon ConfigCache",
            "merged branch mweimerskirch/patch-15 (PR #7774)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\nTweaked German translation\n\nCommits\n-------\n\n461c281 Tweaked German translation",
            "merged branch umpirsky/fix/iban-sr-cyrl-translation (PR #7780)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Validator] ISBN, IBAN Serbian translation.\n\nCommits\n-------\n\ne3e856e ISBN, IBAN Serbian translation.",
            "Merge branch '2.2'\n\n* 2.2:\n  added missing license blocks\n  added missing license blocks",
            "added missing license blocks",
            "Method each return an instance of Crawler instead DOMElement",
            "merged branch fabpot/moved_domcrawler_9 (PR #7751)\n\nThis PR was squashed before being merged into the master branch (closes #7751).\n\nDiscussion\n----------\n\nMethod each return an instance of Crawler instead DOMElement\n\nThis PR was submitted on the symfony/DomCrawler read-only repository and moved automatically to the main Symfony repository (closes symfony/DomCrawler#9).\n\nMethod each return an instance of Crawler instead DOMElement\n\nCommits\n-------\n\n14eed63 Method each return an instance of Crawler instead DOMElement",
            "[DomCrawler] changed Crawler::reduce() to iterate over Crawler instance instead of DomElement instances",
            "[HttpFoundation] removed unused variable",
            "merged branch jalliot/patch-4 (PR #4544)\n\nCommits\n-------\n\n5d55726 [HttpFoundation] Added 308 as a valid redirect code\n\nDiscussion\n----------\n\n[HttpFoundation] Added 308 as a valid redirect code\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/jalliot/symfony.png?branch=patch-4)](http://travis-ci.org/jalliot/symfony)\nFixes the following tickets: -\nTodo: -\n\nI think this should go on 2.0 but error code 308 has only been added in master...\n\n---------------------------------------------------------------------------\n\nby lyrixx at 2012-06-09T22:56:32Z\n\n:+1:\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-10T06:27:18Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1579937) (merged 5d557261 into 6266b72d).",
            "merged branch Tobion/phpdoc (PR #4539)\n\nCommits\n-------\n\n680e732 [Routing] fix phpDoc\n\nDiscussion\n----------\n\n[Routing] fix phpDoc\n\nusing inheritdoc where possible and removing api tag when parent interface has one\nas requested by stof and fabpot\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T16:14:53Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1577508) (merged 0a44632a into f8a09db5).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-10T19:36:25Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1585766) (merged 680e732a into 7bec0786).",
            "merged branch Seldaek/route-gen (PR #4534)\n\nCommits\n-------\n\n31843cf [FrameworkBundle] Add info to config\nd5ab4c1 [Routing] Update changelog\nbbef65e [Routing] Add strict_parameters option to disable exceptions when a route generation fails due to an invalid parameter\n\nDiscussion\n----------\n\n[Routing] Add strict_parameters option to disable exceptions on invalid parameters\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T15:07:26Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1577025) (merged bbef65e6 into 37678e17).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-09T15:43:48Z\n\nSeems good, but you forgot to update the Changelog of the component. Anyway, let's wait for @vicb's review as he knows the Routing component better than me.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-06-09T16:35:56Z\n\nI updated the changelog\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T16:38:31Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1577716) (merged d5ab4c1d into 37678e17).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-11T10:10:37Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1590901) (merged a54e59e4 into 37678e17).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-11T13:50:21Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1591926) (merged 31843cf0 into 0995b1f2).",
            "merged branch michelsalib/patch-2 (PR #4564)\n\nCommits\n-------\n\nbe637b5 Add upgrade for commit 0995b1f28b80f91cfef7b3201840aa3dbcc66ae1\n\nDiscussion\n----------\n\nAdd upgrade for UserPassword moving from Bundle to Component\n\nJust add some documentation in the Upgrade file about the `UserPassword` moving from Bundle to Component in commit 0995b1f28b80f91cfef7b3201840aa3dbcc66ae1.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-13T01:23:49Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1606080) (merged be637b5c into 37550d23).",
            "merged branch stof/change_typehint (PR #4569)\n\nCommits\n-------\n\n92e028f Changed the typehint in the LocaleListener\n\nDiscussion\n----------\n\nChanged the typehint in the LocaleListener\n\nThe listener does not depend on the RouterInterface but only on the\nRequestContextAwareInterface which is also implemented by the matcher\nand the generator. Changing the typehint allow reusing the listener\nin Silex.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-13T14:12:10Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1611055) (merged 92e028f1 into 1d7501db).",
            "fixed order of translation files registration",
            "merged branch henrikbjorn/editorconfig (PR #4595)\n\nCommits\n-------\n\nb6001cf Add EditorConfig File\n\nDiscussion\n----------\n\nAdd EditorConfig File\n\nhttp://editorconfig.org is a way to configure the different editor\nconfigurations.\n\nThis could help some who develop with ruby and php where ruby uses 2\nspaces and we use 4. Or where some develop for Drupal where they also\nuse 2 spaces but 4 for contributing to Symfony.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-16T12:14:54Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1634672) (merged b6001cf5 into 76b2ed46).",
            "merged branch asm89/fix-security-encoder-factory (PR #4604)\n\nCommits\n-------\n\n0be11f4 [Security] Fix retrieval of encoder when configured for concrete classes\n024cb91 [Security] Add failing testcases for EncoderFactory\n\nDiscussion\n----------\n\nFix security encoder factory\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-security-encoder-factory)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR adds two testcases + a fix for the retrieval of an encoder from the `EncoderFactory`.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-18T10:22:40Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1645765) (merged 0be11f4d into 0b8b76bf).\n\n---------------------------------------------------------------------------\n\nby asm89 at 2012-06-18T10:42:58Z\n\n@fabpot One testcase fails on PHP 5.3.3, but I'm not sure why. Any clues?",
            "merged branch asm89/fix-component-testsuites (PR #4602)\n\nCommits\n-------\n\n441c098 [HttpKernel] Remove unneeded test class (suggestion by @stof)\ne49b714 [Routing] Fix component 'standalone' testsuite\n0b0fe74 [HttpKernel] Fix component 'standalone' testsuite\n8ff2838 [Form] Fix component 'standalone' testsuite\n\nDiscussion\n----------\n\nFix component testsuites\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-component-testsuites)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThe testsuites of some components would crash when running them seperately (from their own directory for example). This PR fixes that by skipping some additional tests if dependencies for the test aren't met. In the case of `HttpKernel` there was also a helper class in `KernelTest` that is now moved to it's own file. This was needed because the class implemented the `BundleInterface`, which depends on the `DependencyInjection` component. The autoloader would then crash the complete test suite.\n\nI sent this PR to the `master` branch since the tests have been moved and splitted some while ago, before it wasn't really possible to have this situation. If for maintainability reasons it should still be send to the 2.0 branch, let me know!\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-18T08:25:58Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1645386) (merged f9b8ea82 into 0b8b76bf).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-18T08:46:33Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1645448) (merged 441c0983 into 0b8b76bf).",
            "merged branch aerialls/profiler_height (PR #4600)\n\nCommits\n-------\n\ne113600 [WebProfilerBundle] removed the extra space before the toolbar\n\nDiscussion\n----------\n\n[WebProfilerBundle] removed the extra space before the toolbar\n\nThe profiler toolbar has a height of 38px. This PR removes the (useless) extra space before it.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-17T22:44:13Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1643364) (merged e1136001 into b27d9b54).",
            "merged branch Nanocom/master (PR #4609)\n\nCommits\n-------\n\n60d371b InputDefinition: Fixed unit tests\nc099763 InputDefinition: corrected grammar mistakes and added a @throws declaration\n\nDiscussion\n----------\n\n[Console] InputDefinition: corrected grammar mistakes and added a missing @throws declaration\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-18T21:46:59Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1650681) (merged c0997634 into 086ff482).\n\n---------------------------------------------------------------------------\n\nby Nanocom at 2012-06-18T21:58:32Z\n\nWooops, forgot to change unit tests :) Doing this right now\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-18T22:18:42Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1650917) (merged 60d371bc into 086ff482).",
            "merged branch shieldo/fix_exception_in_encoder_factory (PR #4621)\n\nCommits\n-------\n\nd4b0a9c [Security] fixed exception message in EncoderFactory\n\nDiscussion\n----------\n\n[Security] fixed exception message in EncoderFactory\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: n/a\nTodo: n/a\nLicense of the code: MIT\nDocumentation PR: n/a\n\nIn ``EncoderFactory``, fixed the exception message so it uses the class of the provided user (string or object), rather than the class key for whatever happens to be the last loaded encoder.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-20T11:19:21Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1663813) (merged d4b0a9ca into 092b5dde).",
            "merged branch ricbra/dutch_translations (PR #4618)\n\nCommits\n-------\n\n8797b74 [Validator] added missing dutch translations\n\nDiscussion\n----------\n\n[Validator] added missing dutch translations\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets:\nTodo:\nLicense of the code: MIT\nDocumentation PR:\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-20T08:27:17Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1662776) (merged aa0a7e83 into 092b5dde).\n\n---------------------------------------------------------------------------\n\nby ricbra at 2012-06-20T09:55:45Z\n\n@Burgov Thanks for the feedback. Fixed all typos & added PR description according to the documentation on Symfony site.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-20T09:59:38Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1663352) (merged 8797b743 into 092b5dde).",
            "merged branch Crell/routecollection-count (PR #4642)\n\nCommits\n-------\n\nc350944 Add the Countable interface to RouteCollection.\n\nDiscussion\n----------\n\nAdd the Countable interface to RouteCollection.\n\nSince RouteCollection is a fancy-pants array of Routes, and it already is iterable, it would be nice if it were also countable.\n\nThere may be optimizations to be had here, but I figure this is a decent start.  There should be no BC breaks here, just some DX convenience.\n\n---------------------------------------------------------------------------\n\nby Crell at 2012-06-23T17:01:43Z\n\nYou Symfony people and your gratuitous whitespace... :-P\n\nBoth fixed and rebased.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-23T17:25:31Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1689898) (merged 6b588eb3 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-23T17:26:06Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1689902) (merged abd74cf5 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-23T18:10:57Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1689975) (merged c3509446 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2012-06-24T07:11:12Z\n\n@Crell running [php-cs-fixer](http://cs.sensiolabs.org/) on your changes will prevent you from being stoffed :P about CS\n\n---------------------------------------------------------------------------\n\nby stof at 2012-06-24T09:34:24Z\n\n@mvrhov depends. The CS fixer will replace tabs with 4 spaces, but it will not fix it if using 2 spaces instead of 4. it cannot fix everything\n\n---------------------------------------------------------------------------\n\nby vicb at 2012-06-24T17:14:14Z\n\n@Crell what is your use case ?\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-25T06:59:00Z\n\nI'm not opposed to the change but what's the use case?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2012-06-25T11:22:01Z\n\nThis is semi related to ideas we have for the dynamic router in the CMF. The 2 main reasons for the existence of the dynamic router are:\n1) the fact that end users should be able to define new routes\n2) the fact that there might just be too many routes to dump those efficiently to PHP\n\nNow in some cases despite 1) the users might still want to dump key routes or even all routes as part of some deployment process to mod_rewrite or PHP when moving content from a staging database to a production database for better performance and reduced load on the database server.\n\nAlso even with the dynamic router it would be good to have tools available like ``app/console router:debug``.\n\nBut for both the use case of dumping some/all routes or when listing routes it might be necessary to implement some stop gap solutions to first check if this wouldn't lead to a too big collection. So it could be useful to be able to use whatever efficient solution the dynamic data store has for determining the count before starting to actually read the data from the data source.",
            "[Security] changed the HttpUtils constructor to tak both a UrlGenerator and a UrlMatcher instead of a Router (to make it useable by Silex)",
            "merged branch Wotre/master (PR #4640)\n\nCommits\n-------\n\n81d0552 Adding the database to the DSN we are sending to the MongoDB server\n\nDiscussion\n----------\n\nAdding the database to the DSN we are sending to the MongoDB server\n\nAdding the database to the DSN we are sending to the MongoDB server.\n\nAccording to the [documentation from PHP](http://be2.php.net/manual/en/mongo.construct.php) the database will default to admin if it isn't specified in this DSN. Unfortunately the username we're trying to login with shouldn't have access to this database.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-23T13:54:28Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1688817) (merged 2251be90 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-25T11:34:17Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1700214) (merged 45d0748b into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby Wotre at 2012-06-25T12:16:49Z\n\nIt looks to me like travisbot failed because of an error in the routing system that was fixed in c67cf8b56b, not because of the code I altered.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-25T16:45:12Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1702410) (merged aa659463 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-26T05:07:37Z\n\nCan you squash your commits before I merge? Thanks.\n\n---------------------------------------------------------------------------\n\nby Wotre at 2012-06-26T12:02:02Z\n\nI think I've managed to do that, but correct me if I've done something wrong :)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-26T12:05:19Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1710220) (merged dcb79089 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-26T12:14:28Z\n\n@Wotre Unfortunately, that's wrong. You can read how to do that in the contrib docs: http://symfony.com/doc/current/contributing/code/patches.html#rework-your-patch\n\n---------------------------------------------------------------------------\n\nby Wotre at 2012-06-26T12:37:59Z\n\nThanks for the help, looks like I forgot the -f when pushing. It should be okay now",
            "merged branch chEbba/templating-chain-loader-interface (PR #4676)\n\nCommits\n-------\n\n10e0b0b [Templating] Use LoaderInterface instead of abstract Loader in ChainLoader\n\nDiscussion\n----------\n\n[Templating] Use LoaderInterface instead of abstract Loader in ChainLoader\n\nThere is no code in ChainLoader required an instace of Loader class. All wiil be applicable for any LoaderInterface instance. This commit removes such limits.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-28T12:55:25Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1729112) (merged 10e0b0b2 into e8c0e078).",
            "merged branch acasademont/camelize_property_path_add_and_remove_methods (PR #4673)\n\nCommits\n-------\n\n9fabb3d [Form] Camelize 'add' and 'remove' methods in the PropertyPath\n\nDiscussion\n----------\n\n[Form] Camelize 'add' and 'remove' methods in the PropertyPath\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/acasademont/symfony.png?branch=camelize_property_path_add_and_remove_methods)](http://travis-ci.org/acasademont/symfony)\nFixes the following tickets: -\nLicense of the code: MIT\nDocumentation PR: -\n\nThis issue camelizes the 'add' and 'remove' methods, as it is already done with the 'set' method.\nThis fixes a problem with properties like 'custom_messages', where the 'add' and 'remove' methods are 'addCustom_message' and 'removeCustom_message' instead of 'addCustomMessage' and 'removeCustomMessage'.\n\n---------------------------------------------------------------------------\n\nby acasademont at 2012-06-27T18:16:36Z\n\nSeems the tests are failing due to some unrelated test in PHP 5.3.14 and PHP 5.4. PHP 5.3.3 works fine\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-27T18:38:39Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1722847) (merged 9fabb3dc into d0e15472).",
            "merged branch everzet/config-interface-check (PR #4659)\n\nCommits\n-------\n\nd4a0988 [FrameworkBundle] added configuration interface check\n\nDiscussion\n----------\n\n[FrameworkBundle] added configuration interface check\n\nAdded check for ConfigurationInterface to config ref dumping\ncommand. To ensure that configuration implements needed\n`getConfigTreeBuilder()` command\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-26T09:19:03Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1708744) (merged d4a09881 into d131f9d3).",
            "merged branch hason/translationrequest (PR #4650)\n\nCommits\n-------\n\n8ae0fa2 [FrameworkBundle] Fixed locale detection from request\n\nDiscussion\n----------\n\n[FrameworkBundle] Fixed locale detection from request\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-25T10:09:24Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1699743) (merged 8ae0fa21 into 03c8d4d2).",
            "[FrameworkBundle] removed duplicated line",
            "merged branch xavierlacot/master (PR #4680)\n\nCommits\n-------\n\ne44e21c Reverted to Symfony 2.0's signature, which made it simple to display only a subset of the routes of the application. This is particularly useful for FOSJsRoutingBundle's fos:js-routing:debug command, which allows to filter the list of javascript-exposed routes.\n\nDiscussion\n----------\n\nAllow to pass a routes list to RouterDebugCommand::outputRoutes()\n\nI just reverted to Symfony 2.0's signature, which made it simple to display only a subset of the routes of the application. This is particularly useful for FOSJsRoutingBundle's fos:js-routing:debug command, which allows to filter the list of javascript-exposed routes.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-28T16:41:31Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1730923) (merged e44e21c2 into 884a8264).\n\n---------------------------------------------------------------------------\n\nby willdurand at 2012-06-28T16:47:07Z\n\n:+1:",
            "merged branch fabpot/request-methods (PR #4679)\n\nCommits\n-------\n\ndf8d94e added Request::getSchemeAndHttpHost() and Request::getUserInfo() (closes #4312, refs #3416, refs #3056)\n\nDiscussion\n----------\n\nadded Request::getSchemeAndHttpHost() and Request::getUserInfo()\n\nsee #4312\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-28T15:22:03Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1730172) (merged 598bd56f into 0d275701).\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-06-28T15:22:35Z\n\nWhy not just `getSchemeAndHost`? That sounds long enough, and is fairly explicit given the context.\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-06-28T15:25:34Z\n\n@Seldaek because (and that's probably unfortunate) we have both `getHost()` and `getHttpHost()`. The former does not include the port whereas the latter does.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2012-06-28T15:26:42Z\n\nOk makes sense.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-28T16:11:16Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1730630) (merged df8d94e3 into 884a8264).",
            "fixed typo",
            "merged branch Partugal/patch-1 (PR #4690)\n\nCommits\n-------\n\n0b02e3c [FrameworkBundle] Removed unneeded parameter\n\nDiscussion\n----------\n\nRemove autortart parameter\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-30T09:25:37Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1742561) (merged 0b02e3ce into 741927ba).",
            "removed unneeded code",
            "[FrameworkBundle] removed the auto-starting of the session when a previous session exists (it is not needed anymore as the session is now always started on demand)",
            "[Routing] fixed indentation",
            "[Routing] removed trailing slash behavior on non-safe requests (refs #2626)",
            "merged branch flojon/patch-1 (PR #4638)\n\nCommits\n-------\n\neb26e89 [FrameworkBundle] Fix built-in server when using query params in paths\n\nDiscussion\n----------\n\n[FrameworkBundle] Fix built-in server when using query params in paths\n\n$_SERVER['REQUEST_URI'] will contain the query params so is_file will fail.\nI propose to use $_SERVER['SCRIPT_FILENAME'] instead which contains the full path and no query params.\n\n---------------------------------------------------------------------------\n\nby ajessu at 2012-06-23T10:17:34Z\n\nI was going to make this comment on your approach in #4484, but I'll make it here, since that issue is already closed.\n\nYour solution won't work on PHP 5.4.0, as `$_SERVER['SCRIPT_FILENAME']` will not be set [see PHP bug #60850](https://bugs.php.net/bug.php?id=60850).\n\nAlso PHP 5.4.1 and up, if you don't request a file explicitely, Ex:\n\n     http://localhost:8000/app_dev.php\n\nbut a location, Ex:\n\n    http://localhost:8000/\n\nThe value of the `$_SERVER['SCRIPT_FILENAME']` will be the router file, not the script name, which makes relying on `$_SERVER['SCRIPT_FILENAME']` inconsistent. [See this comment on the php bug](https://bugs.php.net/bug.php?id=60850#1331261652)\n\nI'm not sure if (nor how?) the issue of the params should be addressed on this  default  router, to not make it overly complex.\n\nFor your use case, and this is just my own early opinion without much thought, in case we can't come up with a general solution, there is always the option of defining your own router and passing it to the `server:run` command with `--router` like so:\n\n    php app/console server:run --router=app/config/my_own_router.php\n\n---------------------------------------------------------------------------\n\nby flojon at 2012-06-23T10:31:47Z\n\nSo would `$_SERVER['SCRIPT_NAME']` be more reliable? Like this:\n\n    if (is_file($_SERVER['DOCUMENT_ROOT'] . DIRECTORY_SEPARATOR . $_SERVER['SCRIPT_NAME'])) {\n        return false;\n    }\n\nI did a simple test and `$_SERVER['SCRIPT_NAME']` is set to `/` when accessing the root (using PHP 5.4.3).\n\n---------------------------------------------------------------------------\n\nby flojon at 2012-06-23T10:51:22Z\n\nBrowse around the code a bit and `$_SERVER['SCRIPT_NAME']` has been there since PHP 5.4.0:\nhttps://github.com/php/php-src/blob/php-5.4.0/sapi/cli/php_cli_server.c#L598\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-23T11:16:59Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1688361) (merged eb26e896 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-24T10:23:52Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1688043) (merged 71855665 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby CHH at 2012-06-29T07:17:32Z\n\nThis works fine for me!\n\n:+1:\n\nCould someone please merge this? This issue makes the `server:run` command currently quite unusable, because it can't load CSS for example which has a `?v=` parameter.\n\n---------------------------------------------------------------------------\n\nby ajessu at 2012-06-29T08:25:14Z\n\n:+1: from me also. Works just like `$_SERVER['REQUEST_URI']`, but doesn't include the params.\n\nTested working on PHP 5.4.0 and 5.4.3.",
            "merged branch kriswallsmith/form/mv-humanize (PR #4645)\n\nCommits\n-------\n\nc1e4166 moved create of default form label to view layer\n\nDiscussion\n----------\n\nmove create of default form label to view layer\n\nA small optimization if you provide custom labels in the view layer (i.e. `{{ form_label(form.name, 'Your name') }}`\n\n```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: ~\nTodo: ~\nLicense of the code: MIT\nDocumentation PR: ~\n```\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-24T14:45:17Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1694310) (merged 37f0b774 into 0d4b02e4).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-24T15:03:44Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1694418) (merged c1e4166e into 0d4b02e4).",
            "[FrameworkBundle] fixed client insulation (closes #1726, closes #4608)",
            "merged branch Tobion/requestmatcher (PR #4582)\n\nCommits\n-------\n\n7464dcd added phpdoc\nc413e7b [Routing] remove RequestContextAwareInterface from RequestMatcherInterface\n921be34 [Routing] fix phpdoc\n\nDiscussion\n----------\n\n[Routing] RequestMatcherInterface doesn't need context\n\nMatchers that implement RequestMatcherInterface should match a Request, thus they don't need the request context.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-14T21:39:48Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1624496) (merged f5ff1fe0 into 7c91ee57).\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-06-15T13:32:59Z\n\nI think it makes sense to remove the RequestContext from the RequestMatcher.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-15T15:54:28Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1628931) (merged 7464dcd2 into f881d282).\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-06-26T12:32:06Z\n\nAnything missing?",
            "merged branch jalliot/load-class-cache (PR #4542)\n\nCommits\n-------\n\nf09789b [FrameworkBundle] Generate the class cache when warming up the cache\n\nDiscussion\n----------\n\n[FrameworkBundle] Generate the class cache when warming up the cache\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/jalliot/symfony.png?branch=load-class-cache)](http://travis-ci.org/jalliot/symfony)\nFixes the following tickets: -\nTodo: -\n\nWith this PR, the commands `cache:clear` (if `--no-warmup` hasn't been specified) and `cache:warmup` generate the class cache. Now the first page load after clearing the cache does not take over one second anymore :)\nOf course, if someone does not want to use the class cache for whatever reason, he can always remove the `$kernel->loadClassCache()` in his front controller and the cache will just be ignored...\n\nOn a side note, can someone explain why [SensioDistributionBundle does not warmup the cache in the Composer post-install script](https://github.com/sensio/SensioDistributionBundle/blob/master/Composer/ScriptHandler.php#L48)?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-10T05:18:30Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1579114) (merged baecbaee into 6266b72d).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-10T05:24:48Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1579154) (merged f09789b1 into 6266b72d).\n\n---------------------------------------------------------------------------\n\nby jalliot at 2012-06-28T23:18:54Z\n\n@fabpot ping",
            "merged branch dlsniper/session-start-fix (PR #4541)\n\nCommits\n-------\n\nf72ba0a Fixed detection of an active session\n\nDiscussion\n----------\n\n[WIP][HttpFoundation][Session] Fixed detection of an active session\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: not sure\nSymfony2 tests pass: no\nFixes the following tickets: #4529\nTodo: Fix failing tests\nLicense of the code: MIT\nDocumentation PR: ~\n\nThis fixes the problem when the session variable inside $request now has always data in it as it's now more powerful but this introduces the problem that the old way of detecting if a session is started or not doesn't work anymore.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-09T21:53:17Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1578839) (merged 9ae13e12 into 6266b72d).\n\n---------------------------------------------------------------------------\n\nby drak at 2012-06-10T01:57:59Z\n\nSessions should be started implicitly. The SF auto_start config parameter controls the session listener to start the session.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-11T06:46:02Z\n\nSo this patch is correct then and I should continue the work on it?\n\n---------------------------------------------------------------------------\n\nby drak at 2012-06-11T07:51:39Z\n\n@dlsniper - no it's not correct.  The session should not be auto-started like this, @fabpot and I recently discussed it.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-11T07:52:55Z\n\n@Drak, ok I'll remove the patch for auto_start then but the fix for start would still stand, right?\n\n---------------------------------------------------------------------------\n\nby drak at 2012-06-12T18:40:35Z\n\n@dlsniper - I have no objection to the rest of the PR except for the autostart stuff.  I've annotated for clarity :)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-12T19:51:12Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1604158) (merged 3499980e into 37550d23).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-12T19:52:00Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1604166) (merged dcc73071 into 37550d23).\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-12T19:56:51Z\n\nSeems Travis doesn't like the squashing of commits that I've did but the PR does pass the normal tests.\n@drak is this good for merging now?\n\nThanks :)\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-13T09:05:09Z\n\n@fabpot this can be merged safely, I've just applied the patch on my production application and the patch is ok, it's just travis failing.\n\nThanks\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-13T09:23:46Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1608735) (merged 1a6eabd2 into 37550d23).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-13T09:28:26Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1608758) (merged 4e3a93c8 into 37550d23).\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-13T09:29:28Z\n\nI've noticed that this is failing, I'll fix it later on today.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-13T15:14:01Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1611541) (merged 5504c4b7 into 37550d23).\n\n---------------------------------------------------------------------------\n\nby drak at 2012-06-13T15:23:47Z\n\nIt's possible that other tests are failing not related to this PR. Run the tests on the current master, and try rebasing your branch to the current master also.\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-13T15:44:22Z\n\nI've just reminded why this is failing on builds, I can't do them locally because of this:\n```\nInstalling dev dependencies\nYour requirements could not be solved to an installable set of packages.\n\n        Problems:\n                - Problem caused by:\n                        - Installation request for doctrine/orm [>= 2.2.0.0, < 2.4.0.0-dev]: Satisfiable by [doctrine/orm-2.2.2, doctrine/orm-2.2.1, doctrine/orm-2.2.0, doctrine/orm-2.2.x-dev, doctrine/orm-2.3.x-dev].\n```\n\nI'll try and install this somehow and see what's wrong with it.\n\n---------------------------------------------------------------------------\n\nby mvrhov at 2012-06-13T18:08:58Z\n\n@dlsniper: as @stof said to me this should be resolved in latest versions of composer, but it seems that is not. The problem is that composer cannot figure out that you are on dev-master if you try to instal dev. dependencies on feature branch. Take a look at the .travis.yml file on how to do a proper dev vendors install.\ncc @Seldaek\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-13T23:08:53Z\n\n@mvrhov Thanks for pointing this out.\n\n@drak I still got two tests not passing but I'm not sure how to fix them as adding $session->start() will either fail with the message that the session has already been started, the headers_sent() call which returns true. Any help with them will be greatly appreciated. Thanks!\n\nHere is what the HttpKernel tests are returning:\n```\nThere were 2 failures:\n\n1) Symfony\\Component\\HttpKernel\\Tests\\EventListener\\LocaleListenerTest::testDefaultLocaleWithSession\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'es'\n+'fr'\n\n/var/www/symfony-orig/src/Symfony/Component/HttpKernel/Tests/EventListener/LocaleListenerTest.php:51\n\n2) Symfony\\Component\\HttpKernel\\Tests\\EventListener\\LocaleListenerTest::testLocaleFromRequestAttribute\nExpectation failed for method name is equal to <string:set> when invoked 1 time(s).\nMethod was expected to be called 1 times, actually called 0 times.\n\nFAILURES!\nTests: 263, Assertions: 1025, Failures: 2, Skipped: 10.\n```\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-13T23:42:59Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1614883) (merged 1004b7c0 into c07e9163).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-06-13T23:53:06Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1614897) (merged f72ba0a2 into c07e9163).\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-16T20:14:41Z\n\n@stof / @vicb Hi, do either of you think that you can either point me out to the right direction for fixing this either ping someone else for home help as @drak doesn't seem available for this and at the moment I'm pretty much clueless in what direction I should take this fix.\n\nThanks!\n\n---------------------------------------------------------------------------\n\nby dlsniper at 2012-06-19T14:16:29Z\n\nping @fabpot Can you please provide some input on this one as I'm a bit stuck and seems noone else is available.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-06-20T10:24:43Z\n\nfyi - I'll be able to look again in a few days\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-07-01T07:53:28Z\n\nI'm +1 to add the `isStarted()` method, but -1 for the change of `Request::hasSession`.\n\n---------------------------------------------------------------------------\n\nby drak at 2012-07-01T09:06:15Z\n\n@fabpot, I agree. `hasSession()` should not be changed, it's semantically incorrect to make it return effectively  hasActiveSession .",
            "merged branch SamsonIT/fix_dutch_translations (PR #4702)\n\nCommits\n-------\n\n6e168cd fixed dutch translations\n\nDiscussion\n----------\n\nfixed dutch translations\n\nmostly reverts a859f7\n\ne-mailadres: http://www.onzetaal.nl/taaladvies/advies/e-mailadres-emailadres\n waarde  is not a neutral word, so it cannot be referred to as  het \n verwachte  here is an adjective, not a verb - http://www.leestrainer.nl/Leerlijn%20werkwoorden/als%20bijvnm%20schrijven.htm",
            "merged branch avorobiev/fix1 (PR #4708)\n\nCommits\n-------\n\n036c15e [DependencyInjection] Unescape class arguments part 2\n19bdae1 [DependencyInjection] Fixed unescaping of class arguments\n\nDiscussion\n----------\n\n[DependencyInjection] Fixed unescaping of class arguments\n\nhttps://github.com/symfony/symfony/pull/4707",
            "merged branch stof/allow_doctrine_2_3 (PR #4350)\n\nCommits\n-------\n\n0581c3a Added missing dependency to doctrine common in the global composer.json\ncdfb0b1 Changed composer constraint to allow Doctrine 2.3 too\n\nDiscussion\n----------\n\nChanged composer constraint to allow Doctrine 2.3 too\n\nThis allows both the 2.2.x and 2.3.x series for the Doctrine constraints instead of restricting to 2.2.x (thus allowing me to allow Doctrine 2.3 in DoctrineBundle too).\n\nIt also fixes some constraint that were missed when bumping the requirement to Doctrine 2.2 and added the missing deps in the global file (FrameworkBundle declares its dependency to ``doctrine/common`` for the ``annotation_reader`` service but it was not declared in the global file)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-20T20:36:06Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1383231) (merged 0581c3a5 into 1407f112).\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-20T20:56:18Z\n\nThe failure is because the doctrine ORM does not allow Doctrine Common 2.2.x but only stable releases (see doctrine/doctrine2#351 fixing it) and Composer seems to resolve dev dependencies by considering all previous resolved deps as fixed whereas downgrading common to 2.2.2 could have worked to satisfy all deps\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-21T05:56:56Z\n\nSo, I cannot merge this until the composer bug is fixed (ping @naderman)\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-21T07:00:29Z\n\nyou could merge it now. The PR to the ORM has been merged so the composer.json is not triggering the issue anymore",
            "merged branch davidwindell/issue_4338 (PR #4357)\n\nCommits\n-------\n\n0a3dd0f [Console] Check for existence of proc_open to fix #4338\n\nDiscussion\n----------\n\n[Console] Check for existence of proc_open to fix #4338\n\nIt is quite common to disable proc_open for security purposes.\n\nThis PR checks for the existence of the proc_open function and fixes Issue #4338\n\nReplacement for PR4356\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T10:49:59Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1387784) (merged dd991bea into 1407f112).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T11:35:21Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1387991) (merged 0a3dd0fe into 1407f112).\n\n---------------------------------------------------------------------------\n\nby fabpot at 2012-05-21T12:17:32Z\n\nI forgot to ask you to sent a new PR for the 2.0 branch instead of master. Thanks.\n\n---------------------------------------------------------------------------\n\nby davidwindell at 2012-05-21T13:03:36Z\n\nproc_open is not used in 2.0?",
            "Merge branch '2.0'\n\n* 2.0:\n  fixed CS\n  [HttpFoundation] Fix the UploadedFilename name sanitization (fix #2577)",
            "merged branch bschussek/issue3903 (PR #4341)\n\nCommits\n-------\n\n1422506 [Form] Clarified the usage of  constraints  in the UPGRADE file\naf41a1a [Form] Fixed typos\nac69394 [Form] Allowed native framework errors to be mapped as well\n59d6b55 [Form] Fixed: error mapping aborts if reaching an unsynchronized form\n9eda5f5 [Form] Fixed: RepeatedType now maps all errors to the first field\n215b687 [Form] Added capability to process  .  rules in  error_mapping \nc9c4900 [Form] Fixed: errors are not mapped to unsynchronized forms anymore\nc8b61d5 [Form] Renamed FormMapping to MappingRule and moved some logic there to make rules more extendable\nd0d1fe6 [Form] Added more information to UPGRADE and CHANGELOG\n0c09a0e [Form] Made $name parameters optional in PropertyPathBuilder:replaceBy(Index|Property)\n081c643 [Form] Updated UPGRADE and CHANGELOG\nbbffd1b [Form] Fixed index checks in PropertyPath classes\nea5ff77 [Form] Fixed issues mentioned in the PR comments\n7a4ba52 [EventDispatcher] Added class UnmodifiableEventDispatcher\n306324e [Form] Greatly improved the error mapping done in DelegatingValidationListener\n8f7e2f6 [Validator] Fixed: @Valid does not recurse the traversal of collections anymore by default\n5e87dd8 [Form] Added tests for the case when  property_path  is null or false. Instead of setting  property_path  to false, you should set  mapped  to false instead.\n2301b15 [Form] Tightened PropertyPath validation to reject any empty value (such as false)\n7ff2a9b Revert  [Form] removed a constraint in PropertyPath as the path can definitely be an empty string for errors attached on the main form (when using a constraint defined with the 'validation_constraint' option) \n860dd1f [Form] Adapted Form to create a deterministic property path by default\n03f5058 [Form] Fixed property name in PropertyPathMapperTest\nc2a243f [Form] Made PropertyPath deterministic:  [prop]  always refers to indices (array or ArrayAccess),  prop  always refers to properties\n2996340 [Form] Extracted FormConfig class to simplify the Form's constructor\n\nDiscussion\n----------\n\n[Form] Improved the error mapping and made property paths deterministic\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: **yes**\nSymfony2 tests pass: yes\nFixes the following tickets: #1971, #2945, #3272, #3308, #3903, #4329\nProbably fixes: #2729\nTodo: -\n\nThis PR is ready for review.\n\nThe algorithm for assigning errors to forms in the form tree was improved a lot. Also the error mapping works better now. There are still a few features to be added (e.g. wildcards  * ), but these can be implemented now pretty easily.\n\nThis PR breaks PR in that a form explicitely needs to set the  data_class  option if it wants to map to an object and needs to leave that option empty if it wants to map to an array.\n\nFurthermore, property paths must be deterministic now: `foo` now only maps to `(g|s)etFoo()`, but not the index `[ foo ]` (array or ArrayAccess), while `[foo]` only maps to the latter but not the former. See #3903 for more information.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-19T21:35:24Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1377086) (merged 9e346990 into 22294617).\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-20T01:47:48Z\n\nGood stuff in general :)\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-20T09:19:18Z\n\nFixed everything mentioned here so far.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-20T09:22:22Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1379548) (merged 49918bef into 22294617).\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-20T14:29:14Z\n\nmany occurences of two spaces after `@param` (should be only one space).\n\n---------------------------------------------------------------------------\n\nby Koc at 2012-05-20T14:40:18Z\n\nSorry, I'm cannot observe all changes for form component in 2.1, so I have a question:\n\n```php\n<?php\n\nprotected $isPrivate;\n\npublic function isPrivate() {}\n\npublic function setPrivate() {}\n```\n\nIs it possible validate this property with accessors/mutators from code above in 2.1 now?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-20T14:41:09Z\n\nThe type after `@param` used to be aligned with the type of the `@return` tag. Let's get the PHPDoc-guidelines straight before nitpicking more on these trivialities.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-20T14:42:34Z\n\n@Koc Please move your question to the user mailing list, let's keep this PR on topic.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-20T14:45:42Z\n\nFixed everything mentioned until now.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-20T14:47:48Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1380903) (merged 03d60a03 into f433f6b0).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-20T15:18:12Z\n\nCHANGELOG/UPGRADE is now updated.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-20T15:19:39Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1381047) (merged 48cc3eca into f433f6b0).\n\n---------------------------------------------------------------------------\n\nby Tobion at 2012-05-20T16:16:51Z\n\nAll the deprecated methods and changed constructor arguments should probably be mentioned in the changelog/upgrade.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T07:31:47Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1386621) (merged c0ef69a1 into 1407f112).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T08:01:46Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1386826) (merged 4f3fc1fe into 1407f112).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T09:22:30Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1387263) (merged e3675050 into 1407f112).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-21T09:43:08Z\n\nThis PR now fixes #1971.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T09:45:51Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1387370) (merged de33f9ef into 1407f112).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T11:06:53Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1387838) (merged da3b562e into 1407f112).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-21T11:07:45Z\n\nThis PR now fixes #2945.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-21T15:33:33Z\n\nNative errors (such as  invalid ,  extra_fields  etc.) are now respected by the  error_mapping  option as well. The option  validation_constraint  was deprecated,  constraints  is its replacement and a lot handier, because it allows you to work easily with arrays.\n\n```php\n<?php\n$builder\n    ->add('name', 'text', array(\n        'constraints' => new NotBlank(),\n    ))\n    ->add('phoneNumber', 'text', array(\n        'constraints' => array(\n            new NotBlank(),\n            new MinLength(7),\n            new Type('numeric')\n        )\n    ));\n```\n\nReady for review again.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T15:33:45Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1390239) (merged e162f56d into ea33d4d3).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T15:40:02Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1390367) (merged e8729a7f into ea33d4d3).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-21T16:06:03Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1390663) (merged ef39aba4 into ea33d4d3).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T08:54:36Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1398153) (merged af41a1a5 into e4e3ce6c).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T09:26:12Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1398415) (merged 14225067 into e4e3ce6c).",
            "merged branch aripringle/master (PR #4333)\n\nCommits\n-------\n\n4fa8e68 Add support for javascript object notation in allowed JSONP callback\n\nDiscussion\n----------\n\nAdd support for javascript object notation in allowed JSONP callback\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T23:09:45Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1371497) (merged 4fa8e68c into 18132c18).",
            "merged branch Tobion/router-parameter (PR #4369)\n\nCommits\n-------\n\nbc7043f [Routing] removed unused constructor arguments in test classes\nd81fdfe [Routing] fixed namespace of test classes\n53aaf76 [Routing] removed unused property of Router\n\nDiscussion\n----------\n\n[Routing] removed unused property of Router\n\nTest pass: yes\nBC break: no\n\nThis PR removes an unused property ($defaults) of Router. The property was passed to the constructor of UrlMatcher and UrlGenerator although these classes don't accept this parameter at all. And the dumped equivalents of them (produced by PhpMatcherDumper/PhpGeneratorDumper) don't need this property either.\nSo passing the $defaults was wrong and the property is not used in any way.\nThe DI config does not define anything for this property either: [routing.xml](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Resources/config/routing.xml#L52)\n\nThe second commit fixes the namespaces of test classes that were wrong.\n\nThe third commit removes false arguments in the test classes.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T07:34:03Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1397749) (merged bc7043f1 into e4e3ce6c).",
            "merged branch simon-n/master (PR #4321)\n\nCommits\n-------\n\n46be121 added tokenDataExists() method to prevent loading complete profile structures upon writes\n\nDiscussion\n----------\n\n[HttpKernel] prevent loading complete profile structures upon writes\n\nThe abstract class  PdoProfilerStorage  uses its ::read() method to decide if a profiler record has to be updated or initially created upon a ::write() call. This possibly causes huge memory consumption, as ::read() recursively reads all existing profiles using ::createProfileFromData() calls. When handling many sub-request this may lead into either a  out of memory  or XDebug's  maximum nesting level reached  - whichever comes first.\nTo prevent this issue, I added a new protected method ::tokenDataExists() that simply checks whether a record for the token in question already exists in storage.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T08:56:56Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1364303) (merged 46be1212 into 1e15f210).",
            "[HttpKernel] renamed a method",
            "merged branch yethee/ru_plural_trans (PR #4291)\n\nCommits\n-------\n\n2f05b40 [FrameworkBundle] Added Russian translations for CollectionSize constraint\nd10f33f [FrameworkBundle] Added Russian plural messages\n\nDiscussion\n----------\n\n[FrameworkBundle] Added Russian plural messages\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-15T09:10:46Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1334630) (merged d10f33f2 into bd07b891).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-16T13:06:49Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1345310) (merged 2f05b40f into 5314836d).",
            "merged branch pkraeutli/browserkit_use_cleanup (PR #4324)\n\nCommits\n-------\n\nfe7b258 Removed unnecessary use statements\n\nDiscussion\n----------\n\n[BrowserKit] Removed unnecessary use statements\n\nMerely a cosmetical fix. My IDE (PhpStorm) marks the `use Symfony\\Component\\BrowserKit\\Client;` statement in  `Symfony/Component/BrowserKit/Client.php` itself as an error.\nI also removed the two other `use`s of classes from the same namespace.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T11:27:02Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1365455) (merged fe7b2583 into 1e15f210).",
            "merged branch andrefgneves/translate-widget-attributes (PR #4194)\n\nCommits\n-------\n\n23bad29 Added translation to placeholder and title attributes\n\nDiscussion\n----------\n\nAdded translation to placeholder and title attributes\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-05-03T13:52:38Z\n\nBetter translate it where it is defined.\n\nDynamic translations are usually not desirable as they cannot be automatically extracted, and thus require more work.\n\n---------------------------------------------------------------------------\n\nby ruimarinho at 2012-05-03T13:57:30Z\n\n@schmittjoh but isn't that the same case as with labels for instance? I don't think injecting the translator service into the form type would require less work than what this PR suggests.\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2012-05-03T14:02:02Z\n\nYeah, same thing.\n\nThere might be some cases where it's fine, but in general, we should try to not translate dynamic vars.\n\n---------------------------------------------------------------------------\n\nby ruimarinho at 2012-05-03T14:17:44Z\n\n@schmittjoh I think that's one of those cases, since these attributes in particular (title and placeholder) are intended to aid the user with a brief description. I understand (and agree) with your concern regarding dynamic vars, but in my opinion this is a use case where it is worth it. Just my two cents :)\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-03T18:07:01Z\n\n@schmittjoh the issue is that translating the label before the template would require injecting the translator in the form types (as the form label can be set there) and would force the user to duplicate the translation process if they pass the label explicitly in the template.",
            "added the possibility to translate the placeholder and title attributes in the PHP form templates (refs #4194)",
            "merged branch kevindew/form_view_errors (PR #4224)\n\nCommits\n-------\n\ne92212a [Form] Added valid attribute to a FormView\n\nDiscussion\n----------\n\n[Form] Added  valid  to view parameters\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets:\nTodo:\nLicense of the code: MIT\nDocumentation PR:\n\nThis PR adds a parameter of contains_errors to a FormView when buildView is called.\n\nThe use case for this addition is when you want to show that a form or sub forms has errors (e.g. when rendering a long form a header message of  This form contains errors  or adding a class to a whole sub form to show an erroneous state) is currently very difficult/near impossible and may need the original form object being accessible in the view layer.\n\nWhats a bit grey here is the best phrasing to use for this. Options I weighed up were is_valid (seemed a bit semantically incorrect in a template, since it would return true pre bind) and has_errors_deep (which i wasn't sure if it fitted naming conventions).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-07T20:25:55Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1269345) (merged fe1f5aee into 919604ab).\n\n---------------------------------------------------------------------------\n\nby henrikbjorn at 2012-05-19T18:36:33Z\n\ncouldnt you just use `{% if errors %}` in your views?\n\n---------------------------------------------------------------------------\n\nby stof at 2012-05-19T19:17:20Z\n\n@henrikbjorn ``errors`` contains only the errors attached to the form itself. It will not tell you when there is some errors in a child form.\n\n---------------------------------------------------------------------------\n\nby kevindew at 2012-05-22T10:43:45Z\n\nSure, done\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T10:45:12Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1399006) (merged 9f6658d4 into 517ae43f).\n\n---------------------------------------------------------------------------\n\nby kevindew at 2012-05-22T10:57:54Z\n\nShoot, sorry about that.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T11:00:00Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1399096) (merged 88920591 into 517ae43f).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-22T11:17:38Z\n\nCan you squash the commits and prefix the message with  [Form]  please?\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T11:49:52Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1399390) (merged ca771822 into 517ae43f).\n\n---------------------------------------------------------------------------\n\nby kevindew at 2012-05-22T11:53:18Z\n\nSure, done (I've sorted the travis fail btw)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T11:55:10Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1399404) (merged e92212ac into 517ae43f).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-22T12:25:45Z\n\n@fabpot :+1:",
            "merged branch zerkalica/master (PR #4328)\n\nCommits\n-------\n\nc688166 [Form] fixing form type translation_domain inheritance fixed bug with parent property fix is_required field fixed subform translation_domain inheritance some translation_domain inheritance code refactoring added form type translation_domain inheritance tests changed methods place in form type test changed arguments in createNamed method call in FormTypeTest\n\nDiscussion\n----------\n\nFormType translation_domain inheritance\n\nFixes: #3286, #3872, #3938\n\nI found bug in form type parameters inheritance. It's better to inherit some child form element options from parent: translation_domain, required.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T13:11:45Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1366275) (merged afc32247 into 1e15f210).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T13:14:46Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1366288) (merged 1794dc79 into 1e15f210).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T13:54:41Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1366673) (merged 2f5d0377 into 1e15f210).\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-18T14:53:58Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1367306) (merged a4027f38 into 1e15f210).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-20T14:55:14Z\n\nThis PR has a few outstanding issues and is missing some tests (check read_only tests in FormTypeTest). Otherwise this looks good.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T04:48:47Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1396892) (merged 68534d7e into 1e15f210).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-22T07:36:47Z\n\nLooks good. Could you please squash your commits into one commit (git rebase -i) and add the prefix  [Form]  to the message of that commit?\n\n---------------------------------------------------------------------------\n\nby zerkalica at 2012-05-22T09:36:33Z\n\nOk, but how to push rebased branch ? Use forced push (git push origin :master) or make new branch and new pull request ?\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-22T09:43:15Z\n\n    git push -f origin master\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-22T09:53:13Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1398573) (merged 05a57095 into e4e3ce6c).\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-22T09:56:29Z\n\nCould you please add a test to FormTypeTest to verify that this actually works? The test already contains tests for the  read_only  functionality that can serve you as template.\n\n---------------------------------------------------------------------------\n\nby bschussek at 2012-05-25T06:26:26Z\n\nYou need to rebase the branch on symfony master so that it becomes mergable:\n\n    git rebase symfony/master\n\nAlso, please squash the 8 commits into one.\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T17:23:01Z\n\nThis pull request [fails](http://travis-ci.org/symfony/symfony/builds/1435037) (merged 57ee25a1 into ff4d446c).",
            "merged branch Tobion/pp-refactor (PR #4418)\n\nCommits\n-------\n\ne673a04 [OptionsResolver] clarify phpdoc\n0cac404 [Form] refactored PropertyPth\n\nDiscussion\n----------\n\nPropertyPath refactoring + CS fix\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T21:49:01Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1437257) (merged e673a041 into ff4d446c).",
            "merged branch yethee/form_cleanup (PR #4417)\n\nCommits\n-------\n\nb4e2818 [Form] Using new methods instead of the deprecated\n\nDiscussion\n----------\n\n[Form] Using new methods instead of the deprecated\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T21:05:11Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1436891) (merged b4e28186 into ff4d446c).",
            "merged branch shieldo/patch-5 (PR #4415)\n\nCommits\n-------\n\n3c507ee fixed CS (whitespace)\n\nDiscussion\n----------\n\nfixed CS (whitespace)\n\n---------------------------------------------------------------------------\n\nby travisbot at 2012-05-25T17:50:41Z\n\nThis pull request [passes](http://travis-ci.org/symfony/symfony/builds/1435274) (merged 3c507ee4 into ff4d446c).",
            "[TwigBundle] updated CHANGELOG",
            "moved LocaleListener and RouterListener to the HttpKernel component",
            "[HttpKernel] made RouterListener implement EventSubscriberInterface",
            "[FrameworkBundle] fixed wrong class name",
            "[Translation] made the MessageSelector constructor argument for Translator optional (using a custom one is pretty rare)",
            "merged branch alexandresalome/file-storage-children-fix (PR #2368)\n\nCommits\n-------\n\nba6bd4b [HttpKernel] Fix the FileProfileStorage, according to the tests\n1654473 [HttpKernel] Create a test to outline the problem with file storage\n\nDiscussion\n----------\n\n[HttpKernel] Fix the file storage\n\nThe file storage was not correctly fetching children back.\n\n* First the test showing the problem\n* Second the fix to the test\n\nSolution is to add a file for each stored profile file, containing the list of children tokens.",
            "merged 2.0",
            "Merge branch '2.0'\n\n* 2.0:\n  [HttpKernel] fixed profile saving when it has children",
            "[HttpKernel] fixed file profile storage when trying to read an empty token",
            "[HttpKernel] fixed profiler file storage for children",
            "Merge branch '2.0'\n\n* 2.0:\n  [BrowserKit] fixed cookie updates from Response (the URI here is not the base URI, so it should not be used to determine the default values missing in the cookie, closes #2309)",
            "merged branch hhamon/type_validator_fix (PR #2379)\n\nCommits\n-------\n\n73312ab [Validator] The Type constraint now accepts the  Boolean  type instead of  boolean .\n\nDiscussion\n----------\n\n[Validator] The Type constraint now accepts the  Boolean  type instead of\n\n[Validator] The Type constraint now accepts the  Boolean  type instead of  boolean .\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\n---------------------------------------------------------------------------\n\nby stloyd at 2011/10/11 03:43:24 -0700\n\nAs this is bugfix only, this should be made againts __2.0__ branch.\n\n---------------------------------------------------------------------------\n\nby hhamon at 2011/10/11 05:03:52 -0700\n\n@stloyd I don't really know if it's a bug fix or an improvement. We could not use  Boolean  but we could use  boolean  or  bool  only. So that's why I just improved this constraint validator.",
            "merged branch schmittjoh/interBundleExtensibility (PR #2349)\n\nCommits\n-------\n\n1b57727 removed unused use statements\nfd67c78 updated implementation to re-use the existing build() method\n59e2e97 improves extensibility between bundles\n\nDiscussion\n----------\n\n[RFC] Improving extensibility between bundles\n\nThis is a quick draft for improving extensibility between different bundles.\n\nThe idea behind this is that an extension can provide configurable settings that other bundles can change.\n\n---------------------------------------------------------------------------\n\nby Seldaek at 2011/10/07 13:28:13 -0700\n\nI am not yet sure what I would use it for, but I like the idea.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/10/07 13:45:19 -0700\n\ncan you show a bit more how to use this?\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/10/07 13:47:38 -0700\n\noh it appears this is an example?\n\nhttps://github.com/schmittjoh/JMSSerializerBundle/commit/f4e76640a07bc41d8e75a0433710143e19e302bc#diff-9\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/10/07 13:57:00 -0700\n\nyes\n\nOn Fri, Oct 7, 2011 at 10:47 PM, Lukas Kahwe Smith <\nreply@reply.github.com>wrote:\n\n> oh it appears this is an example?\n>\n>\n> https://github.com/schmittjoh/JMSSerializerBundle/commit/f4e76640a07bc41d8e75a0433710143e19e302bc#diff-9\n>\n> --\n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/2349#issuecomment-2328078\n>\n\n---------------------------------------------------------------------------\n\nby schmittjoh at 2011/10/11 01:11:39 -0700\n\n@fabpot, do you have an opinion on this, :+1: :-1:?",
            "updated CHANGELOG for 2.1",
            "merged branch lsmith77/ManagerRegistry (PR #2244)\n\nCommits\n-------\n\ndc5772d use ORM master\n4364463 use doctrine-common master\n55b572d fixed getting the alias for a namespace\n2b89e15 use getObjectNamespace() in getEntityNamespace()\n0217a0e updated base class name\ne8f3c21 updated vendors to point to lsmith77's fork of doctrine-common until its merged\n6e87d01 fix tests\n13c2f33 added a default implementation of the ManagerRegistry integrating the container\n\nDiscussion\n----------\n\n[Doctrine] added a default implementation of the ManagerRegistry\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: yes (minor change in the interface see below)\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nadded a default implementation of the ManagerRegistry integrating the container\n\nattempted to maintain BC as good as possible, but RegistryInterface::getRepository() had to be dropped from RegistryInterface. Its still part of the ManagerRegistry, so its only a BC break for people using RegistryInterface to create their own implementation as I ran into https://bugs.php.net/bug.php?id=43200\n\nall implementation (ORM/ODM) will need to match the changes to the ClassMetadataFactory interface\n\nORM, PHPCR, CouchDB have been upgraded already.\nThe Bundles also need to be updated. ORM is covered with this PR, I have a PR ready for PHPCR:\nhttps://github.com/symfony-cmf/symfony-cmf/pull/108\n\nalso note that before merging the change to vendors.php needs to be fixed to point to the right repo again\n\nFor MongoDB it currently does not yet have a registry and I can take care of CouchDB once this is all merged.\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/23 00:40:07 -0700\n\nstill a few failing tests and details still need to be discussed ..\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/09/23 00:53:23 -0700\n\nok .. tests are passing now\n\n---------------------------------------------------------------------------\n\nby lsmith77 at 2011/10/11 10:27:52 -0700\n\nok Doctrine/ORM updates are done .. PR updated .. ready to be merged.",
            "updated CHANGELOG for 2.1",
            "updated vendors",
            "merged branch hhamon/command_fix (PR #2411)\n\nCommits\n-------\n\n64d970e [FrameworkBundle] removed  use  statements for unused classes.\n\nDiscussion\n----------\n\n[FrameworkBundle] removed  use  statements for unused classes.\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -",
            "merged branch stof/router_check (PR #2409)\n\nCommits\n-------\n\n63d2ce2 [FrameworkBundle] Fixed the ckeck for the router class\n\nDiscussion\n----------\n\n[FrameworkBundle] Fixed the ckeck for the router class\n\nThe getRouteCollection method is now part of the RouterInterface so the\ncommand should accept any implementation of the interface instead of just\nthe implementations extending the core one.",
            "merged branch lsmith77/use_stmt_cleanups (PR #2408)\n\nCommits\n-------\n\n18cca22 cleaned up the use statements in the Registry class and RegistryInterface\n\nDiscussion\n----------\n\ncleaned up the use statements in the Registry class and RegistryInterface\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\njust cosmetics ..",
            "merged branch stof/doctrine_registry (PR #2410)\n\nCommits\n-------\n\n9546ee6 Removed the IndexedReader\nea2cf73 Refactored the validator initializer\nc6063ec [DoctrineBundle] Updated the code to use the new registry\na1784c2 [DoctrineBridge] Updated the code to use the new registry\n\nDiscussion\n----------\n\nDoctrine registry\n\nThis updates the Doctrine bridge and DoctrineBundle to use the new ManagerRegistry interface and its methods instead of using the old methods which are marked as deprecated.",
            "[DoctrineBundle] fixed PHPDoc",
            "Merge branch '2.0'\n\n* 2.0:\n  [HttpKernel] fixed typo",
            "[WebProfilerBundle] tweaked the default layout to make more room for interesting content",
            "merged branch richardmiller/fixing_debug_command_output (PR #2420)\n\nCommits\n-------\n\n1768544 Changed debug output to say Service Id rather than name for the service ids\n\nDiscussion\n----------\n\nChanged debug output to say Service Id rather than name for the service i\n\nChanged debug output to say Service Id rather than name for the service ids",
            "merged branch richardmiller/adding_info_to_container_debug (PR #2426)\n\nCommits\n-------\n\n79638d3 Removed abstract as these services will not appear anyway\n312b20f [FrameworkBundle] Added more info to debug command output\n\nDiscussion\n----------\n\n[FrameworkBundle] Added more info to debug command output\n\n---------------------------------------------------------------------------\n\nby stof at 2011/10/18 05:57:59 -0700\n\nThis commands uses the optimized container so abstract services will never appear there.",
            "[BrowserKit] added the standard output when an error occurs during the request execution (it might contain very useful information for debugging)",
            "[HttpKernel] added a Stopwatch",
            "[Form] removed validation.xml file (not used anymore)",
            "[Form] tweaked Date time transformer to allow fields with 0 as hour/minute/...",
            "[Form] added a unit tests for previous commit",
            "[Form] added a way to specify the form constraint when building the form (useful if you work with arrays instead of objects)",
            "[Form] added a unit test",
            "[FrameworkBundle] made sure that the debug event dispatcher is used everywhere",
            "merged branch Tobion/request-stack-bc (PR #9059)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[HttpKernel] made request stack feature BC\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | #8904 see comments\n| License       | MIT\n\nCommits\n-------\n\n08a42e7 [HttpKernel] made request stack feature BC",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  fixes RequestDataCollector bug, visible when used on Drupal8\n  [Console] fixed exception rendering when nested styles\n  [Console] added some more information about OutputFormatter::replaceStyle()\n  [Console] fixed the formatter for single-char tags\n  [Console] Escape exception message during the rendering of an exception\n  [BrowserKit] Fixed the handling of parameters when redirecting\n  Typo fix\n  HttpFoundation RequestTest - Fixed indentation and removed comments\n  HttpFoundation Request test for #8619\n  LICENSE files moved to meta folders\n  added missing method in the UPGRADE file for 2.2 (closes #8941)\n  [Translation] Removed an unneeded return annotation.\n  [DomCrawler] Added missing docblocks and removed unneeded return annotation.\n\nConflicts:\n\tsrc/Symfony/Component/BrowserKit/Client.php\n\tsrc/Symfony/Component/DomCrawler/Crawler.php",
            "merged branch Tobion/twig-bridge-testcase (PR #9057)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[TwigBridge] remove empty testcase class\n\nsince de50621e8ac3 this class is useless\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| License       | MIT\n\nCommits\n-------\n\nf6a1606 [TwigBridge] remove empty testcase class",
            "[Security] Split the component into 3 sub-components Core, ACL, HTTP",
            "[Security] copied the Resources/ directory to Core/Resources/",
            "[Security] fixed README files",
            "[Security] removed unneeded hard dependencies in Core",
            "[Console] Escape exception message during the rendering of an exception",
            "[Console] fixed the formatter for single-char tags",
            "[Security] limited the password length passed to encoders",
            "[ExpressionLanguage] renamed addFunction() to register()",
            "[ExpressionLanguage] optimized serialization of nodes and expressions",
            "[ExpressionLanguage] made ExpressionLanguage::parse return an ParsedExpression instance",
            "updated CHANGELOG for 2.0.21",
            "[FrameworkBundle] Renderer is once more the last of the templates",
            "Fixed init:bundle",
            "[FrameworkBundle] fixed init:bundle",
            "[FrameworkBundle] fixed SecurityContext when security is disabled",
            "[Routing] fixed imports from the current directory",
            "some performance tweaks\n\nThis adds lazy loading for firewall configurations. This is useful when you have multiple firewalls, only the firewalls which are actually needed to process the Request are initialized. So, your event dispatcher is not as costly to initialize anymore.\n\nIt also implements re-using of RequestMatchers if all matching rules are the same, and exposes the remaining rules which are already implemented by the request matcher (host, ip, methods) in the access-control section",
            "[HttpKernel] added a unit tests for previous commit",
            "fix kernel:locateResource to loop accross the bundle tree to find the first match",
            "made XSD less strict when possible",
            "updated bootstrap file",
            "Allow arbitrary ordering of config elements in symfony xml config",
            "[Standards] Changing many instances of  boolean  to  Boolean .",
            "[HttpKernel] added back Bundle::getName() as it is quite useful",
            "refactored bundle management\n\nBefore I explain the changes, let's talk about the current state.\n\nBefore this patch, the registerBundleDirs() method returned an ordered (for\nresource overloading) list of namespace prefixes and the path to their\nlocation. Here are some problems with this approach:\n\n * The paths set by this method and the paths configured for the autoloader\n   can be disconnected (leading to unexpected behaviors);\n\n * A bundle outside these paths worked, but unexpected behavior can occur;\n\n * Choosing a bundle namespace was limited to the registered namespace\n   prefixes, and their number should stay low enough (for performance reasons)\n   -- moreover the current Bundle\\ and Application\\ top namespaces does not\n   respect the standard rules for namespaces (first segment should be the\n   vendor name);\n\n * Developers must understand the concept of  namespace prefixes  to\n   understand the overloading mechanism, which is one more thing to learn,\n   which is Symfony specific;\n\n * Each time you want to get a resource that can be overloaded (a template for\n   instance), Symfony would have tried all namespace prefixes one after the\n   other until if finds a matching file. But that can be computed in advance\n   to reduce the overhead.\n\nAnother topic which was not really well addressed is how you can reference a\nfile/resource from a bundle (and take into account the possibility of\noverloading). For instance, in the routing, you can import a file from a\nbundle like this:\n\n  <import resource= FrameworkBundle/Resources/config/internal.xml  />\n\nAgain, this works only because we have a limited number of possible namespace\nprefixes.\n\nThis patch addresses these problems and some more.\n\nFirst, the registerBundleDirs() method has been removed. It means that you are\nnow free to use any namespace for your bundles. No need to have specific\nprefixes anymore. You are also free to store them anywhere, in as many\ndirectories as you want. You just need to be sure that they are autoloaded\ncorrectly.\n\nThe bundle  name  is now always the short name of the bundle class (like\nFrameworkBundle or SensioCasBundle). As the best practice is to prefix the\nbundle name with the vendor name, it's up to the vendor to ensure that each\nbundle name is unique. I insist that a bundle name must be unique. This was\nthe opposite before as two bundles with the same name was how Symfony2 found\ninheritance.\n\nA new getParent() method has been added to BundleInterface. It returns the\nbundle name that the bundle overrides (this is optional of course). That way,\nthere is no ordering problem anymore as the inheritance tree is explicitely\ndefined by the bundle themselves.\n\nSo, with this system, we can easily have an inheritance tree like the\nfollowing:\n\nFooBundle < MyFooBundle < MyCustomFooBundle\n\nMyCustomFooBundle returns MyFooBundle for the getParent() method, and\nMyFooBundle returns FooBundle.\n\nIf two bundles override the same bundle, an exception is thrown.\n\nBased on the bundle name, you can now reference any resource with this\nnotation:\n\n    @FooBundle/Resources/config/routing.xml\n    @FooBundle/Controller/FooController.php\n\nThis notation is the input of the Kernel::locateResource() method, which\nreturns the location of the file (and of course it takes into account\noverloading).\n\nSo, in the routing, you can now use the following:\n\n    <import resource= @FrameworkBundle/Resources/config/internal.xml  />\n\nThe template loading mechanism also use this method under the hood.\n\nAs a bonus, all the code that converts from internal notations to file names\n(controller names: ControllerNameParser, template names: TemplateNameParser,\nresource paths, ...) is now contained in several well-defined classes. The\nsame goes for the code that look for templates (TemplateLocator), routing\nfiles (FileLocator), ...\n\nAs a side note, it is really easy to also support multiple-inheritance for a\nbundle (for instance if a bundle returns an array of bundle names it extends).\nHowever, this is not implemented in this patch as I'm not sure we want to\nsupport that.\n\nHow to upgrade:\n\n * Each bundle must now implement two new mandatory methods: getPath() and\n   getNamespace(), and optionally the getParent() method if the bundle extends\n   another one. Here is a common implementation for these methods:\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getParent()\n    {\n        return 'MyFrameworkBundle';\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getNamespace()\n    {\n        return __NAMESPACE__;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function getPath()\n    {\n        return strtr(__DIR__, '\\\\', '/');\n    }\n\n * The registerBundleDirs() can be removed from your Kernel class;\n\n * If your code relies on getBundleDirs() or the kernel.bundle_dirs parameter,\n   it should be upgraded to use the new interface (see Doctrine commands for\n   many example of such a change);\n\n * When referencing a bundle, you must now always use its name (no more \\ or /\n   in bundle names) -- this transition was already done for most things\n   before, and now applies to the routing as well;\n\n * Imports in routing files must be changed:\n    Before: <import resource= Sensio/CasBundle/Resources/config/internal.xml  />\n    After:  <import resource= @SensioCasBundle/Resources/config/internal.xml  />",
            "[TwigBundle] Fixed RenderTokenParser when with isn't used and options are provided",
            "[TwigBundle] Improving the PHPDoc on the FormExtension inside the TwigBundle.",
            "[Form] Fixing the object versus normalized data PHPDoc on Field, which I believe was backwards.",
            "[Form] adding PHPDoc and some small PHPDoc changes.",
            "[Form] Making the constructor inherit docs.",
            "[HttpKernel] made a small tweak",
            "[HttpFoundation] added a directory fallback for when the class is not found in registered namespaces and class prefixes",
            "[HttpKernel] Fix AccessDecisionManagerInterface::decide() invocation in SwitchUserListener",
            "[DoctrineMongoDBBundle] fixed typo, updated extension test to reflection validation addon",
            "DI Extension: use the base class from the HttpKernel Component",
            "[DoctrineMongoDBBundle] registered new validation namespace for annotations",
            "[DoctrineMongoDBBundle] added unique constraint, validator and test, registered validator in DIC",
            "adds setArgument to Definition",
            "[Form] Fixed failing test",
            "Fixed the conenction alias used by acl",
            "simplified Doctrine unit tests",
            "fixed Doctrine commands help message",
            "[ProfilerStorage] Make write() returns a status (Boolean)",
            "[SQLiteProfilerStorage] Add a unit test",
            "[SQLiteProfilerStorage] Escape '\\' in find()",
            "[Profiler] Fix a typo",
            "ignore firewalls that are set to false (f.e. http-basic: false), removed two unused variables",
            "[HttpKernel] fixed Cache, to respect the  variable and trigger error handling",
            "[DependencyInjection] moved loading stack from static to object scope",
            "Added missing HTTP status code 418",
            "if( -> if (",
            "fixes else -> } else",
            "simplified TemplateNameParser::parse() return value",
            "[DoctrineBundle] cleaned up doctrine:generate:entity",
            "removed defaults to TemplateNameParserInterface::parse() method as it was not used anywhere (everything is explicit now)",
            "normalized license messages in PHP files",
            "[TwigBundle] Normalize names of templates and enable cache found templates file names",
            "reverted a previous commit where translators were made optional",
            "made order of template engine and data collector more predictable",
            "added some phpdoc",
            "fixed typos",
            "[FrameworkBundle] added the possibility to change the template for row()",
            "[Form] Adding a row() PHP helper equivalent to the Twig form_row() for outputting the label, error and tag of a form field.",
            "fixed unit tests",
            "made some minor tweaks",
            "disable session if not explicitely enabled",
            "tweaked behavior of ExceptionListener to display better error messages in case of an exception thrown during the handling of an exception",
            "[FrameworkBundle] made ESI optional (should now be enabled explicitely)",
            "[FrameworkBundle] disable translator if not explicitely enabled",
            "made DIC tags only available during  compilation \n\nNow that we have a compilation phase for the DIC, using tags after compilation\nis not needed anymore.\n\nTags were introduced to allow several independant bundles to be able to\ninteract which each others (remember that each extension knows nothing about\nthe others).\n\nBut during the compilation phase, the container has been merged ans so, all\nthe information from all bundles are available. This is then the right place\nto deal with tags. That way, less work is needed at runtime and the DIC class\nin the cache is also much smaller.\n\nFor simple cases, it means that you need to process the tag in a compiler pass\nand store the information you need in a DIC parameter (have a look at the\nTranslatorPass for a very simple example).\n\nSo, the PHP dumper does not add tags to the dumped PHP class anymore (it does\nnot implements TaggedContainerInterface anymore). But tags are still available\non ContainerBuilder instances.",
            "[FrameworkBundle] added a compiler pass for translation loaders",
            "made data collectors private",
            "added a priority for data collectors",
            "Added the roles in the Security panel of the profiler",
            "[DoctrineMongoDBBundle] switched to compiler passes for proxy/hydrator directory creation and event listeners",
            "changed templating engine used by init:bundle to Twig",
            "Updated skeleton to the new template syntax",
            "[DependencyInjection] added the possibility to pass the type of compiler pass in ContainerBuilder::addCompilerPAss",
            "[DependencyInjection] added compiler passes as resources",
            "renamed Container::freeze() to Container::compile()",
            "[Validator] Adding a significant amount of PHPDoc to the Validator component.",
            "[Cache] Changing variable from a property to a normal variable for consistency - the variable is passed to the parent constructor and set on the property there.",
            "[Cache] Fixing a coding standard, adding a small note for clarity, and adding a missing type-hint.",
            "[DoctrineBundle] fixed compiler pass, to stop if orm wasn't enabled",
            "some refactorings/improvements",
            "better support for cookie handling, use native PHP function to set cookies",
            "[FrameworkBundle] fixed template name parsing for namespaced bundles",
            "[FrameworkBundle] fixed controller names conversion when a bundle is defined in two different namespaces",
            "[Framework] added some more test to demonstrate how template and controller name work with a vendor and a category in the namespace",
            "Typo on command asset:install",
            "[HttpFoundation] use pathinfo() native function to determine file extension. Change File::move() and UploadedFile::move() methods to accept a second argument allowing to move the file with a new name instead of moving it with its original name.",
            "fixed typo",
            "Allow to override platform with your own by defining a service name.",
            "Add support for MySQL Session Init Listener, refactored driver and driverClass approach to follow the Doctrine DBAL factory more closely for this to work easily.",
            "[DependencyInjection] Typo in Container\n\n freezed  should be  frozen .",
            "changed the bundle name to be the class name of the bundle, not the last part of the namespace\n\nLet's take some examples to explain the change.\n\nFirst, if you don't use any vendored bundles, this commit does not change anything.\n\nSo, let's say you use a FooBundle from Sensio. The files are stored under Bundle\\Sensio\\FooBundle.\nAnd the Bundle class is Bundle\\Sensio\\FooBundle\\SensioFooBundle.php.\n\nBefore the change, the bundle name ($bundle->getName()) would have returned 'FooBundle'.\nNow it returns 'SensioFooBundle'.\n\nWhy does it matter? Well, it makes template names and controller names easier to read:\n\nBefore:\n\n    Template: Sensio\\FooBundle:Bar:index.twig.html\n    Controller: Sensio\\FooBundle:Bar:indexAction\n\nAfter\n\n    Template: SensioFooBundle:Bar:index.twig.html\n    Controller: SensioFooBundle:Bar:indexAction\n\nNB: Even if the change seems simple enough, the implementation is not. As finding\nthe namespace from the bundle class name is not trivial\n\nNB2: If you don't follow the bundle name best practices, this will probably\nleads to unexpected behaviors.",
            "[HttpKernel] removed unused and bugged method",
            "[FrameworkBundle] added some unit tests",
            "changed the template name format\n\nBefore\n\nbundle:section:template.format.renderer\n\nAfter\n\nbundle:section:template.renderer.format\n\nNotice that both the renderer and the format are mandatory.",
            "removed the magic discovering of format in template name",
            "made a big refactoring of the templating sub-framework\n\n * better separation of concerns\n * made TwigBundle independant of the PHP Engine from FrameworkBundle (WIP)\n * removed one layer of abstraction in the Templating component (renderers)\n * made it easier to create a new Engine for any templating library\n * made engines lazy-loaded (PHP engine for instance is not started if you only use Twig)\n * reduces memory footprint (if you only use one engine)\n * reduces size of compiled classes.php cache file",
            "[DependencyInjection] fixed CS",
            "[DependencyInjection] fix XML entities in XmlDumper",
            "Fix typo",
            "[DoctrineBundle] fixed XSD",
            "fixed phpdoc",
            "[Form] Fix PHPDoc",
            "fixed typo (s/algoritm/algorithm/)",
            "changed priority meaning to be more intuitive",
            "[HttpKernel] fixed a unit test",
            "[SQLiteProfilerStorage] Improve SQLite storage:\n- do not rely on request time for db cleanup (important when importing data),\n- add indexes",
            "[Profiler] Use base64 encoding which is more efficient than unpack (space wise)",
            "[DependencyInjection] added support for anonymous services in XmlDumper",
            "[FrameworkBundle] registered FileSystem as a service, switched commands to use it",
            "fixed abstract extension to product correct array with just mapping type specified",
            "[Templating] removed the Engine::output() method",
            "[Templating] fixed phpdoc",
            "[Templating] fixed Engine::load() method",
            "refactored Templating\n\n * made the renderer argument of Storage ctor mandatory\n * refactored the Engine class to avoid code duplication\n * simplified the check for a template that extends another one but with a different renderer",
            "switched colors to on by default in phpunit.xml",
            "[FrameworkBundle] tweaked previous commit",
            "make it easier to implement alternative app directory structures",
            "Fixed loading of validation files for bundles in a vendor namespace",
            "[SQLiteProfilerStorage] Escape special chars in URLs and IPs",
            "[TwigBundle] tweaked a comment",
            "[TwigBundle] addExtension calls must be first",
            "[TwigBundle] removed the cache for globals (does not work when working in functional tests)",
            "[TwigBundle] fixed cache problem for some global variables",
            "fixed some routing patterns",
            "Updated routing to the new syntax",
            "[Extensions] Type hints",
            "[FrameworkBundle] Type hints & comments",
            "[WebProfiler] Normalize header name and use a single reference",
            "[DI Compiler] Make processArguments() process arguments only",
            "[DI XmlLoader] Add missing type hints",
            "[InterfaceInjector] Fix a typo in the tests",
            "[TwigBundle] Remove invalid options from the container",
            "[Form, FrameworkBundle] added csrf tokens reset on Kernel::shutdown() to preven tokens stacking in tests",
            "[Routing] moved from :var to {var}\n\nThis follows the  URI template  notation:\n\nhttp://code.google.com/p/uri-templates/\nhttp://tools.ietf.org/html/draft-gregorio-uritemplate-04\n\nYou need to change all your route definitions from something like:\n\n    /article/:id\n\nto something like:\n\n    /article/{id}",
            "[TwigBundle] moved global variables under the app. prefix\n\nBefore:\n\n{{ session.flash('notice') }}\n\nAfter:\n\n{{ app.session.flash('notice') }}",
            "removed duplicate code",
            "added missing parameter in DIC",
            "[Profiler] Fix importing profiler data",
            "[DependencyInjection] restricted supported for only phar URI",
            "[DependencyInjection] fix xml validation for extension in phar archive",
            "adds visibility to aliases",
            "[ProfilerController] Fix handling of uploaded files",
            "[ProfilerController] fix view parameters",
            "[WebProfilerBundle] Update the notfound template (to match the default layout)",
            "[WebProfilerBundle] The search results must be rendered in the panel slot",
            "[WebProfilerBundle] fixed layout when templates are not defined",
            "Fixed FileTest::testRename to work for windows file system.",
            "made PHP renderer optional in Templating",
            "changed templating to use setter injection for renderers",
            "make it possible to hint the kernel dir via the phpunit.xml",
            "fixed typo",
            "[DependencyInjection] Add hasInterfaceInjectorForClass(), which is helpful for extension loader methods\n\nAdditionally, doc blocks were added for the Container's InterfaceInjector methods, and the test case was modified to cover both add() methods",
            "[TwigBundle] Renderer::evaluate() should ensure the Request is both defined and non-empty\n\nThis addresses an oversight in my previous commit: 9553971d06875d417695c4a63e03885a608dafb7\nAuthor: Jeremy Mikola <jmikola@gmail.com>\nDate:   Thu Jan 6 13:26:45 2011 -0500",
            "Fixed filesystem test failing on windows",
            "Fixed Security tests failing when D2 is not present",
            "[DoctrineMongoDBBundle] updated logging to support new embedded document in \\stdClass",
            "[DoctrineBundle] fixed invalid parameter error",
            "[DoctrineBundle] Fixed invalid regex in DoctrineCommand",
            "[DependencyInjection] fixed interface injection when the class is not available",
            "[TwigBundle] added a way to easily register extensions from the configuration\n\n    <twig:extension id= twig.extension.debug  />\n\n    twig:\n        extensions: [twig.extension.debug]\n\nThe Twig-Extensions repository extensions are already registered:\n\n * twig.extension.debug\n * twig.extension.text",
            "[TwigBundle] Allow Renderer::evaluate() even when Request and Session are not available\n\nThis is helpful for using Twig outside of a request-serving context, such during a console command.  Added unit tests the original behavior and new behavior for this patch.",
            "allow addition configuration in other config files, without killing the mapping that was previously set",
            "Fix UniversalClassLoader matching collisions.\n\nThe current `loadClass()` implementation tries to load a class from the first matching prefix then stops, producing false-negative results. This is especially evident in groups of related libraries, such as Doctrine:\n\n    Doctrine\n    Doctrine\\Common\n    Doctrine\\Common\\DataFixtures\n    Doctrine\\DBAL\n    Doctrine\\DBAL\\Migrations\n\nEach of these libraries is submoduled into a different vendor directory. Depending on what order these libraries are added to a UniversalClassLoader instance, classes may or may not actually be loaded. This fix continues searching registered namespaces and prefixes if the first partial match is negative.",
            "[DependencyInjection] added automatic detection for service circular references",
            "removed a circular reference in the definition of the templating and Twig services\n\n * added a new TemplateNameConverter that parses a template name\n * removed the dependency between the Twig loader and the Templating engine",
            "[FrameworkBundle] removed setEngine call as the Engine already does it automatically (and it also avoids a circular reference)",
            "fixed escaping in CodeHelper::formatArgs()",
            "[Templating] tweaked previous commit",
            "[Templating] Added Global variables as they are implemented with Twig. With tests",
            "[FrameworkBundle] removed obsolete code",
            "[DependencyInjection] Remove OpenSky doc-block and AGPL license string",
            "added extra exception if only a partial result is found",
            "[HttpFoundation] Added removeFlash & clearFlashes methods to the Session",
            "added validator pass to pass config",
            "[SwiftmailerBundle] fixed XSD file",
            "service visibility changes",
            "DI container optimization",
            "[Form] Added FieldFactory mechanism to automatically create fields by introspecting metadata of a class",
            "[FrameworkBundle] Fixed maxlength attribute in TextField in PHP templates",
            "[DependencyInjection] fixed generation of empty tags when getting a tag from a definition\n\nThis change removes a lot of noise in the dumped container.",
            "added CompatAssetsBundle to reintroduce the deprecated css/js helpers/tags\n\nJust add this line in your configuration to enable it:\n\n    <import resource= CompatAssetsBundle/Resources/config/assets.xml  />\n\nThis bundle is just to ease the upgrade path. Please don't use it if you don't need to\nand upgrade your templates as this bundle will be removed before RC1.",
            "[FrameworkBundle][Security] Create DIC aliases for security providers that are explicit services\n\nThe SecurityFactories expect security services to have a consistent naming convention, which was not the case for providers defined as `{ id: another.service }`.  These providers will now be aliased as  security.authentication.provider.[key]  and can be accessed in the same manner as other providers.",
            "[DoctrineBundle] Added class_metadata_factory_name Configuration option",
            "[HttpKernel] unified paths on Windows and *nix",
            "Fixed an issue with the definition description Mongo DB collections.\nCommitter: VlastV <me@vlastv.ru>",
            "Corrected according to bugfix at Doctrine-jira",
            "[ZendBundle] added a simple way to add new writers (add a service with a zend.logger.writer tag)",
            "[TwigBundle] added a way to register Twig globals from configuration\n\n    <twig:config debug= %kernel.debug%  strict-variables= %kernel.debug% >\n        <twig:global key= foo  id= request  />\n    </twig:config>\n\n    twig.config:\n        globals:\n          foo: request",
            "removed js and css helpers and Twig integration\n\nThese helpers have been removed as they do not work as expected.\nAmong other things, the order is not the right one when using PHP\ntemplates, and adding assets from an included template is not\npossible when using Twig templates.\n\nThis should be replaced by integrating a third-party library that\nmanages assets: minification, compilation, packaging, ...",
            "[TwigBundle] added request and session as global variables\n\n * removed the  _view  variable from templates\n * removed the  flash()  function (now available from the session directly {{ session.flash('notice') }})",
            "[TwigBundle] replaced current {{ foo }} syntax for translation placeholders to %foo%",
            "[WebProfileBundle] Adding more information to the Response content returned when an intercept is redirected.\n\nSince this is a debug-only feature, I think the more details we can include, the less trouble it'll cause when people are not expecting their requests to be intercepted. It's a good feature - this better-communicates what's happening.",
            "[HttpFoundation] added missing directory in fixtures",
            "[Validator] Implemented @Ip constraint",
            "[FrameworkBundle] Attributes can now be passed when rendering form fields with the PHP renderer",
            "[Form] Changed value transformers to throw UnexpectedTypeException instances",
            "[Form][FrameworkBundle][HttpFoundation] The session is now automatically started when a form is CSRF protected",
            "[Form] added the constrained method Field::isTransformationSuccessful()",
            "[Form][HttpFoundation] Improved File and UploadedFile class",
            "[Validator] Renamed @Validation constraint to @Set",
            "[Form] Added support for virtual field groups",
            "[TwigBundle] fixed trans tag due to Twig changes",
            "fixed typo in phpdoc",
            "fixed typo",
            "[TwigBundle] converted form filters to functions\n\n|render_enctype -> form_enctype()\n|render         -> form_field()\n|render_hidden  -> form_hidden()\n|render_errors  -> form_errors()\n|render_label   -> form_label()\n|render_data    -> form_data()",
            "[TwigBundle] fixed format_args configuration",
            "[TwigBundle] simplified code a bit",
            "[TwigBundle] removed HelperTokenParser",
            "[TwigBundle] converted flash tag to a function",
            "[TwigBundle] removed usage of HelperTokenParser for the js/css tags",
            "[TwigBundle] removed usage of HelperTokenParser for the 'render' tag",
            "[DependencyInjection] made service keys and aliases case insensitive (as method names are case insensitive in PHP)",
            "fix a typo",
            "Container builder tweaks",
            "Refactor Doctrine Bundle to use Symfony DIC Enabled EventManager.",
            "Introduced meta-bundle DoctrineAbstractBundle to squash 400+ loc of code duplication from ORM and MongoDB Bundles.",
            "optimized AclVoter, added unit test",
            "fix PHPUnit assertType deprecation warnings\n\nPHPUnit 3.5.6 deprecates assertType in favor of assertInternalType and\nassertInstanceOf. It will be completely removed in 3.6.",
            "Added the Typehint needed by the type-hinting in Twig_Node",
            "fix possible duplicate security identities",
            "[TwigBundle] Fixed display of DateFields in twig templates",
            "[Validator] Implemented Locale constraint",
            "[Form][Locale] Implemented LocaleField and added script for updating ICU data",
            "[FrameworkBundle][TwigBundle] Introduced field_row template for Form rendering",
            "[TwigBundle] replaced the asset tag with an asset function (from {% asset css/foo.css %} to {{ asset('css/foo.css') }}",
            "[HttpFoundation] changed the default name of the session to _SESS as using _SESSION does not seem to work with PHP 5.3.3 (the session starts for each request)",
            "added ACL system to the Security Component",
            "[DependencyInjection] optimized previous commit",
            "[DependencyInjection] force loading of class file when resolving interface injections",
            "[Swiftmailer] Set a null value for swiftmailer.single_address if delivery_address is not specified",
            "[Swiftmailer] Fixed typo",
            "fixed inconsistency between MongoDB and ORM Annotation Reader definition that lead to a bug in the  common  code",
            "[Security] LogoutListener should not invoke handlers' logout() method if token is empty\n\nIf a user was not authenticated and visited the logout path, a null value was passed to the handler's logout() method, resulting in a catchable fatal error.",
            "Fixed a typo",
            "Form->getUri() should return it's path if no action is defined",
            "fixed (and now with tests) false/null confusion",
            "[DoctrineBundle] Optimized param converter",
            "[FrameworkBundle] Optimized param converter manager",
            "[FrameworkBundle] Fixed error with priority for param converter services",
            "[DoctrineBundle] Added tests for DoctrineConverter class",
            "fixed previous commit",
            "[DoctrineBundle] DoctrineConverter::find($class, $request) and DoctrineConverter::findOneBy($class, $request) should return null",
            "Fixed inconsistency",
            "tweaked DI container",
            "refactored Doctrine*Bundle to allow a much more flexible configuration",
            "[DoctrineBundle][DoctrineMongoDBBundle] Makes it possible to use shortcuts for defining document or entity classes when using the DaoAuthenticationProvider",
            "[WebProfilerBundle] Another call to block removed.",
            "[TwigBundle] updated templates for the latest version of Twig",
            "[WebProfilerBundle] updated templates for the latest version of Twig",
            "[TwigBundle] Fixed form.twig calls to {% display %}",
            "[Console] fixed call to undefined method.",
            "[TwigBundle] updated functions to work with the latest version of Twig",
            "[FrameworkBundle] converted the special Profiler class to a DIC compiler class",
            "[TwigBundle] converted the special Twig Environment class to a DIC compiler class",
            "[FrameworkBundle] converted the special routing resolver to a DIC compiler pass",
            "[FrameworkBundle] Moved the adding of Converter tags to a CompilerPass by suggestion of schmittjoh.",
            "[FrameworkBundle] Fixed ParamConverterListener call to NotFoundHttpException",
            "[FrameworkBundle] made array session storage the default in test mode",
            "[FrameworkBundle] registered array session storage service in DIC",
            "[HttpFoundation] added ArraySessionStorage for usage in tests",
            "[DoctrineBundle] added a request param converter for Doctrine",
            "refactored and fix previous commit",
            "added converter manager and converter interface incl. tests",
            "[Routing] Fix PhpMatcherDump when url contains a . or a -",
            "Container PHP dumper: optimize string dumping ('f'.'o'.'o' -> 'foo')",
            "refactored creation of access decision manager to make use of newly added compiler passes",
            "Fixing DoctrineMongoDBBundle to work with latest version of Doctrine.",
            "CS: prefer while (true) over while (1)",
            "CS: Unified non-strict equality comparisons, put var on the right side",
            "CS: Unified strict equality comparisons, put var on the right side",
            "slight compiler refactoring (RFC)",
            "Speed up url matching for route without variable",
            "Minor template cleanup",
            "Remove a useless test",
            "Make use of SplFileInfo::getBasename",
            "[FrameworkBundle] Added config keys for PdoSessionStorage.",
            "[WebProfilerBundle] removed the hide button when in the web profiler",
            "[WebProfilerBundle] Adding 'hide' button on the toolbar, fixes #9362",
            "[TwigBundle] simplified code",
            "[Process] tweaked php doc and fixed PhpProcess::run() return value",
            "[TwigBundle] converted path and url tags to functions\n\n{% url 'blog_post' with { 'id': post.id } %} -> {{ url('blog_post', { 'id': post.id }) }}\n{% path 'blog_post' with { 'id': post.id } %} -> {{ path('blog_post', { 'id': post.id }) }}",
            "[TwigBundle] removed unused tag and contenttag Twig tags",
            "updated last commit to reflect Twig changes",
            "[TwigBundle] replaced the ifrole tag with a has_role function\n\nBefore:\n\n{% ifrole  ROLE_ADMIN  %}\n    Only show if you have the ROLE_ADMIN role...\n{% endifrole %}\n\nAfter:\n\n{% if has_role( ROLE_ADMIN ) %}\n    Only show if you have the ROLE_ADMIN role...\n{% endif %}",
            "Test default port number",
            "renamed reloadUserByAccount() to loadUserByAccount()",
            "remove user provider name",
            "[Form] Changed semantics of  always_empty  option in PasswordField\n\nIf the option is true, the password is never written into the input field's value. If it is false, it is only written into the input field's value after submitting a form with errors.\n\nThe default value for  always_empty  is true.",
            "The method ->getHeader(...) doen't exists. Replace it by ->headers->get(...)",
            "fixed unit test",
            "[HttpFoundation] Send proper charset along with the default text/html header",
            "fixed unit tests",
            "[Validator] Implemented Image constraint",
            "[Validator] Implemented Language constraint",
            "[Locale][Form][Validator] Refactored code to new Locale component, implemented Country constraint",
            "[Form] Implemented LanguageField",
            "[Form] Implemented CountryField",
            "[Form] Locale can now only be set statically before creating a form/field, otherwise we have too many problems updating a field's state when the locale is changed",
            "[Form] Made  and  parameter in the constructor optional",
            "[Form] Improved semantics of property paths and removed FieldGroup::merge() for now\n\nThe semantics of property paths are now:\n\n   (1) if a property path is set, it is _always_ respected (relative to the object\n       of the parent field)\n   (2) if no property path is set, the object of the parent field is _always_ ignored\n\nFact (2) allows us to set data into fields that is updated independently of the parent\nfield (like CSRF tokens, subforms with different objects etc.)\n\nWhat is missing now is support for subfields that pass the object of the parent field\nthrough to their own subfields. This functionality would be needed for GoogleMapFields,\nDateRangeFields etc., which are compositions of individual fields that update the\nparent object of the FieldGroup.\n\nThere are several alternatives for the latter functionality that should be discussed\nin a RFC.",
            "[Form] Added proper error handling to FileField",
            "[DoctrineMongoDBBundle] Fixed DoctrineMongoDBExtension::loadConnections to follow the new constructor signature introduced with the Doctrine\\\\MongoDB access layer refactoring so that Doctrine MongoDB logging works againg with the WebProfilerBundle",
            "fixed user refreshing after unserialization",
            "changed all XML attribute names to take - instead of _ (everything should be consistent now)",
            "updated Twig templates for the new hash syntax",
            "fixed typo",
            "[DependencyInjection] fixed a typo in PhpDumper",
            "[DoctrineBundle] Fixed regression in proxy cache dir",
            "CS fixes",
            "[HttpFoundation] Added a way to grab the request body as a resource",
            "[HttpFoundation] Fixed indenting",
            "[DependencyInjection] Fixes a loading order issue\n\nab7ad4808bb79f8df8ead811a6412b9e98d4ebcb introduced a regression when using a parameter in an extension config that is defined in the same file, the ParameterBag can not resolve it",
            "[DoctrineBundle] Fix createOrmProxyDirectory method",
            "[TwigBundle] added autoescape option in Twig configuration",
            "[FrameworkBundle] changed default name of Routing matcher class to be consistent with the generator class in cache",
            "[HttpFoundation] fixed Request::create() when using HTTPS and getUri()/getPathForUri() when script name should be removed.\n\nOriginal explanation from pull request:\n\nI'm Using symfony2 with URL Rewriting to 'hide' index.php.\nOn form authentication, symfony2 redirect to http://host:port/index.php/login_path instead of http://host:port/login_path. I do understand that, in my case, redirect is set into one of :\nFormAuthenticationEntryPoint with getUriForPath()\nFormAuthenticationListener with getUriForPath()\nSecurity/Firewal/ExceptionListener with getUri()\n\nThis path modify getUri and getUriForPath to :\nremove default port from URI\nremove script name if not initially present",
            "moved default form template to the DIC config",
            "added authentication trust resolver",
            "bug fix",
            "[HttpFoundation] added a way to retrieve raw body from a request",
            "[Routing] added . as a valid character in route names",
            "[Routing] added . as a valid character in route names",
            "[Routing] refactored code",
            "added exception when a loaded YAML resource is not an array",
            "[Security] fixed method visibility",
            "[FrameworkBundle] fixed 404 exception class name",
            "[Console] Symfony 2 or Symfony2 ?",
            "This commit fixes two bugs:\n- interfaces can now also be defined on containers which are built with an Extension\n- interface injection can also be used on classes that require constructor arguments",
            "removed dead code",
            "[Validator] Fixed string-based constraint validators to accept empty values",
            "[Validator] Fixed UrlValidator to accept empty strings (closes #9297)",
            "[PropertyPath] Fixed usage of __get() and __set() when accessing properties that exist in the object but are not public",
            "[FrameworkBundle] Fixed choice_field.php template to use isChoiceGroup()",
            "[Form] Fixed: The data in a CollectionField is resized down if fields are removed",
            "[Form] Refactored Field and FieldGroup to facilitate modifications in subclasses",
            "[Validator] fixed the static method loader to not repeat the loading when the static method is in the parent classes",
            "[HttpKernel] fixed request management in HttpKernel",
            "[HttpKernel] fixed request management in HttpKernel",
            "[HttpKernel] fixed request management in HttpKernel",
            "removed HttpException base class, refactored FlattenException class",
            "[HttpKernel] removed UnauthorizedHttpException as this should be handled by the Security component",
            "removed ForbiddenHttpException\n\nBoth HttpKernel and Security define a 403 exception:\n\n* Symfony\\Component\\HttpKernel\\Exception\\ForbiddenHttpException\n* Symfony\\Component\\Security\\Exception\\AccessDeniedException\n\nThe one in HttpKernel has been removed in favor of the Security one.",
            "[HttpKernel] simplified code",
            "[HttpKernel] Reworking the HttpException class constructor to be more consistent with normal OO classes. Additionally, the base HttpException constructor was changed to require a code argument as it doesn't make sense to create an exception that will translate into a status code of 0 (in fact it'll cause a strange error).",
            "[DependencyInjection] Allow parameter replacement within extension configurations.",
            "[HttpKernel] Added getRequest() to HttpKernelInterface.",
            "fixed typo",
            "fixed tabs",
            "updated comment for the request service",
            "fixed default httpkernel configuration",
            "[HttpKernel] Move request-stashing behavior to the Kernel class\n\nPreviously, HttpKernel performed request-stashing.  By moving this to the Kernel class, the request is now available immediately after the kernel becomes aware of it.  If the kernel is allowed to boot lazily (during the first call to handle()), this also allows an actual master Request to be available during booting.\n\nThe old  request  service definition (with a bogus class name) can be replaced with a factory-aware definition that retrieves the request directly from the kernel.",
            "[HttpKernel][FrameworkBundle] Rename BaseHttpKernel to HttpKernel\n\nThe original HttpKernel class can be deleted, as it's request-stashing will be moved to the Kernel class.  FrameworkBundle's list of compiled classes must also be modified to respect this change.",
            "[DependencyInjection] fixed typo",
            "fixed indentation",
            "logout refactoring",
            "[DoctrineMongoDbLogger] fixed the  Call to a member function getDebugLogger() on a non-object  error",
            "[Form] removed extra blank line in textarea",
            "Added renderer for PasswordField.",
            "fixes bugs due to not disconnected listeners",
            "[FrameworkBundle] Create the bundles directory before trying to symlink else it will throw an error",
            "[DoctrineBundle] Make the proxy dir configurable",
            "[HttpFoundation] Fixed Request::create handling of full URIs",
            "[HttpKernel] Log query string as well as path in Cache debug headers",
            "[HttpFoundation] Always force the request method to full caps",
            "[HttpFoundation] allowed any HTTP method for a Request",
            "[DependencyInjection] fixed template support in security extension",
            "[Security] fixed typo",
            "[HttpFoundation] Fixed default netmask to be restricted to one IP",
            "Fixed visibility of PHPUnit setUp and tearDown methods.",
            "Fix Request::overrideGlobals $_COOKIE global var reference.",
            "a-[Console] added some phpdoc",
            "Removing the symfony version of DisconnectedClassMetadataFactory as the orm has it now.",
            "Fixing issue with memcache di configuration.",
            "[DoctrineBundle] Fixed Memcache bug in extension",
            "[DoctrineMongoDBBundle] Added tag to document manager services",
            "[DoctrineBundle] Tabs to spaces",
            "[DoctrineBundle] Added tag to entity manager services",
            "Using setEntityManager to inject EntityManager to DisconnectedClassMetadataFactory.",
            "Fix DoctrineMongoDBBundle to work with recent changes to Doctrine MongoDB ODM.",
            "[HttpKernel] fixed typo",
            "[FrameworkBundle] fixed typo",
            "[FrameworkBundle] fixed security templates when the template name has parameters",
            "[FrameworkBundle] added a new template tag to allow security authentication listeners to provide templates",
            "[TwigBundle] removed escaper and optimizer extension as they are now registered by default in Twig",
            "[FrameworkBundle] added missing phpdoc",
            "[FrameworkBundle] made firewall authentication listeners configurable",
            "[DependencyInjection] Interface Injection implementation",
            "[Routing] made annotation class loader more flexible",
            "[Routing] added missing Route::setRequirement()",
            "fixed typo in the translation for validations",
            "[DependencyInjection] format the tags in the findTaggedServiceIds method of the PhpDumper",
            "[Yaml] fixed parsing of simple inline documents",
            "[TwigBundle] activated Twig Optimizer extension by default",
            "[Command] Changing the InputOption::PARAMETER_* constants to InputOption::VALUE_* to more accurately reflect that these constants refer to the value or lack of value assigned to a particular option (e.g. --verbose or --em=doctrine).\n\nTo keep language consistent, three methods were changed in InputOption:\n\n * `InputOption::acceptParameter()` -> `InputOption::acceptValue()`\n * `InputOption::isParameterRequired()` -> InputOption::isValueRequired()`\n * `InputOption::isParameterOptional()` -> `InputOption::isValueOptional()`\n\nThe InputDefinition::asXml() method was also modified to update the `accept_value` and `is_value_required` attributes.",
            "[Console] Fixing incorrect constant references in InputArgumentTest.",
            "[FrameworkBundle] added some more files in the class cache",
            "fixed schema",
            "[FrameworkBundle] Added options auto-start and auto_start to the session configuration to allow session to be autostarted.",
            "[Routing] Changing the _method route requirement to be a regular expression so that it's consistent with all other requirements.\n\nUnlike all other requirements, the _method regex requirement is case-insensitive.",
            "[Routing] Tweaking the ApacheMatcherDumper formatting - no real change.",
            "[Routing] Adding tests for the ApacheMatcherDumper, PhpMatcherDumper and UrlMatcher.",
            "[TwigBundle] fixed option management for Twig_Environment",
            "[DependencyInjection] fixed tests to catch exception classes instead of asserting them",
            "Improving the Command documentation for RouterApacheDumperCommand and adding the ability for the script_name to be specified as an option.",
            "Updating calls from Console\\Application::addCommand() to Console\\Application::add() after method name refactoring.",
            "[WebProfilerBundle][FrameworkBundle] Fix twig templates for compatibility with strict_variables",
            "moved static Form configuration to a new class (avoid loading 7 classes just to enable CSRF -- even when no form is present in the page)",
            "added more classes to the bootstrap file",
            "added more classes in the class cache",
            "added a LazyLoader for the routing",
            "fixed class cache",
            "[FrameworkBundle] Remove unnecessary @-rule",
            "fixed various bugs",
            "[HttpFoundation] Standardize flash messages api",
            "Updating RouteCollection::getRoutes() call to RouteCollection::getAll() in many places.",
            "[Routing] Updating changed method name after method name refactoring.",
            "made some method name changes to have a better coherence throughout the framework\n\nWhen an object has a  main  many relation with related  things  (objects,\nparameters, ...), the method names are normalized:\n\n * get()\n * set()\n * all()\n * replace()\n * remove()\n * clear()\n * isEmpty()\n * add()\n * register()\n * count()\n * keys()\n\nThe classes below follow this method naming convention:\n\n * BrowserKit\\CookieJar -> Cookie\n * BrowserKit\\History -> Request\n * Console\\Application -> Command\n * Console\\Application\\Helper\\HelperSet -> HelperInterface\n * DependencyInjection\\Container -> services\n * DependencyInjection\\ContainerBuilder -> services\n * DependencyInjection\\ParameterBag\\ParameterBag -> parameters\n * DependencyInjection\\ParameterBag\\FrozenParameterBag -> parameters\n * DomCrawler\\Form -> FormField\n * EventDispatcher\\Event -> parameters\n * Form\\FieldGroup -> Field\n * HttpFoundation\\HeaderBag -> headers\n * HttpFoundation\\ParameterBag -> parameters\n * HttpFoundation\\Session -> attributes\n * HttpKernel\\Profiler\\Profiler -> DataCollectorInterface\n * Routing\\RouteCollection -> Route\n * Security\\Authentication\\AuthenticationProviderManager -> AuthenticationProviderInterface\n * Templating\\Engine -> HelperInterface\n * Translation\\MessageCatalogue -> messages\n\nThe usage of these methods are only allowed when it is clear that there is a\nmain relation:\n\n * a CookieJar has many Cookies;\n\n * a Container has many services and many parameters (as services is the main\n   relation, we use the naming convention for this relation);\n\n * a Console Input has many arguments and many options. There is no  main \n   relation, and so the naming convention does not apply.\n\nFor many relations where the convention does not apply, the following methods\nmust be used instead (where XXX is the name of the related thing):\n\n * get()      -> getXXX()\n * set()      -> setXXX()\n * all()      -> getXXXs()\n * replace()  -> setXXXs()\n * remove()   -> removeXXX()\n * clear()    -> clearXXX()\n * isEmpty()  -> isEmptyXXX()\n * add()      -> addXXX()\n * register() -> registerXXX()\n * count()    -> countXXX()\n * keys()",
            "[FrameworkBundle] fixed possible PHP warning",
            "[DependencyInjection] made some cosmetic changes to the PHP dumper output",
            "fixed output escaping",
            "[TwigBundle] Fix call to a member function get() on a non-object",
            "[FrameworkBundle] the app:escaping config can be empty",
            "made a slight optimization",
            "Refactored web profiler template definitions to make it easier for bundle developers to add their templates",
            "Microseconds to milliseconds conversion in web profiler db twig template",
            "Fixed time display in web profiler db twig template and made the toolbar block more compact",
            "Fixed web profiler mongodb twig template",
            "[Form] fixed unit test paths",
            "[Form] Improved FileField to store files in a temporary location in case validation fails",
            "[Form][FrameworkBundle] Fixed default values of CheckboxFields",
            "[HttpFoundation] Fixed class Request to convert empty files to NULL",
            "[Form] Added hook method preprocessData() to FieldGroup",
            "[Form] Field can now be instantiated to create anonymous fields",
            "[HttpFoundation] Fixed coding style, fixed wrong parameter method, added omitted split ip and added upper limit to the netmask ip",
            "tweaked phpdoc comment descriptions to explain how multiple base URL's are handled",
            "[Routing] removed the variable_prefixes and variable_regex Route options",
            "[WebProfiler] renamed block names for data collector templates",
            "[Templating] fix problem with PHP 5.4",
            "[WebProfilerBundle] fixed data collector loading (they should always be loaded as you can enable the web profiler without the web debug toolbar)",
            "Adds the ability to configure additional web profiler templates",
            "moved Exception and WebProfiler templates to Twig",
            "[DependencyInjection] replaced assertEquals(spl_object_hash()) with assertSame",
            "Fixed typo",
            "[HttpFoundation] Rename HeaderBag::validateCookieName to HeaderBag::validateCookie",
            "[TwigBundle] added support for Twig_Template instances as argument to include tag",
            "[Templating] added an Engine::load() method",
            "[TwigBundle] renamed yaml filter to yaml_encode (to be coherent with json_encode)",
            "[TwigBundle] added filters from Code helpers",
            "[TwigBundle] removed unneeded use statement",
            "[TwigBundle] fixed include tag to reflect the new syntax from Twig",
            "[TwigBundle] added a yaml filter",
            "[Form][FrameworkBundle][TwigBundle] Introduced class FieldError to wrap form errors",
            "[Validator] Group sequences must now always contain the group  <ClassName>  and never the group  Default  since that group is redefined by the group sequence",
            "[Validator] Added @validation:GroupSequence to annotation driver",
            "[TwigBundle] Fixed variable reference in the errors block of the form.twig template",
            "[Form] Fixed: FieldGroup::hasErrors() does not return true if only children have errors",
            "Changed bag.php and request_panel.php to dump arrays and objects as yaml.",
            "[OutputEscaper] fixed output escaping when a variable was decorated with SafeDecorator and passed to another part of the system where decoration also happens on the same un-decorated variable\n\nThis is the case for instance when you pass a variable to a template like this:\n\nnew SafeDecorator($var);\n\nand in the template, you pass it again to another embedded template:\n\n$view->render('...', array('var' => $var);\n\nThe second time, $var will be escaped as the SafeDecorator wrapper will have been removed\nby the escaper.",
            "fixed typo",
            "changed Cache-Control default value behavior\n\nThe PHP native cache limiter feature has been disabled as this is now managed\nby the HeaderBag class directly instead (see below.)\n\nThe HeaderBag class uses the following rules to define a sensible and\nconvervative default value for the Response 'Cache-Control' header:\n\n * If no cache header is defined ('Cache-Control', 'ETag', 'Last-Modified',\n   and 'Expires'), 'Cache-Control' is set to 'no-cache';\n\n * If 'Cache-Control' is empty, its value is set to  private, max-age=0,\n   must-revalidate ;\n\n * But if at least one 'Cache-Control' directive is set, and no 'public' or\n   'private' directives have been explicitely added, Symfony2 adds the\n   'private' directive automatically (except when 's-maxage' is set.)\n\nSo, remember to explicitly add the 'public' directive to 'Cache-Control' when\nyou want shared caches to store your application resources:\n\n    // The Response is private by default\n    $response->setEtag($etag);\n    $response->setLastModified($date);\n    $response->setMaxAge(10);\n\n    // Change the Response to be public\n    $response->setPublic();\n\n    // Set cache settings in one call\n    $response->setCache(array(\n        'etag'          => $etag,\n        'last_modified' => $date,\n        'max_age'       => 10,\n        'public'        => true,\n    ));",
            "fix doctrine command getBundleMetadatas function",
            "[DoctrineBundle] make the task works with vendor bundle namespace",
            "Switching doctypes to HTML5, it's the future",
            "Coding style fixes",
            "[Routing] Fixed tests for windows",
            "[HttpFoundation] Fixed tests for windows",
            "[Validator] Skipping AnnotationLoader tests if doctrine-common is not present",
            "[Finder] Fixed tests on windows",
            "[Console] Fixing tests breaking on windows",
            "[HttpKernel] fixed typo in a unit test",
            "[Validator] Fixed exception thrown in Valid constraint to be thrown only when the options are not empty",
            "[Validator] Group  Default  is now propagated to validated references when group sequences are validated\n\nThis conforms to JSR303 (see version 1.0 final, page 39).",
            "[Validator][Form] Removed support for match-all group  * \n\nThe constraint  Valid  does not accept any options or groups anymore. As per\nJSR303 1.0 final, section 3.5.1  Object graph validation  (page 39),\nproperties  annotated with valid should be cascaded independent of the current\ngroup (i.e. always). Thus the group  *  is not necessary anymore and was\nremoved from the  Valid  constraint in the Form validation.xml.",
            "[Validator] Made class Constraint abstract because it must not be instantiated",
            "[Form][FrameworkBundle][TwigBundle] Refactored the PHP and Twig templating layer\n\nSupport for theming in PHP templates has been dropped.\n\nTrue theming should support theme inheritance, e.g. mytheme <- table <- default.\nCurrently, the Templating component does not support such inheritance. As the\nonly purpose of the themes so far was to style field groups with tables or\ndivs, and because automatic rendering of field groups/forms through the render()\nmethod is discouraged and only recommended for rapid prototyping, themes are\ndropped for now.",
            "[FrameworkBundle] fixed phpunit when ran from the app directory directly without -c",
            "[Form] Removed dead code",
            "[Form] Coding style fixes",
            "[DoctrineBundle] Form transformers shouldn't explode if they're passed null as a value",
            "[Form] Added parent calls to all configure() methods of Fields and Transformers\n\nThe calls that were on top of the function have also been moved to the bottom for safety (see previous commit)",
            "[Form] Added support for __get and __set in PropertyPath",
            "[Validator] Made the namespace prefix for annotations configurable\n\nModified the framework bundle to use validation => Symfony\\Component\\Validator\\Validator defaults.\nEnhanced Framework Extension validator configuration to allow to extend this configuration with\nuser-specified annotations, for example:\n\n    validation:\n        enabled: true\n        annotations:\n            namespaces:\n                myprojectvalidator: MyProject\\Validator\\\n\nto register @myprojectvalidator:Validator(...)",
            "[Translation] removed unneeded assignement",
            "[Translation] Added flatten method on ArrayLoader\n\nThis allows the translations to be deeply nested arrays that will be flattened, allowing for namespacing of translations easily.\n\nThe following:\n  'key' => array('key2' => array('key3' => 'value'))\nBecomes:\n  'key.key2.key3' => 'value'\n\nThis isn't applied to Xliff since it does not make sense within the scope of the XLIFF standard",
            "[EventDispatcher] removed the possibility to remove one listener for an event",
            "[FrameworkBundle] Make the security context optional",
            "[TwigBundle] Base form templates now using div instead of tables",
            "[Form][TwigBundle] Making sure all field types are rendered with the proper template",
            "[FrameworkBundle] finished code migration after the removal of the ArrayAccess interface for the Container",
            "removed ArrayAccess interface for Container and Controller",
            "[DependencyInjection] changed the YAML notation for optional services from @@ to @?",
            "[DependencyInjection] removed the leading _ for anonymous service ids (the usage of strtr() in the conversion between ids and methods does not take leading _ into account like camelize() does)",
            "[HttpFoundation] removed optimization for setLocale() as it breaks when locale is not the default and the user wants to switch back to the default locale",
            "[HttpFoundation] Allow the SERVER_PORT key of the server ParameterBag in Request to be a string value without confusing Request::getHttpHost().\n\nThe idea of a string port is probably semantically wrong, but it actually follows the convention of at least some web servers ($_SERVER['SERVER_PORT'] is actually a string). And since the $port variable is used as a string in getHttpHost(), it's correct to allow the types not to match.",
            "[DoctrineMongoDBBundle] added a phpdoc block",
            "[DoctrineMongoDBBundle] added ability to register global listeners and subscribers via the DIC",
            "[DoctrineMongoDBBundle] added support for multiple event managers to the DIC extension",
            "[DoctrineMongoDBBundle] added registration of event listeners and subscribers via service container tags",
            "[Translation] added some unit tests for the new YAML loader",
            "[Translation] Added YamlFileLoader",
            "[Translation] Explicitly mark methods as public",
            "[HttpFoundation] Adding PHPDoc to the Request class and removing two unused variables.",
            "[FrameworkBundle] Add comment to clarify the request service issue",
            "[FrameworkBundle] added routing internationalization\n\nIn your routing.yml:\n\nhomepage:\n    pattern:  /:_locale\n    defaults: { _controller: MyBundle:MyController:index, _locale: en }\n    requirements: { _locale: (en|fr) }\n\nIn your PHP template:\n\n<?php echo $view['session']->getLocale() ?>",
            "[HttpKernel] made some tests more robust",
            "[HttpKernel] made some tests more robust",
            "fixed configuration bugs",
            "[HttpFoundation] added missing code for last commit",
            "[HttpFoundation] added a setCache() method to ease setting the HTTP cache headers in one simple call",
            "[HttpFoundation] added a missing phpdoc",
            "[HttpFoundation] added Response::setPublic() and changed setPrivate() to not take any argument",
            "[FrameworkBundle] changed configuration to always include the session service",
            "[Validator] Fixed annotation loader to not add parent constraints twice",
            "[Form] Fixed: parent::configure() should always be called after adding options to overrule options in the parent class",
            "[TwigBundle] fixed instanceof check to include all FieldGroup like classes",
            "[Form] throw an exception if session_id() is empty when a csrf token is generated",
            "[Form] fixed forms grouped validation\n\nAdded ability to specify **match-all** validation group, which\nconstraints will runs on every specified validation group.\nAdded groups= *  option to `Form::data` Valid validator.",
            "[Form] Fixed MoneyToLocalizedStringTransformer and added tests",
            "[FrameworkBundle] re-added a fake request service so that you can rely on it when defining services with a dependency on it",
            "[DependencyInjection] fixed PHP dumper\n\nIn the dumped PHP class, we must use get() and not get*Service() methods to get services.\nThat's because all calls must be managed by get(). From the outside, you can call\nget*Service() because as they are protected, they are caught by the __call() method;\nwhich is not the case obviously when it is used internally.\n\nIf not, if you override a service with set(), this won't work when a service\ndepends on this one (the default one will still be used).",
            "[Routing] fixed ApacheMatcherDumper default config",
            "refactored session configuration\n\nThe configuration names have been changed to avoid confusion (user was\nambiguous)\n\n    Before:\n          <app:user default_locale= fr >\n              <app:session name= SYMFONY  type= Native  lifetime= 3600  />\n          </app:user>\n\n    After:\n          <app:session default_locale= fr  name= SYMFONY  storage_id= native  lifetime= 3600  />",
            "[FrameworkBundle] Make the use_forward option of FormAuthenticationListener configurable",
            "fixed a unit test",
            "[Form] PercentField fixed option collision",
            "[WebProfilerBundle] fixed redirection interceptions (we must keep as many headers as possible)",
            "fixed session management\n\nSome explanations on how it works now:\n\n * The Session is an optional dependency of the Request. If you create the\n   Request yourself (which is mandatory now in the front controller) and if\n   you don't inject a Session yourself (which is recommended if you want the\n   session to be configured via dependency injection), the Symfony2 Kernel\n   will associate the Session configured in the Container with the Request\n   automatically.\n\n * When duplicating a request, the session is shared between the parent and\n   the child (that's because duplicated requests are sub-requests of the main\n   one most of the time.) Notice that when you use ::create(), the behavior is\n   the same as for the constructor; no session is attached to the Request.\n\n * Symfony2 tries hard to not create a session cookie when it is not needed\n   but a Session object is always available (the cookie is only created when\n    something  is stored in the session.)\n\n * Symfony2 only starts a session when:\n\n   * A session already exists in the request ($_COOKIE[session_name()] is\n     defined -- this is done by RequestListener);\n\n   * There is something written in the session object (the cookie will be sent\n     to the Client).\n\n * Notice that reading from the session does not start the session anymore (as\n   we don't need to start a new session to get the default values, and because\n   if a session exists, it has already been started by RequestListener.)",
            "[TwigBundle] updated filters for the latest version of Twig",
            "[Form] add type for FileField class",
            "added request attributes in the request data collector and web profiler",
            "[HttpKernel] tweaked HttpKernelInterface",
            "[DoctrineBundle] fixed unit tests",
            "When route_attributes is null an exception is raised.",
            "[HttpKernel] updated bootstrap.php",
            "[DoctrineBundle] Coding style fixes",
            "[DoctrineBundle] fixed CS",
            "[DoctrineBundle] Added callbacks to override the default serialization and deserialization of the CollectionToStringTransformer",
            "fixes a bug where in most cases cookies with path / were not set properly",
            "[TwigBundle] split the route tag to 2 tags: path and url",
            "[DependencyInjection] updated TaggedContainerInterface to extend ContainerInterface",
            "[HttpKernel] Fix parameters order in Client::filterRequest",
            "[BrowserKit] Fix parameters order in Client::submit",
            "added initiating template in renderWidget",
            "[HttpKernel] added unit tests for ESI",
            "[HttpKernel] added some more unit tests",
            "[Security] added some missing unit tests",
            "[Translation] added some unit tests",
            "[Security] added unit tests to some authenticated providers (code coverage is more than 96% for the Security component now)",
            "simplified code",
            "[HttpKernel] simplified code a bit",
            "Fix typo in RedirectController",
            "[DoctrineMongoDBBundle] fixed profiler menu text",
            "[Security] added unit tests for the Authentication sub-namespace",
            "[HttpKernel] fixed phpdoc typos",
            "[HttpKernel] added a return value to the purge() method of the Cache store class",
            "[HttpFoundation] added Response::setVary()",
            "[HttpFoundation] removed port number from HOST header\n\nTo be consistent with backup values (SERVER_NAME, SERVER_ADDR).\nfix a problem with getUriForPath($path) where port number may be present twice.",
            "[HttpFoundation] updated get() signature to get($key, $default = null, $first = true)\n\nThis is more consistent with the get() method of ParameterBag",
            "added a user provider for Doctrine MongoDB",
            "Removed logic that tried to avoid double-escaping\n\nBecause that's just not possible (have a look at the unit tests to see all possibilities\n-- as you will notice, there is no way we can determine the context and whether the\ndata are already escaped or not).\n\nSo, we always escape data, which means that sometimes, we will try to escape already\nescaped data. This is not a problem for everything except strings. That's because\nstrings are not wrapped with an object like everything else (for performance reason).\n\nThis means that all escapers must be able to avoid double-escaping (that's the case\nfor the default escapers as both htmlspecialchars() and htmlentities() have a flag\nthat does just this).",
            "[OutputEscaper] replaced the JS escaper with the one from Twig",
            "[FrameworkBundle] fixed missing variable",
            "[OutputEscaper] fixed variable init",
            "[FrameworkBundle] removed the need for decorating  with SafeDecorator",
            "[TwigBundle] moved Form extension initialization as late as possible\n\nBecause\n\n * it's better for performance (no need to init form templates if there is no forms)\n * right now, it crashes for all renderer except HTML (because the form templates obviously only exist for the HTML renderer)\n\nThe only other possible fix would be to force those resources to always use the HTML renderer",
            "[Routing] fixed XML loader on Windows (there is no need to urlencode here as schemaValidate() takes a filename, not a URL)",
            "[HttpFoundation] fixed date format for HTTP headers (format must be RFC1123, not RFC2822 -- the difference is that RFC1123 dates always use GMT for the timezone)",
            "[FrameworkBundle] fixed format management when the default html format is given explicitly",
            "[OutputEscaper] made getEscaper*() methods more consistent with the way you can change the escaping strategy in __call()",
            "[OutputEscaper] refactored the component",
            "[WebProfiler] fixed WDT display",
            "[DependencyInjection] fixed phpdoc",
            "[FrameworkBundle] refactored ide setting configuration",
            "MacVim support",
            "[SwiftmailerBundle] Add missing spool type attribute in swiftmailer-1.0.xsd",
            "[SwiftmailerBundle] Fix spool configuration",
            "applies base64 encoding directly to the binary data instead of their hexadecimal representation",
            "[HttpKernel\\Security]Fixed use statement and updated parameters constructor",
            "[HttpKernel\\Security]Fixed markup",
            "[Security]Fixed markup",
            "[Security]Fixed CS",
            "[DoctrineBundle] made tweaked an error message",
            "[Security] changed encoders to use hash() function whenver possible and replaced sha1 with sha256 as default algorithm",
            "Allowing a routes node to be specified without any child import or route nodes.\n\nThis is not really a bug or a big issue, but if you need to temporarily empty a routes node, Symfony shouldn't care - it's not an actual validation failure (a routes node still makes sense without an route or import children).",
            "removed old code",
            "Moved the  reboot  call after the request is handled; this permits the setting of test fixtures and cleans up the kernel after the request.",
            "[Form] Made InputField instantiable so that simple input fields can be created on the fly",
            "[HttpFoundation] Fixed: File/UploadedFile did not adjust path when moved",
            "[Form] Added validiation of hours, minutes and seconds to TimeField",
            "[Form] Added validation of years, months and days to DateField",
            "[Form] Separated value transformers from normalization transformers.\n\nFields can now easier support different data types in their underlying object.\nThese datatypes can be normalized to a single datatype using a normalization\ntransformer. The normalized value can then be transformed to the user's\nrepresentation with the value transformer (better name required?).",
            "[Form] Implemented UrlField",
            "[Form] Changed value transformers to be responsible for processing empty values to be able to chain them properly. This change fixes the bug that DateField did not return NULL when submitted without values",
            "Adding a type-hint to XmlFileLoader::validate().",
            "[Security] Use a negative length parameter to simplify the code",
            "[Security] added some unit tests (WIP)",
            "fixed interfaces problems",
            "[FrameworkBundle] generate a random password if none is provided in the configuration",
            "added an exception when trying to extend a template with a decorator that uses a different renderer (for instance when a Twig template tries to extend a PHP one)",
            "[Security] Fixed typo",
            "Revert  [Routing] allowed multiple routing requirement with xml loader, using comma separated values \n\nThis reverts commit e8bcbcba57b210246a1d6b5d0fcf688b0a2d8afc.",
            "[DependencyInjection] Regex optimization",
            "[DependencyInjection] Removed useless code",
            "[Security] changed the way passwords are compared to avoid timing attacks",
            "[HttpKernel] fixed typo at Security\\Firewall\\DigestAuthenticationListener",
            "[Routing] allowed multiple routing requirement with xml loader, using comma separated values",
            "added \\RecursiveDirectoryIterator::SKIP_DOTS flag",
            "Fix UniversalClassLoader issues with leading slashes.\n\nThis fixes a bug in UniversalClassLoader when attempting to autoload class names with leading slashes:\n\n    $namespacedClass =  \\\\Foo\\\\Bar ;\n    $pearlikeClass   =  \\\\Foo_Bar ;\n\n    $namespaced = new $namespacedClass();\n    $pearlike   = new $pearlikeClass();\n\n`UniversalClassLoader::loadClass()` was unable to load PEAR-like classes with leading slashes because it found the slash and assumed that the requested class was namespaced. It was unable to load namespaced classes with leading slashes because it would look them up in the autoloader's registered namespaces, and was unable to match '\\Foo' to 'Foo'. One (ugly) workaround for the namespaced classes was to register all namespaces twice:\n\n    $loader->registerNamespaces(array(\n        'Foo'  => __DIR__ . '/lib',\n        '\\Foo' => __DIR__ . '/lib',\n    ));\n\nBut that's not very pretty, nor does it solve the bug with PEAR-like classes. Stripping the leading slash before trying to autoload allows UniversalClassLoader to load both namespaced and PEAR-like classes.",
            "[TwigBundle] fixed the include tag to behave like the standard Twig include tag",
            "made form login configurable",
            "[FrameworkBundle] removed default controller for login",
            "[FrameworkBundle] added a way to configure the switch-user behavior",
            "[FrameworkBundle] added a way to configure the logout paths",
            "[FrameworkBundle] removed support for none as an equivalent to false/null",
            "[Security] Fixed typo",
            "[DependencyInjection] XmlFileLoader should allow  factory-service  attribute without  class  for <service>",
            "Removed the need for having the Security component enabled when using twig.",
            "[Security] Fixed coding standard",
            "[Security] Fixed typo",
            "[CssSelector] Fixed typo",
            "added the Security Component and its integration into the MVC framework\n\nHappy birthday symfony!",
            "[HttpFoundation] added a way to clear the session attributes",
            "[HttpFoundation] added a way to generate a URI based on the current one and a path",
            "fixed form field groups rendering",
            "fixed unit tests",
            "[Validator] removed ftp and ftps from default url protocols",
            "Removed old resources array property from DI extension classes.",
            "Removed all those spaces after @author that were bothering me so\u2026",
            "Removed unnecessary  public  from interface method signatures.",
            "[WebProfilerBundle] Fixed label reference, fixed markup, optimized css and images",
            "[OutputEscaper] Add some tests",
            "[Routing] Added some tests",
            "[DependencyInjection] Added tests for ContainerBuilder class",
            "[DependencyInjection] Added tests for methods hasMethodCall and removeMethodCall of Definition class",
            "Removed methods which implemented interfaces by throwing \\LogicException('You must override...').",
            "[Translation] Fixed phpdoc, thx Koc",
            "[Component] Fixed some spelling typos",
            "[Validator] Fixed coding standard",
            "fixed test",
            "[FrameworkBundle] updated constraint validator factory to work with non-DIC validators",
            "[FrameworkBundle] added a DIC tag-based constraint validator factory",
            "[Validator] removed DependencyInjection integration",
            "[DependencyInjection] Added TaggedContainerInterface to signature of generated container classes",
            "[FrameworkBundle] Fix format parsing",
            "fixed inconsistency when calling the Http Kernel instance from an event",
            "[FrameworkBundle] fixed inclusion of the test client",
            "[FrameworkBundle] prettified Mustache.php and added PHPDoc.",
            "[Form] readPropertyPath should return null instead of empty array\n\nWhen reading the last bit of a property path mapped to a missing array index, the method would initialize the value to an empty array.  This makes sense for cases where readPropertyPath would again be called recursively, but not when the value would be immediately returned (null would be preferable in that case).\n\nFor example, we have an object with a property called  options  that's an array of arbitrary key/value pairs.  That  options  property (and getOptions()) maps directly to a FieldGroup within the Form for this object.  That FieldGroup contains multiple TextFields for a few expected keys in the array.  As-is, if those keys were not defined, the default data set for those TextFields could end up being  Array  (string representation of an empty array).  If readPropertyPath instead returns null for this case, the default data would be transformed into an empty string.",
            "[EventDispatcher] fixed possible PHP warning",
            "[EventDispatcher] fixed bug in EventDispatcher::disconnect if the second argument is null or ommitted",
            "removed debug code",
            "[Console] fixed status code when it is > 255",
            "added PHPDoc",
            "Overrides the default {% include %} token parser since it loads through the right template renderer",
            "[HttpFoundation] added Session::invalidate()",
            "[DoctrineMongoDBBundle] fixed error when logging bin values in queries",
            "Adding basic PHPDoc to the Routing\\DelegatingLoader class.",
            "Adding basic PHPDoc to the Routing\\DelegatingLoader class.",
            "[Form] PropertyPath camelizes property names when setting values",
            "[Form] Removed CSRF setters because they have no effect once CSRF protection is enabled. Re-enable CSRF protection with the desired values instead",
            "[Form] Refactored logic to read and set values from Field to PropertyPath",
            "Add missing EntityToIDTransformer files",
            "[TwigBundle] Add a template block to render CollectionField fields",
            "[Form] Fix FieldGroup::getHiddenFields, add tests for FieldGroup::getHiddenFields and FieldGroup::getVisibleFields",
            "fixed: fixed the bug of request_panel.php in WebProfiler\n\nWhen the session attributes don't exist, $data->sessionAttributes->getRawValue() cannot be called as not being defined.\nSo check the session attributes before calling getRawValue()",
            "[FrameworkBundle] fixed typo in Translator",
            "[FrameworkBundle] fixed typos (patch from Dennis.Verspuij)",
            "fixed typo",
            "[FrameworkBundle] clarified exception message in InitBundleCommand.php (patch from mvrhov)",
            "[TwigBundle] Simplified some code",
            "Added --symlink option to assets:install command",
            "changed autoload.php.dist namespace order",
            "[HttpFoundation] changed RequestMatcher pattern syntax",
            "fixed typo",
            "[Form] Turned FieldGroup::getFields() into 4 specialized methods for more flexibility\n\nIt's better to be able to fetch all the visible and all the hidden fields separately for display purposes (hidden fields in <ul> tags without an <li> do not validate)",
            "fixed unit tests after the last commit",
            "[EventDispatched] Event doesn't need to implement ArrayAccess",
            "[WebProfilerBundle] simplified DIC extension",
            "added some missing methods",
            "Added and tested EntityToIDTransformer to transform Many-To-One and One-To-One entities into their identifier values",
            "Optimize some code in Form/Configurable, Have ChoiceField always pass data to transformers, implemented and fully unit-tested two Doctrine ORM specific transformers that do Collection to String/Choice Transformations",
            "Refactor ValueTransformers to recieve the original value when reverseTransform() is called. This is required for expensive value transformations for example Doctrine Collections or Proxies to allow access to a value that does not trigger expensive operations (such as database calls) anymore.",
            "made locale determination for translation lazy-loaded\n\nThis allows to have a stateless-website (without any cookie)\nfor instance if the locale is part of the domain name\nand not attached to the user.",
            "[FrameworkBundle] changed Template renderers to be lazy-loaded",
            "fixed Doctrine data fixtures path",
            "Fixing container test.",
            "[Form] fixed license and phpdoc",
            "[TwigBundle] added tests for trans tag and filter",
            "[TwigBundle] updated nodes for the latest version of Twig",
            "[TwigBundle] added the trans filter",
            "[TwigBundle] fixed trans tags",
            "[TwigBundle] fixed typo",
            "[TwigBundle] optimized calls to helpers",
            "fixed HelpersExtension (removed usage of the magic _view context attribute -- helpers should now work from macros)",
            "[TwigBundle] made trans and transchoice tags more flexible\n\nBoth tags accept variables now:\n\n    {% trans label %}\n\n    {% transchoice %}\n      {{ error }}\n    {% endtranschoice %}\n\nOptionally, the with keywords allows to pass the placeholder values:\n\n    {% trans label with vars %}",
            "[TwigBundle] moved translator helpers to their own extension (removed usage of the magic _view variable context)",
            "[Validator] fixed typo",
            "[FrameworkBundle] Replaced non-existent definition key",
            "[HttpFoundation] Fix session::remove() not initializing the session",
            "[WebProfilerBundle] updated two references to the bag template to the new style by adding a .php extension to them",
            "[TwigBundle] fixed trans tag",
            "[TwigBundle] fixed trans tag",
            "[TwigBundle] renamed Helpers to HelpersExtension",
            "[Form] fixed camelization problem when looking for a method (getCreated_at -> getCreatedAt)",
            "[Validator] removed the convention that error parameters are delimited with %%",
            "[FrameworkBundle] Fixed a windows compatibility issue",
            "[OutputEscaper] added SafeDecoratorInterface",
            "[FrameworkBundle] fixed comment",
            "changed templating name notation\n\nOld notation: bundle:section:name.format:renderer (where both format and renderer are optional)\nNew notation: bundle:section:name.format.renderer (where only format is optional)\n\nValid new template names: Blog:Post:index.php, Blog:Post:index.xml.php\n\nThe new notation is more explicit and put all templating engines on the same level (there is no\nmore the concept of a  default  templating engine).\n\nEven if the notation changed, the semantic has not. So, the logical template name for the above\nexamples is still 'index'. So, if you use a database loader for instance, the template\nname is 'index' and everything else are options.\n\nUpgrading current applications can be easily done by appending .php to each existing template\nname reference (in both controllers and templates), and changing :twig to .twig for Twig templates\n(for twig templates, you should also add .twig within templates themselves when referencing\nanother Twig templates).",
            "[Translation] renamed Range to Interval",
            "fixed request data collector",
            "[Form] Removed invalid unit test\n\nThe bind() method only accepts arrays - passing objects causes an exception",
            "added an IdentityTranslator to make it possible to always relies on the translator service, even if none is configured",
            "[FrameworkBundle] added error messages from the Form Component in the default validators.fr.xliff",
            "updated some helper docblocks - fixed usage of helpers",
            "[Validator] changed the convention for placeholders in messages to be compatible with Twig (from %limit% to {{ limit }})",
            "[FrameworkBundle] added support for the Translation component",
            "[TwigBundle] added helpers for translations",
            "[Translation] added the component",
            "[ZendBundle] removed translator support",
            "[FrameworkBundle] fixed file detection and formatting in Code helper",
            "[DependencyInjection] tweaked an error message to ease debugging",
            "[FrameworkBundle] made all Router options configurable",
            "[Form] fixed typo in unit test",
            "[Form] added support for stdClass objects\n\nReflectionClass doesn't list properties on stdClass objects (or objects cast\nfrom arrays).  This allows these annoymous objects to be used as field data.",
            "[Form] fixed failing unit test due",
            "[Form] fixed decimal rounding in IntegerField\n\nInstead of rounding half-up (round to nearest neighbor) act as an integer cast\nwould and always round down (round towards zero).",
            "[Form] added support for rounding-mode option on NumberFields",
            "[Form] fixed missing locale setting in unit tests",
            "[Form] fixed bug that prevented setLocale from working",
            "[ZendBundle] fixed translator configuration",
            "fixed PHPUnit configuration",
            "removed the message interpolator system in the Validator component (i18n management should be done globally, not in a specific component)",
            "[FrameworkBundle] removed obsolete file",
            "fixed typo in options",
            "added width, height, alt tags for all images used in web profilers (for proper html)",
            "[FrameworkBundle] added support for services as controllers",
            "[Validator] Allow DateTime objects as valid DateTimes",
            "refactored configuration names\n\nHow to upgrade (have a look at the skeleton):\n\n  * the  web:config  namespace is now  app:config \n\n      -    <web:config csrf-secret= xxxxxxxxxx  charset= UTF-8  error-handler= null >\n      -        <web:router resource= %kernel.root_dir%/config/routing.xml  />\n      -        <web:validation enabled= true  annotations= true  />\n      -    </web:config>\n      +    <app:config csrf-secret= xxxxxxxxxx  charset= UTF-8  error-handler= null >\n      +        <app:router resource= %kernel.root_dir%/config/routing.xml  />\n      +        <app:validation enabled= true  annotations= true  />\n      +    </app:config>\n\n  * the  web:templating  namespace is now a sub-namespace of  app:config \n\n      -    <web:templating\n      -        escaping= htmlspecialchars \n      -    />\n      +    <app:config>\n      +        <app:templating escaping= htmlspecialchars  />\n      +    </app:config>\n\n  * the  web:user  namespace is now a sub-namespace of  app:config \n\n      -    <web:user default-locale= fr >\n      -        <web:session name= SYMFONY  type= Native  lifetime= 3600  />\n      -    </web:user>\n      +    <app:config>\n      +        <app:user default-locale= fr >\n      +            <app:session name= SYMFONY  type= Native  lifetime= 3600  />\n      +        </app:user>\n      +    </app:config>\n\n  * the  web:test  namespace is now a sub-namespace of  app:config \n\n      -    <web:test />\n      +    <app:config error_handler= false >\n      +        <app:test />\n      +    </app:config>\n\n  * the  swift:mailer  namespace is now  swiftmailer:config \n\n      -    <swift:mailer\n      +    <swiftmailer:config\n               transport= smtp \n               encryption= ssl \n               auth_mode= login \n\n  * the  zend:logger  namespace is now a sub-namespace of  zend:config \n\n      -    <zend:logger\n      -        priority= info \n      -        path= %kernel.logs_dir%/%kernel.environment%.log \n      -    />\n      +    <zend:config>\n      +        <zend:logger priority= info  path= %kernel.logs_dir%/%kernel.environment%.log  />\n      +    </zend:config>",
            "[Process] remove fork references as proc_* functions start a command from an independant process, does not copy the parent memory space like pcntl_* function",
            "[Finder] fixed a problem on Windows",
            "fixed misplaced file",
            "[Form] avoid double-escape and then unescape\n\nhtmlspecialchars' fourth parameter allows you to avoid double-escaping in the first place",
            "[DoctrineMongoDBBundle] added a quick profiler panel",
            "[DoctrineMongoDBBundle] fixed formatting of booleans in query log",
            "Fixing Dbal logger to work with latest DBAL",
            "[FrameworkBundle] Fixed reference to old class",
            "[Process] added a Process:isSucessful() method",
            "[Console] Added some tests for command shortcuts",
            "[Console] Fixed invalid help command shortcut",
            "[Form] Add new fields in CollectionField::setData()",
            "[Form] Remove support for ArrayObject as ChoiceField's choices option\n\nInternally, ChoiceField expects both choices and preferred_choices to be a simple array, so I replaced incomplete bits of code that attempted to not modify a possible ArrayObject and instead added type checks in the configure() method (with unit tests for expected exceptions).",
            "added a way to activate CSRF protection from the configuration",
            "reverted  [Form] fixed default CSRF token generation as a token must be tied to the user somewhat \n\nThis reverts commit d326c398e2721c996d9f45108c1ab0cdfceb8ea6.",
            "[Form] fixed default CSRF token generation as a token must be tied to the user somewhat",
            "[Form] set file field as multipart",
            "[HttpFoundation] fixed request files handling",
            "[Form] added missing use statement",
            "[DoctrineMongoDBBundle] Move test configuration fixtures to Resource/config/doctrine/metadata/orm/",
            "[DoctrineBundle] Move test configuration fixtures to Resource/config/doctrine/metadata/orm/",
            "[DoctrineMongoDBBundle] fix mapping dirs",
            "[DoctrineBundle] fix mapping dirs",
            "[DoctrineBundle] BC break - Load metadata files in Resources/config/doctrine/metadata/orm/",
            "[Form] removed obsolete use statements",
            "fixed file upload",
            "[Form] added a FileField",
            "[Form] fixed Form::bind() when no values are submitted",
            "[Validator] fixed Xliff loader to use forward slashes in file path",
            "[Process] made cwd argument optional",
            "Add Symfony proxies for Doctrine ODM schema:create and schema:drop console commands.",
            "[FrameworkBundle] fixed exception styles",
            "Fixed wrong variable name in Esi.",
            "[Routing] removed the autoloading trick, which is not needed anymore",
            "[Validator] changed Xliff loader to get XSD locally",
            "[Validator] fixed indentation",
            "[Routing] added 'defaults' support in Annotation class loader",
            "[Routing] added an annotation loader",
            "[DoctrineMongoDBBundle] added support for more Mongo and ODM types",
            "fixed webprofiler on Windows (closes #9045)",
            "fixed exception HTML markup (closes #9044, partially based on a patch from wrzasq)",
            "[DoctrineMongoDBBundle] BC break - Load metadata files in Resources/config/doctrine/metadata/mongodb/",
            "[HttpFoundation] updated getQueryString() to work in more scenarios",
            "[DoctrineBundle] BC break - Load fixtures in Resources/data/fixtures/doctrine/orm/",
            "fixed previous commit",
            "Symfony\\Component\\Routing\\Route::setRequirements() _method requirement can be an array, no substr on it",
            "changed calls to has() to use the new proxy method",
            "[DpependencyInjection] added hasParameter()",
            "[Form] fixed problem with PHPUnit mocks (ugly hack but it works for now)",
            "[Finder] Fixed randomly failing tests due to the order files are read from the filesystem",
            "[DomCrawler] Fixed URIs being incorrectly generated\n\nWhen the path is not ending with a slash and the form/link has only ?get=params then the last bit of the path was incorrectly stripped",
            "[DomCrawler] Added tests to verify previous fix",
            "[DomCrawler] Fixing trailing space",
            "[DomCrawler] Fixing typo",
            "Fixing coding standards.",
            "Fixing issue with FieldGroup and its __clone() method not properly setting the parent.",
            "added a way to conditionnaly enable the profiler based on the request",
            "[HttpFoundation] added request matcher",
            "[DependencyInjection] added methods to remove an alias and a definition from a ContainerBuilder instance",
            "[DependencyInjection] added a way to inject an anonymous service in an extension configuration\n\n    <foo:bar>\n        <service class= Foo  />\n        <service class= Bar  />\n    </foo:bar>\n\nIn the foo:bar extension method, you can retrieve the services with:\n\n    // always an array of services\n    $config['_services']",
            "[DoctrineBundle] removed README",
            "[DoctrineMongoDBBundle] removed some mostly unnecessary calls to json_encode from logger",
            "Replacing  Entities  with  Entity ",
            "[FrameworkBundle] -",
            "[DoctrineMongoDBBundle] added a placeholder for the MongoDB panel",
            "[FrameworkBundle] added the environment in the router classes in the cache",
            "[FrameworkBundle] fixed skeleton",
            "[HttpFoundation] fixed Request::hasSession()",
            "[EventDispatcher] added a way to disconnect all listeners for an event name",
            "[FrameworkBundle] updated skeleton with the web profiler configuration",
            "[WebProfilerBundle] added the bundle",
            "[HttpKernel] fixed exception constructor signature",
            "[FrameworkBundle] tweaked exception CSS",
            "[FrameworkBundle] removed usage of array access for helpers in templates",
            "[FrameworkBundle] added a condition to only show current content when it is not empty in the exception template",
            "[FrameworkBundle] changed exception template to show class abbreviations",
            "[HttpKernel] fixed Exception classes to implement the full constructor",
            "[HttpKernel] fixed FlattenException status code",
            "[HttpKernel] added purge() in the profiler storage interface",
            "[FrameworkBundle] fixed $view['actions']->output() signature to match that of ->render()",
            "added a configuraiton to allow the profiler to be enabled only when an exception occurs",
            "[HttpKernel] fixed missing use statement",
            "[DoctrineBundle] Fixed bug in data:load when purging many-to-many relationships",
            "[DoctrineBundle] Decreased data:load verbosity",
            "[DoctrineMongoDBBundle] updated log format to look more like the javascript shell",
            "[FrameworkBundle] reverted wrong change",
            "[TwigBundle] fixed grammar for render helper.",
            "fixed perms",
            "[ZendBundle] added an option to register zend logger as an error handler",
            "fixed PHPDoc",
            "[FrameworkBundle] fixed bug",
            "[FrameworkBundle] removed dependency with the DIC",
            "[HttpKernel] added import/export to Profiler",
            "[DoctrineBundle] added time information in the data collector",
            "changed actions::render() helper method signature",
            "fixed typo",
            "[FrameworkBundle] changed the ExceptionListener to re-thrown an exception when there is an exception thrown during processing",
            "[FrameworkBundle] removed usage of Controller class for internal controllers",
            "[FrameworkBundle] fixed method signature",
            "[HttpFoundation] fixed locale accessors in Session class",
            "[ZendBundle] removed obsolete alias",
            "[HttpFoundation] fixed typo",
            "[FrameworkBundle] changed exception design slightly",
            "[Templating] added Engine::exists()",
            "refactored Profiler and DataCollector classes (the WDT has been removed and will be re-added in the upcoming WebProfilerBundle)",
            "[FrameworkBundle] made exception controller embeddable",
            "added ContainerAwareInterface",
            "[Framework] added a way to retrieve called and not-called events for a given dispatcher",
            "[FrameworkBundle] added 2 helpers",
            "[Framework] made a small optimization",
            "[FrameworkBundle] made sub-requests inherit from the parent session",
            "[HttpFoundation] fixed Session serialization",
            "made ExceptionManager independent of the Request",
            "added a priority to the event dispatcher listeners",
            "[Framework] added logs when some listeners are not called because the event has already been processed",
            "[HttpFoundation] added a keys() method to *Bag classes",
            "[FrameworkBundle] fixed typo",
            "[DoctrineMongoDBBundle] added logger and data collector for WDT",
            "[Templating] fixed PHP renderer when using a template variable named 'template'",
            "[DoctrineBundle] Updated data:load command to work with Doctrine2 BETA3",
            "[DependencyInjection] added a way to ignore errors when importing a non-existent file (useful when you want to include an optional service file)",
            "[DependencyInjection] moved extension loading in the freezing process (opens more possibilities in the loading order of configs)",
            "[FrameworkBundle] changed the default value of ignore_errors according to the current debug value",
            "[FrameworkBundle] added support for previous exceptions in the exception pages",
            "renamed SessionHelper::getAttribute to SessionHelper::get, and made it call Session::get",
            "[FrameworkBundle] added ControllerInterface\n\nA Controller must now implements ControllerInterface.\n\nThe BaseController can be used as the base class for Controllers.\nThe Controller class adds some proxy methods and an array access to the Container.",
            "added a way to disable the profiler",
            "[TwigBundle] made a small optimization",
            "[TwigBundle] added a flash tag",
            "[HttpFoundation] fixed Session",
            "[Framework] removed obsolete parameter",
            "updated bootstrap",
            "[HttpFoundation] added automatic session start() when changing something in the session, renamed accessor methods, added remove()/has() methods",
            "renamed Symfony\\Components to Symfony\\Component",
            "[Routing] fixed PhpFileLoader",
            "[FrameworkBundle] modified the default layout for the error page to something more neutral",
            "[Framework] fix ClassCollectionLoader not taking interfaces into account",
            "[FrameworkBundle] fixed exception templates",
            "added a way to provide asset base URLs in configuration",
            "[Templating] changed helpers from Engine properties to Engine array items\n\nFor instance, instead of $view->slots->output(...), you must now write $view['slots']->output(...)\n\nThis has been changed for two main reasons:\n\n* To be consistent with the way we access services from the container ($container['mailer'])\n* To allow better organization of helpers (names can now safely contain dots for instance -- $view['project.slots']->output(...),\n  whereas before, you would have written $view->get('projects.slot') or $view->{'projects.slot'})",
            "[FrameworkBundle] moved internal_routing.xml",
            "[Framework] added Kernel::getBundleForClass()",
            "[FrameworkBundle] made a small refactoring",
            "[FrameworkBundle] fixed YAML skeleton",
            "made ClassCollectionLoader smarter",
            "[FrameworkBundle] fixed typo",
            "[FrameworkBundle] made logger optional in ExceptionManager",
            "[HttpKernel] fixed typo",
            "[FrameworkBundle] added error logging with error_log() when logger is disabled",
            "[FrameworkBundle] refactored Exception management",
            "moved Logger interfaces to a HttpKernel Log sub-namespace",
            "[ZendBundle] added DebugLoggerInterface",
            "[HttpFoundation] added Request::setRequestFormat()",
            "[FrameworkBundle] added the possibility to render a template for a different format than the one from the current Request",
            "[Routing] made Router->generate  optional, default to empty array",
            "[FrameworkBundle] fixed CS",
            "fixed Controller::redirect must return the response",
            "[FrameworkBundle] removed Container dependency for RequestListener",
            "[FrameworkBundle] removed Container dependency for ExceptionFormatter",
            "[FrameworkBundle] changed error_log() calls to logger calls",
            "[FrameworkBundle] clean up Request before forwarding",
            "fixed usage of getRequest() in ControllerResolver",
            "[FrameworkBundle] removed old file",
            "[FrameworkBundle] fixed built-in controllers",
            "removed old code",
            "changed Controller to implements ArrayAccess, removed getRequest() method",
            "added ControllerResolver::forward() (will probably move it elsewhere later on)",
            "added Engine::renderResponse()",
            "added Response::setRedirect()",
            "simplified HttpKernel types of request",
            "updated bootstrap.php",
            "Fix CRLF in xliff-core-1.2-strict.xsd",
            "simplified some code",
            "[FrameworkBundle] Updated kernel test to create tmp directory on instantiation",
            "[FrameworkBundle] added an error message when an exception is thrown when handling another exception",
            "Fixing naming issue (fixes #8953)",
            "Adding mongodb to default autoloader so tests will run.",
            "Fixing issue with .xml being hardcoded and converting yaml to yml for propert file extension.",
            "[DoctrineMongoDBBundle] removed trailing space",
            "[FrameworkBundle] made a small optimization",
            "[Framework] better fix for the previous commit",
            "[Framework] fixed loading of compiled classes",
            "[FrameworkBundle] fixed web test case to take into account the new ways to configure PHPUnit",
            "updated default configuration in skeleton",
            "made classes compilation more configurable",
            "[Framework] updated the stripComments() method",
            "modified BundleInterface",
            "made some cleanup",
            "removed BundleInterface::buildContainer() method (extensions are now automatically registered -- or override the getExtensions() method if you do not follow the conventions)",
            "[FrameworkBundle] removed WebExtension constructor",
            "[FrameworkBundle] fixed tests",
            "[FrameworkBundle] moved templating configuration from FrameworkBundle to FrameworkExtension",
            "[DoctrineMongoDBBundle] removed DoctrineMongoDBExtension constructor",
            "[DoctrineBundle] removed DoctrineExtension constructor",
            "updated bootstrap file",
            "[FrameworkBundle] fixed actions helper (and allowed short notation in the resolver)",
            "moved KernelBundle logic to KernelExtension, and made test.xml decoupled from the error handler\n\nThe error_handler_level parameter (from kernel.config) has been renamed to error_handler (false to disable the error handler,\nnull to catch errors from error_reporting(), and a number to catch more/less errors than error_reporting())",
            "[HttpKernel] made all core.* events take a request_type parameter for consistency",
            "refactored the controller resolver (+ made a small routing optimization)",
            "[HttpKernel] fixed some phpdoc",
            "[Framework] added Kernel::isClassInActiveBundle()",
            "[Routing] added Route::setDefault()",
            "[Framework] added the ClosureLoader for DIC in the kernel",
            "[Framework] disabled the bootstrap file when debug is true",
            "[Framework] removed old code",
            "[FrameworkBundle] fixed CS",
            "[FrameworkBundle] fixed XSD for validation",
            "renamed annotation to tag in the DIC",
            "Allowing default_database to be configured per document manager.",
            "[DoctrineMongoDBBundle] added  default_database  attribute to DI extension",
            "[HttpKernel] fixed previous commit",
            "[HttpKernel] fixed wrong usage of sleep()",
            "[HttpKernel] added getSummary to DataCollectorInterface",
            "removed auto_start left over",
            "[Framework] updated the bootstrap file",
            "[DoctrineMongoDBBundle] fixed class names in tests",
            "[DoctrineMongoDBBundle] fixed parameter references in tests",
            "[DoctrineMongoDBBundle] renamed extension class",
            "[DoctrineMongoDBBundle] fixed use statement",
            "Removed some use statements that are no longer needed.",
            "[DoctrineMongoDBBundle] changed references from metadata_driver to metadata",
            "[DoctrineMongoDBBundle] added default cache service to xml",
            "[DoctrineMongoDBBundle] moved concat of  %  into sprintf",
            "[DoctrineMongoDBBundle] fixed coding standards",
            "[DoctrineBundle,DoctrineMongoDBBundle] Updated tests to work when both bundles are enabled.\n\nWhen running Symfony2 unit tests with DoctrineBundle and DoctrineMongoDBBundle\nenabled, tests failed with class redeclaration errors for YamlBundle,\nXmlBundle, and AnnotationBundle.  Fixed these test bundles to use fully\nqualified namespaces.",
            "[DoctrineMongoDBBundle] updated to only load default settings once\n\nFixed a bug that caused DoctrineMongoDBBundle to load default settings for\nevery parsed config file rather than just the first.  This caused\nimported files to be override by default values.",
            "[DoctrineBundle] updated to only load default settings once\n\nFixed a bug that caused DoctrineBundle to load default settings for\nevery parsed config file rather than just the first.  This caused\nimported files to be override by default values.",
            "[FrameworkBundle] added validation in XSD",
            "removed @package and @subpackage annotations",
            "[HttpFoundation] Population of HTTP Headers in Request::overrideGlobals() accept multiple values",
            "[HttpFoundation] populate $_SERVER with HTTP headers when calling Request::overrideGlobals()",
            "updated PHPDoc as the API tool knows about the current use statements",
            "[HttpKernel] fixed typo",
            "[FrameworkBundle] added PHPDoc to the Controller class",
            "[FrameworkBundle] removed Controller::getMailer() method (just use ->container['mailer'] instead)",
            "[FrameworkBundle] fixed indentation",
            "[DoctrineBundle] Removing old and unused services defined in xml. The services are defined in PHP extension now.",
            "[HttpKernel] fixed content-type management for ESIs when charset is part of the response content-type header",
            "fixed some merging problems and disable non-existent cache service",
            "[DoctrineBundle] Adding missing cache driver configuration for each entity manager.",
            "[DoctrineBundle] Refactoring DoctrineBundle to match DoctrineMongoDBBundle",
            "[DoctrineMongoDBBundle] Fixing code standards.",
            "[DoctrineMongoDBBundle] Finishing implementation of DoctrineMongoDBBundle to support multiple connections/document managers plus refactoring and cleaning up code along the way.",
            "fixed __toString() methods that can return false under certain circumstancies",
            "[Validator] fixed the problem with conflict  File  name in namespace at Symfony\\Components\\Validator\\Constraints\\FileValidator when Symfony\\Components\\Validator\\Comstraints\\File was loaded before loading FileValidator",
            "[HttpFoundation] domain shouldn't be required\n\nSpec says:  The default value of domain is the host name of the server which generated the cookie response. ",
            "[HttpFoundation] don't check twice if it's null",
            "[HttpFoundation] set httponly to true by default\n\nThis is a more secure default and has virtually no impact unless you try to read cookies from javascript.",
            "[HttpFoundation] comment tweak for clarity",
            "[Routing] simplified RouterInterface",
            "changed HttpKernel workflow to allow more flexibility",
            "[Templating] fixed misnamed variable that caused some double-rendering problems",
            "renamed request path property to request attributes",
            "[FrameworkBundle] added an event to filter the controller arguments",
            "[DoctrineBundle] Fixing failing DoctrineExtensionTest related to container not calling freeze()",
            "[Form] Fixed reference to \\Traversable",
            "[ZendBundle] added Zend\\\\Translator component",
            "[Form] Swap default textarea rows/cols values",
            "[Routing] Fix  missing a trailing slash on windows",
            "[DependencyInjection] Fix  missing a trailing slash on windows",
            "fixed previous commit",
            "[FrameworkBundle] added a skeleton for configuration in plain PHP",
            "updated the framework to take into account the last changes of the DI component",
            "[DependencyInjection] refactored loaders\n\n * refactored the import mechanism for better flexibility\n * added two methods to LoaderInterface: supports() and setResolver()\n * added a LoaderResolver interface\n * added a Loader base class\n * added new loaders: DelegatingLoader, PhpFileLoader, and ClosureLoader",
            "refactored routing management (it's now possible to disable the default routing)\n\n * removed the Kernel::registerRoutes() method\n * added a router entry in <web:config> (replaces the registerRoutes() method)\n       <web:config>\n           <web:router resource= %kernel.root_dir%/config/routing.xml  />\n       </web:config>\n * refactored routing configuration in its own routing.xml file (leverages the new routing component API),\n   which is loaded only if <web:router> is defined in the configuration",
            "[Routing] refactored loaders\n\n * refactored the import mechanism for better flexibility\n * added two methods to LoaderInterface: supports() and setResolver()\n * added a LoaderResolver interface\n * added a Loader base class\n * added new loaders: DelegatingLoader, ClosureLoader, and PhpFileLoader\n * changed the Router constructor signature (now takes a Loader)",
            "[Console] changed CommandTester to allow testing Command classes without the need for an Application",
            "fixed test configuration and broken tests",
            "[DoctrineBundle] Make sure directories exist before trying to write files.",
            "[DoctrineBundle, DoctrineMongoDBBundle] Making sure proxy directory is created when DI container is being built",
            "[DoctrineBundle] Fixing issue with doctrine:generate:entity command when no --fields are specified",
            "Fixing issue with filters.",
            "Fixing coding standards.",
            "[DoctrineBundle]fixed defect in doctrine:generate:entity where xml extension was added to all mapping types",
            "fix output file name",
            "[DoctrineBundle] Added memory and charset options\n\nAdded missing driver options (memory, used by sqlite; charset, used by oci) to\nthe supported configuration options supported by DoctrineBundle.",
            "[DoctrineBundle] Fixed multiple connections via XML\n\nFixed a bug (possibly introduced by e63ff6e04b37ca75f282) that prevented\nmultiple DBAL connections from being configured via an XML configuration file.\n\nWhen multiple DBAL connections are specified via XML similar to:\n\n    <doctrine:dbal>\n      <doctrine:connections>\n        <doctrine:connection\n          id= conn1 \n          ..\n        />\n        <doctrine:connection\n          id= conn2 \n          ..\n        />\n      </doctrine:connections>\n    </doctrine:dbal>\n\nXMLFileLoader produces a configuration similar to:\n\n    array('connections' => array(\n      'connection' => array(\n        0 => array(\n          'id' => 'conn1',\n        ),\n        1 => array(\n          'id' => 'conn2',\n        )\n      )\n    )\n\nwhereas when one connection is specified via XML similar to:\n\n    <doctrine:dbal>\n      <doctrine:connections>\n        <doctrine:connection\n          id= conn1 \n          ..\n        />\n      </doctrine:connections>\n    </doctrine:dbal>\n\nXMLFileLoader produces a configuration similar to:\n\n    array('connections' => array(\n      'connection' => array(\n        'id' => 'conn1',\n      )\n    )\n\nThis commit fixes DoctrineExtension to properly handle both cases, while still\nsupporting YAML configuration files.",
            "[DependencyInjection] added a check for the class name when dumping a container to PHP",
            "[DependencyInjection] added a check for the class name when dumping a container to PHP",
            "[BrowserKit] fixed Client::request() method signature",
            "[Console] fixed InputDefinition setArguments must reset hasAnArrayArgument (closes #8336)",
            "[DependencyInjection] added a check for the class name when dumping a container to PHP",
            "[FrameworkBundle] fixed skeleton",
            "Merge commit 'kriswallsmith/register-commands-with-subnamespaces'\n\n* commit 'kriswallsmith/register-commands-with-subnamespaces':\n  [Framework] Fixed command registration magic to work when commands have sub-namespaces.",
            "[DoctrineMongoDBBundle] Moved loading of default configuration inside conditional so it's only loaded once.",
            "moved DI extensions classes to their own sub-namespace",
            "[DependencyInjection] fixed placeholder management in parameter values",
            "[DependencyInjection] moved ContainerBuilder::resolveValue() to ParameterBag",
            "merged BuilderConfiguration and Builder classes into a new ContainerBuilder class",
            "fixed phpdoc for DI extensions",
            "updated bootstrap.php",
            "[FrameworkBundle] removed Controller::getUser() as it is now accessible via Request::getSession()",
            "changed the BundleInterface::buildContainer() signature",
            "refactored the controller manager, moved generic parts to the HttpKernel component",
            "[HttpKernel] fixed error message",
            "updated vendors to not rely on Doctrine submodules",
            "[Finder] fixed typo in phpdoc",
            "[Finder] fixed exclude iterator (now only match with the relative path)",
            "[HttpFoundation] added some phpdoc",
            "[HttpFoundation] fixed phpdoc",
            "[HttpFoundation] fixed phpdoc",
            "Replace Container->hasParameter() with Container->getParameterBag()->has() in ExceptionFormatter",
            "[Framework] Fixed test namespaces.",
            "cleaned up the DI extension loading mechanism",
            "[FrameworkBundle] Fixed call to old method in RequestHelper.",
            "[FrameworkBundle] Fixed getting template helper services not in the container's 'templating.helper' namespace",
            "[Framework] fixed packager script",
            "fixed phpdoc",
            "renamed Symfony\\Foundation to Symfony\\Framework\n\nIn existing applications, you need to updated the autoload.php file, the\nXXXKernel file and all XXXBundle classes.",
            "renamed Symfony\\Bundle\\FoundationBundle to Symfony\\Bundle\\FrameworkBundle",
            "renamed Symfony\\Framework to Symfony\\Bundle\n\nFor existing Symfony2 applications, references to Symfony\\Framework are found\nin the main Kernel class (registerBundles() and registerBundleDirs()), and in\nall Controller classes. You also need to change the console script.",
            "moved Request/Response/User classes to a new HttpFoundation component\n\nThe HttpFoundation component holds classes that wrap PHP native global arrays.\n\nThe following classes has been moved:\n\n * Symfony\\Components\\HttpKernel\\Response -> Symfony\\Components\\HttpFoundation\\Response\n * Symfony\\Components\\HttpKernel\\Request -> Symfony\\Components\\HttpFoundation\\Request\n * Symfony\\Framework\\FoundationBundle\\User ->  Symfony\\Components\\HttpFoundation\\Session\n * Symfony\\Framework\\FoundationBundle\\Session\\* ->  Symfony\\Components\\HttpFoundation\\SessionStorage\\*Storage\n\nThe web:user DI configuration has been moved to kernel:session.\n\nThe user helper has been renamed to session.",
            "[DependencyInjection] fixed conversion of DOM to array when DOM includes multiple elements with the same name",
            "changed all listener classes so their names end with Listener",
            "[DomCrawler] Fixed Form::getUri() and Link::getUri() issue if the form action attribute is an absolute url",
            "[FoundationBundle] fixed bundles with sub-namespaces",
            "[DepedencyInjection] amended previous commit\n\n * fixed coding standards\n * made class optional as it is not defined when using a factory service\n * renamed factory attributes in XML files, updated XSD\n * removed the factory-class as it does nothing more than the regular class attribute\n * moved usage of Reflection as 'class' is not defined when a factory-service is used\n * added more tests\n * fixed PHP dumper",
            "[DependencyInjection] Add factory-class and factory-service concepts to DI Definition. A factory-class is a class-name for the static creation method of a service. A factory-service is the service object that has a factory method to construct a given service. Added tests. Changed Xml, Yaml Dumper and Loaders, PHP Dumper, aswell as the Runtime Builder Container. Graphviz changes missing!",
            "[DependencyInjection] removed @property annotations as services are not available as properties anymore",
            "[DependencyInjection] fixed Doctrine bundles",
            "[DependencyInjection] renamed constructor to factory method (like in Spring)",
            "[DependencyInjection] changed the main services.xsd to be more strict (the validation was basically disabled because of ##any)",
            "[Validator] fixed a typo",
            "fixed phpdoc",
            "[Console] fixed unit tests",
            "fixed phpdoc",
            "[Console] fixed phpdoc",
            "[Console] added a way to create console application with only 1 command",
            "[Console] added a way to use style without defining a name (<fg=blue;bg=red>...</>)",
            "[Console] changed the --color/-c option to --ansi/-a to avoid conflict with --config/-c",
            "[Console] changed the --color/-c option to --ansi/-a to avoid conflict with --config/-c",
            "[HttpKernel] fixed phpdoc",
            "[HttpKernel] fixed double-insertion problem for profiling data",
            "fix install_vendors.sh file to check if vendor folder exist",
            "[FoundationBundle] removed Finder dependency in Filesystem",
            "simplified bootstrap.php",
            "updated the README",
            "[Yaml] added support for the end of document marker",
            "[Yaml] refactored tests",
            "[DoctrineBundle] fixed interface to reflect a change upstream",
            "reorganized unit tests",
            "[Routing] refactored resources",
            "[DependencyInjection] fixed tests",
            "added Bundles and Extensions in the list of resources to monitor in dev environment",
            "fixed typos",
            "[DomCrawler] added some tests",
            "refactored DIC",
            "removed hardcoded symfony URL",
            "removed the inclusion of bootstrap.php as this is not needed",
            "[FoundationBundle] moved Helper to Templating",
            "[FoundationBundle] removed the request.base_path parameter (the DIC can now be immutable)",
            "[Yaml] fixed UTF-8 bug",
            "[HttpKernel] fixed typo",
            "[HttpKernel] fixed typos",
            "[DomCrawler] fixed API",
            "[DomCrawler] removed redundant methods",
            "[DomCrawler] removed the isEmpty() method",
            "created a new collectors.xml file for a better separation",
            "[Foundation] reorganized files",
            "moved getProfile() from the WebTestCase to the Client",
            "[TwigBundle] added an asset tag",
            "Initial entry of DoctrineMongoDBBundle",
            "unified mkdir mode",
            "Decoupled Form component from intl extension",
            "Adapted Form, Validator, File and I18N component to new coding standards",
            "Added missing fixtures directory",
            "Added vendor directory to .gitignore",
            "Integrated Form, Validator, I18N and File component",
            "[Routing] added some unit tests",
            "renamed WebBundle to FoundationBundle as the bundle is not just about the web",
            "[HttpKernel] added the cache system",
            "Renamed Bundle classes to be named like the bundle itself for more clarity",
            "refactored cookie management",
            "fixed autoloading for code coverage",
            "[PropelBundle] Fixed sqlmap filenames",
            "[PropelBundle] Added description for build command",
            "[PropelBundle] Fixed build sql command",
            "[PropelBundle] Made Build task a hub for other tasks",
            "[PropelBundle] Added auto package based on namespace",
            "[PropelBundle] Added build-sql command",
            "Revert  Renamed Bundle classes to be named like the bundle itself for more clarity \n\nThis reverts commit c486e1ba10056b5cd7d1a626b423eb77ce9a5cc9.",
            "[HttpKernel] removed Response assertions\n\nThey are too magic and they don't really add value:\n\n    $this->assertResponseStatusCodeEmpty($client);\n    $this->assertTrue($client->getResponse()->isEmpty());\n\n    $this->assertResponseStatusCodeNotFound($client);\n    $this->assertTrue($client->getResponse()->isNotFound());\n\n    $this->assertResponseStatusCodeForbidden($client);\n    $this->assertTrue($client->getResponse()->isForbidden());\n\n    $this->assertResponseStatusCodeOk($client);\n    $this->assertTrue($client->getResponse()->isOk());\n\n    $this->assertResponseStatusCodeServerError($client);\n    $this->assertTrue($client->getResponse()->isServerError());\n\n    $this->assertResponseStatusCodeClientError($client);\n    $this->assertTrue($client->getResponse()->isClientError());\n\n    $this->assertResponseStatusCodeRedirection($client);\n    $this->assertTrue($client->getResponse()->isRedirection());\n\n    $this->assertResponseStatusCodeSuccessful($client);\n    $this->assertTrue($client->getResponse()->isSuccessful());\n\n    $this->assertResponseStatusCodeInformational($client);\n    $this->assertTrue($client->getResponse()->isInformational());\n\n    $this->assertResponseStatusCode(200, $client);\n    $this->assertEquals(200, $client->getResponse()->getStatusCode());\n\n    $this->assertResponseStatusCodeRedirect('google.com', $client);\n    $this->assertTrue($client->getResponse()->isRedirected('google.com'));\n\n    $this->assertResponseNotRegExp('/foo/', $client);\n    $this->assertNotRegExp('/foo', $client->getResponse()->getContent());\n\n    $this->assertResponseRegExp('/foo/', $client);\n    $this->assertRegExp('/foo', $client->getResponse()->getContent());\n\n    $this->assertResponseNotSelectExists('h1', $client);\n    $this->assertTrue($crawler->filter('h1')->isEmpty());\n\n    $this->assertResponseSelectExists('h1', $client);\n    $this->assertFalse($crawler->filter('h1')->isEmpty());\n\n    $this->assertResponseSelectCount(3, 'h1', $client);\n    $this->assertEquals(3, $crawler->filter('h1')->count());\n\n    $this->assertResponseSelectEquals($expected, $selector, $arguments, $client);\n    $this->assertEquals($expected, $crawler->filter($selector)->extract($arguments));\n\n    $this->assertResponseHeaderEquals($value, $key, $client);\n    $this->assertTrue($client->getResponse()->headers->contains($key, $value));\n\n    $this->assertResponseNotHeaderEquals($value, $key, $client);\n    $this->assertFalse($client->getResponse()->headers->contains($key, $value));\n\n    $this->assertResponseHeaderRegExp($regex, $key, $client);\n    $this->assertRegExp($regex, $client->getResponse()->headers->get($key));\n\n    $this->assertResponseNotHeaderRegExp($regex, $key, $client);\n    $this->assertNotRegExp($regex, $client->getResponse()->headers->get($key));\n\n    $this->assertResponseCookie($value, $attributes, $name, $client);\n    $this->assertTrue($client->getResponse()->hasCookie($name));",
            "[HttpKernel] changed the semantic of Response::__toString() to something more useful",
            "Fixed a typo in the Process class",
            "Renamed Bundle classes to be named like the bundle itself for more clarity",
            "Fixed fatal error when the permission to write cache files was denied",
            "[Routing] Fixed fatal error when the permission to write cache files was denied",
            "[DependencyInjection] fixed inheritence when using extensions",
            "[Foundation] fixed a typo",
            "[WebBundle] fixed Mustache... again",
            "replaced logic with http_build_query()",
            "Switched positioning of debug bar to absolute for mobile browsers.",
            "[WebBundle] Fixed php notice error when template name is not valid",
            "[RequestHandler] fixed typo",
            "[HttpKernel] fixed order of arguments for assertions - to be coherent with the order of PHPUnit assertions",
            "[WebBundle] renamed collectors.xml to profiling.xml",
            "[DomCrawler] fixed add() method to support HTML content as string",
            "[OutputEscaper] switched to casting object as string rather than call magic method directly",
            "added some phpdoc",
            "added a way to retrieve the profiler from a test",
            "removed unneeded use statement",
            "removed container dependency for the web debug toolbar",
            "refactored the profiler classes",
            "[ProfilerBundle] refactored the profiler bundle",
            "removed testers",
            "[ProfilerManager] added a X-Debug-Token header when the profiling is enabled",
            "disabled toolbar in the test environment",
            "fixed toolbar setting when overridden",
            "fixed typo",
            "made the test configuration inherit from the dev one by default in the skeleton",
            "Removed removal of parameters when optimizing the container so one class name stored in a parameter can be used for multiple services (think multiple entity/document managers)",
            "[DomCrawler] added some shortcut methods to the Form classes to make the API more friendly",
            "[PropelBundle] fixed Propel configuraiton when no dbal is configured",
            "[WebBundle] added a command to initialize a new application",
            "fixed coding standards for XML and YAML files",
            "[PropelBundle] Removed old model autoloader",
            "[PropelBundle] Added more details in the README",
            "[PropelBundle] Removed need for custom autoloader since Propel now supports namespaces",
            "[TwigBundle] updated the bundle to take advantage of the latest Twig version",
            "added a way to easily change the environment and the debug flag in functional tests",
            "[WebBundle] added some black magic to remove the boiler plate code needed in end user functional tests",
            "[Foundation] added Kernel::__clone()",
            "fixed tests",
            "[WebBundle] fixed default skeleton",
            "[SwiftmailerBundle] removed the need for adding the swiftmailer path to the include path",
            "Fix Exception message in ControllerManager",
            "[DoctrineBundle] Removed array_reverse from DoctrineExtension so src/Application/SomeBundle/Entities/Entiy.php is favored over src/Bundle/SomeBundle/Entities/Entity.php",
            "[TwigBundle] fixed typos",
            "[TwigBundle] updated the bundle according to the latest version of Twig",
            "added autoload.php to .gitignore",
            "renamed culture to locale (patch from henrikbjorn)",
            "fixed ZF2 unit tests",
            "[ZendBundle] updated the Zend Framework bundle to use ZF2",
            "[TwigBundle] fixed service names",
            "changed all framework extensions to take advantage of the new extension configuration inheritance from previous commit",
            "[DependencyInjection] changed the extension mechanism to allow an extension to be inherit and merge from an existing configuration",
            "added a way to run tests that depends on external libraries",
            "[Console] simplified asXml() method",
            "[TwigBundle] added the javascript token parsers in the helper extension",
            "Fixed bad examples in doctrine:generate:entities help output.",
            "[TwigBundle] updated the bundle to work with the latest Twig version",
            "[TwigBundle] fixed typos",
            "[Foundation] normalized app name for use in a class name",
            "[PropelBundle] added logging",
            "[PropelBundle] added automatic bootstrapping of Propel in the boot",
            "[PropelBundle] fixed Propel and Phing autoloading",
            "[PropelBundle] fixed generation of propel_autoload.php",
            "[PropelBundle] added autoloading for model classes",
            "updated propel:build command",
            "added more details to README",
            "[PropelBundle] Added requirement for external libraries in README",
            "[PropelBundle] Initial commit (WIP) (thanks @fabpot)",
            "added a way to pass default options to splitTemplateName",
            "[TwigBundle] added javascript/javascripts tags",
            "Moved migrations-specific method out of DoctrineBundle\\Command\\DoctrineCommand and into the migrations bundle.",
            "Added missing DoctrineCommand imports to DoctrineMigrationsBundle.",
            "removed unused parameter in Request",
            "fixed invert parameters in Request::create method",
            "[Templating] fixed typo in phpdoc",
            "[WebBundle] Controller::generateUrl() was not passing absolute parameter",
            "[Foundation] added the env and debug information in the project container class name to avoid potential clashes if you manipulate several container in the same PHP script",
            "[HttpKernel] added Request::overrideGlobals()",
            "Fixed doctrine migrations commands namespace.",
            "fixed XSD local paths",
            "Added unix_socket doctrine.dbal.connection option, which is used by the doctrine2 PDOMySql driver.",
            "[TwigBundle] fixed phpdoc in RouteTokenParser",
            "[Finder] refactored directory depth management",
            "[Finder] refactored size and date comparators",
            "fixed phpunit.xml.dist (exclude bundles that rely on third party libraries)",
            "[Templating] removed CompilableLoaderInterface and fixed unit tests",
            "fixed coding standards",
            "[TwigBundle] added the Twig bundle (proof of concept)",
            "made splitTemplateName() public",
            "[Templating] enabled escaping only when the renderer is php",
            "[Templating] added a isFresh() method to Loader classes",
            "[Templating] added some missing phpdoc",
            "[WebBundle] fixed hardcoded php renderer in template paths",
            "[WebBundle] fixed template name with a custom renderer",
            "[WebBundle] added a way to add more renderer to the Templating Engine from the container",
            "[Templating] added a __isset() method to the Engine",
            "[HttpKernel] fixed Request::getETags()",
            "[WebBundle] fixed ExceptionHandler configuration",
            "[HttpKernel] fixed signature",
            "Merge remote branch 'vslinko/master'\n\n* vslinko/master:\n  [AsseticBundle] Fixed typo in use statement",
            "merged branch kepten/fix_form_attribute_handling (PR #9124)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\n[DomCrawler] fixed HTML5 form attribute handling XPath query\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | yes\n| New feature?  | no\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | https://github.com/symfony/DomCrawler/commit/0a67c88e0eb408f24233775388cd8c3cca286c05#commitcomment-4120595\n| License       | MIT\n| Doc PR        | no\n\nThe XPath query used was not handling descendant form elements correctly, so I fixed it and added tests for it.\n\nCommits\n-------\n\nbb59ac2 fixed HTML5 form attribute handling XPath query",
            "merged branch jakzal/merge-fix (PR #9122)\n\nThis PR was merged into the 2.3 branch.\n\nDiscussion\n----------\n\nRemoved old way of building icu data\n\nSomehow these lines leaked from 2.2 while merging #9018. This needs to go to 2.3 and master.\n\nCommits\n-------\n\n714a762 Removed old way of building icu data.",
            "added getLoaders() method",
            "[PropertyAccess] Throw exception on nonexistant  index  on read access",
            "[HttpKernel] made the cache key generation configurable for the default HttpCache store",
            "Merge branch '2.2' into 2.3\n\n* 2.2:\n  bumped Symfony version to 2.2.9\n  updated VERSION for 2.2.8\n  updated CHANGELOG for 2.2.8\n  bumped the version\n  fixed typo\n  updated VERSION for 2.2.7\n  update CONTRIBUTORS for 2.2.7\n  updated CHANGELOG for 2.2.7\n  bugix: CookieJar returns cookies with domain  domain.com  for domain  foodomain.com \n\nConflicts:\n\tsrc/Symfony/Component/HttpKernel/Kernel.php",
            "Fixed CheckForCssSelectorClass message.",
            "Modified domcrawlerHelper CheckForCssSelectorClass",
            "Added the remove method.",
            "Added setAttribute and domcrawlerHelper methods.",
            "Updated remove method.",
            "Updated Interface.php with isValid()",
            "Added isValid() getter\n\nA shortcut for direct validation, with the same API of Form.\n\n```php\n// Before:\nif($v->validate($entity)->count() === 0)\n{\n// Do something\n}\n\n// After:\nif($v->validate($entity)->isValid())\n{\n// Do something\n}",
            "Added support for encoding and decoding namespaced xml (xmlns)",
            "[FrameworkBundle] made sure that the debug event dispatcher is used everywhere",
            "feature #9186 [Console] Throw an exception if the command does not contain aliases (lyrixx)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Console] Throw an exception if the command does not contain aliases\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| license?      | MIT\n\nIt can only happend if the constructor has been overridden\n\nCommits\n-------\n\n7e5c901 [Console] Throw an exception if the command does not contain aliases",
            "feature#9171 [Form] Rewrite boolean attributes to match HTML spec (bschussek)\n\nThis PR was merged into the master branch.\n\nDiscussion\n----------\n\n[Form] Rewrite boolean attributes to match HTML spec\n\n| Q             | A\n| ------------- | ---\n| Bug fix?      | no\n| New feature?  | yes\n| BC breaks?    | no\n| Deprecations? | no\n| Tests pass?   | yes\n| Fixed tickets | -\n| License       | MIT\n| Doc PR        | -\n\nSame as #7856\n\n> 'The presence of a boolean attribute on an element represents the true value, and the absence of the attribute represents the false value.' - http://www.w3.org/html/wg/drafts/html/master/infrastructure.html#boolean-attribute\n\nThis commit modifies widget_container_attributes and widget_attributes so that:\n\n* `true` values render as the attribute name with the attribute name repeated as the value\n* `false` values are not rendered\n\nThe comparison is strict using sames() in twig.\n\nPreviously `false` values would have been rendered as `some-attribute=  ` which according to the spec would actually make them a boolean attribute and therefore equal to true.\n\nCommits\n-------\n\nb85577b [Form] Improved test coverage of widget_attributes and widget_container_attributes blocks\n8e4c2a7 [Form] Rewrite boolean attributes to match HTML spec",
            "[FrameworkBundle] moved router:debug and container:debug to use the compact layout",
            "[FrameworkBundle] changed JSON descriptors to be more readable on PHP 5.4+",
            "[FrameworkBundle] fixed container:debug and router:debug commands",
            "[FrameworkBundle] changed the router:debug to use the shortcut notation for the controller",
            "Added test for Bundle",
            "Added test for application",
            "[ExpressionLanguage] replaced the =~ operator by matches (removed the != operator)",
            "[HttpKernel] added missing argument to listener call",
            "fixed Client when using the terminable event",
            "hotfix - replaced getElementById with XPath equivalent to ensure a form tag with an id is reliably retrieved\n\nThe following,\n\n$form = $node->ownerDocument->getElementById($formId);\n\n...is an unreliable way to retrieve the ID.\n\nEven if there is an element with an id attribute the id won't be recognized unless the document was validated at the point it was read which in the case of setNode (for whatever reason) does not happen under some circumstances.\n\nTo give an example, given the following xml file\n\n\t<?xml version= 1.0  encoding= UTF-8 ?>\n\t<root>\n\t\t<form id= testform1 ></form>\n\t</root>\n\nAnd the following code,\n\n\t<?php\n\n\tini_set('display_errors',1);\n\tini_set('display_startup_errors',1);\n\tini_set('html_errors', 1);\n\terror_reporting(-1);\n\n\t$doc = new DomDocument;\n\t$doc->validateOnParse = true;\n\t$doc->Load('test.xml');\n\n\techo 'Form Tag Exists? '.($doc->getElementById('testform1') === null ? 'Nope' : 'Yup');\n\nThe code will still output  Form Tag Exists? Nope  because of how picky the getElementById method is.\n\nFor more on the phenomenon see this stackoverflow answer: http://stackoverflow.com/questions/3391942/php-html-domdocument-getelementbyid-problems\n\nI haven't been able to track down why the document in question doesn't work with getElementById, but somehow I'm assuming it has something to do with html5 not having a DTD (though for what it's worth ownerDocument in that particular case somehow gets reduced to just the form and the fields; which is weird in of itself). For reference the real world circumstances where this borks miserably is when using behat with goutte.\n\nThe following XPath version appears to reliably work,\n\n\t$xp = new \\DOMXPath($node->ownerDocument);\n\t$form = $xp->query( //*[@id='{$formId}'] )->item(0);",
            "[FrameworkBundle] fixed path replacement on Windows\n\nIn the cache, blackslashes in paths can be both represented by a single\nor a double backslash.",
            "[HttpKernel] added LateDataCollectorInterface",
            "[HttpKernel] decoupled TraceableEventDispatcher and Profiler",
            "Twig ExceptionController's `debug` is now twig.options.debug, not a kernel.debug",
            "Fix problem with Windows file links (backslash in JavaScript string)"
        ],
        "issue_comments": [
            "In theory, that's probably possible, but in practice, I don't see the use case. So, I would go with only one form. @bschussek What do you think?\n",
            "ok, let's do it that way: if there is only one form, adjust the UI and sentence for only 1 form (should be what people see 99.9% of the time). And if there are more than one form, well, that's what we have now.\n",
            "I do agree with @Tobion \n",
            "... which makes for a beautiful `....SF....` pattern ;)\n",
            "Before implemeting the missing features (loaders/dumpers), I'd like to settle on a name for this feature. Is `squash` the best word to describe what we are doing here? Any other suggestions?\n",
            "`decorate` was on my list as well, I thought that it does not convey the fact that we are actually overriding/replacing the service that we are decorating. But I'm fine with `decorate` if that's the preferred choice.\n",
            "@igrow I'm not a big fan of using tags for built-in features. In fact (I might be wrong as I haven't checked), I think we don't have any tags in the component.\n",
            "renamed `squash` to `decorate` and `setSquashedService` to `setDecoratedService`\n",
            "@romainneutron\n",
            "Before updating the docs, we first need to decide which way we want to go.\n",
            "@lsmith77 Well, if you have a look at the implementation of the code you mention, I guess they also got inspiration from Twig but my implementation is more generic and way more powerful.\n",
            "For the component name, I'm open to any other suggestion.\n",
            "@Taluu I mentioned Twig as a reference as the code comes from there, but it's far from being a Twig template, just the expression part of it. Moving the expression as the tag value should indeed be possible:\n\n``` xml\n    <service id= foo  class= Foo >\n        <argument type= expression >\n            service( bar ).getvalue(parameter( value ))\n        </argument>\n    </service>\n```\n",
            "@stof I do agree. The YAML format is far from being explicit with all kind of possible prefixes like `@`, `@@`, `@!`, and probably more I don't remember right now. Using 2 characters can mitigate the problem though, even if not perfect.\n",
            "@stof you mean the Twig `is_granted` function?\n",
            "@benjamindulau The code you are talking about comes from Twig, which I wrote. And then, it was changed and strip-down by various people. The code from Johannes is very specific and licensed under the Apache license. I won't even talk about the other repo as it claims to be MIT but the most of the code is borrowed from Johannes which is not MIT.\n\nFor the supported features, I've listed them in the summary of this PR.\n",
            "As @stof said:\n- complete implementation of basics operators (with a proven precedence algorithm);\n- no need to use eval;\n- possibility to use the evaluator or the compiler;\n- return a single PHP string that can be easily embedded elsewhere.\n",
            "@stof Why do you think that it is a problem to pass an object? For the PHP version, I don't see that as a problem and for the Twig tag, we can do something like `is_granted(expression('...'))`. Sounds simple enough, no?\n",
            "@benjamindulau: I've been discussing this matter with Johannes for quite a few months now, but I did not really had a look at his code; but when I did this week-end, I realized that I don't need to ask anyone to hack my own code, and so I created this new component.\n",
            "I've renamed the component to ExpressionLanguage. I did not choose to use the shorter `Expression` name as qualifying expression is probably important, and because I needed a more descriptive name for the main class as well. The new name works quite well when used in code:\n\n``` php\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\n\n$language = new ExpressionLanguage();\n\n$language->addFunction();\n$language->evaluate();\n$language->compile();\n```\n",
            "@bschussek The ExpressionLanguage component should be agnostic and as you said the fact that it is very close to JavaScript is a big plus. We definitely have support for variables. In the DIC, if you want to access a parameter, you can do so via `parameter('foo')`.\n\nFor the validation, you would do something like:\n\n``` php\n/**\n * @Assert\\Expression( value <= this.getMaxNumberOfLoginAttempts() , message= Too many login attempts. )\n */\nprivate $loginAttempts;\n```\n",
            "I've started the implementation of expressions in the new access control rules. Read the  Using Expression for Security Access Control Rules  section in the PR description for more information. The `allow_if` keyword is up to the discussion (`access` being taken by the JMS bundle, we need to find something else).\n",
            "@Crell I've just created a Gist that demonstrates how you could very easily use the expression language to add conditions in the Symfony routing: https://gist.github.com/fabpot/6433461\n",
            "@lsmith77 Anything based on information available on the Request would be possible.\n@sstok Indeed, it would provide a very flexible routing solution\n\nI've just committed a first version of the implementation in the Routing that works well (with the condition dumped in the PHP file, so without any overhead).\n\nI've updated the PR description with more information about the implementation.\n",
            "@crell With 3584c51, Symfony Router will support conditions out of the box ;)\n",
            "@WouterJ Thanks for having a look at consistency. I need more feedback about the names. That said, I think it does not make sense to have the same name everywhere. The name should reflect what you want to do with the expression, not that the content is an expression. For the routing, the expression is a condition for the route to match (that's why the name is `condition`). For the access rules, the expression defines the condition for the grant access for the path (hence the `allow_if` name). And for the service container, I used `expression` for XML as this is indeed a generic way to inject the result of the evaluation of an expression.\n\nAnyone with better names?\n",
            "@WouterJ Great! I can see that you actually played with it! I'm not happy with `object` but there is no easy way around it as it comes from the expression voter, which can vote on many objects, including the request. But as I do agree with you that this is suboptimal, I'm going to push a patch/hack/whatever-you-call-it to make it possible to use request in this specific case. You're probably right for the `this` variable name and I'm going to rename it to `container`. Thanks for the feedback, much appreciated.\n",
            "@bschussek I've implemented a new constraint that takes an expression. For now, it can only be run on a class and not a property as I don't know how such a constraint on a property could have access to the whole object. Does it sounds good for you?\n\nI've updated the PR description with some more information about how it works.\n",
            "As another example of the usefulness of the expression language component, I've started to work on a new version of the SensioLabs FrameworkExtraBundle: see sensiolabs/SensioFrameworkExtraBundle#238.\n",
            "@Taluu @stof I've moved the expression in the service container configuration to the node value instead of the value attribute. It is indeed much better for consistency.\n",
            "I think I'm done with the technical stuff.\n\nNow, here are some open questions (mostly about names!):\n- `allow_if` name in access control rules, do we want another one?\n- `@=` notation for YAML configs in the SC\n- `condition` name for routes\n- `@Expression` tag name for validation\n",
            "@henrikbjorn Here are some benchs: https://gist.github.com/fabpot/6462069\n",
            "@stof Can you be more precise? You can definitely add some functions with the expression language.\n",
            "@ChristianGaertner This PR does too much. Can you remove the interface and only keep the exceptions changes?\n",
            "Just do everything in this PR as additional commits. We will be able to squash everything later on.\n",
            "I'm -1 on the introduction of the factory.\n",
            "The `@since` tag should reference the first version where the method was added. Changes to the method signature should not change the `@since` tag. ping @bschussek @mvriel\n",
            "looks good to me.\n",
            "That's weird because `$warmupDir` is created from `$realCacheDir`, so they do have either \\ or /.\n",
            "We are not in a hurry. 2.4 end of dev is at the end of September. I haven't had time to have a look at this PR yet, but I will soon.\n",
            "The URL passed to RedirectResponse should be already URL encoded. But as you said, it's not explicitly mentioned anywhere.\n",
            "@lyrixx You should know that Boolean is always written with a capital B.\n",
            "I'm not sure about the cast as we consistently used int instead of integer.\n",
            "What about setting the validation flag on the form itself instead? That way, it would apply on all form fields.\n",
            "The values coming from the query string should already be decoded. I must miss something here.\n",
            "Any feedback on my comment? Can it be closed?\n",
            "I'm not convinced that scopes should be part of the dumper/loader system; until now, XML and YAML files are just about describing the services and parameters of a container.\n",
            "I don't see the need for a JSON loader/dumper. First, we already have plenty options, then, and AFAIK, there is no standard for translations in a JSON file, and finally, writing JSON is a PITA.\n",
            "@hacfi Which online tool are you talking about? Any examples?\n",
            "@beberlei Can you please have a look at this PR? Thanks.\n",
            "The Travis output shows a lot of  Failed to parse suite .+ stats from  strings.\n",
            "In PHP, arguments as Boolean as hard to understand when using the code: `XXX::do(true, false)`. So, I would rather just keep the `flushOutput()` and `flushErrorOutput()` methods and remove the other ones.\n",
            "ping @bschussek \n",
            "If we were to include this hack, it should also be done in the Twig template.\n\n@bschussek What do you think?\n",
            "@leevigraham Can you submit a PR on the docs?\n",
            "@asm89 Yes, the tests for the console need a proper tty to run.\n",
            "@asm89 Are you working on updating this PR?\n",
            "Any news on this PR. If we cannot make it work (especially for the tty issue), then let's close it for now.\n",
            "What is the status of this PR @Tobion?\n",
            "@Tobion Can you finish this one?\n",
            "Any news on this one?\n",
            "@bschussek What do you think about this addition?\n",
            "ping @bschussek \n",
            "@Jack12816 Remember that this is an Open-Source project and people are working on it for free. I was on vacation recently and had to focus on other things. I'm going to review this PR and give more feedback. Thanks for your patience.\n",
            "@Tobion Can you open a PR with just the fixes from ZF? Or if you don't have time, I can do that myself but as there are several other tickets/PRs on the same topic, I'd like to act fast. Thanks.\n",
            "If the only BC break is the one explained in the description, I'm fine with it. Between, please only implement the feature and don't change anything else (like escaping the {}() characters), that makes reviewing easier.\n",
            "The problem with URL validation (like for emails) is the difference between being  correct  and what people expect. Unfortunately, both are often not compatible.\n",
            "@jakzal Any news on this PR. I would love to have this in 2.3.\n",
            "@jakzal Are you closing because you think there are no good solutions? If that's the case, can we also close #5886 and #4845?\n",
            "@jakzal Would it be possible to only remove the default namespace and keep the other ones? That would be the best option I think.\n",
            "@jakzal see SimonSapin/cssselect@c192fcb\n",
            "or even better: http://www.w3.org/TR/selectors/#casesens\n",
            "@jakzal I think we can just safely remove the `strtolower` call then, no?\n",
            "Any news on this one?\n",
            "@jakzal I need to take a decision about this one: can we rely on auto-detection or do we allow people to register namespaces?\n",
            "The CssSelector and the DomCrawler components must support both XML and HTML.\n",
            "@jakzal Can you make a PR to update the docs?\n",
            "For the inconsistency you found, I would go with option 1. If that's not too complex, I would like to get the fix in this PR, if not, let's create an issue.\n\nAlso, can you add a note in the component CHANGELOG file about this new feature?\n",
            "I agree with @vicb that the tests should use a real Couchbase object, because most of the tests here do not test anything.\n",
            "@hason: What is your use case?\n",
            "Ok, you've just described what the change does, and I understood that. But why would you want to set a specific version for the assets? I cannot think of a real-world use case for that.\n",
            "Keep in mind that this is a POC. So, no support for the PHP dumper for now, and the same goes for the standalone component discussion. But the POC can probably already tell us that content negociation is tied to both the request and the routing system, so a standalone component is probably not possible.\n",
            "@jfsimon Can you rebase this PR now that #5841 has been merged?\n",
            "It breaks for instance symfony.com. We have a route like this:\n\n```\n * @Route( /doc/{version}/{section}/{page}/ , name= doc2_shortcut , defaults={ locale = en ,  section =  ,  page =  }, requirements={ page = .* ,  version = (current|[\\d\\.]+(?:\\-DEV|\\-RC\\d+|\\-BETA\\d+)?|master) })\n```\n\nAs you can see, there is a requirement on section and page, but they are both optional.\n\nWith this PR, I have the following exception:\n\n The default value    of the required variable  section  in pattern  /doc/{version}/{section}/{page}/  does not match the requirement  [^/]+ . This route definition makes no sense because this default can neither be used as default for generating URLs nor can it ever be returned by the matching process. You should change the default to something that meets the requirement or remove it. \n",
            "Can you rebase on master? Also, can you add a note in the CHANGELOG and update the docs accordingly? Thanks.\n",
            "I've thought about this a bit more. I understand where you come from, but I think it is not the right way to fix it. Let me explain why.\n\nGiven the route `new Route('/index.{_format}', array('_format' => 'html'));`, when generating a URL from it, you would probably use something like `path('index', {'_format': format})` in your template. So, the format is the value of the `format` variable. In this case, there no way to remove the variable to keep the previous behavior. The only option would be to set the format to null, which is a duplication of the logic (as the default value is already defined in the route definition).\n\nFurthermore, you now have two valid URLs for the same content (`/index.html` and `/index`), with no way to standardize on one URL as each URL generation can possibly use one or the other.\n",
            "I doubt it would be the most efficient thing to do. I think #4546 is probably a better idea for when you need to stream large files to the browser.\n",
            "I've merged 2.2 into 2.3 and master.\n",
            "There is one caveat (not related to this fix): As the parent is dynamic, we should not cache the resource as two calls might lead to a different parent. That said, and in real-life situation, that should never occur.\n",
            "Closing in favor of #9015\n",
            "@romainneutron I've made the merge. Can you check that I did the right thing?\n",
            ":+1: I wanted to do this when I worked on the expression assertion, totally makes sense.\n",
            "What's wrong with the current way?\n",
            "In the phpdoc, we are always using the short class name and add the use statement at the beginning of the file. So, I don't see what you're fixing here as this is done this way everywhere in the framework. I might miss something obvious though.\n",
            "Got it now. So, you should revert all the changes and add the missing use statement in the interface instead. Also, you need to submit a PR on the 2.2 branch as this is the oldest branch that is still maintained. Thanks.\n",
            "Unfortunately, that won't work as you've merged your PR instead of merging the uptodate 2.2 branch. What you need to do is to merge the Symfony 2.2 branch into the 2.3 one and resolve the conflict there. Sorry for the hassle.\n",
            "Nevermind, I will try to use what you've done here.\n",
            "This behavior is new as of 2.2.7-DEV, so it should be fixed before releasing 2.2.7.\n",
            "closing in favor of #8960\n",
            "I think that it would be better to include the scheme and the host in the signature. Also, we do need some tests. Last but not the least, can you squash your commit and avoid merge commits?\n",
            "@bschussek Can you have a look at this PR?\n",
            "This PR can only be merged on maser of course as this is a new feature.\n",
            "By design, a parameter is a scalar and nothing else. The way to store objects is done via services. We won't change that.\n\nI don't really understand your use case, but anyway, you should be able to use services instead (and #8913 might also help here).\n",
            "Yes, I do agree that it does not make sense anymore now that we have a PSR for logging. I haven't had a look at this PR in details, but there are no BC breaks, right? Can you add the PR header?\n",
            "You must revert the symfony->application change as this is a too big BC break. Actually, we cannot break BC for the console, but we can add stuff if needed.\n",
            "Indeed, merging this in 2.3 is a PITA. Can you do it yourself? Merge 2.2 in 2.3, resolve the conflicts, and send a PR on 2.3. Thanks.\n",
            "2.0 is not maintained anymore\n",
            "We don't make such changes in 2.2. A similar change was made in #7095 for 2.3.\n",
            "@catch56 Does it bring a noticeable performance improvement on a full page?\n",
            "@catch56 As this is also a performance optimization, feel free to do everything in this PR. That makes things easier for everyone. Thanks.\n",
            "merged in 2.3, thanks.\n",
            "@jakzal hehe, I was also thinking about a better name, especially because the event name does not match the other ones. Naming the event `PostRequestEvent` would be consistent with `PostResponseEvent` but the post request event happens for all requests, whereas the response one only happens once for the response that is sent.\n\nSo, perhaps `FinishRequestEvent` would be better or `TerminateRequestEvent`. Or?\n",
            "I've renamed the event to `REQUEST_FINISH/kernel.finish_request` and the event to `FinishRequestEvent`.\n",
            "@liuggio hmmm, an event is something that is happening right now, so present. If you have a look at the names of events for the DOM for instance, we have click, load, drag, ...\n",
            "Let me say it again, the present tense makes more sense because:\n- The listeners are the ones that finish the request;\n- The other example we have is `terminate` for the response and again, it's using the present as the listeners are in charge of terminating the response.\n",
            "I still have some open questions:\n- Shall we move RequestStack and RequestContext to HttpFoundation? My opinion is yes as these classes can be used without HttpKernel.\n- Do we deprecate the synchronize feature (and remove it in 3.0)? Don't have a strong opinion on this one.\n- Do we need to rename RequestContext to something else (and what would it be) as we already have a class with the same name in the Routing component?\n",
            "For the RequestContext name conflict, I think that having 2 classes (RequestContext and RequestStack) can be confusing anyway and protecting users from doing stupid things is probably not needed. So, I propose to remove the ReqeustContext class in favor of only RequestStack and move it into HttpFoundation. Sounds good?\n",
            "I've done the name change and the move in the last commit.\n",
            "Documentation has been updated now. I'm ready to merge this PR. Any other thoughts?\n",
            "So, `RequestContext()` gets its value from `Request::getPort()`. By having a look at the method, I fail to see how the value could be empty. That's probably more a problem in the way you run tests.\n",
            "So, can we close this PR then?\n",
            "@stloyd why?\n",
            "hmmm, I'm pretty sure I configured 2.2 as a branch when I made the PR.\n",
            "Besides being consistent with Apache, it is also consistent with the way other frameworks work (like Django or Rails).\n",
            "Can you please do that in the same PR as the other change you did?\n",
            "ping @willdurand\n",
            "@K-Phoen Can you tell us more about your use case?\n",
            "You should add a note in the component changelog as well.\n",
            "Can you also add some tests?\n",
            "Sorry about that, but can you rebase on current master, because tests have been refactored recently? Thanks.\n",
            "... and there is another one in the same file.\n",
            "ping @bschussek \n",
            "The code makes sense. Just read the paragraph mentioned in the comment above.\n",
            "Is is still WIP?\n",
            "IIRC, we do have error messages that have some ANSI sequences.\n",
            "So, what's the status of this PR?\n",
            "ok, can you do the same PR on 2.2 and add a test when using a valid tag to prove that it does not mess up those?\n",
            "Everything that is registered as a style on `OutputFormatter`. I think the replacement code already does that. See the `replaceStyle()` method there.\n",
            "I've implemented the YAML and XML loaders (see the description for examples). For the YAML loader, we have to introduce another convention (`@bar::value`), not sure which one would be better.\n",
            "@asm89 Quite easy: I've just pushed the PHP dumper to let you see how it would work (some details need to be changed but that works).\n",
            "One limitation (from PropertyAccess) is that you can't pass arguments to method calls. So you can do `$foo->bar()`, but you cannot do `$foo->bar('baz')`. If support would be added to the PropertyAccess component, it would be automatically available in the service container.\n\nNote that supporting something like `$foo->bar('value of dic parameter baz')` would be much more difficult to implement and would probably need that the service container reimplements its own expression language.\n",
            "@asm89 As this is not a feature that people will use that often, I'm not too concerned about performance.\n",
            "Some answers to @bschussek questions:\n- `@` in the service container is already used in the YAML format to reference a service;\n- You can use an expression anywhere in a service definition (so that works in a method call);\n- Calling a path on the same object is supported, just use its service id:\n\n``` php\nmy_service:\n        calls:\n            - [mySetter, [@my_service::some.nested.path]]\n```\n\nOr we can add a special `self` word to reference the current service (but I don't like this idea).\n",
            "I was not clear enough in my first answer. `@path.to.min` would not work in the service container as it would mean the `path.to.min` service.\n",
            "... which I don't like ;)\n",
            "@lsmith77 Spring has this: http://static.springsource.org/spring/docs/3.2.x/spring-framework-reference/html/expressions.html which allow for more complex expression. I named the new feature Expression in reference to Spring but I'm open to any suggestion.\n",
            "@crell you are correct, the idea is to be able to inject the result of a method call on another service. As I said in a previous comment, the path is limited to what is currently supported by the Symfony PropertyAccess component, which does not support arguments to method calls.\n\nCan you give us some examples of usage you envision for Drupal? That would make things more clearer than just foo/bar/baz?\n",
            "Closing in favor of #8913. The new PR takes a new approach where features asked in the comments are possible. Feedback welcome.\n",
            "The unit test does not pass if using Twig 2.0 and without adding the exists() method.\n",
            "This PR addresses the problem mentioned in fabpot/Twig#1156, symfony/symfony#8665. It is an alternative for symfony/symfony#8667, symfony/symfony#8668, and symfony/symfony#8672\n",
            "I have pushed a 2.0-experimental branch so that we can test things out. I plan to release Twig 2.0 by the end of the year. The idea being that you can either rely on ~1.x,<2.0, or ~1.11,<3.0.\n",
            "sure, I wrote the constraints without thinking about them, but you got the idea.\n",
            "Why have you closed this one? It actually makes sense to merge it.\n",
            "Sorry, my bad.\n",
            "Nevermind, I made the change. Thanks.\n",
            "This can only be merged if  doctrine/DoctrineBundle#198 is ever merged.\n",
            "That breaks the tests.\n",
            "This change should be done in the 2.2 branch instead.\n",
            "My comment was about the branch you based your PR on. It should be 2.2, not master.\n\nself.version is a bad idea as we want each component to accept the largest set of dep versions.\n",
            "closing in favor of #8648\n",
            "ping @jfsimon \n",
            "Closing in favor of #8822\n",
            "Can you add a note in the CHANGELOG about this new feature. Also, I think that adding some usage examples in the phpdoc of the new method would be good.\n",
            "ping @lyrixx\n",
            "Closing this PR as it only works for HttpKernel and its children classes (as it relies on the fact there is a `listeners` property.)\n",
            "@stof I'm waiting for Travis first ;)\n",
            "The biggest different with the original PR is that there is no hardcoded class map anymore. Instead, we use the well-known autoloaders to find class candidates.\n\nI have also refactored the code to make more flexible and easily testable.\n",
            "This makes #8281 a little bit more difficult as everything added in this PR really only belongs to the dev environement.\n",
            "One proposal (related to what we are doing here -- but can be done in another PR) would be to move the `DebugClassLoader` class from the ClassLoader component to the Debug component. Of course, we would keep the one in ClassLoader for BC but it would be removed in 3.0.\n\nBeside being more consistent in terms of where the features belongs, it also makes sense as the Symfony ClassLoader component is less used than before as autoloading is now mostly done by Composer.\n\nWhat do you think about that?\n",
            "Interfaces and traits are supported and the message is contextualized.\n",
            "As @lsmith77 mentioned, this feature has already been rejected in the past.\n\nCan you elaborate a bit more about some real-world use cases?\n",
            "That's just an example that we don't update for each version.\n",
            "The use case you explain is out of the scope of the RedirectResponse class which should only be used when you want to immediately redirect to another resource.\n",
            "We explicitly do not inject request parameters and we don't want to. This new feature has been requested many times and rejected for security reasons. It we do that, a user can potentially inject anything.\n",
            "If you inject the request object in the controller, then just do something like `$request->query->get('page')` and filter it before using it (like casting it to an integer in this case).\n",
            "As there is already a good bundle that covers most of these things and because @Seldaek is fine with adding some missing stuf, I'm closing this PR in favor of improving the bundle.\n",
            "I merge branches on a regular basis, so no need to submit other PRs for this change. Thanks.\n",
            "This has already been done in 231744370849df57ff7032e0246fc882d9c26220\n",
            "If there are significant changes, submitting a PR for 2.3 too makes sense. Thanks.\n",
            "I don't see a wide usage of these new features (like the  Square images are not allowed  for instance). So, I'm -1 on this PR\n",
            "@lmammino Fair enough. Can you add some notes in the component CHANGELOG file?\n",
            "Can you add a note in the CHANGELOG file of the component?\n",
            "Looks good to me, can you submit a PR on the documentation repo before it can be merged?\n",
            "That's something that is going to be resolved when I merge #7707 (which should happen soon)\n",
            "nope, always open a PR on the oldest branch and I will then merge it to the newest one. By the way, this is documented.\n",
            "also note that most of the time, I'm able to easily switch a PR from one branch to another one. Like what I've just done with this one ;)\n",
            "Can you add a test to avoid any regressions?\n",
            "The response type hint cannot be changed for BC reasons.\n",
            "We do the same kind of duplication in several places in the framework.\n",
            "As I said in a previous PR, I don't accept changes that do not fix a bug or do not bring a significant performance boost. \n",
            "Basically, `$violations->isEmpty()` is just a shortcut for `!count($violations)`.\n\nWhile having an `isEmpty()` method would indeed be nice, I think it's not worth it because we need to add another interface to avoid breaking BC. So, I'm closing this PR, sorry about that.\n",
            "I don't really understand your use case or the problem that you are trying to fix. Can you give us some more explanations?\n",
            "Understood. I've taken a different approach to solve the problem. See #8730.\n",
            "closing in favor of #8514\n",
            "`JSON_NUMERIC_CHECK` has been available since PHP 5.3.3, so looks good to me.\n",
            "This looks good to me but it should be done on the 2.2 branch instead of master as this is a bug fix. Can you resubmit a PR for the 2.2 branch? Thanks.\n",
            "2.1 is not maintained anymore, so you should target 2.2.\n",
            "ping @lsmith77, @linclark\n",
            "@benji07 Can you remove the test?\n",
            "oh, and I forgot to ask you to add a note in the component CHANGELOG file. \n",
            "As this PR is going to be merged in master/2.4, it should be in the 2.4 section.\n",
            "Closing as the enctype should be added automatically and because you already can add it manually.\n",
            "This PR cannot be merged as the change from `isset` to `array_key_exists` was done for a reason. So, reverting everything back to `isset` is not an option. We need to investigate the issue further to find another solution.\n",
            "@jankramer `isset` has been replaced with `array_key_exists` in PR #7007 which introduces synchronized services.\n",
            "Can you test PR #8582 which should fix the issue and keep BC?\n",
            "Symfony tests pass and my local tests tell me that it fixes the issue with Doctrine as well. So, just waiting for some more confirmation from more real-world projects before merging the fix.\n",
            "I've just upgraded one of my projects that had this issue and my patch does fix the problem.\n",
            "Closing in favor of #8582\n",
            "This is a BC break, so the rationale behind the change should be explained.\n",
            "Can you tell us a bit more about your use case? Is there some missing feature in our current implementation? As of today, the creation of the AcceptHeader instances in the Request object would not allow you to override the class anyway.\n",
            "I'm closing this PR as changing self to static would give a false sense of extensibility.\n",
            "This is indeed a huge BC break that we cannot accept. Unfortunately, we need to find another solution to fix the issue.\n",
            "Closing in favor of #8452\n",
            "see #8800\n",
            "@WouterJ Any news on this PR?\n",
            "Can you add a note in the CHANGELOG?\n",
            "I don't see it. You forgot to push?\n",
            "cherry-picked the first commit.\n",
            "If I understand correctly, you want to reuse some of the logic of the Symfony tests in your own tests, correct?\n",
            "I'm closing this PR as adding things that are specific to only part of the community is probably not a good idea. Doing that in a third-party bundle would be better.\n",
            "I've squashed and merged in 2.2. Thanks.\n",
            "The README file is about useful information to get started.\n",
            "I'm always rejected adding badges to the README file as this is primarily a text file, and not the right place to give this kind of information. We have a website for that.\n",
            "I'm also -1 on this for the same reasons as @stof, but also because this instances are injected and as such, they should be available in other ways.\n",
            "Why would you get the connection from the session handler?\n",
            "Having a protected method is fine by me for this use case, but the getter name should be chosen for each session handler, there is no need to have a uniformed method name here.\n",
            "You should create a pull request for the documentation as well.\n",
            "Closing in favor of #8404\n",
            "I think it makes sense.\n",
            "@alcaeus Looks good to me except that I did not see that you based your patch on 2.1, which is not maintained anymore. Can you reopen a new PR on 2.2 instead?\n",
            "No, just 2.2.\n",
            "Sorry to bother you again, but 2.1 is not maintained anymore. So, the PR should be done on 2.2.\n",
            "This file is indeed automatically generated from the information you have in your SensioLabsConnect account. just update your name there: https://connect.sensiolabs.com/profile/ragtek\n",
            "I've just submitted another way of doing the same thing that looks better to me (less BC breaks and smallest patch). see #8437\n",
            "Closing in favor of #8437\n",
            "merged\n",
            "2.1 is not maintained anymore. You should submit a PR on 2.2 instead.\n",
            "closed in favor of #8708\n",
            "We should add a comment to make it clear that the salt is not needed.\n",
            "I've submitted another PR (#8266) that adds the salt, but also document why it is almost never a good idea to do so.\n",
            "@willdurand Can you have a look at this PR?\n",
            "@willdurand Any interest in this PR? Can I merge it? Close it?\n",
            "I've merged this PR but reverted the second commit as it changes the current behavior.\n",
            "I'm -1 for such changes. First, some of these changes breaks BC as the methods signature are not the same anymore. Then, and as seen previoulsy on such changes, it might change the behavior in subtle ways. And finally, it does not fix anything.\n",
            "Closing this PR as things have been fixed in the same way as Django with a new option: http://symfony.com/blog/security-releases-symfony-2-0-24-2-1-12-2-2-5-and-2-3-3-released\n",
            "Indeed, if you can send a new PR with just the port change, that would be easier to evaluate the change. Thanks.\n",
            "merged in 2.1\n",
            "What do you mean? Keep in mind that `0777` is run through the current `umask`.\n",
            "I will merge PRs for 2.4 just after the release of 2.3 (tomorrow).\n",
            "This is wrong, the `application/json` mimetype does not take any parameter nor optional parameters (see section 6 of RFC 4627). The RFC also describe how to differentiate the different possible encodings.\n\nArmin recently wrote a nice blog post on this topic: http://lucumr.pocoo.org/2013/7/19/application-mimetypes-and-encodings/\n",
            "I've improved this PR in #8553.\n",
            "Did you have any issues with the current way?\n",
            "@stloyd That's no problems as the guesser is of the same class as the current one. That's how PHP works.\n",
            "That's not a use case that we want to support in core as it looks really weird. There is probably a better way to achieve what you are trying to do... which we cannot really say with the small snippet of code your provided in the comment above.\n",
            "is it possible to add some unit tests for that?\n",
            "What is the use case? As you can already choose your class name, I don't see the need to namespace the class.\n",
            "Closing in favor of #8409\n",
            "merged in 2.2\n",
            "#8718\n",
            "@bschussek no need to create another, I can switch the branch on my side easily.\n",
            "Looks good to me. We probably need to add tests for the edge cases and I think it should be done on the 2.1 branch instead.\n",
            "sorry, I forgot to switch the target. fixed now.\n",
            "This is definitely  just  a bug. So, we need to fix it in 2.1 (no need to create PRs for other branches).\nYou need to remove the new argument for `followRedirect()` as we should not provide workarounds for misbehaving apps.\n",
            "This must be done in master, not in 2.1. Can you reopen a new PR based on master instead? Thanks.\n",
            "I'd like this collector to work with both the old single mailer and the new mailers, so that we don't have to raise the min version.\n",
            "The best thing to do is to deprecate the collector and mark it to be removed in Symfony 3.0.\n",
            "So, what about the test?\n",
            "@jaitsu87 This change would only be considered for 2.3+ anwyay\n\n@pborreli Have you ever monitored 404 errors? Even on a not-so-popular website, you have a bunch of script-kiddies attacks (resulting in many 404s), bots that requests stupid URLs, and more. So, it means that logging 404 at the error levels gives you a lot of noise.\n",
            "@mpdude Can you remove the log level change from this PR as the other part is a no-brainer and can be merged? Thanks.\n",
            "Closing as the MonologBundle now has support for tweaking logging of 404 errors.\n",
            "What @stof said is that as `getProcessInformation` is protected, nothing prevents it to be called more than once.\n",
            "seems like a good idea.\n",
            "@vicb I think this change is right. The `guessExtension()` is safe whereas `guessClientExtension()` is not as explained in the phpdoc.\n",
            "merged in 2.1, thanks.\n",
            "Thanks @linclark for your contribution!\n\nSome quick notes about our process:\n- I've merged this PR in the 2.2 branch as this is oldest branch that is still maintained;\n- I've fixed the CS (see e318759).\n",
            "As far I understand, `getSize` returns the size of the directory itself, not the files inside that directory, which odes not make sense to me.\n",
            "@ahilles107 was right, discussions should happen on the mailing-list.\n",
            "I would have put the code into the Twig bridge instead as this is where the integration of Twig and components happens. That would make the tag easily available for Drupal and Silex for instance.\n",
            "You should add a note in the CHANGELOG of the Twig bridge about this addition.\n",
            "We should use `start`, `stop` instead to allow what @Tobion describe. Adn we should also support categories.\n",
            "Closing in favor of #8719\n",
            "What about injecting the `translationNodeVisitor` instance in the constructor (as an optional argument of course)?\n",
            "I prefer the explicit way.\n",
            "Really depends on the added complexity.\n\nBut you can look at it as being a new feature or a bug fix; in the past, for similar cases, we always opted to consider such things as new features instead of bug fixes.\n",
            "@raziel057 Don't waste your time, that's not worth it... for at least two reasons:\n- Whenever we are using array_key_exists, there is a reason for it;\n- The speed difference between isset and array_key_exists won't make any difference on a typical request.\n\nNow, it you can demonstrate that changing some calls to isset do not break something and it makes a typical request significantly faster (more than 1%), then go for it. But trust me, that's a big challenge ;)\n",
            "As @Tobion said. :-1: for me\n",
            "So, what about backward compatibility (for both $templates and $parameters)?\n",
            "I would say that this is indeed a new  feature , and as such, it should be done in 2.3 only.\n",
            "@GromNaN Can you take into account the comments and rebase on master?\n",
            "I've just tried to convert some existing compiler passes to use this class, and from the 17 possible classes, only 1 could use this. The other ones cannot be converted for several reasons:\n- 9 of them contain a specific logic that cannot be encapsulated easily\n- 6 of them use replaceArgument instead of methodCall (and only 2 of those could be converted to use this class if we support replaceArgument in addition to calling methodCall)\n- 4 of them needs priority management (but only 1 could be converted if priority support would be added to this PR)\n- 3 of them has a relevant key in addition to the value (but none could be converted to use the new class even if keys would be supported)\n\nSo, even if it looks like a good idea to add this in Symfony, we would not be able to use it except in 1 case. We could enhance this PR to convert 3 more but it would lead to a more complex class.\n\nAll in all, I think it's not worth it, and a good cookbook article should be enough.\n",
            "@hacfi Are you saying that 9 out of 10 do not a priority, do not use a replace argument, and do not have any logic? And do you have so many compiler passes that use tags?\n",
            "I'm closing this PR as it's not generic enough to be useful in enough cases.\n",
            "I'm against adding the Travis icon. It does not add any valuable information for people reading the README file. Moreover, as the stability of the Travis platform is not that great nowadays, I would not want to give false information here.\n",
            "Can you explain a bit more the situation when it happens?\n",
            "@lazyhammer Of course, I can see that in your code, but why would you set the trusted header name to an empty string?\n",
            "I totally forgot to remind @Ocramius that docs should be his next priority ;)\n",
            "@warmans 2.1 would be the right version\n",
            "merged in 2.1\n",
            "Apparently, the new tests do not pass.\n",
            "merged in 2.1\n",
            "Can you add a test?\n",
            "I also do agree with @bschussek \n",
            "@sstok: done\n",
            "I've also added an exception when the BCrypt encoder cannot be used.\n",
            "@stof: see symfony/symfony-docs#2555\n",
            "@stloyd I've indeed merged this PR in 2.1.\n",
            "For the `getRawResponse()` method name, here are some other options: `getOriginalResponse()`, `getUpstreamResponse()`, yours here ...\n\n`getUpstreamResponse()` is probably my preferred choice.\n",
            "I have also added a `getUpstreamRequest()` method for consistency. So, we now have 4 methods to deals with the input and output:\n- `getRequest` and `getResponse` to get the  unified  request/response objects (always BrowserKit instances)\n- `getUpstreamRequest` and `getUpstreamResponse` to get the upstream request/response instances (the classes depends on the client implementation)\n",
            "`getOriginResponse` as suggested by @dzuelke seems the best option.\n",
            "There is another possibility to lower the impact of the BC break (for Symfony full-stack and Silex users). We keep the origin request/response access via the `getRequest()` and `getResponse()` method and we add new methods to get access to the  internal  BrowserKit request/response objects (which are rarely useful anyway -- `getInternalRequest()` and `getInternalResponse()`).\n\nWhat do you think?\n",
            "This PR now implements (via the second commit) the second option where the getRequest() and getResponse() are not changed but new methods are introduced to get access to the internal request/response objects. As you can see, no changes are needed outside of the BrowserKit component. So, no changes will be needed to Symfony projects.\n",
            "I think we now have the definitive patch. The good news is that there are no BC breaks anymore.\n\nInstead:\n- I have added two new methods on the Client to allow access to the BrowserKit request and response (there were not available before);\n- I have updated the PHPDoc of BrowserKit to reflect what the methods currently do (this is where we have a BC break but the PHPDoc was wrong before).\n\nSo, that way, no code need to be updated (Silex, Symfony, or even Goutte will still work as before).\n",
            "There is a conflict with current master.\n",
            "It is, but this is probably related to a2e1e25f8f536368afed7626fc882050c29a1e24.\n",
            "Closing in favor of #7713\n",
            "@jakzal adding an opt arg looks good to me.\n",
            "Closing in favor of #7840\n",
            "Closing this PR as this is not something I want to discuss at this point. see #7627 for more details.\n",
            "already done in #7743\n",
            "Can you open a PR on the documentation?\n",
            "no, new features can only be merged into master.\n",
            "That's a BC break on an @api method. What others think?\n",
            "Can you explain the rationale behind this change?\n",
            "As this is a new feature, it must be rebased on master.\n",
            "@beberlei As this is a constructor, if you add an optional argument at the end, that won't break anything.\n",
            "The RequestContext can also probably be used to fix another problem that we have: see #7453 (current PR on this topic #7461)\n",
            "@beberlei If you don't mind, I'm going to rebase this PR (which has a lot of conflicts now), apply some of the changes mentioned in my comments above and resubmit a new PR for discussion before merging.\n",
            "rebased version is at #8904\n",
            "Both PRs referenced by @bschussek have been merged now. And Yes, this is a BC break.\n",
            "Can you also add the pull request table in your description? (see http://symfony.com/doc/current/contributing/code/patches.html#make-a-pull-request),\n",
            "Can you add a test case and rebase your fix on Symfony 2.1? Thanks.\n",
            "We don't expose internal properties, especially those that are not for the main purpose of the class. You can easily override the constructor and store the logger is you need it though.\n",
            "merged in 2.1\n",
            "fixed in favor of #7738.\n\nI've cherry-picked your first commit and fixed the failing test a little differently.\n",
            "Can you add some unit tests? Thanks.\n",
            "Also, can you add the PR header like described here: http://symfony.com/doc/current/contributing/code/patches.html#make-a-pull-request\n",
            "Now that I look at the patch,, this wrong as only comments should be allowed before --- and after ..., right?\n",
            "I mean that the following document is not valid:\n\n```\nfoo: bar\n---\nbar: foo\n```\n",
            "I don't want to support multi-document in the component. So, we need to thrwo an exception when one tries to load a multi-document file.\n",
            "I'm definitely in favor of stripping markers, but as you said, properly.\n",
            "Closing this PR as it is not good enough to be merged. Feel free to reopen a new one based on our discussion.\n",
            "One of the goal of displaying the token is to be able to copy/paste it. So, a better fix would be to just get the first 6 characters of the `sha1` in the Profiler class instead.\n",
            "Let's keep it simple: limiting the sha1 to the first 6 chars is good enough.\n",
            "Tests do not pass for me:\n\n```\n1) Symfony\\Component\\DomCrawler\\Tests\\CrawlerTest::testBaseTag\n<base> tag can use a schema-less url\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'https://base.com/link'\n+'https://domain.com/link'\n\n.../src/Symfony/Component/DomCrawler/Tests/CrawlerTest.php:567\n```\n",
            "Weird, it works now. Sorry for the trouble. Merging now.\n",
            "But this is only a test, so it cannot be fixed, right?\n",
            "I don't get it. It he wants his attribute to be '1,2,3,4', it seems legitimate to me and it is clearly not a number.\n",
            "I fear that this is slowing down things lot. Looking at the impl, I stumbled about this other PR #3551, which looks like a better approach.\n",
            "Closing in favor of a documentation update: see symfony/symfony-docs#2529\n",
            "Closing this PR as the implementation is not what we need to implement. Even if it is harder, we need to do the same as what is done in the `get` method, the ability to use `remove('foo[bar]')`.\n",
            "As this is a new feature, it should be done in the master branch, not 2.2. So, you need to close this PR and reopen a new one based on master. Thanks.\n",
            "ping @beberlei \n",
            "The ini loader is great to configure strings, so we need to keep it. But documentation should probably be updated to warn people about its limitations. Can you close this PR and open a new one on `symfony/Symfony-docs` instead? Thanks.\n",
            "I've just opened a ticket on the documentation.\n",
            "2.0 is not maintained anymore, that's why it should be done on 2.1. There is no way to change the target, you need to close this one and submit a new one.\n",
            "@dlsniper Support for multiple aliases as you call them should be done in another PR.\n",
            "What the status of this PR?\n",
            "Closing in favor of #7841\n",
            "Can you submit a PR on the 2.1 branch instead as the bug is also there? Thanks.\n",
            "I really meant 2.1.\n",
            "Be warned that the order of the returned value of `getClientIps` will be changed by #7734\n",
            "204 is not a redirect. Here is the definition in the RFC:\n\n```\nThe server has fulfilled the request but does not need to return an entity-body, and might want to return updated metainformation. The response MAY include new or updated metainformation in the form of entity-headers, which if present SHOULD be associated with the requested variant.\n\nIf the client is a user agent, it SHOULD NOT change its document view from that which caused the request to be sent. This response is primarily intended to allow input for actions to take place without causing a change to the user agent's active document view, although any new or updated metainformation SHOULD be applied to the document currently in the user agent's active view.\n\nThe 204 response MUST NOT include a message-body, and thus is always terminated by the first empty line after the header fields.\n```\n",
            "Can you take @stof comments into account?\n",
            "@dbu I'm ok with the feature, but I did not had a look at the implementation. @beberlei is probably the one who need to validate the design.\n",
            "I'm closing this PR as a won't fix as per the RFC, this is just not valid.\n",
            "As this is a bug fix, it should be done in the 2.1 branch instead of master.\n",
            "Looks good to me. Can you add some unit tests?\n",
            "You mean `public function redirectAction(Request $request, $route, $permanent = false, $ignoreAttributes = false)`? That would indeed be a good idea.\n",
            "sure, one PR is fine.\n",
            "I've submitted a doc fix too here: symfony/symfony-docs#2478\n",
            "Can you add some unit tests and open a new PR on 2.1 as this is a bug? Thanks.\n",
            "@stof is right: we don't merge new features anymore without proper documentation.\n",
            "Re-reading the comments on #6036 (https://github.com/symfony/symfony/issues/6036#issuecomment-16229747), I'm not sure that this change is wise. So, I've reverted it for now.\n",
            "We already quite a lot of methods in this class, so adding yet another one (which is probably not that useful anyway) is not a good idea.\n",
            "Can you squash your commits please? As you merged master, it's not mergeable cleanly as is. Thanks.\n",
            "@guilhermeblanco I've done the needed changes. So, everything should be fine now.\n",
            "closing in favor of #7559\n",
            "Closing as nobody has ever had a problem with the way it's done today. If there is some kinds of problem, this is a regression in Composer that need to be fixed there (as suggested by @Seldaek)\n",
            "I don't understand why this is needed as there is a test checking for the existence of the constant.\n",
            "That's wrong as those templates are used by Symfony itself and as such they are in the UTF-8 charset.\n",
            "@bamarni: That's indeed a bug. Can you open a ticket for that bug and close this PR?\n",
            "@Ocramius If we want to include this into 2.3, this should be ready before Tuesday next week. Do you think it will be possible?\n",
            "closing in favor of #7890\n",
            "Closing this PR then.\n",
            "Can you add a note in the component CHANGELOG as this is a new feature?\n",
            "Can you submit this PR on the 2.2 branch instead?\n",
            "ping @Seldaek @lsmith77\n",
            "Can you submit this PR on the 2.1 branch as this is the oldest branch that is still maintained and for which the bug exists? Thanks.\n",
            "Can you submit this PR on the 2.1 branch as this is the oldest branch that is still maintained and for which the bug exists. Thanks.\n",
            "I think it's time to admit that this new way is just a fail and we need to revert to the previous way.\n",
            "Looks like a good addition to me.\n\nI would use a notation that would respect how we reference services elsewhere:\n\n``` yaml\ntwig:\n    autoescape_service: @my_service\n    autoescape_service_method: guess\n```\n\nAlso, beside documentation, you should add a note in the component CHANGELOG describing the new feature.\n",
            "Let's remove the `@` altogether.\n\n@maxbeutel After removing the `@`, can you submit a PR on the documentation so that I can merge?\n",
            "I've made the needed changes and changed the XSD to use `-` instead of `_` as a word separator.\n\n@maxbeutel Can you submit a PR on the documentation? Thanks.\n",
            "You need to add some unit tests.\n",
            "ping @bamarni @lsmith77\n",
            "@Koc: you can wrap/change the output instance in the command event, so that you can then get what was displayed in the terminate event. This PR gives you the flexibility, it's then up to you to use it the way you want.\n",
            "@bamarni You're right. I've removed the possibility to change the command in a console.command listener.\n",
            "@lyrixx not sure how to implement that. Let's do that in another PR.\n",
            "@stof @bamarni I'm aware of the possible problems with `cache:clear`. But we already have such issues today. When upgrading Symfony where a new parameter in the DIC is required without default value, you have the same problem. So, I propose to deal with that in another PR.\n\nsee #6519 for instance\n",
            "@stof The Swiftmailer listener should be done in another PR, especially because it is not that easy (the best would be do be able to move the listener from the bundle to the bridge).\n",
            "@Strate: The second argument of the generate method is an array of placeholder values. But in your route, you don't have any. So, this is probably a shitty behavior as you call it, but your method call is at least as shitty.\n",
            "I'm the one who asked @jfsimon to use this new way. Before the last comment of @jfsimon, I was inclined to agree with @vicb and revert the change. But @jfsimon had a good point, so I think the new way is indeed better as it covers more cases.\n",
            "Is it ready to be merged?\n",
            "#5740 should indeed use this framework. @jfsimon Can you update this PR accordingly?\n",
            "Let's do that in the same PR (and indeed the router debug command should also be updated).\n",
            "Can you also removed the `*~` files that were committed by mistake?\n",
            "Tests do not pass anymore as show by Travis. Can you have a look? Also, as 2.0 is not maintained anymore, the PR should be rebased on 2.1. Thanks.\n",
            "merged and tests fixed\n",
            "This is just a quick start to begin the discussion.\n",
            "I've moved the compile method as it makes things even more flexible.\n",
            "That's because we only fix bugs in stable branches.\n",
            "Re-reading the code now, I think what you are trying to achieve is already possible without any modifications:\n\n``` php\nMimeTypeGuesser::getInstance()->register(new CustomMimeTypeGuesser());\n```\n\nAs register always add the guesser **before** existing one, the custom guesser will always be called instead of the default ones. Am I missing something here?\n",
            "If looks like a bug fix for me, so it should be done in the 2.2 branch. Thanks.\n",
            "Can you explain your use case a bit more?\n",
            "Why not using the `registerContainerConfiguration()`  method then?\n",
            "see #7437 for an alterative patch.\n",
            "I figured that out after posting my comment. That's why I've made a PR which I think is better than this one. What do you think?\n",
            "Closing in favor of #7437\n",
            "@stloyd I asked @jfsimon to fix the tests as we need to make a last release with all the changes from the last release ;)\n",
            "So, the problem is that fixing the tests this way does not solve the problem. The problem comes from the fact that Travis is using PhpUnit as a phar which includes the Yaml component version 2.1+. So, we are testing the Yaml component coming from PHPUnit and not the 2.0 version, which of course is not that useful.\n",
            "It was done on purpose. The cache entries are shared and independent of the metadata.\n",
            "This has been merged in 2.1 as this is really more a bug fix than a new feature.\n",
            "You need to enable APC for the CLI so that tests that requires APC won't be skipped. If not, that's useless.\n",
            "It is the user responsibility to pass a key/value array with only strings for values.\n",
            "Can you base your patch on the 2.1 branch as the bug is also there? Thanks.\n",
            "Closing in favor of #7441\n",
            "merged\n",
            "Why? Both are equivalent. So, using the non-deprecatedone is better. Did you have any problem with the current code?\n",
            "@bamarni  Can you check that #7334 fixes your issue?\n",
            "@jfsimon IIRC, you said that it was complete now. Can you squash and open a PR on the master branch?\n",
            "What's the goal as all these exceptions are thrown by the framework itself without the need for a previous exception?\n",
            "Closing in favor of #7735\n",
            "partially merged\n",
            "As specified in the phpdoc, we are relying on http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types for the mime types.\n",
            "We do not require mbstring, but we use it optionally when available. See https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php#L784-L794 for instance.\n",
            "I've submitted a doc change for this PR: symfony/symfony-docs#2342 and added a CHANGELOG entry\n",
            "This must be done on master (by the way, 2.0 is not maintained anymore).\n",
            "I don't understand the goal of this PR (the tests do currently pass on all platforms). Is it a replacement for #7197?\n",
            "Closing as there are no benefits in this change\n",
            "ping @bschussek \n",
            "It has been merged: see a31deebd1572ada1afae527ccd7e8559e4db419b\n",
            "Can you explain why it is not needed anymore?\n",
            "I don't understand why we would need `PropertyAccessorBuilderInterface`. Is it really needed?\n",
            "Frankly, I don't understand why we have a `ValidatorBuilderInterface` either. It does not make sense to me.\n",
            " We have the interface so we can type-hint against the builder without type-hinting against the implementation, nothing more.  <- that part does not make sense to me. Why not type-hinting on the implementation for a builder? You will never have any other implementation anyway.\n",
            "> I thought that so many times in other cases, until it happened :P Just to make sure.\n\nCome on. Have a look at the builder, I can't buy that you will have another implementation. And anyway, even if you can come up with something, you can still extend the existing one. But having such a specialized interface for a builder seems overkill to me.\n",
            "I've added a unit test to cover this PR.\n",
            "I don't like adding this very specific code here, but I have not any other ideas to do it in a better way.\n\nTo be sure that we don't introduce any regression when trying to refactor/change this implementation, can you add some unit tests?\n",
            "The implementation looks good to me. Can you add some unit tests as well?\n",
            "Also, you need to add a note in the component CAHNGELOG file and submit a PR on the documentation to document this new feature. Thanks.\n",
            "I'm pretty sure we need to keep the null condition. If not, there is no way to override the cwd.\n",
            "I agree with @gerryvdm. We spent quite some time on the SecureRandom class, with many eyes on it.\n",
            "@ircmaxell I've decided to actually used your library in Symfony (see #7853). You mentioned some problems with our SecureRandom class, can you open a ticket for this? Thanks.\n\nClosing in favor of #7853\n",
            "Closing in favor of #7571 \n",
            "Closing this PR as it's not the right fix. I've opened a ticket for the command bugs though (see symfony/symfony#7462)\n",
            "I agree but in 2.2, just use `Request::enableHttpMethodOverride()` in your front controller.\n\nBeing strict about what goes in which release is more and more important IMO.\n",
            "Looks good to me. Can you rebase and squash your commits? Thanks.\n",
            "That breaks the tests. Here is a small snippet from my Mac:\n\n```\n24) Symfony\\Component\\Finder\\Tests\\FinderTest::testAppendWithAnArray with data set #0 (Symfony\\Component\\Finder\\Adapter\\BsdFindAdapter)\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => '/var/folders/3w/sn5kv29j52x68gw46k6w7w540000gn/T/symfony2_finder/foo'\n-    1 => '/var/folders/3w/sn5kv29j52x68gw46k6w7w540000gn/T/symfony2_finder/foo/bar.tmp'\n+    0 => '/private/var/folders/3w/sn5kv29j52x68gw46k6w7w540000gn/T/symfony2_finder/foo/bar.tmp'\n+    1 => '/var/folders/3w/sn5kv29j52x68gw46k6w7w540000gn/T/symfony2_finder/foo'\n     2 => '/var/folders/3w/sn5kv29j52x68...r/toto'\n )\n\n.../src/Symfony/Component/Finder/Tests/Iterator/IteratorTestCase.php:27\n.../src/Symfony/Component/Finder/Tests/FinderTest.php:441\n```\n",
            "By the way, there are also many CS problems.\n",
            "I think that the comment should be fixed instead. The Request class is a data bag holding information about the request, I don't think anyway should need to override it. Moreover, there are more usage of `Request::create()` in the framework, so  just  fixing one occurrence is obviously wrong.\n",
            "Can you also add some unit tests?\n",
            "Thanks, I've merged the fix. Can you work on the changes needed to allow the code to be testable (on the master branch)?\n",
            "Closing as #7164 won't be merged as is anyway.\n",
            "This was done this way to be able to benefit from the APC cache when the file is stored on the disk. Removing this will have a performance penalty as we will always call the `eval` function, which will have to parse the file every time.\n\nSo, just getting rid of this feature is a no-go.\n\nWhen I developed the HttpCache feature, I provided only a file cache store because of this very reason. I think (but I've no benchmark anymore) that any other store will be in fact slower that the file one. If you can prove me wrong, then I might reconsider this design decision.\n",
            "@bschussek Can you submit a PR for 2.1?\n",
            "This should probably go into 2.0. Also, do you have a reference where those 7 formats are explained/described?\n",
            "merged in 2.1, thanks.\n",
            "It does not look like something that is widespread enough to be included into the code (and you can call `Request:: setFormat()` in your code, so there is no need to have it in code anyway).\n",
            "I've merged #5838 in 2.1 instead.\n",
            "I don't really like the fix as it means that the `Cache-Control` headers is always removed even for browsers that behave correctly.\n",
            "Not random but it does not bring anything to the current code. Closing.\n",
            "Thanks!\n",
            "I think displaying the default text is good enough. I suppose that the intent is to easily remember what a given status code means. There is no getter for the status text as it has no real meaning in terms of HTTP.\n",
            "Ad I said in my previous comment, not having a `getStatusText()` was in fact intentional.\n",
            "I've merged this PR in 2.2 as the patch for 2.1 will be different.\n",
            "Can you include the proper PR header in the description? Thanks.\n",
            "@Tobion Can you add some tests?\n",
            "@Tobion: I've opened a new PR with some unit tests. See #7850\n",
            "Why have you removed the phpdoc comments? They must be readded.\n",
            "So, if you think that the way we use phpdoc should be changed, please open an issue and let's discuss that, but removing random phpdocs in some random classes is a plain non-sense.\n",
            "Exactly, let's keep PRs to their main purpose; and the goal of this PR is to add ZO+ support.\n",
            "@vicb Can you revert the changes about the phdocs?\n",
            "This PR should also be updated as ZO+ had been merged now and renamed.\n",
            "What about the reverting of the phpdoc removals?\n",
            "Closing in favor of #7674\n",
            "No, I've closed this #6254 as this is an Assetic issue, not a Symfony one.\n",
            "Now that ZendOptimizer is in core, I don't think we need to add this one too.\n",
            "I've just open a new PR #7859 with some changes. Feedback welcome there.\n",
            "Can you add a test case?\n",
            "@Gladhon Can you add some tests please? Thanks.\n",
            "@schmittjoh comment is important: the slow down comes from the fact that the annotation reader will then have to parse the cache file (which, by definition, is huge). That's why some of the classes were not added before. We cannot just add classes to the cache blindly, that must be an iterative process.\n",
            "Closing.\n",
            "If you broke CSRF configuration, I suppose that you also broke form, ESI, framgents, translator, validator, and profiler configuration, no (see fde7585)?\n",
            "I've started a meta-PR to remove all deprecated stuff in 2.3. Can you split this PR into 2: one for 2.3 and another one for 2.2? Thanks.\n",
            "#7266 has been merged and 2.2 has been merged into master.\n",
            "Thanks, your commit is now part of #7227 \n",
            "Those public methods have been added to be in line with the PSR.\n",
            "That makes too many assumptions about the layout of the application and the available files. In fact, that's why it is part of the standard edition and not the bundle.\n",
            "This is the wrong place to deal with that as HttpCache should have no knowledge of this X-Debug-Token header.\n",
            "I didn't say that it will be easy ;) I will have a look later.\n",
            "We are not going to break BC for this. It does not add anything useful and it does not fix any bugs. Stability is more important than a few type hints.\n",
            "I would make the query string a first class citizen instead.\n",
            "Closing in favor of #7098\n",
            "That's a new feature, changing the title to 2.3.\n",
            "Is it possible to add a test?\n",
            "@vicb: my script never closes tickets, Github does. But, recently, Github changes the way it closes PRs.\n",
            "I've cherry-picked the last commit. Thanks.\n",
            "it does not make any difference \n",
            "If it is a bug fix, why not fixing it in 2.0?\n",
            "I've just added some tests for the legacy way.\n",
            "Why not? An empty template means and empty content, which you might want as this is just the fallback content displayed when the real content is not loaded yet.\n",
            "@sstok Can you give us a small script that reproduces the problem?\n",
            "Closing this PR for now as there is no clear consensus about this topic (at least not for 2.3). I keep the issue open so that we don't loose this as a reference.\n",
            "I'm +1 for this change. What do you think @bschussek?\n",
            "Can you add a test?\n",
            "Just for the record, this is not a BC break as the interface was added in 2.2.\n",
            "Sorry, yes, I would renamed it.\n",
            "`addJsonCsrfPrefix()` can be understood as a method to add a prefix to what already exists, but the method override any existing one. So, I would prefer `setJsonCsrfPrefix()`, or even `setCsrfPrefix()` as we are in the `JsonResponse` context anyway.\n",
            "After reading the comment from @arnaud-lb, it would indeed be better to enforce returning an object instead of adding a prefix. What others think?\n",
            "Based on @arnaud-lb and @Seldaek comments, I think the best thing to do is adding a comment in the phpdoc about potential problems. That's what I've done in #7846.\n",
            "Having our own magic file does not sound good but as this is something that come up from time to time, that might be a good idea after all. Can you reference all the other tickets here to get easy access to past discussions?\n",
            "Seems like a good idea indeed. Do you want to work on a PR?\n",
            "Closing in favor of #7809, where I implemented the possibility to configure the magic file from the existing class as suggested by @raziel057 . Adding a magic file in Symfony itself is not a good idea at the magic file format changed recently (according to the PHP documentation).\n",
            "I've fixed the tests which now really test that the session is not started.\n",
            "it has been merged to 2.1 and will eventually be merged to 2.2 and master (probably in the next couple of days).\n",
            "@Can you create a proper ticket so that we don't loose this regression? Thanks.\n",
            "I don't see why you would want that as the route matches. I might understand adding that to the other cases, when there is a problem, but then, why nor use the router:debug command?\n",
            "Closing as this class does not exist anymore in 2.2\n",
            "I will merged it into 2.2. 2.2 is entering the RC phase, so no more modifications will be merged.\n",
            "What is the rationale behind this change? I'm -1 for random changes that does not fix anything.\n",
            "Nobody has ever complained about this before and I don't see the problem with the current way. Anyway, that's not something that will be considered for 2.2, so let's see what others think about this.\n",
            "?!\n",
            "merged, thanks\n",
            "Closing in favor of the discussion in #5410\n",
            "Closing as we need to fix the real issue\n",
            "I agree with @stof.\n",
            "I'm +1 to rename `Constraint` to `Constraints` and keep the old name for 2.2 as an alias.\n",
            "Sorry, I did not see your PR and I've made the change in the 2.1 branch\n",
            "This must be done in the 2.2 branch instead. Thanks.\n",
            "Why would you want to change these values? I'm always reluctant to add new parameters if there are no real-world use cases.\n",
            "Can you rebase on 2.2?\n",
            "@stof: what do you mean? That we can remove the `trigger_error()` call altogether?\n",
            "@stof: I've updated the PR to remove the `trigger_error` call.\n",
            "It allows to not call the method.\n",
            "That looks wrong to me and that's not what we've done with other specialized interfaces that we added in the past for other components.\n",
            "@vicb As explained in a comment, this is not a BC break as this feature does not exist in 2.1. So, I can make the change to the CHANGELOG if you want after merging, or I can let you make the change.\n",
            "No, they won't as the problem is only if you are using the templating component. So, Silex or Drupal won't have the problem.\n",
            "Closing as this is not possible anymore because of #6966\n",
            "I don't think so.\n",
            "This is explained in https://github.com/symfony/symfony/pull/6738/files#diff-0\n",
            "The thing is that you can update this when upgrading to 2.2 but you can also wait until 3.0, your choice.\n",
            "No, that's the big difference. There is no deprecation message as it will be supported for all versions of Symfony 2.\n",
            "It is a bug fix but people might rely on the current behavior. But then, nobody ever reported it. So, I prefer to keep it on 2.2 only.\n",
            "As there is a BC break, it must go into master.\n",
            "Just for the sake of the argument, there is no BC break as these classes were not released yet in any stable releases.\n",
            "I've cherry-picked the second commit\n",
            "Closing in favor of #7739\n",
            "Looks very good. :+1: \n",
            "ok, I've updated the patch. There is now a static segment (`/for`) between the controller and the format, which should fix the problem.\n\nWhile thinking about this, there is another option, which might be even better: removing the need for the proxy route altogether and check for a defined path like `/_proxy`. It would remove the dependency on a Url Generator in the rendering strategy, and would not make the router proxy listener any more complex.\n",
            "There is one issue with removing the proxy route: when generating a proxy URL, we need a Request instance, which is not always the case. I'm going to submit another PR to  fix  that first.\n",
            "@Tobion: see #6829\n",
            "I've again changed the route pattern to avoid any possible problems (even if a controller contains a `/`).\n",
            "As this is a bug fix, it should be done in the 2.0 branch. Can you submit a new PR? Thanks.\n",
            "It should be also fixed in the collector as the profiler data are not compatible between versions anyway.\n",
            "Closing this PR as #6259 has been merged.\n",
            "ping @bschussek \n",
            "The current behavior was done on purpose (and I'm quite sure this is documented that way): a tag never escapes anything. So I'm -1 on this change.\n",
            "ping @Seldaek \n",
            "First, that's great to see that implementing a new rendering strategy is now really easy.  For the rest, I'm not sur what's the best strategy, given that I'm not sure that SSI will used often or not. Depending on the answer to this question, the way we implement it should probably be different.\n",
            "Does it belongs to Symfony core (I mean, that's not a validator that is really often needed)? So, for me, that's out of scope. What do you think @bschussek?\n",
            "@sprain: I've decided to merged both the ISBN and the IBAN validators. As you said, having to include a bundle just for some validators seems overkill, and bundling such validators does not add that much code to Symfony anyway.\n",
            "see dc2cc6b13c8664ed2ae97611d448f98d1cfae2b8\n",
            "Closing as this PR conflicts and there is already another PR for some changes on this language. Can you check that everything is ok there? Thanks.\n",
            "This PR conflicts. Can you have a look at it? Thanks.\n",
            "see #6702\n",
            "security.it.xlf\n",
            "@LawnGnome A separate pull request would be good. Thanks.\n",
            "@stof: yes, remove it then. Thanks.\n",
            "Looks good to me. I think putting it in `HttpKernel` is slightly better.\n",
            "I've finished this PR at #7848\n",
            "Let's do it in master only and add a note in the CHANGELOG about the BC break.\n",
            "merged into master, I've also added a note in the CHANGELOG about the BC break.\n",
            "Can you rebase on master as it's not mergeable anymore? Thanks.\n",
            "What about removing the code altogether?\n",
            "There is a PR for adding logging in the Translator component (see #5537 -- this should probably be updated to use the new PSR-3 logger interface)\n",
            "related to #6988\n",
            "I totally agree with @kriswallsmith. Closing.\n",
            "I'm still -1 on this as I don't see the benefit. The web profiler loads fast enough.\n",
            "merged (see e602122f9780963a1e59d096c8d008aeb7995afa)\n",
            "The comment is right. Returning without a Response will re-throw the exception (in HttpKernel).\n",
            "Yes, merging the 2 PRs would be good indeed.\n",
            "Closing in favor of #6583\n",
            "@stloyd No need to send new squashed PRs as my merging tool does that automatically ;)\n",
            "Right, this is a catch-22. People need to be able to use the interface to change the secret. Reverting for now.\n",
            "I think option a is better as the developer can sort them if he wants to.\n",
            "Can you tell us more about the  HttpKernel that does not support relative requests to URIs ?\n",
            "Thanks for working on this. It would be very valuable if you can add information about these regexes as comments (with links to relevant sources -- like what you've done in the PR description). Thanks.\n",
            "The more information we can add in the class, the better it is.\n",
            "Can you keep the commit from #6603 to keep ownership?\n",
            "@lsmith, @beberlei This is our last chance to get this in for 2.2.\n",
            "Closing in favor of #6797\n",
            "As it's going to be merged in 2.3, the old behavior should be kept until 3.0.\n",
            "I've just re-read the documentation before and after the change. Frankly, I don't think that the new name is much better than the old one. Considering that this will break BC at some point, I would like that we reconsider this change.\n",
            "Even if the new name is better, I'm not sure the difference is enough to justify a BC break. What others think?\n",
            "@Koc: What about bundles or Open-Source that want to support several Symfony versions?\n",
            "@bschussek Can you update this PR to take into account that virtual will be supported until 3.0?\n",
            "reverted\n",
            "As of 2.1, you can use `Application::getTerminalDimensions()` instead, which is public now and gives you the same information.\n",
            "Can you create a new PR for the 2.0 branch as the same bug exists there?\n",
            "@mvrhov As you squashed your commits, I think there are no problems with the old data.\n",
            "Looks good to me. Can you add some unit tests?\n",
            "merged, thanks. Can you add a note about this in the docs?\n",
            "I've just updated the years on all my repositories. Thanks.\n",
            "Closing in favor of #6601\n",
            "Closing as it cannot work.\n",
            "adding a getDoctrineODM is out of scope.\n",
            "That's not something I want in core as it complexifies the code for something that we don't want to recommend. As you have noticed, Twig is clearly the preferred choice nowadays in Symfony.\n",
            "I think it should be part of another bundle.\n",
            "We are only using Travis to check the unit tests. \n",
            "merged, thanks @ircmaxell!\n",
            "I agree with @drak.\n",
            "Not sure about this one. Having public access to the web profiler in the production environment is really bad anyway. There is a ton of information that could help an attacker. So, just hiding this specific bit of information won't make it better.\n",
            "Closing in favor of #6598\n",
            "Closing in favor of #6597\n",
            "I spoke to several people about the removal of the `_internal` routes (some from Symfony and others from the eZpublish and Drupal projects). It is clear that people liked the old way, especially those who rely on this feature heavily for internal sub-requests only (no ESI, no hinclude).\n\nI decided to remove these internal routes because of the big security issue they allow when not used properly.\n\nHowever, the proposal in this PR sounds good, but instead of reverting and applying this patch, I'd like to first finish and merge PR #6459 because it will then be much easier to implement what you propose selectively (depending on the rendering strategy). For instance, for the default and ESI rendering strategies, we can automatically reject any request not coming from localhost or trusted proxies; and use a signed URI for Hinclude.\n",
            "As the signature for the tag/function should be the same for everything, I was thinking about adding a new `controller` function to support controller names:\n\n``` jinja\n{% render url('path') %}\n{% render path('path') %}\n{% render controller('BlogBundle:Post:list', { 'limit': 2}) %}\n```\n",
            "see #6459 for an implementation of the signing strategy.\n",
            "Closing in favor of #6459\n",
            "Then, what about removing those constants?\n",
            "reverted\n",
            "@stloyd Indeed, very good idea\n",
            "Closing in favor of #6599\n",
            "@drak Can you add an entry in the CHANGELOG stating that this is a BC break?\n",
            "Here: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/CHANGELOG.md\n",
            "Thanks a lot for fixing this!\n",
            "Closing as the OneOfValidator has been removed now.\n",
            "I think it's not worth it.\n",
            "Closing this PR as I think this is of very low priority.\n",
            "I have cherry-picked the second commit. Thanks.\n",
            "What's the point? If you register a bundle, why would you want to not register the commands? When does it hurt?\n",
            "I'm -1 on this change. We do not have any other example in the framework and you can do something like this:\n\n``` php\n$container->set('foo', $foo = new Foo());\n```\n",
            "Are there any other classes in the tests that might be useful for testing userland forms? ping @bschussek \n",
            "@colinfrei: Can you check this PR?\n",
            "It sholud have been done on 2.1. I have backported the patch as I've already merged this PR on master.\n",
            "But your patch does not just disable display_errors when logging to stderr AFAIU.\n",
            "Looks good to me. @umpirsky Can you take my comments into account, add a note in the CHANGELOG, and submit a PR for the documentation?\n",
            "@umpirsky Thanks for the update. I've reread the comments and I think @WouterJ suggestion is good. So, can you change the default look to what he suggests? Also, what about defining some named configuration so that you can easily use pre-defined templates?\n",
            "I think we won't have an agreement on which default table layout we should use; that's why named configuration is probably needed.\n",
            "The bug was not present in 2.1 because of this commit: 55014a6\n",
            "ping @drak \n",
            "@baldurrensch Sounds good to me.\n",
            "Closing in favor of #7454\n",
            "Can you explain what you mean by  Needs fix as the method is public. ?\n",
            "I'd rather fix the root cause because IIUC, in your case, you then have 2 kernels.\n",
            "Does it hurt? What if someone extended this? That would break BC for no obvious reasons. I think we can keep it the current way.\n",
            "That's not what I'm saying. If someone uses it in a child class, this is a BC break.\n",
            "Deprecating something leads to a BC break at some point. We already do too many BC breaks if you ask me, so let's really break BC when it really make sense.\n",
            "@egulias Can you rebase to remove the merge commits?\n",
            "see #6302\n",
            "This has been discussed a very long time ago and we decided to not support this out of the box as it has many drawbacks (mainly due to the fact that browsers return weird Accept header values -- has it changed now?).\n\nSo, if we support this, it should be optional/asked explicitly.\n",
            "Closing as it does not play well with browsers.\n",
            "Sorry, but I don't understand the use case.\n",
            "Then, can you change the unit test with the real use case?\n",
            "thanks\n",
            "already done in #bae5cffe7e4e496a4839077d5de859d45be57a07\n",
            "@lsmith77 I don't know why Travis is segfaulting as tests pass on my machine with PHP 5.4. That's a more general issue with Travis: it fails so often (segfaults, timeouts, Github issues, ...) that it becomes almost useless (too many false positives).\n",
            "why?\n",
            "This change should be done in master then.\n",
            "The usage of `fpassthru` was introduced in #4751... but the reason is not really clear to me anymore. ping @gajdaw, @stealth35\n",
            "I agree with @stof, the right way would be to add documentation to the DIC component documentation (https://github.com/symfony/symfony-docs/tree/master/components/dependency_injection)\n",
            "I've just created an issue on the symfony docs repo.\n",
            "The second commit should probably be done on master and it changes the behavior.\n",
            "Do we merge that in 2.0?\n",
            "Can you rebase?\n",
            "hmmm, now that I see the result, I'm not sure it is worth it as the Extension class in the DI component depends on the Config one.\n",
            "I would keep everything that is strictly in the DI namespace in the DI extension class and everything else in the HttpKernel class as it is now.\n",
            "Which other comment? This one?  should I remove the ContainerBuilder altogether?  In which case, I don't understand what it means.\n\nWhat about adding 2 classes in the DI component: the base one and another one with the dependency on the config component? Is it overkill?\n",
            "@vicb: no, that would be a BC break for no real added benefit.\n",
            "Why is is useless?\n",
            "got it now. Can you fix your PR as there are some unrelated commits? Thanks.\n",
            "We do not backport things. So, please, remove them.\n",
            "ping @eriksencosta\n",
            "I've just added support for ICU data version 50 (c0507aae9) so that when you have this version of ICU, you can still run the tests. And I can confirm that:\n- there are some parsing errors\n- some tests are broken (as things changed)\n",
            "Closing this issue as @bschussek is working on a better solution.\n",
            "Is it a backport of some commits that were merged in 2.1/master?\n",
            "Closing this PR as I think we have enough on our plate for the 2.x series. This should be something we might revisit for Symfony 3.\n",
            "Do we really need this icon? I don't see the point.\n",
            "Who is looking at this icon anyway? And we have lots of problems with Travis. So, even if it is red, it does not mean that the tests do not pass. So, I'm for removing this line from the README.\n",
            "Adding trigger_error calls should be done in one PR to ease the merging. thanks.\n",
            "I only squash when most commits are CS fixes and feedback.\n",
            "closing in favor of #6171\n",
            "ping @Tobion \n",
            "I'm currently working on refactoring the HttpKernel class from FrameworkBundle so that we can use this logic in products not using the full-stack framework like Drupal and Silex. I'm almost done and I will submit a PR soon.\n",
            "@KingCrunch Any news on this feature based on the new HttpKernel fragment framework?\n",
            "I don't see the need to change the default value as this is deprecated anyway.\n",
            "@bschussek any objections? Do you remember why it was done this way?\n",
            "@vicb your suggestion makes sense.\n\nCan you also explain the goal of this PR?\n",
            "This issue has been addressed in all Symfony versions yesterday.\n",
            "Closing as the discussion should now happen on #7527\n",
            "A similar discussion happened some time ago, and we decided against it. Here; you propose to trim only the class name, but why just this one and not some other ones? This looks quite arbitrary, no?\n",
            "Any feedback regarding my above concern?\n",
            "I'm closing this PR as it introduces a very specific behavior. Moreover, this fix would not be enough as we are using the class name in many more places where this hack should be propagated too.\n",
            "The problem exists, but the fix looks wrong to me. We should keep the scoped services even with nested scopes. Right now, and even after your patch, we loose some information.\n",
            "`PhpMatcherDumper` should probably also be updated to call the new `getAttributes()` method; but that won't be possible as the Route is not accessible when using this dumper. Adding a feature that can only be used by the standard `UrlMatcher` and not by the other matchers does not sound good to me.\n",
            "This is wrong. We wrap all exception also to hide the message, even for BadCredentialException instances. \n",
            "That can only be merged in master.\n",
            "No, I'm going to switch the branch when merging, it was just to warn you about this.\n",
            "Can you make a PR for the docs? (symfony/symfony-docs). Thanks.\n",
            "Doing both seems the way to go.\n",
            "I agree with @Tobion. Functional tests are very slow to run, so whenever we can write unit tests, that's far better.\n",
            "@omgnull Does the hints provided by @empire enough to add some unit tests? Do you need some more help?\n",
            "ping @bschussek \n",
            "Is this PR ready? Anything left?\n",
            "@stof: ok, then, let's close it.\n",
            "Can you add a unit test for that case?\n",
            "Any image useful for other bundles should not be deleted. So, if DoctrineBundle is using the blue_pico_\\* images, I'm going to revert their deletion.\n",
            "ok, I've reverted the removal of the images that might be useful in third-party bundles.\n",
            "Can you add a test?\n",
            "@Tobion @vicb What do we do? Just revert #6002 or merge this PR?\n",
            "A simple usage example:\n\n``` jinja\n{% extends  TwigBundle::layout.html.twig  %}\n\n{% block body %}\n    <div class= block >\n        FOOBAR\n    </div>\n{% endblock %}\n```\n",
            "done\n",
            "Of course, I don't want to make this change without a reason and indeed, I forgot to mention the why of this change. Let me explain.\n\nI've been working on the integration of the Symfony web profiler into other OSS that use HttpKernel like Silex and Drupal for quite some time now. That's why I developed the new namespace feature in Twig, that's why I've refactored the web profiler to only use Twig and not the templating component. One of the last step is this PR, which reduces the number of dependencies to be able to use the WebProfiler bundle.\n\nSo, this change is not cosmetic, but one more step towards the goal of making the web profiler more reusable.\n",
            "Of course, that's a possibility. But what for? I doubt that people are using this code. Are you using this code somewhere?\n",
            "ok, fair enough. The code is now in the framework bundle as well.\n",
            "When is it broken?\n",
            "To be consistent with how we manage HTTP ports elsewhere, I'd rather use the values of the `request_listener.http_port` and `request_listener.https_port`:\n\n``` php\n        if (null === $httpPort) {\n            $httpPort = $this->container->getParameter('request_listener.http_port');\n        }\n\n        if (null === $httpsPort) {\n            $httpsPort = $this->container->getParameter('request_listener.https_port');\n        }\n```\n\nThis is done in the `security.authentication.retry_entry_point` service and for the `router_listener` listener.\n\nThe parameter name is probably not the best one, but that could be changed then in master.\n",
            "Your order of preference looks good to me.\n",
            "@flojon Looks really good. Thanks a lot!\n",
            "You've inadvertently changed the mode of the files. It should be reverted to 0644.\n\nI'm against the possibility to pass anything and then let Twig figure out what to do.\n\nWhat I propose is to be able to pass a form (like now) or an array of forms (which is consistent with what we have for the include tag).\n",
            "Closing this PR as the feature is too magic and cannot work reliably when forms are nested into the context for instance, or with included.\n",
            "That could also be done in 2.1. What do you think?\n",
            "Closing as this is a duplicate.\n",
            "Overall, this PR looks ok to me. @Tobion I see that you have some todo items in the PR description, can you fix thembefore I merge?\n",
            "@Tobion Anything left before I merge this PR?\n",
            "#3958 has been merged now.\n",
            "Any chance you can finish this soon. Changes like this one need to be merged before the end of this week.\n",
            "Theoretically, I do like the idea of having the context as a RequestContent object or a Request object. Now, let's see of the code looks like with this change.\n",
            "@Tobion: any update on this PR? Can we close it and open a ticket for the suggestion in your last comment instead?\n",
            "Is it worth working on this at this point? Especially as we won't break BC anymore.\n",
            "Closing this PR as the code is not finished. I've opened an issue to keep track of this possible change (see #8705).\n",
            "I'm not opposed to the change but can you share your use case with us?\n",
            "Can you add some unit tests to prove the issue and be sure that we won't have any regression in the future?\n",
            "Closing it for now. Feel free to reopen when you have some failing test cases or on Silex if this is because of Silex.\n",
            "Here is my take: #6211\n",
            "closing in favor of #6211\n",
            "Here are the results for the Finder tests on my Mac:\n\n```\n...............................................................  63 / 181 ( 34%)\n......................find: -regextype: unknown primary or operator\nF..............find: -regextype: unknown primary or operator\nfind: -regextype: unknown primary or operator\n.find: -regextype: unknown primary or operator\nfind: -regextype: unknown primary or operator\n......................... 126 / 181 ( 69%)\n.......................................................\n\nTime: 1 second, Memory: 10.75Mb\n\nThere was 1 failure:\n\n1) Symfony\\Component\\Finder\\Tests\\FinderTest::testIgnoreDotFiles with data set #1 (Symfony\\Component\\Finder\\Adapter\\PhpAdapter)\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    0 => '/var/folders/h7/55h7wcsx4g1cl...r/.bar'\n-    1 => '/var/folders/h7/55h7wcsx4g1cl...r/.foo'\n-    2 => '/var/folders/h7/55h7wcsx4g1cl...o/.bar'\n-    3 => '/var/folders/h7/55h7wcsx4g1cl...r/.git'\n-    4 => '/var/folders/h7/55h7wcsx4g1cl...er/foo'\n-    5 => '/var/folders/h7/55h7wcsx4g1cl...oo bar'\n-    6 => '/var/folders/h7/55h7wcsx4g1cl...ar.tmp'\n-    7 => '/var/folders/h7/55h7wcsx4g1cl...st.php'\n-    8 => '/var/folders/h7/55h7wcsx4g1cl...est.py'\n-    9 => '/var/folders/h7/55h7wcsx4g1cl...r/toto'\n )\n\n.../src/Symfony/Component/Finder/Tests/Iterator/IteratorTestCase.php:25\n.../src/Symfony/Component/Finder/Tests/FinderTest.php:207\nphpunit:46\n```\n",
            "What is the use case?\n",
            "Closing in favor of #7843. This implementation was totally broken and did not work (the mocks where returning bundles in a very different way than the real Kernel).\n",
            "After thinking more about this, I think the current behavior is correct. When calling getContent, `false` means that you cannot get the content, and as such, setting it again throws an exception.\n",
            "This PR must be updated now that #5312 has been merged.\n",
            "I'd rather stick with what Apache does... or Apache must be fixed too.\n",
            "Closing this PR as the list is really just the one from Apache. Submit the change there could be a good idea though.\n",
            "looks good to me.\n",
            "closed by #5888\n",
            "Closing this PR as the inmemory users are not for testing. Why not mocking the user for testing? Sounds much better to me. And anyway, if we were to do that, we would need to add all possible flags.\n",
            "Closing in favor of #6137\n",
            "@jfsimon Are all getAccept*() method BC?\n",
            "So, a BC break on just splitHttpAcceptHeader is possible... but should be documented properly. Another option would be to deprecate the current method (and keep it as is), and just use the new version everywhere. Sounds better as it won t introduce any BC breaks.\n",
            "The last thing missing before I can merge is a PR to update the documentation (should probably be just a note somewhere with the example you have in the UPGRADE file).\n",
            "Yes, looks good to me.\n",
            "Whitespace might be significant in a translation (especially when not using key but real sentences in the trans tag). And anyway, that would not be BC.\n",
            "The description of the PR is probably not the right one. Also, can you make 2 PRs: one for Oracle support and the other about the visibility change (as the latter change needs to be discussed first).\n",
            "see #5960\n",
            "already done in master.\n",
            "I think that @stloyd is just saying that opening PRs for that kind of changes is useless and I tend to agree with him. We need to focus on PRs that fix bugs or add new features, on PRs that add some value to the framework.\n",
            "I'm not convinced that this is the right way to add such a feature.\n\nWhat about adding a `setVariable()` (name to be determined) on the Translator itself, so that when you don't pass a variable, it also looks for it in those variables. This has two advantages:\n- it makes the feature decoupled from Twig and available whenever you need to translate something;\n- it is consistent with the same feature from the Routing component.\n",
            "Closing this PR as it does not seem to be the right way to do it (I talked to @alexandresalome about that).\n",
            "Thanks for the backport\n",
            "I agree with @stof here. Closing this PR. And anyway, it could not be merged into 2.0.\n",
            "This is not supported as everything should work in the same way with all the formats we have: PHP, XML, and YAML. Anyway, at the end of the loading process, we only deal with services and parameters. If you need to manipulate those, you can write a compiler pass.\n",
            "Any news on this issue?\n",
            "@robqu Can you work on a PR that implements your suggestion?\n",
            "Closing in favor of #6266\n",
            "Looks like too specific to be added in the core, also because you can have many variations of this helper.\n",
            "I feel the same as @lsmith77.\n",
            "@Brouznouf You're right. For me, PHPunit is a tool and I'm not comfortable (yet) about adding this tool dep into the composer file. By the way if we were to do this, we would have to change all the composer.json. Closing for now.\n",
            "The Apache matcher was broken by b2f5ac8\n",
            "People who reported the slowness were people using the full-stack framework. So, I suppose that testing performance of the standard edition with and without the patch should reveal the performance issue.\n",
            "I would like to come up with some standardization here as we already have a few commands that also support outputting in a different format (for instance the list command that can dump command in XML).\n",
            "Closing in favor of #7454\n",
            "All these tearDown methods are not needed and should be removed.\n",
            "ping @bschussek \n",
            "should probably be done in 2.1.\n",
            "Closing this PR as this is not BC (the getAbbreviations() method for instance does not exist anymore) and it does not solve any issue.\n",
            "I'm always very careful when doing such  refactoring . First, because even if a method is not marked as being part of the API, there is probably someone using it somewhere (so this is a BC break for him). Then, because the refactoring can have side-effects that are covered by unit tests. So, without a clear benefit, I tend to avoid such refactorings. But don't get me wrong, I appreciate your work and your contributions.\n",
            "@dlsniper Instead of working of a big PR, can you make smaller ones (and only when they are finished): one on removing unused variables for instance, another one for missing phpdocs, ... That would be much easier to review and to merge. Thanks a lot.\n",
            "Looks like a hack to me.\n",
            "Closing as this PR is wrong. Choices cannot be removed even if they are the same.\n",
            "Looks good. Can you update the documentation as well and add a note in the component CHANGELOG? Thanks.\n",
            "This one cannot be closed as it contains more phpdocs than in the 2.0 branch.\n",
            "reverted\n",
            "Thanks.\n",
            "I forgot to mention why I'd like to include this change besides performance: this would allow to share templates between a project using the Symfony2 full-stack framework and any other project using Twig.\n",
            "It was indeed merged into the 2.1 branch (have a look at the merge commit).\n",
            "In the merge commit, there is a sentence telling you where it was merged. Here, you can read:  This PR was submitted for the master branch but it was merged into the 2.1 branch instead (closes #5657) \n",
            "It is automatically added by the tool I'm using to merge PRs.\n",
            "`STDIN` is used in other places in the framework and apparently, it never caused any problem for anyone else. So, are you sure there is indeed a specificity with Siteground's PHP?\n",
            "Are you using the console from the web (like mentioned in your linked page)?\n",
            "If we were to change STDIN to the fopen equivalent, I think we need to do it everywhere, not just here.\n",
            "Thanks for investigating the issue further. So, the problem comes from the hosting company, not Symfony. When on the CLI, you need to use the CLI SAPI, not the CGI one. I would vote for a  won't fix  in that case.\n",
            "The thing is that the hosting company is doing the wrong thing. So, they need to fix it, and if they don't want to (for whatever reason I don't really understand), well, just switch to another hosting company.\n",
            "Big -1 from me as it introduces an (optional) dependency on the event dispatcher (which will lead to more events added over time). The use case you mention is already discussed by Drupal; not sure what they have done on this topic though.\n",
            "Content negociation should probably be handled by Symfony directly.\n",
            "@cordoval a Symfony Component would be fine.\n",
            "I have the feeling that having content negociation within Symfony (perhaps as another component or part of HttpFoundation) and making it available in the Router would make the need for custom events almost disappear (at least for legitimate use cases).\n",
            "@jmather First, we need the real-world use cases (that should not be implemented in another way). Then, the proposed solution must work for all implementations of the matcher (Apache, the compiled router, ...). Finally, the performance are very important for this component. So, let's first discuss the use cases before even thinking about the implementation.\n\n@lsmith77 How can we move forward? Does someone need help with the content negociation implementation? Do we need to start from scratch?\n",
            "@winmillwill Are you still willing to work on BadFaith? If not, I'd like to take over, move the code into Symfony, and finish the implementation.\n",
            "@cordoval There are not so many PR waiting for me. A lot of them still cannot be merged yet.\n",
            "Closing this PR for the reasons explained in the comments. Content negotiation is being worked on in other PRs.\n",
            "2.0 merged into 2.1 and 2.1 merged into master.\n",
            "ping @eriksencosta\n",
            "This PR should target the 2.0 branch as this is a bug fix. Thanks.\n",
            "Closing as there are too many problems.\n",
            "Closing as it is not tested and anyway, I prefer the explicit way.\n",
            "I tend to agree with @elliot here. And for that reason, such a class does not belong to Symfony core.\n",
            "I've cherry-picked the relevant commit into the 2.1 branch.\n",
            "Can you submit this PR on the 2.1 branch as this is where it should be fixed? Thanks.\n",
            "As this is a bug fix, it should be done on the 2.0 branch. Thanks.\n",
            "Exit code values are standardized and some values have some well-defined meaning. Have a look here for more info: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/Process.php#L67\n",
            "Closing this PR because of #6009 and because it cannot work alongside the current behavior.\n",
            "I tend to agree with @Tobion here. Indeed, we decided to use specific exceptions in components, but only when it makes sense. Converting all components to use specific exceptions is not desirable if there is no point in doing that. So, I'm closing this PR.\n",
            "Can you submit a PR on the 2.0 branch instead? Thanks.\n",
            "@slde-incal Apparently, many non-related commits have been introduced in this PR. Can you fix that?\n",
            "Any news on this PR? @meandmymonkey Will you have some time to finish your implementation?\n",
            "Closing this PR as it is borked now and needs to be rewritten to take into account PSR-3 anyway. Feel free to reopen a new one.\n",
            "Can you please reopen a new PR for the 2.1 branch instead? thanks.\n",
            "I've just had a quick look at #4937, and I think it makes sense to just add an option to the existing command.\n\n@Burgov @richardmiller Can you work together on a single PR?\n",
            "As per @Seldaek suggestion, we've reverted to use self.version in the 2.1 branch, which I've just merged.\n",
            "Can you add a note about it in the changelog of the component? thanks\n",
            "As said in the code comments, not encoding the data is not safe. So, I'm -1 on this change.\n",
            "@bamarni Can you add some unit tests and also update the FormExtensionInterface interface phpdoc as `getTypeGuesser` can now return `null`? Thanks. ping @bschussek \n",
            "Shouldn't it be done on the 2.0 branch?\n",
            "Can you rebase on master or I can just cherry-pick the last commit if you want.\n",
            "This should be done on the 2.0 branch.\n",
            "Can you rebase on master and add a note in the CHANGELOG? Also, I think the doc should be updated accordingly. Thanks.\n",
            "Just adding a note about the new possibility in the CHANGELOG.\n",
            "IIUC, #5437 is a regression in 2.1 and should be done in 2.1, no?\n",
            "@BenjaminBeck Do you have time to finish this PR?\n",
            "Closing in favor of #6343\n",
            "closing in favor of #5595\n",
            "@haswalt Do you have time to add some tests for this PR? Thanks.\n",
            "The easiest would be to create a new PR with @haswalt commits and your commit. Thanks.\n",
            "closing in favor of #6283\n",
            "I've just reverted this pull request as it introduces some regressions? It was a very bad idea to merge this so close to the release of 2.1 and I'm the one to blame. Sorry about that.\n\n@Tobion As apparently it is not possible to reopen a pull request, can you re-submit it again, so that it is not lost? Thanks and sorry again for the trouble.\n",
            "@bschussek Is it mergeable now?\n",
            "@Elfet Can we close this PR?\n",
            "ping @Seldaek \n",
            "Closing in favor of #5376 (you only need to create a PR on the oldest and maintained branch -- we then merge 2.0 back into master on a regular basis)\n",
            "Closing this PR as I like the way it is done now better.\n",
            "I have applied the patch on 2.0 and I've kept the autorrship.\n",
            "I don't see why we would add this to the `.gitignore`. The script should be installed globally, like Composer by the way, which I will probably remove from the .gitignore file also.\n",
            "What about doing the fix in 2.0?\n",
            "ok, let's only do the fix for master for now.\n",
            "I won't have time to dig into this matter before the release of 2.1, and anyway, and I'm pretty sure this is not the right way to fix this issue. But even though, just fixing the UrlMatcher is not enough. All matchers would have to be fixed (including the Apache one).\n\nSo, I'm closing this one as it is referenced in the ticket anyway for future reference.\n",
            "@loaf: Can you rebase on master and squash your commits?\n\nI think there is still one issue you have not solved yet: the automatic registration of GetSetMethodNormalizer. \n\nTo quote @stof (the comments are now hidden because you made some changes to the files):\n\n Registering this one should be optional. The GetSetMethodNormalizer is broken (by design) as soon as you have a cyclic object graph (you have an infinite loop when calling getters), so forcing to register it is a bad idea (expecially as many people tend to use bidirectional relations in their entities apparently)\n stof repo collab 16 days ago \nfor this service, you should add the tag conditionally in the DI extension according to a configuration, to allow disabling it.\n\nand it should have a negative priority rather that a high priority IMO, so that custom normalizers registered with the default priority can be checked first (the GetSetNormalizer will accept any input) \n",
            "I agree with @loalf: no tagged services by default and an exception if none are.\n",
            "@loalf Can you take my comments into account, squash your commits, and submit a PR for the docs? Thanks.\n",
            "I don't like adding yet another option for something that should  just works . It would be better to find a better way to optimise the strings for all cases.\n",
            "I'm also for removing these optimizations. What others think?\n",
            "please, don't add more travis files. The main already tests everything, and that's all we need.\n",
            "Closing this issue as this has never been intended to work this way.\n",
            "ping @bschussek \n",
            "Can you merge you two commits? Thanks.\n",
            "What's the status of this PR?\n",
            "ping @bschussek \n",
            "ping @bschussek \n",
            "@gertvr Can you add a unit test to prove the issue (and avoid any future regressions)?\n",
            "@gertvr Will you have time in the coming days to add some unit tests?\n",
            "@bschussek What do we do with this PR? Should we merge this fix?\n",
            "I will merge this PR after we have a release of DBAL that includes the fix for DBAL-322.\n",
            "ping @drak \n",
            "I also agree that it should be supported.\n",
            "@drak The point is that we need to allow this kind of integration (that's part of the interoperability we try to promote). So, even if the session was started by Wordpress, it should be usable within Symfony. We must allow the session to be shared between the two libraries.\n",
            "@drak: Don't get me wrong. I'm not suggesting to merge this PR. I'm just saying that it should be able to share the session between different PHP projects into one project. Note that I've not thought about that more than that, so I don't have all the implications in mind. That being said, in symfony1, it was definitely possible to do that kind of stuff.\n",
            "Can someone work on a patch from PHP 5.4 by using the new `session_status()` function?\n",
            "it has been addressed by #7571\n",
            "@beberlei Does it look good?\n",
            "What parts of the bundle do you want to use? I mean, perhaps the better option would be to move what you need in the bridge (if possible of course).\n",
            "@sasezaki Can you open a PR for the 2.0 branch? Thanks.\n",
            "Can you put the comment about all the possibilities you have mentioned here in the phpdoc for future reference? Thanks.\n",
            "The comment in the PR is more explicit and more detailed than the one in the interface. So, yes, basically, it would be great if you can move all the information in the interface phpdoc.\n",
            "merged, thanks\n",
            "I've just reverted this pull request as it introduces some regressions? It was a very bad idea to merge this so close to the release of 2.1 and I'm the one to blame. Sorry about that.\n\n@Tobion As apparently it is not possible to reopen a pull request, can you re-submit it again, so that it is not lost? Thanks and sorry again for the trouble.\n",
            "I've just reverted this pull request as it introduces some regressions? It was a very bad idea to merge this so close to the release of 2.1 and I'm the one to blame. Sorry about that.\n\n@Tobion As apparently it is not possible to reopen a pull request, can you re-submit it again, so that it is not lost? Thanks and sorry again for the trouble.\n",
            "On the master branch please. Thanks.\n",
            "Closing as this is a duplicate.\n",
            "Closing this PR as the method we are using is used by many other libs.\n",
            "This PR exposes an internal state of the class. That's not something we want to do as it would limit a future refactoring of the internal working of the parsing logic.\n",
            "So, what's the next step?\n",
            "Can you provide a PR for 2.1 so that I merge both at the same time?\n",
            "Closing this PR as the current behavior is what is expected. The ending `.html` is a static segment like any other one.\n",
            "Closing this PR as this is about speed optimization but with no numbers to back it up. Reopen if some benchmarks prove that it gives us a nice speed improvement.\n",
            "@bschussek Can you take a decision? Merge or close?\n",
            "@Dattaya Any update on this PR?\n",
            "thanks @bschussek \n",
            "As far I understand the discussion on #4734, a few people seemed to be concerned about the usefulness of adding such a validator in Symfony core. Anyone wanting to give his point of view? Personally, I'm -0 on merging this.\n",
            "@merk Now that it is merged, can you submit a PR on the docs? Thanks.\n",
            "No problem adding that. But then, and to be consistent, can you add a complete phpdoc block like done anywhere else? Thanks.\n",
            "@daFish Fixed now. Thanks for the report.\n",
            "ping @willdurand \n",
            "@kufi Can you add a note in the CHANGELOG of the Propel bridge before I merge this PR? Thanks.\n",
            "2.2\n",
            "This must be done on master, not 2.0.\n",
            "It is probably not related to WAMP but more on the version of PHP you are using. Can you tell us which version of PHP you are using? and also the information about intl?\n",
            "ping @eriksencosta\n",
            "Thanks @stof for narrowing the bug. As this is a PHP bug, I don't want to provide a workaround, especially in the Locale component. The best would probably be to add a check in Symfony SE and alert developers if they use a non-working PHP version.\n",
            "@lyrixx Can you reopen a PR on the 2.0 branch? thanks.\n",
            "Can you add a note in the CHANGELOG?\n",
            "This has been reverted as it breaks Symfony SE.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "I would like to merge this in 2.2, except if you all (@beberlei, @Seldaek, @lsmith77) think that it would be better to merge this in 2.1.\n",
            "ok, let's schedule that for 2.2 to give enough time to get it right. We are not going to mark the 4 components that are not stable yet as stable anyway in 2.1.\n",
            "@beberlei @lsmith77  What would like to do with this PR? Do you any other ideas about a better way to implement this?\n",
            "@beberlei @lsmith77: Any news on this one? We are running out of time for 2.2, so we need to decide as soon as possible if this can be included in 2.2 or not. Thanks.\n",
            "Closing in favor of #6574 \n",
            "This is a BC break for people extending the `Role` class and I'm not sure it is worth it:\n\nBefore:\n\n```\n1:{s:47: \\0Symfony\\Component\\Security\\Core\\Role\\Role\\0role ;s:9: ROLE_USER ;}}\n```\n\nAfter:\n\n```\n16:{s:9: ROLE_USER ;}}\n```\n\nLength is 23 vs 79 for a role.\n\nSo, -1.\n",
            "Closing it as it's not worth it to break BC for such a small benefit.\n",
            "This is a BC break for people extending the `Role` class and I'm not sure it is worth it:\n\nBefore:\n\n```\n1:{s:47: \\0Symfony\\Component\\Security\\Core\\Role\\Role\\0role ;s:9: ROLE_USER ;}}\n```\n\nAfter:\n\n```\n16:{s:9: ROLE_USER ;}}\n```\n\nLength is 23 vs 79 for a role.\n",
            "Oops, I did not want to merge it. I'm going to revert it now.\n",
            "I'm -1 but let's the discussion continue on a new PR.\n",
            "I tend to agree with @bschussek. I've merged this PR as a temporary fix for Travis. Anyway, I don't know how to run those tests either. Using `--group` does not seem to work. Anyone know how to run them?\n",
            "If that's the case, then we need  to report a bug on PHPUnit as I think this is counter-intuitive. Both me and @bschussek thought it was a bug when trying it from the CLI.\n",
            "I think it would be better to named it `propel_model`.\n",
            "We should definitely rename Doctrine too.\n",
            "You're right, let's not break BC for the sake of it.\n",
            "I'm -1. The fact that someone failed to login is an information and from the logging point of view, there is no action to take on such logs.\n",
            "@bschussek Can you also create a PR on symfony docs to update the documentation?\n",
            "ping @lsmith77 @Seldaek \n",
            "that should be done on 2.0, not master\n",
            "I'm also -1 for the reasons explained by @stof \n",
            "@gordalina Any news on this PR? Are you still willing to work on it. As I understand it, it cannot be merged as is. So, we either need to have it completed or close it.\n",
            "Closing this old PR that is not mergeable because it is not ready. Feel free to reopen whenever it is complete.\n",
            "It is needed for some loaders, but it is not a requirement to be able to use the component.\n",
            "oops, sorry, I've been faster.\n",
            "@ricardclau you can apply the patch yourself if you want but we won't backport that in the 2.0 branch.\n",
            "None of the other methods implement a fluent interface. I don't see a big benefit for introducing such a change.\n",
            "I'm also -1 for this addition. Nobody ever asked for such a feature (and we have been using an event dispatcher for the last 5 years). As @Seldaek said, if you need this, you can probably just override the default event dispatcher.\n",
            "Can you reopen a PR for the 2.0 branch instead? Thanks.\n",
            "hehe, ok, merged now. thanks.\n",
            "Can you try with the master? I think it has been fixed now.\n",
            "I confirm that this is fixed now.\n",
            "I'm still not convinced that creating a bundle component is worth it. I see bundles as being tied to the way we manage reusable components of a project in the full-stack framework. Talking about Silex, we would not reuse the bundle component as we already have an adhoc solution there that work fine and that is more in line with the philosophy we have there.\n",
            "Closing duplicate.\n",
            "What does it fix?\n",
            "@umpirsky Your code is not equivalent to the previous one.\n",
            "As I understand it, @bschussek is against this change. Can we close the PR?\n",
            "Adding a CSRF token only makes sense if you are on a page with a  user . If not (and if you don't use HTTP auth or whatever), then there is no need for a CSRF token.\n",
            "I would just remove the need for a session on the login page instead of creating yet another setting.\n",
            "Why is it good? When the form is submitted, the session will be started anyway.\n",
            "That cannot be done in the 2.0 branch.\n",
            "It is a new feature and as such it should be done in master, not 2.0.\n",
            "This PR breaks the tests: http://travis-ci.org/#!/symfony/symfony/jobs/1796369\n",
            "I have no idea why Travis stopped working on PRs.\n",
            "As this code was extracted for ZF, I prefer to keep it as close as possible as the original source.\n",
            "We are going to have many problems like this one. What about just dropping the whole list and for such cases, the developers must be explicit about the plural? ping @bschussek \n",
            "Closing this PR as #4777 has been merged.\n",
            "If you want it to be in 2.0, close this PR, create a new one on 2.0 which will be merged to master afterwards. Thanks.\n",
            "Can I close this PR? Has someone created a ticket for Doctrine?\n",
            "The profiler only works with Twig anyway.\n",
            "It was unrelated and I fixed that problem already.\n",
            "As I said on PR #4713, adding more method clutters the API without any big benefits. I'm -1 on the PR.\n",
            "@schmittjoh What's your point of view?\n",
            "@jeanmonod Can you take into account the comments by @schmittjoh?\n",
            "@jeanmonod I'm going to review the code once more and it will be merged for 2.2. Thanks for your work.\n",
            "@jeanmonod Can you squash your commits before I merge? Thanks.\n",
            "@jeanmonod One last thing: can you submit a PR on symfony/symfony-docs that update the documentation with the new possibilities?\n",
            "We already have quite a few methods on this class. And with them, we cover pretty much all the common use cases. Adding some more method clutters the API without any big benefit.\n",
            "Can you squash your commits? Thanks.\n",
            "see #4702\n",
            "The implementation should follow the behavior of a regular shell:\n- Possibility to use `'` and ` `\n- Possibility to use `\\` to continue on the next line\n- Possibility to escape ` ` and `'` with `\\`\n",
            "You are right about the backslash.\n",
            "@felipenmoura Are you working on this PR?\n",
            "@felipenmoura Any news?\n",
            "Closing this PR as there is still much work to do to make it work the right way. Feel free to reopen when it's done.\n",
            "The goal is to make Symfony as stateless as possible; introducing a cookie would defeat this goal.\n",
            "I've added a paragraph in the UPGRADE file with a listener example that can be used to keep BC.\n",
            "We don't enforce any order on the use statements.\n",
            "That's weird. It still does not appear on your account: https://github.com/albyrock87/symfony is a 404.\n",
            "right, merged now. Thanks @henrikbjorn \n",
            "Apparently, you have removed your fork of Symfony in your account, which means that I cannot merge your changes anymore without some hacks.\n",
            "That's a tiny problem. Honestly, let's finish the 2.1 release (we have many outstanding bugs) and let's revisit this topic for 2.2.\n",
            "I'm +1. Can you  finish  the PR?\n",
            "@everzet If you don't have time, I can do the remaining work.\n",
            "Why have you closed this PR?\n",
            "Closing in favor of #4810\n",
            "Why have you closed this PR?\n",
            "This has been reverted as it causes many problems. Must be reworked before being remerged for 2.1.0 beta2.\n",
            "I have had time to investigate further but it seems that this also slows things down a lot.\n",
            "Closed in favor of #4806\n",
            "@eriksencosta Now that PHP 5.4.4 is out, our tests for the Locale components are broken. Is this PR ready to be merged?\n",
            "Closed in favor of #4804\n",
            "As @Seldaek said, adding a new interface is the way to go. Closing this PR as this is the wrong approach.\n\nI've create an issue for the interface: #4697\n",
            "The kernel class is provided by the Symfony Standard Edition, so I don't see how you can mess up with it. And anyway, this change is done in the web test class, but if there is indeed a problem with the class name or a namespace, your app won't work anyway. so I don't see why we would add this check here.\n",
            "@asm89 yes, can you do that in #4599. Closing this PR now.\n",
            "no, it can be string when you use a parameter like `%kernel.debug%`.\n",
            "Can you send a PR on the `romainneutron:FilesystemExceptions` branch (see #4330) as he has already worked on such enhancements? Thanks.\n",
            "I don't like this PR as it is really just a hack.\n\nIf you want to test dynamic forms, you need to inject the HTML nodes as the JavaScript code would have done.\n",
            "Want to add it to Silex? If not, I think it would make sense.\n",
            "I would register it in the application directly.\n",
            "I'm -1 for this PR. It complexifies the code for a situation that never occurs.\n",
            "@jalliot I don't remember why we don't warm up the cache in the post-install script. We can probably also warm up the cache. You can change it and test to see it works well.\n",
            "I've reverted this PR because I now remember why it was not done: even when you warm up the classes cache, as some of the classes that are part of the cache are already loaded, they are not included in the cache. But during the first request, the already loaded classes are different, and as such (in the dev env), the cache is reloaded. In the production env, these classes would just never be in the cache.\n\nBy the way, it broke the command anyway.\n",
            "The way the two mentioned bundles do that seems fine with me. I don't how this simplifies anything. Quite the contrary. In the current situation, it is extremely clear which bundles actually depends on the kernel, which should be the exception anyway.\n",
            "We have removed all native session handlers. So, if the native Redis storage as configured in the php.ini does not work, we need to fix it.\n",
            "If they the native session handlers are working, I propose to close this PR.\n",
            "Can you add a mention in the CHANGELOG please?\n",
            "merged, thanks.\n",
            "I've merged this into master instead of 2.0 by mistake.\n",
            "No, I think master is fine.\n",
            "@sun: I have a unit test to avoid any regression in the future.\n",
            "Any news on this PR?\n",
            "reverted. ping @bschussek \n",
            "reverted: 826f5122e94d9ec0ad53bdceff562dae3b7d2ac3\n",
            "@alexandresalome just return 1 in case of a problem.\n",
            "closed in favor of #4806\n",
            "@bschussek Is this PR still needed in master? Can it be merged there?\n",
            "The minimum PHP version has been changed for Symfony 2.1, not for 2.0.\n",
            "must be done on master, not 2.0... but what's the point?\n",
            "You are right, but there is no  benefit  in added the abstract keyword.\n",
            "and anyway, it should be done on master.\n",
            "I'm +1 for this change, but only on master. @bschussek?\n",
            "2.0 is merged into master on a regular basis and I've just done that.\n",
            "it is a BC break. +1 for  errors .\n",
            "People who voted -1. Can we hear your arguments against this change?\n",
            "@maerlyn Problem is that you will always find people with such class names (`form_errors` is still generic).\n\nThe only option would be to prefix the class names with a something unique like `sf_`, but as seen in symfony1, people don't like to advertise the fact they are using Symfony, so they want the prefix to be configurable and things go out of control from there.\n",
            "Closing this PR as we won't find a consensus on the class names.\n",
            "This must be done on master as it changes the signature of some methods.\n",
            "+1 for the flag as suggested by @kriswallsmith .\n",
            "Closing this PR as there is no consensus about it.\n",
            "Can you provide a link to the code for the RouterListener in Drupal?\n",
            "@everzet Looks good to me... but without adding that to the interface. Anyone willing to submit a PR with some tests?\n",
            "We cannot change `UrlMatcherInterface` as it is part of the stable API. So, the only option is to create a new one: `RequestAwareUrlMatcherInterface`.\n",
            "So, I cannot merge this until the composer bug is fixed (ping @naderman)\n",
            "It does not work:\n\n```\n[Composer\\DependencyResolver\\SolverBugException]                                                                                                                                                       \nTrying to decide +doctrine/common-2.3.9999999.9999999-dev (alias of 9999999-dev) on level 3, even though doctrine/common-2.3.9999999.9999999-dev (alias of 9999999-dev) was previously decided as -1.  \nThis exception was most likely caused by a bug in Composer.                                                                                                                                            \nPlease report the command you ran, the exact error you received, and your composer.json on https://github.com/composer/composer/issues - thank you!\n```\n",
            "@clemens-tolboom Just create a new one and reference this one.\n",
            "merged, thanks.\n",
            "The code you have moved is generic and independent of ESI. It can be used for something else.\n\nSo, I'm -1 for this change.\n",
            "As I said, moving this code does not make sense as there is nothing related to ESI in it. So, yes, you should override 2 classes instead of 1, btu that's not a big deal.\n",
            "Can you create a PR for the 2.0 branch as this is a bug fix? Thanks.\n",
            "I'm definitely -1 on this change. HttpCache is useful when you cannot afford to use Varnish, which is probably only the case when you are on a shared host, where you won't be able to use anything else than the disk for the storage. If you can afford to use something else (like memcache, or redis, ...), it probably means that you can also afford to install Varnish, which is insanely easy. So, I don't want people to think that HttpCache is a replacement for Varnish, it is just a stub for when you cannot have Varnish.\n",
            "Let's talk about this when the cache component will be ready then.\n",
            "As I said on multiple occasion, this is not standard Markdown and so this won't be merged.\n",
            "ping @Seldaek / @lsmith77 \n",
            "@ju1ius Will you have time to work on this soon? If not, I can try to find some time as I want these fixes to be part of 2.1.\n",
            "I'm going to do the work if @ju1ius is not available.\n",
            "Closing in favor of #7463\n",
            "Closing this PR as the code is wrong. The optimization might be a good idea (needs some benchmark here), so feel free to reopen a new PR with code that works. Thanks.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "The rebase looks fine to me, you just need to squash your commits now. Thanks.\n",
            "oh, sorry, I didn't noticed that the other commit was not yours. To rebase your PR, read the doc: http://symfony.com/doc/current/contributing/code/patches.html#rework-your-patch\n",
            "@drak: Why did you close this PR if you think this is the way to go?\n",
            "Can you tell us more about the use cases?\n",
            "I'm -1 as this is very specific and it does not do that much.\n",
            "As some mime types have been removed, this is really something that is for master, not for 2.0.\n",
            "As @beberlei mentioned, the biggest problem is the license of the code... Symfony being licensed under the MIT license.\n",
            "I think this syntax does not make sense and as such I don't see the need to support it.\n",
            "I think you should keep these changes on master. Last thing before I can merge: can you squash your commits as explained by @vicb?\n",
            "That's still not good. Squashing is explained here: http://symfony.com/doc/current/contributing/code/patches.html#rework-your-patch\n",
            "With the information provided in this PR, I would say B. But I want to hear @drak point of view before taking a decision.\n",
            "adding some unit tests?\n",
            "The route pattern is just about the URL path, and as such it must not contain the query string.\n",
            "There are many  reserved  exit codes. And if you execute a PHP script that returns 255, you don't want it to be magically converted to 254.\n",
            "We don't change visibility of a bunch of properties without use cases. So first, can you tell us a bit more about why you need these visibilities to be changed?\n",
            "Most of the properties have proper accessors, so there is no need to change them. I'm closing this PR for now. Feel free to reopen a new one to add some missing getter methods if you really need them.\n",
            "As this is a bug fix, this should be done on the 2.0 branch.\n",
            "I've change the min version of PHP to 5.3.3 for master: 3719c7087042d77a\n",
            "ping @beberlei \n",
            "This should probably be done on the 2.0 branch as this is a bug fix.\n",
            "Closing this PR as there is no way to get all rendered templates (not yet as least) and if we provide something in the core, it must work in all cases.\n",
            "Tests broke.\n",
            "@stof: Can you fix the tests please?\n",
            "Can you create a PR for the 2.0 branch as this is a bug fix? Thanks.\n",
            "@igorw Any news on this PR?\n",
            "This change must be done on master.\n",
            "Closing as I run the check_cs on a regular basis and I tend to avoid too many changes to ease merging between branches.\n",
            "ping @drak \n",
            "If you are going to do more of those, can you please do everything in one PR as each PR has quite an overhead for the core team? Thanks.\n",
            "Closing it in favor of the doc update.\n",
            "ping @beberlei \n",
            "So, can we close this PR?\n",
            "We won't change all ternary operators. I think that support for the ternary operator in XDebug was discussed/planned some time ago but I don't find any reference right now (ping @derickr).\n",
            "Can you squash your commits? It will be much easier to get back to this change later on. Thanks.\n",
            "nevermind.\n",
            "Can you please remove the changes you have already made in the other PR as I merge 2.0 into master regularly. Then, you will need to squash you commits to avoid any conflict when merging will occur. Thanks.\n",
            "As this is a bug fix, can you reopen a PR based on the 2.0 branch? Thanks.\n",
            "As this is a bug fix, can you reopen a PR based on the 2.0 branch? Thanks.\n",
            "Can you add some unit tests?\n",
            "@Nanocom Any update for this PR?\n",
            "ping @bschussek \n",
            "Can this PR be closed?\n",
            "Can you add some unit tests?\n",
            "This implementation is broken and does not work.\n\nFurthermore, this is actually a BC break as you fallback to using the label if the value does not exist. So, this can only be implemented by creating a new method (`setValueByLabel` or something like that). Anyway, without proper unit tests, that cannot be merged.\n",
            "That does not work for me.\n",
            "Can you also patch the documentation? Thanks.\n",
            "I'm +1 to make `FlattenException` more  compatible  with `Exception`. Can you add the other missing methods? Also, you need to populate the `$this->file` and `$this->line` value in the constructor.\n",
            "w00t! Your second PR is now merged!\n",
            "This should go into the 2.0 branch.\n",
            "ping @bschussek \n",
            "should be done on 2.0 as this is a bug fix.\n",
            "closing in favor of #4012\n",
            "Removing `InotifyTracker` is probably not a good idea. The composant should be able to work with native implementations to make things as fast as possible and to reduce CPU usage. If we do not ship with any of those, how can we ensure that we will be able to add them later on?\n",
            "@Dattaya You can send a pull request on everzet/resource-watcher-rebuilt. And when @everzet will merge your PR, it will automatically be reflected here too. Thanks.\n",
            "@everzet feel free to remove the IN_ prefix.\n",
            "duplicate of #3291\n",
            "reverted\n",
            "reverted\n",
            "Looks good to me. Can you reopen a PR and target the fix for the 2.0 branch? Thanks.\n",
            "@phreaknerd I take care of the merging from 2.0 into master.\n",
            "I would definitely prefer a `getContainerBuilder()` that returns a container builder. But why would you want to do that?\n",
            "Yes this was my suggestion. But are you sure you cannot solve your problems with compiler passes?\n",
            "That breaks the tests.\n",
            "Thanks for doing these updates. This is really much appreciated... keep them coming ;)\n",
            "I would say that this is something that needs to be done in the Request class itself (from HttpFoundation). see #6209 for an another take. It does not enforce any hostname but I think this is just too much (we can probably add something in the docs to alert people about the potential pitfalls like done in Django: https://docs.djangoproject.com/en/dev/topics/security/#host-headers-and-virtual-hosting).\n",
            "closed in favor of #6209\n",
            "no need to create this as we automatically merge 2.0 into master\n",
            "What is your use case?\n",
            "So, closing this one... even if #3865 is probably not the right fix. I will comment on the other PR.\n",
            "For type hint in PHPDoc, we are using the class name and not the full namespace (of course, we need the associated use statement).\n",
            "Some comments:\n- I would have kept the number of database request as this number is probably the one everybody should have a look at on every page.\n- I would have used the original PHP logo (in black and white) instead of a non-standard one\n\nBut overall, this is a very nice improvement.\n",
            "As the verbose mode has been removed from the template, it should also be removed from the configuration (I can do that after merging if you don't know how to do that).\n",
            "I tend to agree too with @asm89. What about reusing the `verbose` option for that. This was already its purpose anyway.\n",
            "Displaying `phpinfo()` data is not in the scope of this PR.\n",
            "@Tobion The web profiler is mainly about information for the current request; so I'm not sure it would be useful to have such a tab in the profiler.\n",
            "It is much better now... but still not perfect!\n\nHere is a screenshot of the WDT at different sizes (the first being he WDT in the profiler):\n\n![WDT](http://d3j5vwomefv46c.cloudfront.net/photos/full/560215277.png?key=1025257&Expires=1334389397&Key-Pair-Id=APKAIYVGSUJFNRFZBBTA&Signature=B~6tg5ldcM0~fl7xLJu0aXT0Q~sHQwPatSVb9wjCNiE5n1fR-xBjCGvRBrE-JWABJDjUM~x8gwDHnvH1bgx95tpeA2iC4-4KkNMC7zgFlf4spWJCpSxOkOz4BPxlnxvniaPSJAG8X0Bqa68bhp5L5Dq6KDLL3egROYgFzAtmM0E_)\n\nSome comments:\n- for very large screen, we should display all available information like before\n- for some reasons, one of the  tab s is very large\n- we can probably show more information even for smaller screens\n- there is a small bug when the WDT is displayed in the profiler\n",
            "Can you revert the code move as it makes merges between 2.0 and master much more complex. Thanks.\n",
            "It looks like you have worked on the 2.0 branch but submitted the PR on the master one but such changes should be done in the master branch anyway.\n",
            "Great work!\n\nSome feedback:\n- It should definitely be done on master, not 2.0\n- Instead of the P  logo , what about using the PHP logo (in black and white for instance)\n- I think we can keep some information in the toolbar (like execution time and response status code?)\n- Memory is not something that needs to be displayed by default as it is probably not something you can really do anything with\n- I'm not convinced about the opacity change\n- With this change, we can probably remove the `verbose` option as it does not make any sense now\n",
            "Opacity is not needed as the toolbar is displayed _after_ all the page content (which was not the case in symfony 1.x where the toolbar was displayed on top of the content).\n",
            "@willdurand: It's a bug then.\n",
            "but with this new design, the WDT will never be rendered on two lines anymore.\n",
            "We cannot upgrade Doctrine to 2.2 in 2.0. This needs to be done in Symfony master instead. Or what about just copying the `ClassUtils` class in Symfony 2.0?\n",
            "So let's do that only for master\n",
            "Closing this PR in favor of #3826\n",
            "Tests do not pass for me:\n\n```\nPHPUnit 3.6.10 by Sebastian Bergmann.\n\nConfiguration read from /Users/fabien/work/symfony/git/symfony/phpunit.xml.dist\n\n.........................EE.......\n\nTime: 0 seconds, Memory: 5.25Mb\n\nThere were 2 errors:\n\n1) Symfony\\Component\\Filesystem\\Tests\\FilesystemTest::testMakePathRelative with data set #0 ('/var/lib/symfony/src/Symfony/', '/var/lib/symfony/src/Symfony/Component', '../')\nUninitialized string offset: 29\n\n.../rc/Symfony/Component/Filesystem/Filesystem.php:183\n.../rc/Symfony/Component/Filesystem/Tests/FilesystemTest.php:434\n\n2) Symfony\\Component\\Filesystem\\Tests\\FilesystemTest::testMakePathRelative with data set #1 ('var/lib/symfony/', 'var/lib/symfony/src/Symfony/Component', '../../../')\nUninitialized string offset: 16\n\n.../rc/Symfony/Component/Filesystem/Filesystem.php:183\n.../rc/Symfony/Component/Filesystem/Tests/FilesystemTest.php:434\n\nFAILURES!\nTests: 34, Assertions: 67, Errors: 2.\n```\n",
            "Closing this as this is too big of a change for 2.0. Only bug fixes should go into 2.0. As 2.1 is approaching fast now, I want to limit the changes made to 2.0.\n",
            "@bschussek: Can you rebase on master? I will merge afterwards. Thanks.\n",
            "I'm also -1. I always find it weird to have a returned value for a setter (also because you have given the value to set yourself).\n",
            "reverted as tests do not pass. Please, run the tests before submitting a PR.\n",
            "Can you open a PR for the 2.0 branch instead as this is a bug fix? Thanks.\n",
            "@eriksencosta, @igorw: Can you give me your thoughts?\n",
            "see #3528 for a PR on ICU data update.\n",
            "I'm just waiting for an ack from @eriksencosta or @igorw\n",
            "Closing in favor of #3765\n",
            "Can you update the CHANGELOG and the UPGRADE file accordingly?\n",
            "I don't understand the goal of this PR. Can you explain the need for this?\n",
            "This code was not ready to be merged, sorry.\n",
            "Let's not loose time on that kinds of topic.\n",
            "What kind of optimization? Lisibility? (I prefer the previous version) Performance? (I doubt your version is faster)\n",
            "Like the non RFC 2616 status code, you need to add the RFC number as a comment (or the reference to the draft).\n",
            "Can we close this PR while waiting for @ruimarinho new patch?\n",
            "I'm -1. With this change, the canvas disappears when it is too large. Looks worse than what we have today.\n",
            "closed by #4727\n",
            "done. The PR should have been done on the 2.0 branch.\n",
            "In your case, you need an autoloader for the tests, not for the code. So, you need to add the autoloader in your test bootstrap.\n",
            "Have you tried your patch? Because all the output is actually coming to STDERR, so after your patch, everything is red, which is rather ugly.\n",
            "`/{var1}{var2}` worked before. You just need to be sure to configure proper requirements for it to work reliably. If it's broken now, this is a regression.\n",
            "Have you encounter this problem to confirm that your approach works?\n",
            "Wouldn't it be better to throw an exception for such cases? A `trans-unit` without a `target` is useless anyway, no?\n",
            "@drak: the discussion is the ticket is very interesting and I think it should be part of a cookbook in the documentation. Can you take care of that before I merge this PR? Thanks.\n",
            "The `Filesystem` class is about non-trivial code. If we add this method, then why not adding all file related PHP functions as methods as well? I think that's not needed; you can just use the native functions.\n",
            "I have opened a ticket #3872\n",
            "It does not sounds right to me. The value is everything in the tag. I don't see why we would want to make an exception for some values.\n\n-1\n",
            "Thanks for this first PR. Keep them coming!\n",
            "Now that you have added the `setCallback` method, I would remove the constructor argument as it makes the signature quite long. As we have the `create` method anyway, it's more explicit and clearer to use the `setCallback` .\n",
            "How and when do you use such an exception?\n",
            "what if UTF-8 support in PCRE is not enabled? What if the project does not use UTF-8 as its primary charset?\n",
            "I've not read the entire discussion but allowing unicode characters for the separator is probably not needed (I don't see any valid use case for that -- we are already quite generous in the range od characters you can use for separators). Let's keep it simple.\n",
            "AFAIK, the `--` should disable both option and argument parsing, no?\n",
            "I would rename `addAll` to `addPrefixes` and `add` to `addPrefix`.\n",
            "right, then, what about creating a new class named `ClassLoader`, which does not have the legacy methods (can probably be a copy/paste of what is in composer actually)? That way everything is BC and the new class is cleaner.\n",
            "Sorry about that @arnapou but many thanks for the patch. Merged now!\n",
            "@arnapou The best place to discuss evolution is the Symfony mailing-list: http://groups.google.com/group/symfony-devs\n\nIf you already have a PR, then Github is the right place to have feedback.\n",
            "Can you close this PR and open a new one for the 2.0 branch as this is a bug fix? Thanks.\n",
            "I think it would be better to be able to inject a service that replaces the default strategy.\n",
            "In this case, I'm closing this PR as you can already override the `security.acl.object_identity_retrieval_strategy` service if you want to (there is no need to expose a dedicated parameter for that if a better solution would need to be found anyway). ping @schmittjoh \n",
            "see #3600\n",
            "@stloyd: Can you tell us why you introduced this code in 3c2539fccbaaded0025c96bf56b7767440b2b28f?\n",
            "see #3604\n",
            "should be done on 2.0\n",
            "I agree with @vicb. No need to convert gifs to pngs; the benefits are not worth the change.\n",
            "It's not about promoting best practices and I agree that using png would have been better. The point is to not break BC when it is not strictly needed.\n",
            "looks like a good compromise to me.\n",
            "Do we need to change the code like @web-dev suggests?\n",
            "+1 for importing the data from the link suggested by @lsmith77 (I'm quite sure that the current list was in fact created via this source... but many years ago and diverged from there).\n",
            "I would like to avoid the cost of loading yet another file. Just keep the way it is now but update the current list.\n",
            "+1 for removing Doctrine Common as a required dependency for the Validator component.\n\n+1 for removing ClassLoader and Finder from the Security suggestions.\n",
            "@stof: correct\n",
            "Can you base your PR on the 2.0 branch instead of master as this is a bug fix? Thanks.\n",
            "I tend to agree with with. What do you think @bschussek?\n",
            "What's the point is checking the hasser/getter/isser arguments. It's up to the developer to check if he can use them or not. Let's not complexify the code for this.\n",
            "@jjbohn Can you update the PR to check for the number of required parameters as suggested by @bschussek? Do we create a new exception for that or do we reuse an existing one?\n",
            "Is it still realistic to do that in 2.1? OR do we reschedule it for 2.2?\n",
            "This is scheduled for 2.2.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "Why would you want to break BC here? I agree with you that having the typehint is better but as we don't have it, let's keep it that way.\n",
            "ping @bschussek \n",
            "Closing this PR in favor of #3490\n",
            "I'm -1 on this change for one main reason, which is one of the main reason to use a framework in the first place: _predictability_ (... of the directory structure in this case).\n\nPredictability is important because of the following:\n- predictability ensures consistency between bundles\n- predictability helps IDEs build nice features (like jumping from the controller to the related template)\n- predictability makes it possible to build automated tools (like documentation generators)\n- predictability eases the learning curve of new developers joining an existing project\n- predictability simplifies the documentation\n- predictability eases support when someone has a problem (on the ML, IRC, forum, ...)\n\nFor all these reasons, we need to recognize that not everything is a good candidate for configuration. And of course, having less configuration means that we have less moving parts, which in turn helps with the test code coverage.\n\nOf course, if we (the community) think that the current directory structure is not optimal, then, let's have a discussion on this topic (and yes, it will be difficult to change anything because of backward compatibility).\n",
            "Closing this PR as it won't be merged.\n\nThe main issue is the location of templates, and #4649 gives you a way to add shorter template paths.\n\nI'm all for discussing the issue as it has already been mentioned more than once (see #3441 and #3427 for instance).\n",
            "This can potentially break some application, so let's keep it the way it is now.\n",
            "@bschussek is it ok for you?\n",
            "Closing this PR in favor of #4067\n",
            "ping @bschussek \n",
            "ping @bschussek \n",
            "This should be addressed in master anyway, not in 2.0.\n",
            "cherry-picked\n",
            "ping @bschussek \n",
            "+1 for putting the memcache tests in a group.\n",
            "I agree but isn't it a BC break? I mean, someone may rely on `_controller` in his code.\n",
            "Shouldn't it be done on the 2.0 branch?\n",
            "I've merged #3437\n",
            "The `shutdown()` method is where the autoloader should be removed. Can we include this in this PR as well so that we fix everything once and for all?\n",
            "ping @bschussek \n",
            "Can you squash your commits before I merge? Thanks.\n",
            "should be done on 2.0, not master\n",
            "@stloyd is right. As per Symfony standard, you should use `ChromePhpHandler` for the Symfony class and `SymfonyPHPHandler` for the Monolog one.\n",
            "I don't think that such a command is really useful as you probably want files from more than one directory (and probably exclude some files from these directories). I think it would be much better to write a cookbook in the documentation explaining how to take advantage of the new map generator instead (see symfony/symfony-docs#1134).\n",
            "Can we close this PR then?\n",
            "I'm -1 for adding this to the core. It does not add much value and why add a special response for JSON and not other formats?\n",
            "Closing this PR in favor of a cookbook that explains how a developer can override the default Response class (this JSON class being a good example). see symfony/symfony-docs#1159\n",
            "because X509 authentication is not easy to get it right. Sending a JSON response is as simple as it can get:\n\n```\nnew Response(json_encode($data), 200, array('Content-Type' => 'application/json'));\n```\n",
            "merged!\n",
            "This should probably be done on the 2.0 branch. Also, I think we need to check if the panel is actually available in the current profiler (if not, we won't be able to display it anyway). So, both checks are important.\n",
            "related to #2552\n",
            "Symfony now knows about all the HTTP status codes as defined by the IANA Hypertext Transfer Protocol (HTTP) Status Code Registry (http://www.iana.org/assignments/http-status-codes/). That should be sufficient.\n",
            "master would be better.\n",
            "The Symfony bridges provide integration between a third-party library and Symfony components. IIUC, this PR is only about Doctrine and as such it is not in the scope of the bridge. It should be done  somewhere  in the Doctrine namespace (what about common for instance?).\n",
            "I've removed this branch as the good one is drak/session_refactor.\n",
            "I think we need it to also work on namespace before merging. Is it possible?\n",
            "This code won't work if you use abbreviations instead of the full namespace or command name.\n",
            "I have cherry-pick 3 but 4 is not needed as the file does not exist in 2.0\n",
            "This is a hack. In your case, you should override the default `WebTestCase` class.\n",
            "For me, adding a pre-processor will never be an option.\n",
            "Q1: That's why I've duplicated the logic in the first place.\nQ2: Removing a hack by another hack is never a good solution.\nQ3: Yes and it would be the first time we need a pre-processor and I don't want to down this route.\nQ4: hehe, some teasing ;)\n",
            "Let's reiterate what I've already said: pre-processing is not an option.\n",
            "This looks like AOP to me. If we want to go down this route, I'd prefer to have a solid AOP implementation instead. Actually, I have an idea on how to solve this issue differently (with the added benefit that it will also be useful for the Drupal guys). I will try to work on it soon and report my work here.\n",
            "Closing this PR as AOP is not an option until we have an AOP component (if ever).\n",
            "cherry-picked.\n",
            "The mapping algorithm is fragile and it breaks easily. @bschussek: any idea on how we can make it more reliable (without generating all the possible paths which would make everything really slow for bigger forms)?\n",
            "The parameters is required because this is what you have as an input. So if you don't have any, you must explicitly say so by passing an empty array.\n",
            "@beberlei: ping\n",
            "@beberlei: Can you review this PR?\n",
            "@beberlei: is it mergeable?\n",
            "Can someone create a ticket for this so that we can close this PR? Thanks.\n",
            "The goal of the client is to simulate a request under the same configuration as the real one.\n",
            "Exceptions are rendered and so you can test it properly. Can you give me a simple example where this behavior is not desirable?\n",
            "Closing this PR because #3230 has been closed in the meantime.\n",
            "This should be done on the master branch.\n",
            "just because this is not a bug fix.\n",
            "I also think that this is quite important to have  something  in core. How can we move forward?\n",
            "For what is worth at this point, I'm in favor of option 1.\n",
            "In HttpCache, we have some code that tries to avoid the dogpile effect (https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php#L497)\n",
            "I have asked @vicb to lead this effort. This will probably land into Symfony 2.2.\n",
            "Closing as there are 4 opened PR on this topic. I would prefer that we first discuss the interface and what we want before starting coding. I suggest that this discussion happens on the Symfony dev mailing-list. Also, we need to discuss what to do with the current discussion on the FIG group mailing-list.\n",
            "https://groups.google.com/forum/#!topic/symfony-devs/EJr6XhawJTE\n",
            "duplicate of #2096\n",
            "Why not doing that in the 2.0 branch instead?\n",
            "I don't think this is a good idea to change the default value but the documentation should definitely be changed to reflect the correct default value (https://github.com/symfony/symfony-docs/issues/1312).\n",
            "I've cherry-picked your commit in the 2.0 branch. Thanks.\n",
            "I would suggest to do that in master.\n",
            "-1. Why would we want to add such a feature as you can do it easily in your code?\n",
            "The `vendors.php` script in the Symfony repository is only there to ease running the Symfony test suite. You should not use it for anything else.\n",
            "You should add some unit tests.\n",
            "It does not merge cleanly.\n",
            "merged, thanks. Don't forget to update the CHANGELOG and the UPGRADE file as well. I've done the former here: 172300e0ded\n",
            "closed by #4723\n",
            "I would prefer to not break BC if possible.\n",
            "I've reverted the merge.\n",
            "Any news?\n",
            "This PR should be reopen on `symfony/MonoloBundle` as this bundle is now independent of Symfony core.\n",
            "This PR should be done on master.\nOK for the format proposed by @vicb \n",
            "You forgot the dependency on config? Is it on purpose\n",
            "@bschussek: Can you confirm that this PR is better than the approach in #1951?\n",
            "This is a micro-optimization and it does not the same thing. In you patch, if the string is empty, it will produce a warning, not in the current code.\n",
            "What about removing the if condition altogether?\n",
            "Merged, thanks... and no, this is not a bot ;)\n",
            "This fix should be done on the 2.0 branch.\n\n`InvalidArgumentException` seems more appropriate to me.\n",
            "Looks like this PR should have been done for the 2.0 branch.\n",
            "Can you add a note in the CHANGELOG to explain the change and the potential BC break?\n",
            "I agree with the the other commenters, that does not belong to the core and can easily be done in a bundle.\n",
            "Can you rebase this PR on the 2.0 branch as this is a bug fix? Thanks.\n",
            "Closing this PR for the reasons explained by @canni\n",
            "I've cherry-picked the second commit.\n",
            "see 253a8ff016\n",
            "Can you close this PR and open a new one on the 2.0 branch as this bug also exists in the 2.0 branch? Thanks.\n",
            "closes in favor of #3035\n",
            "see #2421 for the original PR that changed the behavior.\n\n@stloyd: Can you have a look at this side-effect?\n",
            "@stloyd: I' m about to revert #2421. Have you had time to look into this?\n",
            "I've just pushed some more fixes to make the behavior more consistent (see c9690e0).\n",
            "@vicb: Can you explain it here as I want to merge this PR as soon as possible?\n",
            "closes in favor of #3035\n",
            "I haven't had a look at the code, but this is a PR for master, not for 2.0 as it introduces something  new .\n",
            "This should be done on the 2.0 branch.\n",
            "Can you make the same PR but for the 2.0 branch? Thanks.\n",
            "ping @Seldaek \n",
            "@ericclemmons: I'm not sure I understand your recommendation. You send a PR on 2.0 (and mark it as BC) but at the end of the message, you say that it would be better to merge it into master. If so, can you close this PR and open a new one on master? Thanks.\n",
            "I've made the proper fix in Twig directly: https://github.com/fabpot/Twig/commit/670d5d710065b8035b1c7343f99567fe15237691\n",
            "Can you make a PR on 2.0 for translation 41 and another one with the others? Thanks.\n",
            "What does it fix?\n",
            "ping @beberlei \n",
            "@lsmith77: We don't have the Rails problem thanks to Twig as the order of execution is the right one by default (the layout is executed first); it means that we can have the flush feature without any change to how the core works. As @stof mentioned, we are using `display`, not `render`, so we are streaming your templates for byte one.\n",
            "@Seldaek: yes, I meant ESI with the PHP reverse proxy.\n",
            "@Seldaek: I have `flush()` support for Twig on my todo-list. As you mentioned, It should be trivial to implement.\n",
            "@fzaninotto: What do you mean?\n\nWith Twig, your layout is defined with blocks ( holes ). These blocks are overridden by child templates, but evaluated as they are encountered in the layout. So, everything works as expected.\n\nAs noted in the commit message, this does not work with PHP templates for the problems mentioned in the Rails post (as the order of execution is not the right one -- the child template is first evaluated and then the layout).\n",
            "@Seldaek: I've just added a `flush` tag in Twig 1.5: https://github.com/fabpot/Twig/commit/1d6dfad4f55c721ec7b6e674ef225b8442bce896\n",
            "duplicate of #2797\n",
            "`ProcessBuilder` does that already: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Process/ProcessBuilder.php#L106\n",
            "The dumper is not meant to be extendable. The example you give is a feature that is not yet supported but will be in 2.1.\n",
            "It's not a bug fix as existing code that extend these classes will now fail.\n",
            "@stof: right, I've read too fast. It's ok for constructors.\n",
            "@stloyd: Can you close this PR and open a new one to clean things up? Thanks.\n",
            "The doc specifies PHP 3.5 in two places: `contributing/code/patches.rst` and `contributing/code/tests.rst`. So, we should make these changes in 2.0. Doing it in master is fine, but you must also send a PR to update the requirements in the doc.\n",
            "@stloyd: sorry for the confusion but my comment said the opposite of what I had in mind. So let me say it again: These changes can NOT be made in the 2.0 branch as PHP 3.5 is explicitly mentioned in the docs. However, we can bump the PHPUnit requirement to 3.5, but ONLY for 2.1 (master branch). Can you rebase your doc PR to master? and rebase your 2 PRs here to master as well. Sorry for the confusion again.\n",
            "@drak: correct\n",
            "It should work without your patch as the `widget` option is define in the default options. Can you tell us more about when it occurs. Do you have a type that `extends DateType`?\n",
            "Can you report this issue on the Admingenerated bundle as the code in Symfony is definitely right?\n",
            "I still have the exact same errors as before.\n",
            "Problem was the functional test bundle cache.\n",
            "Actually, the problem is that both 2.0 and master share the same cache for functional tests. This has been fixed here: f03692a507e15\n",
            "Tests do not pass: \n\n```\nphpunit src/Symfony/Bundle/FrameworkBundle/Tests/Functional/SessionTest.php\nPHPUnit 3.6.4 by Sebastian Bergmann.\n\nConfiguration read from phpunit.xml.dist\n\nEEEEEE\n\nTime: 0 seconds, Memory: 5.75Mb\n\nThere were 6 errors:\n\n1) Symfony\\Bundle\\FrameworkBundle\\Tests\\Functional\\SessionTest::testWelcome with data set #0 ('config.yml', true)\nClass Symfony\\Component\\Config\\Resource\\FileResource has no unserializer\n\nsrc/Symfony/Component/Config/ConfigCache.php:73\nsrc/Symfony/Component/HttpKernel/Kernel.php:544\nsrc/Symfony/Component/HttpKernel/Kernel.php:127\nsrc/Symfony/Bundle/FrameworkBundle/Test/WebTestCase.php:39\nsrc/Symfony/Bundle/FrameworkBundle/Tests/Functional/SessionTest.php:26\n\n2) Symfony\\Bundle\\FrameworkBundle\\Tests\\Functional\\SessionTest::testWelcome with data set #1 ('config.yml', false)\nClass Symfony\\Component\\Config\\Resource\\FileResource has no unserializer\n\nsrc/Symfony/Component/Config/ConfigCache.php:73\nsrc/Symfony/Component/HttpKernel/Kernel.php:544\nsrc/Symfony/Component/HttpKernel/Kernel.php:127\nsrc/Symfony/Bundle/FrameworkBundle/Test/WebTestCase.php:39\nsrc/Symfony/Bundle/FrameworkBundle/Tests/Functional/SessionTest.php:26\n\n3) Symfony\\Bundle\\FrameworkBundle\\Tests\\Functional\\SessionTest::testFlash with data set #0 ('config.yml', true)\nClass Symfony\\Component\\Config\\Resource\\FileResource has no unserializer\n\nsrc/Symfony/Component/Config/ConfigCache.php:73\nsrc/Symfony/Component/HttpKernel/Kernel.php:544\nsrc/Symfony/Component/HttpKernel/Kernel.php:127\nsrc/Symfony/Bundle/FrameworkBundle/Test/WebTestCase.php:39\nsrc/Symfony/Bundle/FrameworkBundle/Tests/Functional/SessionTest.php:59\n\n4) Symfony\\Bundle\\FrameworkBundle\\Tests\\Functional\\SessionTest::testFlash with data set #1 ('config.yml', false)\nClass Symfony\\Component\\Config\\Resource\\FileResource has no unserializer\n\nsrc/Symfony/Component/Config/ConfigCache.php:73\nsrc/Symfony/Component/HttpKernel/Kernel.php:544\nsrc/Symfony/Component/HttpKernel/Kernel.php:127\nsrc/Symfony/Bundle/FrameworkBundle/Test/WebTestCase.php:39\nsrc/Symfony/Bundle/FrameworkBundle/Tests/Functional/SessionTest.php:59\n\n5) Symfony\\Bundle\\FrameworkBundle\\Tests\\Functional\\SessionTest::testTwoClients with data set #0 ('config.yml', true)\nClass Symfony\\Component\\Config\\Resource\\FileResource has no unserializer\n\nsrc/Symfony/Component/Config/ConfigCache.php:73\nsrc/Symfony/Component/HttpKernel/Kernel.php:544\nsrc/Symfony/Component/HttpKernel/Kernel.php:127\nsrc/Symfony/Bundle/FrameworkBundle/Test/WebTestCase.php:39\nsrc/Symfony/Bundle/FrameworkBundle/Tests/Functional/SessionTest.php:84\n\n6) Symfony\\Bundle\\FrameworkBundle\\Tests\\Functional\\SessionTest::testTwoClients with data set #1 ('config.yml', false)\nClass Symfony\\Component\\Config\\Resource\\FileResource has no unserializer\n\nsrc/Symfony/Component/Config/ConfigCache.php:73\nsrc/Symfony/Component/HttpKernel/Kernel.php:544\nsrc/Symfony/Component/HttpKernel/Kernel.php:127\nsrc/Symfony/Bundle/FrameworkBundle/Test/WebTestCase.php:39\nsrc/Symfony/Bundle/FrameworkBundle/Tests/Functional/SessionTest.php:84\n```\n",
            "Tests do not pass for me (even after upgrading the Doctrine deps to their latest versions):\n\n```\nThere was 1 error:\n\n1) Symfony\\Bundle\\DoctrineBundle\\Tests\\ContainerTest::testContainer\nArgument 1 passed to Doctrine\\DBAL\\Logging\\LoggerChain::addLogger() must implement interface Doctrine\\DBAL\\Logging\\SQLLogger, instance of Doctrine\\Dbal\\Logging\\DebugStack given\n\nvendor/doctrine-dbal/lib/Doctrine/DBAL/Logging/LoggerChain.php:39\nsrc/Symfony/Component/DependencyInjection/ContainerBuilder.php:777\nsrc/Symfony/Component/DependencyInjection/ContainerBuilder.php:349\nsrc/Symfony/Bundle/DoctrineBundle/Tests/ContainerTest.php:22\n```\n",
            "actually, the test pass when I run the `ContainerTest.php` file alone, but fail when I'm running the whole test suite.\n",
            "This was a case problem: see 7d36304b940 for the fix\n",
            "@stloyd: this has nothing to do with Windows. The problem existed on both Mac and Linux too.\n",
            "Can you remove TwigBundle dependency as you are not using it anywhere? Also you should probably do this PR on the 2.0 branch.\n",
            "@hason: Can you make this PR on the master branch as this is a new feature? Thanks.\n",
            "This has been done this way as the `DigestData` class is kind of a  private  class. So, I'm not sure we want to move it to a proper file.\n",
            "@lunetics: I will have a look at it.\n",
            "backporting is actually more complex than I expected.\n",
            "As I said, backporting is a lot of work. I think we can close this now that 2.1 is out.\n",
            "@stof: agreed. Just exclude your IDE files in your global git configuration.\n",
            "We are using spaces for indentation in Symfony2 and that won't change.\n",
            "@RapotOR: I've just merge 2.0 into master and I've resolved the conflicts. You can have a look just to be sure I've not messed up with your code during the conflict resolution.\n",
            "After discussing this topic during the IRC meeting today, it has been decided that if we were to support something like this, it should be based on HInclude. Furthermore, support in the core only makes sense if it is integrated into the current render tag. If not, a cookbook entry might be enough.\n",
            "closing this PR in favor of #2903\n",
            "@schmittjoh: Can you have a look at this PR?\n",
            "Can you squash your commit before I merge your PR? Thanks.\n",
            "Can you close this PR an open a new one on the 2.0 branch (as this is a bug fix). Thanks.\n",
            "fixed by #2846\n",
            "Can you close this PR and open a new one based on the 2.0 branch? Thanks.\n",
            "As this is a bug fix, you should close this PR and open a new one based on the 2.0 branch. Thanks.\n",
            "As this is a bug fix, can you close this PR an rebase it on the 2.0 branch? Thanks.\n",
            "As I said, we don't want to take care of that as the profiler is mainly a development tool (meaning that you can just start over with a fresh database when upgrading your version of Symfony).\n",
            "After merging this PR, the toolbar is not displayed anymore for me.\n",
            "Based on the feedback, I have reverted this PR and made the `Controller::getUser()` method implementation similar to the one in `GlobalVariables::getUser()` (see eef8a3c51). So, in a controller or in a template, the developer has an easy access to the user object.\n",
            "revert is here: a78437bba9\n",
            "#2902 introduced a ProcessBuilder class that does the fix  properly .\n",
            "@Burgov: I'm -1 as well. Adding a note about this in the ''contributing  doc would be awesome.\n",
            "@stof: What about doing this fix in the 2.0 branch?\n",
            "Closing this PR for all the reasons mentioned by @stof and @Seldaek \n",
            "This is correct. Can you close this PR and open a new one on the 2.0 branch? Thanks.\n",
            "As far as I remember, this is needed as PHP can still send Notice or Warnings.\n",
            "There was a good reason for keeping the `@` (don't remember it though).\n",
            "What about doing that in the 2.0 branch?\n",
            "Why have you not replaced the exception in the dumped container code? I don't see any drawback.\n",
            "Adding +1 just to be sure to not break anything is clearly something we won't do. What is the benefit of doing that anyway?\n",
            "I'm +1 for adding the number to avoid problems but I'm -1 on the optimization side of things as it won't optimize anything.\n",
            "@drak: why is `list` not explicit? It is in fact as explicit as the more verbose syntax you propose.\n",
            "@stof: I have talked with him about it and I'm just waiting for an updated version of this PR before reviewing it more thoroughly.\n",
            "The more I think about it, the more I think it does not belong to the core. As @lsmith77 mentioned, it can be done via a bundle and some JS.\n",
            "implemented as part of the referenced PRs\n",
            "@pulse00: The correct patch is to add a use statement for `Doctrine\\ORM\\EntityManager` at the beginning of the file.\n",
            "@pulse00: Can you squash your two commits into one? Thanks.\n",
            "Can you close this PR and open a new one for the 2.0 branch? Thanks.\n",
            "As of 2.1, you can have a look at why/how routes are matched in the profiler. It should help with such issues.\n",
            "Tests do not pass for me.\n\nFurthermore, let's reuse what we already have in the framework (see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpKernel.php#L187 -- yes you can just copy/paster the existing code).\n",
            "What's the status of this PR?\n",
            "merged\n",
            "It should be done on the 2.0 branch too, no?\n",
            "@armetiz: You must add some unit tests that cover your use case.\n\n@lsmith77, @Seladek: any thoughts?\n",
            "Any news on this PR? If @armetiz is not able to add tests, can someone help him here? (ping @Seldaek, @lsmith77)\n",
            "Yaml files with PHP is not supported anymore. The code is just there to maintain BC.\n",
            "There is little benefit in doing so and it can potentially break BC. So, let's keep it like it is now.\n",
            "I have removed all unused use statements from the code.\n",
            "I have removed all unused use statements from the code.\n",
            "@gustavopiltcher: Can you update this PR?\n",
            "Closing in favor of #2764\n",
            "merged in 2.0 (tests added 7b1dda84b93).\n",
            "Should be done on the 2.0 branch, no?\n",
            "merged by cherry-picking on 2.0.\n",
            "As this is a bug fix, can you reopen a new PR based on the 2.0 branch? Thanks.\n",
            "The new files are missing the LICENSE header. As far as I can see, @schmittjoh fork has a different license from the Symfony one. This needs to be clarified before I can merge this PR.\n",
            "@canni: Can you update the CHANGELOG file (to reference the changes and the BC breaks -- like the move of KernelEvents for instance).\n",
            "@canni: What about keeping a `SecurityEvents` class in the `Http` namespace that just extends the new one. That way, we don't break BC.\n",
            "@hlecorche: Thanks for your work on this issue. Can you update the unit tests to be sure that this case is covered? If you're not comfortable with this, just tell me and I will do it myself\n",
            "@hlecorche: perfect. I've added the test here: 38f64a1bd9f9a49\n",
            "The\n[equals](http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Object.html#equals%28java.lang.Object%29) method name comes from Java where it compares values for equality. This method is defined in the [Object](http://download.oracle.com/javase/1.4.2/docs/api/java/lang/Object.html) class, from which all other classes are derived. So, it is automatically defined for every Java class and as such, it is a very well-know method in the Java world.\n\nIn Java, the equals method should compare state, not identity. For instance, if you have a class that has a single string property, two different objects might be considered equals if the string is the same for the two objects even if the objects themselves are different (different memory location). It can be seen as a subtle difference, but actually it's not, and that's exactly the problem we face here (as explained above by @stof and in the PHPDoc of the method itself).\n\nAs most PHP developers do not have this background (myself included as the two previous paragraphs are mostly a summary of what I've just read from blog posts I have found on the Web), we cannot assume that they all know about the semantic of this method, which has, of course, no special meaning in PHP.\n\nSo, IMO, we need to rename the equals method for two reasons:\n- Change the method name to something more specific to make its goal/intention very clear and avoid confusion (this is important as ambiguity is not an option when it comes to Security);\n- Make the method name more specific to avoid collisions with other existing classes. This one is also very important because one of the best feature of the Security component is that it does not force you to use any specific User class; just implement `UserInterface` and you are all set. So, `UserInterface` should be useable on any class, and so its methods should be as unique and as specific as possible.\n\nFor me, the renaming of the equals method is mandatory and the only question at this point is what is the best method name for it.\n",
            "@stof: any news on this PR?\n",
            "Can you squash your commits and rebase this PR on the 2.0 branch? Thanks.\n",
            "I don't want to support more than one CI. Let's concentrate on Jenkins.\n",
            "merged\n",
            "`RadioType` suffers from the same problem, no?\n",
            "You should also add a configurable option under the `security` entry to ease the configurability.\n",
            "It should probably be done on the 2.0 branch, no?\n",
            "As @stof already mentioned, I don't want to add a dependency on Phing.\n",
            "As this is a bug fix, can you close this PR and open a new one on the 2.0 branch? Thanks.\n",
            "As this is a bug fix, can you close this PR and open a new one on the 2.0 branch?\n\nAlso, can you add some unit tests?\n\nThanks.\n",
            "Are you sure this is needed. AFAICS, the class is set here https://github.com/symfony/symfony/blob/c90806807b07f89015e31bf316963def9293cbe5/src/Symfony/Component/Validator/GraphWalker.php#L71\n\nSo, a unit test that proves the bug is definitely needed.\n",
            "I've merged your change in the 2.0 branch and I've also added some unit tests for it.\n",
            "Can you rebase the PR to 2.0?\n",
            "Does not look good to me as there is my last commit from master here.\n",
            "I have a similar fix locally but I have not merged it yet as it looks a bit dirty (but I've not a better idea yet). Anyway, your PR is better than mine as you've added some unit tests already.\n",
            "@stof: You are right. I've  changed the implementation with the one I had done. I'm still not satisfied with it but at least, it does not break the API.\n",
            "I have reverted the other PR.\n",
            " makes the event objects reusable : The event dispatcher system is not designed to be able to reuse event objects as they have some state.\n\n allows listeners to perform tasks according to the event name : A listener already know the event name as it explicitly listen on specific names.\n\nFurthermore, adding a setter is quite  dangerous  as it means that the name can be changed after the dispatching of the event, which won't have the expected behavior.\n\nSo, I don't see when and why it would be useful. Am I missing something?\n",
            "@drak: cherry-picked.\n",
            "Can you add some unit tests for this case?\n",
            "Also, as this is a bug fix, it should be done on the 2.0 branch. To do that, you will have to close this PR and create a new one. Thanks.\n",
            "Instead of creating yet another block, what about modifying the `field_widget` to not render the `value` attribute if the value is empty? Also, the PHP template must be fixed too.\n",
            "I like the move of flash management outside of the session, even if we keep the current API.\n\nBut as @lsmith77 suggested in the other PR about the same topic, we first need to define the use cases for flashes (and which problems it solve?) to be sure that we are all on the same page. As of today, I still don't understand why you would want to store more than one thing for a given flash name.\n\nI think everybody has the same technical definition: A flash is something that is stored to be displayed on the very next request and must be removed automatically after that.\n\nBut beside this technical definition, when is it useful?\n\nHere is my intended use case (actually it's not mine, it's the one envisioned by Ruby on Rails which AFAIK introduced this concept some years ago.): forms submission.\n\nWhen a user submit a form, you want to display the result of the submission on the next page (this is needed because you redirect to a GET after a POST instead of displaying the result directly in response to the form submission). And that's it. Nothing more. For this use case, you don't need an array as you only have one result to display and you can only submit one form per request.\n",
            "@everzet: Can you rebase this PR on 2.0? Thanks.\n",
            "This is indeed not supported. In fact, supporting this feature si more complex than that as the PHP dumper must also be changed. I'm closing this PR as it cannot be added to 2.0. What is your use case?\n",
            "fixed in dbba79651ab. My fix is different as your patch would break for English notation (`1,200.50` for instance).\n",
            "I don't see a need for namespaces as the keys can be anything you want, including a path-like name.\n",
            "I totally understand the namespace concept as it is available in symfony1. And from my experience, this was rarely used. That's why support for it has not been added in Symfony2.\n",
            "AFAIU, this is a bug fix. If this is the case, can you create a new PR but based on the 2.0 branch? ping @Seldaek @lsmith77\n",
            "@beberlei: Is it still WIP?\n",
            "You should send a PR for the 2.0 branch only.\n",
            "I think it cannot belong to the core as relying on the uploading file extension is not very reliable and can be fake really easily by the user. So, it's not really validation, but just a convention that you can use in your code to determine the mimetype. But again, I would not rely on it for anything serious.\n",
            "Can you add some unit tests and rebase your PR on the 2.0 branch (as this is a bug fix)? Thanks.\n",
            "@beberlei: Can you comment on this PR?\n",
            "@RapotOR: Can you squash your commits before I merge this PR? Thanks.\n",
            "As this is a bug fix, can you open a new PR on the 2.0 branch? Also, if you can add some unit tests, that would be even better. Thanks.\n",
            "Can you remove the second commit? Also, as this is a bug fix, can you close this PR and create a new one based on the 2.0 branch? Thanks.\n",
            "As this is a bug fix, you have to close this PR and open a new based on the 2.0 branch. Thanks.\n",
            "Dependency management is something that must not be done at runtime. Composer is the right layer for doing these checks.\n",
            "Can you close this PR and open a new one for the 2.0 branch instead? Thanks.\n",
            "This should probably be done on the 2.0 branch. Also, what about testing the version of PHP?\n",
            "@beberlei, unfortunately, you have to close this PR and create a new one on 2.0.\n",
            "AFAIK, the bug has already been fixed here: http://svn.php.net/viewvc?view=revision&revision=318366\n\nSo, it will be in the next 5.3 version and in 5.4.\n",
            "Can you rebase it on the 2.0 branch?\n",
            "This is already done by the InputArgument class. There was a bug for arguments, but it has been fixed now. See 6f05544. The difference with your patch is that conflicts are raised when the command is actually used, which IMO is fine as it should be detected when you are actually working on a command.\n",
            "The template parent can already by any valid Twig expression, so there is no need for a new tag:\n\n   {% extends 'some_prefix' ~ a_variable %}\n\nBeside that, we also already have the extension mechanism described by @dpb587, where you can override an existing template, just by creating a new one in the main `app/` directory.\n",
            "Looks good to me. Is it possible to do that on the 2.0 branch instead of master?\n",
            "A new PR on 2.0 is the only way on Github.\n",
            "As this is a bug fix, can you close this PR and reopen a new one on the 2.0 branch? Thanks.\n",
            "ping @beberlei\n",
            "@stof: Before merging, you must also add information about how to upgrade in the CHANGELOG-2.1.md file.\n",
            "I've just refactored the code a bit to make the `checkAuthentication` method use the `hide_user_not_found` setting (which is `true` by default): a7296e7c84\n",
            "fixed now: https://github.com/symfony/symfony/compare/46e5fa5c87ae1b996632d801fbae4ad56deebc99...c98c2ef5fbf3d5dba6611a295516aaaa7dba5ea8\n",
            "@dbu: Can you rebase this PR on the 2.0 branch as the `count` issue should be fixed there. Also, as your PR for the docs has been merged, you can now change the URL. Thanks.\n",
            "@stealth35: The PO is what people will use for their translations. They will then dump it to MO. So, we need both PO and MO loaders and dumpers.\n",
            "I've just had a look at this PR code again and I see that the unit tests are pretty slim. Is it possible to add some tests for the mo loader?\n",
            "The tests do not pass for me:\n\n```\nThere was 1 error:\n\n1) Symfony\\Tests\\Component\\Translation\\Loader\\MoFileLoaderTest::testLoadDoesNothingIfEmpty\nInvalidArgumentException: MO stream content has an invalid format.\n\n/Users/fabien/work/symfony/git/symfony/src/Symfony/Component/Translation/Loader/MoFileLoader.php:79\n/Users/fabien/work/symfony/git/symfony/src/Symfony/Component/Translation/Loader/MoFileLoader.php:46\n/Users/fabien/work/symfony/git/symfony/tests/Symfony/Tests/Component/Translation/Loader/MoFileLoaderTest.php:34\n\n--\n\n\nThere was 1 failure:\n\n1) Symfony\\Tests\\Component\\Translation\\Loader\\PoFileLoaderTest::testLoad\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    'foo' => 'bar'\n )\n\n/Users/fabien/work/symfony/git/symfony/tests/Symfony/Tests/Component/Translation/Loader/PoFileLoaderTest.php:25\n```\n",
            "Indeed, this should have been done on 2.0. I will see if I can do it myself.\n",
            "It's really up to the developer to make sure that the placeholder value is a string.\n",
            "A requirement is a regular expression, so it's always a string. For default values, you can put whatever you want, but it makes sense to use strings as incoming variable from patterns will always be strings anyway.\n",
            "fixed here: #3426c83\n",
            "should be done on the 2.0 branch.\n",
            "@lmcd: any news on this PR?\n",
            "@dlsniper Some limitations are also listed on the original PR #1456\n",
            "Closing in favor of #6391\n",
            "@tigranazatyan: I will do it.\n",
            "What is the error when it fails?\n",
            "This is a fix that needs to be done on the 2.0 branch. Can you close this PR and open a new one on 2.0? thanks\n",
            "I don't see any argument against this change, but that's probably something you can abuse easily. So, it should be used with caution.\n",
            "I should have noted that if a session is present, it is used; so the behavior is backward compatible.\n",
            "@stloyd: Ticket #2240 will be closed when this PR is merged as it fixes reporter concerns. What do you mean by  headers ? In this patch, the locale is stored in the URL, and there is no need to store it anywhere else.\n",
            "@stof: see #2333 instead.\n",
            "This has already been discussed a lot and it has always been rejected. We have added a note in the front controller about how to change the umask there and the doc explains how to do it the right way.\n",
            "I think we need to forbid non local stream.\n",
            "Because this is a security issue and I don't see any valid use case where you would have to support external URLs.\n",
            "yes, it probably makes sense.\n",
            "The target is still symfony/master and not symfony/2.0.\n",
            "As this is a bug fix, can you close this PR and create a new one based on the 2.0 branch? Thanks.\n",
            "47 is already taken for  This value should be the user current password . Should be 48.\n",
            "I've juste tested and it works for me:\n\n``` php\nuse Symfony\\Component\\Yaml\\Yaml;\n\n$a = <<<EOF\nimports:\n    - { resource: parameters.ini }\n    - { resource: security.yml }\nEOF;\n\n$b = Yaml::parse($a);\n\nprint Yaml::dump($b);\n```\n",
            "What does not work? I've tried this and it works for me:\n\n``` php\n\n<?php\n\nrequire_once __DIR__.'/autoload.php.dist';\n\nuse Symfony\\Component\\Yaml\\Yaml;\n\n$a = <<<EOF\nimports:\n    - { resource: parameters.ini }\n    - { resource: security.yml }\nEOF;\n\nprint Yaml::dump(Yaml::parse(Yaml::dump(Yaml::parse($a), 3)), 2);\n```\n",
            "That's not something we need to add in the core as it's not something you need that often (see #2280 for a discussion about creating a central repo for such contributions).\n",
            "I'm closing this PR as the patch is very limited. We should first discuss the feature and then see how we can implement it globally on the validator component. Can you open a ticket?\n",
            "Can you also add some unit tests?\n",
            "@robotron2000 nevermind then, I will add some myself.\n",
            "done here: d429594afbdd2b74cf292c775582fe51cc22a317\n",
            "Closing this PR as it looks weird.\n",
            "merged\n",
            "We should not need this as the default is 0 when using PHP on the CLI: http://fr2.php.net/manual/en/info.configuration.php#ini.max-execution-time\n\n When running PHP from the command line the default setting is 0. \n",
            "Anyway, it should be safe to add it but then, why not just set it to `0` instead of `3600`?\n",
            "This change is wrong (you have misplaced the phpdoc).\n",
            "@stof: I'm doing it right now, but I'm not sure about Twig as we don't have a composer.json for versions before 1.3.\n",
            "Is this PR related to #1850?\n",
            "This PR breaks some unit tests. Closing.\n",
            "The patch is probably not what we want to do. First, I suppose that you are not creating the propertyPath by hand. If that is the case, we need to understand why the property path does not exist. Then, even if we might want to check the existence of the index, if it does not exist, we should probably throw an exception instead of just ignoring the problem.\n",
            "My point is that it should never happen under normal circumstances.\n",
            "As this is a bug, can you close this PR and open a new for the 2.0 branch? thanks.\n",
            "As this is a bug fix, can you close this PR and open a new one for the 2.0 branch? thanks.\n",
            "Can you add some unit tests for this new feature?\n",
            "`filter` sounds good to me.\n",
            "This has already been discussed some time ago and it has been rejected. We only need one way to access things and getting rid of the public properties was rejected. Let's see what other thinks.\n",
            "ok, closing this PR as @lsmith77 remembers the same decision I had in mind.\n",
            "thanks. Can you create another PR for the other messages on the master branch? Apparently, you have removed them from your repository.\n",
            "Can you make a pull request just for id 41 on the 2.0 branch? thanks.\n",
            "I quite agree with @lsmith77. I don't think it belongs to the core.\n",
            "The Request and Response classes are data objects. As such, the logic inside should be kept to the minimum needed to expose their data.\n",
            "@pulzarraider: Can you make a pull request (on the 2.0 branch) just with the bug fixes and remove the code for similar languages? Thanks.\n",
            "I'm closing this PR as the so-called bug fixes are not bug fixes. If the languages in the header does not contain 'fr', then we should not make it the best language, even if 'fr_FR' is in the list (also because this is already done in the `Accept-Language` header sent by browsers).\n",
            "AFAIU, this is a BC break and the current unit tests do not pass anymore after the patch (which is of course expected).\n",
            "Closing this PR as this is not BC.\n",
            "Can you some unit tests?\n",
            "For the reason explained by @stof, the current behavior must be kept.\n",
            "As this is a bug fix, can you base your PR on the 2.0 branch? Can you also squash your commits? Thanks.\n",
            "@geezmo: yes, just close this PR and open a new one. thanks.\n",
            "What about doing this change in the 2.0 branch?\n",
            "I worked on the same topic some weeks ago and the problem is much more complex that this current PR. I will try to work on it soon and submit another proposal.\n",
            "Closing this PR as it won't be merged.\n",
            "During today's IRC meeting, it has been decided to not add this feature as we don't have that many use cases and it adds some non-trivial complexity. I've added a doc ticket to update documentation about how to solve the issue described here (symfony/symfony-docs#752).\n",
            "I think this is a  bug , no? If this is the case, then we need to fix the 2.0 branch.\n",
            "ok, I'm going to merge this into master.\n\n@jmikola: Can you submit documentation for the new way?\n",
            "AFAIK, the current behavior is correct. The new value overrides the existing value.\n\nI've checked and both PyYAML in Python and the default YAML lib in Ruby do the same:\n\n```\n$ irb\n>> o = '''\nfoo: 2\nfoo: 3\n'''\n=>  \\nfoo: 2\\nfoo: 3\\n \n>> YAML::load(o)\n=> { foo =>3}\n\n\n$ python\nPython 2.7.1 (r271:86832, Jun 25 2011, 05:09:01) \n[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin\nType  help ,  copyright ,  credits  or  license  for more information.\n>>> from yaml import load, dump\n>>> document=   \n... foo: 2\n... foo: 3\n...    \n>>> load(document)\n{'foo': 3}\n```\n",
            "Clear your cache and the error will go away.\n",
            "nevermind, there is indeed a problem :(\n",
            "fixed here: 9703aac26\n",
            "That means that the fallback locale is the same at the main locale. Can you check?\n",
            "This should be fixed now.\n",
            "@chrisben Have you tried with the 2.0 branch. It should be fixed there.\n",
            "merged\n",
            "Any benefits over using the PDO session storage?\n",
            "ok, looks good to me. Can you add some documentation about its usage (like the possible keys for options)? Is it possible to add some tests too?\n",
            "Can you base your PR on the 2.0 branch as this is a bug fix? thanks.\n",
            "cherry-picked.\n",
            "`passthru` is part of PHP core. It's probably disabled via `http://fr.php.net/manual/en/ini.core.php#ini.disable-functions`. As said by @stealth35, we cannot check every single function for existence.\n",
            "Looks good to me. Can you add some unit tests for this new behavior? Thanks.\n",
            "@jc-: I have added some tests and merged this PR.\n",
            "Which problem does it solve?\n\nWhat's the difference between:\n\n```\nblog_show:\n    resources: [validpattern.yml, validpattern.2.yml]\n```\n\nand:\n\n```\nblog_show_1:\n    resources: validpattern.yml\n\nblog_show_2:\n    resources: validpattern.2.yml\n```\n",
            "You can define a relation by adding a special option:\n\n```\nblog_show_1:\n    resources: validpattern.yml\n    options: { version: 1.0 }\n\nblog_show_2:\n    resources: validpattern.2.yml\n    options: { version: 2.0 }\n```\n\nRouting is about parsing the URL and converting it into parameters. Your request is about something different, which does not belong to the Routing.\n",
            "Now that a resource can have some `requirements` and some `defaults` attached to it, I'm sure how this patch can be still relevant. Do we assume that all resources have the same requirements and defaults?\n",
            "@lsmith77: any update on this PR? Is it still needed for you?\n",
            "@lsmith77: any news in this PR?\n",
            "Closing this PR as I don't think that we can assume that all resources can share the same requirements and defaults.\n",
            "I'm not sure this is something useful to have in the core. First, it does not work on Windows. And the, on Linux, you already have all the tools at your disposal to do the same.\n\nDo you have a specific use case in mind?\n",
            "So, this PR is only half of the story. Do you have code to support what you describe (dependencies between commands)?\n",
            "I think this addition might be really useful if we provide a `MetaCommand` class on which you register the commands and their dependencies (command A must be run after command B) and then it takes care of the execution of all commands. What do you think?\n",
            "ok, after trying to use it (see @marcw comment above), it can potentially introduce many unsolvable problems as the forked process inherit from the parent. That's not a feature we will add to the core if this is the case, so this need to be extensively tested.\n",
            "I'm closing this PR as I have again encountered a problem with it yesterday.\n",
            "Is it possible to add a dumper like we have for all other loaders?\n",
            "@stealth35: Can you remove the `@api` tags? We will review what is included into the public API later on. thanks.\n",
            "@stealth35: sounds good to me.\n",
            "That was on my radar too. Can you do the same for the 2.0 branch?\n",
            "@snc: is it ready for a merge?\n",
            "The `lifetime` is used to cleanup the database (see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php#L136). So, it should probably be implemented for MongoDB as well (but it can probably be done in another PR).\n",
            "Do you any use case for that?\n",
            "@Gregwar is right, this patch cannot be merged.\n",
            "I'm -1 on adding this method. You can already access it via the headers and as this information should not be relied upon, I don't think we need to make it easier to access it.\n",
            "I've made a much simpler change in e5a23dbd. This has been committed in the 2.0 branch.\n",
            "What if you call isEmpty, then change the form, and finally call isEmpty again?\n",
            "So, after your last change, it does not simplify anything, quite the contrary.\n",
            "Can you close this PR and open a new one based on the 2.0 branch as this is a bug fix? thanks.\n",
            "Can you base your PR on symfony/2.0? \n",
            "As this is a bug fix, can you base your PR on the symfony/2.0 branch? Thanks.\n",
            "@jmikola: nevermind\n",
            "it has been merged in 2.0.\n",
            "@stealth35: Sorry about that, can you remove your last commit as your code was perfectly fine before?\n",
            "@stealth35: nervermind, I've done it myself.\n",
            "The bug should be fixed but the behavior should be kept as it is today. Here is my proposal as a fix: https://github.com/symfony/symfony/compare/2.0...charset-fix\n",
            "So, the only viable option is to break BC and add a `getCharset` method on the app kernel. This is what I've done in #4716.\n",
            "Looks good to me. Can you squash your commit before I merge? thanks.\n",
            "If several processes try to warmup the cache at the same time, this fix won't help you that much. The proper way in this case is to use the `cache:clear` command that takes care of that for you.\n",
            "Can you add some tests and base your PR on the symfony/2.0 branch as this is a bug fix? Thanks.\n",
            "The `autoloader.php.dist` file is only for the core team to run the unit tests (and so we need all the deps installed). If you want to start a new project, you should download the Symfony standard edition.\n",
            "@schmittjoh: I have reverted this change and made the proper fix in the FileResource class instead (see bede4206).\n",
            "AFAIK, defining two routes with the same name is not supported.\n",
            "I have added a note in the documentation about the required prefix for routes defined in a bundle (that you want to share of course): symfony/symfony-docs@1deee7b\n",
            "Looks good to me. Can you squash your commits before I merge? Thanks.\n",
            "I think it would be event more interesting to do the same change in the Symfony Standard Edition.\n",
            "e63a840\n",
            "It's far from useless. Can you imagine that I've added something for nothing? see 8fc9547d for the commit where it was introduced.\n",
            "As this is a bug fix for 2.0, you must submit a PR based on the `symfony/2.0` branch. Thanks.\n",
            "The toolbar.css is only used in the profiler where the toolbar is at the top of the screen and does not hide anything. Also, on the website, it is displayed after the content, so it should not hide anything either. Last, but not the least, the goal of the toolbar is to be able to have a quick look at the information, and if the opacity is too low, that won't work.\n",
            "As this file is generated, I don't accept any PR. Update the information on your Github profile and it will be fixed automatically.\n",
            "I'm going to merge the 2.0 branch on a regular basis, but not every time there is a change.\n",
            "Can you split the PR into two PRs as AFAICS the two commits are not related. Also, I don't understand why this change is related to #1962. Your first commit is about the `ChoiceType`, whereas the ticket is about the `TextType`.\n",
            "duplicates #1173\n",
            "As @schmittjoh said, it is done on purpose to avoid having to instantiate the class to register the subscribers. If like me, you don't like subscribers and the way they are managed, just use listeners. They work well and does not suffer from this  issue .\n",
            "This cannot be merged without proper unit tests.\n",
            "There is actually a test for that:\n\nhttps://github.com/symfony/symfony/blob/master/tests/Symfony/Tests/Component/Validator/Constraints/AssertTypeValidatorTest.php#L34\n",
            "I'm not too happy with this kind of addition. If we go down this route, it means that we will add many such conditions in the framework. That's not the PHP philosophy.\n",
            "That's right but I would prefer that the PR comes from someone of the Doctrine core team like @beberlei or @jwage.\n",
            "or at least, they can perhaps acknowledge this PR.\n",
            "I've fixed the output buffering behavior: c31c512466\n",
            "The `ignore_errors` is set to `true` in non-debug mode so that you don't have an exception page rendered in the middle of another page; in which case, the output will be badly broken.\n\n@krmcbride Does my previous fix cover your concerns?\n",
            "Sorry to come back so late. Here is my thoughts on this issue:\n\nEverybody agrees that it never makes sense to ignore errors in the development environment.\n\nBut in the production environment, if we set `ignore_errors` to `off` by default, when there is a problem with the sub-request, the whole page outputs an error when `standalone` is `false` (which is fine) but if it is `true` (ESI support is enabled), then the error is displayed inside the main page (which is never what you want as the error page is not optimized for such a situation).\n\nSo, here is what I propose for the _new_ default value of `ignore_errors`:\n\n```\n* `false` when debug is `on` or when debug is `off` and standalone is `off`\n* `true`  when debug is `on` and standalone is `on`\n```\n\nWhat do you think?\n",
            "This autoloader is only for running Symfony unit tests.\n",
            "The email validator is just for the `addr-spec` part of the specification (3.4.1), not about validating the `address`. As specified in section 3.4, the `address` is in fact richer than just what is implemented here.\n",
            "It looks like a bug fix, so this PR should be closed and a new one based on the 2.0 branch should be open. @beberlei: are you fine with this patch?\n",
            "Even if the current patch is not the best solution, we should probably apply it to fix the problem and think about a better solution afterwards. Does it sound good for everybody?\n",
            "Can you add unit tests? Thank.\n",
            "merged\n",
            "This is indeed really useful. I've used it to manage coupon codes on Symfony Live. So, this is an example where there is no JS and the input is not hidden. The user enters its coupon code and it is automatically converted to the right Coupon object in the main Order object.\n",
            "@lsmith77: Why is it a BC break?\n",
            "After the merge, I've made several changes:\n- I have added support for the replacements in requirements\n- the replacement is only done if the parameter exists\n- I have added a bunch of unit tests\n",
            "Removing logs is not like removing the cache as you might want to archive the logs, rotate them, ... So, I don't think we need such a command and anyway, the  feature  should come from Monolog (if we think it is useful at all), and Symfony should then just wrap the feature in a command.\n",
            "Apart form my comments, I don't really like this patch. I understand the problem but it makes things look really complicated.\n",
            "Keep it open.\n",
            "Patch looks good now (thanks @stof for the careful review). Before merging it though, I need that you squash all commits into one and that you base your PR on the symfony/2.0 branch as this is a bug fix. Thanks.\n",
            "@Seldaek: The trans tags only accept plain texts (see https://github.com/symfony/symfony/commit/286c45733e47d20d0b40e8454492a5fb66d80875); and plain texts are never escaped by Twig. So, this is consistent.\n\nSo, to sum up: as the translation tags are just wrappers around static block of texts, which are never escaped by Twig, automatic output escaping is never applied; but the automatic output escaping rules apply to the output of filters.\n",
            "I'm not sure we want to add it by default. As noted in the phpdoc,  Should be used when Oracle Server default enviroment does not match the Doctrine requirements. , which suggests that this is not always the case. Also, the constructor takes an argument, which is not implemented here.\n",
            "@johnwards: I'm on holidays for another two weeks and I try to work as little as possible ;)\n",
            "Sorry for the late response (I thought the problem would have taken some time to resolve, but actually it was quite simple).\n\nBasically, the documentation was out of date. It's fixed now (symfony/symfony-docs@e6027eb). By the way, it's much simpler to use a crawler to simulate form submission (I've also added a tip about that in the doc).\n\nI've also added an exception when you do what you've tried as the error was silently ignored (symfony/symfony@1c7694ff).\n",
            "I have just checked in a browser and the Symfony2 implementation is actually the right one.\n\nTry this in a browser:\n\n```\n<form action='#' method= post >\n    <input name= foo  disabled= disabled  value= foo  />\n    <input name= bar  value= bar  />\n\n    <input type= submit  />\n</form>\n\n<?php\n\nprint_r($_POST);\n\n// output: Array ( [bar] => bar ) when the form is submitted\n```\n\nAnd here is the discussion about it in the HTML4 spec: http://www.w3.org/TR/html4/interact/forms.html#h-17.12:\n\n In this example, the INPUT element is disabled. Therefore, it cannot receive user input nor will its value be submitted with the form. \n\nAnd the same is tru for HTML5: http://www.w3.org/TR/html5/association-of-controls-and-forms.html#constructing-form-data-set\n",
            "Indeed, I didn't get your issue right. So, basically, all fields should be in the form, but the disabled field values should not be submitted (that makes sense).\n\nI've prepared a fix in this patch: https://github.com/symfony/symfony/compare/master...domcrawler-disabled-fields which is in the symfony/domcrawler-disabled-fields branch for now as I don't know if we can make this change in 2.0 or if we need to put it in 2.1.\n",
            "@cordoval: I've reworked the branch so that your commit will appear in the history: https://github.com/symfony/symfony/compare/master...domcrawler-disabled-fields.\n",
            "Now, `getErrors(true)` returns all errors from children but then, there is no way to know where the error comes from, right? That sounds of quite limited use, don't you think?\n",
            "The id belongs to the view, so it looks wrong to me. It would probably be better to use the validation property path. But then again, I'm not even sure we want to support this.\n",
            "To avoid getting all keys, even the ones without errors, something like this should be better:\n\n``` php\n<?php\n     public function getErrors($deep = false)\n     {\n          $errors = $this->errors;\n\n          if ($deep && $this->hasChildren()) {\n               foreach ($this->children as $key => $child) {\n                   if ($err = $child->getErrors(true)) {\n                       $errors[$key] = $err;\n                   }\n               }\n          }\n\n          return $errors;\n     }\n```\n\nThe only remaining problem is that keys can be integer (for local errors) or string (for sub-form errors).\n",
            "Getting all errors is only useful for debugging purpose. In that case, what about adding a method for this use case and return a string to help debugging form problems? I have implemented such a method here:\n\nhttps://github.com/symfony/symfony/compare/master...form-errors\n\nWhat do you think?\n",
            "merged\n",
            "The convention is to initialize default values in the constructors and not when declaring the properties. As @Seldaek said, you should call the parent constructor.\n",
            "I will merge it in 2.1 as some people might rely on it.\n",
            "@willdurand: Can you rebase your PR on symfony/2.0 as this is a bug fix? Thanks.\n",
            "@pylebecq: As you have removed the symfony repo on your Github account, I'm not able to merge this PR anymore.\n",
            "@Seldaek: The merge button does not work either:  Your merge target has changed since we cached the merge commit - try the merge again \n\n@pylebecq: a new PR would be the best thing to do. Thanks.\n",
            "Closing this PR as Seldaek's patch has been updated.\n",
            "Can you create a branch where you branch @Seldaek work and then modify it further?\n",
            "Can you update your Github profile too?\n",
            "That's definitely something that needs to be part of the Twig-extension repo.\n",
            "The patch looks good to me as well but I'm always a bit worried about changes like this one. The good news is that 2.1 is not going to be released anytime soon, so that gives us plenty of time to test it and revert it in case of too many side effects.\n",
            "After playing with the patch a bit, there are indeed several problems. One of them is that all segments participating in a no-separator pattern must have a requirement. If one of them does not have a requirement, the compiled route regex is wrong. I don't see any way to fix it easily though.\n\nSo, I'm closing this PR.\n\nThere is a workaround when you need this feature: declare just one segment and split it yourself afterward in the controller or in a listener.\n",
            "@Seldaek: I've tried to fix some of these problems but after adding code for 15 minutes, I realized that I had to add even more code for a feature that's not really needed most of the time (and there is a workaround). The problem is not about being able to break things but that Symfony generates a wrong compiled route, which is a bit different.\n\nOne of the difficulty is that when you are when you are working on the first segment, you don't know that it is part of a non-separated segment list.\n",
            "https://github.com/symfony/symfony/commit/853935fbabce601f38a477161fafcd535e1fe23d\n",
            "This file is automatically created by using information from Github.\n",
            "I've just updated the file with the latest info from Github.\n",
            "This correction has already been done months ago.\n",
            "Can you add tests?\n",
            "The separator is part of the view and as such should be configured there. By the way, it's already possible:\n\n```\n{{ form_widget(form.choice, {'separator': '--sep--'}) }}\n```\n",
            "which I think was a mistake.\n",
            "The same change should be made to the PHP template. \n",
            "I forgot to ask you to add some unit tests too. Thanks.\n",
            "@craue: yes, you should squash your commits into one and use `--force` when you push (the PR will automatically be updated accordingly).\n",
            "Can you add unit tests?\n",
            "fixed here: a57a4aff\n",
            "Tests do not pass for me:\n\n```\nThere were 2 errors:\n\n1) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\LocalizedRoutesAsPathTest::testLoginLogoutProcedure with data set #0 ('en')\nInvalidArgumentException: The current node list is empty.\n\n.../src/Symfony/Component/DomCrawler/Crawler.php:604\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/LocalizedRoutesAsPathTest.php:16\n\n2) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\LocalizedRoutesAsPathTest::testLoginLogoutProcedure with data set #1 ('de')\nInvalidArgumentException: The current node list is empty.\n\n.../src/Symfony/Component/DomCrawler/Crawler.php:604\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/LocalizedRoutesAsPathTest.php:16\n\n--\n\n\nThere were 4 failures:\n\n1) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\LocalizedRoutesAsPathTest::testAccessRestrictedResource with data set #0 ('en')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-http://localhost/en/login\n+http://localhost/login\n\n.../src/Symfony/Bundle/Securitybundle/Tests/Functional/WebTestCase.php:22\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/LocalizedRoutesAsPathTest.php:38\n\n2) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\LocalizedRoutesAsPathTest::testAccessRestrictedResource with data set #1 ('de')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-http://localhost/de/login\n+http://localhost/login\n\n.../src/Symfony/Bundle/Securitybundle/Tests/Functional/WebTestCase.php:22\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/LocalizedRoutesAsPathTest.php:38\n\n3) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\LocalizedRoutesAsPathTest::testAccessRestrictedResourceWithForward with data set #0 ('en')\nHTTP/1.0 302 Found\nCache-Control:  no-cache\nContent-Length: 299\nContent-Type:   text/html; charset=UTF-8\nDate:           Wed, 20 Jul 2011 05:36:27 GMT\nLocation:       http://localhost/login\nSet-Cookie: PHPSESSID=11c9c6a7e7620e13bddef223a5ba46d9; path=/; domain=\n\n<html>\n    <head>\n        <meta http-equiv= Content-Type  content= text/html; charset=utf-8  />\n        <meta http-equiv= refresh  content= 1;url=http://localhost/login  />\n    </head>\n    <body>\n        Redirecting to <a href= http://localhost/login >http://localhost/login</a>.\n    </body>\n</html>\nFailed asserting that <integer:0> matches expected <integer:1>.\n\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/LocalizedRoutesAsPathTest.php:50\n\n4) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\LocalizedRoutesAsPathTest::testAccessRestrictedResourceWithForward with data set #1 ('de')\nHTTP/1.0 302 Found\nCache-Control:  no-cache\nContent-Length: 299\nContent-Type:   text/html; charset=UTF-8\nDate:           Wed, 20 Jul 2011 05:36:28 GMT\nLocation:       http://localhost/login\nSet-Cookie: PHPSESSID=2bbe63786a088471ade3717917f4ba4f; path=/; domain=\n\n<html>\n    <head>\n        <meta http-equiv= Content-Type  content= text/html; charset=utf-8  />\n        <meta http-equiv= refresh  content= 1;url=http://localhost/login  />\n    </head>\n    <body>\n        Redirecting to <a href= http://localhost/login >http://localhost/login</a>.\n    </body>\n</html>\nFailed asserting that <integer:0> matches expected <integer:1>.\n\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/LocalizedRoutesAsPathTest.php:50\n```\n",
            "That does not make any difference for me. For instance, in `LocalizedRoutesAsPathTest::testLoginLogoutProcedure()`, the first request to `'/'.$locale.'/login'` returns the following Response:\n\n```\n<html>\n    <head>\n        <meta http-equiv= Content-Type  content= text/html; charset=utf-8  />\n        <meta http-equiv= refresh  content= 1;url=http://localhost/login  />\n    </head>\n    <body>\n        Redirecting to <a href= http://localhost/login >http://localhost/login</a>.\n    </body>\n</html>\n```\n",
            "Yes, I've just checked and the directory does not exist.\n",
            "What about doing something like this in your class:\n\n```\nclass FooRouter extends Router\n{\n    private $container;\n\n    public function __construct(ContainerInterface $container, $resource, array $options = array(), RequestContext $context = null, array $defaults = array())\n    {\n        $this->container = $container;\n\n        parent::__construct($container, $resource, $options, $context, $defaults);\n    }\n```\n",
            "I think that you can always find a use case to change the visibility of a property to `protected`. So, if we start reverting them one by one, let's do it for all (we already quite a few tickets on this topic).\n",
            "@lsmith77: in that case, this PR should be closed.\n",
            "This method is only useful when doing a redirect to the same app. If you are using another host, then the base URL is probably different anyway.\n",
            "Why do you need a complier pass to override the router?\n",
            "as @Seldeak said, why do that for the router and not all services?\n",
            "We already have such a case with translator and translator.real. I will review the existing services to see where it makes sense to implement the same strategy.\n",
            "@schmittjoh?\n",
            "I have used `stream_get_line` especially because it does not return `false` on eof. This is needed when you pass your own stream for unit tests.\n",
            "When applying your patch to the generator bundle (and revert to use `fgets`), I get  RuntimeException: Aborted  exceptions.\n",
            "@lenar: not for me. I have many 'Aborted' exception on my Mac.\n",
            "And I have the exact same errors on Linux:\n\n```\nThere were 7 errors:\n\n1) Sensio\\Bundle\\GeneratorBundle\\Tests\\Command\\GenerateBundleCommandTest::testInteractiveCommand with data set #0 (array('/tmp'), 'Foo/BarBundle\n', array('Foo\\\\BarBundle', 'FooBarBundle', '/tmp/', 'annotation', false))\nRuntimeException: Aborted\n\n.../Symfony/Component/Console/Helper/DialogHelper.php:40\n.../Symfony/Component/Console/Helper/DialogHelper.php:97\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Command/GenerateBundleCommand.php:165\n.../Symfony/Component/Console/Command/Command.php:205\n.../Symfony/Component/Console/Tester/CommandTester.php:66\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Tests/Command/GenerateBundleCommandTest.php:39\n\n2) Sensio\\Bundle\\GeneratorBundle\\Tests\\Command\\GenerateBundleCommandTest::testInteractiveCommand with data set #1 (array('/tmp'), 'Foo/BarBundle\nBarBundle\nfoo\nyml\nn', array('Foo\\\\BarBundle', 'BarBundle', 'foo/', 'yml', false))\nRuntimeException: Aborted\n\n.../Symfony/Component/Console/Helper/DialogHelper.php:40\n.../Symfony/Component/Console/Helper/DialogHelper.php:62\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Command/GenerateBundleCommand.php:83\n.../Symfony/Component/Console/Command/Command.php:214\n.../Symfony/Component/Console/Tester/CommandTester.php:66\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Tests/Command/GenerateBundleCommandTest.php:39\n\n3) Sensio\\Bundle\\GeneratorBundle\\Tests\\Command\\GenerateBundleCommandTest::testInteractiveCommand with data set #2 (array('/tmp', 'yml', 'BarBundle', true), 'Foo/BarBundle\n', array('Foo\\\\BarBundle', 'BarBundle', '/tmp/', 'yml', true))\nRuntimeException: Aborted\n\n.../Symfony/Component/Console/Helper/DialogHelper.php:40\n.../Symfony/Component/Console/Helper/DialogHelper.php:97\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Command/GenerateBundleCommand.php:165\n.../Symfony/Component/Console/Command/Command.php:205\n.../Symfony/Component/Console/Tester/CommandTester.php:66\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Tests/Command/GenerateBundleCommandTest.php:39\n\n4) Sensio\\Bundle\\GeneratorBundle\\Tests\\Command\\GenerateDoctrineEntityCommandTest::testInteractiveCommand with data set #0 (array(), 'AcmeBlogBundle:Blog/Post\n', array('Blog\\\\Post', 'annotation', array()))\nRuntimeException: Aborted\n\n.../Symfony/Component/Console/Helper/DialogHelper.php:40\n.../Symfony/Component/Console/Helper/DialogHelper.php:97\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Command/GenerateDoctrineEntityCommand.php:145\n.../Symfony/Component/Console/Command/Command.php:205\n.../Symfony/Component/Console/Tester/CommandTester.php:66\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Tests/Command/GenerateDoctrineEntityCommandTest.php:39\n\n5) Sensio\\Bundle\\GeneratorBundle\\Tests\\Command\\GenerateDoctrineEntityCommandTest::testInteractiveCommand with data set #1 (array('AcmeBlogBundle:Blog/Post'), '', array('Blog\\\\Post', 'annotation', array()))\nRuntimeException: Aborted\n\n.../Symfony/Component/Console/Helper/DialogHelper.php:40\n.../Symfony/Component/Console/Helper/DialogHelper.php:97\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Command/GenerateDoctrineEntityCommand.php:121\n.../Symfony/Component/Console/Command/Command.php:205\n.../Symfony/Component/Console/Tester/CommandTester.php:66\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Tests/Command/GenerateDoctrineEntityCommandTest.php:39\n\n6) Sensio\\Bundle\\GeneratorBundle\\Tests\\Command\\GenerateDoctrineEntityCommandTest::testInteractiveCommand with data set #2 (array(), 'AcmeBlogBundle:Blog/Post\nyml\n\n', array('Blog\\\\Post', 'yml', array()))\nRuntimeException: Aborted\n\n.../Symfony/Component/Console/Helper/DialogHelper.php:40\n.../Symfony/Component/Console/Helper/DialogHelper.php:62\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Command/GenerateDoctrineEntityCommand.php:153\n.../Symfony/Component/Console/Command/Command.php:205\n.../Symfony/Component/Console/Tester/CommandTester.php:66\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Tests/Command/GenerateDoctrineEntityCommandTest.php:39\n\n7) Sensio\\Bundle\\GeneratorBundle\\Tests\\Command\\GenerateDoctrineEntityCommandTest::testInteractiveCommand with data set #3 (array(), 'AcmeBlogBundle:Blog/Post\nyml\ntitle\n\n255\ndescription\ntext\n\n', array('Blog\\\\Post', 'yml', array(array('title', 'string', 255), array('description', 'text'))))\nRuntimeException: Aborted\n\n.../Symfony/Component/Console/Helper/DialogHelper.php:40\n.../Symfony/Component/Console/Helper/DialogHelper.php:62\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Command/GenerateDoctrineEntityCommand.php:153\n.../Symfony/Component/Console/Command/Command.php:205\n.../Symfony/Component/Console/Tester/CommandTester.php:66\n.../symfony-standard/vendor/bundles/Sensio/Bundle/GeneratorBundle/Tests/Command/GenerateDoctrineEntityCommandTest.php:39\n```\n",
            "@lenar: ah, sorry about that. Then, can you provide a fix for all the other tests too? Thanks a lot.\n",
            "@lenar: looks good to me. Can you create a PR?\n",
            "I think we don't want to go down this route. A defined parameter should stay available. Also, I think this kind of optimization is pointless. If you want to really optimize the memory used by your application, you should also remove all the phpdoc on all your classes. You will see a big improvement as PHP needs to keep them for introspection. So, i'm in favor of closing the corresponding ticket as a  won't fix  too.\n",
            "@stof: Bridges will be added with the RC5 release.\n",
            "That's really a hack I don't want to support. A prefix IS something that is adding to ALL included routes.\n",
            "This kind of changes have already been refused.\n",
            "@schmittjoh: Problem is that the behavior highly depends on the platform and PHP version.\n",
            "@schmittjoh: By the way, we have added a bunch of tests recently (https://github.com/symfony/symfony/commit/2d29a82412702faf513710ce45f90346c4f08d27#tests/Symfony/Tests/Component/Process). Things are also  unstable  because the behavior depends on the amount of input, the amount of output, and when things happens. That means that it is also impossible to cover all possible cases reliably.\n",
            "For reference, I've tried something more radical some time ago here: https://github.com/symfony/symfony/pull/369.\n",
            "The first commit is not about making the message translatable, but to make it customizable (as the message is used for very different purposes depending on the Type).\n",
            "The  This value is not valid  string should be added to the translation files too.\n",
            "duplicate of #1386\n",
            "That breaks (at least) the Profiler search.\n",
            "http://twitpic.com/5oj0fo\n\nAnyway, I won't merge any change that is not strictly a bug fix.\n",
            "Allowing the removal of arguments or options break the command (as the execute method is probably using these options and arguments in some way).\n",
            "Here is my fix: https://github.com/symfony/symfony/commit/fa78e78f5f0a3e898324c5f587cf46ce5c2ecf75\n",
            "This patch does not do the same thing as before. It won't catch PHP warnings. Just run the test suite and you will see that your patch break the tests.\n",
            "What about:\n\n```\n<requirement key= path >.+</requirement>\n<requirement key= _format >[^.]+</requirement>\n```\n",
            "We can definitely make the format mandatory.\n",
            "fixed: https://github.com/symfony/symfony/commit/c85fd081c87e1ad6e6dd9e68c053183ffa351e4f\n",
            "My fix is slightly different to allow  normal  arrays to be dumped.\n\nhttps://github.com/symfony/symfony/commit/76a5816d609133c33f8f9085525f4afeed11a5aa\n",
            "It is already configurable via a translator.\n",
            "already merged.\n",
            "The `Content-Length` is automatically added by servers like Apache. Moreover, sometimes, you should not add it: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.4\n",
            "https://github.com/symfony/symfony/commit/e943fde2ef58b77ac9f3120e54ae8215f5992df9\n",
            "Why not replacing `if (!$options['choices'] && !$options['choice_list']) {` by `if (!isset($options['choices']) && !isset($options['choice_list'])) {`?\n",
            "I don't understand how it can work with a date type. If one of `year`, `month`, or `day` is not required, then how can the date be valid? For the time type, if the `minute` is required, but not the `hour`, what does it mean?\n",
            "any feedback on my concern?\n",
            "Closing this PR as the feature lets the developer creates fields that can never be valid.\n",
            "Can you also update the PHP templates?\n",
            "Please, do not add more options. Prefix with `sf` is actually a good idea but people will argue that this is not a good idea because it gives too much information about the technology used to create the website (that's one of the things that came up pretty often in symfony1).\n",
            "It cannot be configurable as it would potentially break bundles that come with stylesheets.\n",
            "I've fixed the issue a bit differently to reuse the existing variables. That makes the code more robust in case we change the conventions.\n\nhttps://github.com/symfony/symfony/commit/6793c2096759b70539d5ec96d3e7d0fcdf2f8b91\n",
            "What's the status of this PR? This should be sorted out today or tomorrow to be included in 2.0.\n",
            "@stof: On which element would you add this `data-prototype` attribute?\n",
            "Just for the record, here is the list of previous PRs on this topic: #739, #1188, and #1315\n",
            "@blauwers: It does solve the namespace collision as the `data-prototype` attribute is set on the collection tag (`div` or `table`). And it has a unique `id` which you can use to get the prototype.\n",
            "I'm closing this PR in favor of #1724\n",
            "The validator just knows the keys. You fix introduces the notion of the value, which should not be known by the validator. The choice guesser just cannot work and should probably be removed altogether. I will think a bit more about it but I don't see any workaround.\n",
            "Closing this PR as a duplicate for #1482.\n",
            "@stof: I've made another commit for that just after this merge: https://github.com/symfony/symfony/commit/5da21d1b468f6d310ced3af8646d14e3e561f1e8\n",
            "You are right. Validation/Constraint only cares about the key, but the form needs both the keys and the values. So, the only proper  fix  I can think of is the removal of the guesser for choices. I will think about it a bit more but the proposed fix is a hack.\n",
            "I've removed the guesser for the Choice constraint as it cannot work:\n\nhttps://github.com/symfony/symfony/commit/47da6cf39eeda97ec46e899704115b222e66a151\n",
            "That's not something I'm comfortable with now that we are in RC for all the reasons described by @Seldaek and some more.\n",
            "`cache-warmer` setting has been removed and is not used anymore.\n",
            "sure\n",
            "That's needed to be able to add things after the named elements.\n",
            "merged but I have replaced the exception with a simple `\\LogicException` as this exception can only occur when the developer makes a mistake. I've also updated the unit tests accordingly:\n\nhttps://github.com/symfony/symfony/commit/beecac3adb474d14cdfd37296a4ec32e07b127cd\n",
            "I'm -1 because the behavior depends on whether you have an extension or not. First, you create a services.xml file and everything work fine. Then, you create an extension for a specific need, and boom, the services.xml file is not loaded anymore.\n\nI would prefer to automatically add a default extension in the generator instead that by default loads a services.xxx file that is empty by default.\n",
            "@lsmith77: Apparently, you don't like the current solution because if the developer forgets to remove the include after he created the extension, it does not work. And now, I can use the same argument as your about this situation.\n\nMy proposal  fixes  this problem and as an added bonus, you already have the skeleton of a working extension class. Don't see any disadvantages.\n",
            "https://github.com/sensio/SensioGeneratorBundle/pull/35 has been merged.\n",
            "@stloyd: Can you removed the  noise  from this commit (CS changes and phpdoc changes)? As we are in RCs now, I just want to merge code changes.\n",
            "@lsmith77, @stof: This patch is about something different. It provides autocomplete inside commands.\n",
            "@lmcd: The right command is `git rebase -i HEAD~4`\n",
            "@lmcd: I've rebased this PR here: #2364. You can fork the symfony/console-autocomplete branch to continue working on it.\n",
            "Let's discuss this new feature for 2.1.\n",
            "Tests do not pass.\n",
            "I have reverted changes from `src/Symfony/Component/Security/Http/Firewall/BasicAuthenticationListener.php`\n",
            "Thanks for your help. It helped me found the problem quickly and that's much appreciated.\n\nhttps://github.com/symfony/symfony/commit/600cd415e6f413e983a71cc3bcd6241b0105a7ee\n",
            "Status texts can be retrieved via the $statusTexts public property and I don't se any usage for changing the default status text. So, the lack of these methods have been done on purpose.\n",
            "I forgot to mention that you can already change the status text via the setStatusCode method.\n",
            "fixed by #1439\n",
            "OutputFormatter is just one implementation of the interface, so the constant cannot be defined in the interface.\n",
            "I'm not fond of this change. YAML 1.1 supported more than just true/false for Booleans as well, and it was removed in 1.2. It leads to confusion.\n",
            "I've restricted the valid values for True/False:\n\nhttps://github.com/symfony/symfony/commit/482492625dea0752fef82650138dffe237e90966\n",
            "Does it make https://github.com/symfony/symfony/pull/1365 obsolete?\n",
            "These tests pass on my Linux box but fail on my Mac.\n",
            "Actually, on the Mac, the tests behave correctly but the exit code is `-1` instead of `0`.\n",
            "Thanks a lot for the info @lenar. You are right, the process is still running, and that's why we get a -1. I've just pushed a patch that makes everything work on my Mac:\n\nhttps://github.com/symfony/symfony/commit/100a8dc105c89973ce7985881cfb17eb5e924c00\n\nI will test on Windows now.\n",
            "When do you have such a warning? It should never occurs as the `getParent` method is called by the `FormFactory` which passes all options (included the default values where `expanded` is defined anyway).\n",
            "@vicb: The doc must also be updated for Twig as the block names and the way to override block is now different.\n",
            "I fail to see the usage. Can you explain how and why it would be used?\n",
            "I'm -1 on this PR.\n\nIf you want to be able to disable a route, just comment it. If you want to disable a set of routes, put them into one file and comment out the import rule in your routing config file.\n",
            "@lenar: if the code in this PR is yours (at least partly), I'm not going to merge it. @stloyd, can you clarify this issue with @lenar? Thanks.\n",
            "No matter who the code belongs to, Git allows us to keep track of all contributors. So, we need to do our best to not loose any code ownership.\n",
            "phar support is complex as not everything in PHP supports it. This patch only solves one area where phar is not supported. So, we need a solution that makes the entire framework phar-compatible, which is far from easy (realpath for instance cannot be used anywhere). So, I'm closing this PR and let's revisit the global phar support for 2.1.\n",
            "@everzet: merged\n",
            "I don't know how to fix this problem. We had some back and forth about the mode; but I know that 'a' does not work for me on Mac OSX.\n",
            "reference: https://github.com/symfony/symfony/pull/919\n",
            "@arturosevilla: Can you test the latest master? I have tested on Linux and everything works fine with master. Thanks.\n",
            "I agree with @Seldaek here, also because the Request class already has many methods.\n",
            "@schmittjoh: This is impossible to merge as is. Can you split this PR into more logical PRs?\n",
            "Tests do not pass.\n",
            "@stloyd: Can you rebase to master?\n",
            "merged #1352 instead.\n",
            "Both files have been changed to 0755. This should be reverted to 0644.\n",
            "We are going to use Doctrine 2.1 with Symfony2.\n",
            "@stealth35: add chat? The testing of the version of ICU? Yes.\n",
            "don't forget to also update the `app/check.php` file.\n",
            "Changing the timezone does not change the date. So, you have a problem somewhere else in your code where you don't take the timezone into account.\n",
            "I see that the DateTime object is exactly the same. The string stored in the `date` element is different, but so is the `timezone`. So, all the DateTime objects references exactly the same date. That being said, I will apply the patch as we should not change the timezone of an  external  object.\n",
            "I've implemented your suggestions for Form templates here: https://github.com/symfony/symfony/commit/02f28b6e5e79bc810fa13e072bdaf7f2be21c4fa\n",
            "Your patch breaks the tests.\n",
            " Additionally, there exist several other types which inherit from choice (Country, Language, Locale, Date, DateTime, Time, Timezone) that do not currently support empty_value, shall I provide a PR for those as well? \n\nYes\n\n Separate issue, but concerning Date/DateTime (possibly others, haven't checked), you can pass widget type as single_text|text|choice, dependant on which some options are disregarded, leading to conditionals all over the class. Suggestion is to refactor these to different types, ie DateType -> DateChoiceType, DateSingleTextType, DateTextType, which extend common functionality of DateType as it is today. \n\nNo. We are about to release 2.0 final, so let's no do big refactorings at this point.\n",
            "I've fixed the problem in a different way: https://github.com/symfony/symfony/commit/52697ed3dfe0b973cc5a8d627550fa0937e6fa11\n",
            "The order should not matter. I'm going to remove the Blackhole plugin from Swiftmailer as it has side-effects. And if we were to add priorities, it should be done in Swiftmailer directly, no in Symfony.\n",
            "Some CS fixes on your PR:\n\nhttps://github.com/symfony/symfony/commit/5b142d581b2496df97146bd4644e94ef8eecfd8d\n",
            "Does it relate to #1319?\n",
            "I'll merge it. Can you update the UPDATE file?\n",
            "The templates are much better but I'm a bit concerned that we need to add the logic into the Form class directly. That looks quite ugly. If there is no other way, I will merge it.\n",
            "I've merged this PR even if I think we need to find a better way.\n",
            "@schmittjoh: problem is we now have another commit which has nothing to do with the first one ;)\n",
            "@schmittjoh: That's not about liking it or not. It's just that now, I need to review the second one before being able to merge the first one. About the ACL change, don't you think that it adds a slowdown for each request even if most of the time, the schema will have been created?\n",
            "Why was it closed?\n",
            "I think it's not a good idea to add many aliases as it the list of available commands becomes bigger and more confusing. I've mainly tweaked the aliases behavior to be able to isolate the generation commands.\n",
            "@stof is right. That's not something I want in the core. It will never be robust enough.\n",
            "@stof is right. That's not something I want in the core. It will never be robust enough.\n",
            "Anybody working on it? Again, comments from @schmittjoh have disappeared. That's weird.\n",
            "that breaks the tests.\n",
            "What if you have this:\n\n```\n_blog:\n    resource:  @AcmeDemoBundle/Resources/config/routing/BlogController.yml \n    prefix:   /blog\n\nlogin:\n    pattern:   /login\n    defaults:  { _controller: AcmeDemoBundle:Security:login }\n\n_blogger:\n    resource:  @AcmeDemoBundle/Resources/config/routing/BloggerController.yml \n    prefix:   /blogger\n```\n\nYou cannot send 404 early because the same `blog` prefix is used in two different places. I can see many things that will break with this patch. I'm pretty sure we can enhance the performance of the existing code but let's do that after 2.0.\n",
            "Can you add some more tests to ensure that everything works fine and that we won't have regressions later on? Thanks.\n",
            "First, thank you all for your hard work on this feature. As this is a quite large patch, I would rather split it up in more manageable chunks. First, I think we can work on the `Formatter` feature, which is a standalone feature. I think we need to rename it to `Dumper` as this is really equivalent to what we already have in some other component, so it will be more consistent (the `format` method should then be renamed to `dump`). Also, I think the `dump()` method should take a `MessageCatalogue` as an argument instead of an array. Can you create a new PR with just the Formatter part as a first step?\n",
            "I have instead removed the `extensions` setting altogethere as there is no point in having two different way to do the same thing. So, now, the only way to register a Twig extension is to tag it properly:\n\nhttps://github.com/symfony/symfony/commit/96045739b198b030ab159425ce19614fe2e0e665\n",
            "@bschaeffer: this just fixes a bug. You set headers via the header bag, where you can override the previous value or not (`HeaderBag::set()`).\n",
            "@mridgway Can you do the same for the vendors script in symfony/symfony-standard? Thanks.\n",
            "What's the problem with the current regex?\n",
            "Closing this PR as no regex will make everyone happy (we had the exact same discussion for symfony1). If you really want something that follows the RFC, you can use Swiftmailer class:\n\nhttps://github.com/swiftmailer/swiftmailer/blob/4.1/lib/classes/Swift/Mime/Grammar.php\nhttps://github.com/swiftmailer/swiftmailer/blob/4.1/lib/classes/Swift/Validate.php\n",
            "@michelsalib: If you are the original author, then you should do the PR yourself.\n",
            "You have plenty of time as this feature won't be included in 2.0 anyway. It will be considered for 2.1.\n",
            "You should submit a PR only when the code is finished.\n",
            "I don't think it makes sense to use a \\DateTime instance to represent a Time.\n",
            "Closing this PR as it's not mergeable as is.\n",
            "The current code performs better.\n",
            "This is not an HTTP header but a SERVER variable. I've double-checked and Apache sends it as it is now. If for a reason I don't understand, your server behave differently, you can override the default value.\n",
            "fixed\n",
            "Using the request is not that frequent. If we start adding this one, why not adding a getMailer() then?\n",
            "merged. As a side note, you can also inject it directly:\n\n```\nfunction indexAction(Request $request)\n```\n",
            "@henrikbjorn\n\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Controller/ControllerResolver.php#L108\n",
            "I'm less and less comfortable with the hardcoding of `{_locale}` everywhere. I know that we have already done that in a few places but now that we add this hack more, I think we need to think about a cleaner solution.\n",
            "ok, I will merge this PR as is as this is at least consistent with the way we are doing things at the moment and we will revisit the topic for 2.1.\n",
            "Looks like you have deleted your Symfony repository.\n",
            "Can you make another PR with just the PHP script? I will then run it before every commit so that we are sure that all the rules will be always applied. We will also be able to enhance your current script with more rules. You can probably name the script `check_cs` and put it under the root directory.\n",
            "I have instead added a tip in the form documentation: https://github.com/symfony/symfony-docs/commit/cc0468b2f683a0f9b2642fc00ba2735a519f7c3e\n",
            "fixed\n",
            "I've already discussed that with @weaverryan and I'm +1 for both.\n",
            "Two comments:\n- there is a comment that says `// It's important to specify the first day of the month here!` just before the line you have modified (I don't know/understand why)\n- The problem should not occur as the formatter timezone is explicitly changed to UTC before calling the `format()` method.\n",
            "This closes #1080\n",
            "Tests do not pass for me:\n\n```\n1) Symfony\\Tests\\Bridge\\Twig\\Extension\\FormExtensionTableLayoutTest::testCollection\nFailed asserting that \n\n/table\n    [\n        ./tr[./td/input[@type= text ][@value= a ]]\n        /following-sibling::tr[./td/input[@type= text ][@value= b ]]\n    ]\n    [count(./tr[./td/input])=2]\n    [@id= my&id ]\n    [@class= my&class ]\n\nmatches exactly once. Matches 0 times in \n\n<div id= my&amp;id  class= my&amp;class >\n<tr>\n<td><label for= name_0 >[trans]0[/trans]</label></td>\n<td><input type= text  id= name_0  name= name[0]  required= required  value= a ></td>\n</tr>\n<tr>\n<td><label for= name_1 >[trans]1[/trans]</label></td>\n<td><input type= text  id= name_1  name= name[1]  required= required  value= b ></td>\n</tr>\n</div>\n\n.../tests/Symfony/Tests/Component/Form/AbstractLayoutTest.php:75\n.../tests/Symfony/Tests/Component/Form/AbstractLayoutTest.php:91\n.../tests/Symfony/Tests/Component/Form/AbstractTableLayoutTest.php:159\n```\n",
            "@vicb: Using `renderBlock()` directly is really a  hack . So, let's patch Symfony with your proposal in the Gist.\n",
            "@vicb: will you work on this? No pressure but I want to release a new version on Monday.\n",
            "After merging #1295, two new tests do not pass:\n\n```\nThere were 2 failures:\n\n1) Symfony\\Bundle\\FrameworkBundle\\Tests\\Templating\\Helper\\FormHelperTest::testCollection\nFailed asserting that \n\n/div\n    [\n        ./div[./input[@type= text ][@value= a ]]\n        /following-sibling::div[./input[@type= text ][@value= b ]]\n    ]\n    [count(./div[./input])=2]\n    [@id= my&id ]\n    [@class= my&class ]\n\nmatches exactly once. Matches 0 times in \n\n\n\n.../Tests/Component/Form/AbstractLayoutTest.php:74\n.../Tests/Component/Form/AbstractLayoutTest.php:90\n.../Tests/Component/Form/AbstractDivLayoutTest.php:277\n\n2) Symfony\\Bundle\\FrameworkBundle\\Tests\\Templating\\Helper\\FormHelperTest::testCollectionRow\nFailed asserting that \n\n/div\n    [\n        ./input[@type= hidden ][@id= form__token ]\n        /following-sibling::div\n            [\n                ./label[not(@for)]\n                /following-sibling::div\n                    [\n                        ./div\n                            [\n                                ./label[@for= form_collection_0 ]\n                                /following-sibling::input[@type= text ][@value= a ]\n                            ]\n                        /following-sibling::div\n                            [\n                                ./label[@for= form_collection_1 ]\n                                /following-sibling::input[@type= text ][@value= b ]\n                            ]\n                    ]\n            ]\n    ]\n    [count(.//input)=3]\n    [@id= my&id ]\n    [@class= my&class ]\n\nmatches exactly once. Matches 0 times in \n\n<div class= my&amp;class  id= my&amp;id >\n                <input type= hidden  id= form__token  name= form[_token]  value=  >            <div>\n    <label>[trans]Collection[/trans]</label>\n        </div>\n                </div>\n\n.../Tests/Component/Form/AbstractLayoutTest.php:74\n.../Tests/Component/Form/AbstractLayoutTest.php:90\n.../Tests/Component/Form/AbstractDivLayoutTest.php:317\n```\n",
            "ok, there was a missing `echo` statement in the PHP template. This has been fixed.\n",
            "Closing this PR as #1221 is better\n",
            "The parameter bag is not part of the interface and I don't want to add it.\n",
            "Tests do not pass for me after applying this patch:\n\n```\n1) Symfony\\Tests\\Component\\Form\\Extension\\Core\\Type\\DateTypeTest::testSetData_differentTimezones\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-01.06.2010\n+02.06.2010\n```\n",
            "There is no value in such PRs.\n",
            "I didn't explained my point very well. It makes sense but only if you do it for all classes.\n",
            "We have such a feature in symfony1 and IIRC it does not work very well. One problem is when you use symlink for some bundles. Then, you should not use a relative symlink as there is a common path between the two.\n",
            "The use statements have no special order in Symfony.\n",
            "That works for CoreEvents but not for the other core events.\n",
            "```\n    return array(\n        FormEvents::PRE_SET_DATA => 'preSetData',\n        FormEvents::PRE_BIND => 'preBind',\n        FormEvents::BIND_NORM_DATA => 'onBindNormData',\n    );\n```\n\nBut the point is that I don't think it adds any value. Without defining the `method` attribute, the developer must  guess  the method name he needs to use. That adds code and documentation for no real added benefit.\n",
            "Closing this PR as the patch is too intrusive. The Symfony2 philosophy is to be as decoupled as possible. So, we won't add anything specific to support a special logger in the core beyond what is provided by Monolog. So, all FirePHP support should happen at the Monolog level.\n",
            "I'm refactoring this task a lot. The new one will be much clearer about what kind of inputs are accepted.\n",
            "Just for the record: I've just removed all usage of `\\Exception` in Symfony2 master:\n\nhttps://github.com/symfony/symfony/commit/6a7359389dbd08a4bbb7857530f3d179da5c8a21\n",
            "What's the status of this PR?\n",
            "Tests do not pass:\n\n```\nUncaught PHP Exception Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException:  No route found for  GET /unprotected_resource   at .../src/Symfony/Bundle/FrameworkBundle/Listener/RequestAttributeInitializingListener.php line 88\n.E\n\nTime: 2 seconds, Memory: 44.50Mb\n\nThere were 4 errors:\n\n1) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\FormLoginTest::testFormLogin\nInvalidArgumentException: The current node list is empty.\n\n.../src/Symfony/Component/DomCrawler/Crawler.php:604\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/FormLoginTest.php:14\n\n2) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\FormLoginTest::testFormLoginWithCustomTargetPath\nInvalidArgumentException: The current node list is empty.\n\n.../src/Symfony/Component/DomCrawler/Crawler.php:604\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/FormLoginTest.php:30\n\n3) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\FormLoginTest::testFormLoginRedirectsToProtectedResourceAfterLogin\nInvalidArgumentException: The current node list is empty.\n\n.../src/Symfony/Component/DomCrawler/Crawler.php:604\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/FormLoginTest.php:50\n\n4) Symfony\\Bundle\\SecurityBundle\\Tests\\Functional\\SecurityRoutingIntegrationTest::testRoutingErrorIsNotExposedForProtectedResourceWhenLoggedInWithInsufficientRights\nInvalidArgumentException: The current node list is empty.\n\n.../src/Symfony/Component/DomCrawler/Crawler.php:604\n.../src/Symfony/Bundle/SecurityBundle/Tests/Functional/SecurityRoutingIntegrationTest.php:27\n```\n",
            "I've just double-checked, and I don't see anything specific in my environment. Are you sure everything in the repo?\n",
            "That was done like this in symfony1, but it means that we need to potentially add many methods for no real added value. I like the simple approach we have in Symfony2: just use PHPUnit assertions and you have nothing specific to learn.\n",
            "mergeable?\n",
            "@lsmith77: can you rebase?\n",
            "Tests do not pass. Also, can you add some information about the changes in the UPDATE file? Thanks.\n",
            "As explained by @stof, the command is about runtime services. If you want to override a service, you should probably have a look at the original definition from the bundle where it is declared. Hopefully, we will have some documentation about how to override some key services at some point.\n",
            "@stof: the Doctrine bundle tests do not help that much. They are very fragile and are not really that useful. I think that the only good way to go for testing the Security extension is to add some functional tests.\n",
            "What do we do with this PR?\n",
            "@weaverryan: Can you extra the doc changes?\n",
            "EntityType should probably takes the Doctrine Registry instead of the EntityManager. I will see how I can make the switch (only problem is that the Registry depends on the Container).\n",
            "I've finished the refactoring and now all classes in the Bridge depend on the Registry, which is protected now in EntityType.\n",
            "fixed in https://github.com/symfony/symfony/commit/3bdb7c2b571c298f6ff4177667e8a59e7477eefe\n",
            "refactored the code so that the code is now useable outside commands:\n\nhttps://github.com/symfony/symfony/commit/a0462593ebca5f8c3af98354d1f250ffe758be64\n",
            "That's not something that needs to be fixed in Symfony. You just need to configure it properly in php.ini.\n",
            "That's not something I want to add to the loader as it's not part of any standard.\n",
            "Tests do not pass:\n\nThere was 1 failure:\n\n1) Symfony\\Tests\\Component\\Validator\\Constraints\\UrlValidatorTest::testInvalidUrls with data set #3 ('http://google.foobar')\nFailed asserting that boolean:true is false.\n\n.../tests/Symfony/Tests/Component/Validator/Constraints/UrlValidatorTest.php:70\n",
            "What's the status of this PR? ping @stloyd\n",
            "When do we need that?\n",
            "Why do you want to change these two specific ones? The framework uses the INFO level at other places too. Is it a good idea to say that the framework only logs with DEBUG?\n",
            "@Seldaek: I don't think we need another level. We just need to come up with a standard rules about the usage of each level. Adapted from log4j:\n- ERROR: Other runtime errors or unexpected conditions.\n- WARN: Use of deprecated APIs, poor use of API, 'almost' errors, other runtime that are undesirable or unexpected, but not necessarily  wrong  (unable to write to the profiler DB, ).\n- INFO: Interesting runtime events (security infos like the fact the user is logged-in or not, SQL logs, ...).\n- DEBUG: Detailed information on the flow through the system (route match, security flow infos like the fact that a token was found or that remember-me cookie is found, ...).\n\nWhat do you think?\n",
            "I won't merge this PR before all occurrences of the logger calls have been reviewed carefully and changed to the right level.\n",
            "fixed here: https://github.com/symfony/symfony/commit/2438a73c7baf05e69edfb91e52ba1e55c422286e\n",
            "The issue is probably valid but the fix is wrong. Can you create a ticket?\n",
            "related to #796\n",
            "fixed here: https://github.com/symfony/symfony/commit/082473659e22ea85e67956818e702cfae6701c9d\n",
            "That's something that needs to be added to the doc instead as it's an issue people will have even after the stable release.\n",
            "https://github.com/symfony/symfony/commit/aa356e7288a4abb7037946ce6da9feed0162f711\n",
            "The refactored code is not equivalent to the current code, which anyway works fine. So, there is no need it change, especially now that we are stabilizing the framework.\n",
            "If you are using open_basedir, all files that you access must be under the specified directory. So, the java executable path should be changed accordingly.\n",
            "It should probably be exposed in the Configuration class too, no?\n",
            "I don't understand what it adds. If nothing is configured, we will now have `%f@%l` as a format, but it is not recognized by any software. So, what's the point?\n",
            "Instead of having two versions to maintain, I have converted the script to PHP:\n\nhttps://github.com/symfony/symfony/commit/de61474cb73801dd7d17003cb911ea1c6439fe4f\n",
            "Can you give an example of a real-world use case? Thanks.\n",
            "@Seldaek: I understand that. But why not doing this in the template?\n",
            "@mvrhov: ok, but what prevents you from doing this in the template directly?\n",
            "But the controller is where you prepare the data that you want to send to the view. Without any concrete example, I'm going to close this PR.\n",
            "@shuogawa: That's what I fear. Setting the `width` or any other attribute in PHP is wrong. This belongs to the templates.\n",
            "I'm going to merge it as a  convenience  tool, but the documentation should clearly state that the only usage should be for `data-*` attributes.\n",
            "Can you add some unit tests?\n",
            "This is still not correct. The response CAN be cached, but the server MUST validate it before using it.\n",
            "This is still not correct. Le'ts remove this phpdoc as nobody will ever have a need for it. It's only useful for the HttpCache class.\n",
            "@ericclemmons: hehe, your example is a very good one ... if you want to upset @lsmith77 ;)\n",
            "How does it play with the form framework and the `DelegatingValidator` class?\n",
            "The more I think about this, the more I think this is not something we can support in the core. Adding `ArrayAccess` to `FormBuilder` (if needed) sounds better to me.\n",
            "What's the status of this PR?\n",
            "fixed https://github.com/symfony/symfony/pull/1017\n",
            "This is already possible easily with the choice type:\n\n```\n->add('gpa', 'choice', array('choices' => range(1, 5, 0.25)))\n```\n\nBy the way, the implementation is wrong. Here is how it should have been implemented:\n\n```\nclass RangeType extends AbstractType\n{\n    public function getDefaultOptions(array $options)\n    {\n        if (!isset($options['start'])) {\n            throw new FormException('The option  start  is required');\n        }\n\n        if (!isset($options['end'])) {\n            throw new FormException('The option  end  is required');\n        }\n\n        if (!isset($options['step'])) {\n            $options['step'] = 1;\n        }\n\n        $range = call_user_func_array('range', array(\n            $options['start'],\n            $options['end'],\n            $options['step']\n        ));\n\n        return array_merge($options, array(\n            'choices' => array_combine($range, $range),\n        ));\n    }\n\n    public function getParent(array $options)\n    {\n        return 'choice';\n    }\n\n    public function getName()\n    {\n        return 'range';\n    }\n}\n```\n",
            "@stof is right. The whole Symfony source directory should be a vendor of your project.\n",
            "https://github.com/symfony/symfony/commit/7ab3fdeb8325d5a72c44dc73214c97f366a11c4c\n",
            "Tests do not pass.\n",
            "due to the recent changes, I've redone the migration here:\n\nhttps://github.com/symfony/symfony/commit/879242cdf5466f139b89c56fed71cd5d93fef39d\n\nI've merged the tests for the Registry here:\n\nhttps://github.com/symfony/symfony/commit/2a5449dcb0c20c96a9b0e6ca4e0c9fb78e60caab\n",
            "Why? I've removed usage of replaceArgument() as it makes the services not easily overridable.\n",
            "Can you add some unit tests?\n",
            "Is it really a term that is widely used? If I type  CSRF intention  on Google, the first result is this PR ;)\n",
            "I don't think we need to be strict about that. For Monolog, we will never have any other sub-namespace, so there is no need to add yet another sub-directory/namespace. For Twig, I think it is more logical to classify classes according to their role in Twig: extensions, nodes, ...\n",
            "What's the status of this PR? /cc @schmittjoh\n",
            "Oops, I've merged but tests are broken now:\n\n1) Symfony\\Bundle\\AsseticBundle\\Tests\\DependencyInjection\\AsseticExtensionTest::testClosureCompilerPass with data set #0 (NULL, 'assetic.filter.closure.api')\nInvalidArgumentException: The service definition  assetic.filter.closure.api  does not exist.\n",
            "Is the problem really MySQL specific? Do we also need a fix for other DBs? (@lsmith77)\n",
            "path info should never be empty. This is a bug that should be fixed instead.\n",
            "https://github.com/symfony/symfony/commit/62d09b8fb2c4c5468dd19b016c593bc2629cd6fb\n",
            "What about entities with the same name but a different namespace?\n",
            "After thinking more about it, I think you won't be able to make it work. You will be able to make it work for bundles as the context can determine where the classes should be found, but I don't see how it will work for mappings done in a random location.\n",
            "looks good to me. @beberlei?\n",
            "Tests do not pass.\n",
            "The code is good as it is now. Your problem is probably elsewhere.\n",
            "Closing this PR... and waiting for another one based on Johannes idea.\n",
            "@johnwards: Can you test the patch in this comment? https://github.com/symfony/symfony/pull/743#issuecomment-1136299 It looks like it should fix your issue.\n",
            "ok, I've just tried with your demo bundle and the patch from #743 do fix your issue. I'm closing this one as the other patch looks better.\n",
            "Can you rebase please?\n",
            "thanks\n",
            "@vicb: you should separate the cosmetic changes (CS) and the  real  changes (new features, bug fixes, ...).\n",
            "As @stof said on the mailing-list:  The issue with the way you propose is the parameters set this way cannot come from anywhere else than the environment and that only parameters designed to come from the environment can be defined this way. this is a major limitation compared to the current way which allows you to redefine any parameter by using an environment variable. \n",
            "That does not work for me. Under Linux, it blocks the STDERR output.\n\nI know that you are not the only one to have a problem with that, but I'm still not sure what the correct fix should be.\n",
            "Keep it open. I want to do some more tests.\n",
            "Can you split this PR into smaller  logical  ones? Thanks.\n",
            "@stloyd: Any update on this PR?\n",
            "Closing this PR then\n",
            "What is the use case?\n",
            "What about using the existing `options` attribute instead?\n",
            "@stof: Does the same  problem  exist in the YAML loader? If so, the PR should fix both of them.\n",
            "@stof: Wouldn't it be possible to do the logic after everything is loaded?\n",
            "@Chekote: my point is that this patch fixes a usage that is probably not a good idea. You can only use inheritance once, which means that you cannot use the Rest bundle if you have already overridden the Routing loader. So, let's try to find another way to add the feature. And if we need to change things, I'm open.\n",
            "There is no need to add a \\ here.\n",
            "You should not remove the `TestCase` class.\n",
            "I have cherry-picked the first commit.\n",
            "Tests do not pass for me:\n\nThere were 2 failures:\n\n1) Symfony\\Tests\\Component\\Validator\\Constraints\\UrlValidatorTest::testValidUrls with data set #2 ('https://google.com/')\nFailed asserting that boolean:false is true.\n\n.../tests/Symfony/Tests/Component/Validator/Constraints/UrlValidatorTest.php:48\n\n2) Symfony\\Tests\\Component\\Validator\\Constraints\\UrlValidatorTest::testValidUrls with data set #3 ('https://google.com:80/')\nFailed asserting that boolean:false is true.\n\n.../tests/Symfony/Tests/Component/Validator/Constraints/UrlValidatorTest.php:48\n",
            "Let's schedule the discussion for 2.1.\n",
            "I have not used it for now as it means bumping the minimum requirement to 5.3.3. That being said, as a major bug has been fixed in 5.3.6, I think it's safe now.\n",
            "The current behavior is correct. I've added some phpdoc to explain how it works:\n\nhttps://github.com/symfony/symfony/commit/6308f93c64ea4fccc19304d5af733d83ff012036\n",
            "The `getDeep()` method was added to not have any impact on the regular `get()` method, which is not the case anymore with this patch.\n",
            "Why do you need to iterate on the parents? What is the bug? I've just tested, and I don't see where the problem is.\n",
            "Does it make sense to allow injection for private properties? To me, this breaks concerns and should not be allowed.\n",
            "If you set a property as private, it means that you don't want anybody to be able to change the value outside the class. I have no objection on the change, but I want to make sure that we want to allow that.\n\nWe have the same question about validators too (see #796 for a somewhat related question).\n",
            "If a dependency is stored in a private property and if there is no setter and no way to pass it to the constructor, it means that there is no way to create an instance without using Reflection. That smells really bad to me and I've never seen such classes.\n",
            "And you can use setter injection for immutable objects:\n\n```\npublic function setFoo(Foo $foo)\n{\n    if (null !== $foo) {\n        throw new \\LogicException('Foo is immutable.');\n    }\n\n    $this->foo = $foo;\n}\n```\n",
            "@kriswallsmith: I think supporting property injection for public properties is fine. Support for protected and private properties should be removed.\n",
            "There is no feeling here but just a simple reasoning.\n\nClasses should work with or without the DIC in the same way. When you create instances with PHP, you have to respect the properties visibility as this is the contract between the class and the developer (if not, just mark everything as public). As such, the DIC should also respect PHP visibility rules. The use case you are referring to (immutable dependencies) can be solved with a setter as I've shown above. Using a private property is a trick and should not be supported by default (and this is not about flexibility, but correctness).\n",
            "Also, why not allowing injection for protected or private methods then? One thing I like to keep in mind when working with the DIC is: A class should never know that it is managed by the DIC.\n",
            "Good catch. It now uses the  raw  method.\n",
            "I have moved the logic into Request directly. Thoughts?\n",
            "I have moved the logic into the `createFromGlobals()` method. Is it alright for everybody now?\n",
            "I've added a SizeLength validator that can be used as an exact length validator and a range length validator as requested by Bernhard: b9ba11720\n",
            "duplicate #781\n",
            "duplicate #781\n",
            "is it mergeable?\n",
            "The problem with the glob is that you cannot use the resource notation (@...). This makes it fragile. I prefer to remove its support for the core:\n\nhttps://github.com/symfony/symfony/commit/610c1cc9879061c2e5832d661b7a54b72cd142d6\n",
            "Right now, none of the getters starts the session; but after your patch, _some_ do like `getLocale()`.\n",
            "@kriswallsmith: Yes, split it as the on-destruct fix can be merged right away. The rest won't as it introduces some bugs.\n",
            "`_flash` is not initialized anymore for instance. If you `get()` the `_locale` attribute, it won't work either now. Anyway, the more I think about it, the more I'm annoyed by the fact the locale is managed by the Session directly. There should be a better place for that, no?\n",
            "Do you have a use case in mind? Because right now, it's only used for things where keys do not matter.\n",
            "I've just create a patch in the Form component here #849\n",
            "As the only goal of the `ReverseIterator` is to call `array_reverse` after calling `iterator_to_array`, which is expensive, I don't see the difference with just doing it in your code.\n",
            "I've just had a look at it and it does not make sense for dir sorting for instance and PHP callback.\n",
            "I'm closing this old PR as there is no more activity on it and because it probably does not apply anymore cleanly. I've opened a ticket about this feature request at #7845\n",
            "https://github.com/symfony/symfony/commit/d9299e930b0a3b000abf98eaefca1118149587c6\n",
            "Why? The name of the block is useful.\n",
            "fixed here:\n\nhttps://github.com/symfony/symfony/commit/fe9ef5c68bcdf5fe07af18efe586aa6c86f466dc\n",
            "When some keys are really long (and it happens in Symfony), it looks uglier as there is a lot of whitespace; it also makes it harder to read.\n",
            "The temporary upload file feature has been removed in 2.0:\n\nhttps://github.com/symfony/symfony/commit/852a4c9c6a4103fcbc87e99135db4dadbc7ce2a4\n",
            "`@FooBundle` is valid as the `locateResource()` locates a file or a directory. Here is my fix:\n\nhttps://github.com/symfony/symfony/commit/036be03dffba2e39a5e459a7b9829099b073de33\n\nAs far as the exception, it has been optimized the other way around. Before, you had an exception telling you that the `...` resource was not valid, but no clue about where it was used. Now, you know where the error occurs.\n\nThe problem with previous exceptions is that there are not shown by PHP. If you reload twice the page, you will have the nice Symfony exception showing you both exceptions.\n",
            "@realmfoo: Can you make a proper pull request with your patch? thanks.\n",
            "fixed\n",
            "I don't like this patch as it feels  unclean . Why not using a SQLite DB in a file?\n",
            "merged\n",
            "It doesn't seem right to output something that has to be removed by the developer via JavaScript. Duplication of code is not really a problem as you can use a Twig macro in this case.\n",
            "see https://github.com/symfony/symfony/pull/735 instead\n",
            "@beberlei, @jwage: Can you have look at this PR and give me your opinion?\n",
            "I've made another patch as yours involves a lot of copy/paste:\n\nhttps://github.com/symfony/symfony/commit/d0e31b8ca6c777f5a0db2fd5ebdef87e9246dfc7\n",
            "Closing this PR as I'm working on a more  robust  solution (which is mainly based on a cookbook recipe ;)).\n",
            "The current way is correct.\n",
            "I missed the first typo. fixed now.\n",
            "Are you sure you've cleared your cache? Because `auto_mapping` and `mapping` should always be set by the Configuration class. Can you double-check?\n",
            "ok, I'm working on something better than what we have now. Should be done later this week.\n",
            "I was working on Doctrine today, and the current way we manage annotations is definitely flawed. For instance, if you use annotations for validation on a page, then the annotations are read by the Validator component, which does not use any cache, and so, the Doctrine annotations are re-parsed, and re-saved to the cache later on. That's really a mess.\n\nHaving a global annotation reader we can rely on is a must.\n",
            "I think a better approach is to just use the  use  statements defined in the PHP file. This way, we can remove the need for the import tag. Proof of concept here:\n\nhttps://github.com/schmittjoh/annotations/pull/1\n",
            "Closing this PR as the annotations library is being merged with Doctrine\\Common.\n",
            "These files are wrapped at 78.\n",
            "This is indeed a good idea but it's still too early to merge this as we are still moving things in the doc a lot.\n",
            "Can you add some unit tests?\n",
            "I've thought about this PR and I won't merge it because having the same behavior for all (core) bundles is easier/mor consistent; and adding a new environment is not that common anyway.\n",
            "Even if this is an implementation detail right now, this is the only way we have to check if an argument is an anonymous function or not. I don't see why they would want to change this  detail , and if they do so, we will see then.\n",
            "Ticket #1121 is related to this PR.\n",
            "I have just tried another implementation where the locale is passed as an argument to the built-in types and some data transformers (via a `LocaleAwareInterface` interface). That works fine as forms are immutable now, but the solution is obviously more  complex  as we need to pass the locale to many different classes. Also, using `Locale::setDefault()` has an advantage over my method: you can change the locale whenever you want within a PHP process (which can be useful even if this is an edge case). Last, but not the least, if make sense to update the PHP Locale to the user locale.\n\nSo, to sum up, this patch is probably the best solution (easy and flexible enough).\n",
            "@stof: yes, I'm working on fixing that.\n",
            "I think that `continue`  is more readable. Why do you want to change them?\n",
            "I definitely don't like this goto thing in that case.\n",
            "You cannot replace all \\Closure blindly with `is_callable`. Just one example, the event dispatcher for instance does not work with anything except Closures or objects with an `__invoke` method. \n",
            "@Seldaek?\n",
            "@Brouznouf: Can you add some unit tests?\n",
            "@kriswallsmith: Is this a problem? XML and YAML files are loaded from 2 different directories: `Resources/config/doctrine/metadata/orm` for the ORM and `Resources/config/doctrine/metadata/mongodb` for the ODM and for annotations, the sub-directory is not the same either: `Entity` vs `Document`\n",
            "@kriswallsmith: ok, I understand your concern now. We can add an option to disable the loading of some bundles then. The goal is to make the configuration for the most common use case as simple as possible. And most users will only ever use only one entity manager with the ORM.\n\n```\norm:\n    auto_mapping: true\n    mappings:\n        FOSUserBundle: { disable: true }\n```\n\nEven without doing that, you can just set `auto_mapping` to `false` and explicitly write the configuration like before.\n",
            "@lsmith77: Your configuration will register the FOSUserBundle like the `auto_mapping` would have done. Instead of `disable: true`, we can disable the mapping is the value is `false`:\n\n```\norm:\n    auto_mapping: true\n    mappings:\n         FOSUserBundle: false\n```\n",
            "@Seldaek: It's not about disabling auto-mapping for a bundle, it's about disabling the loading of a bundle mappings. If you want to disable the auto-mapping, you just need to define the configuration as before.\n\nAnd again, these are really edge-cases that most people won't ever face.\n",
            "@bschussek is not found of this change. I think that's too big of a change for now and we probably need to postpone it.\n",
            "Boolean is always written with a capital B of M. Boole. http://en.wikipedia.org/wiki/Boolean_algebra\n",
            "I've just re-read the meeting notes and we decided to only add them where some are already defined; we have also said that this should probably be done in 2.1 as there is no BC problem.\n",
            "Your very own comment:  Not saying that your suggestions are wrong, but I'll leave it to someone else to make these changes. \n",
            "The original name should never be used in a local path (even the base name can contain characters that are not allowed by your filesystem). I've refatored the File management quite a lot:\n\nhttps://github.com/symfony/symfony/commit/00bfd10ca95cdd4ce47473af2b52384180affb6d\n",
            "This has been fixed as I have refactored File upload management quite a bit:\n\nhttps://github.com/symfony/symfony/commit/00bfd10ca95cdd4ce47473af2b52384180affb6d\n",
            "Tests do not pass as some code has been removed for no reason.\n",
            "I have fixed the problem with a slightly different patch as the test is legitimate for composite keys. I've also added some unit tests to prove the problem:\n\nhttps://github.com/symfony/symfony/commit/4fb1035578f0e475673c1d1b7ae489a1447186e7\n",
            "Same as PR 525, I would like to avoid adding yet another configuration setting.\n",
            "I've changed the way things work:\n\nhttps://github.com/symfony/symfony/commit/4cbc33a7859ca5dabc2063959a09cef22044ca96\n\nAnd I have added a cookbook to explain how to easily change the defaults to fit your needs:\n\nhttps://github.com/symfony/symfony-docs/commit/b85bac63cb0f2562ab510631cba144889bbb2831\n",
            "Can you rebase to master? There is a conflict and I'm not sure how to merge this. Thanks.\n",
            "This is indeed a big enhancement. Just have a look at the Silex extension for Forms; it is much better now:\n\nhttps://github.com/fabpot/Silex/blob/fbfa8e499047b84685c1bd554ee66ce1c417fcb0/src/Silex/Extension/FormExtension.php\n\nI think we need to keep the  `form.xml` file in FrameworkBundle as we've done for all other components. What I don't understand is why you don't use extensions in the XML file. Why do you still register everything manually?\n",
            "I thought about moving the XML files in the components themselves (in fact, it was done like this in the early version of Symfony2 -- before it goes public). But the configuration is just one way to set up the component. That's why I've decided to moved them into the framework bundle.\n",
            "Let's concentrate on finishing the framework for our users and we will see how to better serve others afterwards.\n",
            "Also because moving form.xml is not enough. To be useful, you also need the Configuration class and the logic from the Extension class too.\n",
            "I don't like the introduction of a new priority mechanism. It looks overkill to me as adding new cache warmers is not something we will have to do often. If you think that the integer priorities are not clear enough, we can just add some comments in the XML file indicating why the priority has been set like it is.\n",
            "Again, this is the only place where we will have that. Why not doing the same for all listeners then? So, I'm still -1.\n",
            "I have removed everything related to the PDO session storage as it is easier to configure it without any help of the framework bundle than it is to configure it through it. I've also cleaned up a few things as the code was written quite a long time ago:\n\nhttps://github.com/symfony/symfony/commit/7644e86683464805305b338404ee2f4d90cda286\n",
            "I'm going to merge the form branch today.\n",
            "Tests do not pass...\n\n```\nCannot make static method Assetic\\Extension\\Twig\\AsseticTokenParser::createNode() non static in class Symfony\\Bundle\\AsseticBundle\\Twig\\AsseticTokenParser\n```\n",
            "This is a very specific feature that I don't want to add to the core. Also because adding it yourself is also really easy as demonstrated by your patch.\n",
            "Indeed, it would make for a very good cookbook article.\n",
            "A more accurate list, used by browsers (http://publicsuffix.org/), can be found here:\n\nhttp://mxr.mozilla.org/mozilla-central/source/netwerk/dns/effective_tld_names.dat?raw=1\n",
            "No, I don't want to maintain such a big list in the framework. And anyway, it does not need to be in the core.\n",
            "Tests do not pass\n",
            "@mvrhov: I have moved the check to the Request class as it feels more secure this way. Thanks.\n",
            "+1 but tests do not pass and UPDATE file has not been updated.\n",
            "Can you make another PR for the first 3 commits so that I can merge them quickly? Thanks.\n",
            "Looks good to me, any other comment before I merge?\n",
            "tests do not pass\n",
            "I'm fine with the first two commits, but not the last one as it changes the current behavior. Before the patch, the content-type would be 'text/html; charset=utf-8'. After the patch, it will only be 'text/html'.\n",
            "nevermind, I've changed the behavior of the Response class to fix this problem there.\n",
            "I prefer the explicit passing of the context.\n",
            "I've removed the file altogether as it's not used anyway.\n",
            "As this is a critical part of the framework, can you update the unit tests?\n",
            "I was too fast reading your patch. That cannot work. If you don't specify the `_format`, it will always be determined via the Accept header with your patch and we know that it does not work as all browsers accepts XML as their preferred type. That's why such automatic support have been removed from symfony1 and Rails for instance.\n",
            "Tests do not pass anymore after applying this patch.\n",
            "ok, I will have a look at those tests.\n",
            "This basically hides errors, which I think is not a good idea.\n",
            "@lsmith77 is the best approach if this is to mask false positive. But anyway, it will hide all errors.\n",
            "It's not used yet. But I'm trying to see if it could be possible.\n",
            "Your code does not do the same as the current one.\n",
            "This won't be merged without a proper unit test that exhibits the problem.\n",
            "I've refactored links management in the DomCrawler component. That should fix all issues:\n\nhttps://github.com/symfony/symfony/commit/8b74c6eb9c107d2a33e1ffacba583ca68d9ee020\n",
            "It is fixed now as I have removed all the exit()/die() calls and added a default exception handler that displays all exceptions (previous ones included), even during the Kernel boot time.\n",
            "+1 for me\n",
            "I have reverted this patch for now as I think @kriswallsmith and @schmittjoh have good arguments.\n",
            "We are at a point where we don't want to refactor the code just for the sake of it. We need to concentrate on fixing bugs, and polishing the framework. Most of the time, things have been done in a certain way for good reasons.\n",
            "I don't see the point. It makes things more complicated.\n",
            "It was done this way on purpose. As the trans methods are called quite a lot, I prefer to not add yet another method call.\n",
            "Your patch looks good to me. Can you send a PR?\n",
            "I have implemented something more like what @Seldaek describes in the ticket. Here is the doc for it: https://github.com/symfony/symfony-docs/commit/068de1f357f757a9d5c2ae66fe476e9307a38dbc\n",
            "What about `templating.loader.wrapped` and `pdo_connection` services?\n",
            "Tests do not pass:\n\n   There was 1 failure:\n\n   1) Symfony\\Tests\\Component\\DependencyInjection\\Compiler\\ResolveInvalidReferencesPassTest::testProcessIgnoresExceptions\n   Failed asserting that two strings are equal.\n   --- Expected\n   +++ Actual\n   @@ @@\n   -bar\n   +\n\n   .../tests/Symfony/Tests/Component/DependencyInjection/Compiler/ResolveInvalidReferencesPassTest.php:62\n",
            "Do we even need two categories? Isn't it possible to just get information from the start of the URL?\n",
            "I see that in your comment that you mention PR 510. It has been merged now.\n",
            "I'm ok to provide a way to disable classes cache but I would like to avoid adding yet another configuration setting. One idea is to move the decision to the distribution. But I've not a clean solution yet.\n",
            "I've changed the way things work:\n\nhttps://github.com/symfony/symfony/commit/4cbc33a7859ca5dabc2063959a09cef22044ca96\n\nAnd I have added a cookbook to explain how to easily change the defaults to fit your needs:\n\nhttps://github.com/symfony/symfony-docs/commit/b85bac63cb0f2562ab510631cba144889bbb2831\n",
            "I have added logic in Response to automatically add the charset to the Content-Type when not present. @kriswallsmith will make additional changes to Assectic to be able to change the charset when needed.\n",
            "I've cherry-picked the following commit 9221965dacf17e7d10d0a0e3bb4d32243c784827. Everything else is not worth it.\n",
            "The session storage option array is only about settings that are valid for all session storage classes. `save_path` is not one of them. If we add this one, why not add all the others (http://fr2.php.net/manual/en/session.configuration.php)? So, I'm closing this PR.\n",
            "This is fixed now. I've also fixed the `getContainer()` method which would return the container from the very first request instead of the current one.\n",
            "fixed now. Thanks.\n",
            "There is no need to disable the search if the session is disabled. You can just not set the variables in the session. The feature will still work, except that the form won't be automatically filled in for you.\n",
            " My opinion is that giving some hints & have a good documentation is good enough.  +1\n",
            "I'm closing this PR as the doc is not in the same repo.\n",
            "@stof: no problem with the renaming of rotatingfile.\n",
            "Can you also update the doc and Symfony SE before I merge this PR? Thanks.\n",
            "Can you add some unit tests to prove the problem and the solution? Thanks.\n",
            "I don't see where the problem is. Even if there is base URL, the URI can still contain it, no? Or am I missing something?\n",
            "I've refactored links management in the DomCrawler component. That should fix all issues:\n\nhttps://github.com/symfony/symfony/commit/8b74c6eb9c107d2a33e1ffacba583ca68d9ee020\n",
            "Tests do not pass\n",
            "@azat: My comment was not very clear. I don't want to change the generic `get()` method as it would make it too slow (cf. symfony1). The approach proposed by @schmittjoh is better as it adds another getter. So, I'm closing this PR in favor of https://github.com/symfony/symfony/pull/484.\n",
            "I think we should explicitly forbid the usage of Bundle in a bundle name (except for the suffix).\n",
            "@kriswallsmith: Can you extract the code from PR186 and make a PR? I think it's a good move.\n",
            "fixed:\n\nhttps://github.com/symfony/symfony/commit/77f9daf37450af3a7cff2431fd5d2d5a5d4ab22f\n",
            "My understanding of our decision was that the parameters should be completely removed. Here, you have just moved the definition of the parameter to the extension class. In all other bundles, we inject the value directly with `setArgument()`. Here is an example:\n\nhttps://github.com/symfony/symfony/commit/c8fe15bfcf2053a4666af1d4cdd559f2808a9997\n",
            "Is `security.access.always_authenticate_before_granting` used more than once?\n",
            "The parameters defined in a bundle are not visible in any other bundle. At least, that used to work like this, and I want to keep this behavior. Each bundle should be isolated from the others.\n",
            "duplicate of PR 439\n",
            "I have accepted Japanese because I know that without a Japanese version, nobody can use the framework. I think this is a really specific case in the world and as such I don't want to add any other translation for the UPDATE file.\n",
            "Can you make a specific pull request for the first 2 commits as they are bug fixes that need to be applied without any discussion?\n",
            "If you create a bundle and want to support, you must override the getNamespace() method as you XSD won't be hosted on symfony.com. The current default implementation just says that you don't have any XSD.\n",
            "@stof: then, use a fake URL like http://example.com/...\n",
            "ok, so let's go for null then.\n",
            "As described in RFC 2606, `example.com` is what we need to use.\n",
            "Japanese is really specific. The Symfony community there is large and they need documents in Japanese. I also know that the Japanese community will update the file as fast as possible, so I'm reopening this PR and I will merge it.\n\nAlso, this update file is temporary and will disappear anyway when Symfony2 becomes stable. So, it's not a big deal.\n",
            "@schmittjoh How can you have a nice exception page if you cannot write to the `cache/` directory?\n",
            "This PR has too many problems to be reviewed correctly. Can you clean up the patch and resubmit a PR? Thanks.\n",
            "Why would you want to access one specific constraint?\n",
            "Bernhard is ok to merge this PR. Can you add unit tests before I merge it? Thanks.\n",
            "Is there anything we need to change in the Symfony SE?\n",
            "Tests are broken: \n\nPHP Fatal error:  Call to undefined method DirectoryIterator::getExtension() in /Users/fabien/work/symfony/git/symfony/src/Symfony/Bundle/AsseticBundle/Tests/DependencyInjection/AsseticExtensionTest.php on line 104\n",
            "closing this one as PR 408 is probably better.\n",
            "Why would you want to keep the Bundle suffix for resources? Or, IIUC, keep both syntaxes.\n",
            "I think we need only one true way to name things. Also, it does not really looks like a file path as there is `@` at the beginning.\n",
            "I've just tested with 3.7, and it works well. Thanks.\n",
            "@bschussek: I think @Seldaek was only referring to the name of the classes, not their usage. I didn't have time yet to have a deep look at the patch, but the `Type` suffix definitely looks  weird  to me. Would you consider changing the suffix to `Field`?\n",
            "@bschussek: I think you should explain once more what these type classes are really; just to be sure everybody know what we are talking about. It took me quite some time to figure out their usage and why they are not Forms or Fields.  Config  looks the only possible suffix to me amongst your proposals.\n",
            "Let's focus on reviewing the patch and see what needs to be worked on before merging. Type is really just fine.\n",
            "Looks like I forgot to add a note here about my work on removing the Renderer sub-framework. Basically, I've removed the `Renderer/` directory and re-implemented the current way of dealing with templates:\n\nhttps://github.com/fabpot/symfony/tree/form\n",
            "@henrikbjorn: This totally makes sense and simplifies things a lot for the end user: https://github.com/fabpot/symfony/commit/49dc836521442a908c42343aa996e4c9c2fbed0b\n",
            "Closing this PR as the code now lives at symfony/form and will be merged probably next week.\n",
            "The fix must be in the security bundle, not in the ParameterBag.\n",
            "I'm not sure about this one. I'm fine with making things easier for newcomers, but that seems a bit too much. Also, by hiding the fact that you throw an exception, it's not easy to understand that the code after this call will never be executed.\n",
            " `createNotFoundException()` looks better to me. We should then use `return` before to make it clear that the code will stop here, even if it is technically not needed:\n\n```\nreturn $this->createNotFoundException('Not Found');\n```\n",
            "I think we need something similar to the way we render templates:\n\n```\nreturn $this->render(...);\n```\n\nSo, why not something like:\n\n```\nreturn $this->renderNotFound('Not Found');\n```\n",
            "This has been changed for performance reason. Why would you want to revert this?\n",
            "We have decided yesterday during the meeting that we won't rename the core bundles.\n",
            "This has not been tested (it's broken)! I think the whole remove() method can be converted to use iterators. Can you do the conversion and be sure to add relevant tests? Thanks.\n",
            "As for the MongoDB bundle, I've extracted the code to a new independent bundle: https://github.com/symfony/DoctrineFixturesBundle\n",
            "This implementation has been tested of course. The response is created by the exception listener, as for any other exception.\n\nWe will definitely advocate only one usage in the documentation. I thought about removing the possibility to create Response instances for status code over 400; but that cannot work as at some point, you need to actually send a Response with an error code (and it makes the HttpFoundation less useful outside of a Symfony2 MVC context).\n",
            "Documentation should make it clear that Exceptions are to be used for response errors (4xx and 5xx), and Response instances only for  normal  responses (2xx and 3xx).\n\nBut, as we cannot be sure that people don't use a Response for an error, this page fixes that and convert a Response to an Exception, which in turn is converted back to a Response. This ensures that all errors are managed by the same code.\n",
            "@kriswallsmith: I tend to be with you on your last comment. This patch is a bit magic in the sense that it prevents you from returning the Response YOU have decided to return.\n\nSo, all in all, I think this is more a documentation topic, than an Exception one. I'm keeping the PR open if there are other comments, but I think it needs to be closed and not merged. \n",
            "I submitted a PR because I know that this change is not perfect. I'm just trying to be as consistent as possible throughout the framework. The problem here is that another part becomes less consistent.\n",
            "Closing this PR as there is no obvious  fix .\n",
            "I'm closing this PR as everything related to MongoDB must now be included in the independent bundle I've created yesterday: https://github.com/symfony/DoctrineMongoDBBundle\n",
            "duplicate of 364\n",
            "The ESI specification specifies that esi:include URLs must be absolute.\n",
            "Thanks for checking. I don't know why I thought absolute URLs were required.\n",
            "I need to work on it as this is a bug that needs to be fixed.\n",
            "I made a different fix; we just always generate relative URLs:\n\nhttps://github.com/symfony/symfony/commit/314684df24c81ed2c098d0e48ac214c121311d1b\n",
            "merged\n",
            "As I've just explained in the ticket, if you install Varnish, you should probably disable the Symfony2 reverse proxy. \n",
            ".php$ look fine for me.\n",
            "what's the status of this PR? Elliot, will you update it with the needed fixes?\n",
            "Closing this PR as there is no feedback and some things cannot be merged.\n",
            "Can you explain what the problem was on how you fixed it? Thanks.\n",
            "breaks tests:\n\n```\nThere were 2 failures:\n\n1) Symfony\\Tests\\Component\\DomCrawler\\Field\\FileFormFieldTest::testSetValue\n->setValue() sets the value to the given file\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array\n (\n     [error] => 0\n     [name] => FileFormFieldTest.php\n     [size] => 3665\n-    [tmp_name] => .../tests/Symfony/Tests/Component/DomCrawler/Field/FileFormFieldTest.php\n+    [tmp_name] => tmp/-Tmp-/upload3kbMXN\n     [type] => \n )\n\n/Users/fabien/work/symfony/git/symfony/tests/Symfony/Tests/Component/DomCrawler/Field/FileFormFieldTest.php:53\n\n2) Symfony\\Tests\\Component\\DomCrawler\\Field\\FileFormFieldTest::testUpload\n->upload() sets the value to the given file\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array\n (\n     [error] => 0\n     [name] => FileFormFieldTest.php\n     [size] => 3665\n-    [tmp_name] => .../tests/Symfony/Tests/Component/DomCrawler/Field/FileFormFieldTest.php\n+    [tmp_name] => tmp/FmY9fzZwEW8I+Srx6IjUDk+++TI/-Tmp-/uploadAcMXio\n     [type] => \n )\n\n.../tests/Symfony/Tests/Component/DomCrawler/Field/FileFormFieldTest.php:65\n```\n",
            "This implementation is much better. Can you have a look at my comments? Thanks.\n",
            "You can say the same for the Symfony version, and the debug mode, ... I think we need to keep them. The timer for instance is useful only if you know what the status of xdebug and APC are.\n",
            "As you said, URLs are case sensitive; so the core should be case sensitive. If you want case-insensitive URL, you can change the path info to be case insensitive instead.\n",
            "breaks unit tests:\n\n```\nThere were 2 errors:\n\n1) Symfony\\Bundle\\AsseticBundle\\Tests\\FunctionalTest::testTwigRenderDebug\nArgument 4 passed to Symfony\\Bundle\\FrameworkBundle\\Templating\\PhpEngine::__construct() must be an instance of Symfony\\Bundle\\FrameworkBundle\\Templating\\GlobalVariables, none given, called in .../Symfony/Bundle/AsseticBundle/Tests/Resources/cache/test/ResourcesTestDebugProjectContainer.php on line 818 and defined\n\n.../Symfony/Bundle/FrameworkBundle/Templating/PhpEngine.php:36\n.../Symfony/Component/DependencyInjection/Container.php:228\n.../Symfony/Component/DependencyInjection/Container.php:228\n.../Symfony/Bundle/AsseticBundle/Tests/FunctionalTest.php:84\n\n2) Symfony\\Bundle\\AsseticBundle\\Tests\\FunctionalTest::testPhpRenderDebug\nArgument 4 passed to Symfony\\Bundle\\FrameworkBundle\\Templating\\PhpEngine::__construct() must be an instance of Symfony\\Bundle\\FrameworkBundle\\Templating\\GlobalVariables, none given, called in .../Symfony/Bundle/AsseticBundle/Tests/Resources/cache/test/ResourcesTestDebugProjectContainer.php on line 818 and defined\n\n.../Symfony/Bundle/FrameworkBundle/Templating/PhpEngine.php:36\n.../Symfony/Component/DependencyInjection/Container.php:228\n.../Symfony/Component/DependencyInjection/Container.php:228\n.../Symfony/Bundle/AsseticBundle/Tests/FunctionalTest.php:99\n```\n",
            "Again, it makes things less explicit for no real added value.\n",
            "This method would only make sense if implemented in TemplateReferenceInterface as the format depends on this interface, not on the parser.\n",
            "As Stof said, I don't really see the point and it makes things less explicit.\n",
            "You can achieve the same by including the parent value of the slot.\n",
            "I have fixed in in another way.\n",
            "Does not merge cleanly... anymore.\n",
            "closing this PR as there is another one about it.\n",
            "What about having this a core feature of Symfony. We have quite a few places where it can be used. In fact, all the component using the Config/Loader and Config/Resource classes. What do you think?\n",
            "Closing this PR as PR 391 is more generic.\n",
            "For a reason I don't understand, when I fetch your repo, the security branch does not have the changes listed here.\n",
            "That's what I've done. Thanks.\n\nIf you have a look at your repo, the security branch does not exist anymore, I think that's the reason.\n",
            "stof is right, if generating absolute URL does not support alt port, this is what we need to be fixed.\n",
            "Doc must be updated before this can be merged.\n",
            "I'm closing this pull request as it was decided to remove the current implementation and replace it with a new one.\n",
            "merged\n",
            "Yes, I'd prefer to remove the background color change. In fact, the whole status concept should be removed.\n",
            "There is small CSS problem on the toolbar. The icon should not be underscored when I hover over one.\n",
            "Regarding the CSS problems, I think I forgot to run assets:install.\n",
            "As there won't be any visual changes, I don't see the point of the status.\n",
            "Right, we need to remove the visual feedback altogether.\n",
            "For what it's worth, I've done a quick benchmark against a simple Hello World app and it shows that the new implementation makes Symfony about 5% slower than before.\n",
            "Besides copying the code from Doctrine\\Common,  here are some comments on names:\n- `dispatchEvent()` -> `dispatch()`\n- `*EventArgs()` -> `*Event`: not sure about this one but I find EventArgs suffix to be really ugly\n- `filterCoreController()` -> `onCoreController()`\n- `filterCoreResponse()` -> `onCoreResponse()`\n- `FilterResponseEventArgs` -> `ResponseEventArgs`: in fact, we can remove `filter` everywhere as there is no notion of a filter anymore.\n\nI don't like the `GetResponseEventArgs`, `GetResponseForControllerResultEventArgs`, and `GetResponseForExceptionEventArgs` names but I don't have good names for them now.\n",
            "All these problems have already been fixed in my branch. I'm finishing fixing some more bugs and I will merge the branch later today.\n",
            "merged\n",
            "UTF-8 does not work in MySQL, it must be UTF8.\n",
            "@kertz: Are you working on adding some unit tests?\n",
            "merged.\n\nJust a side note, it's better if you can create a branch whenever you make a pull request (http://symfony.com/doc/2.0/contributing/code/patches.html).\n",
            "I'd like to merge it ASAP with its sister PR (99). Is it possible now? I mean, even if there are still some minor issues here and there, we can probably tweak them later on.\n",
            "see PR 207\n",
            "IIUC, we can close this pull request and expect another one with a better fix?\n",
            "What's the reasoning behind renaming account to user? Account is probably semantically more correct. A user can have more than one account. A user cannot be disabled, an account can. And it seems to me that account is understandable by everyone.\n",
            "I definitely don't like UserDetails. UserAccountInterface seems better to me, but the, I still like AccountInterface better.\n",
            "If something is weird, we can probably talk about it and see if needs to be changed. Anyway, I've merged this patch.\n",
            "Any news?\n",
            "As session exposes getFlashes(), Twig has access to it, so it makes sense to also make it accessible for PHP templates. Merged.\n",
            "Regarding your last comment, the  default  extension name should be kept along side the optional alias. In the bundle, the default name should always be used.\n",
            "Tests do not pass ;)\n",
            "The alias does not work in Doctrine: `SELECT p FROM blog:Post p ...`\n",
            "A few notes:\n- I'm a bit concerned that we are introducing yet another way to access things\n- When using aliases, it's also less clear which bundle you are referencing\n- Aliases are only to be used for bundles you won't share (as you cannot be sure which alias the user will use)\n",
            ".md is actually what I used in symfony-standard, so we should probably stick with it.\n",
            "As there is another pull request on adding support for PDO/Mysql as a storage, I'm not sure we want to make the SQLite one configurable. If you want to keep profiling data, you will probably not use the SQLite storage. Anyway, let's way for the other pull request to land into master before eventually merging this one.\n",
            "If you want to change the path, just change the value of 'profiler.storage.file'.\n",
            "I was too fast. The explanation for my decision is that I want to keep the number of directories where Symfony write by default to a minimum (cache/ and logs/ right now).\n",
            "It looks like someone has already added most of the coverage for Response here: https://github.com/symfony/symfony/pull/161. Can you check if it covers the same things? Sorry for the inconvenience.\n",
            "I have merged a fix here:\n\nhttps://github.com/symfony/symfony/commit/8421f95476dd08bcc9d635395e8ed6f5fe4f722d\n",
            "oops, previous commit was not working. Correct one here:\n\nhttps://github.com/symfony/symfony/commit/48c222dd021aed854d85ffca24314c20c25f7e7f\n",
            "We cannot make this change because is_callable() always returns true when a class has a __call() method.\n",
            "What you propose is not standard in any CLI tool I know. So, it's not about being hacking, it's just that the Console component only supports arguments and options, which are the two  standard  way of passing things to a CLI tool.\n",
            "I have inadvertently merged the commits. I'm fine with them but can you please add some unit tests. I think that there is a bug when the directory actually exists but is empty.\n",
            "merged\n",
            "This breaks the unit tests.\n",
            "just need a unit test to cover the case you mention, to be sure that we don't reintroduce the bug later on.\n",
            "I've just tested and it works as is. Both `CachedTemplateLocator` and `TemplatePathsCacheWarmer` use the `getSignature()` method for the array key. So, if it does not work for you, the problem is different. In that case, can you send an email to the dev mailing-list so that we can try to figure out what your problem is? Thanks.\n",
            "MongoDB should not be anywhere in FrameworkBundle (all the code must be in the relevant bundle). So, the storage should just be a service defined in the bundle and usable in place of the default implementation. I'm closing this pull request for now as the code will probably be very different.\n",
            "I didn't see that you are not using Doctrine for that. I don't know what to do. I don't want support for MongoDB in FrameworkBundle for sure. I think creating a SessionStorageBundle is overkill. What about putting the class in DoctrineMongoDBBundle? If you use MongoDB for your session, you will probably use it for something else and so you will probably need the Doctrine bundle too. What do you think?\n",
            "PDO is standard, MongoDB is not.\n",
            "FrameworkExtraBundle will probably be renamed as right now, it's really about supporting annotations in controllers.\n",
            "For me, the number of log lines is irrelevant. I'm only interested in knowing whether there is some errors or not.\n",
            "Right, if there is 0 errors, then, we should remove the count altogether. Good compromise indeed.\n",
            "Before merging this patch, we need two things:\n- fix the Apache dumper;\n- use regexes for the _method requirement (we can probably only support `*|*|*` as suggested on the mailing-list).\n",
            "Johannes has a valid point (not really related to this pull request). The current behavior of the framework is different if you just return a 404 response or if you throw and exception.\n\nKris: Besides two obvious changes I made to the last commit, can I merge this pull request or do you still need to work on the Apache dumper?\n",
            "This breaks the tests.\n",
            "The bootstrap files are never autoloaded anyway.\n",
            "I also agree that having a common namespace for all commands that generate code is better.\n",
            "Can you add some unit tests that show the problem you fix with this patch?\n",
            "If we allow this, the router results are not predictable anymore. I don't why  you think that having more routes looks ugly but this is definitely the way to go.\n",
            "replaced with PR 319\n",
            "Can you add unit tests that exhibit the problem?\n",
            "merged\n",
            "In prod, they are not mandatory, so they cannot be part of the main classes.php file. Instead, we can add them to the class map autoloader.\n",
            "This breaks the tests.\n",
            "You will also need to rebase -f as right now, there is a lot of noise.\n",
            "I will work on enhancing this PR.\n",
            "Is it ready to be merged?\n",
            "ok, can you rebase to master as there is a non-trivial conflict right now? and I will merge it just after that. Thanks.\n",
            "Tests do not pass anymore. Can you fix them? Thanks.\n",
            "I think we need to first stabilize the current core. Let's keep that for 2.1.\n",
            "closing as it needs to be moved to the new Symfony\\Bridge\\Twig namespace.\n",
            "@stof: We have such an implementation in symfony1, so it is definitely possible.\n@dator: Have a look at the symfony1 code for inspiration.\n",
            "I'm closing this PR as the current implementation cannot be merged as is.\n",
            "The warmer relies on getMatcher() and getGenerator() to be available and they are not available in the Router interface.\n",
            "But if you have a space in a variable, it should be replaced with %20, no?\n\nApparently, there is a solution/workaround for Apache: http://httpd.apache.org/docs/2.0/mod/core.html#allowencodedslashes\n\nAny reason why Apache behaves like this by default?\n",
            "ok, it looks like %2F in a URL is not valid. The solution seems to be to use %252f instead.\n",
            "Working solution for me:\n\n```\ndiff --git a/src/Symfony/Component/Routing/Generator/UrlGenerator.php b/src/Symfony/Component/Routing/Generator/UrlGenerator.php\nindex a67b1f4..2e32993 100644\n--- a/src/Symfony/Component/Routing/Generator/UrlGenerator.php\n+++ b/src/Symfony/Component/Routing/Generator/UrlGenerator.php\n@@ -98,7 +98,7 @@ class UrlGenerator implements UrlGeneratorInterface\n                         throw new \\InvalidArgumentException(sprintf('Parameter  %s  for route  %s  must match  %s  ( %s  given).', $token[3], $name, $requir\n                     }\n\n-                    $url = $token[1].urlencode($tparams[$token[3]]).$url;\n+                    $url = $token[1].str_ireplace('%2F', '%252F', urlencode($tparams[$token[3]])).$url;\n                     $optional = false;\n                 }\n             } elseif ('text' === $token[0]) {\ndiff --git a/src/Symfony/Component/Routing/Matcher/UrlMatcher.php b/src/Symfony/Component/Routing/Matcher/UrlMatcher.php\nindex 10eb8f9..b203420 100644\n--- a/src/Symfony/Component/Routing/Matcher/UrlMatcher.php\n+++ b/src/Symfony/Component/Routing/Matcher/UrlMatcher.php\n@@ -91,7 +91,7 @@ class UrlMatcher implements UrlMatcherInterface\n         $parameters = array_merge($this->defaults, $defaults);\n         foreach ($params as $key => $value) {\n             if (!is_int($key)) {\n-                $parameters[$key] = urldecode($value);\n+                $parameters[$key] = str_ireplace('%2F', '/', urldecode($value));\n             }\n         }\n```\n",
            "I have committed the patch above.\n",
            "https://github.com/symfony/symfony/commit/f46c6f7e45c0b046183932ae1b69e5b7500e535f\n",
            "I think the old way was better as the class name was more descriptive. Why would you want to uniformize the class names?\n",
            "Something that occurs to me while thinking about this problem:\n- Response HTTP headers are only relevant for the master Response. All sub-requests/sub-responses pairs are only interesting for the Response content (we don't care about their headers).\n- The security is only applied to master requests. Security is never checked for sub-requests.\n- If you have ESI enabled, each master request/response pair is generated one after the other.\n\nTo sum up, here is the most complex case that can occur in a single PHP process (with sub-requests and ESI handled by the Symfony2 gateway):\n\n```\nMaster Request\n    Sub-Request\n    Sub-Response\n    Sub-Request\n    Sub-Response\nMaster Response\n\nMaster Request\n    Sub-Request\n    Sub-Response\nMaster Response\n```\n\nSo, with this in mind, if we stash the HTTP headers in the listener for the master request, we can get them in the response part of the listener when this is the master request without any ambiguity:\n\n```\nMaster Request (store the HTTP headers we need)\n    Sub-Request (not a master request, so no need to store headers)\n    Sub-Response (not a master request, so we do not care about headers)\n    Sub-Request\n    Sub-Response\nMaster Response (get the HTTP headers -- from the same listener)\n\nMaster Request (override the HTTP headers)\n    Sub-Request\n    Sub-Response\nMaster Response (get the HTTP headers for this master request)\n```\n",
            "When I coded the first version of the security component, I decided to no apply security to sub-requests because it's really up to the developer to know what he is doing at this point. I think that changing that will lead to numerous problems.\n",
            "I've just tried another approach to fix the problem:\n\nhttps://github.com/fabpot/symfony/commit/845ecf65ae5c84b87c39c817ccf416027da3cc2b\n\nThe patch looks really similar to Johannes's one, but I have moved the code to the HttpKernel instead of adding the response headers to the request class.\n\nTwo things to note:\n- If we think that keeping the sub-responses headers might be useful, we need to execute the ResponseListener for all requests (done in my patch)\n- I have moved the merge() method to the ResponseHeaderBag. If we were to accept this patch, I think we will have to add the merge() method to the other bag classes.\n",
            "merged\n",
            "merged\n",
            "Bernhard is working on a proper fix, as you might want to also submit with a GET method, which is just not possible with the current core.\n",
            "First one has been fixed.\nSecond one is not something we can have by default (`-` is often used in slugs for instance).\n",
            "This has been fixed since then (cf. fabpot/symfony).\n",
            "This has already been fixed in my branch\n",
            "Can you please add unit tests for this new feature? Thanks.\n",
            "Also, can you fix the coding standards?\n",
            "Can you also add a unit test for the Crawler, I think this is the most interesting one.\n",
            "Thanks for that. I've merged the Csv loader.\n\nSupport for gettext and message extraction is on our todo-list. So, if you want to work on it, that would be wonderful.\n\nFor message extraction and Twig templates, you can probably read the following paragraph from the Twig documentation to see how this can be done:\n\nhttp://www.twig-project.org/doc/extensions/i18n.html#extracting-template-strings\n\nOn a side note, you should work on my branch (fabpot/master) instead of this one. My branch is where all the development happens and all pull requests should be done on it. Also, to make my life easier, can you create topic branches for each of your changes? And whenever you want to sync with my repo, force a rebase. Thanks.\n",
            "I'm not really familiar with gettext, but can't we just use the native PHP support?\n",
            "This has already been fixed in my branch (fabpot/symfony)\n",
            "I have merged the testRename() fix but not the timezone one as you should really do that in your php.ini file.\n",
            "Orders matter, and I think this is a good thing. You must put the most precise namespace first. I don't want the autoloader to be able to load the same class from different directories as it can become a nightmare pretty fast. Or is there another reason?\n",
            "Why make things more complicated?\n",
            "merged.\n",
            "I have done the change directly into the Bundle class.\n",
            "https://github.com/fabpot/symfony/commit/114851969581bbcdae88ea4ac293ca47e878cb1c\n",
            "see https://github.com/fabpot/symfony/pull/247\n",
            "see https://github.com/fabpot/symfony/pull/247\n",
            "This is something I won't change as this is done on purpose.\n",
            "the label() method has already been fixed in my repo (fabpot/symfony).\nThe other one I'm not sure about as the 'field' attribute must be the value of '$this'. To access the original field, we must use '$origin'. So, the fix should be in the template. I will commit the fix in my repo in a minute.\n",
            "This is not an issue anymore.\n",
            "That was done on purpose. Use the @orm: alias now.\n",
            "Why do you keep  setDefaultAnnotationNamespace ? I would have removed it to force people to use the alias. No? Actually, I have remove this call for the validation.\n",
            "What about adding a configuration switch?\n",
            "Can you please open a ticket on that matter, so that it is not list? Thanks.\n",
            "Instead of just added this specific configuration, I have instead added all Router options in http://github.com/fabpot/symfony/commit/aaba52d92816bdc9ce27b491dc8d28c2587c2c2c\n",
            "Use fabpot/symfony instead of symfony/symfony for pull requests. Also, don't do a pull request on master but on a given commit or better on a topic branch. It eases things a lot for me especially of I don't merge your changes right away. Thanks.\n",
            "Can you create a ticket for that problem? Your fix cannot be merge as it does not fixes the problem but is just a workaround.\n",
            "I don't have windows on my machine, so I have no idea.\n",
            "Can you rebase your repository to the latest fabpot/master? As is, it does not apply cleanly (Components -> Component). Thanks.\n",
            "You need to do a pull request on fabpot/symfony and only from a topic branch or a specific changeset. Thanks.\n",
            "I'm definitely in favor of this split... if we can do it without BC breaks... so the old class names must still exist.\n\nBy the way, I think it would make #8848 obsolete.\n",
            "I suppose that the goal is to move the classes themselves as well, right?\n",
            "... I need to sleep more ;)\n",
            "In theory, that's probably possible, but in practice, I don't see the use case. So, I would go with only one form. @bschussek What do you think?\n",
            "ok, let's do it that way: if there is only one form, adjust the UI and sentence for only 1 form (should be what people see 99.9% of the time). And if there are more than one form, well, that's what we have now.\n",
            "I do agree with @Tobion \n",
            "A parameter value can only be a scalar, everything else is not supported.\n",
            "Oops, I read too fast. I was working on DIC tags before and I was still thinking about them.\n",
            "... which makes for a beautiful `....SF....` pattern ;)\n",
            "Looks like a duplicate of #6908 (at least, both are related)\n",
            "Before implemeting the missing features (loaders/dumpers), I'd like to settle on a name for this feature. Is `squash` the best word to describe what we are doing here? Any other suggestions?\n",
            "`decorate` was on my list as well, I thought that it does not convey the fact that we are actually overriding/replacing the service that we are decorating. But I'm fine with `decorate` if that's the preferred choice.\n",
            "@igrow I'm not a big fan of using tags for built-in features. In fact (I might be wrong as I haven't checked), I think we don't have any tags in the component.\n",
            "renamed `squash` to `decorate` and `setSquashedService` to `setDecoratedService`\n",
            "@romainneutron\n",
            "That's a tough one. I totally agree with the PR and limiting the `_format` handling to only attributes. That said, that might break some existing applications (I'm pretty sure that someone somewhere created an app relying on this behavior).\n",
            "Before updating the docs, we first need to decide which way we want to go.\n",
            ":+1: \n",
            "@lsmith77 Well, if you have a look at the implementation of the code you mention, I guess they also got inspiration from Twig but my implementation is more generic and way more powerful.\n",
            "For the component name, I'm open to any other suggestion.\n",
            "@Taluu I mentioned Twig as a reference as the code comes from there, but it's far from being a Twig template, just the expression part of it. Moving the expression as the tag value should indeed be possible:\n\n``` xml\n    <service id= foo  class= Foo >\n        <argument type= expression >\n            service( bar ).getvalue(parameter( value ))\n        </argument>\n    </service>\n```\n",
            "@stof I do agree. The YAML format is far from being explicit with all kind of possible prefixes like `@`, `@@`, `@!`, and probably more I don't remember right now. Using 2 characters can mitigate the problem though, even if not perfect.\n",
            "@stof you mean the Twig `is_granted` function?\n",
            "@benjamindulau The code you are talking about comes from Twig, which I wrote. And then, it was changed and strip-down by various people. The code from Johannes is very specific and licensed under the Apache license. I won't even talk about the other repo as it claims to be MIT but the most of the code is borrowed from Johannes which is not MIT.\n\nFor the supported features, I've listed them in the summary of this PR.\n",
            "As @stof said:\n- complete implementation of basics operators (with a proven precedence algorithm);\n- no need to use eval;\n- possibility to use the evaluator or the compiler;\n- return a single PHP string that can be easily embedded elsewhere.\n",
            "@stof Why do you think that it is a problem to pass an object? For the PHP version, I don't see that as a problem and for the Twig tag, we can do something like `is_granted(expression('...'))`. Sounds simple enough, no?\n",
            "@benjamindulau: I've been discussing this matter with Johannes for quite a few months now, but I did not really had a look at his code; but when I did this week-end, I realized that I don't need to ask anyone to hack my own code, and so I created this new component.\n",
            "I've renamed the component to ExpressionLanguage. I did not choose to use the shorter `Expression` name as qualifying expression is probably important, and because I needed a more descriptive name for the main class as well. The new name works quite well when used in code:\n\n``` php\nuse Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage;\n\n$language = new ExpressionLanguage();\n\n$language->addFunction();\n$language->evaluate();\n$language->compile();\n```\n",
            "@bschussek The ExpressionLanguage component should be agnostic and as you said the fact that it is very close to JavaScript is a big plus. We definitely have support for variables. In the DIC, if you want to access a parameter, you can do so via `parameter('foo')`.\n\nFor the validation, you would do something like:\n\n``` php\n/**\n * @Assert\\Expression( value <= this.getMaxNumberOfLoginAttempts() , message= Too many login attempts. )\n */\nprivate $loginAttempts;\n```\n",
            "I've started the implementation of expressions in the new access control rules. Read the  Using Expression for Security Access Control Rules  section in the PR description for more information. The `allow_if` keyword is up to the discussion (`access` being taken by the JMS bundle, we need to find something else).\n",
            "@Crell I've just created a Gist that demonstrates how you could very easily use the expression language to add conditions in the Symfony routing: https://gist.github.com/fabpot/6433461\n",
            "@lsmith77 Anything based on information available on the Request would be possible.\n@sstok Indeed, it would provide a very flexible routing solution\n\nI've just committed a first version of the implementation in the Routing that works well (with the condition dumped in the PHP file, so without any overhead).\n\nI've updated the PR description with more information about the implementation.\n",
            "@crell With 3584c51, Symfony Router will support conditions out of the box ;)\n",
            "@WouterJ Thanks for having a look at consistency. I need more feedback about the names. That said, I think it does not make sense to have the same name everywhere. The name should reflect what you want to do with the expression, not that the content is an expression. For the routing, the expression is a condition for the route to match (that's why the name is `condition`). For the access rules, the expression defines the condition for the grant access for the path (hence the `allow_if` name). And for the service container, I used `expression` for XML as this is indeed a generic way to inject the result of the evaluation of an expression.\n\nAnyone with better names?\n",
            "@WouterJ Great! I can see that you actually played with it! I'm not happy with `object` but there is no easy way around it as it comes from the expression voter, which can vote on many objects, including the request. But as I do agree with you that this is suboptimal, I'm going to push a patch/hack/whatever-you-call-it to make it possible to use request in this specific case. You're probably right for the `this` variable name and I'm going to rename it to `container`. Thanks for the feedback, much appreciated.\n",
            "@bschussek I've implemented a new constraint that takes an expression. For now, it can only be run on a class and not a property as I don't know how such a constraint on a property could have access to the whole object. Does it sounds good for you?\n\nI've updated the PR description with some more information about how it works.\n",
            "As another example of the usefulness of the expression language component, I've started to work on a new version of the SensioLabs FrameworkExtraBundle: see sensiolabs/SensioFrameworkExtraBundle#238.\n",
            "@Taluu @stof I've moved the expression in the service container configuration to the node value instead of the value attribute. It is indeed much better for consistency.\n",
            "I think I'm done with the technical stuff.\n\nNow, here are some open questions (mostly about names!):\n- `allow_if` name in access control rules, do we want another one?\n- `@=` notation for YAML configs in the SC\n- `condition` name for routes\n- `@Expression` tag name for validation\n",
            "@henrikbjorn Here are some benchs: https://gist.github.com/fabpot/6462069\n",
            "@stof Can you be more precise? You can definitely add some functions with the expression language.\n",
            "@ChristianGaertner This PR does too much. Can you remove the interface and only keep the exceptions changes?\n",
            "Just do everything in this PR as additional commits. We will be able to squash everything later on.\n",
            "I'm -1 on the introduction of the factory.\n",
            "I'm not sure that this is that useful. Most of the time (at least for me), I just click on the toolbar to get access to the profiler for the current request.\n",
            "You can also click on the relevant tab directly in the toolbar, which will open the profiler at the right tab. In that case, both scenarii are the same (if you count the switch from one browser tab to another as an action.)\n",
            "The `@since` tag should reference the first version where the method was added. Changes to the method signature should not change the `@since` tag. ping @bschussek @mvriel\n",
            "looks good to me.\n",
            "He hasn't time for that :)\n",
            "That's weird because `$warmupDir` is created from `$realCacheDir`, so they do have either \\ or /.\n",
            "Which version of DomCrawler are you using?\n",
            "We are not in a hurry. 2.4 end of dev is at the end of September. I haven't had time to have a look at this PR yet, but I will soon.\n",
            "The URL passed to RedirectResponse should be already URL encoded. But as you said, it's not explicitly mentioned anywhere.\n",
            "@lyrixx You should know that Boolean is always written with a capital B.\n",
            "I'm not sure about the cast as we consistently used int instead of integer.\n",
            "What about setting the validation flag on the form itself instead? That way, it would apply on all form fields.\n",
            "The values coming from the query string should already be decoded. I must miss something here.\n",
            "Any feedback on my comment? Can it be closed?\n",
            "I'm not convinced that scopes should be part of the dumper/loader system; until now, XML and YAML files are just about describing the services and parameters of a container.\n",
            "Indeed, the YAML component does not implement the whole specification, but only a subset that is widely used for configuration files. YAML files like you mentioned are not parsed correctly by the current parser and there are no plans to implement this syntax.\n",
            "If someone can implement this without a big refactoring of the current code, and without adding a ton of code, I'm fine with it.\n",
            "I don't see the need for a JSON loader/dumper. First, we already have plenty options, then, and AFAIK, there is no standard for translations in a JSON file, and finally, writing JSON is a PITA.\n",
            "@hacfi Which online tool are you talking about? Any examples?\n",
            "Well, the decision to let Symfony behaves like this has been well thought out at the time we changed the behavior. We faced a challenge: it was either this bug or many other ones that were bigger in my book.\n\nOf course, anyone can prove me wrong by having a look at the code and see if a patch can fix it. But I don't see how we can  fix  this issue and not re-introduce the other ones (everything is covered with tests so if a patch creates a regression here, we will have failing tests).\n",
            "@beberlei Can you please have a look at this PR? Thanks.\n",
            "Looks like a duplicate of #8317\n",
            "Can you add some unit tests that demonstrate the issue? As we have Travis setup to check all major versions of PHP, that would help fix the problem once and for all.\n",
            "Looks like we already have a test for that in #5590 and apparently everything works fine as of PHP 5.3.3.\n",
            "The Travis output shows a lot of  Failed to parse suite .+ stats from  strings.\n",
            "In PHP, arguments as Boolean as hard to understand when using the code: `XXX::do(true, false)`. So, I would rather just keep the `flushOutput()` and `flushErrorOutput()` methods and remove the other ones.\n",
            "I do agree with @Tobion. The framework should not return a 500 for such a problem and should deal with it gracefully. Treating it as being invalid is probably the easiest thing to do.\n",
            "If there is an issue with some versions of PHP, we should update the requirements in the distribution bundle to warn developers.\n",
            "I totally agree with you and I like your feedback. We need more people doing to same to tweak the feature before 2.4... which means that we have still at least 4 months ahead of us. Should be plenty of time.\n",
            "@pvandommelen Can you check that #8946 fixes the problem for you?\n",
            "@pvandommelen You're right, that's why I made another patch after the introduction of the new request finish event: 1b2ef74a\n",
            "ping @bschussek \n",
            "Indeed, the Filesystem class silently ignored errors in 2.2, whereas we throw exceptions now in 2.3. I don't know what to do here. Can we safely ignore such problems when writing files in the cache?\n",
            "This bug is due to 3158c410, which took the wrong approach.\n",
            "That looks wrong to me as you might want to have the exception. In the case of cache generation, we don't care, but it might be of importance somewhere else. The safest is probably just to revert the changes made and keep the Filesystem::dumpFile for BC reasons.\n",
            "@mpdude Having a subclass exception looks overkill to me. This code should be as simple as possible. So, reverting the culprit is probably the best option.\n",
            "DomCrawler does not do anything with \\r as the html() heavy work is done by libxml itself.\n",
            "It was done on purpose. We had to make a choice when writing that part of the code and Twig was definitely the best tool for the job. As such, it's not going to change.\n",
            "Between using Twig or PHP templates.\n",
            "If we were to include this hack, it should also be done in the Twig template.\n\n@bschussek What do you think?\n",
            "For the first point, it should be very easy to add a flush method.\n",
            "Can anyone confirm that #8721 fixed the problem?\n",
            "@leevigraham Can you submit a PR on the docs?\n",
            "@asm89 Yes, the tests for the console need a proper tty to run.\n",
            "@asm89 Are you working on updating this PR?\n",
            "Any news on this PR. If we cannot make it work (especially for the tty issue), then let's close it for now.\n",
            "Any news on this issue? Is it worth doing something about the current state?\n",
            "Our code looks good to me. I don't know what's going on here, but it might be a browser bug.\n",
            "That's indeed an interesting point of view and having a way to relax the internal validation would be a good addition to the component. I'm tagging it as an easy pick as it should be trivial to implement.\n",
            "@craue Correct, that's a new feature that should be done for master.\n",
            "What is the status of this PR @Tobion?\n",
            "@Tobion Can you finish this one?\n",
            "Any news on this one?\n",
            "depends on #5322\n",
            "@bschussek What do you think about this addition?\n",
            "ping @bschussek \n",
            "refs #7183\n",
            "Does this issue still exists in 2.2.2?\n",
            "Can someone fork Symfony SE and make the changes needed to exhibit this issue?\n",
            "@jakzal I've cloned your repo and I'm still not able to reproduce it.\n",
            "Is it still a problem? If so, any way to reproduce it?\n",
            "ping @bschussek \n",
            "ping @bschussek \n",
            "@Jack12816 Remember that this is an Open-Source project and people are working on it for free. I was on vacation recently and had to focus on other things. I'm going to review this PR and give more feedback. Thanks for your patience.\n",
            "Indeed, smaller PRs would make things easier for me. Each time I come back to this PR, I have a hard figuring out where to start first.\n\nI have one important comment about the current state of this patch: breaking BC is not an option anymore. So, for instance, you cannot change the method signature for the ContainerBuilder and other classes (where you have removed the `ResourceInterface` type hint).\n",
            "At this stage, it applies to almost all public methods. For non-@api tagged public methods, we might break BC if this is really required and if it is often used by end users.\n",
            "Indeed, smaller PRs would make things easier for me. Each time I come back to this PR, I have a hard figuring out where to start first.\n\nI have one important comment about the current state of this patch: breaking BC is not an option anymore. So, for instance, you cannot change the method signature for the ContainerBuilder and other classes (where you have removed the `ResourceInterface` type hint).\n",
            "At this stage, it applies to almost all public methods. For non-@api tagged public methods, we might break BC if this is really required and if it is often used by end users.\n",
            "@vicb: we already have `Form::getErrorsAsString()`.\n",
            "The same goes for the `DateType`, where the timezone does not make sense and can lead to issues (like getting back the previous day).\n",
            "Anyone willing to work on a patch?\n",
            "I'm not using hub, but you can just create a PR and reference this issue.\n",
            "I'm not convinced that the extend mechanism is a good thing either. But if the patch is small enough, and if it does not introduce side effects, that might be something that we can add. Not a top priority tough.\n",
            "@Tobion Can you open a PR with just the fixes from ZF? Or if you don't have time, I can do that myself but as there are several other tickets/PRs on the same topic, I'd like to act fast. Thanks.\n",
            "If the only BC break is the one explained in the description, I'm fine with it. Between, please only implement the feature and don't change anything else (like escaping the {}() characters), that makes reviewing easier.\n",
            "As this is about validation, it should be implemented as a Validator, no?\n",
            "IIUC, it might be better to create a CLI command where the input is a logical template name and the output, all matching templates in the order they will be tried.\n",
            "IIRC, it's not possible as we too many isolated layers (templating and Twig) that are able to load templates. Things have changed a bit though, so someone might want to check it.\n",
            "The problem with URL validation (like for emails) is the difference between being  correct  and what people expect. Unfortunately, both are often not compatible.\n",
            "-1 for a lot of reasons but the main two are:\n- Seems too specific\n- What is a word?\n",
            "That's weird as the date is set by the Response constructor (https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Response.php#L145) and set when handling a request in HttpCache (https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/HttpCache/HttpCache.php#L201).\n",
            "Have you tried to print the response in the handle method (`echo $response`) to see if the `Date` header is there? We have a bunch of unit tests for the `Age` header, so there is something special going on here.\n",
            "A fork of the Symfony Standard Edition would definitely help. Thanks.\n",
            "@stof is right and it was done on purpose. Not sure what to do here.\n",
            "I did that to avoid too much overhead and I did not anticipated the possible issues. So, I guess we should always inject that debug event dispatcher (don't remember if there were any other reasons for not doing it).\n",
            "@jakzal Any news on this PR. I would love to have this in 2.3.\n",
            "@jakzal Are you closing because you think there are no good solutions? If that's the case, can we also close #5886 and #4845?\n",
            "@jakzal Would it be possible to only remove the default namespace and keep the other ones? That would be the best option I think.\n",
            "@jakzal see SimonSapin/cssselect@c192fcb\n",
            "or even better: http://www.w3.org/TR/selectors/#casesens\n",
            "@jakzal I think we can just safely remove the `strtolower` call then, no?\n",
            "Any news on this one?\n",
            "@jakzal I need to take a decision about this one: can we rely on auto-detection or do we allow people to register namespaces?\n",
            "The CssSelector and the DomCrawler components must support both XML and HTML.\n",
            "@jakzal Can you make a PR to update the docs?\n",
            "For the inconsistency you found, I would go with option 1. If that's not too complex, I would like to get the fix in this PR, if not, let's create an issue.\n\nAlso, can you add a note in the component CHANGELOG file about this new feature?\n",
            "I'm for option (c)\n",
            "I'm for option (c)\n",
            "we are using base64 images to avoid any external files. This makes the webprofiler independant of Symfony, the full-stack framework, so that it can be used on Drupal or Silex (I have a working prototype that I will publish soon).\n",
            "The other possibility would be to create a font out of the current icons.\n",
            "@bschussek I'm going to revert b604eb7 (any objections?). Another solution should happen in master.\n",
            "reverted.\n",
            "@vicb that would help for sure. thanks.\n",
            "I agree with @vicb that the tests should use a real Couchbase object, because most of the tests here do not test anything.\n",
            "I agree with you but I'm -1 for changing this at this point. Probably something to be done for 3.0\n",
            "the getUriForPath method is used qui frequently. So, again, let's do an overall in 3.0.\n",
            "This is an issue but we need to find the best solution to fix it. Unfortunately, we are not all in agreement with the right thing to do.\n",
            "This is an issue but we need to find the best solution to fix it. Unfortunately, we are not all in agreement with the right thing to do.\n",
            "The approach looks good to me. The only thing I'm not sure about is whether the logic belongs to the cache warmer aggregate or to another (new) class (I tend to think that the latter would be better).\n",
            "So, you fixed Johannes bundle but what if other bundles out there did the same? What about reverting to using the current suffixes?\n",
            "This PR should be updated with the recent changes made to the `cache:clear` command.\n",
            "The approach looks good to me. The only thing I'm not sure about is whether the logic belongs to the cache warmer aggregate or to another (new) class (I tend to think that the latter would be better).\n",
            "So, you fixed Johannes bundle but what if other bundles out there did the same? What about reverting to using the current suffixes?\n",
            "This PR should be updated with the recent changes made to the `cache:clear` command.\n",
            "@dvb yes, please. A patch would even be better! Or at least, clear explanation of what's wrong (because I cannot spot the difference between the two examples given in the summary of this issue). Thanks.\n",
            "That might be something we should discuss for Symfony 3.\n",
            "@hason: What is your use case?\n",
            "Ok, you've just described what the change does, and I understood that. But why would you want to set a specific version for the assets? I cannot think of a real-world use case for that.\n",
            "I'm also -1 on this feature. Bundles should choose unique and comprehensive names for their routes.\n",
            "@sistemanick I suppose that  they  refers to the community, right?\n",
            "@drak submitted a PR. Does everyone agree with it?\n",
            "Can you add some unit tests please?\n",
            "Can you add some unit tests please?\n",
            "From @sun:\n\n \nBased on my findings, the actual cause for Finder's poor PHP adapter performance seems to be that it is using Iterators instead of RecursiveIterators.  This causes the RecursiveIteratorIterator to perform a full (as in total) recursive filesystem scan without limitation, and Finder filters out unwanted items only afterwards.\n\nBy replacing the FilterIterators with RecursiveFilterIterator implementations, the total time for a limited filesystem scan can be easily reduced (cut in half, in my cases), especially when applying directory name or depth filters.\n\nWhat I'm trying to say is \u2014 I'm not sure whether the abstraction into shell adapters is actually needed.  It looks like the actual culprit are the iterator implementations, and fixing those could get the PHP adapter fairly close to the numbers of the shell commands \u2014 whereas it is easily possible that the additional abstraction into adapters unnecessarily cripples performance again.\n\nAre there any plans to re-implement Finder with Recursive*Iterators?\n\n(of course, that would be a major API break)\n\nFWIW, here are the [results of my investigation](http://drupal.org/node/1451320#comment-6702568).\n \n",
            "Have a look at #9003 for a possible generic implementation.\n",
            "@Codepadawan You are only talking about the ACL part of the Symfony Security.\n",
            "I know nothing about the ACL sub-system and that's probably the main issue here ;) I use voters instead. That's why I've just created #8848\n",
            "I agree with @Seldaek \n",
            "Keep in mind that this is a POC. So, no support for the PHP dumper for now, and the same goes for the standalone component discussion. But the POC can probably already tell us that content negociation is tied to both the request and the routing system, so a standalone component is probably not possible.\n",
            "@jfsimon Can you rebase this PR now that #5841 has been merged?\n",
            "ping @beberlei \n",
            "It breaks for instance symfony.com. We have a route like this:\n\n```\n * @Route( /doc/{version}/{section}/{page}/ , name= doc2_shortcut , defaults={ locale = en ,  section =  ,  page =  }, requirements={ page = .* ,  version = (current|[\\d\\.]+(?:\\-DEV|\\-RC\\d+|\\-BETA\\d+)?|master) })\n```\n\nAs you can see, there is a requirement on section and page, but they are both optional.\n\nWith this PR, I have the following exception:\n\n The default value    of the required variable  section  in pattern  /doc/{version}/{section}/{page}/  does not match the requirement  [^/]+ . This route definition makes no sense because this default can neither be used as default for generating URLs nor can it ever be returned by the matching process. You should change the default to something that meets the requirement or remove it. \n",
            "The Apache matcher was broken by b2f5ac8\n",
            "It feels wrong to me. We would have two validation processes now: one for the constraints set on the entity properties and methods, and another one for the constraints set in the form directly. Even if we can explain that, it feels odd. I like the idea of being able to rollback to the previous values is something went wrong... and it should be possible.\n",
            "@stof That's not entirely true. You can have tags outside blocks, but they must not output anything. This template for instance is totally valid:\n\n``` jinja\n{% extends  base  %}\n\n{% set v = [] %}\n{% for i in [1, 2] %}\n    {% do v|merge([i]) %}\n{% endfor %}\n```\n",
            "So, using `block_theme` outside any blocks is indeed valid and the right thing to do.\n",
            "@stof Not useless. Try this:\n\n``` jinja\n\n{% extends  base  %}\n\n{% set v = [] %}\n{% for i in [1, 2] %}\n    {% set v = v|merge([i]) %}\n{% endfor %}\n\n{% block foo %}\n    {{ dump(v) }}\n{% endblock %}\n\nIt will work as expected.\n\nEverything done outside a block is executed first.\n```\n",
            "@bamarni This is indeed a bug.\n",
            "it means  might be , but it won't as 2.2 is in the RC phase now.\n",
            "Can you rebase on master? Also, can you add a note in the CHANGELOG and update the docs accordingly? Thanks.\n",
            "I've thought about this a bit more. I understand where you come from, but I think it is not the right way to fix it. Let me explain why.\n\nGiven the route `new Route('/index.{_format}', array('_format' => 'html'));`, when generating a URL from it, you would probably use something like `path('index', {'_format': format})` in your template. So, the format is the value of the `format` variable. In this case, there no way to remove the variable to keep the previous behavior. The only option would be to set the format to null, which is a duplication of the logic (as the default value is already defined in the route definition).\n\nFurthermore, you now have two valid URLs for the same content (`/index.html` and `/index`), with no way to standardize on one URL as each URL generation can possibly use one or the other.\n",
            "Anyone working on a fix?\n",
            "That's a bug that should be reported on the Swiftmailer bundle repository (symfony/SwiftmailerBundle).\n",
            "@skriker Can you open a ticket on `symfony/symfony-docs` so that we can improve the documentation? And if you can propose a change, that would be event better. Thanks.\n",
            "If the change is not too invasive, it can still be part of 2.3... but it must be ready to merge before Tuesday next week.\n",
            "I doubt it would be the most efficient thing to do. I think #4546 is probably a better idea for when you need to stream large files to the browser.\n",
            "We had this possibility in symfony1 and the implementation did not use eval.\n",
            "@hmonglee no, just arrays.\n",
            "@sstok That's why we did not implemented it in the first place.\n",
            "@bamarni :-1:\n",
            "@bschussek Can you list the current (and probably the only) settings we will have? So that we can discuss the grammar if option 1 is chosen.\n",
            "Wouldn't it better if that was fixed upstream in PHP instead? Can you create a ticket on php.net?\n",
            "ping @Seldaek @stof \n",
            "Creating a CLI tool to cleanup old entries might be a good idea but it won't do anything interesting for when you are using the validation model. So, we would need to come up with a strategy where we remove the oldest entries, not just the expired ones.\n\nFurthermore, this cannot be done in a regular Symfony command as the console application knows nothing about `HttpCache` (as it wraps the regular Kernel).\n\nSo, the best idea would be to create a new interface (`StoreHousekeepingInterface` or something similar) and let each `Store` class implement it.\n\nAnyone willing to investigate this further?\n",
            "The roles are not set in the listener because only the password has been checked (but not the flags like account locked, account expired, ...). But the access listener must then authenticate the token (https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/AccessListener.php#L64).\n",
            "The problematic code has been reverted for now.\n",
            "To be taken care of when we reapply #4619. Thanks for the investigation @sstok \n",
            "FYI, we used to have a `getUserProviderName()` method on `TokenInterface`and it was removed here: df6ffbbf\n",
            "@zeqfreed I need to investigate further the consequences of the current way it works vs the  better  way.\n",
            "What if the new location is not an internal URL?\n\nI'm -1 for this feature.\n",
            "see #6810 for a possible solution. In the new `deliver()` method, we might implement a generic logic to handle redirections.\n",
            "ping @bschussek \n",
            "ping @bschussek \n",
            "What is your use case for that?\n",
            "This is indeed a known limitation. Not sure if this is an issue. See fabpot/Silex#149 for more background about it.\n",
            "Looks good. Can you submit a pull request?\n",
            "@meglio There is no rush as it would not be included before 2.2 anyway.\n",
            "I don't understand why it is useful at all? Can someone explain it? I have closed a PR on the extra framework bundle introducing an @Ajax annotation. \n",
            "@bschussek Can you check the latest version of the code of this PR? Is it mergeable now?\n",
            "@bschussek Can you check the latest version of the code of this PR? Is it mergeable now?\n",
            "@ruimarinho The `padded` option must be removed as the issue in #3490 has now been resolved.\n",
            "@bschussek Can we included this in 2.2?\n",
            "@ruimarinho The `padded` option must be removed as the issue in #3490 has now been resolved.\n",
            "@bschussek Can we included this in 2.2?\n",
            "I think that adding the nodes beforehand is the way to go. What about adding some convenient method to the Crawler to make it easier to add form fields?\n",
            "It is a not so trivial issue to fix (I mean, if we want to do it right and avoid any race condition -- what if for instance a script writes the pidfile and it then dies without removing the pidfile? You need to check that the process is still running and the way to do this depends on the filesystem).\n\n-1 to add this support to Symfony.\n",
            "If we can implement something that works _reliably_ on both Linux and Windows, I'm +1. But without seeing a working implementation, it's difficult to say if I would accept it in core or not.\n",
            "@stof: Yes, as far as it is BC, I think this is a good idea to remove the distinction.\n",
            "Which part would like to add support for (which would be relevant for the Routing component)?\n",
            "Could you be a bit more clear about the regression?\n",
            "AFAIU, this is related to the fact that your user is a Doctrine entity and it has nothing to do with the Security layer itself. The data collector is simple enough, it just gets the roles from the token.\n",
            "Anyone working on this? That would be better if we can ship that with Symfony 2.1.\n",
            "@drak any update?\n",
            "I'm not convinced that this has a real performance impact. It would help if we had some simple benchmarks.\n",
            "I'm not convinced that this has a real performance impact. It would help if we had some simple benchmarks.\n",
            "The TranslatorInterface does not need to know how translation works. Furthermore, catalogues are lazy-loaded. So, there is in fact no way to get all catalogues. What we could do is add a getter for the resources, which are used to create the catalogues. Would that be useful?\n",
            "I haven't heard of anyone wanting this feature fir a very long time. Time to close it?\n",
            "Twig now has a specific escaper for HTML attributes: `html_attr`. But using it will make your case even worse as it escapes many more characters to be on the safe side (the attribute value in HTML5 can be un-quoted too). I don't know what to do here.\n",
            "If a bundle provides assets, they should probably be useful. If for some reasons, you don't want some assets, just delete them as part of your deployment procedure.\n",
            "Anyone with a concrete example? I don't think that anyone has a problem with the current way it works.\n",
            "Anyone willing to work on that. It should be quite easy to implement now that we have the  info  on each node.\n",
            "Why not just reusing the Swiftmailer code, which is also based on the RFC:\n\nhttps://github.com/swiftmailer/swiftmailer/blob/master/lib/classes/Swift/Mime/Grammar.php\nhttps://github.com/swiftmailer/swiftmailer/blob/master/lib/classes/Swift/Validate.php\n",
            "If the code in Swiftmailer works (and I think it does), I highly prefer to use it.\n",
            "For me, the two options would be:\n- Integrate the EmailValidator in Symfony;\n- Fix the Swiftmailer validator and use it in Symfony.\n",
            "I've taken some time to re-read all the comments here (and in #8395), and I've also had another look at the code from all the repositories mentioned in this issue.\n\nFirst of all, I want to thank @egulias for the work he did on this matter, this is much appreciated.\n\nHere are a sum-up of my understanding and some personal thoughts:\n\n#### What does it mean to validate an email in Symfony?\n\nI'm with @Seldaek on this one, the validator that comes with Symfony should validate emails according to the RFCs (there is probably one notable exception for Japanese people -- see below).\n\nIf a developer wants to accept a broader set of emails, he would need to create his own email validator (or extends the Symfony one if possible). It makes sense as he is the only one who knows which non-RFC-compliant email addresses he wants to accept. And just have a look at the issues we have/had about that in this tracker and you will see that we won't be able to satisfy everyone on which non-compliant email addresses we should accept.\n\nSo, for me, **the Symfony email validator MUST validate emails according to the RFCs.**\n\n#### How to integrate the work done by @egulias?\n\nThere are basically 3 options:\n- Integrate the external library into Symfony directly to replace our own current code.\n  \n  **Pros**: This is the easiest path for our users as they don't need to do anything special, no external dependencies, no flags, nothing. It just works.\n  \n  **Cons**: The major drawback is that the validator cannot be easily shared with other projects like Swiftmailer which could also benefit from a strong-RFC-based validator (and depending on the whole Symfony Validator component would not make sense IMO).\n- Add a soft dependency. We keep our current code as is and if the external validator is available, we automatically switch to use it.\n  \n  **Pros**: No BC break as we keep the current code as is and we don't add a new dependency.\n  \n  **Cons**: The validator would have two different behaviors depending on whether the dep is installed or not (which is always a bad idea) and by default, Symfony would still not validate against the RFCs.\n- Add a hard dependency. We add the external validator as a hard dependency of the Validator component.\n  \n  **Pros**: The external library can become a standard in the PHP world, it can evolve independently, and libs like Swiftmailer can also switch to it easily.\n  \n  **Cons**: We add a new dependency that is not needed for users who don't need to validate emails in their app or who don't use the Symfony validators (I'm confident that we talking about very few people here).\n- Same as the previous one but the dep is not added by default in the composer.json file. If the developer does not add it to its own composer.json, we throw an exception.\n\nFor me, **we should add a hard dependency to a good external library to do email validation in Symfony (option 3 or 4).**\n\n#### What about Japanese people?\n\nThe major Japanese cellphone carriers (NTT Docomo and KDDI au) created non RFC-compliant email addresses in the past, such as: `.foo@example.com`, `bar.@example.com`, or `ba...z@example.com`. In Japan, as those email addresses are used by thousands of users, they are accepted by all major MTAs.\n\nWe don't need to support those addresses out of the box as it would be against being RFC-compliant. But I think that we need to find an easy way for Japanese people to accept such email addresses. I have no idea how it would work, but that's something that I wanted to mention as a library doing only email validation should probably take care of that or at least give enough flexibility to be able to add some exceptions like these ones  easily .\n\nFor more information, you can read swiftmailer/swiftmailer#71.\n\n**The library doing email validation should give enough flexibility to the developer wanting to accept some non-compliant email addresses.**\n",
            "@willdurand What @egulias did is not based on regexp but on a lexer/parser.\n",
            "@Seldaek indeed, I like your approach.\n",
            "About the mandatory-optional dependency, let me try to be clearer as we are talking about several composer.json files here:\n- The `symfony/symfony` composer.json file where it would be weird to add a dep on an email validator;\n- The `symfony/validator`  composer.json file where it totally makes sense to have a dep on the email validator;\n- The `symfony/symfony-standard` composer.json file where it might makes sense to have a dep on the email validator.\n",
            "@jahller ... at some point, a validator that just checks for `@` would be enough. I mean, if nobody follows the RFCs anyway, why not just check for stupid typos and trust the user to give a working/valid email address... and yes, I'm asking this question seriously.\n",
            "+1 for @bschussek approach.\n\n@egulias There is still the possibility to include it in 2.4, but code should be available in the next two weeks (before September 30).\n",
            "As I've already said, you can already implement this in your code. I don't see the point in having something in core.\n",
            "no need to make a PR on 2.3 as I merge 2.2 into 2.3 on a regular basis.\n",
            "Can you use the mailing-list for support instead? Thanks.\n",
            "fixed now\n",
            "As there is already a ticket on Composer, there is no need to create another one here.\n",
            "Closing as I don't know what we can do. Obviously, one of your machines has the wrong time and it should be fixed. Nowadays, all machines are configured with an NTP server so it should never be a problem.\n",
            "@bschussek That's already the third issue reported for that problem. Can you have a look at it soon?\n",
            "closing as a duplicate for #8993 \n",
            "ping @bschussek \n",
            "closing as a duplicate for #8989\n",
            "ping @bschussek \n",
            "On the machine where it happens, can you run the following code and give me the output?\n\n``` php\n<?php\n\n// path to the app autoloader or the composer one, does not matter\nrequire_once __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\Form\\Extension\\Validator\\Util\\ServerParams;\n\n$a = new ServerParams();\necho $a->getPostMaxSize(). \\n ;\n```\n",
            "Actually, this one might be more useful:\n\n``` php\n<?php\n\n// path to the app autoloader or the composer one, does not matter\nrequire_once __DIR__.'/vendor/autoload.php';\n\nuse Symfony\\Component\\Form\\Extension\\Validator\\Util\\ServerParams;\n\n$a = new ServerParams();\necho ini_get('post_max_size'). \\n ;\necho $a->getPostMaxSize(). \\n ;\n```\n",
            "might be related to #8254\n",
            "fixed in #9048. Can you confirm?\n",
            "That makes sense. The request URI you get in the sub-request is the one for the ESI, not the one from the main request. But as we don't change the main PHP global variables, the one from $_SERVER is still the one from the main request.\n",
            "I would not recommended to get access to the parent request, and in fact, it's not possible before 2.4. As of 2.4, you can access the parent request via the new request_stack service, but again, I would recommend to not do that (because it would mean that the ESI is not renderable with a reverse proxy -- so I would use render instead of render_esi in this case).\n",
            "@romainneutron\n",
            "That's not a bug. `/app_dev.php?...` does not make sense as there is no path. The minimal path you can ask for is `/` which is the root path for a website.\n",
            "What do you mean? The shortest resource you can ask for in HTTP is `/`.\n",
            "I don't understand. Is `index.php` the Symfony front controller? If yes, then we need a path, which is `/` if empty like in your example. If no, then it's not related to Symfony.\n",
            "The name does not change anything. When you type `http://example.com` in a browser, the request that is sent is `http://example.com/`:\n\n```\nGET / HTTP/1.1\nHost: example.com\n```\n\nYou cannot have an empty path.\n",
            "You should use the mailing-list when asking for support. Thanks.\n",
            "@romainneutron: Do you think that your recent PR addresses this as well?\n",
            "Have a look at #8904 as it should implement what you need.\n",
            "@bschussek Can you have a look at this PR?\n",
            "This PR can only be merged on maser of course as this is a new feature.\n",
            "Closing as it looks like a PHP bug related to `fastcgi_finish_request`, which we indeed are using (see https://bugs.php.net/bug.php?id=62382).\n",
            "Changes to which files?\n",
            "The file is used by PHP for the session mechanism, so it's unrelated to Symfony.\n\nAnyway, you should use the mailing-list for support. This is only for Symfony bugs. Closing now.\n",
            "This was introduced by #8829\n",
            "@Taluu Can you test that #8961 fixes the regression for you?\n",
            "The finder methods modifies the internal state of the current object. So, as the `in()` method is called twice with the same directory, the results are doubled.\n\nThere are two ways to fix the problem:\n- run an `array_unique()` on the dirs passed to `in()`\n- change the Finder to always return a new instance of itself\n\nI'm more in favor of the second option but it could lead to some BC breaks.\n\nIn the meantime, a good rule of thumb is to never re-use a Finder instance.\n",
            "@lyrixx This is exactly what I wrote ;) Closing as there is no good solution without BC breaks.\n",
            "That's to be expected. The client goal is to reproduce what would happen when serving a request from a real client (like a browser). So, a change made on one request does not affect the next one.\n",
            "fixed now #8851 #8852 \n",
            "IIRC, we do have error messages that have some ANSI sequences.\n",
            "So, what's the status of this PR?\n",
            "ok, can you do the same PR on 2.2 and add a test when using a valid tag to prove that it does not mess up those?\n",
            "Everything that is registered as a style on `OutputFormatter`. I think the replacement code already does that. See the `replaceStyle()` method there.\n",
            "Closing as it works fine in Symfony, should be something in the configuration of the project itself. You should use the mailing-list when asking such questions.\n",
            "@ArlingtonHouse I suppose that instead of changing the code (don't know how we would do that anyway), we could add some documentation about how to configure a Symfony application on Amazon EC2. Can you create an issue on the doc repo?\n",
            "ping @romainneutron\n",
            "Documentation is wrong here. You don't need an `@`. It was removed before the release 2.3 to be consistent with other places in the framework. Can you submit a patch to the documentation?\n",
            "@bschussek fixed ;)\n",
            "I would have passed the exception to the `clearToken()` method as the method is called twice and the log should be enabled for both calls. Also, what about changing the visibility of the `clearToken()` to private as this is not used anywhere else.\n\nping @alcaeus  \n",
            "private looks good to me.\n",
            "Done and a new version of 2.3 is on its way.\n",
            "The main differences with the original PR are:\n- I have removed the code that checks is stopwatch is available as the check is already done during compilation\n- I have removed the check for names that was already used as it is not needed (the stopwatch knows how to deal with such cases).\n",
            "I've made further modifications:\n- The stopwatch name can now be any valid expression (more consistent with the other Twig built-in tags)\n- I've removed the possibility to add the name after endstopwatch (because of the previous change and also for more consistency)\n",
            "Looks good to me.\n",
            "duplicates of #8716\n",
            "If this is to take care of a PHP bug, can you mention the bug reference in a comment befire the call and do the same in `src/Symfony/Bundle/FrameworkBundle/Templating/Helper/CodeHelper.php`?\n\nAlso, this should be done in the 2.2 branch as this is a bug fix. Thanks.\n",
            "I have removed all RC/Betas/PRs versions to clean things up a bit. As these versions were only for testing, nobody should use them anymore. If there is a way to programmatically delete these versions from Packagist, I can automate that so that at least, these versions are not referenced anymore in Packagist.\n",
            " Old  tags (RCs and betas) are now removed from the Git repositories, the PEAR channel, and on Packagist.\n\n@stof: The timestamp hack is useful when someone push -f to a repository. But I agree that if a sha1 can be found, it's always a better idea.\n",
            "Can you fork the Symfony Standard Edition and add/modify the minimal amount of code that reproduces this issue as I'm not able to reproduce it myself? Thanks.\n",
            "@cmodijk Looking at the output of phpinfo, the only differences are the version of PHP and the version of APC. So, to be sure that it's not related to APC, can you disable it on both server and confirm that the behavior is still the same? If yes, then it might come from the PHP version. In which case, we know that 5.3.6 and 5.3.13 does not work, but 5.3.20 does.\n\n@jaymecd @samsamm777 Which version of PHP?\n",
            "ok, got it now. This is a PHP bug that was fixed in PHP 5.3.18 and PHP 5.4.8 (see https://bugs.php.net/bug.php?id=61767 and https://bugs.php.net/bug.php?id=60909).\n\nI'm going to add a check in the distribution bundle to warn about this issue.\n",
            "see sensiolabs/SensioDistributionBundle@d552c40\n",
            "@jaymecd What do you mean?\n",
            "@jaymecd The exact same problem? That's weird as PHP 5.5.1 should have the fix for the PHP bugs mentioned above.\n",
            "@jaymecd Can you share the code that fails for you (by forking the Symfony standard edition)?\n",
            "@carlwitt Do you have the JMSDebuggingBundle enabled?\n",
            "These changes cannot be applied to 2.2 as the setRequest won't be called when the request changes.\n",
            "fixed now\n",
            "It does not solve the problem as listeners can be added on the embedded listener directly. The best example being when `addSubscriber()` is called.\n",
            "Closing this PR as it only works for HttpKernel and its children classes (as it relies on the fact there is a `listeners` property.)\n",
            "As mentioned in the blog post, you need to clear the cache manually. We don't add new setting in stable versions except for security issue fixes. Sorry for inconvenience.\n",
            "@stof I know but I don't have any easy way to fix that behavior unfortunately.\n\n@iwankgb In the test env, if the debug flag is set to true, then things are automatically reloaded. If you set the debug flag to false, you should have the same behavior as in prod.\n",
            "Looks like it should be merged in 2.2, right?\n",
            "The process is the following: we merge the patch in the oldest branch where the bug occurs, and then we merge the oldest branches into the newest ones on a regular basis. So, this patch will be available in master as well.\n",
            "duplicate of #8686\n",
            "I've read a lot of things about this attack, but AFAIU, there is nothing specific to Symfony... or at least, nothing we can do to prevent this. The only practical change would be to improve the management of CSRF tokens (there is a discussion in #6554 about that). So, closing it.\n",
            "For reference, here are two interesting articles about this:\n\nhttp://blog.astrumfutura.com/2013/08/breach-attacks-extracting-https-encrypted-data-in-under-a-minute-without-encryption-cracking/\nhttp://blog.ircmaxell.com/2013/08/dont-worry-about-breach.html\n",
            "@hacfi is right. It's not going to he added to Symfony, but adding it to your own code is always possible... even if you should avoid this. The better way would be to think about the best way to inject the value instead.\n",
            "#8956 should have fixed this issue. Can you double-check?\n",
            ":+1:\n",
            "Can you add a test that was failing before your fix?\n",
            "ping @bschussek \n",
            "BrowserKit does not depend on Guzzle.\n",
            "#8547 should fix your issue. Can you confirm?\n",
            "I'm closing this one as everything works fine if the Request object is created correctly. #8956 might also help here.\n",
            "Looks like a lot of additional code for a very slight benefit. Closing.\n",
            "I don't see a wide usage of these new features (like the  Square images are not allowed  for instance). So, I'm -1 on this PR\n",
            "@lmammino Fair enough. Can you add some notes in the component CHANGELOG file?\n",
            "Closing as the configuration is only available when the Kernel is booted, which is not the case when a request is cached.\n",
            "This a known limitation and that' why you need to warm up the cache first.\n",
            "The warm up process is done in a temp directory and swtiched to the real one thanks to a rename.\n",
            "#8879 should fix the issue\n",
            "Can you confirm that reverting the changes made in the `src/Symfony/Component/HttpKernel/Fragment/InlineFragmentRenderer.php` in https://github.com/symfony/symfony/commit/82dbaee06debb743308caa02c85e826adee04356#diff-6 fixes your issue?\n",
            "Can anyone test #8734 and tell me if if fixes the issue?\n",
            "I'm wondering if #8946 fixes this problem. From my understanding, it might.\n",
            "I've just reread the whole thing and I really think that #8946 fixes this issue. Let me explain: I don't see any use case where you would add a listener after handling a request and before handling another one. But without the fix in #8946, the Symfony security system registers the exception listener and the session handler for every request, which could then lead to the problem explained here.\n",
            "Here is what I've done:\n- I've added some functional test to the Standard Edition for the secure section (symfony/symfony-standard#590);\n- Those tests work perfectly fine even if the security is involved;\n- If I modify the Client class (from FrameworkBundle) to remove the shutdown of the Kernel between every request, then, I have the problem described in this issue -- so I suppose that @subsven is not using the Client from FrameworkBundle but perhaps the Client provided by HttpKernel or none at all;\n- After applying the patch from #8946, the test pass again perfectly;\n- My conclusion is that we don't need to change the way the traceable event dispatcher work as it's more related to a misbehaving security layer (which is fixed now).\n\nTo sum up, this problem has been fixed now and there is no need to modify the traceable event dispatcher.\n",
            "I forgot to mention in my previous comment that using the regular event dispatcher would lead to the exact same problem.\n",
            "Which version of Symfony are you using? #7699 might have solved the issue, but it was merged a while ago.\n",
            "@dragonwize Can you fork the Symfony StandardEdition and modify the configuration in a way to reproduce the error? That would help me spot the bug and fix it. Thanks.\n",
            "Can you test the fix in #8999?\n",
            "added in 2.4.\n",
            "I've just tested and it works for me.\n",
            "Is it because of the ChromePHP/FirePHP Monolog handler?\n",
            "Closing this issue as this is related to the default configuration of the Symfony Standard Edition, where I've just posted a pull request to disable the FirPHP/ChromePHP loggers by default.\n",
            "That's already supported: http://symfony.com/doc/master/book/translation.html#twig-templates\n",
            "Closing as the enctype should be added automatically and because you already can add it manually.\n",
            "Closing this issue to focus all discussions in #1581 instead.\n",
            "Closing as we won't support IE8. But if someone works a fix for it, I will happily merge the changes.\n",
            "@stof Thanks, fixed now.\n",
            "Because you need to quote the ` {domain} ` string. If not, it is interpreted as a YAML hash.\n",
            "which makes sense. As domain is a placeholder, you need to pass its value when generating a route, or at least define a default value.\n\nBetween, you should use the mailing-list when asking for support.\n",
            "I agree with @henrikbjorn. I don't want to make things configurable just for the sake of it. The Symfony SE is about conventions and the vendor/ directory name is one of them.\n",
            "Closing as @jfsimon explained the behavior and why we cannot trust information coming from the Request.\n",
            "Please, use the mailing-list for support.\n",
            "I'm -1 on the first request as I don't see why we would do such a check and not some other ones.\n\nFor the second request, we already have such a check as you would have a proper error message if you tryto access the page referenced by the route.\n",
            "I already rejected such a change a long time ago. Making it configurable means that it would break third-party bundles, with no way to make everything work correctly together.\n",
            "This is a configuration issue that is documented in the official doc.\n",
            "Can you ask for support on the mailing-list? Thank you.\n",
            "@bschussek we have two similar reports of this problem. That's something that we need to fix soon.\n",
            "ping @bschussek \n",
            "Relying on the field order on a submitted form is probably **not** a good idea. Even if it seems that PHP does keep the order, there is nothing that guarantee it will always behave this way.\n",
            "ping @drak\n",
            "It has been fixed since then and works as before now (I've just tested to be sure).\n",
            "Options is an array of key/value pairs, where the value is whatever you want, but Symfony treats it as a single value. So, doing a recursive merge is not an option.\n",
            "Why are you calling `save()` yourself? It's done automatically by the framework itself and should not be called in your controller.\n",
            "So, can we close this ticket then?\n",
            "Yes, HTTP 1.1 says that the default charset is ISO-8859-1.\n",
            "ping @romainneutron\n",
            "It's only use in the Debug component.\n",
            "I don't understand why it would be better. Anyway, it works quite well as it is today.\n",
            "No, I merge 2.2 into 2.3 on a regular basis.\n",
            "I don't see any change in 2.2.3 that can explain this. Are you sure you're talking about the right versions of Symfony?\n",
            "@PaddyLock it depends on when you tried that. Can you try now and report if you still have the problem?\n",
            "The first line of option 2 should read: `{% set var = render_hinclude(controller('AppBundle:App:getString')) %}`.\n\nClosing as questions should be asked on the mailing-list instead.\n",
            "Indeed, I did not anticipate the BC break when using PHP reflection. Sorry for the inconvenience, but unfortunately, I don't see what we can do to  fix  this.\n",
            "@jfsimon Can you have a look at this?\n",
            "fixed now\n",
            "I agree with @hacfi \n",
            "fixed now. I've rebuilt the packages, so a `sudo pear install --force symfony2/Finder-beta` should do the trick.\n",
            "It's probably because you added the directory where these commands are stored in your user bash profile... which the Process has no access to.\n",
            "That's not a bug. When you use VALUE_OPTIONAL and if it is not set, Symfony returns the default value set in the definition, which happens to be null. But you can specify whatever you want for the default value.\n",
            "That's not a use case that we want to support in core as it looks really weird. There is probably a better way to achieve what you are trying to do... which we cannot really say with the small snippet of code your provided in the comment above.\n",
            "works for me:\n\n``` php\nuse Symfony\\Component\\DomCrawler\\Crawler;\n\n$crawler = new Crawler(null, 'http://example.com/');\n$crawler->addContent(<<<EOF\n<html>\n    <form action= # >\n        <input type= checkbox  checked= checked  name= foo  value= foo  />\n        <input type= checkbox  name= bar  value= bar  />\n    </form>\n</html>\nEOF\n);\n$form = $crawler->filter('form')->form();\nvar_export($form['foo']->getValue());\nvar_export($form['bar']->getValue());\n\n```\n",
            "Closing as this is a misconfiguration of the project, and not a problem with Symfony itself.\n",
            "ping @bschussek\n",
            "Closing as there is an issue for the docs now.\n",
            "duplicates of #8108\n",
            "Closing as there is not feedback from the reporter.\n",
            "Closing as this is more a configuration problem than an issue with the PHP code. Perhaps a note somewhere in the documentation would help?\n",
            "fixed now\n",
            "which Symfony version?\n",
            "Without more information, that's almost impossible to help you. Anyway, support should be asked on the mailing-list.\n",
            "OMG! Fixed now.\n",
            "Closing as modifying a DOM is not the goal of this component. Perhaps the wording in the docs should be changed to make it clearer.\n",
            "Not sure it makes sense for us. We do know all our sub-namespaces, so we know when there can be ambiguities. Any issues with our current definitions?\n",
            "I doubt that this is going to be faster than our current implementation that skips is already organized based on common prefixes. Also, routes have a priority; that's something that is not supported in a Trie AFAIK. Anyway, if someone want to give it a try...\n",
            "Our current matching code (the one created by PhpDumper) is indeed quite powerful already and very well optimized.\n",
            "Looks like a no-brainer to me.\n",
            "Skipping the test and adding a note in the code is probably the best thing to do. Can you work on that?\n",
            "You need to send your questions on the Symfony mailing-list. Thanks.\n",
            "For the Resources directory, I would **copy** to Core (as Http depends on Core), deprecate the old location, and remove it in 3.0. In the meantime, we must ensure that both Resources directory are kept in sync.\n",
            "Closing in favor of #9064\n",
            "closing in favor of #9055\n",
            "So, what is the status of this one? Does it work? It not, let's close it.\n",
            "closing in favor of #9068\n",
            "The 2 suggestions make sense.\n",
            "@bschussek sorry, I thought you were waiting for some sort of feedback first. Merging now.\n",
            "We are using fluent methods whenever a class is used as a  builder , like the finder for instance or when defining a DIC definition. For the event dispatcher, I don't see the need for a fluent interface, especially on the remove method, which is rarely used, and probably never in the context of fluent calls.\n\nCan you explain your specific usage?\n",
            "Closing as we are using fluent interfaces on non-builder classes.\n",
            "We chose to enforce the convention a very long time ago to be able to throw meaningful exceptions about missing bundles or missing configuration for a bundle. If you don't want to follow the convention, overrirde the `getContainerExtension()` like you did. But I fail to see how this is useful.\n",
            "You should use the mailing-list for support.\n",
            "Throwing an exception is a BC break. I think it makes sense to throw an exception on a running / non-run process , but this needs to be done on master instead.\n",
            "Managing duplicate translations is generally one of the main feature of translation tools.\n",
            "No, it means that this is probably not something we need to take care in Symfony as we won't be able to support it for all the loaders. XLiff for instance (correct me if I'm wrong) does not support this feature.\n",
            "If the feature would be restricted to just a few loaders, I'm definitely not interested (and again, tools should support what you describe out of the box)\n",
            "By tools, I mean applications and software that takes abstract the translation process. So, instead of hand-editing the files, you edit them via a tool that takes care of duplicates for you.\n\nFor format like XLIFF and Gettext (and probably others), I'm pretty sure that there is no support for inheritance.\n",
            "Closing in favor of #8797\n",
            "We don't have a bootstrap file and it would have to be duplicated for all components/bundles/bridges. I think it's not worth it.\n",
            "closing in favor of #8821\n",
            "Actually, I can easily merge any PR in any branch. I have a tool that does all the work for me (it can also squash the commits when needed). Of course, doing a PR on the right branch is always a better idea because it avoids headaches when there are some conflicts.\n",
            "@drak that's a very ugly piece of code... which I would not really be proud to share.\n",
            "Closing as this is a doc problem for which a PR was merged.\n",
            "This one breaks the exception controller as it expects a `$format` argument to be available. Closing in favor of #8819\n",
            "Not sure how this could be tested easily.\n",
            "This was discussed a while ago and rejected, see #2816\n",
            "This PR fixes the consequences of a problem, not the root cause. We should first understand why an empty class is being required.\n",
            "Thanks.\n",
            "By definition, beta and RC tags are transient; they are only created for giving an easy way for developers to test new versions. That said, Composer should cope with that pretty easily as the composer.lock contains the timestamp of the tag and tries to reset to the nearest sha1. It was suggested in another issue to also change Composer so that it also stores the sha1 directly.\n",
            "Closing as nobody else ever had this issue and it's not clear how we can reproduce the error.\n",
            "@muratbeser Can you tell us more about which configuration parameters you set with a windows path?\n",
            "You should use the mailing-list for questions.\n",
            "done\n",
            "No, there is no plan. We did test doing that but with nothing significant enough to bother with the overhead to maintain 2 versions of the code base.\n",
            "Merged now. Can you check the additional changes needed in 2.3 and send a PR? Thanks.\n\nhmm, on my computer, this PR slows down the Process unit tests **a lot** and produces some output:\n\n```\nPHPUnit 3.7.21 by Sebastian Bergmann.\n\nConfiguration read from /Users/fabien/Code/github/symfony/symfony/phpunit.xml.dist\n\nSS...................................SS........................  63 / 173 ( 36%)\n....S...............S........................sh: line 0: echo: write error: Broken pipe\n.........S........ 126 / 173 ( 72%)\n............................................S..\n\nTime: 01:41, Memory: 105.75Mb\n\nOK, but incomplete or skipped tests!\nTests: 173, Assertions: 379, Skipped: 8.\n```\n",
            "In the ticket, you say that the issue is also present in 2.1. Why not fix 2.2 instead then?\n",
            "@bronze1man I agree that my patch does not preserve priorities and that it would not fix the problem for the test you added, but your test case never happens in real-life, does it?\n",
            "@marcj that's already available in the symfony/validator repo (see symfony/Validator@ff77062\n",
            "The ~2.2 constraint excludes 2.4 as it is not stable yet.\n\n@aranw Can you paste your composer.json file?\n",
            "That's weird. Such a Composer file should not install Symfony 2.4. In fact, I've just tested to install those dependencies, and everything works as expected (Symfony 2.3 is installed). Here is the output of `composer -i`\n\n```\nmonolog/monolog             1.6.0             Sends your logs to files, sockets, inboxes, databases and various web services\npimple/pimple               v1.0.2            Pimple is a simple Dependency Injection Container for PHP 5.3\npsr/log                     1.0.0             Common interface for logging libraries\nraven/raven                 0.6.0             A PHP client for Sentry (http://getsentry.com)\nsilex/silex                 1.0.x-dev 86d0410 The PHP micro-framework based on the Symfony2 Components\nsilex/web-profiler          dev-master v1.0.1 A WebProfiler for Silex\nswiftmailer/swiftmailer     v5.0.1            Swiftmailer, free feature-rich PHP mailer\nsymfony/class-loader        v2.3.3            Symfony ClassLoader Component\nsymfony/config              v2.3.3            Symfony Config Component\nsymfony/event-dispatcher    v2.3.3            Symfony EventDispatcher Component\nsymfony/filesystem          v2.3.3            Symfony Filesystem Component\nsymfony/form                v2.3.3            Symfony Form Component\nsymfony/http-foundation     v2.2.5            Symfony HttpFoundation Component\nsymfony/http-kernel         v2.2.5            Symfony HttpKernel Component\nsymfony/icu                 v1.2.0            Contains an excerpt of the ICU data and classes to load it.\nsymfony/intl                v2.3.3            A PHP replacement layer for the C intl extension that includes additional data from the ICU library.\nsymfony/monolog-bridge      v2.3.3            Symfony Monolog Bridge\nsymfony/options-resolver    v2.3.3            Symfony OptionsResolver Component\nsymfony/property-access     v2.3.3            Symfony PropertyAccess Component\nsymfony/routing             v2.2.5            Symfony Routing Component\nsymfony/security            v2.3.3            Symfony Security Component\nsymfony/stopwatch           v2.3.3            Symfony Stopwatch Component\nsymfony/translation         v2.3.3            Symfony Translation Component\nsymfony/twig-bridge         v2.2.5            Symfony Twig Bridge\nsymfony/validator           v2.3.3            Symfony Validator Component\nsymfony/web-profiler-bundle 2.2.x-dev 28d38b7 Symfony WebProfilerBundle\ntwig/twig                   v1.13.2           Twig, the flexible, fast, and secure template language for PHP\n```\n",
            "Closing as there is no feedback and it works for me.\n",
            "That's something that we cannot change anymore at this stage without breaking BC everywhere.\n",
            "Closing as there is a bundle that does that for you, and because the use case you are mentioning can indeed be done in other ways.\n",
            "Logging the previous exceptions is an option but I think we just need to log the **first** exception instead of the **last** one as done currently. I would say that this is a bug that should be fixed fast as this feature was introduced in 2.3.\n",
            "I don't think that being able to make the log levels configurable is a good idea.\n\nBut I totally agree the 404 errors should probably not be at the `error` level. I'm +1 for changing the log level of 404 errors.\n",
            "As this is a new method in 2.3, I would rather add an argument to the `html()` method to be able to switch from HTML to XML. What do you think?\n\nPerhaps that we should then find another name for the method itself (instead of `html`).\n",
            "fixed by #8800\n",
            "#7939 has been merged now.\n",
            "If this is a but fix with no BC beaks, this PR should be merged into 2.2, right?\n",
            "#7939 has been merged now.\n",
            "If this is a but fix with no BC beaks, this PR should be merged into 2.2, right?\n",
            "Really depends on the added complexity.\n\nBut you can look at it as being a new feature or a bug fix; in the past, for similar cases, we always opted to consider such things as new features instead of bug fixes.\n",
            "Is it really worth it? Unfortunately, this will probably cause some BC breaks.\n",
            "Closing as it will probably break code for a very small benefit.\n",
            "Closing as we don't need this tag anymore.\n",
            "I think this is a regression introduced when we refactored the shortcut feature to fix some bugs. @Seldaek did that IIRC.\n",
            "which version of 2.1 do you have? I've just tested and it works for me.\n",
            "fixed in the 2.1 branch\n",
            "Closing in favor of #7713\n",
            "Closing as there is no feedback anymore and things seems to be working for everyone now.\n",
            "This has been implemented in #6474\n",
            "We've just adding support for IP ranges, which should be enough and don't have the performance impact that DNS resolving has.\n",
            "@lazyhammer I'd like to avoid adding more complexity if IP ranges work.\n",
            "And you can do the resolution yourself before configuring the trusted proxies:\n\n$ip = gethostbyname('example.com');\nRequest::setTrustedProxies(array($ip));\n",
            "To answer your question, yes, HttpCache acts as any other proxy, so it should be trusted explicitely.\n\nClosing this ticket as there are ways to use DNS names instead of IP as explained in the comments. Adding support for DNS names would add complexity and would have a performance impact (doing the resolution once when the container is compiled would defeat the purpose of the change).\n",
            "This is unfortunately something that happens quite often.\n",
            "Thanks for working on smaller PRs. That's much appreciated, and it definitely makes things easier.\n\nUnfortunately, this one cannot be merged as it would introduce a hard dependency between HttpKernel and Config for instance, which we must avoid as some projects using Symfony do not want to depend on Config (like Drupal for instance).\n\nAs a rule of thumb, code duplication in Symfony exists for a reason, so refactoring like this one will almost always be rejected.\n",
            "What about moving `CacheFileUtils::dumpInFile()` to the Filsystem component class instead? And remove the other two methods that are not used anyway.\n",
            "Adding the Filesystem component as a dep to Config is not a problem.\n",
            "For the method name in Filesystem, we should probably come up with a better name than `dumpInFile`. `dumpFile` or `storeFile` should be enough, no?\n",
            "Except for the getMetaFile method, everything else looks good to me. Can you also add a note in the Filesystem CHANGELOG?\n",
            "You are right, you need to add the filesystem component as a required dep for the config component.\n",
            "Nervermind, I'm doing to do it after the merge.\n",
            "Looks like a hack to me that could lead to difficult to debug issues. In the second example, I would never imagine that the returned value of `get` would be a dummy instance.\n",
            "As this is a new feature, it must be rebased on master.\n",
            "You probably need to tell us more about your app and of you accept user input for a catalogue name. But anyway, can you discuss this matter on the mailing-list? Thanks.\n",
            "Both PRs referenced by @bschussek have been merged now. And Yes, this is a BC break.\n",
            "Having a `getConnection()` method seems fine to me.\n",
            "Closing as there is no feedback from the reporter.\n",
            "The Finder is an iterator, so it does  not keep all the files in memory. If you want to access something, you need to convert it to an array first with `iterator_to_array`\n",
            "@drak: thanks for the help. I can now reproduce the issue and I know why it behaves like that. That's a bug and I'm going to provide a fix soon.\n",
            "@drak Can you confirm that #7697 fixes your issue?\n",
            "I'm (obviously) -1 to this change. I agree with @drak that doing this just to fix a problem in the way we collect data is wrong.\n\nThen, we decided a long time ago to use the current approach (which was really the Doctrine approach), so, that's not to change it now just before the first LTS.\n\nWe might revisit this for 3.0, but as this is in a very long time, I'm closing this PR for now.\n",
            "That's not supported at the moment and I'm not sure we want to support that anyway. The hostname feature is there to be able to manage sub-domains which are mostly always using the same port. So, I'm closing it for now.\n",
            "IIRC, the Drupal guys don't like the fact that we set the dispatcher and the event each time for performance reasons. So, this PR is going into the right direction (at least for them), but what about also moving the event name?\n\nping @crell\n",
            "Breaking BC for the event dispatcher in 2.3 is out of question.\n",
            "Closing in favor of #7852\n",
            "IIRC, the Drupal guys don't like the fact that we set the dispatcher and the event each time for performance reasons. So, this PR is going into the right direction (at least for them), but what about also moving the event name?\n\nping @crell\n",
            "Breaking BC for the event dispatcher in 2.3 is out of question.\n",
            "Closing in favor of #7852\n",
            "have a look at #7618 for the fix.\n",
            "This is the expected behavior as a sub-request (an internal one or an ESI one) is totally independent of the  master  request (as explained in #7138). The fact that it kind of worked in 2.1 was actually a bug.\n\nThe reasonning behind this is that at some point you might want to switch from the internal strategy to the ESI or HInclude one, and everything should still work as expected.\n",
            "Just for the record, we now have checks that ensure that things are not messed up. So, it should not happen again.\n",
            "You're right. Can you submit a pull request?\n",
            "We're not going to change this name at this point. FYI, we had the same discussion back then.\n",
            "Closing as support should be done on the mailing-list and also because it works for everyone else. There should be a problem in the composer deps.\n",
            "Can you use the mailing-list when asking for support? That's better as Github is only used for new features and bugs. Thanks.\n",
            "There is something else going on. I've just tried with the Symfony Standard Edition 2.2, and Symfony catches fatal errors and notices in the dev env.\n",
            "Looks like a duplicate of #8703 in which case this is a PHP bug. Feel free to reopen is the bug is different.\n",
            "which version of Symfony are you using?\n",
            "Closing borked PR.\n",
            "ping @jfsimon\n",
            "fixed. We are still investigating the reasons.\n",
            "that's probably a good idea but not something we can change at this point. So, I'm closing this ticket.\n",
            "It's not just about BC breaks, it's also about added complexity. I'm very reluctant to make changes to the HttpKernel stuff and the way it works as many people are relying on it and because I like the fact that it is a very easy to understand code at the moment.\n",
            "@igorw I totally agree with you... but sometimes, mostly to ease the migration from an old code base to Symfony, this is needed. In fact, I was about to reject the changes we made recently about this, but then I realized that it would help a lot with some of our customers. Moreover, the possibility to override the Request class is documented. So, you should not extend the Request class, but we (unfortunately) should cover this use case.\n",
            "As overriding the Request class is quite an edge case, I propose something that is less intrusive and still flexible enough: see #8957\n",
            "My idea with the other PR was to reduce the impact of supporting this feature as it is really just an edge case and I'm not comfortable with changing so many things just for that.\n",
            "Also, with my hacks, all current bundles creating Requests will be  fixed  automatically. That's not the case with this PR\n",
            "As this is really just to fix some edge cases for people moving to Symfony2, I really don't like this PR. So, we can either merge mine or close it as a won't fix.\n",
            "@igorw I totally agree with you... but sometimes, mostly to ease the migration from an old code base to Symfony, this is needed. In fact, I was about to reject the changes we made recently about this, but then I realized that it would help a lot with some of our customers. Moreover, the possibility to override the Request class is documented. So, you should not extend the Request class, but we (unfortunately) should cover this use case.\n",
            "As overriding the Request class is quite an edge case, I propose something that is less intrusive and still flexible enough: see #8957\n",
            "My idea with the other PR was to reduce the impact of supporting this feature as it is really just an edge case and I'm not comfortable with changing so many things just for that.\n",
            "Also, with my hacks, all current bundles creating Requests will be  fixed  automatically. That's not the case with this PR\n",
            "As this is really just to fix some edge cases for people moving to Symfony2, I really don't like this PR. So, we can either merge mine or close it as a won't fix.\n",
            "Closing as a duplicate\n",
            "It's about to be fixed. probably in less than 20 minutes from now.\n",
            "Closing in favor of #7476\n",
            "Closing as we won't support IE8 anyway. That's a developer tool and if I have a look at the symfony.com stats, IE (all versions) is less than 1%.\n",
            "The PR has been merged, so this issue has been fixed.\n",
            "done. It will be available in the next minor versions.\n",
            "We already have a check in the Symfony Standard Edition: https://github.com/symfony/symfony-standard/blob/master/app/SymfonyRequirements.php#L514\n",
            "You should configure your app with `Request::setTrustedHeaderName()`  or configure the http port in the configuration.\n",
            "Done. This is explained here: https://github.com/symfony/symfony-docs/pull/2337/files\n\nAnd you see the first merged PR that uses Git notes here: https://github.com/symfony/symfony/commit/883bf909b151935faf7d8c0549e6540af88e364f\n",
            "@stof: I think Github should fix their UI instead.\n",
            "Fixed. Will be available in the minor versions.\n",
            "@advancingu Downgrading to 2.2.2 is the way to go for now. I'm still investigating the issue.\n",
            "Closing as support should be done via the mailing-list.\n",
            "@henrikbjorn I forgot that this feature was already added in master. In any case, I would have merged this only on master as this is a new feature. I've merged your new unit tests though.\n",
            "Using a service to return a scalar is clearly wrong IMO. That being said, except for the already suggested workaround I don't any other ideas.\n",
            "Closing as using a service to return a non-object is not supported and won't be supported. And no, I won't guarantee that a future refactoring won't break this hack... as this is clearly a hack.\n",
            "@lsmith77 I've never had this use case myself, probably because this is not the right way to solve the underlying problem. The first step would be to clearly define the use cases and see if this is legitimate to use the service container to solve them.\n",
            "I think I might have a very simple and elegant solution to this feature request. Have a look at #8850 at tell me if it does what you need (this is just of POC, so a lot of details still need to be ironed out but you should get the idea).\n",
            "@gnutix sure\n",
            "probably related to #1991\n",
            "Closing in favor of #7799\n",
            "This is actually a documentation problemas each checkbox is totally independent as you mentioned in your report. I've opened a PR to fix the docs.\n",
            "duplicate of #5322 \n",
            "Closing as support should happen on the mailing-list.\n",
            "fixed by #7179\n",
            "Done, it will be available for the next minor version.\n",
            "Looks like a bug indeed.\n",
            "This has been reported many times, and the current behavior is correct.\n",
            "We decided a long time ago to only support Twig for exceptions, the web profiler, ... If you are using PHP as a templating system, you should add the Twig templating engine for those features. If not, I fear the only option would be for you to add support in your own project.\n",
            "This is (unfortunately) a known bug that has been fixed now: sensio/SensioFrameworkExtraBundle@75d0f63\n",
            "fixed some time ago.\n",
            "I'm :-1: for such a change. What do you think @kriswallsmith?\n",
            "Closing as at least 3 main core contributors are against this change.\n",
            "Can you rebase on master?\n",
            "Moving `DelegatingEngine::getEngine()` to public seems reasonable to me.\n",
            "docs have been fixed now.\n",
            "fixed by #7232 \n",
            "Closing as there is no feedback and we have a PR on this topic.\n",
            "Looks like the same as #3551, no?\n",
            "Closing in favor of a documentation update: see symfony/symfony-docs#2529\n",
            "You should report this issue to the Doctrine data fixtures repository as the Loader in the Doctrine bridge does nothing more than injecting the container into fixtures.\n",
            "Can you use the mailing-list to discuss your problem? That's the preferred way. Thanks.\n",
            "Closing this issue as we won't break BC now.\n",
            "fixed in #7189\n",
            "No need to create another PR as I will merge it on the 2.2 branch (with no overhead for me).\n",
            "I have a script that automatically switches a PR from one branch to another (of course, if there are some conflicts, that's not possible).\n",
            "@jfsimon Can you check this PR?\n",
            "@Jack12816 Can you rebase on the 2.2 branch as it does not merge cleanly right now. Thanks.\n",
            "Does not work for me. CAn you create a new PR based on 2.2?\n",
            "You can get the session via the request quite easily, and you also get access to the User instead of the context, which is what people need most of the time. We have carefully chosen the methods available in the base controller, and we won't add many more.\n",
            "@ErichHartmann Your code should work as expected. What does not work is when your render this controller as an ESI or HInclude for instance.\n\nThe possibility to use objects for the inline rendering strategy was fixed before the release of 2.2.0 (see #6942). I've just tried just to double-check, and it works well.\n\nIf it does not work for you, can you fork the Symfony Standard Edition and add the minimal amount of code there to exhibit the issue that you have?\n",
            "@codeMonkeysBe I've just tested with a combination of objects and scalars and it works for me. So, I'm pretty sure that there is something else going on but I don't know what it is.\n",
            "@dalibor983 You are right but for the inline strategy, passing objects works. I've just added a unit test to prove that: cc75831\n\n@codeMonkeysBe Thanks, I'm going to have a look at your code.\n",
            "@codeMonkeysBe Thanks for your code. I'm now able to reproduce your issue.\n\n@Koc That's why tests are not always the panacea ;) Now that I have a reproducible test case, I will be able to investiguate further.\n",
            "ok, I've identified the problem and I think I have a working patch. Can you test again after applying this patch (https://github.com/symfony/symfony/pull/8438.patch)?\n",
            "That's because the routes must have unique names. In your example, they are both named `data_save`.\n",
            "Can you try to raise the max_nesting_level to say 1000 to see if you actually have an infinite recursion? Or even better, can you check that the problem does (not) occur when disabling XDebug?\n",
            "So, I'm closing this issue as this is related to the too low value of the xdebug nesting level (unfortunately, the default value of 100 is really too small). Thanks for taking the time to actually validate my guess.\n",
            "Yes, my php.ini has this setting set to 1000.\n",
            "@stof: done\n",
            "@craue Can you check that #7334 fixes your issue?\n",
            "The changelogs are updated when we release a new version only.\n",
            "@romainneutron Can you have a look at this?\n",
            "Can you post this on the user mailing-list where you can get support? Thanks.\n",
            "@raphox Does it mean that we can close this issue?\n",
            "@nomack84 The PR you reference is about a different issue.\n\n@tristanbes I've just tested and it works for me. Actually, the `LocaleListener` has not been modified since 2.1. Can you try to reproduce it with a fresh Symfony Standard Edition and publish the diff with a case where it does not work?\n",
            "Can you create a fork of the standard edition and write the minimal amount of code that reproduces the issue? Because I don't see why something that used to work in 2.1 does not work in 2.2 anymore. #7007 fixes an issue that was also present in 2.1.\n\nThanks\n",
            "I'm going to have a look at this issue, but please, no need to ping everything other day; by the way, you can also investigate on your side to see if you can come up with a fix.\n",
            "Using your fork of symfony-standard, I've downgraded to Symfony 2.1.7 and the behavior is exactly the same (meaning that the same bug exists). So, as you mentioned in the description of this issue that what it used to work in 2.1 and does not work anymore in 2.2, your fork of symfony-standard does not exhibit your issue but a different one, which indeed will probably be fixed by #7007.\n",
            "Can you try #7099 as a quick fix? Does it work for your project?\n",
            "Can you confirm that the bug also exist in 2.1? Or at least that your application behave in the same way on 2.1 and 2.2 (without the patch of course)? That's quite important to know as if the app behaves differently, it means that there might be another bug.\n",
            "@nomack84 Can you also confirm that the bug you have is also present in 2.1?\n",
            "It can only be for 2.3 as 2.2 is in the RC phase now.\n",
            "Closing as a workaround has been found now.\n",
            "This cannot be related to #6995 as your test does not involve any HttpFoundation classes.\n",
            "See 5bf6d7e for how to keep authentication between requests.\n",
            "@sstok: Again, your test was not passing on any Symfony version. So #6995 is irrelevant here. If there is a bug (and apparently there is one), we need to find another test that proves it.\n",
            "What I meant is that the bug might still exist, and so, we probably need to figure it out.\n",
            "As this is a new feature, it should into master.\n",
            "@vicb: Please stop using acronyms that nobody understands as it makes your comments just unreadable and ununderstandable.\n",
            "Tests do not pass for me:\n\n```\nThere was 1 failure:\n\n1) Symfony\\Component\\Finder\\Tests\\FinderTest::testInWithStreamsAndRealpaths with data set #2 (Symfony\\Component\\Finder\\Finder)\nFailed asserting that false is true.\n\n.../src/Symfony/Component/Finder/Tests/FinderTest.php:349\n```\n",
            "Can you use the mailing-list for support (and probably post it to the Doctrine mailing-list)? Thanks.\n",
            "@craue The template you mentioned above behaves  correctly  in 2.2+. If you want to override a template with the same name as another one, you need to use the trick described in the Twig documentation: http://twig.sensiolabs.org/doc/recipes.html#overriding-a-template-that-also-extends-itself\n",
            "Why not override the configuration of the service you want to replace? Can you explain the use case?\n",
            "Let's just ignore the `Set-Cookie` header if it is empty.\n",
            "@bendavies Indeed, I'm going to merge it to the 2.1 branch\n",
            "I'm against this change for many reasons:\n- we have better things to do\n- the speed difference does not matter\n- I don't want to encourage random changes for no good reasons\n- using + instead of array_replace makes the code less readable (just have a look at the code in the gist, the + version seems unintuitive to me)\n",
            "This PR is transparent as far as the services are concerned, which is one of the primary characteristics of the service container, the objects must not know that they are managed by the service container. How would proxy objects work with listeners?\n",
            "On Twitter, someone suggested volatile instead of contagious?\n",
            "@lsmith77: Have a look at the PR, my solution is much simpler than that, no moving parts.\n",
            "On Twitter still, someone suggests  synchronized \n",
            "@merk: `isSynchronized()` sounds good to me but `isPropagatable()` sounds weird, no?\n",
            "I've just updated the code to use synchronized instead of contagious.\n",
            "@lsmith77: I don't understand what you are saying. The goal of this PR is simple: be sure that a service depending on the Request object always has the right/current one. To achieve this, each time the Request changes, one method is called on each object depending on the Request to update it. That's it. You can't do less than that, right? So, I fail to see how proxy services could be faster than that.\n\nAnother advantage of this PR is that we can do something similar in Pimple (fabpot/Pimple#64), so that these services could work out of the box with both the Symfony DIC and Pimple. That's a big win too.\n\nI'm not saying that proxies are not useful, but that's a totally different topic for me.\n\nAm I missing something here?\n",
            "You might have one proxy, but each call to a method on this proxy is then forwarded to the real object, right?\n",
            "You seem to forget some other important facts like the compatibility with Pimple. For the record, I'm not sold yet on introducing proxies in the DIC.\n",
            "@beberlei: How would that work ... without breaking BC?\n",
            "@beberlei: That's indeed a nice idea. I've started to implement this idea but I quickly realized that it won't work for a simple reason: whenever a new request is entered or leaved, some services need be  notified  of the change and using a registry won't trigger that notification.\n\nTake for instance the locale listener. Whenever a new (master) request is handled, the request event is triggered and we can change the locale accordingly. The same goes for when we handle a sub-request. But our current problem is that there is no way to reset the locale to the master request value when a sub-request is finished. This PR addresses this issue as the `setRequest()` method is called whenever a request is entered **and** leaved.\n\nWhile writing this comment, I'm slowly realizing that there might be a third possibility to solve our issue: adding a new event whenever a request scope is leaved. I will try to implement that today to see how it goes.\n",
            "ok, just to continue my monologue, I still prefer the approach of this PR instead of adding another event for the following reasons:\n- it is more transparent to the user (having a setter like `setRequest()` is simple enough and semantically more correct);\n- easy to explain and document (especially as for the Request everything just works);\n- adding another event means that classes that need the Request needs to listen to 2 events just to get the request (that adds a dependency and it hides the real intent).\n",
            "It might seem obvious today that the Request is not a service, but back in the days, I fought hard to avoid the introduction of the Response as a service as well. So, we only have half of a problem today ;)\n\nThe Request object is indeed a very special  service , or put another way, this is the only data object that is/should be managed by the service container. Why? to have the ability to inject the Request into other services.\n\nBut just to be able to get the Request from the DIC, we had to introduce a lot of different notions: the request scope, synchronized services, strict arguments, synthetic services, and perhaps more. Even if all those concepts might be of interest by themselves, the truth is that they are not that often useful when managing  regular  services (and Silex/Pimple is probably the best demonstration of that).\n\nBut as of this PR, I think we now have a working model for managing the Request and its life-cycle in the context of the DIC. I say  working model  because an average developer can now depend on the Request without knowing anything about the internals.\n\nThat being said, I'm the first to recognize that things are complex behind the scene just for this one object (even if this is probably the most important one). I also agree that having so many features just to be able to easily work with the Request is a strong smell that something is probably wrong.\n\nSo, what about @beberlei proposal? Here are my first thoughts:\n- It seems that it would fix a lot of our problems quite nicely and easily, but we would loose one thing that we have as of 2.3: the ability to inject the Request like any other service (except the possibility to inject it in a constructor which seems like a very small drawback).\n- I tried this approach when I was working on this PR and I hit a wall quite fast. But IIRC, it was because I didn't want to inject a request registry instead of the real Request.\n- Backward compatibility is a big concern here. Not that introducing a request registry would break BC, but we would probably have to keep everything we already have (including the synchronized services) for the foreseeable future anyway. So the question is if it makes sense to maintain two ways of doing things.\n- Related to the previous point, this new way will need to be documented along side the current way. We will need to make it easy to grasp and not confusing for people used to the old way. That should probably be not too difficult though.\n\nAs many of you probably know now, I'm not that good at thinking/talking about concepts without real/working code. So, I will play with @beberlei code in the next couple of days and get back here with my findings and thoughts (and I highly encourage others to do the same to get familiar with it). Then, we will list the pros and the cons of both approaches and that will allow us to discuss what to do for 2.3 and/or 3.0.\n\nEnough for now, let's go back to the code now!\n",
            "@bschussek Whatever the decision we take, we won't revert this PR as it fixes bugs with our current approach. And as we would have to keep the current way for BC reasons, this bug fix should stay in anyway. That's one of the reasons I did not consider using a registry/proxy in the first place when I was working on a solution for the problems we had.\n\n@igorw We discussed that already (it was @lsmith77 proposal IIRC) and that's out of question: the request is used quite frequently, so we won't introduce a proxy for such an important object in Symfony.\n\nAnother drawback for @beberlei proposal I've just thought about:\n- As of 2.3, a service depending on the request (and doing it the right way) does not need to depend on the event dispatcher anymore, which obviously won't be the case with the registry. And that's an important property: a service depending on the request does not need to care about the machinery we have; it should be reusable outside of the context of Symfony.\n",
            "@lsmith77 You are right for controllers, but for listeners, the problem is a bit different: they get the right request when the scope is entered, but before this PR, they were no aware that a request scope finished. And this is the only problem that this PR tried to address.\n",
            "I'm against these changes because it's going to make merging between tests so much complicated.\n",
            "I'm not sure this is worth the effort. But if you want, doing that in the 2.1 branch would be, indeed, better (and cross your fingers for the merge into 2.2 ;)).\n",
            "@jakzal No, refactoring such as this one really belongs to master only. Thanks.\n",
            "Now that #7007 has been merged, you can just use a setter to get the request. It should fix your issues (the request context issue you mention should also be fixed now). Can you confirm and close this ticket?\n",
            "@dlsniper Go for it\n",
            "I've just submitted a PR to fix that issue, see #7034\n",
            "Closing as the remaining point was fixed in #7518\n",
            "You should use the mailing-list when asking for support, thanks.\n",
            "Then, it's not a proper bug report as just saying that something does not work is not enough. That's why you should use the mailing-list to get help and determine if there is a problem in your code or in Symfony. If the issue comes from Symfony (which I doubt based on the information you gave here), then creating an issue is an option.\n",
            "Having our own magic file does not sound good but as this is something that come up from time to time, that might be a good idea after all. Can you reference all the other tickets here to get easy access to past discussions?\n",
            "Seems like a good idea indeed. Do you want to work on a PR?\n",
            "Closing in favor of #7809, where I implemented the possibility to configure the magic file from the existing class as suggested by @raziel057 . Adding a magic file in Symfony itself is not a good idea at the magic file format changed recently (according to the PHP documentation).\n",
            "We are well-aware of this but as all these headers are only used internally, that does not really matter. Thanks.\n",
            "Can you submit a pull request with a fix and some unit tests?\n",
            "Closing as there are no feedbacks from the reporter.\n",
            "Can you update the CHANGELOG before I merge this PR? Thanks.\n",
            "This is indeed not supported and this is not on the roadmap.\n",
            "Likely not except if someone work on it and the impact on the current code is not too important.\n",
            "That's probably something we can add to DoctrineBundle, but not in Symfony itself as we don't manage databases. Can you create a ticket there (doctrine/DoctrineBundle)? Thanks.\n",
            "ping @Seldaek, @lsmith77\n",
            "Indeed, this will be considered for 2.3. In the meantime, you should send a pull request to the documentation repository.\n",
            "Can you confirm that #6966 fixes the issue?\n",
            "I think the current behavior is the right one as the locale information must be part of the routing (as of Symfony 2.1, we do not support locale management except when part of the routing path)... or am I missing something here?\n",
            "Closing this issue as there are no other example in the framework where we do this, especially for such a specific class that is not widely used. Also, as of PHP 5.4, you can just use `(new PhpExecutableFinder())->find()`.\n",
            "You should probably use `Request::create()` instead. the `initialize` method gets information about the method in the server array directly.\n",
            "I forgot to mention that this renaming will also probably help documenting the feature as understanding the notion of a fragment is probably easier.\n",
            "I've just renamed `FragmentRenderer` to `FragmentHandler` and strategies like `EsiFragmentRenderingStrategy` to `EsiFragmentRenderer` (and everything is put into a new `Fragment` sub-namespace).\n",
            "I've reverted the Twig function name change as the current name is more expressive with its arguments: `render(controller(...))` or `render_esi(url(...))`.\n",
            "I don't see any reference to `http_content_renderer` in the Symfony 2.2 branch. The problem is that composer installs a mix of 2.2 Symfony libs and master ones, and that cannot work.\n",
            "not yet, but that should not be a problem.\n",
            "It looks like a duplicate/same problem as #6923, right?\n",
            "Sorry, I meant #6936\n",
            "Can you confirm that #6966 fixes the problem?\n",
            "This is indeed a bug that seems to have been introduced in #2414.\n",
            "Does #6964 fixes this issue?\n",
            "You should the mailing-list for support. Thanks.\n",
            "Closing as the event dispatcher has worked that way. Between, there is only a performance impact in the dev environment.\n",
            "Lazy services as introduced in 2.3? No, we are not using lazy services internally.\n",
            "Please, can you use the mailing-list when asking for support? Thanks.\n",
            "When disabling the translator, the `trans` filter still uses the IdentityTranslator, which is called with an array instead of a string. This issue should be reported to FOSUserBundle as the error seems to come from there.\n",
            "duplicate of #6880\n",
            "Closing this issue as questions must be asked on the ML.\n",
            "There is a diff here: http://symfony.com/blog/symfony-2-2-0-beta-1-released\n",
            "duplicate of #6864\n",
            "This is due to cd153901eae74dd10d1c9372ca7a6d7157304f04 or e0923ae1d0934a8b4b5e2196ea596539089b4def\n",
            "Can someone confirm that #6959 fixed the issue?\n",
            "You should use the mailing-list for support. Thanks.\n\nhttps://groups.google.com/forum/#!forum/symfony2\n",
            "Because you can have more than one app.\n",
            "One major prerequisite when using translations is to always translation **full** sentences, not just a snippet. For this reason, and because it would break BC, I'm closing this issue.\n",
            "Splitting components in to smaller parts is not a goal per se, it must make sense. Would you use the Session component without using the HttpFoundation one? Would you want to use another session implementation with HttpFoundation?\n\nThe session is part of the Request message.\n",
            "Closing for now. At this point, we would only do this if there were some interest from some Open-Source projects.\n",
            "Looks like a lot of additional code for a very slight benefit. Closing.\n",
            "Can you add a note in the bundle Changelog as well?\n",
            "I think that the Kernel::init() method should be removed altogether and the code moved to the front controllers (like is done in fabpot/Silex-Skeleton). I will do that for 2.3.\n\nIt is also related to #6828 as it will allow for a better decoupling.\n",
            "My opinion:\n- The first commit should be merged.\n- For the second and third one, I don't have a strong opinion. One of the benefits that the content renderer and its strategies do not rely on the Routing component anymore.\n",
            "Any comments? ping @Tobion @vicb \n",
            "@Tobion: This was actually the first name I had but I found it too long. It is indeed rendering a normal request, but only in the context of a master request.\n",
            "The `RenderingStrategyInterface` does render a request and returns a Response. One of the strategy consist of returning an ESI tag, but this is still a Response.\n\nI don't like introducing the `Transclusion` word as (at least for me) it does not evoke anything.\n",
            "Thanks for all your suggestions, I appreciate them, but what about the whole approach? Do you agree that it is better than the current one? I'd like to avoid the bikeshedding if the approach is not better.\n",
            "No, sub-requests only make sense for GET requests. In fact, we even enforce that in HttpContentRenderer.\n",
            "I'm not going to discuss names further in the context of this PR as it has already been discussed in the initial PR that introduced these classes and because this PR does not change anything to the meaning of these classes. If you think the names can be better, feel free to open a ticket and discuss names there.\n",
            "@vicb: Yes, all strategies use the `/_proxy` path when the developer uses a controller reference. But the router proxy takes care of securing the route, so there is no need to do it yourself.\n",
            "Enabling the router proxy when using ESI si not required. The router proxy is  only  required when you use the `controller` Twig function (or the equivalent in PHP -> `ControllerReference`). But we can probably throw an exception in the `ControllerReference` constructor if the proxy is not enabled.\n\nEnabling each strategy individually is indeed a good idea (and that's more a general question as we could do the same for the translator loaders, or the service container loaders). Let's create another issue on this global topic.\n",
            "The listener does not need to work with fragments as URLs as they are never part of the generated URL.\n",
            "Indeed, I forgot to update the CHANGELOG (fixed now).\nFor the config, I've created an issue as this is a larger issue that we have elsewhere in the framework; the implementation here is consistent with other parts of the framework (symfony/symfony#6849) and anyway it has nothing to do with this PR.\nThe way the listener works has not been changed by the changes introduced in this PR.\n",
            "Sorry, I must have missed it. Which config issue?\n",
            "I have reopened all outdated comments and I don't see anything that were not taken into account.\n",
            "Can you use the mailing-list for support? Thanks.\n",
            "Can you confirm that #6942 fixes this issue?\n",
            "merged, thanks!\n",
            "You mean `{% render controller('foo.bar.service:blah') %}`, right?\n",
            "@stof: because you probably think that I delete tags that for fun and that I don't understand the consequences of what I do?\n\nThe packages on Packagist have now been removed and the proper 2.1.7 release will happen later today. I'm very sorry for the inconvenience.\n",
            "Go for it. Can you create a PR?\n",
            "I've created a PR in #6825\n",
            "As this is a bug fix, it should be done in the 2.0 branch. Can you submit a new PR? Thanks.\n",
            "I've cherry-picked it. Thanks.\n",
            "probably worth reading #5300 which is somewhat related.\n",
            "I have a working prototype for option 4! No need to say that I've very excited as it's going to fix a bunch of issues and ease working with services that need the request as a dependency.\n\nThe implementation is very different from what is suggested here, but the end result is the same. I will find some time later this week to finish the code and publish it to gather feedback.\n\nI know, I like teasing ;)\n",
            "Is it a problem?\n",
            "The bootstrap file is not to be read by anyone.\n",
            "This should have been fixed with this commit: 1ab492394c\n",
            "@vicb: I've just updated the CHANGELOG and created the UPGRADE file for 3.0.\n",
            "ping @bschussek \n",
            "Can you rebase and squash before I merge? Thanks.\n",
            "@MaksSlesarenko: fixed, thanks.\n",
            "Closing as you should use the mailing-list for support or report the issue on the Assetic bundle project (https://github.com/symfony/AsseticBundle).\n",
            "@joelwurtz That's weird. Have you flush your cache? If yes, can you send me your appDevDebugProjectContainer.php file from your project?\n",
            "ok, I get it now. You have only configured Twig as a templating engine, whereas all other examples were using both PHP and Twig. I'm going to have a look at this issue.\n",
            "I've just submitted a PR to fix this issue (see symfony/symfony#6850). I'm not proud of this workaround, but there is no way we can fix it easily with the way the container works. Can someone confirm that it works before I merge?\n",
            "I'm -1 on this change. I really doubt that this has any significant perf improvement and it makes the code less clear. In fact, we rejected similar changes in the past.\n",
            "merged, thanks\n",
            "Does it belongs to Symfony core (I mean, that's not a validator that is really often needed)? So, for me, that's out of scope. What do you think @bschussek?\n",
            "@sprain: I've decided to merged both the ISBN and the IBAN validators. As you said, having to include a bundle just for some validators seems overkill, and bundling such validators does not add that much code to Symfony anyway.\n",
            "@Tobion You are right, I read this too fast as I thought we decided to add this at some point.\n",
            "This has been fixed.\n",
            "ping @Seldaek \n",
            "just out of curiosity, have you run  a composer update?\n",
            "I've just updated one of my projet to the latest Symfony version and everything works fine.\n",
            "As @stof said, the message is for the constraint, so it makes sense to keep it there.\n",
            "see #6459\n",
            "@sprain What's the status of this PR? Can you take the comments into account?\n",
            "We already have translations for Polish. @stloyd Can you check that the current translations are good enough? Thanks.\n",
            "Closing as there is no feedback from the reporter.\n",
            "see dc2cc6b13c8664ed2ae97611d448f98d1cfae2b8\n",
            "This looks like more like a workaround than a proper fix. Anyway, this is not critical, so we have time to get it right later on.\n",
            "Closing this PR as we have a ticket and this patch won't be applied as is.\n",
            "This should be discussed on the mailing-list instead. Thanks.\n",
            "That's weird as Composer should be able to fix that by itself. I've force the update of the metadata on packagist, it should be fixed now.\n",
            "When will Doctrine 2.4 be released? If not in the next couple of weeks, this PR cannot be merged as we need to ship Symfony 2.2 with a stable version of Doctrine.\n",
            "If the Doctrine is fine with `~2.2`, let's do that. @beberlei Can you confirm?\n",
            "Closing in favor of #6604\n",
            "Looks like a bug to me.\n",
            "Ok, I've found the reason: that's because of `ResolveInvalidReferencesPass`.\n",
            "Patch to come soon.\n",
            "Can you confirm that #6608 fixes the issue?\n",
            "I will merge the PR into 2.0.\n",
            "of course as 2.0 is merged into 2.1 and then master.\n",
            "Original pull request: https://github.com/symfony/symfony/pull/5674\n",
            "And the issue that started it: https://github.com/symfony/symfony/issues/6047\n",
            "I agree too with Seldaek and I won't revert the move of some test classes. If some others need to be moved, let's do it.\n",
            "done\n",
            "ping @lmcd\n",
            "Merged, thanks!\n\n@Burgov, @michelsalib, @norzechowicz: Can you share with us the usage that you already have for this new component?\n",
            "Would it be possible to force using the PhpAdapter in this specific case?\n",
            "@jackmcdade we agree with you, no question about it. The thing is that when you run your code, the finder uses an adapter depending on your platform (to get the best performance possible). The problem is that `PhpAdapter` supports glob but apparently, the find command does not. So my proposal is that when we detect that the developer is using a glob that is not supported by the  best  adapter, we automatically fallback to PhpAdapter. So, nothing on your side, everything would be done on our side.\n",
            "Yes, you can (not tested):\n\n``` php\n\nuse Symfony\\Component\\Finder\\Adapter\\PhpAdapter;\nuse Symfony\\Component\\Finder\\Finder;\n\n$finder = new Finder();\n$finder->removeAdapters();\n$finder->addAdapter(new PhpAdapter());\n```\n",
            "This PR break the tests.\n",
            "Looks good to me. @Seldaek?\n",
            "@gigablah Can you submit this PR on the 2.0 branch instead? Thanks.\n",
            "Let's do that for 2.1 only then.\n",
            "Closing in favor of #6564 \n",
            "I've just  reviewed this PR. I'm :+1: on adding this feature but I don't like the name. What about doing that in the existing `container:debug` command by adding a switch like `--parameters`?\n",
            "I prefer what you've implemented @egeloen. Can you add support for `--tags`?\n",
            "@egeloen Sorry, I was confused by the red/green lines. Anything else before I merge?\n",
            "I like the way it is today and it was done on purpose. For a given request, you see the direct sub-requests. And by clicking a sub-request, you get the sub-sub-requests. I think it makes more sense.\n",
            "#9006 should fix the issue\n",
            "This behavior was introduced by @Seldaek in bcf8cf91. Any reason?\n",
            "I don't like this change as this is a BC break and I don't really see the use case.\n",
            "The problem is that this method is marked with the `@api` tag and that we don't really respect its meaning. As I don't see a big win breaking the API, I prefer to not do it... except if you have a use case in mind where using a closure is not possible/not desirable.\n",
            "Closing\n",
            "Can you use the mailing-list for support? Thanks.\n",
            "Streaming an image is better done via `BinaryFileResponse`. But if you want to use `StreamedResponse`, you can also create your own Response class that overrides the `prepare()` method.\n",
            "As there is only one location where we are directly using a class from the Config component (`ContainerBuilder::addObjectResource()`), we can also just test this case and do nothing if the class does not exist instead of adding a flag, but that looks dirty.\n\n``` php\npublic function addObjectResource($object)\n{\n    if (!class_exists('Symfony\\Component\\Config\\Resource\\FileResource')) {\n        return $this;\n    }\n\n    $parent = new \\ReflectionObject($object);\n    do {\n        $this->addResource(new FileResource($parent->getFileName()));\n    } while ($parent = $parent->getParentClass());\n\n    return $this;\n}\n```\n\nWhat do you think?\n",
            "@stof: right, thinking about it more, it is probably not a so good idea.\n",
            "I've restricted the condition to only accept setting existing synthetic services. That should be ok.\n",
            "The locale is not read from the session anymore as of 2.1. See https://github.com/symfony/symfony/blob/master/UPGRADE-2.1.md for more information about this change and how to get the old behavior back in your app.\n",
            "I've closed a similar ticket today and I'm going to close this one as well. I do agree that this is unfortunate but nothing we can do at this stage.\n",
            "Can you use the mailing-list for support? Thanks a lot.\n",
            "Closing as duplicate\n",
            "But you are talking about a PHPUnit run. What is the relation with Symfony? How does the Symfony console behave?\n",
            "Closing as there is now a paragraph in the docs but mainly because it has nothing to do with Symfony.\n",
            "Can you squash your commits? Thanks.\n",
            "Closing as the OneOfValidator introduction has been reverted now. Sorry for the inconvenience.\n",
            "I have updated the phpdoc to warn about this.\n",
            "Yes, the Application is the object we want to test, the tester should not change it in any way.\n",
            "I've just pushed a new version of the code that actually works in my browser (but I've not yet written any unit tests). I've updated the PR description accordingly.\n\nAll comments welcome!\n",
            "@lsmith77 This is a totally different topic. This PR is just about moving things from FrameworkBundle to HttpKernel to make them more reusable outside of the full-stack framework.\n",
            "I think this PR is almost ready now. I still need to update the docs and add some unit tests. Any other comments on the whole approach? The class names? The `controller` function thingy? The URI signer mechanism? The proxy protection for the internal controller? The proxy to handle internal routes?\n",
            "I've just added a bunch of unit tests and fix some bugs I found while writing the tests.\n",
            "@drak: I wanted to update the docs but that does not work. I need to make big changes, so that will come later on... probably with the help of @weaverryan\n",
            "fixed last week.\n",
            "Honestly, we have so many things to take care of in the form framework that I don't think that this is annoying enough to change the file names at this point.\n",
            "Closing in favor of #6583\n",
            "It has been fixed now, but as the files are hosted on Amazon, you might have to wait a bit before the new files take over.\n",
            "Can you check that #6446 fixes this issue?\n",
            "Which version of Symfony do you use? Because this has been fixed a long time ago.\n",
            "Should be fixed now as the oneofvalidator has been removed now.\n",
            "There is indeed a problem. I'm going to disable those tests in the meantime.\n",
            "I've disabled using the BSD adapter on the Mac.\n",
            "I would remove the method in 2.2 and do nothing in 2.1. If we fix it in 2.1, people can start using it, which is not what we want. In 2.1, just add a comment saying that the method does not work and is going to be removed in 2.2\n",
            "@drak I think/hope everybody is on the same page as you when you say:  Symfony 2.2 code itself should not be generating deprecated warnings for internal calls from itself, but only when userland uses a deprecated method. \n\nping @bschussek \n",
            "I've just added the  Critical  tag as this must be resolved before 2.2 final.\n",
            "For the record, there is no calls to `set_error_handler()` anymore in the Validator code itself.\n",
            "Can you confirm that everything is ok now?\n",
            "@drak: I don't really have time to dig deeper, but the good news is that everything is ok now. Anyway, this BC layer will be gone soon.\n",
            "Closing as #6566 is taken care of this.\n",
            "For the record, I'm also for reverting this change.\n",
            "@bschussek I'm going to revert PR #6360 this week-end.\n",
            "I've just reverted PR #6360\n",
            "Be reassured that this issue is not ignored.\n",
            "Closing as the discussion should happen on the mailing-list.\n",
            "Making something standalone makes sense if there is no hard dependencies on many other things. Using HttpCache without HttpKernel is not possible, so why would you want to make it standalone?\n",
            "For many reasons I won't explain here, the components won't have their own release cycle. So, I don't see the need to create a new component for the HTTP cache.\n",
            "If we have good feedback from Windows users, yes it can land in 2.2. ping @pborreli\n",
            "@lmcd Is it mergeable now?\n",
            "@lmcd: Thanks a lot for finishing this in time for 2.2. Before I can merge, there are two remaining tasks:\n- add a note about the new feature in the CHANGELOG file of the Console component;\n- create a PR on `symfony/symfony-docs` to explain the new feature.\n\nCan you take care of that?\n",
            "@lmcd: merged, thanks a lot!\n",
            "@dlsniper Thanks a lot for your hard work on this!\n",
            "Can you use the mailing-list for support? Thanks.\n",
            "This has been reverted.\n",
            "You should this to the AsseticBundle repository instead.\n",
            "I've just submitted a PR to workaround the issue for the Finder component as this is a BC break (see symfony/symfony#6882), but frankly, just change to another hosting company ;)\n",
            "@Tobion is right, that's what the Routing component is for. That being said, exploding the path info is not that complicated anyway.\n",
            "@Seldaek: It's up to you to display it (probably in the question). That's how the other `ask*` methods work.\n",
            "@Tobion That's indeed something that should be done in another PR.\n",
            "I removed this on purpose.The list of options is already quite long, and getting the value from the original array is simple enough to not add more options.\n",
            "I don't get it. Using a Kernel always requires you to create a subclass anyway. There, just override the `getRootDir()` method. It's done this way as you need to be able to create a Kernel in a lot of different places (console, front controllers, and tests for instance) and you don't want to pass the root dir every time you create a new Kernel instance. Also, once the Kernel booted, changing the root dir would be dangerous and that's why there is no setter.\n\n-1 from me.\n",
            "@vicb: Please, no need to be rude nor ironic. @simensen has the right to explain his point of view and why he thinks his changes are useful.\n",
            "Closing as your snippet of code should be enough for your needs. I don't think that this is worth documenting as this need is very specific.\n",
            "@bschussek Apparently, tests are broken because of this PR. see https://travis-ci.org/symfony/symfony/jobs/3676724 for instance.\n",
            "@bschussek The only failing test on Travis is a Form test: https://travis-ci.org/symfony/symfony/jobs/3679013\n",
            "No obvious reasons. I think it was a mistake.\n",
            "The best would probably be to rename the class and create an empty class with the old name that extends the new one and deprecate it (we will then remove it in 2.3).\n",
            "Closing as the discussion happens on #7454 now.\n",
            "The sub-request is totally independent from the main request and as such does not  inherit  anything from it (apart from the session of course). That's because the sub-request can be an ESI where it is really just another master request.\n",
            "Renaming methods is not an option, but creating new ones and keeping the old ones as aliases would be good enough (the old method would be deprecated and removed in Symfony 3.0).\n",
            "After looking at that again, I've decided to close this one as to keep BC would mean to create yet another interface.\n",
            "Merged\n",
            "followup for #6301 (cc @umpirsky)\n",
            "I've created two new exception classes: `NotFoundResourceException` for when the resource does not exist and `InvalidResourceException` when a problem occurs when loading the resource. That should give us everything we need to fix #5797.\n",
            "I'm going to merge it now.\n",
            "Which Symfony version?\n",
            "I've just tested it again and I don't have the double-display of the error (with a fresh Symfony SE installation), that's really weird. There is a difference between our two setups, but I have no idea which one.\n",
            "I can now reproduce this issue but only with the PHP built-in server. I will investigate it further now.\n",
            "This issue happens because of the Assetic bundle (see https://github.com/symfony/AsseticBundle/blob/master/Routing/AsseticLoader.php#L58). The good news is that is should only happen in the development environment as the route loader should never be used in the production environment.\n\nThe issue exists because Assetic is registering a special routing loader, with specific resources that have dependencies on the HttpKernel FileLocator, which in turn needs the Kernel. So, when Symfony serializes the resources for the routing, it serializes the kernel, which is then unserialized to see if all resources are fresh.\n\nI've opened an issue there (see symfony/AsseticBundle#168).\n",
            "@macinjosh Your expectation is different than what the tag is for. Symfony heavily relies on sub-requests as explained in the documentation (mostly to support ESI and hinclude); this is sometimes referered to as HMVC.\n\nClosing this issue now as this is more a discussion that should happen on the mailing-list.\n",
            "I'm not able to reproduce the issue. I've tried with current Symfony 2.1 and a simple controller like what you describe. You have something else going on. Here is what I've done on a clean Symfony SE: https://github.com/fabpot/symfony-standard/compare/symfony:2.1...fabpot:PR6227.patch\n",
            "@Sybio That would help a lot if you give us a fork of the Symfony Standard Edition with code that exhibit the issue (like I did above in a previous comment).\n",
            "@nihilnovi: I've just tried with master and I still don't have the issue. Can you list the bundles you are using?\n",
            "For the record, I'm not working on a fix, I was just saying that your PR was not good.\n",
            "fixed by #6362\n",
            "So, we have two options here:\n- unserialize, make our changes, serialise again;\n- use a string of the same size to avoid the problem in the first place.\n",
            "I'm -1. Symfony 2.0 only supports the vendors.php script, and as such, this is how it should be tested.\n",
            "sure. I'm not comfortable with added specific options for specific formats. I would prefer to add a snippet of code in a cookbook to explain how to convert the flat structure to a nested one.\n",
            "As I said, I think it would be better to add this is to the documentation. And of course, it's then up to you to package that as a command if you are using it all the time. But as YAML is not a standard format for translations (like XLIFF or gettext), I don't want to add too many specific features for it.\n",
            "As I said, as I expect the code to be quite small, it can probably be included in the official documentation where we talk about this command.\n",
            "We cannot use the `move_uploaded_file` as we need to be able to use the same method for functional testing.\n",
            "You are right, see #6211\n",
            "@colinfrei I've merged PR #6173. Do you have time to implement the `trigger_error()` call everywhere? Thanks.\n",
            "@colinfrei: Is this PR finished? Can I merge it?\n",
            "@colinfrei Thank you very much for your work on this matter. This is much appreciated!\n",
            "@stof: option 3 seems like the best option. Do you remember the PR number?\n",
            "symfony/symfony#5741\n",
            "symfony/symfony#5741 has been backported in symfony/symfony@ae3d531737589725082b966fe48b949ebddeabf7\n(and the 2.0 has been merged in to 2.1). Can you confirm that this fixes the issue?\n",
            "Looks good to me. Can you add a note in the CHANGELOG about this new possibility and update the documentation accordingly? Thanks.\n",
            "Closing this as there are ways to implement that without adding a new event.\n",
            "It is up to you to store the information you need from the controller event (you can use Request attributes for instance -- which is what FrameworkExtraBundle does). \n",
            "No, you cannot control how a value is dumped.\n",
            "As this is a sensitive issue, can you add some tests? Thanks.\n",
            "But it looks like the failing tests come from what you've changed.\n",
            "@bamarni Can you just update this PR with the code change and no tests at all? I will then finish the PR. Thanks.\n",
            "Can you submit a pull request?\n",
            "You should probably ask this question on the mailing-list.\n",
            ":+1:\n",
            ":-1: for the AOP thingy.\n",
            "BC breaks should always be documented, and we guarantee BC only for things tagged with @api. I'm going to update the docs to make things clearer.\n",
            "Most of the XLF files are broken (the end is missing now).\n\nIIUC, we now have a hard dependency on the Translation component, which is something we wanted to avoid.\n",
            "Oops, clicked on the  comment  button too fast.\n\nSo, the dependency is hard (you need to install the dep) but light as we only rely on the translation interface from the component (when using the default translator). It looks acceptable to me, especially because we now use Composer to manage dependencies.\n",
            "BC breaks should always be documented, and we guarantee BC only for things tagged with @api. I'm going to update the docs to make things clearer.\n",
            "Most of the XLF files are broken (the end is missing now).\n\nIIUC, we now have a hard dependency on the Translation component, which is something we wanted to avoid.\n",
            "Oops, clicked on the  comment  button too fast.\n\nSo, the dependency is hard (you need to install the dep) but light as we only rely on the translation interface from the component (when using the default translator). It looks acceptable to me, especially because we now use Composer to manage dependencies.\n",
            "see #4271\n",
            "This is something that needs to be discussed on the mailing-list first. Thanks.\n",
            "closing in favor of #7466\n",
            "I think the code is safe, especially after the latest changes we've made. If you want to get the information without proxies, just get them from the raw HTTP headers.\n",
            "Anyone willing to help for the MongoDB support? ping @jmikola\n",
            "I'm personally against this change for a simple reason: the `form()` and `form_widget()` helpers were only created for prototyping... and I made it clear from the beginning (I was against their introduction in the first place). If we want to use these helpers to solve all possible issues that might come up, we are going to complexify the form system a lot (we went down this road in symfony1).\n\nThat said, this is only my opinion. What do you think @bschussek?\n",
            "I'm personally against this change for a simple reason: the `form()` and `form_widget()` helpers were only created for prototyping... and I made it clear from the beginning (I was against their introduction in the first place). If we want to use these helpers to solve all possible issues that might come up, we are going to complexify the form system a lot (we went down this road in symfony1).\n\nThat said, this is only my opinion. What do you think @bschussek?\n",
            "Support should be done on the mailing-list. We are using Github for bug report only.\n",
            "Closing as there is no feedback. And as mentioned by @drak, the mailing-list is probably more appropriate.\n",
            "Closing as the discussion should now happen on #7527\n",
            "Closing again as there is an alternative implementation in an existing bundle.\n",
            "I agree with @Tobion.\n",
            "Do you mean displaying the toolbar starting from the top of screen to the bottom? It would be a large toolbar, right? I'm mostly -1 as I don't when it would be more useful/better than the current way. Or I have not understood the request.\n",
            "That's what I had in mind when reading this issue. And seeing the result, I doubt of its usefulness. I still don't get why it would be a good idea.\n",
            "But it looks ugly as hell on the right or left. I'm closing it.\n",
            "But when is it a problem to have the toolbar at the bottom?\n",
            "Closing this issue as this not  easily doable.\n",
            "For the composer use case, I think a `debug` mode would be better:\n- `-q`: quiet, output nothing\n- `-v`: useful information\n- `-d`: debug more where a lot of not-so interesting stuff are displayed\n",
            "ok, let's find good names now. So this PR uses:\n- `--verbose`\n- `--verbose-very`\n- `--verbose-debug`\n\nI'm not fan of these names. Here are some ideas:\n- `--verbose`\n- `--more-verbose`\n- `--even-more-verbose`\n",
            "@Seldaek Your proposal looks good to me.\n",
            "Can you add some unit tests?\n",
            "Which version of Twig are you using? master?\n",
            "Can you copy/paster your extension? In Twig master, the extensions are registered as late as possible, whereas they are registered as early as possible in previous version. It should not cause any issues, except if you are doing weird things in the `initRuntime()` method.\n",
            "@stof: right.\n",
            "This has been fixed now in Twig master.\n",
            "What is the problem? The current code looks good to me.\n",
            "It's not critical and the current code is more readable.\n",
            "ping @beberlei \n",
            "I've cherry-picked the first commit only as the schema is not really useful as is. Feel free to submit another PR for the schema as done in other places in the framework.\n",
            "@TerjeBr Open a new PR please, thanks.\n",
            "I agree with @schmittjoh. What's the point? I really appreciate all contributions, but we'd better focus on what matters the most.\n",
            "@dlsniper Don't get me wrong, I really appreciate your help, and I can see that you have been very active recently. That's much appreciated.\n\nI can understand where you are coming from (and I totally understand the comment of @pborreli) but I think that the message I wanted to convey was: let's focus our energy on fixing bugs _first_.\n",
            "I agree with @Tobion here. We cannot change all calls to `strlen`. If there are some situation where it makes sense (like what we do in Twig), then let's do it, but we won't change all the code.\n",
            "Yes, we can.\n",
            "The patch is not enough. If the computed value is not `no-cache`, then the pragma must be removed, but removing the Expires one can be tricky if it has been set previously. As this is a protocol issue, and as we should do that only for HTTP 1.0, what about moving this logic to the `Response::prepare()` method?\n",
            "@dlsniper This has been fixed in 2.1.\n",
            "This looks good to me. Can you add some unit tests, rebase, and squash? Thanks a lot.\n",
            "Writing tests should be easy enough: check that the pragma header is set when the right conditions are met.\n",
            "@dlsniper I've merged your changes in the 2.1 branch as we don't have enough information in 2.0 to make it work correctly (we don't have access to the Request and so the protocol is always 1.0). Also, I've reverted the changes to the getMaxAge() method as the getExpires() method always returns a DateTime instance.\n",
            "We only add interfaces where it makes, but I don't think adding an interface for Filesystem makes sense.\n",
            "That's the goal of the class to take care of the difference between OSes.\n",
            "Anyone willing to make a PR to fix that? Apparently, we just need to check the version of intl (>=3.0.0) instead of the version of PHP (>=5.0.0) in our if statements.\n",
            "`doRun()` does the bulk of the work but without the exception handling and the return code handling. Sometimes, it is needed, thus it is public.\n",
            "Renaming the class to `IpUtils` is indeed a good idea.\n",
            "Can you add an entry in the CHANGELOG?\n",
            "Looks good to me. Can you add a note in the CHANGELOG of the component and send a PR on symfony/symfony-docs about this new feature? Thanks.\n",
            "One can argue that a route without associated code (the controller) does not make sense.\n",
            "I want to publish the last beta early next week. So, it that can be finished and reviewed by the end of this week, that can be included.\n",
            "Closing in favor of #6808\n",
            "Also, I forgot to mention that a Logger must always be an optional dependency.\n",
            "The deadline to implement our choice for 2.2 is the end of december.\n",
            "The first option was chosen as PSR-3 is now out. See #6628 for the PR that will this gappen.\n",
            "Can you please use the mailing-list to ask for support? Thanks.\n",
            "@stof: I've added the .gitattributes file, but also the phpunit and LICENSE ones.\n",
            "stopwatch is a word in itself. We put upper case letters when we concatenate two words like in HttpFoundation.\n",
            "Now it is. Welcome back @vicb!\n",
            "Closing as there is no feedback.\n",
            "@mvrhov Are you willing to work on a new Xliff loader? As @beberlei mentioned, I think we need to keep the current one for BC reasons, but a new one would be a good idea.\n",
            "@dlsniper We need to keep the existing ones and create new ones along side.\n",
            "Hmmm, weird. I was pretty sure that when the request was using 1.1, the `prepare()` was switching the protocol to 1.1 for the response. This is the case, but only for the streamed response.\n\nI've just submitted a PR to move the check from StreamedResponse to Response.\n",
            "Can you ask support on the mailing-list? Thanks.\n",
            "As there is a BC break, I'm going to merge it on master.\n",
            "A note in the changelog would be a good idea.\n",
            "Can you use the mailing-list for support? Thanks.\n",
            "Closing for the most recent work on this topic in #7230\n",
            "I'm -1 for the LoggerInterface as it defines this interface in the context of HttpKernel. It's not useful if you are not using HttpKernel.\n\nFor the StopWatch, I'm -0 for the move.\n",
            "I understand this, but having a Log component with just an interface does not sounds like a good idea. Another possibility would be to just rely on Monolog. Does it even make sense to be compatible with something else than Monolog?\n",
            "@stof: So, you would also recommend that we create a Log/Logging/Logger component with just the interface? And perhaps two concrete classes for the wrappers needed for Zend Logger and Monolog?\n",
            "AFAIK, there aren't that many logging libraries in PHP (good ones). Monolog and ZF are probably the only/main ones. And honestly, I don't see the need to have yet another one in the future. As such, I don't think we need to overdo it. Let be honest, depending on Monolog or on a package that defines just an interface is almost the same (except that in the latter case, you also need to make a choice about which lib you want to install that implements the interface).\n\nIMO, the best would be to depend on Monolog (and trying to convince @Seldaek to provide an adapter for ZF).\n",
            "Here is the PR for the stopwatch classes: #5952\n",
            "@dlsniper I'm closing this issue and I've opened a new one for the Logger interface discussion.\n",
            "see #5968 for the logger discussion.\n",
            "@lyrixx Can you add some unit tests?\n",
            "@lyrixx Can you finish this PR?\n",
            "Closing as there are 4 opened PR on this topic. I would prefer that we first discuss the interface and what we want before starting coding. I suggest that this discussion happens on the Symfony dev mailing-list. Also, we need to discuss what to do with the current discussion on the FIG group mailing-list.\n",
            "https://groups.google.com/forum/#!topic/symfony-devs/EJr6XhawJTE\n",
            "I had a quick look at Stash last week.\n\nThe first  issue  (which is very easy to fix) is documentation: there is not a single working example. Everything starts with a `$pool` var which is never created anywhere (or I've not found the proper/uptodate documentation which is also quite possible). Anyway, if you want to play with it, here is a small snippet of code:\n\n``` php\n<?php\n\nrequire_once __DIR__.'/autoload.php';\n\n$handler = new Stash\\Handler\\FileSystem();\n\n$pool = new Stash\\Pool();\n$pool->setHandler($handler);\n\n$stash = $pool->getCache('fruit');\n$stash->set('apple');\n\nvar_dump($stash->get());\n// string(6)  apples \n```\n\nApart from that, the way things are done sometimes looks a bit  weird  to me, but again, nothing that cannot be fixed.\n\nI'm going to spend more time on Stash and give a more detailed feedback to @tedivm.\n",
            "@dlsniper We are not in a hurry (not yet at least). So, let's first review Stash before starting yet another PR. We already have 4 PRs for the cache, which is already more than enough.\n\nIf we decide that Stash is indeed the way to go, then, we will figure out how to integrate it into Symfony.\n",
            "@dlsniper Keep in mind that at this stage, we need to keep an open mind. We need to evaluate different options. If you think that Stash is not a good option, please share your concerns (I have some concerns as well that I will share once the Stash refactoring PR lands as it definitely goes in the right direction). But just saying that Stash is bloated does not help.\n",
            "Closing as there are 4 opened PR on this topic. I would prefer that we first discuss the interface and what we want before starting coding. I suggest that this discussion happens on the Symfony dev mailing-list. Also, we need to discuss what to do with the current discussion on the FIG group mailing-list.\n",
            "https://groups.google.com/forum/#!topic/symfony-devs/EJr6XhawJTE\n",
            "Can you ask for support on the mailing-list? Thanks.\n",
            "I would suggest to keep the composer.json as is and throw an exception when the shell is used and the Process component is not available.\n",
            "@raziel057 Can you rebase on master? That should fix your problem.\n",
            "@raziel057 Can you finish this PR?\n",
            "The automatic registration of detected namespaces (as suggested by @jakzal in #4845) would be a very good addition.\n",
            "Closing in favor of #6650\n",
            "The automatic registration of detected namespaces (as suggested by @jakzal in #4845) would be a very good addition.\n",
            "Closing in favor of #6650\n",
            "Just comment it in the kernel and the configuration.\n",
            "Looks good to me. Can you rebase on master as there is a conflict right now? Thanks.\n",
            "The digest authentication mechanism is not that widespread due to its limitation. And the transport is not HTTP, I think we are talking about very few cases.\n",
            "@sstok Doing the same as Apache seems the best option here (just document the BC break).\n",
            "Reopening this ticket as we should add a check in the Distribution bundle to warn people about this problem as so many developers hit this issue in the past.\n",
            "Closing now as I have added a recommandation in the distribution bundle. see sensiolabs/SensioDistributionBundle@2a518e7\n",
            "The error handler is only registered when in debug mode in the Kernel and can be triggered very early in the handling of a request (even before we have access to the dispatcher or anything else). So, the current PR looks fine to me (apart from the typo and the lack of unit tests).\n",
            "I think there are two goals. The first one being to have nice pages in the development environment when a fatal error occurs. And this PR addresses that feature quite nicely. The second can be addressed in another PR.\n",
            "@Koc can you finish this PR (probably by integrating the memory reserve as explained by @GromNaN)?\n",
            "If it is in 2.0, it is in 2.1 already as I've merged 2.0 into 2.1 recently.\n",
            "Indeed, you are right. There was a merge problem at some point. I've just cherry-picked the relevant change. So, it should be available in 2.1 now.\n",
            "Can you use the mailing-list instead for your questions? Thanks.\n",
            "closing as a duplicate of #6329\n",
            "If possible, I'd rather include the fixes for Oracle support.\n",
            "Closing in favor of #6301\n",
            "ok, sorry, I misinterpreted the reference you made in the PR. Reopening.\n",
            "Thanks for the report but this command is not part of Symfony, but comes from the DoctrineBundle. Can you report the issue there? Thanks. \n",
            "Any news on this PR? Is it mergeable?\n",
            "We need to move forward as I want to merge the hostname support in the routing ASAP to have plenty of time for feedback before the 2.2 release.\n\nDoes it sound reasonable to merge this PR as is an open a ticket about the remaining issue (which should not occur that often anyways)?\n",
            "@Tobion Can you open the relevant tickets? Thanks.\n",
            "Looks like a bug in composer, no? ping @Seldaek \n",
            "Can you use the mailing-list for questions instead? Thanks.\n",
            "The profile is not a monitoring tool, but a profiling one. I've just had a look at the HAR specification, and AFAIU, a lot of our data do not match in any of the pre-defined categories.\n",
            "At first glance, I doubt that this is something that will be useful to many people, but I can be wrong. Your best bet is to ask on the mailing-list, and if there is enough interest, submit a PR. Thanks.\n",
            "You should ask support on the mailing-list and report bugs on the assetic/assetic bundle repositories. Thanks.\n",
            "So, closing this as it has been fixed in master.\n",
            "There are other places where we are getting the CONTENT_TYPE from the server array. Do they need to get changed as well?\n",
            "Looks like there are some commits that do not belong to this PR. I think you need to reopen a new PR to target 2.1.\n",
            "Please, use the mailing-list for support. Thanks.\n",
            "Can you use the mailing-list for support? Thanks.\n",
            "I think it has already been suggested but I don't think this is a good idea. First because we don't have that many long panels. Then, because the interface is already quite full of information. So, -1 from me.\n",
            "I don't see the point fo this big refactoring, especially if it also changes the behavior. I think a better approach would be to do only one thing at a time. But as is, this is not mergeable.\n",
            "Can you add a test for the bug fix?\n",
            "@lyrixx I have the same issue on my Mac. You can have a look at it tomorrow ;)\n",
            "Everything have been fixed now.\n",
            "You need to use the mailing-list to ask for support. Thanks.\n",
            "This overrhead is not needed most of the time. It should be done in a response listener if you have the issue. But as far as the RFC is concerned, this is not needed.\n",
            "@gigablah This approach looks much better indeed.\n",
            "What about doing that in the `HeaderBag` directly instead of the `ResponseHeaderBag`?\n",
            "Sorry to push back on most of your PRs lately, but I'm not convinced of the added value vs creating the Finder directly.\n",
            "After thinking about this more, I understand your use case and it totally makes sense to have a factory for your use case, but I don't think that we need to have that in the core.\n",
            "Can you ask for support on the Doctrine mailing-list? Thanks.\n",
            "You should report this issue on the Doctrine ticketing system.\n",
            "fixed now.\n",
            "Can you ask for support on the Symfony mailing-list? Thanks.\n",
            "@ruudk Yes, it will be in the next 2.1 release.\n",
            "#8831 should fix this issue.\n",
            "This changes the current behavior. I think returning `null` when the header does not exist would be better. And of course, we should also fixed the `getDate` method in case the `Date` header does not exist.\n",
            "ping @drak \n",
            "Can you squash your commits and submit this PR on the 2.0 or 2.1 branch (don't remember when those tests were added)? Thanks.\n",
            "Rebase on 2.1 is enough then.\n",
            "The code looks good to me now. There are two remaining task before merging:\n- Is it something we need to add somewhere in the documentation?\n- Can you add a note in the DI component CHANGELOG?\n\nThanks.\n",
            "Closing as this issue is not related to Symfony.\n",
            "#5502 might have fixed your issue. Can you test with the 2.1 branch and report? Thanks.\n",
            "and also to avoid broken images when they are not correctly installed. But anyway, this is purely internal code, and you don't need to  preview  them.\n",
            "Please don't, that won't be accepted.\n",
            "This issue looks fixed in 2.2 now, can you confirm?\n",
            "Closing as this has been addressed by decoupling the ICU data from the locale component by creating a new Intl component (see https://github.com/symfony/icu)\n",
            "I've created a PR for the doc update: symfony/symfony-docs#1853\n",
            "Instead of duplicating the information, I would just linked to the documentation.\n",
            "I don't think so as the changes were done more recently IIRC.\n",
            "Support should be asked on the mailing-list instead. Thanks.\n",
            "-1 for removing the toolbar at the top\n\nI prefer the first version where you only hide the menu text but leave the icons. Keeping the state in a cookie is also a must (that cookie might be used to store some other states in the profiler too).\n",
            "Let's use the local storage for better consistency. I don't want to embed a JS library as we only need basic JS scripts.\n",
            "This is a new feature, so it can only be included in the master branch.\n",
            "No, as this is not a big feature, it should not be on top.\n",
            "@eriksencosta I'd rather skip the broken tests on 2.0.\n",
            "You need to report your issue here: https://github.com/doctrine/DoctrineMongoDBBundle\n",
            "Closing as there is a PR for the docs.\n",
            "What's the status of this PR? Anything else need to be done before merging?\n",
            "@sstok Do you have some time to help finish this PR?\n",
            "@sstok The best would be to start a new PR based on the code of this PR, that would ease tracking. Thanks a lot for taking care of that.\n",
            "Closing in favor of #5874\n",
            "It means that you have an invalid UTF-8 string somewhere in your template that is then escaped by Twig. If you have problems fixing you code, you can ask support on the mailing-list.\n",
            "@bamarni Can you add some unit tests and also update the FormExtensionInterface interface phpdoc as `getTypeGuesser` can now return `null`? Thanks. ping @bschussek \n",
            "@romainneutron Can you rebase and squash this PR? Thanks.\n",
            "If we can fix design problems at the cost of slightly breaking BC, that's fine.\n",
            "Closing in favor of #5759\n",
            "After thinking about this a bit more, I think we need to merge this PR without the `exec` trick. Instead, we  document the known limitations and the fact that using `exec` is a nice workaround for 90% of the cases.\n\nImplementing #5759 can then be done later without blocking the features of this PR that are useful when you know what your are doing.\n\nWhat do you think? ping @romainneutron @schmittjoh @Seldaek \n",
            "Looks good to me. Documentation should probably go into the main Process documentation chapter.\n",
            "This should have been fixed in #6330. Can you confirm?\n",
            "As @stof explained, we only change properties to protected or provide accessor when there is a use case for it. Closing for now.\n",
            "Closing in favor of #5476\n",
            "@sebastianbergmann fixed now in 2.2.\n",
            "fixed now.\n",
            "fixed by c17462f\n",
            "Closing as autowiring and interface injection was already discussed and rejected before.\n",
            "scheduled for 2.2.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "Can you explain your use case for extending this class?\n",
            "The Exception handler being in the Debug namespace is by definition not to be used for production. Why not just creating you own listener. I don't see what extending this class would bring you.\n",
            "This class is not meant to be flexible or even extendable.\n",
            "This is a known Composer issue. Just run the same `composer.phar` command a second time, and it will work (and sometimes, you even need to run it more than twice). I think I've reported the issue on composer, but if not, can you do it please? Thanks.\n",
            "In which file? The `UrlMatcherInterface` interface is correctly documented and all other classes uses the `@inheritdoc` tag.\n",
            "ok, I get it now. The problem is only in the 2.0 branch. It has been fixed in the master branch.\n",
            "Can you squash your commits before I merge the PR? Thanks.\n",
            "ping @eriksencosta\n",
            "I'm going to finish this PR, but #5862 should be merged first.\n",
            "I can see another issue. For some HTTP codes, you can/should/must add some headers or some content (like for the 406 status code).\n\nDon't worry about the merge commit or the rebasing, I will take care of that myself when merging the PR.\n",
            "merged, thanks.\n",
            "I'm going to finish this PR, but #5862 should be merged first.\n",
            "I can see another issue. For some HTTP codes, you can/should/must add some headers or some content (like for the 406 status code).\n\nDon't worry about the merge commit or the rebasing, I will take care of that myself when merging the PR.\n",
            "merged, thanks.\n",
            "Can you use the mailing-list to ask for support? Thanks a lot.\n",
            "As I could not believe it, I've just made this test:\n\n```\n<?php\n\ntry {\n    throw new \\Exception('eeee');\n} catch (\\Exception $e) {\n    echo 'foo';\n}\necho 'bar';\n```\n\nWhen `xdebug.show_exception_trace` is disabled, it works as expected, displaying `foobar`. But when it is set to `on`, here is the output:\n\n```\nPHP Exception:  eeee in .../test.php on line 4\nPHP Stack trace:\nPHP   1. {main}() .../test.php:0\n\nException: eeee in .../test.php on line 4\n\nCall Stack:\n    0.0002     627744   1. {main}() .../test.php:0\n```\n\nThis setting does not make any sense indeed. I'm going to add a check in the check configuration script to avoid any other similar report.\n",
            "see sensio/SensioDistributionBundle@f7e9231c36c3badc43f40d025a0ad12939b91df7\n",
            "Anyone working on an implementation? It sounds like a good addition for Symfony 2.2.\n",
            "Adding this with the current architecture is probably not possible without adding something  new . Managing transitions could be done in the `enterScope` and `leaveScope` methods, but the problem is that when you enter the scope, some of the services might not be available yet. Here is a snippet of code from the kernel:\n\n``` php\n$this->container->enterScope('request');\n$this->container->set('request', $request, 'request');\n```\n",
            "Ok, I've found a workaround which should be doable without changing anything. I have a working prototype when not using the dumper (which should be easy to do after everything work for the main ContainerBuilder class). I'm going to create a pull request later on.\n",
            "This has already been fixed.\n",
            "The issue is fixed now. I've reused the logic we already have at other places in the framework instead of adding yet another way to do it.\n",
            "The issue is fixed now. I've reused the logic we already have at other places in the framework instead of adding yet another way to do it.\n",
            "What's the status of this PR?\n",
            "Is it still valid? I've just tested and it works for me on 2.2/master.\n",
            "fixed in #9010. Can everyone confirm?\n",
            "This must be done for the master branch. ping @stof \n",
            "Do you have the intl extension installed?\n",
            "ping @eriksencosta\n",
            "Also, it's always better to ask for support on the mailing-list.\n",
            "Based on the path, it looks like an issue in Doctrine. Can you report it there? Thanks\n",
            "see #5120\n",
            "Just for the record, wildcard mimetypes for validation was added in #2075\n",
            "For the other possibilities, #7809 comes with some enhancements that allows you to better and easily tweak the default behavior.\n",
            "ping @bschussek \n",
            "@gertvr Can you add a unit test to prove the issue (and avoid any future regressions)?\n",
            "@gertvr Will you have time in the coming days to add some unit tests?\n",
            "@bschussek What do we do with this PR? Should we merge this fix?\n",
            "The paths listed in your images are all in the cache folder. When you deploy or move your project from one machine to another, you have to clear and regenerate the cache anyway, so this won't be an issue.\n",
            "That's weird. If works for me and the `Acme` namespace should be autoloaded thanks to this code in the default `composer.json` file:\n\n```\n autoload : {\n     psr-0 : {   :  src/  }\n},\n```\n",
            "This is probably desirable as when you are doing stateless authentication, well, there is no state, so nothing to do to logout.\n",
            "Closing this issue as this should be discussed on the mailing-list.\n",
            "`$request->server->get('QUERY_STRING')` does return the original query string.\n",
            "Can you use the mailing-list for support? Thanks.\n",
            "As you are doing a functional test, your `loginAs()` method should use the normal way to authenticate the user, probably by submitting your login form. A user is authenticated because the token is stored in the session, which is not the case when you are just setting the token by hand outside of a request.\n",
            "The snippet of code you mention is also present in 2.0 (I don't understand how it can work on 2.0 anyway). So, you can make it work on 2.1, but you need to store the token in the session, doing something like:\n\n```\n$session->set('_security_'.$contextKey, serialize($token));\n```\n",
            "I fail to see why you don't just set the cookie. Looks easy enough for me. But I'm probably overlooking something.\n",
            "closing as symfony/symfony-docs#2468 has been merged now.\n",
            "see #5325\n",
            "@bschussek This one looks like a blocker. Can you have a look at it? Thanks.\n",
            "I fixed the `SessionHandlerInterface` path in 4e3ea22\n",
            "@ericclemmons It would be cool if you can have a look soon.\n",
            "I don't see where we could move this method (within the Routing component) as this code is very specific to the annotation loader.\n",
            "That would not help as this is a protected method and it would not make sense to make it public as the logic is enough for our use case but not generic. I'm not really concerned with this specific code duplication in FOSRestBundle.\n",
            "Did it work in 2.0? If yes, this is probably a regression in the autoloader as we are now using the Composer one. ping @Seldaek \n",
            "Closing as no one else had this issue and nothing has to be done.\n",
            "Isn't just because you pass `$form` to the view instead of `$form->createView()`?\n\nCan you also ask for support on the mailing-list? Thanks.\n",
            "The error message is a plural one. So, as hinted by the error message you get, you must change your message to use the plural form, like in the default translation: `Cette chaine est trop courte. Elle doit avoir au minimum {{ limit }} caract\u00e8re.|Cette chaine est trop courte. Elle doit avoir au minimum {{ limit }} caract\u00e8res.`.\n",
            "This is just an example. It's up to you to keep the directory you want to store your files in the way you want.\n\nAnd of course, if you want, you can inject the container wherever you want to access your configuration.\n",
            "fixed now. thanks.\n",
            "This information is not related to the HTTP request, so it does not make sense to expose it directly.\n",
            "closing as symfony/symfony-docs#2468 has been merged now.\n",
            "This is indeed a BC break as the method signature changed in a non-BC way.\n",
            "I think I would prefer to have a static method to be able to change the number of spaces to use on a global basis. It makes more sense and would prevent the BC break. What do you think?\n",
            "merged, thanks!\n",
            "@bschussek Is it a blocker for 2.1? It looks like it is.\n",
            "Is it a won't fix? ping @beberlei \n",
            "Now that #4739 is merged, can you rebase this PR?\n",
            "@gajdaw Can you also work on another PR to implement glob support for the `in()` method? Thanks.\n",
            "Closing in favor of #7188\n",
            "Closing this PR as this is about speed optimization but with no numbers to back it up. Reopen if some benchmarks prove that it gives us a nice speed improvement.\n",
            "@bschussek Can you take a decision? Merge or close?\n",
            "@Dattaya Any update on this PR?\n",
            "thanks @bschussek \n",
            "Can you squash your commits?\n",
            "@vicb you forgot to rename the property in `UrlGenerator` as @stof mentioned above.\n",
            "The new syntax is great.\n\nI have one comment though about this PR about support of PHP as a templating system (support for Twig is provided by the bridge and it was already easy to configure Twig as a templating system for forms -- see Silex for instance).\n\nThe `FormHelper` has been moved into the Form component. This helper is only useful when using the PHP templating system (which is not what we recommend people to use), but the default templates are still in the Framework bundle. So using the Form component as standalone with PHP as a templating system still requires to install the bundle to get access to the default templates. Am I missing something? Do we want to move the PHP templates to the Form component too?\n",
            "But then, I don't want to promote the Templating component or the PHP templating system. Twig is always a better alternative and this should be what people use most of the time, PHP being the rare exception.\n\nAnyway, we are too close from the first 2.1 RC, so any big refactoring will have to wait for 2.2.\n",
            "The new syntax is great.\n\nI have one comment though about this PR about support of PHP as a templating system (support for Twig is provided by the bridge and it was already easy to configure Twig as a templating system for forms -- see Silex for instance).\n\nThe `FormHelper` has been moved into the Form component. This helper is only useful when using the PHP templating system (which is not what we recommend people to use), but the default templates are still in the Framework bundle. So using the Form component as standalone with PHP as a templating system still requires to install the bundle to get access to the default templates. Am I missing something? Do we want to move the PHP templates to the Form component too?\n",
            "But then, I don't want to promote the Templating component or the PHP templating system. Twig is always a better alternative and this should be what people use most of the time, PHP being the rare exception.\n\nAnyway, we are too close from the first 2.1 RC, so any big refactoring will have to wait for 2.2.\n",
            "I agree with @bschussek. This class is about the configuration, so the getters are not about the current object but returns the configuration setting. In this situation, a `get*` method makes sense.\n",
            "ping @beberlei \n",
            "I would not have added the script in the `composer.json` file but in the `.travis.yml` file directly instead. We don't want this script to be run whenever someone run composer on the repository.\n",
            "After merging this PR, I have more failing tests on my machine:\n\nPHP 5.3.8 - ICU 4.4.1\n\nIs it expected? Is yes, how do we need to run the tests locally?\n",
            "@eriksencosta Yes, that would be good to add some more information in the README file.\n",
            "merged! Thanks you very much for your hard work on this matter.\n",
            "ping @beberlei \n",
            "@diaspar If you can contribute a cookbook entry about using Symfony with Oracle, that would  be wonderful.\n\nSee http://symfony.com/doc/current/contributing/documentation/overview.html\n",
            "+1 for @stof idea.\n",
            "@cordoval Can you work on an evolution of this PR based on the feedback?\n",
            "@cordoval Thanks a lot.\n",
            "What is the status of this PR?\n",
            "Looks good to me but we repeat the same code over and over again. Can we try to make the code more future proof. what about adding a `setHint()` method to the exception that does the work?\n",
            "@cordoval Any news on my comments?\n",
            "Yes, but it must be mergeable before Friday.\n",
            "@cordoval Any chance you address my latest comments? I'm about to close it as this is not something we must have.\n",
            "Closing as this code have serious drawbacks. Feel free to reopen whenever the code is ready.\n",
            "This has been fixed now.\n",
            "The fact that you only ever see the last line is probably expected. As this is a progress text, it probably ends with `\\r`, not `\\n`.\n",
            "Any news about this issue?\n",
            "2.2 is scheduled for March, so we have some time to resolve this issue.\n",
            "@eriksencosta No worries, your work is much appreciated and a PR this Sunday would be wonderful as I want to release the first candidate on Tuesday.\n",
            "@XWB Can you try to change your code to the following and tell us if it  fixes  your issue?\n\n```\n{% if form.url.vars is defined and form.url.vars.errors | length == 0 %}\n{% endif %}\n```\n",
            "possibly the same as fabpot/Twig#668\n",
            "Can you check that everything works as expected with the latest version of the Twig extension?\n",
            "@acasademont Can you confirm that you are also using the Twig C extension?\n",
            "no, not yet, the issue is not resolved in Twig yet.\n",
            "The issue has been resolved in Twig now. If you can test with Twig master and confirm it works, it would be great.\n",
            "In #7809, I've clarified the phpdoc to answer all your questions.\n",
            "I don't like this change for several reasons but basically because you have hardcoded your preference in the framework without any obvious way to change it to something else. I'd rather prefer my hack which was to set a special response header when you are dealing with an exception to avoid the overriding by HttpKernel.\n",
            "That's a limitation in 2.0 that has been fixed in 2.1. But we don't backport new features (even the smallest ones).\n",
            "Is there any way to know if a buffer is locked?\n",
            "Closing as there is a PR for the docs.\n",
            "Closing as this is a duplicate.\n",
            "Is it mergeable now? Is yes, @Garfield-fr Can you squash your commits?\n",
            "Quick answer (I need more time to have a look at what you've already done):\n- I'm ok with accepting any interface/class in core that would benefit to more than one project;\n- I'm ok with the refactoring of the existing code to ease your work (we must keep BC though);\n- I'm _not_ ok with changes that would significantly decrease the performance of the current routing system.\n",
            "Anything that still needs to be done in Symfony?\n",
            "Closing as the discussion should now happen on #7527\n",
            "fixed now.\n",
            "@aurapp You are right. Feel free to create a pull request.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "Closing as support should happen on the mailing-list.\n",
            "Can you open an issue on `symfony/SwiftmailerBundle` instead as the bundle is not part of Symfony core anymore? Thanks a lot.\n",
            "fixed by #5034\n",
            "ping @Seldaek \n",
            "fixed now\n",
            "@noliva You should use the mailing-list when asking for support. Try to upgrade to the 2.0 branch.\n",
            "The data come from ICU, so we cannot update them. If there are problems with some translations, you should report them to the ICU project.\n",
            "Can you ask for support on the Symfony mailing-list? Thanks.\n",
            "Please, use the mailing-list for support.\n",
            "I would prefer to try to keep BC if possible. ping @bschussek \n",
            "I find these new methods too specific for integration into Symfony.\n\n-1 from me.\n",
            "Closing as there is a mechanism to change the default domain as explained by @Dattaya \n",
            "Like for #4846, I don't get the usage of such a method. I mean, I can understand that this might be useful, but not that often. So, -1 from me.\n",
            "For the `--tag` output, and because the number of attributes is most of the time very limited, I would just add one new column per attribute:\n\n```\n~/ $ ./app/console container:debug --tag=form.type\n[container] Public services with tag form.type\nService Id           Alias     Scope     Class Name\nform.type.birthday   birthday  container Symfony\\Component\\Form\\Extension\\Core\\Type\\BirthdayType\nform.type.checkbox   checkbox  container Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType\nform.type.choice     choice    container Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType\n```\n",
            "When using `--tags`, an exception should indeed be thrown if other incompatible options are passed.\n",
            "The last missing piece is a PR on the documentation. Thanks.\n",
            "@Burgov Looks good to me. Ping me when this is ready to be merged.\n",
            "We need to stop at some point. If not, we never release anything. beta3 was scheduled for today and I don't plan any other one before the first RC and I won't have time to review this PR next week. So, if you, @schmittjoh, @vicb, @stof, and a few other core devs  validate  this PR, I might consider merging it before 2.1.\n",
            "@asm89 This would indeed be considered for merging in 2.2.\n",
            "What's the status of this PR? @asm89 Have you taken all the feedback into account?\n",
            "@asm89 If you don't have time, I can finish the work on this PR, but can you just tell me what's left?\n",
            "As I said in the discussion about the translations, I'm -1 for the message keys to be consistent with how we manage translations everywhere else in the framework.\n",
            "The conclusion is: keep using plain English.\n\nOn Mon, Nov 26, 2012 at 11:01 AM, Alexander notifications@github.comwrote:\n\n> ping @fabpot https://github.com/fabpot We talked about this in Berlin.\n> Any final thoughts on the PR? :) One idea was to do message keys + opt\n> depend on the translator component if you want to use them, or use your own\n> implementation.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/symfony/symfony/pull/4935#issuecomment-10709997.\n",
            "yes, definitely.\n",
            "I don't like the implementation as it feels like a hack. #4739 is probably a better option to fix the issue.\n",
            "Closing this PR in favor of #5128\n",
            "ping @drak\n",
            "ping @lsmith77 @Seldaek \n",
            "It has been fixed of few days ago: b18f6f557b5\n",
            "I've just tried and here is what I have with Symfony master:\n\n```\nArray\n(\n    [parameters] => Array\n        (\n            [ad_ldap] => Array\n                (\n                    [account_suffix] => mydomain.com\n                    [base_dn] => @DC=mydomain.com\n                    [domain_controllers] => Array\n                        (\n                            [0] => 100.100.176.123\n                        )\n\n                    [real_primarygroup] => 1\n                )\n\n        )\n\n)\n```\n\nwhich looks good to me.\n",
            "I see on SO that you are using 2.1 beta, but which one? Did it work with previous versions? Does it work with master? It should work.\n",
            "I don't see the problem here. Why visiting the login page when logged-in would be a problem? I mean, what's the problem for it to be the default. Furthermore, where would you like to redirect the user?\n",
            "I suppose we can close this issue now?\n",
            "ping @jfsimon \n",
            "I like `ResolvedFormType` as well.\n",
            "I'm -1 to  blindly  add a fluent interface for all classes. I does not always make sense. Actually, I think it rarely makes sense to have one but for a few specific cases. In the code you've change, there are a bunch of classes that are only used internally, and those do not need to be fluent.\n",
            "None of them. We already have a fluent interface when it makes sense (`ContainerBuilder` being a good example).\n",
            "As said by @michelsalib, you need to change the requirement for the `slug` variable. The delimiter can not be part of a variable value by default.\n",
            "A developer should understand a bit of English. If not, well, he is in trouble anyway. Maintaining translations for this would be huge and almost impossible.\n",
            "The routing component does not support segments without a separator. so, in your case, `l` is the separator for the trailingslash variable. See #4225 for a related PR.\n",
            "Can you ask for support on the Symfony mailing-list instead? Thanks.\n",
            "We need more information about your configuration (OS, Symfony version, ...). Does it happen immediately, after some requests? Also, can you run the command with `-v` and paste the output? Thanks.\n",
            "I confirm there is a problem with interface order. I'm going to work on a fix.\n",
            "Probably a side effect of #4599. @asm89 Can you have a look please?\n",
            "If you set the trust proxy flag, it means that you are in control of the last proxy (a reverse one probably) in the chain. In this case, I don't see how it can be spoofed.\n",
            "No worries.\n\nThis is documented in the API doc for the `Request::trustProxyData()` method:  You should only call this method if your application is hosted behind a reverse proxy that you manage. \n",
            "It has been fixed now in master.\n",
            "@tirengarfio As said above, your configuration should still contain `session: ~`\n",
            "The `session` entry has always been there, so there is nothing to explain or to upgrade. Or do you mean that when we ask people to remove the `auto_start` setting, as there is nothing more under `session`, people think they can remove it altogether?\n",
            "@marcospassos Thanks. I'm going to tweak the upgrade file to explain that part better.\n",
            "Here you go: symfony/symfony-standard@36047d69\n",
            "Are you using the remember me feature?\n",
            "Can you ask your questions on the mailing-list? Thanks.\n",
            "Can you ask your questions and ask for support on the Symfony mailing-list? Thanks.\n",
            "As I understand it, @bschussek is against this change. Can we close the PR?\n",
            "I'm -1 on this new feature.\n",
            "Closing this PR as it won't be merged anyway.\n",
            "Adding a CSRF token only makes sense if you are on a page with a  user . If not (and if you don't use HTTP auth or whatever), then there is no need for a CSRF token.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "This PR breaks the tests: http://travis-ci.org/#!/symfony/symfony/jobs/1796369\n",
            "I have no idea why Travis stopped working on PRs.\n",
            "We try to not mess up with the configuration set in php.ini too much (especially if this is not needed in the core). So, if you want to change the default encoding for mbstring, I think that the best place would be in the `init()` method of `AppKernel` class.\n",
            "I think I've addressed all the comments. If everyone agree with the current implementation, I'm going to start updating the documentation.\n",
            "I've fixed the remaining CS issues.\n",
            "Documentation is here: symfony/symfony-docs#1858\n",
            "Closing as it looks like a bug in Composer.\n",
            "We should find the reason for the issue, but as @stof said, this is not what is expected. ping @bschussek \n",
            "We should find the reason for the issue, but as @stof said, this is not what is expected. ping @bschussek \n",
            "We are going to have many problems like this one. What about just dropping the whole list and for such cases, the developers must be explicit about the plural? ping @bschussek \n",
            "Closing this PR as #4777 has been merged.\n",
            "+1 for implementing `Serializable`. Can you squash your commits and fix the CS (we need 4 spaces)? Thanks.\n",
            "@jfsimon Are you working on a fix?\n",
            "Have you tried with the latest version of Symfony SE? I've tried and it works for me.\n",
            "I've reverted the culprit code. That being said, you must not warmup the cache when the cache is not empty (as said by the command help).\n",
            "I've just merged #4720\n",
            "Can you submit a PR on symfony/symfony-docs to update the documentation and reference it here before I merge? Thanks.\n",
            "@stof what about supporting globs/patterns for the `in()` method?\n",
            "@gajdaw You also need to rebase and update the new adapters accordingly. Maybe @jfsimon can help.\n",
            "I've just fixed the unit tests\n",
            "I'm +1. @bschussek?\n",
            "@merk: Can you open two new pull requests? One for each validator?\n",
            "I'm +1. @bschussek?\n",
            "@merk: Can you open two new pull requests? One for each validator?\n",
            "Can I close this PR? Has someone created a ticket for Doctrine?\n",
            "I've updated to take into accounts traits.\n",
            "@bamarni I've added an `array_unique` call at the top (this bug existed before by the way).\n",
            "I've commented the test for now to avoid having all builds fail.\n",
            "See #2072 for the previous attempts to fix this issue.\n",
            "@hvt Can you submit another PR? Thanks.\n",
            "I don't know how it would work in a sane way. You can work on a PR though but I'm not convinced it is a good idea.\n",
            "Anyone willing to work on this one. Should be easy enough to implement.\n",
            "@Seldaek because (and that's probably unfortunate) we have both `getHost()` and `getHttpHost()`. The former does not include the port whereas the latter does.\n",
            "@amrkapthon This has been reverted in the 2.1 branch now.\n",
            "The default parameter values for the service container are explicitly defined via PHP, XML, or YAML, whereas this is not the case for HtttpFoundation.\n",
            "This is the same behavior as PHP. The `tmp_name` is a random string that does not contain the original file extension, but the `name` entry is the name of the uploaded file with the extension included.\n",
            "I've already rejected such a thing. Both libraries do not behave in the exact same way (and I don't want to support the PECL library) and anyway, most of the time (at least in Symfony), the content of the YAML file is cached.\n",
            "Can you ask your questions on the Symfony mailing-list? Thanks.\n",
            "+1 for @vicb proposal. @EvanK Can you work on a PR?\n",
            "The `$id` is the name of the service and by convention, we decided to only use lowercase names. But I don't see why it would be a problem for an autowiring system. Anyway, can you move the discussion on the Symfony mailing-list? Thanks.\n",
            "This is indeed scheduled for 2.2.\n",
            "Before I merge this PR, can you:\n- add an entry in the CHANGELOG of the component and the bundle\n- squash your commits\n- create a PR on the docs to mention the new encoder (its usage and the limitations as you mentioned them here)\n\nThanks.\n",
            "@stof: AFAIR, there is unfortunately no XSD for the Security bundle.... yet \n",
            "@mvrhov Indeed, it's going to be included in PHP as of PHP 5.5. We need to use it if available.\n",
            "This should be reported on doctrine/DoctrineBundle as the XSD is defined in this bundle: https://github.com/doctrine/DoctrineBundle/blob/master/Resources/config/schema/doctrine-1.0.xsd\n",
            "As the developer is responsible for managing the username/password and the form, you already have all the needed information. And Symfony also provides a way to hide the real error from the user. So, I don't think there is anything to change here.\n",
            "ping @kriswallsmith \n",
            "Closing as it seems to be fixed and anyway is about AsseticBundle, not Symfony.\n",
            "I'm not opposed to the change but what's the use case?\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "@Wotre Unfortunately, that's wrong. You can read how to do that in the contrib docs: http://symfony.com/doc/current/contributing/code/patches.html#rework-your-patch\n",
            "The PR has been reverted for now.\n",
            "Can you fix the coding standards and squash you commits? Thanks.\n",
            "Yes, close this PR and create a new one.\n",
            "I'm definitely -1 as performance should be optimized for when you have intl installed.\n",
            "Closing in favor of #4810\n",
            "Closed in favor of #4806\n",
            "Also, you should use the mailing-list for your questions.\n",
            "I agree with @stof and @Seldaek \n",
            "@everzet Can you make another PR for the Config component changes so that I can merge that part into Symfony 2.1? Thanks.\n",
            "#4619 should be fixed before we can merge this PR.\n",
            "Can you add a note in the CHANGELOG? Thanks.\n",
            "I'm ok with option 1 (the BC break). After doing the last changes, can you squash your commits before I merge? Thanks.\n",
            "Closed in favor of #4804\n",
            "ping @Seldaek\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "@jcowgill there are still 3 commits.\n",
            "But some validator messages comes from the form component. So, we have to split the file in two smaller files: one for the error messages defined in the Validator component and another one for the Form component.\n",
            "Can you tell us your need because I don't see when this would be needed actually. If you are going to use it in a test, then why not just get the Location from the headers and use the appropriate PHPUnit method?\n\nLooks like adding some bloat to the Response class without any real added value. Also because the Response class being primarily a data object, I like to have as less logic as possible in it.\n",
            "I don't like this PR as it is really just a hack.\n\nIf you want to test dynamic forms, you need to inject the HTML nodes as the JavaScript code would have done.\n",
            "You cannot use the dumper if the controller is an array. You should use the 'Foo::bar' notation instead.\n",
            "Closing this issue as it will be fixed automatically when we release 2.0.16, which should happen soon.\n",
            "Can you rebase your PR on master?\n",
            "fixed now.\n",
            "I don't see a need for that.\n",
            "I'm going to review the PRs marked for 2.2 after the release of 2.1 (next week).\n",
            "Merged! Thanks everyone for your hard work on this one.\n\nThe remaining points should now be addressed in follow-up PRs.\n",
            "I'm +1 to add the `isStarted()` method, but -1 for the change of `Request::hasSession`.\n",
            "ping @eriksencosta\n",
            "That's great news. Any ETA?\n",
            "hmm, you mean shipping all ICU data for all major releases? It will take a lot of space, no? Why not just shipping the latest version of it?\n",
            "But do we need to ship the data with Symfony? Can we generate them just for the tests and just use the latest one for when a dev uses the Locale component?\n",
            "fixed by #5107\n",
            "@dlsniper and Symfony 2.0 actually works the way you describe. So, this is a regression.\n",
            "`hasSession` has the right behavior it won't change. The reference PR proposes the addition of an `isStarted()` method and I'm +1 for that.\n",
            "Can you ask your questions on the Symfony mailing-list? Thanks.\n",
            "The `post_only` option is defined in `UsernamePasswordFormAuthenticationListener`, not `AbstractAuthenticationListener`. So the check is done there.\n",
            "@lavoiesl Can you squash your commits before I merge? Thanks.\n",
            "@lavoiesl Can you squash your commits before I merge? Thanks.\n",
            "Because  passing PHP helpers to all Twig templates  is not possible. This  problem  only occurs when you want to provide support for both PHP and Twig templates, which is pretty rare. For any other project, you should stick to only one template engine and if you are use Twig, just create a Twig extension, you don't have to create a PHP helper class.\n",
            "What's the status of this issue? Should it be closed? Can we do something about it?\n",
            "I've talked with @Crell at Symfony Live about this issue and I explained that there is actually no hard dependency between the 2 components. You can use the DIC component without using the config one. That being said, using the Config component (just the resource classes actually) give you a nice way to automatically recompile your container without asking the user to do it himself.\n",
            "@adrienbrault Can you have a look at my comments?\n",
            "duplicate of #4560\n",
            "Unfortunately, I don't think we will be able to fix this as it would break almost all applications using functional testing. The only viable option I can see is to first make the Response class of BrowserKit look more similar to the HttpFoundation class.\n",
            "I've just submitted a pull request that fixes this issue but without too much impact for existing code. Basically, you only need to change occurrences of `getResponse()` by `getRawResponse()`. See #7835\n",
            "The tests should be fixed instead.\n",
            "fixed as of 2.0.15\n",
            "This has already been proposed, and refused. The rule is simple enough: All characters are significant, including whitespace.\n",
            "This has already been fixed some time ago.\n",
            "closed in favor of #4806\n",
            "This depends on a fixed/given directory structure, which is not something I want to hardcode. But as you said, that's something you can do pretty easily yourself.\n",
            "@bschussek Is this PR still needed in master? Can it be merged there?\n",
            "Closing this PR as when there is no session, there is no need to have a CSRF token.\n",
            "Closing this PR as when there is no session, there is no need to have a CSRF token.\n",
            "Instead of using options, you can pass your information as default values. There are easily accesible via the request attributes and as such they do no suffer from any performance issues.\n",
            "I'm +1 for this change, but only on master. @bschussek?\n",
            "2.0 is merged into master on a regular basis and I've just done that.\n",
            "There is a PR for that issue: #4565\n",
            "Closing this issue. Support should be done on the Symfony mailing-list instead.\n\nFor the record, there are some known bugs with APC and PHP 5.4. We have made some workaround for some of them.\n",
            "I don't think it is worth it.\n",
            "Can you reopen a PR with just your change and on the 2.0 branch? Thanks.\n",
            "You have to create a new PR to rebase it to the 2.0 branch.\n",
            "now ;)\n",
            "IIUC, there is nothing we can do in Symfony. Can we close the bug then?\n",
            "I'm ok with this new feature, but the implementation should be done without breaking BC. That's what I've done in #6349\n",
            "Closing it as #4808 has been merged (instead of #4573).\n",
            "The codes from RFC6585 have already been added.\n",
            "The first argument of the `add` method is the field name, not the type. Closing this issue as support should be asked for on the mailing-list. Thanks.\n",
            "I think that @Seldaek original idea is the best as it gives you all the needed flexibility you need.\n",
            "Seems more understandable to me. +1.\n",
            "it is a BC break. +1 for  errors .\n",
            "People who voted -1. Can we hear your arguments against this change?\n",
            "@maerlyn Problem is that you will always find people with such class names (`form_errors` is still generic).\n\nThe only option would be to prefix the class names with a something unique like `sf_`, but as seen in symfony1, people don't like to advertise the fact they are using Symfony, so they want the prefix to be configurable and things go out of control from there.\n",
            "Closing this PR as we won't find a consensus on the class names.\n",
            "`PostResponseEvent` cannot be considered a `KernelEvent`. `KernelEvent`s are the ones fired by `HttpKernel` itself, which is not the case for `PostReponseEvent`.\n",
            "related to symfony/symfony#4020\n",
            "@niklasf: it looks good now except for the listener constructor (see @schmittjoh suggestion above). Can you fix that and add some unit tests to ensure that everything works as expected? Thanks.\n",
            "I thought about that as well, but that does not make sense.\n",
            "Can you add a note in the CHANGELOG of the component?\n",
            "We are going to have a beta release soon now.\n",
            "This is not related to Twig but Symfony. Can you open an issue on symfony/symfony? Thanks.\n",
            "lol, I read too fast. Sorry about that.\n",
            "I forgot to ask you to sent a new PR for the 2.0 branch instead of master. Thanks.\n",
            "sorry, I thought I was in the 2.0 branch locally... but it was master. Merged, thanks.\n",
            "Closing this issue as @beberlei mentioned that this is not possible to solve in Symfony.\n",
            "I'm not we want to support FTP in the Finder. The ticket was about fixing the failure for non-rewindable streams (FTP being just an example).\n",
            "Who is still using FTP nowadays? Note that this is not an ironical question but a real one. I stopped using FTP many many years ago, and I wonder if this is still a protocol widely used.\n",
            "You're correct. The name is indeed confusing. But unfortunately, we won't be able to change this as this would be a major break. I've tweaked the API doc though.\n",
            "@WouterJ If you can create a PR for the docs, that would be wonderful. Thanks.\n",
            "thanks\n",
            "I'm -1 for changing the current, even if I understand the possible confusion.\n",
            "This is a known issue. But as Composer is rapidly becoming the de-facto standard to install project dependencies, the PEAR channel is becoming more and more deprecated.\n",
            "I don't see the benefit of doing that. Can you explain why you would want to do this change?\n",
            "There is no consistency here. Assets from bundles must be in the bundle to be reused. Templates in `apps/` needs to be put outside of the `web` directory because they are not public. And finally, public resources for the app lives in `web` where they belongs to. So, it is consistent as it is.\n",
            "To be consistent, we should throw exception whenever some operation fails.\n",
            "You need to add a note about the BC breaks in the CHANGELOG file.\n",
            "Also, instead of using `\\RuntimeException`, I would create a custom exception like we have done in other components (an interface + a RuntimeException that implements the interface and extends \\RuntimeException). The exception name can be something like `IOException`.\n",
            "It should be fixed in PHP. I'm going to ping some PHP core devs to see if we can speed up the process.\n",
            "Closing this issue was intentional?\n",
            "Sending a 404 from a controller is by far the most common exception you need to send, and this is just a shortcut for newcomers. You should probably use exceptions all the time.\n",
            "fixed\n",
            "fixed now (f27f596).\n",
            "Can you reopen a PR on the 2.0 branch as this is a bug fix? Thanks.\n",
            "I agree but do you have an example where it misbehaves?\n",
            "closing in favor of #4228\n",
            "It was the case previously. It has probably been broken with the redesign. Anyone willing to have a look at this?\n",
            "I think the `div` is better as this is less intrusive. What if the page already has a padding bottom?\n",
            "Anyone knows a list of buggy APC versions and when it was fixed?\n",
            "Or is it still that APC does not work well with PHP 5.4?\n",
            "Just to be sure I understand it right: We need to recommend 3.1.13 for PHP 5.4, everything is fine for PHP 5.3, right (at least I've nerver had a problem with 5.3)?\n",
            "If you have a look at the changelog for APC, what was fixed in 3.1.13 is already in the changelog for 3.1.14 (http://pecl.php.net/package-changelog.php?package=APC). Anyone else can confirm that both 3.1.13 and 3.1.14 works whereas 3.1.12 does not?\n",
            "see sensio/SensioDistributionBundle@e417fd7 where I've added a check for problematic APC versions\n",
            "I've merged the other three pull requests.\n",
            "For the record, this has been rejected because you must fix your translation strings. The only case where it might make sense to ignore the error is for validator messages, where a wrokaround has been merged recently.\n",
            "It was due to a Twig misbehavior, which has been fixed now (see fabpot/Twig@611f4451e).\n",
            "As this is not a common need, you'd better override the default translator class (`Symfony\\Bundle\\FrameworkBundle\\Translation\\Translator`) and override the `getLocale()` method to return your fixed language (which can of course come from a container parameter value).\n",
            "We've done many changes for the sake of changing things recently on the routing and it makes me nervous and uncomfortable. And the problems you mention here are not something we need to fix as I can't think of a real life situation where it would occur. So, let's concentrate and something else.\n",
            "@Tobion Can we close this meta-issue as most of the points here have a pending PR or a merged one already?\n",
            "It has been fixed here: 8da880c394b8e91d9797e1f1dfc384f2b46b910f\n",
            "Can you squash your commits? Thanks.\n",
            "Closing this issue as there is nothing to  fix .\n",
            "You should also keep some unit tests for the old method.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "I've just tested and it works for me. Can you paste your YAML file?\n",
            "Can you report this issue on https://github.com/doctrine/DoctrineMigrationsBundle? Thanks.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "It does not seem that the commits are squashed.\n",
            "Can you add a note abou this change in the CHANGELOG?\n",
            "@stof: right\n\n@bamarni: Can you squash your commits?\n",
            "ping @beberlei \n",
            "The DIC is not a way to manage all your objects, but only the ones that are services. If you want to be able to retrieve an infinite/undefined number of instances for a given service, it means that you are dealing with data objects and not services. Your rectangle example being a very good example of something that should not be managed by the DIC (but a rectangle factory can probably be managed by the DIC). If you have a limited number of instances, then just configure them with the proper calls to the needed methods.\n",
            "FYI, I've added some more constants about the Symfony version: 48099a852cc3 (modeled after PHP constants)\n",
            "I've just updated the website to accept any `HttpKernel::VERSION` string. Some redirection examples:\n- 2.0.12 -> current\n- 2.0 -> current\n- 2.0.12-DEV -> current\n- 2.1 -> master\n- 2.1.0-DEV -> master\n",
            "I've fixed the doc index for non-existing versions. Can you squash your commits before I merge? Thanks.\n",
            "This change must be done on master.\n",
            "That does not work when you have something after the unindented collection:\n\n```\ncollection:\n    key:\n    - a\n    - b\n    - c\nfoo: bar\n```\n",
            "Sorry, the failing test is the following:\n\n```\ntest: Key/value after unindented collection\nbrief: >\n    Key/value after unindented collection\nyaml: |\n    collection:\n        key:\n        - a\n        - b\n        - c\n        foo: bar\nphp: |\n    array('collection' => array('key' => array('a', 'b', 'c'), 'foo' => 'bar'))\n```\n",
            "Can you squash your commits? Thanks.\n",
            "I disagree with the  I should be given any possible ways of customizing it, whether it makes sense or not  part of your comment. Not everything should be configurable. The more configuration you have, the more complex the system is. We have decided right from the start that the bundle names were not configurable, and that's not something we are going to change.\n",
            "This should be done on master as this is a new feature (I know that you can see it as a bug fix as this is in the YAML spec, but still).\n",
            "@gajdaw You cannot. So, creating a new was the thing to do. Thanks.\n",
            "What would be the point in supporting more than one format? For what we do, XSD is enough.\n",
            "Let's revert this change, it's not a critical change anyway, so let's not break things for nothing.\n",
            "I've just tested and it works as expected for me. Can you paste your HTML template? I suspect that the form is not well-formed.\n",
            "How would you handle route generation in this case?\n",
            "This is because `\\` is an escape character in PHP; double-it and you will be fine: `TFIBundle\\\\Libs`\n",
            "You are right. That's because the default exception controller uses Twig templates. I've created a ticket to update the documentation accordingly (symfony/symfony-docs#1547).\n\nOut of curiosity, why aren't you using Twig for your templates?\n",
            "Thanks for your answer.\n",
            "ping @eriksencosta\n",
            "Ping me when everybody thinks this is mergeable.\n",
            "@eriksencosta If you want this to be in 2.0, the PR must be done on the 2.0 branch.\n",
            "@stealth35 Do you have time to make the last changes before I can merge?\n",
            "@stealth35 @eriksencosta It would be good to have this PR merged before 2.1.0 beta2. Do you know when it will be ready?\n",
            "Rescheduling this PR for 2.2.\n",
            "@eriksencosta Will you have some free time in December to work on this PR?\n",
            "Looks like this PR is now obsolete (see #7386). @bschussek Can we close this PR?\n",
            "Closing as it is obsolete now, but I've created an issue to keep track of the code (see #8704).\n",
            "@vicb @bschussek ok for you?\n",
            "@vicb @bschussek ok for you?\n",
            "@jfsimon What's the status of this PR?\n",
            "@jfsimon Would be nice to be able to include this PR before 2.1.0 beta2. Would you have time to finish the work soon?\n",
            "Then benchmark scripts won't be part of the repository in the end, so you should create a new repo for that.\n",
            "@jfsimon I hadn't had a look at this PR since a long time as it has  WIP  in the title. Can we talk about it tomorrow?\n",
            "@sun: Thanks for the information. That's very interesting. IIUC, the major API break would be for the iterators, not for the public API (the one in the main Finder class), right? If that's the case, I'm +1 for the refactoring. Would you like to help on this refactoring?\n",
            "ping @bschussek \n",
            "Can this PR be closed?\n",
            "The Doctrine bundle is now hosted on the Doctrine organization. Can you create an issue there (https://github.com/doctrine/DoctrineBundle)? Thanks.\n",
            "After doing the requested changes, can you squash your commits? Thanks.\n",
            "It looks like that another commit is in your PR that should not be there.\n",
            "Apparently, some tests do not pass anymore after the patch. Can you have a look at them? Thanks.\n",
            "I've reverted this PR as it breaks things. I've applied another fixed instead.\n",
            "I agree with @ruian \n",
            "Closing this issue as it is not fixable with the current Twig architecture.\n",
            "Looks like a very good idea. We can do that progressively. So, depending on the complexity of the configuration, we use native tools, and fallback to plain PHP for more complex one.\n\nDo you want to work on this?\n",
            "@jfsimon: no, please go for it.\n",
            "Closing this ticket as the discussion now happens on #4061.\n",
            "Can you work on a fix?\n",
            "@stof: correct. The problem is that the parser does not emit any error, it just ignores the end of the string, which is wrong.\n",
            "see fabpot/Silex#183 for an other issue on the same topic.\n",
            "I'm not able to reproduce. As quite a few has the same problem, anyone able to send me an archive with a minimal project that has this issue (with the master branch of Symfony and Symfony SE)? Thanks.\n",
            "So, I'm closing this issue.\n",
            "@YetiCGN Thanks for the feedback.\n",
            "@drak, @vicb: Is it ok now?\n",
            "This should go into the 2.0 branch.\n",
            "#4006\n",
            "Closing this  meta  ticket as we don't need to track such requests in the tracker.\n",
            "see https://twitter.com/#!/rdohms/statuses/192630480590475265 also. @bschussek: apparently, transition is not that easy :(\n",
            "@bschussek I'm +1 for this PR but as mentioned by @kriswallsmith, we must find another name as `OptionsParser` immediately make me think of something related to the CLI. \n",
            "Anything else before I merge this PR?\n",
            "@bschussek I'm +1 for this PR but as mentioned by @kriswallsmith, we must find another name as `OptionsParser` immediately make me think of something related to the CLI. \n",
            "Anything else before I merge this PR?\n",
            "Is should have been fixed in 2.1? @drak Can you have a look please?\n",
            "This should be done on master as this is not a bug fix.\n",
            "Let's discuss that feature for 2.2.\n",
            "nobody has ever said that 2.1 would be LTS. Actually, I think we are going to wait for 2.3 for LTS.\n",
            "Im' going to review this PR in the next coming days. And to answer your second question, more documentation or better documentation is always a good thing, so go for it.\n",
            "Merged!. Can you submit documentation changes to symfony/symfony-docs? Thanks\n",
            "Is everything ok? Or do we need to change something?\n",
            "Closing this issue as Composer is much better now and these issues should have been solved by now. If not, please, reopen a ticket on Composer.\n",
            "It's more about readibility.\n",
            "should definitely be `0777`. Can you create a PR?\n",
            "`0777` means that you want the maximum permission based on the umask, it does not set the permission to `0777`.\n",
            "You cannot. The firewall is executed _before_ any controllers and the `/login_check` is managed by the firewall. If you want to customize that, you need to create your own authentication listener and implement your own logic there.\n",
            "Closing this issue as this is not a bug. You should probably discuss this topic on the mailing-lists.\n",
            "This is just a default as we know that this directory is writable. But as this is configurable, feel free to move them anywhere else.\n",
            "done\n",
            "@Seldaek: done for all Symfony and Sensio repositories!\n",
            "There is no need to that. Just append it after generating the URL:\n\n$router->generateUrl('topic.view').'#comment-2';\n",
            "That would completely defeat the routing system main goal, which is to abstract to real URLs from the user perspective. So, definitely -1. By the way, you can already do that with the help of the various `Request` methods.\n",
            "This BC break is unfortunately definitely needed (and anyone who has tried to debug property paths in `DelegatingValidator` knows what I'm talking about).\n\nI'm not a big fan of the `[foo]` notation for forms backed by an array as it looks quite arbitrary. I have not any better idea except perhaps being able to switch from the array notation to the method notation (and the other way around) with some method call?\n",
            "That's much less intuitive than the current version, and this is indeed a very big BC break.\n",
            "Closing in favor of #6124\n",
            "Symfony has no knowledge of the reverse proxy as it is behind it. If you want to have information about caching, just have a look at the Response cache headers, which are already in the profiler.\n",
            "Can we close this issue?\n",
            "thanks @stof \n",
            "I have looked at the referenced bugs mentioned by @Vincent-P. Does it mean that we should raised the minimum version of PHP to 5.3.4?\n",
            "Can we list the versions that do not work?\n",
            "I'm waiting for @bschussek approval.\n",
            "I'm waiting for @bschussek approval.\n",
            "The URI is only interesting if you have a full document, which is not your case anyway. What you do is probably the best you can do. I don't think we can do better.\n",
            "Questions must be asked on the mailing-list. Github issues is only used for bugs.\n",
            "No, there is no need for that. If you want to use your own implementation of a profiler storage, then just override the `profile.storage` service.\n",
            "The only reason I know about is the usage of the Process component. Try running just the Process tests to confirm this. PHP has some known problem related to proc_\\* functions and as far as I know, there is nothing we can do about them.\n",
            "@bschussek: Can you rebase on master? I will merge afterwards. Thanks.\n",
            "I agree with the previous comments.\n",
            "This is basically what we had in symfony 1.x.\n\nSome comments:\n- I would remove the `data` as it makes things more complex and more difficult to understand (as arguments is an array, you can put your data there too);\n- I would use the standard `set`, `get`, `all`, ... methods for the `arguments` related methods\n",
            "Does #3754 fix this issue?\n",
            "Can you please use the mailing-list for your questions? Thanks.\n\nhttp://groups.google.com/group/symfony2\n",
            "I agree with @pulzarraider that right now, there is no clear way of getting the latest messages as we don't have a master reference for translation messages. That being said, I don't see any need to complexify the process as adding new messages is not something that we do a lot in Symfony.\n",
            "Yes, let's do that. Can you work on a PR?\n",
            "fixed by PR #4077\n",
            "created an issue for the doc: symfony/symfony-docs#1211\n",
            "It works for me too. Which OS do you use? Windows?\n",
            "Closing as there is no news from the original reporter and nobody else seems to have the problem (or at least, nobody reported the same issue).\n",
            "@drak: again, after I merge this PR, can you make sure that everything is documented properly in the documentation? Probably within a new cookbook article. Thanks.\n",
            "@rdohms Have you had a look at @guilhermeblanco fix? Does it help? Anything we can do in Symfony?\n",
            "Closing this issue as it looks like a problem in LiipFunctionalTestBundle (Symfony does not support the authentication thingy out of the box).\n",
            "Closing this issue because, besides the philosophical discussion about paths vs query strings, what is proposed would be very difficult to implement without having many non-intuitive behaviors and it would introduce easy to miss colliding routes.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "Closing this issue as this would be very difficult to implement in a clean way.\n",
            "@stof: As the message says that the template is not found, it looks like Symfony actually accepts this name.\n",
            "Closing as you can now register your own namespace and you are not required anymore to use the Symfony notation.\n",
            "Using `json_encode` for the serialization is not an option. The native PHP serialization mechanism should work.\n\nCan you copy/paster the code you use to serialize your Doctrine entity?\n",
            "We have already tried to fix that issue in the past but it introduced more problems than it solved. So, that's probably a  won't fix .\n",
            "see #4692\n",
            "@lisachenko Change the `locale_listener.class` parameter to a new class name with the content of the class from 2.1.\n",
            "I have opened a ticket #3872\n",
            "fixed by #3820\n",
            "#3375 also talks about adding this.\n",
            "As we have added JsonResponse, I think it belongs to the core as this is not easy to get it right.\n",
            "Closing this issue as the discussion now happens in PR #4546.\n",
            "@schmittjoh Would you mind submitting a PR for that? Or can someone create a PR by extracting the code from JMSSecurityExtraBundle?\n\nFor reference, the code is mostly here: https://github.com/schmittjoh/JMSSecurityExtraBundle/tree/master/Security/Util\n",
            "@schmittjoh If you agree to contribute that part to Symfony, I can do the work.\n",
            "Closing this issue as the discussion  now happens on #4763\n",
            "Closing this ticket as their is no limit set by Symfony itself.\n",
            "Can you squash your commits before I merge? Thanks.\n",
            "adding this just before returning the iterator does not work either. It just always returns an empty result.\n",
            "It does not work in all cases, for instance if you add a `depth`:\n\nCatchable fatal error: Argument 1 passed to Symfony\\Component\\Finder\\Iterator\\DepthRangeFilterIterator::__construct() must be an instance of RecursiveIteratorIterator, instance of NoRewindIterator given, called in /Users/fabien/work/symfony/git/symfony/src/Symfony/Component/Finder/Finder.php on line 474\n",
            "see #4335\n",
            "Is it mergeable now? ping @Seldaek, @schmittjoh.\n",
            "Tests do not pass when you run them all.\n",
            "+1 for `with`. Documentation for master should be updated as well.\n",
            "+1 for supporting a string or an array with the new syntax as using only one element is probably the most common use case. But then, why not supporting any valid Twig expression?\n",
            "@vicb: I would just remove the special array case in the node as it's not needed anymore.\n",
            "... and update FormExtension::setTheme() to also accept a string in which case we convert it to an array there.\n",
            "@vicb: I like 1) more than 2) as this how the built-in tags work.\n\nTo keep BC even further, can we just remove the `with` keyword? To make it BC, we just need to have a look at extra parameters and add it to an array if they exist.\n",
            "@alan0101c: Tests should pass. I can add the unit tests if you want, but first, can you base your PR on the 2.0 branch as this is a bug fix? Thanks.\n",
            "I don't understand the point of this PR. What does it bring us? What issue does it solve?\n",
            "I've just discussed with @jfsimon and he is going to provide a better patch based on my feedback.\n",
            "Do you have any other examples in mind where it would be useful?\n",
            "@stof: I agree that we should think of a better name: `initialized()` or `exists()` (to differentiate from `has()`)?\n\n@evillemez: After choosing the name, can you work on actually using the new method for some of the use cases mentioned in this PR?\n",
            "`initialized()` looks fine to me. Make your changes, squash your commits and then force the push to your branch (the PR will be updated automatically).\n",
            "We cannot break BC for `ContainerInterface` as this is marked with the `@api` tag.\n",
            "Can you rebase before I merge? Thanks.\n",
            "You need to rebase, not merge.\n",
            "My comments:\n- `ServerBag` represents what we have in the `$_SERVER` global variables. As such, the code should be moved to the `getHeaders()` method instead like the other tweaks we do for the HTTP headers.\n- A comment must be added explaining why this is needed and the configuration the user must have to make it work (then remove the Github URLs).\n- The code should only be executed when `PHP_AUTH_USER` is not available (to not have any overhead when not needed).\n",
            "I tend to agree with with. What do you think @bschussek?\n",
            "What's the point is checking the hasser/getter/isser arguments. It's up to the developer to check if he can use them or not. Let's not complexify the code for this.\n",
            "@jjbohn Can you update the PR to check for the number of required parameters as suggested by @bschussek? Do we create a new exception for that or do we reuse an existing one?\n",
            "The correct XPath should be:\n\n``` js\n$x( descendant-or-self::tbody//*[name() = 'tr' and (position() = 5)]/descendant::td );\n```\n\n`lxml`, the Python library we have ported to PHP, has the same bug. The question is: can we always replace `/descendant::` in `CombinedSelectorNode::_xpath_descendant()` by `//` or does it depend on the expression?\n",
            "no, I'm not an XPath guru and as such, I would prefer that someone with more knowledge of XPath to give his point of view, based on my above comment.\n",
            "Closing this issue as the discussion should now happen on PR #4721\n",
            "Closing the issue as the file size has been modified in #4304.\n",
            "+1 for `version_compare()`\n",
            "@pulzarraider Can you add some unit tests before I merge?\n",
            "#3493 has been merged now.\n",
            "Looks good to me. Can you update the CHANGELOG and UPGRADE file accordingly and start to update the documentation at symfony/symfony-docs? Thanks for your work, the session handling in Symfony2 is starting to become amazing!\n",
            "ping @bschussek \n",
            "Closing this PR in favor of #3490\n",
            "@bschussek is it ok for you?\n",
            "Closing this PR in favor of #4067\n",
            "ping @bschussek \n",
            "This is a ChromePHP bug. HTTP header names are case insensitive.\n",
            "Closing this issue as there is nothing to do. For further discussion about this topic, the mailing-list is probably more appropriate.\n",
            "Why is it not  enough ? I've just tested and `has()` returns `false` when the request is not defined. Can you explain us a bit more when you have this error?\n",
            "I've merge #3473 for now.\n\n@dlsniper I think option 3 is the better option.\n",
            "That works for me (and probably for a lot of people too). So, do you have a custom directory structure or something that is different from a standard Symfony Standard Edition?\n",
            "#3454 has been merged now.\n",
            "I'm -1 on making this configurable but I'm open to suggestion on how to improve the current situation.\n",
            "I'm closing this PR as we won't make this configurable. Note that you can put all your template under the `app/Resources` directory if you want; it makes the path a bit shorter.\n",
            "ping @bschussek \n",
            "done\n",
            "Do you have any suggestions?\n",
            "Note that you can put all your template under the `app/Resources` directory if you want; it makes the path a bit shorter.\n",
            "because we cannot trust `HTTP_HOST` anyway, I'm closing this issue.\n",
            "ping @bschussek \n",
            "Can you squash  your commits before I merge? Thanks.\n",
            "ready to be merged now?\n",
            "Symfony needs to be able to write into the `cache/` and `logs/` directory. You can of course move these two directories as you see fit. They do not need to be under the main `app/` directory. Making them read-only is not supported.\n",
            "Can you give us a list of bundles you have installed?\n",
            "Any news on this issue? There is something that triggers the session, but with just the information provided in this ticket, this is impossible to go further.\n",
            "I have added a unit test to prove that it actually works. Can you give me a test that does not work for you?\n",
            "@Seldaek @kriswallsmith is it ready for merge now?\n",
            "@Tobion: I know that we have done some BC breaks for convenience but it was a mistake. And we can of course still revert them. Anything specific in mind?\n",
            "This was closed because the PR has been merged.\n",
            "I'm reviewing this PR and I'm going to make some modifications. I will send a PR to @arnaud-lb soon.\n",
            "I've sent a PR to @arnaud-lb arnaud-lb/symfony#3 that fixes some minor bugs and add support in more classes.\n",
            "@asm89:\n\nPlaceholders in the hostname are managed in the same way as the ones from the URL pattern.\n\nYou can set a hostname pattern for a collection (like the prefix for URL patterns).\n",
            "no need to rebase, I will resolve the conflicts when merging. I've still have some minor changes to do before merging though. Anyone willing to have a look at implementing the Apache dumper part?\n",
            "@Tobion: I never said it will be in 2.1. The plan is to create a 2.1 branch soon so that we can continue working on 2.2.\n",
            "@Koc: the tweet was written on Match 10th. Things have changed since then ;)\n",
            "@IjinPL Can you tell us which tweaks?\n",
            "I agree with all of you but we need to stop at some point and this PR is not yet finished (I have implemented the XML loader between).\n",
            "People have asked for other exceptions ;)\n\nThe plan after 2.1 is to have faster release cycles (a bit like what I do for Twig). So, hopefully, 2.2 will be released in July/August 2012.\n",
            "we are still discussing the schedule of Symfony 2.1 and 2.2, so depending on what we decide, there is a chance to get this into 2.1.\n",
            "This will be included in 2.2.\n",
            "@arnaud-lb Now that #5734, can you update this PR for master. I will then do a final review and merge. Thanks.\n",
            "@arnaud-lb Did you submit a PR on the docs? If not, can you make it one to document this new feature?\n",
            "@Tobion: Do you see any other issues before I merge?\n",
            "@Tobion: Your reference does not exist anymore\n",
            "@wendigo Thanks but we are almost done now. This should be merged really soon.\n",
            "@wendigo But there is one thing that would definitely be helpful: try to use this feature in your code and give us some feedback.\n",
            "@Tobion: I've created an issue for the renaming: #5989\n",
            "Merged! Thanks you very much to everyone who participated in this PR, especially @arnaud-lb and @Tobion.\n\nEnjoy!\n",
            "Closing as there is no feedback and it should be fixed now.\n",
            "I suppose this ticket is related to #4208\n",
            "Can you open a ticket at doctrine/DoctrineBundle instead?\n",
            "I think this is fixed now in master. Can anyone confirm?\n",
            "This is indeed a documentation issue.\n",
            "see symfony/symfony-docs#1135\n",
            "Closing as Symfony now supports the `X-Forwarded-*` headers and you can configure the names if they are not standard in your environment.\n",
            "I'm -1 on the second commit.\n",
            "I still prefer `is_ajax` as it makes things more readable.\n",
            "I don't see any inconsistencies here. One a variable name and the other is a method call/property name. So, my vote is a don't fix.\n",
            "variables and functions are underscored.\n",
            "The problem is that the `Twig_Template::getAttribute()` is already the bottleneck\n",
            "It looks like the PHP executable is actually not a PHP CLI, but a PHP CGI executable. Can you ask support on the Symfony mailing-list?\n",
            "I would really like that we do not break BC in this case.\n",
            "I agree with you; I should probably have refused to merge the previous PR. And I think we need to reconsider this change. If not, why are we even bothering tagging stuff with the @api tag?\n",
            "@bschussek +1 for @Tobion's suggestion.\n",
            "merged\n",
            "I would really like that we do not break BC in this case.\n",
            "I agree with you; I should probably have refused to merge the previous PR. And I think we need to reconsider this change. If not, why are we even bothering tagging stuff with the @api tag?\n",
            "@bschussek +1 for @Tobion's suggestion.\n",
            "merged\n",
            "As @stof mentioned, these exceptions are thrown by PHP.\n",
            "any news on this issue?\n",
            "I' m also -1 on this one.\n",
            "Closing this ticket. We have already merged quite a few PRs on that topic, so people on windows just need to keep them coming to cover all problems.\n",
            "Can you give us a situation where it is actually a problem for you? Which client?\n",
            "We've already approved this a while ago. So, I've just done it. IIRC, we also decided to move the MonologBundle. Does it sounds good too?\n",
            "Logging is totally optional in Symfony. And of course, MonologBundle will be part of the Symfony standard edition by default anyway.\n",
            "MonologBundle has been moved too.\n",
            "done\n",
            "As 2.1 is not too far away and because the Swiftmailer and the Monolog bundles have not evolved that much in the 2.0 branch, I will just stop the subtree split for these repos.\n",
            "I'm -1 on this change. The `vendors.php` script is _only_ for people working on the core so that we can run the unit tests. So, we need the flexibility to test on many different versions of the code and having the repository here is kind of mandatory.\n",
            "Should be fixed by #7738\n",
            "That breaks the unit tests.\n",
            "Can you squash your commit before I merge this PR? Thanks.\n",
            "The mapping algorithm is fragile and it breaks easily. @bschussek: any idea on how we can make it more reliable (without generating all the possible paths which would make everything really slow for bigger forms)?\n",
            "@kbond: Can you add some information about the changes in the CHANGELOG?\n",
            "Can someone open a ticket on the missing feature?\n",
            "Why do you use LOBs for the data? Can't you use a  simpler  string storage?\n",
            "@diaspar Can you try what @beberlei suggested and submit a pull request if that works fine for you (on the 2.0 branch)?\n",
            "I've already rejected the same proposal in the past.\n\nRight now, the possible values are defined by the route and you cannot add any other one. But if you allow values from the query string, then the end user is able to inject any value in your controllers. This is a major security hole.\n",
            "The client goal is to simulate a real client, in which case we catch the exceptions to convert them to proper HTML. The client works in the exact same way and this is indeed the expected behavior. To test for exception, you can test the response status code of the response.\n",
            "Creating a new event is expensive. As this use case is really rare, I don't think this is worth it.\n",
            "The best way would be to actually mark pages as not-cacheable (with HTTP headers) and only set HTTP cache headers for the ESI pages.\n",
            "By the way, you should probably ask your question on the Symfony mailing-list to have more feedback from other users.\n",
            "Closing as there are 4 opened PR on this topic. I would prefer that we first discuss the interface and what we want before starting coding. I suggest that this discussion happens on the Symfony dev mailing-list. Also, we need to discuss what to do with the current discussion on the FIG group mailing-list.\n",
            "https://groups.google.com/forum/#!topic/symfony-devs/EJr6XhawJTE\n",
            "Have you tested it on a project? Because it breaks my simple examples (where I have some sub-requests).\n",
            "Closing this issue as this is not related to Symfony and a workaround exists.\n",
            "If the routing fails, there is no way to determine the right format, that's why HTML is returned by default. If you app only returns JSON, or if your API is on a given sub-directory or a given sub-domain, you can probably change the default request format with a listener registered before the routing one.\n",
            "I have implemented circular references involving aliases some time ago: e718a51b.\n\nCan you give me the exact configuration of the service involved in the circular reference so that I can reproduce it as a test case? \n",
            "Can you add a note in the CHANGELOG before I merge? Thanks.\n",
            "Can you add a note in the CHANGELOG before I merge? Thanks.\n",
            "which OS do you use?\n",
            "@helmer: Can you open a PR referencing this one so that we do not loose track of your work (as this PR is closed now)? Thanks.\n",
            "@helmer: Can you open a PR referencing this one so that we do not loose track of your work (as this PR is closed now)? Thanks.\n",
            "This command is about displaying the default configuration for a given bundle. So, what about `config:dump-reference`? As I understand, the command name is the last element to figure out before merging, right?\n",
            "reopening as the fix has been reverted\n",
            "@ntomka Can you submit a PR or open a new issue?\n",
            "Closing in favor of the related PR #4146\n",
            "we are using `FILTER_VALIDATE_EMAIL` and these email should probably be valid. The `checkMX` flag is probably what make them fail.\n",
            "The same should be done for Twig, no?\n",
            "The same should be done for Twig, no?\n",
            "Is it ready to be merged?\n",
            "Is it ready to be merged?\n",
            "Closing this issue as the solution is simply to use the plain key instead of the example given which is not valid YAML.\n",
            "closing as a duplicate of #3696\n",
            "I am inconsistent and I like it ;)\n",
            "@lazaridis-com I think you did not get my point: I don't care about that. I just stated that I used to used spaces around a dot because it is my personal preference, but changing it to something is a no-brainer.\n",
            "and frankly, saying that Symfony is a  one-person-ego-trip-project  is far from the truth. Just have a look at all the activity around the project, have a look at all the PRs I merge every single day.\n\nIt if was a one-person-project, do you think I would have dedicated the last 6 years of my life supporting it as an Open-Source project? Every single day since 2005?\n",
            "merged, thanks. Don't forget to update the CHANGELOG and the UPGRADE file as well. I've done the former here: 172300e0ded\n",
            "@ManuelKiessling A PR should also add some unit tests as well as the regex is not so obvious. \n",
            "We don't document properties, especially private ones.\n",
            "Closing this issue as this is already the case.\n",
            "@canni: I've just merged 2.0 into master.\n",
            "@canni: I've just merged 2.0 into master.\n",
            "I would prefer to not break BC if possible.\n",
            "I've reverted the merge.\n",
            "I would prefer to keep the current name (for BC reasons) and add some phpdoc in the code to explain the purpose instead. Can you work on a PR?\n",
            "This is non trivial to fix as we must parse the `Set-Cookie` string chunk by chunk (following the description of a cookie value described here: http://tools.ietf.org/html/rfc6265). This is needed as `,` can be part of a date. Anyone willing to work on this?\n",
            "@bschussek: Can you confirm that this PR is better than the approach in #1951?\n",
            "Why would you want to copy cookies from a Response to another one? Looks like a very edge case to me.\n",
            "Why not changing the Response you already have to a redirect one?\n",
            "Closing this issue as the use case is not that widespread.\n",
            "Closing this PR as #3378 is a better attempt to solve the problem.\n",
            "closing this one as this is a duplicate of #3416\n",
            "@weaverryan Great! I think that's a really good idea to document interfaces in the API, that makes a lot of sense.\n",
            "I've merged and fixed the CS issues.\n",
            "FYI, we already have such a  private  class in https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/DigestAuthenticationListener.php#L135\n",
            "@vicb: I'm fine with the proposed API, but I fail to see why it would be more BC than #3012.\n",
            "The API is perhaps not changed but the behavior will certainly changed. I agree with your steps.\n",
            "@vicb: this change should be done on master\n",
            "@vicb: yes, can you squash your commits?\n",
            "I like the current code as it is. I don't that much duplicate code anyway and these classes do not change that much as they are quite stable and PSR-0 won't change anytime soon.\n",
            "It will be fixed in Twig 1.5.1.\n",
            "@yethee: Can you confirm that it fixes your problem?\n",
            "Requirements for 2.1 now states PHP 5.3.3 and by default, the profiler is not using SQLite anymore. For Symfony 2.0, it works on 5.3.2, but the profiler does not work well when many requests come in at the same time (which is not a problem in the production environment anyway as the profiler should be disabled there).\n",
            "Unfortunately, all PHP 5.3.x versions before 5.3.8 are very buggy. 5.3.2 is even more buggy than any other PHP 5.3 release. That being said, we try to keep compatibility with as many PHP versions as possible (in the user land), meaning that we try to avoid using new features of the newer versions.\n\nAs far as the profiler is concerned, we are not using SQLite by default for the profile storage anymore, but the filsystem, so this specific issue has been  fixed  in Symfony 2.1. But you should definitely be able (and actually you probably must) turn off the profiler in the production environment (try asking some support on the mailing-list).\n",
            "see #2421 for the original PR that changed the behavior.\n\n@stloyd: Can you have a look at this side-effect?\n",
            "@stloyd: I' m about to revert #2421. Have you had time to look into this?\n",
            "@jmikola: Instead of merging symfony/master, can you rebase?\n",
            "Closing this PR as #3378 has a more powerful solution to the problem.\n",
            "Actually, it does not support entities with multiple primary keys, this is a known limitation.\n",
            "I'm not able to reproduce the error on master and I don't see where the session is actually serialized (even in 2.0). Serializing the session is anyway a bad idea; what we need to do is serialize the data within the session but not the session itself. So, I've removed the \\Serialize interface for the session for now and if it breaks something, I will happily fix it in the proper way.\n",
            "Closing this issue as a fix has been committed with no negative feedback on it.\n",
            "As I said during an IRC meeting some months ago, I would prefer to work on integrating the Config component to standardize the way we load  things  in the framework as all other components are using it. I'm aware that this PR is about more than just the loading but the first step is probably standardization with other components.\n",
            "Closing this PR as doing such a big change won't happen before Symfony3. I keep the issue opened for reference.\n",
            "As I said during an IRC meeting some months ago, I would prefer to work on integrating the Config component to standardize the way we load  things  in the framework as all other components are using it. I'm aware that this PR is about more than just the loading but the first step is probably standardization with other components.\n",
            "Closing this PR as doing such a big change won't happen before Symfony3. I keep the issue opened for reference.\n",
            "We are now using Composer for dependencies management, so closing this issue.\n",
            "I've just raised the minimum version of PHP to 5.3.3 (3719c7087042d77a)\n",
            "AFAIU, this is an Assetic/AsseticBundle feature and such a ticket should be reported there. Thanks.\n",
            "Symfony itself does not generate anything. Can you open a ticket for https://github.com/sensio/SensioGeneratorBundle instead? Thanks.\n",
            "Closing this issue as the bundle mentioned by @Seldaek already does a good job.\n",
            "@Seldaek I like your idea. Can you open a new ticket so that we can discuss it further? One question I have: we should probably also provide a way to do that with the Generator instance directly (by storing the  current  route in the route context?).\n",
            "I had the same idea back then but it seemed overkill. What other think?\n",
            "This has been reverted as they are some legitimate uses of passing an object directly like exception management.\n",
            "@canni: Can you add some unit tests for this new feature? Thanks.\n",
            "Can you squash your commits? Thanks.\n",
            "Last but not the least, can you close this PR and open a new one based on the 2.0 branch?\n",
            "Closing this issue as the Doctrine bundle is now managed by the Doctrine organization directly.\n",
            "Tests do not pass for me:\n\n```\n...E\n\nTime: 0 seconds, Memory: 14.75Mb\n\nThere was 1 error:\n\n1) Symfony\\Tests\\Bridge\\Doctrine\\Security\\User\\EntityUserProviderTest::testSupportProxy\nArgument 1 passed to Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider::__construct() must implement interface Doctrine\\Common\\Persistence\\ManagerRegistry, instance of Doctrine\\ORM\\EntityManager given, called in tests/Symfony/Tests/Bridge/Doctrine/Security/User/EntityUserProviderTest.php on line 89 and defined\n\nsrc/Symfony/Bridge/Doctrine/Security/User/EntityUserProvider.php:35\ntests/Symfony/Tests/Bridge/Doctrine/Security/User/EntityUserProviderTest.php:89\n```\n",
            "The method `isUserChanged()` must be rename. What about `hasUserChanged()` as @mvrhov suggested or `isUserDifferent()`?\n",
            "The only missing thing I can think of is adding some unit tests.\n",
            "@canni: Can you just add some information in the CHANGELOG and in the UPGRADE file? That's all I need to merge this PR now. Thanks a lot.\n",
            "The method `isUserChanged()` must be rename. What about `hasUserChanged()` as @mvrhov suggested or `isUserDifferent()`?\n",
            "The only missing thing I can think of is adding some unit tests.\n",
            "@canni: Can you just add some information in the CHANGELOG and in the UPGRADE file? That's all I need to merge this PR now. Thanks a lot.\n",
            "The issue occurs when you have sub-requests because we need to save the profile twice (see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/EventListener/ProfilerListener.php#L116).\n",
            "I don't understand why we need to convert the encoding. And anyway, we cannot assume that the current encoding is UTF-8.\n",
            "I don't understand why we need to convert the encoding. And anyway, we cannot assume that the current encoding is UTF-8.\n",
            "@canni: Can you squash your commits before I merge this PR? Thanks.\n",
            "any progress on this PR?\n",
            "What's the status of this PR? What needs to be done before merging?\n",
            "@hason: Can you make this PR on the master branch as this is a new feature? Thanks.\n",
            "@Burgov: Looks good to me. Can you squash your commits before I merge this PR? Thanks.\n",
            "@Tobion: Can you squash your commit before I merge your PR? Thanks.\n",
            "@Tobion: I'm more than aware of these issues but unfortunately, there is nothing I can do if we want to continue using the Github PRs (and automatic closing).\n",
            "@Tobion: Can you squash your commit before I merge your PR? Thanks.\n",
            "@Tobion: I'm more than aware of these issues but unfortunately, there is nothing I can do if we want to continue using the Github PRs (and automatic closing).\n",
            "To be clear, I've asked to split this PR in two parts:\n- one about the session refactoring (which is non-controversial and should be merged ASAP)\n- this one with only the flash refactoring\n",
            "I must have missed something, but I still see a lot of changes related to the flash messages.\n",
            "should be done on the 2.0 branch.\n",
            "In the shell, there is no way to reload already loaded PHP files, so the `cache:clear` command has no effect on these classes. That's a limitation of the shell and why it worked on the CLI directly.\n",
            "@Seldaek: I will investigate that possibility.\n",
            "After merging this PR, the toolbar is not displayed anymore for me.\n",
            "I agree with @Seldaek here. We should make everything work as smoothly as possible for the end user. Making the Config aware of the format would be ideal but it looks difficult because you can embed a YAML file in an XML one for instance.\n",
            "This is a bug in AsseticBundle as the AsseticResource depends on many objects. I'm moving this issue there: symfony/AsseticBundle#80.\n",
            "No, I don't think so. An exception should only be thrown if there is a problem before actually executing the command; everything else is already taken care of by the exit status. But we can probably add some methods for known exit status codes (if they are the same on all platform of course) like what we have for HTTP status code in the Response class.\n",
            "sounds good to me. Can you create a PR on the 2.0 branch?\n",
            "Can you also update the CHANGELOG?\n",
            "fixed: 4af475bb1d990b8\n",
            "The shell should be used with care as there is no way to reload already-loaded classes.\n",
            "fixed: b7fd5198ec6\n",
            "Any real-world use case for this?\n",
            "I think this is the wrong solution for a real problem.\n\nSaying  Its a good practice to defer code execution without the introduction of a new software layer  is just wrong.\n\nIt is definitely a good practice to defer code execution, but you should use the right tool for the job.\n\nI'm -1.\n",
            "@stof: aa9b86ed758\n",
            "I'm also +1. I've been annoyed by this limitation more than once.\n",
            "@mcz: Can you send me a project where it fails?\n",
            "fixed by fabpot/Twig#610\n",
            "I'm -1 on this PR for two several reasons:\n- First, there is already a link that allows you to get back to the current profiled page;\n- As the profiler can be displayed without being in the context of the page, having an icon that get back to something that was not the previous page seems weird.\n",
            "@jmikola: we cannot display the method as it is not (yet) stored in the profile. This should be possible after #2279 is merged.\n\n@schmittjoh: I hit the back button myself quite often. I will think about how to make it clearer that you can go back by clicking on the link.\n",
            "fixed\n",
            "@stof: I have talked with him about it and I'm just waiting for an updated version of this PR before reviewing it more thoroughly.\n",
            "The more I think about it, the more I think it does not belong to the core. As @lsmith77 mentioned, it can be done via a bundle and some JS.\n",
            "Both the validator and the form configurations must the same value for  multiple . You can set the value to multiple and then ensure that there is only one element in the collection.\n",
            "fixed: 237c36a167\n",
            "Tests do not pas for me (on a Mac):\n\n```\n1) Symfony\\Tests\\Component\\Locale\\Stub\\StubNumberFormatterTest::testParseTypeInt64StubWith64BitIntegerInPhp64Bit\n->parse() TYPE_INT64 does not use true 64 bit integers, using only the 32 bit range.\nFailed asserting that 2147483648 matches expected -2147483648.\n\n.../tests/Symfony/Tests/Component/Locale/Stub/StubNumberFormatterTest.php:819\n```\n",
            "```\nint(-2147483648)\nint(2147483647)\n```\n",
            "This is indeed not possible at the moment.\n",
            "The issue is not related to the names of these blocks.\n",
            "The Twig template compilation is different depending on whether you have debug enabled or not. For instance, when not in debug mode, Twig optimizes access to simple variables. So, that's why the behavior is different and why compilation Twig templates without debug needs more memory.\n",
            "Closing this issue as there is no way we can make everything relative as @stof explained in his previous comments.\n",
            "This is a known bug of some PHP versions. You can workaround it by adding empty phpdoc on the classes themselves.\n",
            "The exception handler class is a substitute for the more advanced exception page for when an exception occurs very early in the process; so I don't want to make it more complex than what it is now, also because it duplicates some logic that we already have elsewhere.\n",
            "changed (in a BC way) here: 2cb6260d072c\n",
            "This should work on Symfony master.\n",
            "You can control the generated output the way you want (see http://twig.sensiolabs.org/doc/templates.html#whitespace-control).\n",
            "Also, keep in mind that Twig generates any type of output, not just HTML. So, adding tidy is not an option as this is only relevant for HTML output.\n",
            "To rebase on the 2.0 branch, you must close this PR and create a new one. This one is still based on master. Thanks.\n",
            "And the trans tag also works the right way as content outside expressions are never escaped by Twig. This is even documented. It's probably confusing but I'm against changing the current behavior at this point as it would be a major BC break.\n\nI discussed that with @weaverryan a long time ago but I don't find the issue right now.\n",
            "Tests do not pass:\n\n1) Symfony\\Tests\\Component\\Serializer\\Encoder\\XmlEncoderTest::testDecode\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n         'key2' => 'val'\n-        'A B' => 'bar'\n       'Barry' => Array (...)\n-        'item' => Array (...)\n   )\n   'qux' => '1'\n  )\n\n.../tests/Symfony/Tests/Component/Serializer/Encoder/XmlEncoderTest.php:173\n",
            "I don't understand the patch anymore. I don't see any use of `*item` in the code.\n",
            "So, you probably need to change the CHANGELOG as well? You should add an example which shows a before/after example.\n",
            "ping @Seldaek, @lsmith77\n",
            "Yes, this is the intended behavior and in your case, you should create a specific Form type.\n",
            "duplicate of #2489\n",
            "It should have been addressed now. Can you confirm?\n",
            "ping @Seldaek, @lsmith77\n",
            "So, what do we do? The `item` key handling is there to allow tweaking the encoding process and as such cannot be removed. Perhaps we can change the name to something else like `_item` to avoid collisions?\n",
            "I think @stof has a point here. Using `*item` is better as no conflict will ever be possible. Also, can you add something to the CHANGELOG as this is a BC break? Thanks.\n",
            "Can you also squash your commit before I merge this PR? Thanks.\n",
            "see http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html\n",
            "Why do you need this? AFAIK, a browser will always default to the first option when none are selected.\n",
            "Your JS code must follow how a browser works. So, if nothing is selected, it means that the first one is.\n",
            "It's not a good thing as it adds something that is never needed by well-behaved clients.\n",
            "I will see if we can make the old and the new listener priorities more similar when possible.\n",
            "I've created an issue for the documentation: symfony/symfony-docs#1551 and added a note in the UPGRADE file: 5da1bc6a4f\n",
            "Closing this ticket as this is related to Doctrine.\n",
            "Calling the `toArray` method is actually the right solution as `customers` is not a real array. There is nothing we can do in Twig to make the experience better as PHP does not have the equivalent of `__toString()` for arrays.\n",
            "@stof: Very good suggestion. Done here: fabpot/Twig@19ba9c21\n",
            "The guesser returns `null` when it is not able to guess the mime type and when no guesser are registered. In Symfony core, the guesser is only used by `FileValidator`. I think throwing an exception when no guesser are available makes sense as you cannot guess anything. \n",
            "fixed, thanks.\n",
            "Do we only redirect when the current request method is safe (`GET` or `HEAD`) or when the matched route supports `GET`? I think the former is best.\n",
            "What for? If you specify `GET`, `HEAD` will be added automatically for you.\n",
            "Using `@Method( GET )` is equivalent to `@Method( GET|HEAD )`\n",
            "`first_name` and `last_name` are not the labels but the field names.\n",
            "done\n",
            "Can you remove the `@api` tags as we will determine what is part of the public API later on?\n",
            "As mentioned by @igorw, we should handle the `X-Sendfile` header (and its variations) as well in this class.\n",
            "@stof: As I said in a comment, we must implement the xsendfile header before being able to merge this PR.\n",
            "Anybody? If not, I will finish it.\n",
            "@stealth35:\n\nThe `x-sendfile-file` header must be documented in the API doc as its usage is not so obvious just by looking at the code. \n\nWhen using `x-sendfile-file`, you also need to bypass the `sendContent` method altogether (no need to open the file).\n",
            "I'm closing this PR as it is far from being merge-able and a lot of work need to be done so that we really cover more cases than just the simple ones. I've opened a ticket to not loose this PR as a future reference (#3602).\n",
            "fixed here: 45b218e7c4cb6\n",
            "The current code looks correct to me. Can you try with the latest version of Twig to be sure that you don't have this issue because of a bug in Twig that has been fixed since then?\n",
            "`trace.file is defined and trace.file and trace.line is defined and trace.line` looks good to me.\n",
            "Does the recent PRs merges solve this issue?\n",
            "Let's not break BC just for the sake of it. I think we can live with the current name.\n",
            "That's already possible as access control is controller by a RequestMatcher instance which can restrict by HTTP methods... or am I missing something?\n\nSee https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/DependencyInjection/MainConfiguration.php#L148\n\nand\n\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/DependencyInjection/SecurityExtension.php#L175\n",
            "@weaverryan: I've just checked and documentation should be updated to cover all possible options.\n",
            "@stealth35: I suppose that you are going to submit a PR that simplifies the code on Symfony Standard too, right?\n",
            "I have removed the evaluation of Yaml files by default because it can be indeed a security problem: 6d324a6ba.\n",
            "fixed by b46114a0f6\n",
            "@dbu: Can you squash your commits and remove a commit that is not related to this PR? Thanks a lot.\n",
            "That's because you forgot to add `use Symfony\\Component\\Validator\\ExecutionContext;` in your code.\n",
            "@lsmith77: I've merged this PR and made some quick changes (mostly to add some more examples and references). I don't have time right now to make them better but obviously, there is still a lot of work to be done on them.\n",
            "Can you added some unit tests?\n",
            "As a general rule, we try to avoid to magically  fix /change things for the user. The rules are simple enough to understand and mimics the ones used elsewhere in the framework (first config wins).\n",
            "As suggested by @drak, can you try after modifying the `bin/vendors` script like this:\n\nBefore: `$rootDir = dirname(__DIR__);`\n\nAfter: `$rootDir = dirname(realpath(__DIR__));`\n",
            "@drak: `dirname(__DIR__)` means the parent directory of `__DIR__`.\n",
            "I think we need to add the approved status code (and add a note about which RFC they have been defined in).\n\n@kmohrf: Can you work on a patch?\n",
            "something like:\n\n```\narray(\n    // RFC 2616 codes\n    200 => ...\n    404 => ...\n\n    // RFC XXX codes\n    ...\n```\n",
            "yes\n",
            "I think it's not worth it at this point. We can break BC in the security component because it's not marked as stable yet but we only break it when it is actually needed.\n",
            "fixed here: 47b888a957\n",
            "+1 for flattening options in this case. \n",
            "Support is given through the mailing-list. Can you send an email there? Thanks.\n",
            "Support is given though the mailing-list. Can you post your question on the symfony2 mailing-list? Thanks.\n",
            "The `required` attribute on the form has no effect on validation. It's just an attribute for the display. If you want an element to not be required, that is something that need to be done with validators.\n",
            "What's the status of this PR?\n",
            "@lsmith77: Is it ready to be merged? Should I wait for more unit tests?\n",
            "@lsmith77: sounds good. Thanks.\n",
            "@lsmith77: commit cb495fd7a36fe7f895bec1686e8742ae5b5cb550 cannot be cherry picked in 2.0 as is as the tests do not pass:   Fatal error: Call to undefined method Symfony\\Component\\Serializer\\Serializer::supportsDenormalization() in tests/Symfony/Tests/Component/Serializer/SerializerTest.php on line 150 \n",
            "Closing this ticket as this is an already known issue.\n",
            "No, you cannot redirect from an embedded controller as we only get the response content. With the current architecture, I don't think it is even possible and anyway, I'm not sure we want to support this feature.\n",
            "Each profile can be saved more than once and this is to be expected. Which profiler storage do you use? \n",
            "It should be fixed now: 47fca8e0a0ab7\n",
            "see #2672 for a more general ticket.\n",
            "Closing this ticket as this is related to Doctrine.\n",
            "Can you ask for support on the Symfony mailing-list? Thanks.\n",
            "I think it cannot belong to the core as relying on the uploading file extension is not very reliable and can be fake really easily by the user. So, it's not really validation, but just a convention that you can use in your code to determine the mimetype. But again, I would not rely on it for anything serious.\n",
            "Can you add some unit tests and rebase your PR on the 2.0 branch (as this is a bug fix)? Thanks.\n",
            "I've tried to reproduce the error but with no luck. I think you have a problem in your form configuration where you have actually mixed up upper and lower cased names. Can you confirm?\n",
            "@drm Thanks for getting back on this issue. Can you open a new issue so that your new message does not get lost (you can reference this issue)? Thanks.\n",
            "@beberlei: Can you comment on this PR?\n",
            "@RapotOR: Can you squash your commits before I merge this PR? Thanks.\n",
            "I've added the missing `getStore()` accessor on `HttpCache` and updated the docs accordingly.\n",
            "As the message says, it means that you don't have any Doctrine entities. To be able to debug, you must tell us more about your app. Can you use the mailing-list for support? Thanks.\n",
            "Can you add some tests for the `DelegatingValidator` class, which is where we can ensure that the new feature actually works as expected?\n",
            "Can you add some tests for the `DelegatingValidator` class, which is where we can ensure that the new feature actually works as expected?\n",
            "f8065d1805747\n",
            "I've just change the required version for Monolog to 1.0.2\n",
            "fixed.\n",
            "Closing this issue as PR #3939 is where the discussion happens now.\n",
            "This is already done by the InputArgument class. There was a bug for arguments, but it has been fixed now. See 6f05544. The difference with your patch is that conflicts are raised when the command is actually used, which IMO is fine as it should be detected when you are actually working on a command.\n",
            "Looks good to me. Is it possible to do that on the 2.0 branch instead of master?\n",
            "A new PR on 2.0 is the only way on Github.\n",
            "@thesalla: Can you rename the ClassMapDumper class to ClassMapGenerator and then squash your commit before the merge? Thanks.\n",
            "@thesalla: Can you rename the ClassMapDumper class to ClassMapGenerator and then squash your commit before the merge? Thanks.\n",
            "+1\n",
            "Questions should be asked on the Symfony mailing-lists. Thanks.\n",
            "fixed now: https://github.com/symfony/symfony/compare/46e5fa5c87ae1b996632d801fbae4ad56deebc99...c98c2ef5fbf3d5dba6611a295516aaaa7dba5ea8\n",
            "I've also cherry picked your commit.\n",
            "I've just tested with Firefox 7.0.1 with difference web pages, and it seems to work fine for me. Do you have any special bundle or listeners?\n",
            "If this is the whole canvas, no.\n",
            "Yes, this is a timeline, so the bars/lines are placed according to when the event occurs. I will change the default canvas size (it was optimized for my screen).\n",
            "@stof: Before merging, you must also add information about how to upgrade in the CHANGELOG-2.1.md file.\n",
            "I've just refactored the code a bit to make the `checkAuthentication` method use the `hide_user_not_found` setting (which is `true` by default): a7296e7c84\n",
            "fixed, thanks.\n",
            "Validation is not done by the form field, but by validators. Check you validation configuration for this field.\n",
            "What can we do about it? Anyway, when you will use a big integer, the PHP limit will apply.\n",
            "@MetrixMedia: wow, what a good idea! That's what I've done here: 8dcde3c076b5c\n",
            "Closing this ticket as this is not Symfony related. The discussion should probably happen on the Doctrine mailing-list.\n",
            "This is probably a Doctrine bug as we do not read the Doctrine configuration files in Symfony. Can you open a ticket on the Doctrine ticketing system? Adding an example will probably help too. Thanks.\n",
            "see #2604\n",
            "Closing this issue as there is apparently no viable option (yet) for nginx.\n",
            "@vatson: Yes, as soon as your PR is ready to be merged, you should squash all your commits into one.\n",
            "It looks like a bug fix for me, so yes, it should be done on the 2.0 branch (which means that a new PR will need to be opened and this one closed).\n",
            "fixed now: https://github.com/symfony/symfony/compare/46e5fa5c87ae1b996632d801fbae4ad56deebc99...c98c2ef5fbf3d5dba6611a295516aaaa7dba5ea8\n",
            "@docteurklein: that's wrong. Both syntaxes should be supported.\n",
            "This is all about Doctrine. So, you should open a ticket there. Thanks.\n",
            "Is it really needed? I have a feeling that it enforces unneeded constraints, but I can be wrong of course.\n",
            "Is it really needed? I have a feeling that it enforces unneeded constraints, but I can be wrong of course.\n",
            "Yes, I've already had the issue before and this was related to the PHP but you've mentioned. The only way to fix the problem is to add an empty comment for the classes themselves. Can you open a ticket on DoctrineExtensionsBundle? Thanks.\n",
            "@stealth35: The PO is what people will use for their translations. They will then dump it to MO. So, we need both PO and MO loaders and dumpers.\n",
            "I've just had a look at this PR code again and I see that the unit tests are pretty slim. Is it possible to add some tests for the mo loader?\n",
            "The tests do not pass for me:\n\n```\nThere was 1 error:\n\n1) Symfony\\Tests\\Component\\Translation\\Loader\\MoFileLoaderTest::testLoadDoesNothingIfEmpty\nInvalidArgumentException: MO stream content has an invalid format.\n\n/Users/fabien/work/symfony/git/symfony/src/Symfony/Component/Translation/Loader/MoFileLoader.php:79\n/Users/fabien/work/symfony/git/symfony/src/Symfony/Component/Translation/Loader/MoFileLoader.php:46\n/Users/fabien/work/symfony/git/symfony/tests/Symfony/Tests/Component/Translation/Loader/MoFileLoaderTest.php:34\n\n--\n\n\nThere was 1 failure:\n\n1) Symfony\\Tests\\Component\\Translation\\Loader\\PoFileLoaderTest::testLoad\nFailed asserting that two arrays are equal.\n--- Expected\n+++ Actual\n@@ @@\n Array (\n-    'foo' => 'bar'\n )\n\n/Users/fabien/work/symfony/git/symfony/tests/Symfony/Tests/Component/Translation/Loader/PoFileLoaderTest.php:25\n```\n",
            "We have a class map generator now in master, so closing this issue.\n",
            "It's really up to the developer to make sure that the placeholder value is a string.\n",
            "A requirement is a regular expression, so it's always a string. For default values, you can put whatever you want, but it makes sense to use strings as incoming variable from patterns will always be strings anyway.\n",
            "The Symfony2 test suite does not need to pass for older versions of the dependencies (APC here). So, let's close this issue.\n",
            "I've just tested with both 2.0 and master and it works for me. Can someone create a small patch for the Symfony standard edition that demonstrates the problem?\n",
            "fixed now: https://github.com/symfony/symfony/compare/46e5fa5c87ae1b996632d801fbae4ad56deebc99...c98c2ef5fbf3d5dba6611a295516aaaa7dba5ea8\n",
            "We won't switch everything to protected. Can you explain your needs?\n",
            "Your concerns should be addressed by this commit: 95ec41b07\n",
            "That's because in this case you need to use `setDefinition()`, not `register()`.\n",
            "Symfony core (HttpKernel here) should only take care of the bare minimum that is needed to make the framework work. The tmp directory is not something that you need. And as some others have already said, it's just as easy to create a parameter yourself in your configuration.\n",
            "Closing this ticket as it looks like a user issue that should be discussed on the mailing-list.\n",
            "@lmcd: any news on this PR?\n",
            "@dlsniper Some limitations are also listed on the original PR #1456\n",
            "Closing in favor of #6391\n",
            "They pass for me:\n\nPHP 5.3.8 (cli) (built: Aug 29 2011 18:50:15)\nICU version => 4.4.1\n",
            "Are you using master or 2.0? In both cases, can you try with the latest version fro Git? It should have been fixed now.\n",
            "I've just tested and it works for me. I've added some unit tests to prove it: d01b29e9f\n",
            "Support cannot be adding to the core as it depends on the ORM you are using. The referenced bundle looks like a good implementation for Doctrine.\n",
            "I don't see any argument against this change, but that's probably something you can abuse easily. So, it should be used with caution.\n",
            "@weaverryan: I think this should be done in the 2.0 branch.\n",
            "@weaverryan: I think this should be done in the 2.0 branch.\n",
            "The `templating` service relies on a lot of other services, so it is rather easy to have this circular dependency problem. You The exception should tell you for which service there is a problem. The solution depends on the service for which there is a circular reference problem, but one simple solution is to inject the container and get the service when you have a need for it.\n",
            "We need to create each command to gather information about it. So, yes, if one command is broken, the console itself is broken. I don't see any problem here, just fix the broken command.\n",
            "@beberlei: Looks like several people have the same problem.\n",
            "@beberlei: great! Thanks.\n",
            "fixed now: 167a96fcf31\n",
            "implemented: 2e1344eb7. You can now just define a requirement on _scheme when importing a resource.\n",
            "@jmikola: Are you talking about the `checkRequestPath()` method? Because AFAICS, all other methods already support absolute URLs.\n",
            "IMO, the docblock should be fixed.\n",
            "As is, your fix won't break BC but it only works half-way. To make it work fully, you would have to remove the `'application/xhtml+xml'` string from the `html` entry but then it's not BC anymore. So, my suggestion would be to use what @lsmith77 suggest.\n",
            "I've just tested and it works for me. Are you sure that you don't have another route with the same `index` name?\n",
            "It looks like a configuration issue. Can you ask questions like these on the mailing-list? Thanks.\n",
            "IMO, this is a new feature that must be done in master.\n",
            "@Seldaek: Can you rebase this PR  on master? thanks.\n",
            "It is a logic exception because calling the `setException()` method in this case is not allowed.\n",
            "You should ask your questions on the user mailing-list.\n\nProblem here is that the callback is not valid. It should be something like: @Assert\\Choice(callback =  Vendor\\ClassName::getTypeChoice )\n",
            "Which version do you use? It should have been fixed in the latest 2.0 and master branch.\n",
            "Can you ask your questions on the user mailing-list?\n\nI've just tested your code and it works for me.\n",
            "fixed here: 5c8a2fb\n",
            "I've just tested and it works for me. Can you send me a small/simple project that does not work for you?\n",
            "In Symfony2, the routing component is just about converting a path info into parameters, nothing more. We already have param converters to automatically convert request attributes to objects. So, we probably can think about how to do the same for generation (no idea how to do that though).\n",
            "We should provide a command that update the schema and the data to ease upgrading for 2.0 to 2.1.\n",
            "Tests do not pass for me after applying this PR. Also, can you remove commit 2e870fa for now as there are many problems with it that can be solved after we have merged the other 2 commits. Thanks.\n",
            "@stloyd: Will you have time to update this PR soon?\n",
            "I think you can just get rid of the migration part. After some thought about it, I think it is just not worth it.\n",
            "The patch is probably not what we want to do. First, I suppose that you are not creating the propertyPath by hand. If that is the case, we need to understand why the property path does not exist. Then, even if we might want to check the existence of the index, if it does not exist, we should probably throw an exception instead of just ignoring the problem.\n",
            "My point is that it should never happen under normal circumstances.\n",
            "Can you rebase your PR on the 2.0 branch and squash your commits? thanks.\n",
            "fixed here: c13b4e2b\n",
            "done\n",
            "This has already been discussed numerous times and it has always been rejected. If you need to do something with the Response, you just cannot use the `@Template` annotation.\n",
            "If it is just about configuring the cache, FrameworkExtraBundle allows to do that as well: http://symfony.com/doc/current/bundles/SensioFrameworkExtraBundle/annotations/cache.html\n",
            "I will rewrite the current TwigExtractor soon.\n",
            "fixed now\n",
            "see #2333\n",
            "@marekkalnik: fixed in e0ace8eaee\n",
            "fixed\n",
            "I quite agree with @lsmith77. I don't think it belongs to the core.\n",
            "The Request and Response classes are data objects. As such, the logic inside should be kept to the minimum needed to expose their data.\n",
            "@pulzarraider: Can you make a pull request (on the 2.0 branch) just with the bug fixes and remove the code for similar languages? Thanks.\n",
            "I'm closing this PR as the so-called bug fixes are not bug fixes. If the languages in the header does not contain 'fr', then we should not make it the best language, even if 'fr_FR' is in the list (also because this is already done in the `Accept-Language` header sent by browsers).\n",
            "There is probably a reason why it was set to the request scope (just run the unit tests ;)).\n",
            "Apparently, something depends on the Request somewhere. We need to find what needs the Request and determine if this is legitimate or not.\n",
            "If you want to set a boolean in `parameters.ini`, just use `1` or `0`\n",
            "This has been reverted as the `INI_SCANNER_RAW` mode is buggy. It is unable to parse correctly something like `foo= foo;bar `, which is quite frequent if you are defining a DSN in your `parameters.ini` file.\n",
            "I think it's not worth it as the `parameters.ini` file in Symfony SE will soon be replaced by a `parameters.yml`.\n",
            "This is fixed now. AsseticBundle is now configured to 1.0.1 in Symfony SE.\n",
            "Fixing this bug is tricky (and impossible if we want to maintain BC). Here is a first attempt: https://github.com/symfony/symfony/compare/master...cookiejar\n\nNote that this is just a quick POC and tests have not been updated.\n",
            "I worked on the same topic some weeks ago and the problem is much more complex that this current PR. I will try to work on it soon and submit another proposal.\n",
            "Closing this PR as it won't be merged.\n",
            "During today's IRC meeting, it has been decided to not add this feature as we don't have that many use cases and it adds some non-trivial complexity. I've added a doc ticket to update documentation about how to solve the issue described here (symfony/symfony-docs#752).\n",
            "merged #2201\n",
            "I think this is a  bug , no? If this is the case, then we need to fix the 2.0 branch.\n",
            "ok, I'm going to merge this into master.\n\n@jmikola: Can you submit documentation for the new way?\n",
            "Clear your cache and the error will go away.\n",
            "nevermind, there is indeed a problem :(\n",
            "fixed here: 9703aac26\n",
            "That means that the fallback locale is the same at the main locale. Can you check?\n",
            "This should be fixed now.\n",
            "@chrisben Have you tried with the 2.0 branch. It should be fixed there.\n",
            "What about renaming the directory from `Propel` to `Propel1`? That way, we will be able to have a `Propel` bridge for Propel 2.0.\n",
            "yes, +1 for renaming\n",
            "also -1 for me.\n",
            "Any benefits over using the PDO session storage?\n",
            "ok, looks good to me. Can you add some documentation about its usage (like the possible keys for options)? Is it possible to add some tests too?\n",
            "`multiple` must be true for both the form type and the validator.\n",
            "implemented in ce6399e254d5\n",
            "@drak: Am I correct if I say that this use case should be documented properly in a cookbook entry? If so, can you create a ticket on the symfony doc repository so that we can close this issue?\n",
            "fixed in #2167\n",
            "I don't understand how the `locale` attribute cannot be set as it is always written in the storage. Can you tell us more about your use case and when you encounter the problem? thanks.\n",
            "Closing this PR as the use case is not likely to happen.\n",
            "I don't understand how the `locale` attribute cannot be set as it is always written in the storage. Can you tell us more about your use case and when you encounter the problem? thanks.\n",
            "Closing this PR as the use case is not likely to happen.\n",
            "How do we move forward? We have basically 3 options:\n- Remove the component and only rely on the bundle (meaning that we loose the ability to use the component standalone)\n- Move part of the bundle into the component\n- Do nothing and keep both (and try to make them  compatible )\n\nWhat do you think @schmittjoh @Seldaek @lsmith77?\n",
            "Looks good to me. Can you add some unit tests for this new behavior? Thanks.\n",
            "@jc-: I have added some tests and merged this PR.\n",
            "Which problem does it solve?\n\nWhat's the difference between:\n\n```\nblog_show:\n    resources: [validpattern.yml, validpattern.2.yml]\n```\n\nand:\n\n```\nblog_show_1:\n    resources: validpattern.yml\n\nblog_show_2:\n    resources: validpattern.2.yml\n```\n",
            "You can define a relation by adding a special option:\n\n```\nblog_show_1:\n    resources: validpattern.yml\n    options: { version: 1.0 }\n\nblog_show_2:\n    resources: validpattern.2.yml\n    options: { version: 2.0 }\n```\n\nRouting is about parsing the URL and converting it into parameters. Your request is about something different, which does not belong to the Routing.\n",
            "Now that a resource can have some `requirements` and some `defaults` attached to it, I'm sure how this patch can be still relevant. Do we assume that all resources have the same requirements and defaults?\n",
            "@lsmith77: any update on this PR? Is it still needed for you?\n",
            "@lsmith77: any news in this PR?\n",
            "Closing this PR as I don't think that we can assume that all resources can share the same requirements and defaults.\n",
            "This is a known bug. Route names must be unique. Here, the uniqueness is not enforced because they are in different collection. It should be fixed and an exception should be thrown in this situation.\n",
            "After looking at the code, overriding an existing route is supported (implicitly by the `add()` method, but explicitly in the `get()` one). As the behavior cannot be changed at this point, I will work on a patch to solve the reported problem.\n",
            "Quick questions:\n\n1/ What is the pattern for `foo`?\n\n```\n    $collection = new RouteCollection();\n    $collection->add('foo', new Route('/foo'));\n\n    $collection1 = new RouteCollection();\n    $collection1->add('foo', new Route('/foo1'));\n    $collection->addCollection($collection1);\n```\n\nI woud say `/foo1`.\n\n2/ What is the pattern for `foo`?\n\n```\n    $collection = new RouteCollection();\n    $collection->add('foo', new Route('/foo'));\n\n    $collection1 = new RouteCollection();\n    $collection->addCollection($collection1);\n    $collection1->add('foo', new Route('/foo1'));\n```\n\nI woud say `/foo1` too, but that's less clear to me: when `collection1` is added to `collection`, the `foo` pattern is `/foo`. Now, when I change an embedded collection, does it need to change the  parent  collection too? I would say yes, but what do you think?\n",
            "About my previous comment. The second example is not something that can do with YAML or XML, so it should never happen in real-life scenario. But if we want to support if (PHP is one of the configuration format), it complexifies the `RouteCollection` class a bit as we must save the parent of a collection to be able to remove the configured routes with a given name from all the parents.\n",
            "I'm not sure this is something useful to have in the core. First, it does not work on Windows. And the, on Linux, you already have all the tools at your disposal to do the same.\n\nDo you have a specific use case in mind?\n",
            "So, this PR is only half of the story. Do you have code to support what you describe (dependencies between commands)?\n",
            "I think this addition might be really useful if we provide a `MetaCommand` class on which you register the commands and their dependencies (command A must be run after command B) and then it takes care of the execution of all commands. What do you think?\n",
            "ok, after trying to use it (see @marcw comment above), it can potentially introduce many unsolvable problems as the forked process inherit from the parent. That's not a feature we will add to the core if this is the case, so this need to be extensively tested.\n",
            "I'm closing this PR as I have again encountered a problem with it yesterday.\n",
            "Is it possible to add a dumper like we have for all other loaders?\n",
            "@stealth35: Can you remove the `@api` tags? We will review what is included into the public API later on. thanks.\n",
            "@stealth35: sounds good to me.\n",
            "I've just tested and it works (when setting the sex on the entity, which is what you want to do anyway). The issue you have is probably because of the validator you have for Sex, which should be something like `@Assert\\Choice(choices = { m ,  f }, multiple = false)`.\n",
            "@snc: is it ready for a merge?\n",
            "The `lifetime` is used to cleanup the database (see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/PdoProfilerStorage.php#L136). So, it should probably be implemented for MongoDB as well (but it can probably be done in another PR).\n",
            "Do you any use case for that?\n",
            "Closing the ticket as it seems there is no Symfony bug (as per the comments on the gist).\n",
            "@Gregwar is right, this patch cannot be merged.\n",
            "Twig PR: https://github.com/fabpot/Twig/pull/705\n",
            "I'm aware of that but this is needed to allow the flexibility we need.\n",
            "I'm -1 on adding this method. You can already access it via the headers and as this information should not be relied upon, I don't think we need to make it easier to access it.\n",
            "Do you really enter a number according to your locale specific format?\n\nI know that in France, few people enter a number in the French format which is 1.234,56. They either enter 1234,56 or 1234.56... and they probably expect both to work.\n",
            "@stof: I had a discussion about that with @bschussek some months ago, and I think relying on the intl format is not a good idea (between, the same goes for dates too).\n",
            "Can we close it?\n",
            "Do you really enter a number according to your locale specific format?\n\nI know that in France, few people enter a number in the French format which is 1.234,56. They either enter 1234,56 or 1234.56... and they probably expect both to work.\n",
            "@stof: I had a discussion about that with @bschussek some months ago, and I think relying on the intl format is not a good idea (between, the same goes for dates too).\n",
            "Can we close it?\n",
            "@stloyd: That hack introduces a security hole. So, if it's a php/libxml but, there is nothing we can do.\n",
            "The `id` is dynamic and so, we cannot make it available in the configuration. Setting an `id` is mainly needed when testing, but should never be useful otherwise.\n",
            "I've made a much simpler change in e5a23dbd. This has been committed in the 2.0 branch.\n",
            "What if you call isEmpty, then change the form, and finally call isEmpty again?\n",
            "So, after your last change, it does not simplify anything, quite the contrary.\n",
            "Can you close this PR and open a new one based on the 2.0 branch as this is a bug fix? thanks.\n",
            "Closing this issue as it belongs to the AsseticBunlde.\n",
            "The bug should be fixed but the behavior should be kept as it is today. Here is my proposal as a fix: https://github.com/symfony/symfony/compare/2.0...charset-fix\n",
            "So, the only viable option is to break BC and add a `getCharset` method on the app kernel. This is what I've done in #4716.\n",
            "We had the same issue when storing profiles into the profiler. We have fixed it by base64 encoding after serialization (`base64_encode(serialize($profile))` and `unserialize(base64_decode($data))`). We should probably do the same for the PDO session storage.\n",
            "If several processes try to warmup the cache at the same time, this fix won't help you that much. The proper way in this case is to use the `cache:clear` command that takes care of that for you.\n",
            "@mmucklo: The `cache:clear` is what you are looking for, even for a hot fix. When you clear the cache, Symfony creates the new cache in a temporary directory before switching the old and the new cache. That should fix your issue.\n",
            "Can you add some tests and base your PR on the symfony/2.0 branch as this is a bug fix? Thanks.\n",
            "As nothing is decided yet (and as far as I understand, that won't land into 5.4), I'm closing this issue.\n",
            "Can you squash your commit before I merge? Thanks.\n",
            "@schmittjoh: What do you think about this PR? Should be it merged or closed?\n",
            "Here is the link to the discussion on the mailing-list for future reference: http://groups.google.com/group/symfony-devs/browse_thread/thread/f2acdaa14e6e6dd7?hl=en\n",
            "@jalliot: can you open new PRs for the other issues? thanks.\n",
            "@schmittjoh: What do you think about this PR? Should be it merged or closed?\n",
            "Here is the link to the discussion on the mailing-list for future reference: http://groups.google.com/group/symfony-devs/browse_thread/thread/f2acdaa14e6e6dd7?hl=en\n",
            "@jalliot: can you open new PRs for the other issues? thanks.\n",
            "The bubbling problem has been fixed now.\n",
            "Closing this issue as this is a duplicate of #1917\n",
            "To be consistent with other dumpers in the framework, the dumpers extending `FileDumper` should use `FileDumper` as a suffix like in `YmlFileDumper`.\n",
            "A general note on PHPDoc: The first line of a phpdoc ends with a dot and starts with a present verb like in  `Extracts translation messages from template files.`\n",
            " ok, code looks really good now. I think the only missing thing is some more unit tests (for the extractors for instance).\n",
            "To be consistent with other dumpers in the framework, the dumpers extending `FileDumper` should use `FileDumper` as a suffix like in `YmlFileDumper`.\n",
            "A general note on PHPDoc: The first line of a phpdoc ends with a dot and starts with a present verb like in  `Extracts translation messages from template files.`\n",
            " ok, code looks really good now. I think the only missing thing is some more unit tests (for the extractors for instance).\n",
            "Can you add the license header? and the main phpdoc block for each class?\n",
            "Last, but not the least, can you add some unit tests and squash all your commits? Thanks a lot.\n",
            "No need to make a new PR, you can just force the push with `-f`.\n",
            "Also, in the tests, it would great if you can add some that do a load/dump/load, just to be sure that everything work fine.\n",
            "The goal is to ensure that the load/dump calls are idempotent.\n",
            "@harikt: yes, this Doctrine related. Can you create a ticket there? Thanks.\n",
            "@satazor: it depends on the user provider you are using. If you do not refresh the user on each request, then you will have the behavior you describe.\n",
            "@hlecorche I'm not able to reproduce your behavior.\n",
            "If you configure your php.ini properly, PHP does this for you, no?\n",
            "-1\n\nA fatal error means that PHP is not in a stable state anymore. So, there is no way we can reliably do something about it. Anyone has worked on an implementation as I would be curious to see how this can work.\n",
            "Anyone willing to work on this for Symfony 2.2?\n",
            "Logging should be easy enough now as the ErrorHandler has access to the logger\n",
            "I've updated Symfony to only use the LIBXML_COMPACT flag when it is available.\n",
            "The keys have to be strings as they are rendered in HTML.\n",
            "I'm closing this PR in favor of #2056. If ACL are broken anyway with Doctrine, I have no problem merging it in the 2.0 branch. It's really up to @schmittjoh.\n",
            "I'm closing this PR in favor of #2056. If ACL are broken anyway with Doctrine, I have no problem merging it in the 2.0 branch. It's really up to @schmittjoh.\n",
            "@stealth35: Can you remove the `@api` tags? We will review what is included into the public API later on. thanks.\n",
            "@stealth35: Can you remove the `@api` tags? We will review what is included into the public API later on. thanks.\n",
            "Can you split the PR into two PRs as AFAICS the two commits are not related. Also, I don't understand why this change is related to #1962. Your first commit is about the `ChoiceType`, whereas the ticket is about the `TextType`.\n",
            "It's not easy to fix as the security component is in no way aware of these details (it just saves the user object as stored in the current token). The problem is that the form framework is changing the user object even if it is not valid. I don't see any easy fix in the framework itself.\n",
            "One thing we can do is to change the `EntityUserProvider::refreshUser()` method to get the user from the primary key instead of the username. What do you think?\n",
            "It has been fixed here: 9d2ab9ca9c1762\n\nNote that the web debug toolbar will still reference the wrong username for the redirect response, but everything works as expected behind the scene and the good user will be reloaded for the very next request.\n\nCan you all confirm that this actually fixes the issue? If so, I will release a new 2.0 version in the coming days.\n",
            "I don't like subscribers. There are other PRs on adding more support for them, but the reality is that they are complex for no added benefit. I'm wondering if it wouldn't be better to just remove them altogether.\n",
            "@jalliot: #2148 has been merged. Can you update this PR accordingly? thanks.\n",
            "Tests do not pass.\n",
            "I don't like subscribers. There are other PRs on adding more support for them, but the reality is that they are complex for no added benefit. I'm wondering if it wouldn't be better to just remove them altogether.\n",
            "@jalliot: #2148 has been merged. Can you update this PR accordingly? thanks.\n",
            "Tests do not pass.\n",
            "This cannot be merged without proper unit tests.\n",
            "There is actually a test for that:\n\nhttps://github.com/symfony/symfony/blob/master/tests/Symfony/Tests/Component/Validator/Constraints/AssertTypeValidatorTest.php#L34\n",
            "403 is the status code and can be retrieved with the `getStatusCode()` for an `HttpExceptionInterface`. When creating an exception listener, the status code should be determined from this status code, not from the exception code:\n\n```\n    // excerpt from the default Symfony2 exception listener (Symfony\\Component\\HttpKernel\\EventListener\\ExceptionListener)\n\n    if ($exception instanceof HttpExceptionInterface) {\n        $flattenException->setStatusCode($exception->getStatusCode());\n        $flattenException->setHeaders($exception->getHeaders());\n    }\n```\n",
            "I think everything is covered here: http://symfony.com/doc/current/book/translation.html#pluralization\n",
            "As a side note, there is one known bug: https://github.com/symfony/symfony/issues/1952\n",
            "Why do you need to create your own Request class?\n",
            "I haven't heard back so I'm closing this ticket.\n",
            "I've fixed the output buffering behavior: c31c512466\n",
            "The `ignore_errors` is set to `true` in non-debug mode so that you don't have an exception page rendered in the middle of another page; in which case, the output will be badly broken.\n\n@krmcbride Does my previous fix cover your concerns?\n",
            "Sorry to come back so late. Here is my thoughts on this issue:\n\nEverybody agrees that it never makes sense to ignore errors in the development environment.\n\nBut in the production environment, if we set `ignore_errors` to `off` by default, when there is a problem with the sub-request, the whole page outputs an error when `standalone` is `false` (which is fine) but if it is `true` (ESI support is enabled), then the error is displayed inside the main page (which is never what you want as the error page is not optimized for such a situation).\n\nSo, here is what I propose for the _new_ default value of `ignore_errors`:\n\n```\n* `false` when debug is `on` or when debug is `off` and standalone is `off`\n* `true`  when debug is `on` and standalone is `on`\n```\n\nWhat do you think?\n",
            "This is a known issue for PHP < 5.3.9. Fixed here: http://svn.php.net/viewvc?view=revision&revision=318366\n",
            "Does the recent refactoring of the session sub-framework fixes this issue?\n",
            "closing this issue as there is no feedback.\n",
            "If you're storing your entities in a bundle, you can already use the shortcut notation:\n\n```\n<?php\nnamespace Acme\\Blog;\n\n/** @ORM\\Entity(repositoryClass= AcmeBundle:PostRepository ) */\nclass Post  {\n```\n",
            "Those lines cannot be removed as they enforce the inheritance process (tests are broken if you try to do so).\n",
            "@ricardclau: symfony1 has what you are looking for (`preExecute()` and `postExecute()`). But Symfony2 is a bit different. As you have noted, you can do that by listening to some events (like `kernel.controller` and `kernel.response` for instance). If you want to restrict to some controllers/actions, you have access to the Request, to that's totally possible. You can also use the `RequestMatcher` class to help you define the restrictions. Another possibility is to create a base class for the controllers that need this special logic.\n",
            "@bschussek Can you give us your opinion here? Why it is as it is today?\n",
            "@bschussek: Yes, that would break BC but I think this is needed.\n",
            "The behavior is indeed correct. Let me explain why.\n\nFirst, a `/` is always prepended to a route if it is not already the case. So, an empty route is equivalent to `/` and when you define a `{dummy}` route pattern, this is equivalent to `/{dummy}`.\n\nWhen you use `/test` as a prefix, you are mounting all routes under a `/test`  directory , so all defined routes are  inside  this  directory .\n\nFor the first case, and empty string or `/` means the root of the directory, and if you omit the `/`, Symfony will automatically redirects you to this page (the same behavior as Apache), but when you use `/{dummy}`, you are not referencing the root anymore (even if there is a default value), so the redirection does not occur.\n",
            "The email validator is just for the `addr-spec` part of the specification (3.4.1), not about validating the `address`. As specified in section 3.4, the `address` is in fact richer than just what is implemented here.\n",
            "It looks like a bug fix, so this PR should be closed and a new one based on the 2.0 branch should be open. @beberlei: are you fine with this patch?\n",
            "Even if the current patch is not the best solution, we should probably apply it to fix the problem and think about a better solution afterwards. Does it sound good for everybody?\n",
            "This is possible with Twig when used as a standalone library (http://www.twig-project.org/doc/recipes.html#overriding-a-template-that-also-extends-itself). But as we enforce some naming conventions in Symfony2, I don't know how to achieve the same easily.\n",
            "We can have a look but I think it won't be easy.\n",
            "During today's IRC meeting, it has been decided to not add this feature as we don't have that many use cases and it adds some non-trivial complexity. I've added a doc ticket to update documentation about how to solve the issue described here (symfony/symfony-docs#752).\n",
            "fixed in #1968\n",
            "Can you open the ticket on the relevant repository? https://github.com/symfony/DoctrineMongoDBBundle\nthanks.\n",
            "Can you add unit tests? Thank.\n",
            "merged\n",
            "The code is correct. We don't want to use the client mime type as it is not reliable. If it does not work for you, it means that the correct type is not correctly detected by `MimeTypeGuesser`.\n",
            "This is tricky to solve. Here is a working (but not so clean) patch to fix the issue:\n\nhttps://github.com/symfony/symfony/compare/2.0...translation-transchoice-patch\n\nThis is not clean for several reasons:\n- `has()` now returns false even if the fallback has a translation\n- I have removed the optimization (but frankly, I think we don't have a choice here anyway)\n",
            "I've just updated the patch to introduce a new `hasStrict()` method that returns true if the translation is defined in the current catalogue (without checking the fallback catalogue). Any idea on a better name?\n",
            "`defines()` is probably better.\n",
            "merged\n",
            "This is indeed really useful. I've used it to manage coupon codes on Symfony Live. So, this is an example where there is no JS and the input is not hidden. The user enters its coupon code and it is automatically converted to the right Coupon object in the main Order object.\n",
            "Overriding an existing option already throws an exception. I've added the same behavior for arguments as it was broken. See 6f0554442 where I've also added some unit tests to demonstrate the expected behavior.\n",
            "It is possible, you just need to load this XML file, or register the content of this file manually like done here for Silex:\n\nhttps://github.com/fabpot/Silex/compare/master...form-validation\n\nI'm closing this PR as this is really a Silex bug, which does not register the correct callbacks.\n",
            "Just for reference; the Silex issue: https://github.com/fabpot/Silex/issues/111\n",
            "The command help is quite clear about this:\n\n If the entities are not stored in a bundle, and if the classes do not exist,\nthe command has no way to guess where they should be generated. In this case,\nyou must provide the <comment>--path</comment> option: \n",
            "@lsmith77: Why is it a BC break?\n",
            "After the merge, I've made several changes:\n- I have added support for the replacements in requirements\n- the replacement is only done if the parameter exists\n- I have added a bunch of unit tests\n",
            "Let's keep it open until we have a clearer vision of what will be fixed upstream.\n",
            "I've fixed the code so that it works with PHP 5.4: 3043fa08784c\n",
            "This should be fixed now. Can you confirm?\n",
            "I haven't heard back so I'm closing this ticket. Please reopen if the issue persists.\n",
            "Apart form my comments, I don't really like this patch. I understand the problem but it makes things look really complicated.\n",
            "Keep it open.\n",
            "I'm not able to reproduce this issue. Furthermore, when using radio buttons, I don't see what kind of errors you can have (except if you mess up with the HTML source code of course)? Anyway, can you provide a simple example that exhibits the problem? Thanks.\n",
            "@pkruithof: yes please.\n",
            "You can add paths to Twig directly as Symfony will always fallback to the default Twig behavior if a template is not found.\n\n```\n$container->get('twig.loader')->addPath('/some/path/with/templates/');\n```\n",
            "Unfortunately, I don't think we can do anything about this.\n",
            "This should be fixed now as the hackish part of HttpUtils has been removed. Can you confirm and close? Thanks.\n",
            "This has been fixed by #2698\n",
            "Patch looks good now (thanks @stof for the careful review). Before merging it though, I need that you squash all commits into one and that you base your PR on the symfony/2.0 branch as this is a bug fix. Thanks.\n",
            "I like to think of the `getRouteCollection()` method as an implementation detail (but I'm probably wrong). If we are going to add it to the Router interface, I think we also need to add it to both the Matcher and Generator interfaces.\n",
            "Which is why this is just an implementation detail. You don't need a `RouteCollection` to have a working `Router`. In fact, Symfony used to have a `CachedRouter` class that did not had any `RouteCollection` instance (which, by the way, explains why there is no `getRouteCollection()` method in the `Router` interface):\n\nhttps://github.com/symfony/symfony/commit/96fc666454195633043b162720940246af76f212#diff-9\n\nToday, that's not the case anymore and all Router implementations need a `RouteCollection` instance to work even if we try to avoid calling `getRouteCollection()`; the default FrameworkBundle implementation calls it only for the very first request.\n",
            "ok, you got me convinced. I have added the `getRouteCollection` method to `RouterInterface` (see 1467bdb86)\n",
            "@Seldaek: The trans tags only accept plain texts (see https://github.com/symfony/symfony/commit/286c45733e47d20d0b40e8454492a5fb66d80875); and plain texts are never escaped by Twig. So, this is consistent.\n\nSo, to sum up: as the translation tags are just wrappers around static block of texts, which are never escaped by Twig, automatic output escaping is never applied; but the automatic output escaping rules apply to the output of filters.\n",
            "I'm not sure we want to add it by default. As noted in the phpdoc,  Should be used when Oracle Server default enviroment does not match the Doctrine requirements. , which suggests that this is not always the case. Also, the constructor takes an argument, which is not implemented here.\n",
            "Sounds good to me. Do you want to work on a patch?\n",
            "Now, `getErrors(true)` returns all errors from children but then, there is no way to know where the error comes from, right? That sounds of quite limited use, don't you think?\n",
            "The id belongs to the view, so it looks wrong to me. It would probably be better to use the validation property path. But then again, I'm not even sure we want to support this.\n",
            "To avoid getting all keys, even the ones without errors, something like this should be better:\n\n``` php\n<?php\n     public function getErrors($deep = false)\n     {\n          $errors = $this->errors;\n\n          if ($deep && $this->hasChildren()) {\n               foreach ($this->children as $key => $child) {\n                   if ($err = $child->getErrors(true)) {\n                       $errors[$key] = $err;\n                   }\n               }\n          }\n\n          return $errors;\n     }\n```\n\nThe only remaining problem is that keys can be integer (for local errors) or string (for sub-form errors).\n",
            "Getting all errors is only useful for debugging purpose. In that case, what about adding a method for this use case and return a string to help debugging form problems? I have implemented such a method here:\n\nhttps://github.com/symfony/symfony/compare/master...form-errors\n\nWhat do you think?\n",
            "merged\n",
            "The console component has no dependency on the event listener and I don't want to add it. You can however extends the built-in `cache:clear` command to add your own logic. Or you can create a  meta  command that calls other commands. Last but not the least, remember that commands are like controllers; they should not contain any logic.\n",
            "ok, reopening this issue as @lsmith77 suggestion is a good idea.\n",
            "@lsmith77: yes. so, #1929 should be closed.\n",
            "A new token for each request does not make IMO. The whole thing is to check that the token is the same. The protection comes from the fact that the token is unique per form and user.\n",
            "Closing this issue as it is fixed in master.\n",
            "I've just checked and the code haven't changed since then (apart from minor CS fixes and one small bug). As I see it, it should work:\n\n```\n    if (function_exists($function) && call_user_func($function, $value)) {\n        return true;\n    } else if ($value instanceof $constraint->type) {\n        return true;\n    }\n```\n",
            "Can you give us more details about this issue?\n",
            "Closing this issue as the code looks good and there is no feedback from reporter.\n",
            "I will merge it in 2.1 as some people might rely on it.\n",
            "I think it is confusing and does not add any interesting value.\n\nFirst, defining a route name is probably always a good idea if you want to use it afterward. Then, when you don't define a name for a route, the generated one is not meant to be  useable , nor stable.\n\nFinally, the confusion comes from the way pattern and name work here in a totally different way. For the pattern, the  global  pattern is added to all patterns. And for  name , it's only added if you don't define a name. That's confusing and I've realized that when writing unit tests for this feature.\n",
            "I think it is confusing and does not add any interesting value.\n\nFirst, defining a route name is probably always a good idea if you want to use it afterward. Then, when you don't define a name for a route, the generated one is not meant to be  useable , nor stable.\n\nFinally, the confusion comes from the way pattern and name work here in a totally different way. For the pattern, the  global  pattern is added to all patterns. And for  name , it's only added if you don't define a name. That's confusing and I've realized that when writing unit tests for this feature.\n",
            "@willdurand: Can you rebase your PR on symfony/2.0 as this is a bug fix? Thanks.\n",
            "@pylebecq: As you have removed the symfony repo on your Github account, I'm not able to merge this PR anymore.\n",
            "@Seldaek: The merge button does not work either:  Your merge target has changed since we cached the merge commit - try the merge again \n\n@pylebecq: a new PR would be the best thing to do. Thanks.\n",
            "Closing this PR as Seldaek's patch has been updated.\n",
            "Are you sure you are using 2.0.0 final version? with the latest versions of all bundles?\n",
            "Does it happen on specific pages? Like pages with a lot of Doctrine queries, many sub-requests, or something else?\n",
            "Does it still happen when you disable the profiler?\n",
            "@willdurand: sure, a PR would be better to allow discussion.\n",
            "@michelsalib: Using SQLite profiler store in production is not an option.\n",
            "I've just tested this patch with a date field and the error is duplicated: it is displayed for the date itself but also for the whole form.\n",
            "I've just tested again and this does not work for me (tested with a date and a datetime type). For the datetime type, if you don't fill all elements of the date and the time, the error is doubled (at the field level and for the whole form).\n",
            "any news on this? Looks like it's not that simple.\n",
            "I've just tested this patch with a date field and the error is duplicated: it is displayed for the date itself but also for the whole form.\n",
            "I've just tested again and this does not work for me (tested with a date and a datetime type). For the datetime type, if you don't fill all elements of the date and the time, the error is doubled (at the field level and for the whole form).\n",
            "any news on this? Looks like it's not that simple.\n",
            "@lsmith77: PR #1551 is where this addition has been added by @lenar. If nobody comes up with a good solution, I think we can just revert this change (and work on a more robust solution for 2.1). As I said in the referenced PR, this should be handled automatically by the web server anyway.\n",
            "@lenar: We just need to remove the Content-Length header for now and work on a better solution (whatever what it means) for 2.1.\n",
            "fixed in c5e0c80a\n",
            "I agree that this is a quite common need but IMO, it does not belong to the core. After looking at the bundle, it would mean adding a bunch of code; also, the core should not be tied to any JavaScript library. As a bundle already exist and does the job, I think this is more a documentation issue. I've created a ticket (symfony/symfony-docs#796) to add a note about this somewhere in the book/cookbook.\n",
            "That's definitely something that needs to be part of the Twig-extension repo.\n",
            "The patch looks good to me as well but I'm always a bit worried about changes like this one. The good news is that 2.1 is not going to be released anytime soon, so that gives us plenty of time to test it and revert it in case of too many side effects.\n",
            "After playing with the patch a bit, there are indeed several problems. One of them is that all segments participating in a no-separator pattern must have a requirement. If one of them does not have a requirement, the compiled route regex is wrong. I don't see any way to fix it easily though.\n\nSo, I'm closing this PR.\n\nThere is a workaround when you need this feature: declare just one segment and split it yourself afterward in the controller or in a listener.\n",
            "@Seldaek: I've tried to fix some of these problems but after adding code for 15 minutes, I realized that I had to add even more code for a feature that's not really needed most of the time (and there is a workaround). The problem is not about being able to break things but that Symfony generates a wrong compiled route, which is a bit different.\n\nOne of the difficulty is that when you are when you are working on the first segment, you don't know that it is part of a non-separated segment list.\n",
            "It works fine for me with FastCGI and Nginx.\n\nCan you paste the whole output of `$_SERVER` when not using the workaround?\n",
            "@dlsniper: This is really a Doctrine  issue , not a Symfony one and it is already explained in the Doctrine documentation.\n\n@weaverryan: what do you think?\n",
            "Anyone working on a patch?\n",
            "https://github.com/symfony/symfony/commit/853935fbabce601f38a477161fafcd535e1fe23d\n",
            "I'm not able to reproduce the problem.\n",
            "I also tend to prefer the second solution as it makes Doctrine more robust. @beberlei: What do you think?\n",
            "Can you try with the latest Symfony Standard? It should be fixed now.\n",
            "Looks like some comments from @schmittjoh have been deleted. Can someone explain the issue with `createService()`?\n",
            "The name (`myBundleAdmin` here) used when importing a resource is never used by Symfony. So, your issue is due to something else.\n",
            "I'm working on it. Something will probably be available in the coming weeks.\n",
            "@mheleniak: we will have something for 2.1.\n",
            "Closing this ticket as the discussion now happens on PR #3378, which is scheduled for inclusion in Symfony 2.2.\n",
            "The goal of the prefix is to  mount  a bunch of routes under a common prefix. So, this change seems wrong to me and I don't see a use case for it.\n",
            "Closing this PR. That's not something I want to add to core. If the prefix is not the same, just duplicate it for each route where it makes sense.\n",
            "The goal of the prefix is to  mount  a bunch of routes under a common prefix. So, this change seems wrong to me and I don't see a use case for it.\n",
            "Closing this PR. That's not something I want to add to core. If the prefix is not the same, just duplicate it for each route where it makes sense.\n",
            "fixed in #1851\n",
            "It has been renamed to `invalid_message` and both the code and the doc have been updated accordingly.\n",
            "@stof: no, it's not as this feature was not present in RC4.\n",
            "This cannot be done because of security problems. See https://github.com/symfony/symfony/commit/af70ac8d777873c49347ac828a817a400006cbea\n",
            "I'm closing this issue as this is a Doctrine issue, not a Symfony now that the Registry will be moved to Doctrine (see #2244).\n",
            "The default pattern comes from ICU. But you can override it via the `money_pattern` option.\n",
            "fixed: https://github.com/symfony/symfony-standard/commit/d1eeb62e929c856ec40b943ab2948104f8a86440\n",
            "Closing this issue as there is a already PR.\n",
            "fixed here: a57a4aff\n",
            "@jalliot You can add `umask(0777)` in your front controllers and in the console script.\n",
            "I've added a commented `umask(0000)` in the console and the dev front controller. https://github.com/symfony/symfony-standard/commit/c31e38ec9ca9e170e4f4428d9294a9dc047cb041\n",
            "Yes\n",
            "see #1934\n",
            "Closing this ticket as #1934 will be merged.\n",
            "That's already possible.\n",
            "In master, the issue described by @beberlei has been fixed (but it's not possible to backport this fix to 2.0). So, the `_locale` argument is now always available and you don't need to pass it explicitly when generating a route for the current locale.\n",
            "You can use the dialog helper without a tty (think unit tests). see https://github.com/sensio/SensioGeneratorBundle/blob/master/Tests/Command/GenerateDoctrineCrudCommandTest.php#L24 \n",
            "You can use the dialog helper without a tty (think unit tests). see https://github.com/sensio/SensioGeneratorBundle/blob/master/Tests/Command/GenerateDoctrineCrudCommandTest.php#L24 \n",
            "Please ask your questions on the user mailing-list. Thanks.\n",
            "The proper way is to set a `port` setting as shown by @lenar.\n",
            "This should work now with the latest Symfony and the latest Twig.\n",
            "Can you discuss such things on the dev mailing-list? Thanks.\n",
            "Closing this issue as I don't see how we can implement this idea without breaking BC and more importantly, without adding complexity. If anyone has a better idea and an implementation, we can reopen the discussion.\n",
            "@Partugal Class names are not constants as you can change them.\n",
            "This is now possible via the `invalid_message_template` option:\n\n```\n        ->add('password', 'repeated', array(\n            'required' => false,\n            'type' => 'password',\n            'first_name' => 'password',\n            'second_name' => 'password_again',\n            'invalid_message_template' => 'Should be the same!',\n        ));\n```\n",
            "I've just tested and it works fine for me. That's probably an encoding problem of your PHP file.\n",
            "Can you paste the content of `/var/www/sico2/app/cache/dev/appdevUrlMatcher.php` somewhere? Or send it to me by email?\n",
            "fixed: https://github.com/symfony/symfony/commit/68c07775ad8e3cc2a70b94ae57b0e13a4f35a02f\n",
            "Is it still relevant? I mean, do we still have people have issues with scopes?\n",
            "Closing this one as configuration classes cannot know if we want an attribute or an element in the XML file.\n",
            "see #1608 for an explanation of why it is impossible to implement.\n",
            "`%` characters must be escaped by doubling them like @vicb suggested.\n",
            "Having a non final argument as null is never a good idea and is not supported.\n",
            "Closing this issue as we won't change the interface. The encoder is only responsible for encoding a raw string. You can pass whatever string your want by the way.\n",
            "Custom exceptions are great if you need to catch them. Here, it's a configuration error.\n",
            "Have you configured the `http_port` option?\n",
            "Are you using master? If not, can you try with master as I'm pretty sure it works.\n",
            "Point 2 has been fixed here: https://github.com/symfony/symfony/commit/88d915d1754b0ca318af0447d9629c29cbc195fd\n",
            "Point 1: Both constraints are actually applied. But as the type is integer (guessed thanks to the `Max` constraint), Symfony converts the input value to a localized number (via `NumberToLocalizedStringTransformer`), and converts it to `null` as a string is not a valid number. So, the type constraint is bypassed.\n",
            "The equivalent of the post-validation hook we had in symfony 1 is adding a callback validator on the class itself.\n",
            "@beberlei: can I merge the fix in #2169? or should we wait for another patch?\n",
            "@beberlei: Can you give me your go/no go on the provided patch?\n",
            "fixed here: https://github.com/symfony/symfony/commit/00c7e91182fb3e6995d8b208ac5bd9f3429cf81a\n",
            "Can you work on a patch?\n",
            "Can you give us more information about your issue?\n",
            "I'm not able to reproduce the error. If you disable the AsseticBundle and try to clear the cache, do you have the same error message?\n",
            "The `generate:doctrine:entities` command is just a proxy over the same command in Doctrine. Can you report the issue on the Doctrine Jira? Thanks.\n\nhttp://doctrine-project.org/jira/\n",
            "fixed.\n",
            "The guesser based on validation constraints does not take into account the validation groups. After looking at the code for quite some time, I don't see how we can make it work easily. Of course, if the guessed options are not correct, you can always override them as you see fit, so that's not a show stopper.\n",
            "Implementing such a task is impossible.\n\nDumpers are only able to convert _compiled_ service container configuration files (made of services and parameters) from one format to another, but it is not able to convert a configuration file containing extension-based configuration from one format to another (and the problem is unsolvable as we cannot know how the conversion should occur for each extension).\n\nMoreover, converting the compiled container to another format does not make much sense as you will end up with a big file containing only services and parameters.\n\nSo automatically migrating from one format to another is not possible.\n",
            "Using the Accept header is not a good idea when requests comes from a browser (Google will give you plenty of references about this). You can however determine the template to use based on the request format (`$request->getRequestFormat()`). \n\nThis mechanism is done automatically for you if you use the `@Template` annotation (comes with FrameworkExtraBundle which is bundled with the Symfony Standard Edition).\n",
            "https://github.com/symfony/symfony/commit/c85fd081c87e1ad6e6dd9e68c053183ffa351e4f\n",
            "Do you have case where it happens?\n",
            "fixed here: https://github.com/symfony/symfony/commit/bb5075d8200cdb0a285fb366e58924e787edf231\n\nThanks a lot for your investigation. That's much appreciated and hopefully, it will save hours of debugging for other Symfony developers (including myself).\n",
            "@stof: https://github.com/symfony/symfony/commit/0b0356f348e144969f10ea63d106efce96b2c848\n",
            "I'm not able to reproduce the issue.\n",
            "@BigBadBassMan: Can you create a ticket on Doctrine JIRA? (add a reference to this ticket and DDC-904). Thanks.\n",
            "fixed: https://github.com/symfony/symfony/commit/14c8cc2962c86910a9821448131b60acf28a35f5\n",
            "I don't see any error. The command was not able to automatically add the routing configuration and ask you to do so manually.\n",
            "I confirm that there is a bug.\n",
            "Actually, there is no bug but a configuration problem. You forgot to set the `multiple` option for the validation:\n\n```\n/**\n * @Assert\\Choice(choices = { spring ,  summer , autumn , winter }, multiple = true)\n */\n```\n",
            "Closing this ticket as this is a PHP bug and there is nothing we can do to avoid it.\n",
            "@epicwhale This is a know APC bug, see https://bugs.php.net/bug.php?id=52144\n",
            "I've just created an issue on Composer: composer/composer#959\n",
            "@stof: are you working on a patch?\n",
            "see #1745\n",
            "@keymaster: no\n",
            "I update it each time. I've just checked and it says `2.0.0-RC5-DEV`\n",
            "fixed in #1968\n",
            "fixed: https://github.com/symfony/symfony/commit/01d583e889e926cb3319ae2b827be33d2c739c8f\n",
            "#694 has been merge. So, you can now define your own format via the `format` option.\n",
            "https://github.com/symfony/symfony/commit/8cba4903d8c64372476dabdbc74cc73db90b958d\n",
            "I don't understand how it can work with a date type. If one of `year`, `month`, or `day` is not required, then how can the date be valid? For the time type, if the `minute` is required, but not the `hour`, what does it mean?\n",
            "any feedback on my concern?\n",
            "Closing this PR as the feature lets the developer creates fields that can never be valid.\n",
            "Closing this issue as the philosophy here is to always add routes with an explicit import somewhere.\n",
            "see https://groups.google.com/forum/#!topic/symfony-devs/EJr6XhawJTE\n",
            "Closing as we will not do anything before FIG agree on a cache interface that we can leverage.\n",
            "The logic to get the HTTP headers from the `$_SERVER` array is in `ServerBag`:\n\n```\npublic function getHeaders()\n{\n    $headers = array();\n    foreach ($this->parameters as $key => $value) {\n        if ('HTTP_' === substr($key, 0, 5)) {\n            $headers[substr($key, 5)] = $value;\n        }\n    }\n\n    // CONTENT_TYPE and CONTENT_LENGTH are not prefixed with HTTP_\n    foreach (array('CONTENT_TYPE', 'CONTENT_LENGTH') as $key) {\n        if (isset($this->parameters[$key])) {\n            $headers[$key] = $this->parameters[$key];\n        }\n    }\n\n    return $headers;\n}\n```\n\nInstead of relying on the `apache_request_headers` function which is only available if you are using Apache, I'd prefer to add more exceptions to the existing ones.\n",
            "fixed here: https://github.com/symfony/symfony/commit/182f9e6508419dd4f4e945c3bcb3304091204519\n",
            "Assetic should not serialize the Twig loaders.\n",
            "As this is related to Doctrine, can you report this issue on the Doctrine ticketing system? Thanks.\n\nhttp://www.doctrine-project.org/jira\n",
            "Will be fixed automatically when we release the next RC (which I should do later today).\n",
            "What's the status of this PR? This should be sorted out today or tomorrow to be included in 2.0.\n",
            "@stof: On which element would you add this `data-prototype` attribute?\n",
            "Just for the record, here is the list of previous PRs on this topic: #739, #1188, and #1315\n",
            "@blauwers: It does solve the namespace collision as the `data-prototype` attribute is set on the collection tag (`div` or `table`). And it has a unique `id` which you can use to get the prototype.\n",
            "I'm closing this PR in favor of #1724\n",
            "Questions should be asked on the mailing-list.\n",
            "This is an issue with MongoDBBundle. Please, open a ticket there.\n",
            "That's because security tries to generate a URL before the router listener is triggered. So, at this point, the `_locale` variable is still empty.\n",
            "I think I've an idea on how to fix this problem. I will play with it today and try to submit a patch.\n",
            "First part was rather easy (logout):\n\nhttps://github.com/symfony/symfony/commit/4f8a98033a949630cc6bd2a6f37c401b25ac0383\n",
            "I don't see how to fix the second part without hacking a lot. Here is a patch that works:\n\n```\ndiff --git a/src/Symfony/Component/Security/Http/HttpUtils.php b/src/Symfony/Component/Security/Http/HttpUtils.php\nindex 9ac604e..4d1c77a 100644\n--- a/src/Symfony/Component/Security/Http/HttpUtils.php\n+++ b/src/Symfony/Component/Security/Http/HttpUtils.php\n@@ -48,6 +48,18 @@ class HttpUtils\n         if (0 === strpos($path, '/')) {\n             $path = $request->getUriForPath($path);\n         } elseif (0 !== strpos($path, 'http')) {\n+            $context = $this->router->getContext();\n+            $session = $request->getSession();\n+            try {\n+                $parameters = $this->router->match($request->getPathInfo());\n+            } catch (\\Exception $e) {\n+            }\n+            if (isset($parameters['_locale'])) {\n+                $context->setParameter('_locale', $parameters['_locale']);\n+            } elseif ($session) {\n+                $context->setParameter('_locale', $session->getLocale());\n+            }\n+\n             $path = $this->generateUrl($path, true);\n         }\n```\n\nI won't have time today to work more on it. So, feel free to play with the above code.\n",
            "pushed here: https://github.com/symfony/symfony/commit/ea7a0eb19c487e882693659d472aca61bed4a9ed\n",
            "I've just tested and it works fine for me (note that I'm not using FOSUserBundle).\n",
            "I've just enabled issues on symfony-standard.\n",
            "In Symfony2, you should always use `{{ form_rest(form) }}` to display all remaining field (to avoid the problem you describe). As of 2.1, you can also have call `$form->getErrorsAsString()` to get a string representation of all errors in the page. That should be enough to debug your forms.\n",
            "You are right. Validation/Constraint only cares about the key, but the form needs both the keys and the values. So, the only proper  fix  I can think of is the removal of the guesser for choices. I will think about it a bit more but the proposed fix is a hack.\n",
            "I've removed the guesser for the Choice constraint as it cannot work:\n\nhttps://github.com/symfony/symfony/commit/47da6cf39eeda97ec46e899704115b222e66a151\n",
            "When you are using `callback`, Symfony2 is not able to get the choices, and so cannot  guess  the field:\n\nhttps://github.com/symfony/symfony/commit/a724774fc003cc5df8e23f88812f25042088344b\n",
            "no, it's not because we just have the constraint object, which is not linked to the data being validated.\n",
            "What is the problem? Each client has a different session id, and so a different storage path?\n",
            "One simple way to fix the problem is to insulate one of the client. I've just tested it and it works (I had to fix the `getScript()` method which is broken right now).\n",
            "fixed here: https://github.com/symfony/symfony/compare/bb452cd7c4e45acc2267645925bb818204b3e5e3...3104a8ab22b26c9ad7e39d6dbd81e64f5a0e8071\n",
            "For the reason explained by @stof, the current behavior must be kept.\n",
            "For the reason explained by @stof, the current behavior must be kept.\n",
            "No, it's not a requirement. If you don't have intl, Symfony2 falls back to Stub functions and classes. If you are using Symfony2 SE, it should be done automatically by you thanks to the following code in your `autoload.php` file:\n\n```\n$loader->registerPrefixFallbacks(array(\n    __DIR__.'/../vendor/symfony/src/Symfony/Component/Locale/Resources/stubs',\n));\n```\n",
            "fixed here:\n\nhttps://github.com/symfony/symfony-standard/commit/10b8ddf1ff49238ae2c046e2f6d54b88f536e5ff\n",
            "@lsmith77, @stof: This patch is about something different. It provides autocomplete inside commands.\n",
            "@lmcd: The right command is `git rebase -i HEAD~4`\n",
            "@lmcd: I've rebased this PR here: #2364. You can fork the symfony/console-autocomplete branch to continue working on it.\n",
            "Let's discuss this new feature for 2.1.\n",
            "Tests do not pass.\n",
            "The SVN mirror is not updated anymore mainly because the whole Symfony2 ecosystem is based around Git (all bundles are hosted on Git) -- and there is no SVN fallback for them (except the default SVN support if the bundle is hosted on Github of course). Also because we now propose read-only repositories for each component, so you can still have the same effect as the 'svn:externals' by just getting the components you want via Git or Github SVN.\n",
            "We cannot do this because all pages are not UTF-8 and because as @lsmith77 mentioned, mbstring is not always available. The `addHtmlContent()` is just a convenience method and in your case, you need to use `addDocument()` instead.\n",
            "Can you copy/paste or send me the relevant templates?\n",
            "fixed: https://github.com/symfony/symfony/commit/a19c336c180ab05f309bee0630a70f68d48e1183\n",
            "I want to fix things for the iSeries but as I don't have access to any machine like that, can you help us identify the problem and fix it?\n",
            "@xaav: your patch removes the output colorization for me (on a Mac).\n",
            "fixed\n",
            "fixed: https://github.com/symfony/symfony/commit/600cd415e6f413e983a71cc3bcd6241b0105a7ee\n",
            "The `app/Resources/` directory is used to override the configuration from the bundles. The `app/config/` is for the main configuration of the application.\n",
            "Please, ask your questions on the Symfony2 mailing-list.\n",
            "I don't see anything in the way proxies work that would explain your issue. But as we have made some changes related to the way forms and proxies work together, can you try again with the latest Symfony and confirm that the bug still exists? Thanks.\n",
            "but then, what about removing all bundles but the Framework one? We have already discussed about that, and the bundles in the Symfony repository are the ones that most people will want to use. Of course, it does not mean that you must use them and if you don't, there is no impact whatsoever.\n",
            "I don't see anything that prevents you from running executing long running processes with the Process component. Can you be more explicit about what's missing?\n",
            "fixed by #3681\n",
            "The problem is not really related to Symfony2 but to the way PHP interprets the submitted values. Have a look at the `$_POST` variable when using an empty key:\n\n```\narray ( 0 => ' ', 'spring' => 'spring', ... )\n```\n\nAs you can see, PHP uses `0` as a key and not an empty string (`''`). That's because the key in the form is something like `foo[]`, which is interpreted by PHP as an array/sequence and not a hash.\n\nNote that this only happens when using a list of checkboxes, where I think it does not make sense to have an empty key.\n",
            "I've removed the guesser for the Choice constraint as it cannot work:\n\nhttps://github.com/symfony/symfony/commit/47da6cf39eeda97ec46e899704115b222e66a151\n",
            "I've removed the guesser for the Choice constraint as it cannot work:\n\nhttps://github.com/symfony/symfony/commit/47da6cf39eeda97ec46e899704115b222e66a151\n",
            "You mean beta5? If it's PR5, then you should update as proxies should work fine.\n",
            "`array_key_exists` is definitely slower than `isset`, but it is not noticeable for  common  applications. From all the benchmarks I've done on Symfony2, that has never come up as a possible interesting optimization. Have you a xdebug or a xhprof profile that proves the contrary?\n",
            "Can you tell us a bit more about these numbers? Is it for a Symfony2 hello world app? Also, I notice that the number of function calls is not the same in your two benchs.\n",
            "Closing this ticket as this is definitely a micro-optimization (and as explained in the description, we would need to make the code more complex anyway).\n",
            "Closing this issue as there is a PR with a discussion.\n",
            "The proxy should work fine. What is the problem you get? \n",
            "@schmittjoh: what do you think?\n",
            "Renaming `core.response` to `kernel.response` is fine with me.\n",
            "I've just reuploaded the archives for beta5. They now contain the deps and deps.lock files. Sorry about the inconvenience.\n",
            "@vicb is right. You have non-compatible versions of several components. If you are using Silex, I've just updated it to the latest version, so everything should work fine with it. If not, update all the Symfony Components to master.\n",
            "fixed now: https://github.com/symfony/symfony/commit/139a45f1734c2a044db5c74adaf4b58f4816e4c6\n\n@stof: if you have more than one guesser to register, you have to return an instance of `FormTypeGuesserChain`.\n",
            "I don't see the use case and anyway we won't support it. When creating the form, you pass the current object, which is then updated by the form and bound. So, if the submitted data does not provide a value for email, there is a problem somewhere in your code.\n",
            "I don't see the problem here. The default parameters passed in the URL can be set on the object you have before being passed to the form.\n",
            "I don't see that as a common use case. But I can miss something. Can you give me more information?\n",
            "I don't understand the problem here. Can you be more explicit on what needs to be done?\n",
            "I'm still not sure I understand the problem. But validation groups looks like a solution to what @beberlei describes.\n",
            "You can pass any valid service as a value for `transport`.\n",
            "merged\n",
            "I think this commit was part of a larger PR that was closed. And so this commit has been lost. This patch is good so we need to merge it. Problem is that is does not look to be in the @schmittjoh repository anymore. @schmittjoh: Can you make a PR with the code referenced here? I can also extract the code from Github directly if you want.\n",
            "The problem is that the `009c2839456fd05b40b2590cdb55695bda3dd83c` sha is not part of your repository anymore. So, the only option for me is to copy/paste the code and make a new commit out of it. I can do this for sure, but you will loose authorship. So, if you can do it, that's better. Just tell me what you prefer.\n",
            "@stof: right, I will do that then.\n",
            "fixed: https://github.com/symfony/symfony/commit/783f1679b9703cd9d07b9a38e13af2b27195dc9a\n",
            "@stof: Is it still relevant?\n",
            "Anybody working on it? Again, comments from @schmittjoh have disappeared. That's weird.\n",
            "It means that the user does not have the right to write in this directory.\n",
            "There is no bootstrap in Symfony2. In fact, the session is started on each master request:\n\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/EventListener/SessionListener.php#L54\n\nBut of course, we call `session_start()`, which can be your problem.\n",
            "First, thank you all for your hard work on this feature. As this is a quite large patch, I would rather split it up in more manageable chunks. First, I think we can work on the `Formatter` feature, which is a standalone feature. I think we need to rename it to `Dumper` as this is really equivalent to what we already have in some other component, so it will be more consistent (the `format` method should then be renamed to `dump`). Also, I think the `dump()` method should take a `MessageCatalogue` as an argument instead of an array. Can you create a new PR with just the Formatter part as a first step?\n",
            "Can you give me the stack trace?\n",
            "ok, I found the problem. Should be fixed now.\n",
            "https://github.com/symfony/symfony/commit/f5de854d6919ad6c1ef86220e7beb9700ac60502\n",
            "fixed\n",
            "@renegare: Can you confirm that master fixes your issue?\n",
            "Can you create a ticket on symfony/symfony-docs as this is a doc problem? Thanks.\n",
            "ping @Seldaek\n",
            "It seems that you `parameters.ini` file has not been updated.\n",
            "It means that the secret is not defined in your parameters.ini file.\n",
            "implemented: 2e1344eb7\n",
            "What's the point in displaying a password as hidden characters?\n",
            "@kriswallsmith?\n",
            "Some helpers needs a request. So, depending on your code, you must enter the request scope and create a Request object. Can you post your question on the Symfony user mailing-list? Thanks. http://groups.google.com/group/symfony-users\n",
            "How do you generate those? The Console automatically disables colors when not talking to an output that understands them.\n",
            "#1042 has been fixed now.\n",
            "I'm less and less comfortable with the hardcoding of `{_locale}` everywhere. I know that we have already done that in a few places but now that we add this hack more, I think we need to think about a cleaner solution.\n",
            "ok, I will merge this PR as is as this is at least consistent with the way we are doing things at the moment and we will revisit the topic for 2.1.\n",
            "Closing this ticket as this is a discussion that should happen on the Symfony user mailing-list.\n",
            "Can you please ask your questions on the user mailing-list? Thanks.\n\nhttp://groups.google.com/group/symfony-users\n",
            "In this case, you should set the content-type yourself.\n",
            "Can you ask your question on the Symfony user mailing-lists? Thanks.\n\nhttp://groups.google.com/group/symfony-users\n",
            "Can you ask your question on the Symfony user mailing-lists? Thanks.\n\nhttp://groups.google.com/group/symfony-users\n",
            "Configuration is already possible in php.ini. That's the way to go.\n",
            "What are you trying to achieve? There is no such thing as  extending  YAML. If someone does not work as expected, it should be fixed instead.\n",
            "everything should work fine now when using Doctrine 2.0.x or the upcoming beta5.\n",
            "Two comments:\n- there is a comment that says `// It's important to specify the first day of the month here!` just before the line you have modified (I don't know/understand why)\n- The problem should not occur as the formatter timezone is explicitly changed to UTC before calling the `format()` method.\n",
            "This closes #1080\n",
            "Tests do not pass for me:\n\n```\n1) Symfony\\Tests\\Bridge\\Twig\\Extension\\FormExtensionTableLayoutTest::testCollection\nFailed asserting that \n\n/table\n    [\n        ./tr[./td/input[@type= text ][@value= a ]]\n        /following-sibling::tr[./td/input[@type= text ][@value= b ]]\n    ]\n    [count(./tr[./td/input])=2]\n    [@id= my&id ]\n    [@class= my&class ]\n\nmatches exactly once. Matches 0 times in \n\n<div id= my&amp;id  class= my&amp;class >\n<tr>\n<td><label for= name_0 >[trans]0[/trans]</label></td>\n<td><input type= text  id= name_0  name= name[0]  required= required  value= a ></td>\n</tr>\n<tr>\n<td><label for= name_1 >[trans]1[/trans]</label></td>\n<td><input type= text  id= name_1  name= name[1]  required= required  value= b ></td>\n</tr>\n</div>\n\n.../tests/Symfony/Tests/Component/Form/AbstractLayoutTest.php:75\n.../tests/Symfony/Tests/Component/Form/AbstractLayoutTest.php:91\n.../tests/Symfony/Tests/Component/Form/AbstractTableLayoutTest.php:159\n```\n",
            "@vicb: Using `renderBlock()` directly is really a  hack . So, let's patch Symfony with your proposal in the Gist.\n",
            "@vicb: will you work on this? No pressure but I want to release a new version on Monday.\n",
            "After merging #1295, two new tests do not pass:\n\n```\nThere were 2 failures:\n\n1) Symfony\\Bundle\\FrameworkBundle\\Tests\\Templating\\Helper\\FormHelperTest::testCollection\nFailed asserting that \n\n/div\n    [\n        ./div[./input[@type= text ][@value= a ]]\n        /following-sibling::div[./input[@type= text ][@value= b ]]\n    ]\n    [count(./div[./input])=2]\n    [@id= my&id ]\n    [@class= my&class ]\n\nmatches exactly once. Matches 0 times in \n\n\n\n.../Tests/Component/Form/AbstractLayoutTest.php:74\n.../Tests/Component/Form/AbstractLayoutTest.php:90\n.../Tests/Component/Form/AbstractDivLayoutTest.php:277\n\n2) Symfony\\Bundle\\FrameworkBundle\\Tests\\Templating\\Helper\\FormHelperTest::testCollectionRow\nFailed asserting that \n\n/div\n    [\n        ./input[@type= hidden ][@id= form__token ]\n        /following-sibling::div\n            [\n                ./label[not(@for)]\n                /following-sibling::div\n                    [\n                        ./div\n                            [\n                                ./label[@for= form_collection_0 ]\n                                /following-sibling::input[@type= text ][@value= a ]\n                            ]\n                        /following-sibling::div\n                            [\n                                ./label[@for= form_collection_1 ]\n                                /following-sibling::input[@type= text ][@value= b ]\n                            ]\n                    ]\n            ]\n    ]\n    [count(.//input)=3]\n    [@id= my&id ]\n    [@class= my&class ]\n\nmatches exactly once. Matches 0 times in \n\n<div class= my&amp;class  id= my&amp;id >\n                <input type= hidden  id= form__token  name= form[_token]  value=  >            <div>\n    <label>[trans]Collection[/trans]</label>\n        </div>\n                </div>\n\n.../Tests/Component/Form/AbstractLayoutTest.php:74\n.../Tests/Component/Form/AbstractLayoutTest.php:90\n.../Tests/Component/Form/AbstractDivLayoutTest.php:317\n```\n",
            "ok, there was a missing `echo` statement in the PHP template. This has been fixed.\n",
            "fixed: https://github.com/symfony/symfony/commit/c72537da6b906d9d7599a0ce00aead597804d0c7\n",
            "Closing this PR as #1221 is better\n",
            "fixed:\n\nhttps://github.com/symfony/symfony/commit/c62b2309cf1cc2fab448d754caf6c57c10ff84d3\n",
            "The parameter bag is not part of the interface and I don't want to add it.\n",
            "Tests do not pass for me after applying this patch:\n\n```\n1) Symfony\\Tests\\Component\\Form\\Extension\\Core\\Type\\DateTypeTest::testSetData_differentTimezones\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-01.06.2010\n+02.06.2010\n```\n",
            "The error message handling has been fixed (https://github.com/fabpot/Twig/commit/3cf357391a243af489c84c4cb2c905a2a89e589a and https://github.com/fabpot/Twig/commit/7e457209f8c69865ac2bc8b86c24518cded0dd01).\n",
            "see #1262\n",
            "Default values are only when the parameter is not set. If a parameter is set to `null`,, then the default value should not be used.\n",
            "This is because we have just updated the event dispatcher. The SecurityExtraBundle is not updated yet. /cc @schmittjoh\n",
            "Just for the record: I've just removed all usage of `\\Exception` in Symfony2 master:\n\nhttps://github.com/symfony/symfony/commit/6a7359389dbd08a4bbb7857530f3d179da5c8a21\n",
            "Does #3114 solve your issues?\n",
            "What's the status of this PR?\n",
            "As @stof said, `locations` is a collection of entities, not a single entity. So, the form configuration is wrong (`$builder->add('locations', 'entity'` -- `entity` should probably be `collection`).\n",
            "I think you can give it a go as @bschussek has limited time for Symfony.\n",
            "What exactly does not work? I've just tried, and it looks to work for me.\n",
            "fixed: https://github.com/symfony/symfony/commit/a98046dd4456042e54b73164eea4fe6e25290238\n",
            "Can you ask your questions on the Symfony user mailing-list (http://groups.google.com/group/symfony-users)? Thanks.\n",
            "fixed\n",
            "fixed now\n",
            "Problem is that this command is just a proxy to the equivalent command in Doctrine and the Doctrine command relies on `Doctrine\\ORM\\Tools\\Export\\Driver\\*Exporter` classes where the extension is hardcoded. ping @beberlei.\n",
            "I've made a PR for this issue here:\n\nhttps://github.com/symfony/symfony/pull/1215\n\nBut it needs a PR for Doctrine to be merged first:\n\nhttps://github.com/doctrine/doctrine2/pull/66\n",
            "fixed\n",
            "To be clear, it will be fixed as soon as Doctrine ORM 2.0.6 will be released, but the code in Symfony to fix the issue is already here.\n",
            "#1051 is not a duplicate. This issue is about repeated fields.\n",
            "After looking at the problem, it's not trivial to fix.\n",
            "fixed here: https://github.com/symfony/symfony/pull/1221\n",
            "@stof: the Doctrine bundle tests do not help that much. They are very fragile and are not really that useful. I think that the only good way to go for testing the Security extension is to add some functional tests.\n",
            "What do we do with this PR?\n",
            "@weaverryan: Can you extra the doc changes?\n",
            "This class is to be used only for functional tests, where `session_start()` must not be used. You should not use it for anything else.\n",
            "EntityType should probably takes the Doctrine Registry instead of the EntityManager. I will see how I can make the switch (only problem is that the Registry depends on the Container).\n",
            "I've finished the refactoring and now all classes in the Bridge depend on the Registry, which is protected now in EntityType.\n",
            "Can you please post your questions on the Symfony user mailing-list? thanks.\n",
            "@helmer: yes, if you have time, you can work on a patch. If possible, can you give me an ETA so that I can schedule the next releases?\n",
            "I've implemented point 1): https://github.com/symfony/symfony/commit/c364008a3b5e12dd0a3ac11eb1b5450be3f6fb42\n",
            "`empty_value` is now translated as well: https://github.com/symfony/symfony/commit/2ce3cfad18691af93370be1b1d12be21a180ee19\n",
            "@kbond: Can you squash your commits before I merge this PR? Thanks.\n",
            "@kbond: Can you squash your commits before I merge this PR? Thanks.\n",
            "fixed: https://github.com/symfony/symfony/commit/988355993a3ed89ba761e8fc12cc88940090516a\n",
            "This is related to #1080 and #1188 will fix this. Closing now as this is a duplicate.\n",
            "If you to test if a template exists, use `$this->container->get('templating')->exists($name)`.\n",
            "Can you test with the current master. It should be fixed now.\n",
            "Ok, I'm pretty sure that if works for all cases now. Can you confirm?\n",
            "Tests do not pass:\n\nThere was 1 failure:\n\n1) Symfony\\Tests\\Component\\Validator\\Constraints\\UrlValidatorTest::testInvalidUrls with data set #3 ('http://google.foobar')\nFailed asserting that boolean:true is false.\n\n.../tests/Symfony/Tests/Component/Validator/Constraints/UrlValidatorTest.php:70\n",
            "What's the status of this PR? ping @stloyd\n",
            "This is a known issue, but a Doctrine one. The Doctrine command is not updated yet. Ping @beberlei.\n",
            "I have already removed the prefix in beta2. So, as soon as Doctrine adds the required `use` statements, it will work.\n",
            "Doctrine PR61 has been merged into master. So, as soon as it is also merged into the 2.0.x branch and if a new 2.0 version is released, it will fix this bug automatically. So, I m closing the issue.\n",
            "We cannot keep it as it is now as the error message in some browsers is confusing. This cannot be the  default .\n",
            "I have instead added a tip in the form documentation: https://github.com/symfony/symfony-docs/commit/cc0468b2f683a0f9b2642fc00ba2735a519f7c3e\n",
            "@beberlei: why not load the `DoctrineAnnotations` file instead?\n",
            "related to #796\n",
            "fixed here: https://github.com/symfony/symfony/commit/082473659e22ea85e67956818e702cfae6701c9d\n",
            "fixed here: https://github.com/symfony/symfony/pull/1221\n",
            "Can you post your question on the Symfony user mailing-list? Thanks.\n\nhttp://groups.google.com/group/symfony-users\n",
            "Can you give an example of a real-world use case? Thanks.\n",
            "@Seldaek: I understand that. But why not doing this in the template?\n",
            "@mvrhov: ok, but what prevents you from doing this in the template directly?\n",
            "But the controller is where you prepare the data that you want to send to the view. Without any concrete example, I'm going to close this PR.\n",
            "@shuogawa: That's what I fear. Setting the `width` or any other attribute in PHP is wrong. This belongs to the templates.\n",
            "I'm going to merge it as a  convenience  tool, but the documentation should clearly state that the only usage should be for `data-*` attributes.\n",
            "It should be fixed now. Can you try with master?\n",
            "@ericclemmons: hehe, your example is a very good one ... if you want to upset @lsmith77 ;)\n",
            "How does it play with the form framework and the `DelegatingValidator` class?\n",
            "The more I think about this, the more I think this is not something we can support in the core. Adding `ArrayAccess` to `FormBuilder` (if needed) sounds better to me.\n",
            "fixed: https://github.com/symfony/symfony/commit/2438a73c7baf05e69edfb91e52ba1e55c422286e\n",
            "This is already possible easily with the choice type:\n\n```\n->add('gpa', 'choice', array('choices' => range(1, 5, 0.25)))\n```\n\nBy the way, the implementation is wrong. Here is how it should have been implemented:\n\n```\nclass RangeType extends AbstractType\n{\n    public function getDefaultOptions(array $options)\n    {\n        if (!isset($options['start'])) {\n            throw new FormException('The option  start  is required');\n        }\n\n        if (!isset($options['end'])) {\n            throw new FormException('The option  end  is required');\n        }\n\n        if (!isset($options['step'])) {\n            $options['step'] = 1;\n        }\n\n        $range = call_user_func_array('range', array(\n            $options['start'],\n            $options['end'],\n            $options['step']\n        ));\n\n        return array_merge($options, array(\n            'choices' => array_combine($range, $range),\n        ));\n    }\n\n    public function getParent(array $options)\n    {\n        return 'choice';\n    }\n\n    public function getName()\n    {\n        return 'range';\n    }\n}\n```\n",
            "As this bug is not reproducible anymore, I'm closing this ticket.\n",
            "The temporary upload file feature has been removed in 2.0:\n\nhttps://github.com/symfony/symfony/commit/852a4c9c6a4103fcbc87e99135db4dadbc7ce2a4\n",
            "I've scanned the code and the `ValueToDuplicatesTransformer` is the only one to contain a message that must be configurable. All others are due to a mis-configuration and as such should be fixed before going to production (they don't need to be translatable). Any others?\n",
            "The way deps works is now better. See here:\n\nhttps://github.com/symfony/symfony-standard/commit/394453605c584f3310d2ce3993e16949d643b093\n",
            "I have just tested and it seems to work fine now (we have refactored this part recently). Can you confirm that it works now?\n",
            "due to the recent changes, I've redone the migration here:\n\nhttps://github.com/symfony/symfony/commit/879242cdf5466f139b89c56fed71cd5d93fef39d\n\nI've merged the tests for the Registry here:\n\nhttps://github.com/symfony/symfony/commit/2a5449dcb0c20c96a9b0e6ca4e0c9fb78e60caab\n",
            "Can you post your problem about Doctrine on the Doctrine mailing-list? Thanks.\n",
            "Please, use the mailing-list to ask questions.\n",
            "The dependency on Config is optional.\n",
            "The Loaders are also optional.\n",
            "Then, use the Config component. Frankly, I don't see the problem.\n",
            "That's now available in master.\n",
            "Is it really a term that is widely used? If I type  CSRF intention  on Google, the first result is this PR ;)\n",
            "What's the status of this PR? /cc @schmittjoh\n",
            "This ticket is related to Doctrine (http://www.doctrine-project.org/), not Symfony.\n",
            "This has been fixed and will be available in beta2\n",
            "Looks like you are using beta1 with a newer version of Symfony2. Download beta1 with vendors included.\n",
            "What about entities with the same name but a different namespace?\n",
            "After thinking more about it, I think you won't be able to make it work. You will be able to make it work for bundles as the context can determine where the classes should be found, but I don't see how it will work for mappings done in a random location.\n",
            "looks good to me. @beberlei?\n",
            "Tests do not pass.\n",
            "Closing this PR... and waiting for another one based on Johannes idea.\n",
            "@johnwards: Can you test the patch in this comment? https://github.com/symfony/symfony/pull/743#issuecomment-1136299 It looks like it should fix your issue.\n",
            "ok, I've just tried with your demo bundle and the patch from #743 do fix your issue. I'm closing this one as the other patch looks better.\n",
            "We have discussed this topic many times and as such, we won't change the convention at this point.\n",
            "@kriswallsmith: that does not make sense. We have settle with some conventions and we won't change them now. The extension is named after the bundle by replacing Bundle by Extension.\n",
            "We've already talked a lot about the convention of the bundle class. We have decided to use the verbose version; and the same reasons should lead to the same conclusion: using the verbose version for the extension as well. I don't how it makes things easier to change a convention.\n",
            "fixed https://github.com/symfony/symfony/pull/1017\n",
            "It was the case in old Symfony versions but not anymore. This is a chicken and egg problem with pros and cons to both approaches. The current approach is not going to change as this is the simplest one, the most extensible one, with only one downside which is the bug reported here.\n",
            "Can you split this PR into smaller  logical  ones? Thanks.\n",
            "@stloyd: Any update on this PR?\n",
            "Closing this PR then\n",
            "Your patch looks good.\n",
            "Can you add some unit tests?\n",
            "Can you split this PR into 2 smaller one: one about the refactoring and another one about the MySQL fix?\n",
            "@kertz: merged. Can you rebase this PR?\n",
            "The temporary upload file feature has been removed in 2.0:\n\nhttps://github.com/symfony/symfony/commit/852a4c9c6a4103fcbc87e99135db4dadbc7ce2a4\n",
            "This is a Doctrine requirement. But you are not required to use them: http://symfony.com/blog/symfony2-getting-easier-part-3\n",
            "Tests do not pass for me:\n\nThere were 2 failures:\n\n1) Symfony\\Tests\\Component\\Validator\\Constraints\\UrlValidatorTest::testValidUrls with data set #2 ('https://google.com/')\nFailed asserting that boolean:false is true.\n\n.../tests/Symfony/Tests/Component/Validator/Constraints/UrlValidatorTest.php:48\n\n2) Symfony\\Tests\\Component\\Validator\\Constraints\\UrlValidatorTest::testValidUrls with data set #3 ('https://google.com:80/')\nFailed asserting that boolean:false is true.\n\n.../tests/Symfony/Tests/Component/Validator/Constraints/UrlValidatorTest.php:48\n",
            "fixed\n",
            "Can you please ask your questions on the Symfony mailing-list? Thanks.\n",
            "As stated in the documentation, you must first get the mailer, then create a message.\n",
            "Let's schedule the discussion for 2.1.\n",
            "@pborreli?\n",
            "Why do you need to iterate on the parents? What is the bug? I've just tested, and I don't see where the problem is.\n",
            "Does it make sense to allow injection for private properties? To me, this breaks concerns and should not be allowed.\n",
            "If you set a property as private, it means that you don't want anybody to be able to change the value outside the class. I have no objection on the change, but I want to make sure that we want to allow that.\n\nWe have the same question about validators too (see #796 for a somewhat related question).\n",
            "If a dependency is stored in a private property and if there is no setter and no way to pass it to the constructor, it means that there is no way to create an instance without using Reflection. That smells really bad to me and I've never seen such classes.\n",
            "And you can use setter injection for immutable objects:\n\n```\npublic function setFoo(Foo $foo)\n{\n    if (null !== $foo) {\n        throw new \\LogicException('Foo is immutable.');\n    }\n\n    $this->foo = $foo;\n}\n```\n",
            "@kriswallsmith: I think supporting property injection for public properties is fine. Support for protected and private properties should be removed.\n",
            "There is no feeling here but just a simple reasoning.\n\nClasses should work with or without the DIC in the same way. When you create instances with PHP, you have to respect the properties visibility as this is the contract between the class and the developer (if not, just mark everything as public). As such, the DIC should also respect PHP visibility rules. The use case you are referring to (immutable dependencies) can be solved with a setter as I've shown above. Using a private property is a trick and should not be supported by default (and this is not about flexibility, but correctness).\n",
            "Also, why not allowing injection for protected or private methods then? One thing I like to keep in mind when working with the DIC is: A class should never know that it is managed by the DIC.\n",
            "It cannot be populated as population is done by the extension, which knows nothing about your router. This is an interesting edge case and we need to think about how to make it work.\n",
            "@stof: Even if this works, this is a lot of work. My concern is that when arguments were defined as parameters, this kind of stuff worked out of the box.\n",
            "We need to find a way to make this work without doing the Compiler pass dance. I will think about it more but if the solution to re-introduce parameters whenever we need to inject something in a service, I will make the change.\n",
            "fixed now: https://github.com/symfony/symfony/commit/f7aea2a830a131ceff5586ca3cc1703b19b3aeff\n",
            "You should never rely on the `_route`. It's only available for debugging purpose.\n",
            "I'm pretty sure that this is not supported by the YAML spec. Sequences and mappings are two different types (PHP is really the only language that mixes the two together and know how to deal with them).\n",
            "This will add a lot of code for no real benefit.\n",
            "That's not something we will support.\n",
            "I've added a SizeLength validator that can be used as an exact length validator and a range length validator as requested by Bernhard: b9ba11720\n",
            "Can we close this ticket now?\n",
            "fixed now\n",
            "That's not the way Symfony2 works. We already have plenty of mechanism to automatically load configurations from a bundle. \n",
            "@hhamon: Can you try with the following patch (it should fix your issue)?\n\n```\n--- a/src/Symfony/Component/Form/Extension/Validator/Validator/DelegatingValidator.php\n+++ b/src/Symfony/Component/Form/Extension/Validator/Validator/DelegatingValidator.php\n@@ -136,11 +136,12 @@ class DelegatingValidator implements FormValidatorInterface\n             $path = (string)$child->getAttribute('property_path');\n\n             $nestedNamePath = $namePath . $child->getName();\n-            $nestedDataPath = $dataPath . '.' . $path;\n\n             if ($child->hasChildren()) {\n+                $nestedDataPath = $dataPath . '[' . $path . ']';\n                 $this->buildDataPathMapping($child, $mapping, $nestedDataPath, $nestedNamePath);\n             } else {\n+                $nestedDataPath = $dataPath . '.' . $path;\n                 $mapping['/^'.preg_quote($nestedDataPath, '/').'(?!\\w)/'] = $child;\n             }\n         }\n```\n",
            "fixed\n",
            "related to #1056\n",
            "big +1 for me. That totally makes sense, fixes the issue Kris talked about on the ML, and allows for more flexibility.\n",
            "@schmittjoh: Because now that we are all using the new event dispatcher in our applications, we see some limitations (as explained by Kris and Jordi) that were not identified when we voted on this topic.\n",
            "I've finished the refactoring (mainly for Forms). Work is in the events branch. Diff is here: https://github.com/symfony/symfony/compare/master...events\n",
            "new PR is here: https://github.com/symfony/symfony/pull/1153\n",
            "ping @bschussek \n",
            "@bschussek What do we do here? Can it be closed in favor of #5749? Or are we still discussing which option would be better?\n",
            "I would love to have this in 2.3 as this is now the oldest PR for Symfony.\n",
            "@danielholmes Merge now, thanks! Can you open a PR on the documentation repository?\n",
            "ping @bschussek \n",
            "@bschussek What do we do here? Can it be closed in favor of #5749? Or are we still discussing which option would be better?\n",
            "I would love to have this in 2.3 as this is now the oldest PR for Symfony.\n",
            "@danielholmes Merge now, thanks! Can you open a PR on the documentation repository?\n",
            "Can you send your questions on the mailing-list? Thanks.\n",
            "I'm closing this old PR as there is no more activity on it and because it probably does not apply anymore cleanly. I've opened a ticket about this feature request at #7845\n",
            "Can you move this ticket to symfony/symfony-docs? Thanks.\n",
            "fixed: https://github.com/symfony/symfony/commit/ea93e4cafaf048c88cce0af34c42f5e2da7b5793\n",
            "fixed: https://github.com/symfony/symfony/pull/1017\n",
            "fixed here:\n\nhttps://github.com/symfony/symfony/commit/fe9ef5c68bcdf5fe07af18efe586aa6c86f466dc\n",
            "Twig only knows about the  logical  name. The  full path  of the template only makes sense when using a filesystem loader.\n",
            "fixed here: 47b888a95\n",
            "fixed:\n\nhttps://github.com/symfony/symfony/commit/033150158096226cdbd2cb87f4d3e3419423522a\n",
            "The Doctrine bundle has changed a lot since beta1. So, it won't be easy to get a working patch for beta1. So, you need to upgrade to master or wait for beta2 which should be out early next week.\n",
            "You should test, but it will probably work.\n",
            "Are you sure you have symfony/master? Because in `ImportMappingDoctrineCommand`, I have only one `getEntityManager` and with the right signature.\n",
            "@Seldaek gave a good explanation here. I'm closing this ticket.\n",
            "@Glideh That's the behavior as of Symfony 2.1.\n",
            "This PR is too big to be reviewed correctly. Can you close it and submit smaller ones. One with all the phpdoc changes for instance should be easy enough to merge immediately (without Bernhard feedback).\n",
            "This PR is too big to be reviewed correctly. Can you close it and submit smaller ones. One with all the phpdoc changes for instance should be easy enough to merge immediately (without Bernhard feedback).\n",
            "@realmfoo: Can you make a proper pull request with your patch? thanks.\n",
            "fixed\n",
            "It doesn't seem right to output something that has to be removed by the developer via JavaScript. Duplication of code is not really a problem as you can use a Twig macro in this case.\n",
            "@schmittjoh: You can already have stale entity manager references.\n\nI've thought about moving everything to the Registry. However, you cannot avoid people keeping an instance of an entity manager around.\n",
            "I can rename the `reload` method to something else to avoid confusion. But I think that even solving 50% of the cases is valuable. Any idea on how we can fix more use cases?\n",
            "I'm closing this PR. I will open two instead:\n- one for the Doctrine registry\n- one for the reload mechanism\n",
            "IIUC, if you need to rollback the transaction, the entity manager cannot be used anymore, right? This can be a problem in unit tests for instance where you test failure. But you are right that changing the scope of the entity manager to request can fix part of the problem.\n",
            "By the way, changing the scope is not a solution as it means that you cannot use the Doctrine services without a request.\n",
            "@beberlei: You are right. As we cannot find a full-proof solution, let's just do the bare minimum (being able to actually get a new instance of an EM when needed) and let's document how to properly deal with the EM when you need to close it in a cookbook recipe.\n\nSo, the relevant PR now is https://github.com/symfony/symfony/pull/735\n\nand the  reloading  feature is here: https://github.com/fabpot/symfony/commit/014b19040c90184633fb308b47d4b2500a4d3008\n\nCan you all give feedback on the new PR?\n",
            "Closing this PR as I'm working on a more  robust  solution (which is mainly based on a cookbook recipe ;)).\n",
            "I'm fine with it\n",
            "I was working on Doctrine today, and the current way we manage annotations is definitely flawed. For instance, if you use annotations for validation on a page, then the annotations are read by the Validator component, which does not use any cache, and so, the Doctrine annotations are re-parsed, and re-saved to the cache later on. That's really a mess.\n\nHaving a global annotation reader we can rely on is a must.\n",
            "I think a better approach is to just use the  use  statements defined in the PHP file. This way, we can remove the need for the import tag. Proof of concept here:\n\nhttps://github.com/schmittjoh/annotations/pull/1\n",
            "Closing this PR as the annotations library is being merged with Doctrine\\Common.\n",
            "Can you add some unit tests?\n",
            "@stloyd: I need to review the patch first. \n",
            "@stloyd: I need to review the patch first. \n",
            "@xaav: if you don't mind, I'm reopening it as something can probably take over the PR and finish it.\n",
            "@drak: we should keep author names.\n",
            "@xaav: if you don't mind, I'm reopening it as something can probably take over the PR and finish it.\n",
            "@drak: we should keep author names.\n",
            "I have removed the possibility to pass a template to the Twig `render_widget` function instead. Read the commit for the reasoning:\n\nhttps://github.com/symfony/symfony/commit/509f3dd45424d77afddc47591e8cd149eb4a9790\n",
            "You are right that if you don't call `form_row` or `form_widget`, the widget will be rendered by `form_rest`. So, we should probably enable the possibility to change the template for these two functions. /cc @bschussek\n",
            "ok, I have a better solution. Instead of passing a template name as an argument to `form_row` or `form_widget` every time you need to customize a widget or a row template, which is really ugly and verbose, I propose to add the possibility to create blocks whose named are based on the `id` of the form field:\n\n```\n{% form_theme form _self %}\n\n{% block _post_title_widget %}\n    ...\n{% endblock %}\n\n<form>\n    {% form_widget(form) %}\n</form>\n```\n\nThe `_post_title_widget` will override the `post[title]` widget rendering (Twig will look for a `_post_title_widget` block, then a `text_widget` one and finally a `field_widget` one). That way, you can still use the `form_widget` on the global `form` object directly and still be able to customize a specific widget or row.\n\nAnd when traits lands into Twig, it will be even better as you will be able to call the _parent_ block:\n\n```\n{% use 'TwigBundle:Form:div_layout.html.twig' %}\n\n{% form_theme form _self %}\n\n{% block _post_title_widget %}\n    <div class= title_whatever >{{ block('text_widget') }}</div>\n{% endblock %}\n```\n\nWe can also probably remove the need to add `_self` as a them and automatically register it, which would be even cooler.\n\nWhat do you think?\n",
            "`form_theme` already accept several templates (just list them one after the other -- I should probably just make it an array I think).\n\nI don't know how to do the same with PHP yet, but as soon as we have something solid in Twig, we will see how to port it to PHP. And perhaps the only solution will be what you have proposed.\n",
            "The per-widget overriding is now also available for PHP templates.\n",
            "Can you rebase to master? There is a conflict and I'm not sure how to merge this. Thanks.\n",
            "I'm going to merge the form branch today.\n",
            "I think that a better fix would be to wrap the require with an if statement (require only if the UniversalClassLoader does not exist).\n",
            "Without the require, the class is not  useable  out of the box. I still think that the if statement is better:\n- it makes the class works in all cases;\n- the if statement is not a problem when used within Symfony, as the require will never occurs.\n",
            "Can we at least add a comment in the class about how to use it as standalone? @dustinwhittle: can you rebase so that we don't have these merge commits in the PR?\n",
            "I prefer the explicit passing of the context.\n",
            "+1\n",
            "You should add a `getVars()` method as an alias to `all()` so that in a template, you can access vars with `form.vars.foo`.\n",
            "@bschussek: What's your opinion?\n",
            "@bschussek: What's your opinion?\n",
            "I have removed the option altogether and always use the debug flag of the parent Kernel:\n\nhttps://github.com/symfony/symfony/commit/12dd52b00b88a25328cde4062a8ccafc0db53d4a\n",
            "What's the status of this PR? @schmittjoh @stof: any objection?\n",
            "@vicb: Can you add a note in the UPDATE file about the change (and the fact that this is BC)?\n",
            "Tests do not pass for me:\n\n```\nThere were 3 failures:\n\n1) Symfony\\Tests\\Component\\Validator\\Mapping\\Cache\\ApcCacheTest::testWrite\n->write() stores metadata in APC\nFailed asserting that <boolean:false> is an instance of class  Symfony\\Component\\Validator\\Mapping\\ClassMetadata .\n\n.../tests/Symfony/Tests/Component/Validator/Mapping/Cache/ApcCacheTest.php:39\n\n2) Symfony\\Tests\\Component\\Validator\\Mapping\\Cache\\ApcCacheTest::testHas\n->has() returns true when the is an entry\nFailed asserting that <boolean:false> is true.\n\n.../tests/Symfony/Tests/Component/Validator/Mapping/Cache/ApcCacheTest.php:59\n\n3) Symfony\\Tests\\Component\\Validator\\Mapping\\Cache\\ApcCacheTest::testRead\n->read() returns metadata\nFailed asserting that <boolean:false> is an instance of class  Symfony\\Component\\Validator\\Mapping\\ClassMetadata .\n\n.../tests/Symfony/Tests/Component/Validator/Mapping/Cache/ApcCacheTest.php:76\n```\n",
            "Do we need a standalone component or does it belong to the Config one?\n",
            "This feature will be considered for 2.1.\n\nTell me if there is anything we can do in the current code to ease this addition.\n",
            "@everzet: I have fixed some small issues here: https://github.com/symfony/symfony/compare/everzet:resource-watcher-component...PR-391\n",
            "I've just tested inotify support and there are some issues. I will have to investigate further.\n",
            "I have tested it and it works fine. I still need to work on it to be sure that the features are the same for both the plain PHP implementation and the inotify implementation (I fear that this is not the case right now).\n",
            "After working a bit more with the code, it's definitely not ready for merge. Before merging, we need to work on the following topics:\n- add more tests for the Trackers (to be sure that all implementation work in the same way) -- I have added the basic structure in the symfony/PR-291 branch.\n- probably change/tweak the current Event names based on the ones from inotify (http://en.wikipedia.org/wiki/Inotify)\n- add support for the EventDispatcher as mentioned above\n",
            "I like the idea.\n",
            "I'm not sure there is such a big impact on performance. Any benchmark?\n\nIf there is a performance hit, then we can just copy/paste the findFile() method. But I'm pretty sure that the function call to findFile() is worse than the creation of a simple variable.\n",
            "This is a legitimate problem that can lead to many WTFs (symfony1  suffers  from the same problem). I reopen this PR to resume the discussion on the most appropriate way to fix this (if possible at all).\n",
            "You have more than the favicon, thanks to Apple (icons for the i\\* devices).\n",
            "Exactly. give it a unique name, dump it, require it, and test it.\n",
            "You still need the `tearDown()` method. If not, the filesystem won't be cleaned up at the end of the tests. Or, am I missing something?\n",
            "Can the same be done for the ORM?\n",
            "not merged.\n",
            "https://github.com/symfony/symfony/pull/128 will be a better  fix  when it lands.\n",
            "I'm closing this pull request as the current implementation cannot be merged.\n",
            "Can you rebase with the master as I have merged your other pull request and I don't want to mess up with the merge. Thanks.\n",
            "@adrienbrault Indeed, that would be much nicer, see #9091\n",
            "The `SerializedParsedExpression` class is used in the service container to be able to store a pre-compiled expression as a service. See https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/DependencyInjection/SecurityExtension.php#L614\n",
            "There is no need to implement the serializable interface everywhere as that does not bring anything special. But using static variables is indeed a good idea to reduce the size of the serialized string.\n\nIn #9091 (8385023), I've cherry-picked your commit and tweaked it to keep the good parts.\n\nWhat do you think?\n",
            "@bschussek Can you add some screenshots here?\n",
            "Doing that in 2.2 is a BC break.\n",
            "@Tobion Right and as PHP does not care if you pass additional parameters, we should be fine.\n",
            "Closing in favor of #9067\n",
            "@fabriceb Your other PR as already merged in the 2.2 branch. Most of the time, I can do the switch myself.\n",
            "for 307, we should have the same request, and for a GET, the 2 calls you mention are indeed exactly the same.\n",
            "@TerjeBr Yep, everything should work fine now.\n",
            "Apparently, you've not based your PR on the right branch.\n",
            "I've fixed it in 2.2 instead. Thanks.\n",
            "@drupalista-br I'm -1 on these changes. The DomCrawler component is a way to access a document, not to modify it.\n",
            "Closing as this is already possible via count and it would break BC compatibilty, which we don't want to at this stage without a very good reason.\n",
            "@franek #9188 has been merged now and I've also merged 2.2 into the 2.3 branch, so you can rebase this PR. Thanks.\n",
            "#9192 has been merged into 2.2 and 2.3.\n",
            "#9169 must be merged first to fix the tests.\n",
            "#9169 has been merged now.\n",
            "@drak What you mean by  like before ?\n\n TraceableEventDispatcher.php line 366  -> is it the `stopSection()` from `RESPONSE` or `TERMINATE`?\n",
            "As the replacement of the default event dispatcher by the traceable one still causes problems on some apps (like Zikula), I've opened a new PR with just the refactoring part as it brings value by itself and is totally independent (see #9170).\n",
            "Re-reading the original discussion after reading this PR, I'm not sure the new names are indeed better. The `SimpleFormAuthenticatorInterface` does a good job at describing what it is useful for: authentication via a form. The new name `SimplePasswordAuthenticatorInterface` says nothing about that and you might think that basic auth is covered by it.\n\nFor `SimpleRequestAuthenticatorInterface`, the name is definitely better than `SimplePreAuthenticatorInterface`, but still, it does not convey any special meaning as an authentication is always based on the Request anyway. Perhaps this one convey the idea that authentication should be done on each request?\n",
            "closing in favor of #8984\n",
            "Closing in favor of #9199\n",
            "Apart from the 2 small comments that I've made (the removal of the __tostring() method being the most important), everything else looks good to me.\n",
            "Fair enough, merged now. Thanks.\n",
            "Closing in favor of #9150\n",
            "I'm very reluctant to add those tags retroactively and on all the code base. It's going to be a huge amount of work, just because we need 3 PRs and each time I'm going to merge a branch into the next one, I will have to manually fix the merge conflicts.\n\nDoing that selectively where it might help probably makes more sense.\n",
            "@caponica Got it now. I've made an alternative fix in #9184. The patch there is easier to understand than this one which looks a bit too magical. Can you confirm that it actually also fixes your issue? Thanks.\n",
            "I will need more time on this one as I have something equivalent (but not exactly). That's something we will be able to do in 2.5.\n",
            "Closing as I still don't see what we are trying to fix here.\n",
            "Closing for the reasons explained in my last comment.\n",
            "I'm going to take over this PR as it should be done in the 2.2 branch instead and apparently, some more stubs are needed.\n",
            "The way to add custom routing options is to actually add them under the existing `options` item.\n",
            "Domains are a way to isolate translations. Adding a way to fallback from one domain to another one looks wrong to me.\n",
            "Closing in favor of #9018\n",
            "Closing as it was done in #8451\n",
            "Oops, the good PR is #7887. Unfortunately, I've just discovered that the PR is totally broken, so I'm working on fixing it now: see #9195.\n",
            "Closing in favor of #9148\n",
            "closing in favor of #9018\n",
            "So, let's close it then.\n",
            "Closing in favor of #7818\n",
            "You can also remove `symfony/form` from the SecurityBundle `composer.json` file.\n",
            "No need to work on that, everything is broken. I'm working on it: see #9195\n",
            "@Tobion Documentation is missing\n",
            "The more I think about it, the more I find the feature confusing. The probability that a route takes the same arguments as the current one is rather thin. I know that you can remove arguments by setting them to null, but then, I think it's better to just pass the arguments you need. And if you use `subpath` in a partial that is included in more than one page (so more than one URL), the behavior is not predictable anymore.\n\nI can definitely see the use case for variation of the current route, but then, we won't need the route name as an argument.\n\nSo, I'm still -1 on adding this in core as is.\n",
            "Let me explain my feeling a bit more.\n\nLet's say that my current page is `/articles/Foo/12`.\n\nThis URL has been generated with `{{ path('article', { id: 12, category: 'Foo' }) }}`\n\nNow, on the page, I want to generate a link to the next article, 13, using `{{ subpath('article', { id: 14 }) }}` looks wrong as this is not a sub path of the current page.\n\nI do understand the usefulness of the feature but the implementation does not convey the right meaning.\n\nWhat about doing something like: {{ path('article', { id: 14 }|merge_current_path_attributes) }} instead (replace `merge_current_path_attributes` with whatever makes more sense and is shorter)?\n\nLet's take another example, a list: `{{ path('articles', { sort: 'desc', q: 'foo', page: 4 }) }}`\n\nI have several link to change the different values of the route attributes. I can do `{{ subpath('articles', { page: 5 }) }}` to go to page 5 or `{{ path('articles', { page: 5 }|merge_current_path_attributes }}`. Again, I prefer the second one as the page is not a sub path of the current page.\n\nOf course, we could also be able to remove some attributes: `{{ path('articles', { page: 5 }|merge_current_path_attributes({ q: null }) }}`.\n",
            "I think you are both right ;) Indeed I don't like the name, but @stof is right as the feature you want to add can be more easily done with a filter and would work with all generator strategies.\n"
        ],
        "issues": [
            {
                "title": "Fix data serialization when using process isolation (closes #614)",
                "body": "When setting process isolation to true, PHPUnit creates a script that is executed in another process. In the generated script, it serializes the data to be passed to the test method, and this is where there is an issue.\n\nA simple PHP script that exhibits the same issue:\n\n``` php\n$a = '\\\\\\\\foo';\nfile_put_contents(__DIR__.'/test.php', sprintf('<?php echo unserialize(\\'%s\\');', serialize($a)));\nexec('php '.__DIR__.'/test.php');\n```\n\nThe output of the script is:\n\n```\nPHP Notice:  unserialize(): Error at offset 10 of 11 bytes in /Users/fabien/work/twig/test.php on line 1\n```\n\nThe problem is that when a string contains two consecutive backslashes, it should be expanded to 4 to be correctly interpreted.\n"
            },
            {
                "title": "Serialization problem when using test isolation",
                "body": "When setting process isolation to true, PHPUnit creates a script that is executed in another process. In the generated script, it serializes the data to be passed to the test method, and this is where there is an issue.\n\nA simple PHP script that exhibits the same issue:\n\n``` php\n$a = '\\\\\\\\foo';\nfile_put_contents(__DIR__.'/test.php', sprintf('<?php echo unserialize(\\'%s\\');', serialize($a)));\nexec('php '.__DIR__.'/test.php');\n```\n\nThe output of the script is:\n\n```\nPHP Notice:  unserialize(): Error at offset 10 of 11 bytes in /Users/fabien/work/twig/test.php on line 1\n```\n\nThe problem is that when a string contains two consecutive backslashes, it should be expanded to 4 to be correctly interpreted. A simple fix might be:\n\n``` diff\ndiff --git a/PHPUnit/Framework/TestCase.php b/PHPUnit/Framework/TestCase.php\nindex e3cd2c1..3848c52 100644\n--- a/PHPUnit/Framework/TestCase.php\n+++ b/PHPUnit/Framework/TestCase.php\n@@ -720,7 +720,7 @@ public function run(PHPUnit_Framework_TestResult $result = NULL)\n                 $strict = 'FALSE';\n             }\n\n-            $data            = addcslashes(serialize($this->data),  ' );\n+            $data            = addcslashes(serialize($this->data),  '\\\\ );\n             $dependencyInput = addcslashes(\n               serialize($this->dependencyInput),  ' \n             );\n```\n"
            },
            {
                "title": "[DependencyInjection] added a simple way to replace a service by keeping a reference to the old one",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5920 |\n| License | MIT |\n| Doc PR | not yet |\n\nTODO:\n- [ ] add a cookbook entry for this new feature\n- [ ] add support in all loaders/dumpers\n- [ ] add unit tests\n- [x] see if there are use cases in Symfony that would benefit from this new feature\n- [x] find the best name for this feature\n\nWhen overriding an existing definition, the old service is lost:\n\n``` php\n$c->set('foo', 'stdClass');\n\n// this is going to remove the old definition with the new one\n// old definition is lost\n$c->set('foo', 'stdClass');\n```\n\nMost of the time, that's exactly what you want to do, but sometimes, you might want to decorate the old one instead. In this case, the old service should be kept around to be able to reference it in the new one. This PR implements this new feature:\n\n``` php\n$c->set('foo', 'stdClass');\n\n// I want to replace foo with a new one, but I need a reference of the old one (foo1.parent here)\n$c->set('foo1', 'stdClass')->addArgument('foo1.parent')->setDecoratedService('foo');\n```\n\nHere is what's going on here: the `setDecoratedService()` method tells the container that the `foo1` service should replace the `foo` service. By convention, the old `foo` service is going to be renamed `foo1.parent`, so I can inject it into my new service.\n\nYou can change the parent service name if you want to:\n\n``` php\n$c->set('foo1', 'stdClass')->addArgument('foo1.wooz')->setDecoratedService('foo', 'foo1.wooz');\n```\n\nAlso, several service can decorate a single one and everything should work fine:\n\n``` php\n$c->set('foo', 'stdClass');\n\n$c->set('foo1', 'stdClass')->addArgument('foo1.parent')->setDecoratedService('foo');\n$c->set('foo2', 'stdClass')->addArgument('foo2.parent')->setDecoratedService('foo');\n```\n\nNote that this is different from the existing `parent` definition attribute, where a service inherit/extends another one (as the two services co-exist independently).\n\nIn XML, that would work like this:\n\n``` xml\n<service id= foo1  class= stdClass  decorate= foo >\n    <argument type= service  id= foo1.parent  />\n</service>\n```\n"
            },
            {
                "title": "[HttpFoundation] added a way to override the Request class",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7461, #7453 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#3021 |\n\nThis is an alternative implementation for #7461.\n\nI've also reverted #7381 and #7390 as these changes are not needed anymore.\n\nTodo:\n- [ ] add some tests\n"
            },
            {
                "title": "New Component: Expression Language",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8850, #7352 |\n| License | MIT |\n| Doc PR | not yet |\n\nTODO:\n- [ ] write documentation\n- [x] add tests for the new component\n- [x] implement expression support for access rules in the security component\n- [x] find a better character/convention for expressions in the YAML format\n- [x] check the performance of the evaluation mode\n- [x] better error messages in the evaluation mode\n- [x] add support in the Routing\n- [x] add support in the Validator\n\nThe ExpressionLanguage component provides an engine that can compile and\nevaluate expressions.\n\nAn expression is a one-liner that returns a value (mostly, but not limited to, Booleans).\n\nIt is a strip-down version of Twig (only the expression part of it is\nimplemented.) Like Twig, the expression is lexed, parsed, and\ncompiled/evaluated. So, it is immune to external injections by design.\n\nIf we compare it to Twig, here are the main big differences:\n- only support for Twig expressions\n- no ambiguity for calls (foo.bar is only valid for properties, foo['bar'] is only valid for array calls, and foo.bar() is required for method calls)\n- no support for naming conventions in method calls (if the method is named getFoo(), you must use getFoo() and not foo())\n- no notion of a line for errors, but a cursor (we are mostly talking about one-liners here)\n- removed everything specific to the templating engine (like output escaping or filters)\n- no support for named arguments in method calls\n- only one extension point with functions (no possibility to define new operators, ...)\n- and probably even more I don't remember right now\n- there is no need for a runtime environment, the compiled PHP string is self-sufficient\n\nAn open question is whether we keep the difference betweens arrays and hashes.\n\nThe other big difference with Twig is that it can work in two modes (possible\nbecause of the restrictions described above):\n- compilation: the expression is compiled to PHP and is self-sufficient\n- evaluation: the expression is evaluated without being compiled to PHP (the node tree produced by the parser can be serialized and evaluated afterwards -- so it can be saved on disk or in a database to speed up things when needed)\n\nLet's see a simple example:\n\n``` php\n$language = new ExpressionLanguage();\n\necho $language->evaluate('1 + 1');\n// will echo 2\n\necho $language->compile('1 + 2');\n// will echo  (1 + 2) \n```\n\nThe language supports:\n- all basic math operators (with precedence rules):\n  - unary: not, !, -, +\n  - binary: or, ||, and, &&, b-or, b-xor, b-and, ==, ===, !=, !==, <, >, >=, <=, not in, in, .., +, -, ~, _, /, %, *_\n- all literals supported by Twig: strings, numbers, arrays (`[1, 2]`), hashes\n  (`{a:  b }`), Booleans, and null.\n- simple variables (`foo`), array accesses (`foo[1]`), property accesses\n  (`foo.bar`), and method calls (`foo.bar(1, 2)`).\n- the ternary operator: `true ? true : false` (and all the shortcuts\n  implemented in Twig).\n- function calls (`constant('FOO')` -- `constant` is the only built-in\n  functions).\n- and of course, any combination of the above.\n\nThe compilation is better for performances as the end result is just a plain PHP string without any runtime. For the evaluation, we need to tokenize, parse, and evaluate the nodes on the fly. This can be optimized by using a `ParsedExpression` or a `SerializedParsedExpression` instead:\n\n``` php\n$nodes = $language->parse($expr, $names);\n$expression = new SerializedParsedExpression($expr, serialize($nodes));\n\n// You can now store the expression in a DB for later reuse\n\n// a SerializedParsedExpression can be evaluated like any other expressions,\n// but under the hood, the lexer and the parser won't be used at all, so it''s much faster.\n$language->evaluate($expression);\n```\n\nThat's all folks!\n\nI can see many use cases for this new component, and we have two use cases in\nSymfony that we can implement right away.\n## Using Expressions in the Service Container\n\nThe first one is expression support in the service container (it would replace\n#8850) -- anywhere you can pass an argument in the service container, you can\n\nuse an expression:\n\n``` php\n$c->register('foo', 'Foo')->addArgument(new Expression('bar.getvalue()'));\n```\n\nYou have access to the service container via `this`:\n\n```\ncontainer.get( bar ).getvalue(container.getParameter( value ))\n```\n\nThe implementation comes with two functions that simplifies expressions\n(`service()` to get a service, and `parameter` to get a parameter value). The\nprevious example can be simplified to:\n\n```\nservice( bar ).getvalue(parameter( value ))\n```\n\nHere is how to use it in XML:\n\n``` xml\n<parameters>\n    <parameter key= value >foobar</parameter>\n</parameters>\n<services>\n    <service id= foo  class= Foo >\n        <argument type= expression >service('bar').getvalue(parameter('value'))</argument>\n    </service>\n    <service id= bar  class= Bar  />\n</services>\n```\n\nand in YAML (I chose the syntax randomly ;)):\n\n``` yaml\nparameters:\n    value: foobar\n\nservices:\n    bar:\n        class: Bar\n\n    foo:\n        class: Foo\n        arguments: [@=service( bar ).getvalue(parameter( value ))]\n```\n\nWhen using the container builder, Symfony uses the evaluator, but with the PHP\ndumper, the compiler is used, and there is no overhead as the expression\nengine is not needed at runtime. The expression above would be compiled to:\n\n``` php\n$this->get( bar )->getvalue($this->getParameter( value ))\n```\n## Using Expression for Security Access Control Rules\n\nThe second use case in Symfony is for access rules.\n\nAs we all know, the way to configure the security access control rules is confusing, which might lead to insecure applications (see http://symfony.com/blog/security-access-control-documentation-issue for more information).\n\nHere is how the new `allow_if` works:\n\n``` yaml\naccess_control:\n    - { path: ^/_internal/secure, allow_if:  '127.0.0.1' == request.getClientIp() or has_role('ROLE_ADMIN')  }\n```\n\nThis one restricts the URLs starting with `/_internal/secure` to people browsing from the localhost. Here, `request` is the current Request instance. In the expression, there is access to the following variables:\n- `request`\n- `token`\n- `user`\n\nAnd to the following functions:\n- `is_anonymous`\n- `is_authenticated`\n- `is_fully_authenticated`\n- `is_rememberme`\n- `has_role`\n\nYou can also use expressions in Twig, which works well with the `is_granted` function:\n\n``` jinja\n{% if is_granted(expression('has_role( FOO )')) %}\n   ...\n{% endif %}\n```\n## Using Expressions in the Routing\n\nOut of the box, Symfony can only match an incoming request based on some pre-determined variables (like the path info, the method, the scheme, ...). But some people want to be able to match on more complex logic, based on other information of the Request object. That's why we introduced `RequestMatcherInterface` recently (but we no default implementation in Symfony itself).\n\nThe first change I've made (not related to expression support) is implement this interface for the default `UrlMatcher`. It was simple enough.\n\nThen, I've added a new `condition` configuration for Route objects, which allow you to add any valid expression. An expression has access to the `request` and to the routing `context`.\n\nHere is how one would configure it in a YAML file:\n\n``` yaml\nhello:\n    path: /hello/{name}\n    condition:  context.getMethod() in ['GET', 'HEAD'] and request.headers.get('User-Agent') =~ '/firefox/i' \n```\n\nWhy do I keep the context as all the data are also available in the request? Because you can also use the condition without using the RequestMatcherInterface, in which case, you don't have access to the request. So, the previous example is equivalent to:\n\n``` yaml\nhello:\n    path: /hello/{name}\n    condition:  request.getMethod() in ['GET', 'HEAD'] and request.headers.get('User-Agent') =~ '/firefox/i' \n```\n\nWhen using the PHP dumper, there is no overhead as the condition is compiled. Here is how it looks like:\n\n``` php\n// hello\nif (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches) && (in_array($context->getMethod(), array(0 =>  GET , 1 =>  HEAD )) && preg_match( /firefox/i , $request->headers->get( User-Agent )))) {\n    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hello')), array ());\n}\n```\n\nBe warned that conditions are not taken into account when generating a URL.\n## Using Expressions in the Validator\n\nThere is a new Expression constraint that you can put on a class. The expression is then evaluated for validation:\n\n``` php\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @Assert\\Condition(condition= this.getFoo() == 'fo' , message= Not good! )\n */\nclass Obj\n{\n    public function getFoo()\n    {\n        return 'foo';\n    }\n}\n```\n\nIn the expression, you get access to the current object via the `this` variable.\n## Dynamic annotations\n\nThe expression language component is also very useful in annotations. the SensoLabs FrameworkExtraBundle leverages this possibility to implement HTTP validation caching in the `@Cache` annotation and to add a new `@Security` annotation (see sensiolabs/SensioFrameworkExtraBundle#238.)\n"
            },
            {
                "title": "Move the ACL part of the Security Component outside of Symfony",
                "body": "I've been thinking about this one for a long time now.\n\nThe ACL sub-system has been contributed a long time ago but since then it has been abandoned as nobody really maintain it. Personally, I don't want to maintain that part as I don't use it and frankly I don't any valid use cases for it.\n\nSo instead of keeping it in Symfony, I propose to create a new repo for it, where a new team can take care of its future (let's say symfony/acl for instance).\n\nping @schmittjoh \n"
            },
            {
                "title": "make RequestContext optional in generator and matcher",
                "body": "from #5895:\r\n\r\n \r\nAfter discussion with @crell, we agreed that the RequestContext is a burden in reusing the routing component. That's because it only duplicates information of the Request and is not really useful without it anyway. Since we probably cannot remove it fully as it would be a big BC break, my idea is to make it optional. So the symfony generator and matcher both work with a RequestContext and a Request. I removed the RequestContextAwareInterface from the interfaces so a custom router does not need a RequestContext anymore. The default symfony generator/matcher still implements RequestContextAwareInterface but can also work with a Request. So UrlMatcher::match(Request) is now also possible. And the generator can use UrlGenerator::setRequest() instead of setContext().\r\n\r\nI think it makes the routing more useable in symfony and more reusable for other libraries.\r\nAnd it will probably make it easier to integrate content negotiation as matching a request directly with all it's metadata (like Accept header) is now possible.\r\n\r\nOne more point: symfony allowed to use matching a Request with #4363. But it's not integrated in symfony as symfonys router does not use it at all. And the important interfaces like the RouterInterface required the RequestContext anyway. So there was no way to use Request matching without RequestContext. This PR replaces the other extension point.\r\n\r\nThe only bc break is in terms of interfaces. People should be aware that RequestContextAwareInterface is not part of UrlGeneratorInterface/UrlMatcherInterface/RouterInterface anymore. And the RequestMatcherInterface was changed.\r\n \r\n"
            },
            {
                "title": "[Intl] Add StubResourceBundle to the Intl component",
                "body": "see #4081 for an old implementation\n"
            },
            {
                "title": "CssSelector should be configured properly when used for HTML or XML",
                "body": "... but that's not really possible when using it from BrowserKit as the Crawler is created directly.\n\nFrom #8286:\n\n```\nIn functional test, since the crawler is instanciated by the de browser kit (which \nknow the content-type), Can we imagine the browser kit call for us\ndisableHtmlExtension or enableHtmlExtension\n```\n"
            },
            {
                "title": "Support concurrent sessions",
                "body": "see #786 for an old implementation.\n\nThe biggest issue being to determine where it belongs to as there is a need to persist information to make the feature work. More details in the old PR.\n"
            },
            {
                "title": "Translation:update and Generate:doctrine:entities are buggy when a bundle uses inheritance",
                "body": "see #7208 for more information\n"
            },
            {
                "title": "More fine-grained configuration for some core services",
                "body": "For some services that accept an array of other objects (like loaders for the translator, or loaders for the service container, or strategy for the HTTP content renderer), Symfony automatically registers all available build-in  objects/services  and there is no simple way to restrict them to just a few.\n\nWe might want to make that configurable (to improve performance for instance, or to explicitly remove some features).\n"
            },
            {
                "title": "Finder slowness",
                "body": "The Finder performance can be improved: see https://github.com/symfony/symfony/pull/4061\n"
            },
            {
                "title": "Consider adding the trailing separator as optional for optional values",
                "body": "When defining a route like this:\n\n```\n/foo/{param}\n```\n\nwith a default value for param, you can omit the param and Symfony will match a URL like `/foo`. But it won't match `/foo/`.\n\nWould it make sense to allow it? What are the consequences on BC?\n\nOr do we need to introduce a special syntax for optional parameters:\n\n```\n/foo/{?param}\n\n/foo{/?param}\n```\n\nsee fabpot/Silex#485\n"
            },
            {
                "title": "fixed bytes conversion when used on 32-bits systems",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes (on 32-bits systems) |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8977 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis PR reverts #7413 and #742, which does not work well when a number is big (3Go for instance) and the machine is 32bits.\n"
            },
            {
                "title": "[HttpFoundation] tried to keep the original Request URI as much as possible to avoid different behavior between ::createFromGlobals() and ::create()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8507 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[TwigBridge] fixed form rendering when used in a template with dynamic inheritance",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5284 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Fixed registration of private event listeners/subscribers",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6541 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen registering a private event subscriber/listener, the listener was just ignored.\n\nThis PR does two things to fix the problem:\n- the event listener pass is done earlier to get access to the private services\n- when a private service is identified, a proper exception is thrown\n"
            },
            {
                "title": "[DependencyInjection] added tags validation when compiling a container",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes & no |\n| New feature? | yes & no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7543 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen using YAML or XML, the tags validadity are checked during loading, but when using PHP, that's not possible.\nSo, the added step in the compilation phase does that nicely.\n"
            },
            {
                "title": "[DependencyInjection] fixed a non-detected circular reference in PhpDumper (closes #8425)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8425 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Debug] removed usage of a deprecated class (closes #8992)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8992 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpFoundation] fixed format duplication in Request",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8976 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "fixed regression in the way the request format is handled",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8917 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fix HInclude src (closes #8951)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8951 |\n| License | MIT |\n| Doc PR | n/a |\n\nfixes a regression introduced in #8879\n"
            },
            {
                "title": "Fixed some random leaks",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixes some memory leaks",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | kinda |\n| New feature? | no |\n| BC breaks? | kinda as the Bundle `$reflected` property was removed |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Security] fixed a leak in the ContextListener",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nTrying to fix leaks when using the same Kernel to handle several requests in a row without resetting the Container or shutting down the Kernel.\n"
            },
            {
                "title": "Synchronized Service alternative, backwards compatible",
                "body": "This is a rebased version #7707.\n\n| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7707 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2956 |\n\nTodo/Questions\n- [x] do we deprecate the synchronize feature (and removed it in 3.0)?\n- [x] deal with BC for listeners\n- [x] rename RequestContext as we already have a class with the same name in the Routing component?\n- [x] move RequestStack and RequestContext to HttpFoundation?\n- [x] update documentation\n\nPrototype for introducing a `RequestContext` in HttpKernel.\n\nThis PR keeps the synchronized services feature, however introduces a `RequestContext` object additionally, that allows to avoid using synchronized service when injecting `request_context` instead of `request` into a service. The FrameworkBundle is modified such that it does not depend on synchronized services anymore. Users however can still depend on `request`, activating the synchronized services feature.\n\nFeatures:\n- Introduced `REQUEST_FINSHED` (name is up for grabs) event to handle global state and environment cleanup that should not be done in `RESPONSE`. Called in both exception or success case correctly\n- Changed listeners that were synchronized before to using `onKernelRequestFinished` and `RequestContext` to reset to the parent request (RouterListener + LocaleListener).\n- Changed `FragmentHandler` to use the RequestContext. Added some more tests for this class.\n- `RequestStack` is injected into the `HttpKernel` to handle the request finished event and push/pop the stack with requests.\n\nTodos:\n- RequestContext name clashes with Routing components RequestContext. Keep or make unique?\n- Name for Kernel Request Finished Event could be improved.\n"
            },
            {
                "title": "[BrowserKit] fixed the redirect behavior according to the RFC",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixed route parameters storage in the Request data collector (closes #8867)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8867 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixed route parameters storage in the Request data collector (closes #8867)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8867 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Made fragment URLs relative instead of absolute by default",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8458 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes a regression introduced with the new fragment system where fragment URLs were generated as absolute URLs. As per the ESI spec, there is no need to generate an absolute URL and this can even be problematic when dealing with internal sub-requests in a more  complex  hosting environment.\n"
            },
            {
                "title": "fixes fabpots comment at yaml pr#6",
                "body": ""
            },
            {
                "title": "duplicated the DebugClassLoader in the Debug component",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis is a follow-up for #8553.\n"
            },
            {
                "title": "[FrameworkBundle] added support for double-quoted strings in the extractor (closes #8797)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8797 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[WIP] [DependencyInjection] added support for expressions in the service container",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7352 |\n| License | MIT |\n| Doc PR | not yet |\n\nThis PR introduces a way to inject expression in the definition of a service.\n\nHere is a small usage example:\n\n``` php\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Expression;\n\nclass Foo\n{\n    private $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    public function getBarValue()\n    {\n        return $this->value;\n    }\n}\n\nclass Bar\n{\n    public function getValue()\n    {\n        return 'bar';\n    }\n}\n\n$c = new ContainerBuilder();\n$c->register('bar', 'Bar');\n$c->register('foo', 'Foo')->addArgument(new Expression('bar', 'value'));\n\necho $c->get('foo')->getBarValue(). \\n ;\n```\n\nHere is the XML version:\n\n``` xml\n    <services>\n        <service id= foo  class= Foo >\n            <argument type= expression  id= bar  path= value  />\n        </service>\n        <service id= bar  class= Bar  />\n    </services>\n```\n\nAnd the YAML version:\n\n``` yml\nservices:\n    bar:\n        class: Bar\n\n    foo:\n        class: Foo\n        arguments: [@bar::value]\n```\n\nThe `Expression` constructor takes a service id and a property path (as defined by the Symfony PropertyAccess component). Using the Symfony PropertyAccess component gives you a lot of flexibility in the way you get data from your objects.\n\nExpressions are not limited to service arguments, you can use them everywhere (like in a method call, a configurator, ...).\n\nTodo\n- [ ] update documentation\n- [ ] update all loaders and dumpers\n- [ ] add tests\n\nOpen questions:\n- Do we allow some cusomtization of the property access object (like support for __call?)\n"
            },
            {
                "title": "[Validator] fixed Boolean handling in XML constraint mappings",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5603 |\n| License | MIT |\n| Doc PR | n/a |\n\nping @bschussek\n"
            },
            {
                "title": "fixed request format when forwarding a request",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6932 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen calling forward() in a controller, the format is not the same as for the master request.\n"
            },
            {
                "title": "fixed locale management in sub-requests",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6932, #5532, #8604 |\n| License | MIT |\n| Doc PR | n/a |\n\nSame fix as #8821 but for `_locale`, and a rebase of #8604.\n"
            },
            {
                "title": "Sets _format attribute only if it wasn't set previously by the user",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8787, #8791 |\n| License | MIT |\n| Doc PR |  |\n"
            },
            {
                "title": "[HttpFoundation] added constants for HTTP status code in Response",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis adds constants for HTTP status code in Response. That's give the possibility to use constants instead of numbers in code.\n\nThese constants comes from FriendsOfSymfony/FOSRest but I think it is much better to keep them in Response as both the status texts and the constants should be synchronized.\n\nping @lsmith77\n"
            },
            {
                "title": "[HttpKernel] Fix request _format duplication for HttpKernel's ExceptionListener",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8777, #8778 |\n| License | MIT |\n\nThis is a better fix for #8777.\n"
            },
            {
                "title": "removed deps checks in unit tests",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nAs Composer is now widely used in the PHP world, having to run composer install before running the test suite is expected. This also has the nice benefit of removing a bunch of code, making things easier to maintain (there is only one place to declare a dev dependency), and probably more.\n\nsee fabpot/Silex#626 where we did the same a while ago for Silex.\n"
            },
            {
                "title": "[HttpKernel] fixed event listeners order when wrapped within a TraceableEventDispatcher",
                "body": "This is an attempt to fix #8426 without any BC breaks.\n"
            },
            {
                "title": "form_enctype() fix (closes #8660)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8660 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "changed the ESI fragment renderer to be always registered",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThis is an alternative implementation for #8427\n"
            },
            {
                "title": "[TwigBundle] Created stopwatch tag for profiling templates",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7953 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2630 |\n\nThis PR is the continuation of #7953\n\nThis PR adds a new tag to Twig which you can use to time parts of a template and see it in the timing tab of the profiler.\n\nUsage:\n\n``` jinja\n{% stopwatch foo %}\n... some things that gets timed\n{% endstopwatch %}\n```\n"
            },
            {
                "title": "Add the referer information that could help you findout where's the link comes from",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n#8218 rebased on master and slightly tweaked.\n"
            },
            {
                "title": "[TwigBundle] made the filesystem loader compatible with Twig 2.0",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes (for Twig 2.x) |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nWithout adding the exists() method, the code happens to work by chance,\njust because the current implementation of Twig exits() method calls\nfindTemplate().\n\nBut we know that it won't be the case anymore as of Twig 2.0.\n"
            },
            {
                "title": "replaced deprecated Twig features",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nAs Symfony depends on Twig 1.11+, removing the usage of deprecated features will allow Symfony 2.2+ to work with Twig 2.0.\n"
            },
            {
                "title": "moved some fixed dep versions from 2.2.* to ~2.2",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8613 |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "Added a missing dev dep for Httpkernel",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8613 |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[FrameworkBundle] fixed regression where the command might have the wrong container if the application is reused several times",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] fixed regression where the command might have the wrong container if the application is reused several times",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes a regression introduced in #8242. Before this PR, the commands were always getting the current container registered in the kernel. But as the commands are now registered only once, if the container changes, the commands were not aware of this change. That happens quite frequently in functional tests where the Kernel is booted and shutdown several times in the same process.\n"
            },
            {
                "title": "[Validator] Fixed StaticMethodLoader does not try to invoke methods of abstract classes anymore",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8589 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed regression where setting a service to null did not trigger a re-creation of the service when getting it (closes #8392)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8392 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "removed dead code and fixed CS",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Debug] Developer friendly Class Not Found and Undefined Function errors",
                "body": "This is a followup of #8156\n\n| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8156 |\n| License | MIT |\n| Doc PR | n/a |\n\nHere is the original description from #8156:\n\nPer a discussion with @weaverryan and others, I took a crack at enhancing the exception display for class not found errors and undefined function errors. It is not the cleanest solution but this is a work in progress to see whether or not following this path makes sense.\n# Class Names\n## Class Not Found: Unknown Class (Global Namespace)\n\n``` php\n<?php\nnew WhizBangFactory();\n```\n\n> Attempted to load class 'WhizBangFactory' from the global namespace in foo.php line 12. Did you forget a use statement for this class?\n## Class Not Found: Unknown Class (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar;\nnew WhizBangFactory();\n```\n\n> Attempted to load class 'WhizBangFactory' from namespace 'Foo\\Bar' in foo.php line 12. Do you need to 'use' it from another namespace?\n## Class Not Found: Well Known Class (Global Namespace)\n\n``` php\n<?php\nnew Request();\n```\n\n> Attempted to load class 'Request' from the global namespace in foo.php line 12. Did you forget a use statement for this class? Perhaps you need to add 'use Symfony\\Component\\HttpFoundation\\Request' at the top of this file?\n## Class Not Found: Well Known Class (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar;\nnew Request();\n```\n\n> Attempted to load class 'Request' from namespace 'Foo\\Bar' in foo.php line 12. Do you need to 'use' it from another namespace? Perhaps you need to add 'use Symfony\\Component\\HttpFoundation\\Request' at the top of this file?\n# Functions\n## Undefined Function (Global Namespace)\n\n``` php\n<?php\n// example.php:\n// namespace Acme\\Example;\n// function test_namespaced_function()\n// {\n// }\ninclude  example.php ;\n\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from the global namespace in foo.php line 12. Did you mean to call: '\\acme\\example\\test_namespaced_function'?\n## Undefined Function (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar\\Baz;\n\n// example.php:\n// namespace Acme\\Example;\n// function test_namespaced_function()\n// {\n// }\ninclude  example.php ;\n\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from namespace 'Foo\\Bar\\Baz' in foo.php line 12. Did you mean to call: '\\acme\\example\\test_namespaced_function'?\n## Undefined Function: Unknown Function (Global Namespace)\n\n``` php\n<?php\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from the global namespace in foo.php line 12.\n## Undefined Function: Unknown Function (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar\\Baz;\n\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from namespace 'Foo\\Bar\\Baz' in foo.php line 12.\n"
            },
            {
                "title": "[Twig] fixed TwigEngine::exists() method when a template contains a syntax error (closes #8546)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8546 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "removed unused code",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Render objects fix",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7124 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] changed the fragment handler to explicitely disallow non-scalar in generated URIs (refs #8263)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8263 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen using the `render()` function in Twig with a `controller()` reference, the attributes can contain non-scalar. That's fine for the inline strategy, but it cannot work for other strategies as it then involves a proper HTTP request.\n\nSo, this PR properly throw an exception in such situations to avoid difficult to find bugs.\n"
            },
            {
                "title": "[HttpFoundation] fixed issue with session_regenerate_id (closes #7380)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7380 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Security] fixed usage of the salt for the bcrypt encoder (refs #8210)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8210 |\n| License | MIT |\n| Doc PR | n/a |\n\nsee #8210\n"
            },
            {
                "title": "changed all version deps to accept all upcoming Symfony versions",
                "body": "Everything is in the title.\n"
            },
            {
                "title": "Console fix",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | yes (possibly) |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | symfony/symfony-standard#526 |\n| License | MIT |\n| Doc PR | n/a |\n\nEverything is explained in the commits.\n"
            },
            {
                "title": "[Security] fixed wrong merge (refs #4776)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes a bad conflict resolution when #4776 was merged.\n"
            },
            {
                "title": "added a missing check for the provider key",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "made some optimization when parsing YAML files",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis change makes a small speed optimization when loading a YAML file, but more important, it allows to use local stream wrappers instead of regular files on the filesystem.\n"
            },
            {
                "title": "[BrowserKit] fixed BC break done recently",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis PR tries to avoid a BC break that was introduced recently in the management of cookies (see #7738).\n\nsee fabpot/Silex#684\n"
            },
            {
                "title": "Profiler activation",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7064, #7071 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2565 |\n\nAs stated in #7071, there is no way to disable the profiler completely. Even when the `enabled` flag is set to `false`, the profiler is still registered but the data collectors are not activated.\n\nNow, when `enabled` is `false`, the profiler is disabled. To get the old `false` behavior, you now need to set `enabled` to `true` and set the new `collect` flag to `false`.\n\nTodo:\n- [x] update docs\n- [x] update Symfony SE -- not needed\n"
            },
            {
                "title": "[Security] Outsource all the BCrypt heavy lifting to a library",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThe [BCrypt bundle](https://github.com/elnur/ElnurBlowfishPasswordEncoderBundle) is already using the library.\n\nThis is a working implementation of #7247\n"
            },
            {
                "title": "[2.3] [TwigBridge] save auto-escaping of generated URLs when possible",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | [no] |\n| New feature? | [yes: optimization] |\n| BC breaks? | [no] |\n| Deprecations? | [no] |\n| Tests pass? | [yes] |\n| Fixed tickets | #7088 |\n| License | MIT |\n| Doc PR | [-] |\n\nDetermines at compile time whether the generated URL will be safe and thus\nsaving the unneeded automatic escaping for performance reasons.\n\nThe URL generation process percent encodes non-alphanumeric characters. So there is no risk\nthat malicious/invalid characters are part of the URL. The only character within an URL that\nmust be escaped in html is the ampersand ( & ) which separates query params. So we cannot mark\nthe URL generation as always safe, but only when we are sure there won't be multiple query\nparams. This is the case when there are none or only one constant parameter given.\nE.g. we know beforehand this will be safe:\n- path('route')\n- path('route', {'param': 'value'})\n\nBut the following may not:\n- path('route', var)\n- path('route', {'param': ['val1', 'val2'] }) // a sub-array\n- path('route', {'param1': 'value1', 'param2': 'value2'})\n\nIf param1 and param2 reference placeholder in the route, it would still be safe. But we don't know.\n"
            },
            {
                "title": "[FrameworkBundle] make RegisterKernelListenersPass reusable",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6643 |\n| License | MIT |\n| Doc PR | n/a |\n\nsee #6643 \n"
            },
            {
                "title": "[HttpFoundation] added a note about JSON responses as arrays (refs #6970)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6970 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2555 |\n"
            },
            {
                "title": "Add a way to create a short controller name (a:b:c) from a fully qualify one (controller::action)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5865 |\n| License | MIT |\n| Doc PR | n/a |\n\nWorking implementation of #5865\n"
            },
            {
                "title": "Browserkit redirections",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7811, #7731 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "fixed Client implementation to return the right Response (closes #4475)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #4475 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2549 |\n\nThis PR addresses #4475 by trying to minimize the BC break impact.\n"
            },
            {
                "title": "[WIP][HttpFoundation] File mime types and extensions",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5039, #6963, #5258, #7415, #5615 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis pull request addresses most of the issues regarding mime types and extension on File instances.\n\nI've also created an issue on the docs to add more documentation about how things work (see symfony/symfony-docs#2542).\n"
            },
            {
                "title": "[HttpKernel] added logging when an inline fragment cannot be rendered and ignore_errors is on",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7339, #1991, #6400 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis is a rebased and tested version of #7339. This is probably not the most beautiful code, but it gets the job done and does the exact same thing as any other exception handling.\n"
            },
            {
                "title": "Add This field is missing RU translation",
                "body": "This PR was submitted on the symfony/Validator read-only repository and moved automatically to the main Symfony repository (closes symfony/Validator#4).\n\n<source>This field is missing.</source>\nHave no translation. Not exists in EN version too. Just\u00a0forgot?\u00a0\nSymfony\\Component\\Validator\\Constraints\\Collection()\npublic $missingFieldsMessage = 'This field is missing.';\n"
            },
            {
                "title": "Filesystem::touch() not working with different owners (utime/atime issue)",
                "body": "This PR was submitted on the symfony/Filesystem read-only repository and moved automatically to the main Symfony repository (closes symfony/Filesystem#3).\n\nCase: I have 2 users, www-data and myself. I have a command script that makes a lock file in /var/lock/.../ something. This command is called from a post request by FOS and ran in the background.  Whever one of the 2 methods (web/cli manually) is used, the other user won't have permissions to use the Filesystem::touch(). The reason this won't work is the second parameter.\n\nWhat touch() does:\n$touch param: The touch time. If time is not supplied, the current system time is used.\n$atime param: If present, the access time of the given filename is set to the value of atime. Otherwise, it is set to the value passed to the time parameter. If neither are present, the current system time is used.\n\nSo the current code is basically copying this. However, if the second parameter is null it is still present and will cause the same problem. Note that all files and folders related are set to 0777 and have the owner of www-data. I'm accessing them under my own account here:\n\nInteractive shell\n\nphp > var_dump(touch('/var/lock/tripolis/ontw/dev/2140191804.lock', null));\nPHP Warning:  touch(): Utime failed: Operation not permitted in php shell code on line 1\n\nWarning: touch(): Utime failed: Operation not permitted in php shell code on line 1\nbool(false)\nphp > var_dump(touch('/var/lock/tripolis/ontw/dev/2140191804.lock'));\nbool(true)\n\nIf I were to pass it without second parameter, let it be time() or null (Filesystem uses time() by default if not present), it DOES work. However, Filesystem::touch() ALWAYS gives a parameter to touch. This parameter is exactly the same value as what the function itself would do in php. Let it be that in my case there is an issue with the atime. I'm not exactly sure how it works but it's not tracked or usable in my case. Because parameter 2 exists, parameter 3 is set. Parameter 3 is not allowed and therefore causes Filesystem::touch() to throw an exception.\n"
            },
            {
                "title": "Method each return an instance of Crawler instead DOMElement",
                "body": "This PR was submitted on the symfony/DomCrawler read-only repository and moved automatically to the main Symfony repository (closes symfony/DomCrawler#9).\n\nMethod each return an instance of Crawler instead DOMElement\n"
            },
            {
                "title": "Added html method into Crawler class",
                "body": "This PR was submitted on the symfony/DomCrawler read-only repository and moved automatically to the main Symfony repository (closes symfony/DomCrawler#11).\n\nA pull request is waiting for aproval, but is not tested\n- This method allow to get html inside desired element\n- New method is tested\n"
            },
            {
                "title": "[HttpKernel] allowed any callable to be returned by ControllerResolver::createController",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[BrowserKit] fixed detection of secure cookies received over https",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7666, #7738 |\n| License | MIT |\n| Doc PR | N/A |\n\nAs reported in symfony/symfony#7666, BrowserKit's cookie handling only recognises a secure cookie if the cookie option is set and the cookie was set over an https request. The client was not passing the url into the cookiejar update code, causing Cookie::isSecure() to always return false for every cookie.\n\nI have corrected this behaviour and added an additional unit test to prove the bug and fix.\n"
            },
            {
                "title": "[HttpFoundation][FrameworkBundle] Add CIDR notation support in trusted proxy list",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7312, #7262 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2287 |\n\nShould be rebased once #7734 is merged.\n"
            },
            {
                "title": "Refactored tests of Request::getTrustedProxies()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis PR reorganizes the tests for the request trusted proxies as they were unreadable. In the process, I've also removed obsolete stuff and changed the order returned by `Request::getClientIps()` (not a BC break as this method was added in 2.3 -- see #7612).\n"
            },
            {
                "title": "[DependencyInjection] fixed management of scoped services with an invalid behavior set to null",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7636 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed wrong exception class",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Console dispatcher",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #3889, #6124 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2352 |\n\nrefs #1884, #1929\n\nThis is an alternative implementation for adding events to console applications.\n\nThis implementation has the following features:\n- Available for anyone using the Console component and it is not tied to\n  FrameworkBundle (this is important as one thing we are trying to solve is\n  email sending from a command, and frameworks like Silex using the Console\n  component needs a solution too);\n- Non-intrusive as the current code has not been changed (except for renaming\n  an internal variable that was wrongly named -- so that's not strictly needed\n  for this PR)\n- The new DispatchableApplication class also works without a dispatcher,\n  falling back to the regular behavior. That makes easy to create applications\n  that can benefit from a dispatcher when available, but can still work\n  otherwise.\n- Besides the _before_ and _after_ events, there is also an _exception_ event\n  that is dispatched whenever an exception is thrown.\n- Each event is quite powerful and can manipulate the input, the output, but\n  also the command to be executed.\n"
            },
            {
                "title": "[Console] added a way to normalize a command display when using the tester",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "moved the request scope creation to the ContainerAwareHttpKernel class",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2343 |\n\nWhile updating the scope documentation, I realized that the request scope was created in the FrameworkBundle while the HttpKernel that manages it was in the HttpKernel component. So, this PR makes things more consistent.\n"
            },
            {
                "title": "[DependencyInjection] fixed wrong invalid behavior flag",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Debug] added the component (closes #6828, closes #6834, closes #7330)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | yes |\n| Tests pass? | yes |\n| Fixed tickets | #6828, #6834, #7330 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2479 |\n\nYou can use the individual tools, or register them all:\n\n``` php\nuse Symfony\\Component\\Debug\\Debug;\n\nDebug::enable();\n```\n\nChanges in Symfony SE: symfony/symfony-standard#523\n"
            },
            {
                "title": "[HttpKernel] made the Kernel class more flexible (closes #7396)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7396 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[ClassLoader] fixed heredocs handling",
                "body": "The end of an hereodc must have a newline to avoid PHP syntax errors.\n"
            },
            {
                "title": "[ClassLoader] fixed handling of heredocs",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[FrameworkBundle] fixed regression for the translator fallback configuration (refs #7100, closes #7315)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7315 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed id case when setting a service (also slightly enhanced an error message)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Fix missing argument",
                "body": "This PR was submitted on the symfony/Serializer read-only repository and moved automatically to the main Symfony repository (closes symfony/Serializer#4).\n\nFix  Warning: Missing argument 3  for XmlEncoder::buildXml() called several times in XmlEncoder::selectNodeType()\n"
            },
            {
                "title": "[WebProfilerBundle] removed the display of some information when their value is n/a",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7002 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[WIP] Removed deprecated stuff",
                "body": ""
            },
            {
                "title": "fixed HInclude renderer (closes #7113)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7113 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[2.3] [Translator] fixed inconsistency in Translator",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixed locale management when exiting sub-requests",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7063 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fix is temporary as #7007 will fix it properly in Symfony 2.3.\n"
            },
            {
                "title": "Fixed content type when passed as a server value",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7025 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "added a proper setter for the templating servicein HInclude",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] added error display suppression when using the ErrorHandler (if not, errors are displayed twice, refs #6254)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[WebProfilerBundle] removed dependency on FrameworkBundle (closes #6949)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6949 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Make HttpCache behaves more like a real reverse proxy",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6982, #7000 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Update Composer deps",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nSince we adopted Composer in Symfony, we limit the Symfony Components deps for any Symfony Component to the current version of Symfony. That's very limited as for instance, any version of Yaml can be used as a dependency for any other Symfony Component. So, this PR changes the version constraints for dependencies to the largest range possible.\n\nThe idea is also to open the range even more when new versions of Symfony comes.\n"
            },
            {
                "title": "[2.3] [WIP] Synchronized services...",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5300, #6756 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2343 |\n\nTodo:\n- [x] update documentation\n- [x] find a better name than contagious (synchronized)?\n\nrefs #6932, refs #5012\n\nThis PR is a proof of concept that tries to find a solution for some problems we have with scopes and services depending on scoped services (mostly the request service in Symfony).\n\nBasically, whenever you want to inject the Request into a service, you have two possibilities:\n- put your own service into the request scope (a new service will be created whenever a sub-request is run, and the service is not available outside the request scope);\n- set the request service reference as non-strict (your service is always available but the request you have depends on when the service is created the first time).\n\nThis PR addresses this issue by allowing to use the second option but you service still always has the right Request service (see below for a longer explanation on how it works).\n\nThere is another issue that this PR fixes: edge cases and weird behaviors. There are several bug reports about some weird behaviors, and most of the time, this is related to the sub-requests. That's because the Request is injected into several Symfony objects without being updated correctly when leaving the request scope. Let me explain that: when a listener for instance needs the Request object, it can listen to the `kernel.request` event and store the request somewhere. So, whenever you enter a sub-request, the listener will get the new one. But when the sub-request ends, the listener has no way to know that it needs to reset the request to the master one. In practice, that's not really an issue, but let me show you an example of this issue in practice:\n- You have a controller that is called with the English locale;\n- The controller (probably via a template) renders a sub-request that uses the French locale;\n-  After the rendering, and from the controller, you try to generate a URL. Which locale the router will use? Yes, the French locale, which is wrong.\n\nTo fix these issues, this PR introduces a new notion in the DIC: synchronized services. When a service is marked as synchronized, all method calls involving this service will be called each time this service is set. When in a scope, methods are also called to restore the previous version of the service when the scope leaves.\n\nIf you have a look at the router or the locale listener, you will see that there is now a `setRequest` method that will called whenever the request service changes (because the `Container::set()` method is called or because the service is changed by a scope change).\n"
            },
            {
                "title": "[2.3] [WebProfiler] added the possibility to override the application name/version in the WDT",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[2.3] [WebProfilerBundle] removed the display of some information when their value is n/a",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "replaced usage of the deprecated pattern routing key (replaced with path)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixed the hinclude fragment renderer when the template is empty",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpFoundation] fixed Request::create() method",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen creating a Request with Request::create(), some information can\ncome from the URI and the server variable. Until now, it was not clear\nwhich information had precedence over the other and as a matter of fact,\nthis method was not consistent.\n\nNow, information contained in the URI always take precedence over\ninformation coming from the server array. That makes sense as the server\narray is often copied from another existing Request object.\n"
            },
            {
                "title": "[DependencyInjection] enhanced some error messages",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpFoundation] fixed the creation of sub-requests under some circumstancies (closes #6923, closes #6936)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6923, #6936 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes the creation of a sub-request when the master request Request URI\nis determined with specific server information.\n"
            },
            {
                "title": "[Security] fixed session creation when none is needed (closes #6917)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6917 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed a circular call (closes #6864)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6864 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel]\u00a0fixed regression when rendering an inline controller and passing some objects (closes #6822)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6822 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "renamed some classes and Twig functions to more descriptive names (refs #6871)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6871 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2205 |\n\nTodo:\n- [x] update the docs\n\nIn #6871, @kriswallsmith wondered if the names used for the ESI/HIncludes sub-framework were meaningful enough.\n\nI agree that this was not the case and I propose to remove the notion of **sub-requests** in favor of **fragments**. This sub-framework is a way to render fragments of a resource (the fact that it's done via another request is an implementation detail).\n\nWith that decision, all names can be renamed and are probably more meaningful. Some examples:\n- `HttpContentRenderer` -> `FragmentHandler`\n- `RouterProxyListener` -> `FragmentListener`\n- `router_proxy` -> `fragments` (configuration entry)\n- `DefaultRenderingStrategy` -> `InlineFragmentRenderer`\n"
            },
            {
                "title": "[Finder] fixed regression in the Finder component (it was possible to use it without using exec before, closes #6357)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes (fixed a BC break) |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6357 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Console] added some missing information in the phpdoc (closes #6464)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6464 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "removed deprecated messages coming for internal calls",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6407 |\n| License | MIT |\n| Doc PR | n/a |\n\nIt's probably not the cleanest code possible, but I don't see any other way to keep the type for BC and avoid the deprecated message when called internally.\n\nThat should fix the deprecated messages thrown by the Form and Validator components.\n"
            },
            {
                "title": "updated ValidatorExtension to avoid using a deprecated method",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "fixed a circular reference (closes #6730)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6730 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Content renderer simplification",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2179 |\n\nTodo:\n- [x] submit a PR for documentation update\n\nThe first commit makes the Request required when dealing with rendering strategies (see the commit why this was a bad idea to make it optional in the first place).\n\nThe second commit removes the need for a proxy route and replaces it with the same system we have in the security component.\n\nThe third commit makes the proxy path configurable (default to `/_proxy`).\n\nThis PR has been triggered by a discussion on #6791.\n"
            },
            {
                "title": "[DependencyInjection] fixed the creation of synthetic services in ContainerBuilder",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Hostname rename to host",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no (does not exist in 2.1) |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6775 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2165 |\n\nsee #6775\n"
            },
            {
                "title": "tweaked the deprecated error handler to actually display the deprecation message",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nI've also removed uninterested information (like the trigger_error stack\nframe).\n"
            },
            {
                "title": "[TwigBridge] fixed format_file to include the line number even if the link text is passed",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThat fixes the logs in the profiler where lines were not displayed for deprecated calls.\n"
            },
            {
                "title": "[HttpKernel] refactored the HTTP content renderer to make it easier to extend",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | kinda |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis makes the StreamedResponse logic reusable for other strategies and it also makes the RenderingStrategy interface less fuzzy about its contract.\n\nThat also makes features like #4470 easier to implement from the outside.\n"
            },
            {
                "title": "[FrameworkBundle] fixed circular reference for service templating (closes #6730, closes #6762)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6730, #6762 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[FrameworkBundle] fixed Client::doRequest that must call its parent method (closes #6737)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6737 |\n| License | MIT |\n| Doc PR | n/A |\n"
            },
            {
                "title": "[FrameworkBundle] fixed requirement of the _controller placeholder for the proxy route (closes #6783)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6783 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Yaml] fixed ignored text when parsing an inlined mapping or sequence (closes #6786)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6786 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Routing options",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | yes |\n| Tests pass? | yes |\n| Fixed tickets | #5989, #5990, #6049 |\n| License | MIT |\n\nIn #5989, it has unanimously been decided to renamed `hostname_pattern` to `hostname` and `pattern` to `path`. That makes a lot of sense and I would like to do the renaming now as `hostname_pattern` is new in Symfony 2.2, so I'd like to avoid breaking BC just after the release. As we are modifying the route options, I've also included changes introduced by @Tobion in #6049 which were discussed in #5990.\n\nAs everything is BC, I think it's wise to include that in 2.2. What do you think?\n"
            },
            {
                "title": "Add a way to change the default URL generation mode from ABSOLUTE_PATH to RELATIVE_PATH",
                "body": "In #3958, two new URL generation types. One of them is RELATIVE_PATH, which is useful when generating an off-line version of a website for instance. But to make it possible, you would need to pass the RELATIVE_PATH constant to all link generation, which is not really possible.\n\nWhat about adding a global setting that would allow to switch to the RELATIVE_PATH strategy by default when generating links?\n\nping @Tobion\n"
            },
            {
                "title": "[DependencyInjection] fixed a bug where the strict flag on references were lost (closes #6607)",
                "body": ""
            },
            {
                "title": "Reverting the removal of the tests via .gitattributes",
                "body": "I think that it is not worth removing the tests classes from archives via the .gitattributes file. The more I think about it, the more I think that the benefits are really small and the drawbacks quite huge:\n- people use some of our test classes in their own tests (we have already moved some of them to a Test/ directory and that helps bu I fear that many more will need to be moved -- see https://twitter.com/huizendveld/status/288331330998116352 for an example);\n- people like to have a look at the tests to understand how the code works;\n- when working on a patch locally on a project, there is no way to run the unit tests to check that everything still work as expected.\n\nI would like to revert this change. Opinions?\n"
            },
            {
                "title": "[DependencyInjection] Fixed PhpDumper when compiling inlined services",
                "body": ""
            },
            {
                "title": "[Console] fixed unitialized properties (closes #5935)",
                "body": ""
            },
            {
                "title": "added MatcherInterface as a marker for all Routing matcher classes",
                "body": "This allows to use a type hint when you want to support both UrlMatcherInterface and RequestMatcherInterface\n"
            },
            {
                "title": "[HttpKernel] refactored logging in the exception listener",
                "body": "- avoid code duplication\n- allow easier overloading of the default behavior\n"
            },
            {
                "title": "[DependencyInjection] removed hard dependency on the Config component",
                "body": "The Config component is a hard dependency for the loaders (but loaders\nthemselves are optional); all other classes should not have a hard dep\non Config. The introduction of a new flag allows to remove this\ndependency.\n\nThis commit also fixes skipped test dependencies.\n"
            },
            {
                "title": "[DependencyInjection] fixed setting a synthetic service on a frozen container",
                "body": "By definition of a synthetic service, setting it on a frozen container should be possible.\n"
            },
            {
                "title": "[FrameworkBundle] changed data collector templates to use the new namespaced template names",
                "body": "#6465 must be merged first.\n"
            },
            {
                "title": "made the kernel optional in all data collectors",
                "body": ""
            },
            {
                "title": "[WIP] Kernel refactor",
                "body": "Currently, the handling of sub-requests (including ESI and hinclude) is mostly done in FrameworkBundle. It makes these important features harder to implement for people using only HttpKernel (like Drupal and Silex for instance).\n\nThis PR moves the code to HttpKernel instead. The code has also been refactored to allow easier integration of other rendering strategies (refs #6108).\n\nThe internal route has been re-introduced but it can only be used for trusted IPs (so for the internal rendering which is managed by Symfony itself, or by a trusted reverse proxy like Varnish for ESI handling). For the hinclude strategy, when using a controller, the URL is automatically signed (see #6463).\n\nThe usage of a listener instead of a controller to handle internal sub-requests speeds up things quite a lot as it saves one sub-request handling. In Symfony 2.0 and 2.1, the handling of a sub-request actually creates two sub-requests.\n\nRendering a sub-request from a controller can be done with the following code:\n\n``` jinja\n{# default strategy #}\n{{ render(path( partial )) }}\n{{ render(controller( SomeBundle:Controller:partial )) }}\n\n{# ESI strategy #}\n{{ render(path( partial ), { strategy: 'esi' }) }}\n{{ render(controller( SomeBundle:Controller:partial ), { strategy: 'esi' }) }}\n\n{# hinclude strategy #}\n{{ render(path( default1 ), { strategy: 'hinclude' }) }}\n```\n\nThe second commit allows to simplify the calls a little bit thanks to some nice syntactic sugar:\n\n``` jinja\n{# default strategy #}\n{{ render(path( partial )) }}\n{{ render(controller( SomeBundle:Controller:partial )) }}\n\n{# ESI strategy #}\n{{ render_esi(path( partial )) }}\n{{ render_esi(controller( SomeBundle:Controller:partial )) }}\n\n{# hinclude strategy #}\n{{ render_hinclude(path( default1 )) }}\n```\n"
            },
            {
                "title": "[FrameworkBundle] fixed ESI calls",
                "body": "closes #6445\n"
            },
            {
                "title": "[Validator] OneOf constraint vs Choice",
                "body": "In PR #6360, the `Choice` constraint was renamed to `OneOf`. This PR fixes ticket #6324.\n\nBut as mentioned by @vicb and @Tobion, it might not be such a good idea for several reasons:\n- We are again breaking BC without a good reason. `Choice` was not a horrible name\n- The new name is probably worse than the previous one as the `OneOf` constraint has a `multiple` option. When set to true, the name is not accurate anymore\n\nSo, I propose that we revert this change.\n\nping @bschussek\n"
            },
            {
                "title": "Added an HttpKernelExtension in Twig bridge and used it in the WebProfiler",
                "body": "The first commit introduces a new HttpKernelExtension in the Twig bridge that allows the rendering of a sub-request from a template (the code mostly comes from Silex, and will replace the code there at some point).\n\nThe name `render` is probably not the best one as it does not really tell you what it does (the same goes for the `render` tag we have in Symfony2 by the way).\n\nHere is a list of possible names:\n- `render()`\n- `render_request()`\n- `request()`\n- `subrequest()`\n- `include_request()`\n\nI don't really like the last one, but it is (perhaps) consistent with the `include` tag/function in Twig.\n\nThis new `render()` function is also a first step towards replacing the `render` tag (with support for ESI, SSI, ...). But it won't happen before we refactor the way it's managed now (a lot of the code is in the FrameworkBundle right now and that prevents Silex or Drupal to reuse it).\n\nThe other commits make use of this new extension to make the Web Profiler truly independent from TwigBundle and FrameworkBundle.\n"
            },
            {
                "title": "Config key normalization",
                "body": "This is a quick proof-of-concept for a better fix of #6086, where key normalizations can be disabled on specific nodes. The previous patch was not really useful as you were only able to disable key normalization globally for a configuration.\n\nping @lolautruche\n\nThe second commit fixes #5998.\n"
            },
            {
                "title": "[MessageCatalogue] Add Metadata to MessageCatalogue",
                "body": "rework of #4399\n\nFor improving the Gettext tools (PO, MO File Loader/Dumper) we need at least storage for their meta data.\n\nThis patch allows for issues below to store and process ie Po Header, Po Header Pluralisation rule.\n\nOpen\n- [[WIP]: Allow Drupal to use Translate component](https://github.com/symfony/symfony/pull/4249)\n- [[2.1][Translator] Symfony translation process & gettext](https://github.com/symfony/symfony/issues/4245)\n\nClosed:\n- [[Translation] Po/MoFileLoader parse plurization rules](https://github.com/symfony/symfony/pull/3023)\n\nIt has 1 TODO regarding addCatalogue: it now just override old values with new.\n"
            },
            {
                "title": "[Console] Add ability to select values interactively",
                "body": "This is a slightly modified version of #5417\n\nAdds ability to select from value list:\n\n```\n$values = array('One', 'Two', 'Three');\n$pick = $this->getHelper('dialog')->select($output, 'Pick a bundle:', $values, 2);\nvar_dump($pick);\n```\n\n... would give the following CLI output:\n\n```\nPick a bundle:\n  0   One\n  1   Two\n  2   Three\n> 1\n1\n```\n"
            },
            {
                "title": "Webprofiler refactor",
                "body": "This PR removes two hard dependencies from WebProfilerBundle:\n- The dependency on the DIC;\n- The dependency on TwigBundle.\n\nIt also removes the dependency on the DIC in the exception controller from TwigBundle for more consistency.\n"
            },
            {
                "title": "[Translation] uniformized the way exception are thrown in LoaderInterface::load()",
                "body": ""
            },
            {
                "title": "[Serializer] - undefined index #",
                "body": "replaces #6293\n"
            },
            {
                "title": "[HttpFoundation] changed UploadedFile::move() to use move_uploaded_file() when possible (closes #5878, closes #6185)",
                "body": "An alternative for #5878 and it fixes #6185.\n"
            },
            {
                "title": "[HttpFoundation] changed UploadedFile::move() to use move_uploaded_file() when possible",
                "body": "An alternative for #5878 and it fixes #6185.\n"
            },
            {
                "title": "[HttpFoundation] added a check for the host header value",
                "body": "alternative for #3865\n"
            },
            {
                "title": "[HttpFoundation] added a check for the host header value",
                "body": "alternative for #3865\n"
            },
            {
                "title": "[HttpFoundation] disabled Request _method feature by default",
                "body": "It should now be explicitely enabled via a call to enableHttpMethodOverride())\n"
            },
            {
                "title": "moved most static assets directly into the templates",
                "body": "This has been done for several reasons:\n- for consistency with the way we already manage the WDT and the\n  profiler icons;\n- it makes the Exception independent from the location of the assets\n  (and from the asset() function)\n- this is the second step to make the WebProfiler useable outside the\n  full-stack framework\n\nsee dbcd171dd3097f1f1d9d94c9112aaf8eb974a015\n"
            },
            {
                "title": "Public resources refactoring",
                "body": "The first 3 commits are just cosmetic ones.\n\nThe last one refactors CSS, images, and templates included in the built-in bundles. Right now, everything is tied to the exception pages, but the code can be used standalone.\n\nSo, the goal is to make things more decoupled and more reusable across different bundles. That way, a bundle can provide pages that look like the other ones in Symfony without the need to duplicate code.\n\nSee the associated PR for the distribution bundle to see an example.\n\nIf you want to have a look at the last commit (not sure if it is worth it), you probably want to append ?w=1 to the URL to avoid too much whitespace noise.\n"
            },
            {
                "title": "Consider renaming pattern to path in the routing component",
                "body": "As of today, we have two patterns: one for the path (`pattern`) and another one for the host (`hostname_pattern`).\n\nIn #3378, it was suggested to rename `pattern` to `path` and `hostname_pattern` to `hostname`.\n\nThat's fine by me, but of course, we will keep `pattern` support even after the LTS release (which should not be a problem). The documentation for 2.2 will of course only use the new name.\n\nWhat others think?\n"
            },
            {
                "title": "moved code helper code to the Twig bundle",
                "body": "These helpers are very specific and are only used in TwigBundle for the\nprofiler and the exception templates.\n"
            },
            {
                "title": "LoggerInterface and Monolog",
                "body": "As of today, we have a `LoggerInterface` declared in the HttpKernel component. This can be problematic for components that need a logger but do not depend on HttpKernel.\n\nThere are several options here to fix this  issue :\n\n 1/ Let the FIG group decide on an interface and rely on the FIG package that would declare this interface (keep in mind that we need to have something stable by the end of December for Symfony 2.2);\n 2/ Create a new Symfony component with just the `LoggerInterface` file;\n 3/ Remove the interface altogether and rely on Monolog instead;\n 4/ Create a Symfony Logger component that support both Monolog and the Zend Logger;\n 5/ Do nothing.\n\nsee #5911 for the start of the discussion.\n\nI tend to prefer option 3 for the many reasons:\n- If we had created a Logger component when we decided to create Monolog (switching from the Zend Logger at that time), we wouldn't have this discussion about this today. So, I like to think of Monolog as being the Symfony Logger component;\n- There aren' that many other logger libraries in PHP and this is not the kind of problems that need to have the flexibility to be replaced by something else;\n- Monolog is flexible enough to cover all the use cases you will ever need;\n- If this is a must, we can also add support for the Zend Logger library within Monolog (@Seldaek agreed with this possibility);\n- Thanks to Composer, relying on an external library like Monolog is not a problem anymore.\n"
            },
            {
                "title": "displayed the full event listener names to avoid name collisions (closes #5019)",
                "body": ""
            },
            {
                "title": "[HttpKernel] fixed Client when using StreamedResponses (closes #5370)",
                "body": ""
            },
            {
                "title": "fixed PDO session handler for Oracle (closes #5829)",
                "body": ""
            },
            {
                "title": "made usage of Composer autoloader for subtree-split unit tests",
                "body": "This PR also normalizes the way components are tested.\n"
            },
            {
                "title": "[HttpFoundation] moved the HTTP protocol check from StreamedResponse to Response (closes #5937)",
                "body": ""
            },
            {
                "title": "moved the Stopwatch classes to their own component",
                "body": "see https://github.com/symfony/symfony/issues/5911\n"
            },
            {
                "title": "[HttpKernel] added memory information in the Stopwatch",
                "body": ""
            },
            {
                "title": "PasswordEncoder should support BCrypt",
                "body": "see discussion here:\n\nhttps://groups.google.com/group/symfony-devs/browse_thread/thread/92ae24eafd13e29e?hl=en\n"
            },
            {
                "title": "Changed some security classes to implement the EventSubscriberInterface interface",
                "body": ""
            },
            {
                "title": "[Security] removed the 401 error custom status message",
                "body": "see fabpot/Silex#496\n"
            },
            {
                "title": "Remove the custom HTTP status message from 401 responses",
                "body": "see fabpot/Silex#496\n"
            },
            {
                "title": "[HttpKernel] normalized HTTP exceptions classes",
                "body": "I've removed the code as it is never used.\n\nAnd I've added the headers argument to all sub-classes.\n"
            },
            {
                "title": "[TwigBundle] added support for Twig namespaced paths (Twig 1.10)",
                "body": "In a template, you can now use native Twig template names, instead of\nthe Symfony ones:\n\nBefore (still works):\n\n```\n{% extends  AcmeDemoBundle::layout.html.twig  %}\n{% include  AcmeDemoBundle:Foo:bar.html.twig  %}\n```\n\nAfter:\n\n```\n{% extends  @AcmeDemo/layout.html.twig  %}\n{% include  @AcmeDemo/Foo/bar.html.twig  %}\n```\n\nUsing native template names is also faster.\n\nThe only drawback is that the new notation looks similar to the way we\nlocate resources in Symfony, which would be\n`@AcmeDemoBundle/Resources/views/Foo/bar.html.twig`. We could have used\nthe same notation, but it is rather verbose (and by the way, using this\nnotation did not work anyway in templates).\n\nTODO: update documentation\n"
            },
            {
                "title": "Fluent interface",
                "body": "This PR was submitted on the symfony/Process read-only repository and moved automatically to the main Symfony repository (closes symfony/Process#1).\n"
            },
            {
                "title": "Patch method OptionsResover::validateOptionValues().",
                "body": "This PR was submitted on the symfony/OptionsResolver read-only repository and moved automatically to the main Symfony repository (closes symfony/OptionsResolver#1).\n\nWhen we define allowed values for an optional option and the corresponding option was not set. On resolve, OptionsResover::validateOptionValues() was throwing a notice.\n"
            },
            {
                "title": "Replaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher",
                "body": "The ContainerAwareTraceableEventDispatcher class was tied to both the\nSymfony container and the HttpKernel profiler. It made it non reusable\nin another context.\n\nThe new TraceableEventDispatcher only keeps the HttpKernel profiler\nintegration and is able to wrap any other event dispatcher. It makes it\nreusable in frameworks using the Symfony HttpKernel component like\nSilex.\n\nThe only drawback is that we don't have access to the listener\npriorities in the collected data anymore (but the listeners are still\nordered correctly). The change is still worth it I think.\n"
            },
            {
                "title": "[Form] The form renderer makes to many deep nested function calls",
                "body": "When using XDebug, the form test suite for FrameworkBundle do not pass with the default setting of XDebug (which only allows 100 nested calls). I've raised the maximum in the test suite so that it passes, but we need to investigate if we can reduce the nested calls. see f6815be7f2c0\n"
            },
            {
                "title": "[2.2] added a way to enable the profiler for the very next request in a functional test",
                "body": "Bug fix: yes/no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4307\nTodo: -\nLicense of the code: MIT\nDocumentation PR: should be done before merging\n\nAfter merging this PR, we need to disable the profiler in the test environment in Symfony SE.\n"
            },
            {
                "title": "[2.2][Security] Add a PRNG (closes #3595)",
                "body": "As per #3595, I have moved the secure random class from JMSSecurityExtraBundle to Symfony.\n\nIt has more impact than I expected ;)\n\nAs you will see, the implementation has been refactored a bit. The most notable change is that Doctrine support has been moved to the bridge with the addition of a proper Doctrine seed provider (Doctrine is not a special case anymore).\n\nThe Doctrine configuration has been moved to the DoctrineBundle: doctrine/DoctrineBundle#91\n\nschmittjoh/JMSSecurityExtraBundle#65 removes the code that has been moved.\n"
            },
            {
                "title": "Classloader optimization",
                "body": "The first commit fixes support for PHP 5.4 trait.\n\nThe second one does several things:\n- it optimizes the recent merge so that the reflection class instance is only loaded once;\n- we use the fact that we now get all class dependencies to automatically add all class dependencies to the map.\n"
            },
            {
                "title": "A unit fails on php 5.4",
                "body": "1) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testParseTypeInt64IntlWith32BitIntegerInPhp32Bit\nFailed asserting that -2147483648 is of type  float .\n\n/home/vagrant/builds/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:934\n\n@eriksencosta: Can you have a look at it?\n"
            },
            {
                "title": "made the charset overridable (closes #2072)",
                "body": "The charset was configurable in a configuration file but it never worked:\n\n```\nframework:\n    charset: ISO-8859-1\n```\n\nNow, like for the cache and log dirs, you can configure the charset by\noverriding the getCharset() method in the app kernel:\n\n```\npublic function getCharset()\n{\n    return 'ISO-8859-1';\n}\n```\n"
            },
            {
                "title": "Create a new interface for the strict_parameter flag on UrlGenerator",
                "body": "see #4592\n"
            },
            {
                "title": "[HttpKernel] removed the storage of the current locale in the session",
                "body": "Before this commit, the current locale was stored in the session (if one\nwas already started). That way, for the next requests, even if the\nrequest locale attribute was not set, the locale was  restored .\n\nBut this is a really bad practice as it means that the same URL can have\na different content depending on the previous requests. It would have\nbeen better if the Vary header was set but the locale can be different\nfrom the value coming from the Accept-Language anyway.\n\nThis is a BC break but fortunately, you can restore the 2.0 behavior by\ncreating a simple event listener that contains the logic removed by this\ncommit.\n"
            },
            {
                "title": "added Request::getSchemeAndHttpHost() and Request::getUserInfo()",
                "body": "see #4312\n"
            },
            {
                "title": "Problem when using the Form component standalone",
                "body": "As of 345981f6b69595a9777e9730df8070ea4d08f99d, it is not possible to use the Form component standalone.\n\nIf you have an error for a choice, min length, or max length constraint, you will get an exception.\n\nThat's because the Twig templates are using the `trans` and `transchoice` functions according to the type of error messages (a plural message or not).\n\nFor the choice, min length, and max length validators, the pluralization is enabled but the default message in the validator class does not follow the convention of plural messages (there is a single message and not different messages separated with a `|`). It does not follow this convention so that you can use the Validator component as a standalone component without the need to use the Translation component.\n\nEverything works fine in Symfony as we are always using the translation components with the translations the come with the framework bundle. And in the translations for English, we have the right message.\n\nI don't see many options to fix this issue. One of them would be to move the translations from the framework bundle to the twig bridge, so that you can load the translations when using the components standalone. The only downside is that the translations are also required when you are using the PHP templating system, and for that you would need the Twig bridge (but frankly I don't really care about that as this is probably more and more an edge case than anything else).\n\nAny other idea?\n"
            },
            {
                "title": "[DomCrawler] fixed encoding when using addHtmlContent() (fixes #3881)",
                "body": "After looking around, this is clear that loadHtml() resets the encoding set on the DomDocument instance. So, the only workaround that actually works (and which is not an ugly hack) is to use `mb_convert_encoding` when it exists.\n"
            },
            {
                "title": "[2.2] Implements context escaping for Twig (fixes #839)",
                "body": ""
            },
            {
                "title": "value of mapping (even if value is sequence) doesn't have to be indented",
                "body": "Migrated from https://github.com/fabpot/yaml/issues/3\n\nThe following yaml-code is valid (and generated by libyaml):\n\n```\ncollection:\n- item1\n- item2\n- item3\n```\n\nI couldn't find direct mentioning of this in specification, but some of examples from specifications use this notation.\n\nalso, check this dump from  YAML Reference Parser : http://yaml.org/ypaste/645/index.html\n\nsfYaml loads it as:\n\n```\narray(\n   sequence  => null,\n  0 =>  item1 ,\n  1 =>  item2 ,\n  2 =>  item3 ,\n)\n```\n\nExpected result is:\n\n```\narray(\n   sequence  => array(\n    0 =>  item1 ,\n    1 =>  item2 ,\n    2 =>  item3 ,\n  ),\n)\n```\n"
            },
            {
                "title": "Yaml parsing problem",
                "body": "Extracted from https://github.com/fabpot/yaml/issues/10:\n\nthe method  parseQuotedScalar  is used for two purposes, parsing a delimited string, and a plain string, but when its being given a plain string, it still treats it as delimited, and thus only returns the first string it matches.\n\nIf you use something like this, it doesn't really work:\n\ntest: 'don't do somthin' like that'\n\nyou'd get 'test' to simply equal 'don'.\n\ni'm using this package to do a bit of yaml validation, so i added this snippit to the method\n\n```\nif ((!$delimiters) && (strlen($match[0]) < strlen($scalar))) {\n  throw new InvalidArgumentException(sprintf( Malformed YAML (check your use of apostrophes and quotes): \\n %s. , substr($scalar, $i)));\n}\n```\n\nI'm sure this isn't the ideal fix, but I didn't want to battle with modifying the validation regex.\n"
            },
            {
                "title": "Bundle Translations Overrides should be in app/Resources/BundleName/translations",
                "body": "see https://github.com/symfony/symfony-standard/issues/161 for the original ticket:\n\n \nStart with an example.\n\nLet's say I am using SonataAdminBundle. It would seem appropriate that if I wanted to override that bundles translations those translations would be in app/Resources/SonataAdminBundle/translations similar to if I want to override the views of that bundle they reside in app/Resources/SonataAdminBundle/views.\n\nThis is not the case and in my opinion seems the more logical approach. Otherwise we will end up with hundreds of overriding translations for each language in the same directory. At least the option should be there to include the translations within the bundle override directory. So it could find overrides in app/Resources/BundleName/translations, or app/translations/someRandomBundle.en.xml/yml/php\n\nHopefully that makes sense and it makes it in time for 1.0 final which is today!!!\n\nPlease consider this. It makes sense.\n\nThanks.\n \n"
            },
            {
                "title": "[Form] Allow to inherit translation domain for all elements of a form",
                "body": "Currently I can set a translation_domain on each field of a form, but there is no simple way to do it once for a complete form. This change passes on the translation_domain from the form to its elements if translation_domain is not explicitly set on a field.\n\nsee #3649\n"
            },
            {
                "title": "moved event dispatcher classes to the EventDispatcher component",
                "body": "I have moved the two specialized event dispatcher classes from the FrameworkBundle bundle to the EventDispatcher component.\n\nIt makes them reusable outside the Symfony full-stack framework as they can be quite useful (people like @drak has a use for them for instance).\n\nIt makes the event dispatcher component _optionally_ rely on DependencyInjection and HttpKernel for these classes, like what we have in other components.\n\nWhat do you think?\n"
            },
            {
                "title": "AnnotationDirectoryLoader must be deterministic",
                "body": "The order in which the files are read is not deterministic but it must be.\n\nsee sensio/SensioFrameworkExtraBundle#103\n"
            },
            {
                "title": "add BinaryFileResponse",
                "body": "Not sure if this belongs to the core but here is a previous discussion about adding support for simple binary file responses: see #2606\n"
            },
            {
                "title": "[DomCrawler] added support for forms where several fields have the same ...",
                "body": "...name (which also bring us support for fields ending with [])\n\nThis change breaks the public API but it was necessary to make the component behave like a normal browser with a PHP backend.\n\nThis fixes #1579.\n\nAs we break the public API, I would like some feedback before merging it.\n"
            },
            {
                "title": "[HttpFoundation] added support for streamed responses",
                "body": "To stream a Response, use the StreamedResponse class instead of the\nstandard Response class:\n\n```\n$response = new StreamedResponse(function () {\n    echo 'FOO';\n});\n\n$response = new StreamedResponse(function () {\n    echo 'FOO';\n}, 200, array('Content-Type' => 'text/plain'));\n```\n\nAs you can see, a StreamedResponse instance takes a PHP callback instead of\na string for the Response content. It's up to the developer to stream the\nresponse content from the callback with standard PHP functions like echo.\nYou can also use flush() if needed.\n\nFrom a controller, do something like this:\n\n```\n$twig = $this->get('templating');\n\nreturn new StreamedResponse(function () use ($templating) {\n    $templating->stream('BlogBundle:Annot:streamed.html.twig');\n}, 200, array('Content-Type' => 'text/html'));\n```\n\nIf you are using the base controller, you can use the stream() method instead:\n\n```\nreturn $this->stream('BlogBundle:Annot:streamed.html.twig');\n```\n\nYou can stream an existing file by using the PHP built-in readfile() function:\n\n```\nnew StreamedResponse(function () use ($file) {\n    readfile($file);\n}, 200, array('Content-Type' => 'image/png');\n```\n\nRead http://php.net/flush for more information about output buffering in PHP.\n\nNote that you should do your best to move all expensive operations to\nbe  activated/evaluated/called  during template evaluation.\n## Templates\n\nIf you are using Twig as a template engine, everything should work as\nusual, even if are using template inheritance!\n\nHowever, note that streaming is not supported for PHP templates. Support\nis impossible by design (as the layout is rendered after the main content).\n## Exceptions\n\nExceptions thrown during rendering will be rendered as usual except that\nsome content might have been rendered already.\n## Limitations\n\nAs the getContent() method always returns false for streamed Responses, some\nevent listeners won't work at all:\n- Web debug toolbar is not available for such Responses (but the profiler works fine);\n- ESI is not supported.\n\nAlso note that streamed responses cannot benefit from HTTP caching for obvious\nreasons.\n"
            },
            {
                "title": "Use Process to run commands within the Shell",
                "body": "When you are using the Symfony shell, a command like cache:clear does not behave like expected as we do not reload already loaded files and classes (see #2847 for instance). One possibility would be to run all the commands within their own PHP process by using the Process component.\n"
            },
            {
                "title": "[2.2] [WIP] Add autocompletion as you type to the console",
                "body": "See here: http://groups.google.com/group/symfony2/browse_thread/thread/3a09aef0cee51d76/\n\nRebased version of #1456\n"
            },
            {
                "title": "Move management of the locale from the Session class to the Request clas",
                "body": "The locale management does not require sessions anymore.\n\nIn the Symfony2 spirit, the locale should be part of your URLs. If this is the case (via the special `_locale` request attribute), Symfony will store it in the request (`getLocale()`).\n\nThis feature is now also configurable/replaceable at will as everything is now managed by the new `LocaleListener` event listener.\n\nIt does break BC as `getLocale()` moved from Session to Request. The configuration for the default locale is now also done on the framework entry instead of the session one.\n\nAny thoughts?\n"
            },
            {
                "title": "Move management of the locale from the Session class to the Request class",
                "body": "The locale management does not require sessions anymore.\n\nIn the Symfony2 spirit, the locale should be part of your URLs. If this is the case (via the special `_locale` request attribute), Symfony will store it in the request (`getLocale()`).\n\nThis feature is now also configurable/replaceable at will as everything is now managed by the new `LocaleListener` event listener.\n\nIt does break BC as `getLocale()` moved from Session to Request. The configuration for the default locale is now also done on the framework entry instead of the session one.\n\nAny thoughts?\n"
            },
            {
                "title": "[SecurityBundle] added a validator for the user password",
                "body": "This validator is useful when you want to validate that an input value\nis equal to the user current password (in a form where the user can change\nhis password for instance).\n\nNote that this should not be used to validate a login form as this is\ndone automatically by the built-in security mechanism.\n"
            },
            {
                "title": "Client insulation in functional tests is broken",
                "body": "In `Symfony\\Bundle\\FrameworkBundle\\Client`:\n\n```\n    protected function getScript($request)\n    {\n        $kernel = serialize($this->kernel);\n        $request = serialize($request);\n\n        $r = new \\ReflectionObject($this->kernel);\n        $path = $r->getFileName();\n\n        return <<<EOF\n<?php\n\nrequire_once '$path';\n\n\\$kernel = unserialize('$kernel');\n\\$kernel->boot();\necho serialize(\\$kernel->handle(unserialize('$request')));\nEOF;\n    }\n```\n\nNow, the Kernel needs the autoloader to work but it's not loaded here.\n"
            },
            {
                "title": "[Form] text is now the default type when not explicitely set and when no data class is set",
                "body": "Looks like a great enhancement to me, especially because the error message is really difficult to understand... and I don't see any drawback. Thoughts?\n\nJust have a look at the first commit to understand the change:\n\nhttps://github.com/symfony/symfony/commit/fd97dd00599a0220a0750faf3cd04aed1496df70\n"
            },
            {
                "title": "[DoctrineBundle] fixed extensions of generated files",
                "body": "depends on https://github.com/doctrine/doctrine2/pull/66\n\nfixed https://github.com/symfony/symfony/issues/1119\n"
            },
            {
                "title": "[EventDispatcher] Allow arbitrary callbacks",
                "body": "Follow-up for https://github.com/symfony/symfony/pull/791\n"
            },
            {
                "title": "Always using HTML5  pattern  attribute for form is a bad idea",
                "body": "If you have an input field with a max length, the generated HTML is as follows:\n\n```\n<input type= text  id= post_title  name= post[title]  required= required  maxlength= 50  pattern= .{4,50}  value=   />\n```\n\nThe problem is that the `pattern` is a generic regexp and a browser like Chrome will display the following message if you enter an invalid string (more than 50 characters):\n\n   Please match the requested format\n\nwhich of course does not help the user. That happens for instance when the `value` attribute is already filled in with a value that does not respect the pattern.\n"
            },
            {
                "title": "Added support for PUT method",
                "body": "This adds proper support for PUT method (see #793)\n"
            },
            {
                "title": "added a way to  reload  an entity manager",
                "body": "This was submitted as another PR before: https://github.com/symfony/symfony/pull/728\n\nOnly the second commit is relevant. The first is part of another PR: https://github.com/symfony/symfony/pull/735\n\nReloading entity managers is useful when doing transactions with Doctrine2.\nWhen you catch a Doctrine exception, you must close the entity manager. A\nclosed entity manager cannot be used anymore; so you need to get a fresh one.\n\nIn the 'catch' block, call 'reload()' method instead of 'close()' to get a new\nentity manager:\n\n```\n$em->getConnection()->beginTransaction(); // suspend auto-commit\ntry {\n    //... do some work\n} catch (Exception $e) {\n    $em->getConnection()->rollback();\n\n    // call reload() instead of close()\n    $em = $em->reload();\n}\n```\n"
            },
            {
                "title": "Introduced a Registry class",
                "body": "The Registry knows all connections and entity managers declared into a service\ncontainer. The Registry is available via the 'doctrine' service.\n\nIf can be used to get connections and entity managers by name:\n\nBefore:\n\n$em = $this->get('doctrine.orm.entity_manager');\n$em = $this->get('doctrine.orm.foobar_entity_manager');\n\nAfter:\n\n$em = $this->get('doctrine')->getEntityManager();\n$em = $this->get('doctrine')->getEntityManager('foobar');\n\nIt is better for several reasons:\n- we rely less on naming conventions\n- IDEs will be able to auto-complete methods\n"
            },
            {
                "title": "[DoctrineBundle] introduced a Registry class",
                "body": "The Registry knows all connections and entity managers declared into a service\ncontainer. The Registry is available via the 'doctrine.registry' service.\n\nIf can be used to get connections and entity managers by name (instead of\nusing DIC parameters -- more information in the UPDATE file), and to 'reload'\nclosed entity managers.\n\nReloading entity managers is useful when doing transactions with Doctrine2.\nWhen you catch a Doctrine exception, you must close the entity manager. A\nclosed entity manager cannot be used anymore; so you need to get a fresh one.\n\nIn the 'catch' block, call 'reload()' method instead of 'close()' to get a new\nentity manager:\n\n```\n$em->getConnection()->beginTransaction(); // suspend auto-commit\ntry {\n    //... do some work\n} catch (Exception $e) {\n    $em->getConnection()->rollback();\n\n    // call reload() instead of close()\n    $em = $em->reload();\n}\n```\n"
            },
            {
                "title": "Doctrine auto mapping",
                "body": "Most of the time, you just want to register all your bundle mappings (and the default configuration is just fine). It's a bit tedious to do it by hand, not because of the amount of configuration you need to type, but mainly because you can easily forget to do so (also see https://github.com/symfony/symfony/pull/502).\n\nSo, setting `auto_mapping` to `true` allows Symfony to automatically register the mappings it founds in the enabled bundles (default is `false`).\n\nEven if `auto_mapping` is `true`, you can still define your mappings to add some more or to override the defaults.\n\nThis change means that the default configuration that works most of the time for most people is simple:\n\n```\norm:\n    auto_mapping: true\n```\n\nCan anyone see any problem?\n"
            },
            {
                "title": "[HttpKernel] ensured that all 4xx/5xx responses are handled by the exception listener",
                "body": "This commit ensures that Symfony has the same behavior whether you use Exceptions or Response instances.\n\nFor instance, the controllers below will have now the same behavior:\n\n```\nfunction ()\n{\n    return new Response('Not Found', 404);\n}\n\nfunction ()\n{\n    throw new NotFoundHttpException();\n}\n```\n"
            },
            {
                "title": "[Security] Remove special management for 403 errors",
                "body": "There is no reasons to handle 403 differently than other exceptions (404, ...).\n\nSo, I have:\n- added an AccessDeniedHttpException in HttpKernel\n- changed ExceptionListener to re-throw an AccessDeniedHttpException\n\nWhat do you think?\n"
            },
            {
                "title": "[FrameworkBundle] made sure that the debug event dispatcher is used everywhere",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6686, #7673 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Security] Split the component into 3 sub-components Core, ACL, HTTP",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #9047, #8848 |\n| License | MIT |\n| Doc PR | - |\n\nThe rationale behind this PR is to be able to use any of the sub components without requiring all the dependencies of the other sub components. Specifically, I'd like to use the core utils for an improved CSRF protection mechanism (#6554).\n"
            },
            {
                "title": "updated the composer install command to reflect changes in Composer",
                "body": ""
            },
            {
                "title": "[Console] Fixed exception rendering",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #9045 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen an exception message contains styles, the output is not the expected one. This PR addresses this issue.\n"
            }
        ],
        "pr_comments": [
            "+1 for consistency\n\nCan you change the test to `null !==`? Also, a unit test would be good to avoid any regressions.\n",
            "Should be  No invalid forms detected for this request.  I think we are using `<em>` in the web profiler for such cases.\n",
            "Let's finish this PR first, we will be able to add more stuff afterwards.\n",
            "2 problems here:\n- the `ajax_layout.html.twig` template does not exist.\n- the `@` notation must be used in the web profiler.\n\nSo, this line should be:\n\n``` php\n{% extends '@WebProfiler/Profiler/layout.html.twig' %}\n```\n",
            "All template references must use the `@` notation.\n",
            "``` php\n    {% include '@WebProfiler/Profiler/toolbar_item.html.twig' with { 'link': profiler_url } %}\n```\n",
            "This block should be unindented\n",
            "When only one form is present, I would say something along the lines of: `Form Errors`\n",
            "When there is only one form, I would remove this headline and move the name into the `<h2>` tag instead: `Form Errors for {{ formName }}`.\n",
            "I would always display all forms, even if there are no errors.\n",
            "So, when they are no errors for a form, I would say `The form is valid` or `No errors for this form`.\n",
            "here is a missing space after the cast.\n",
            "I would remove this one and just use `data|length` in the template.\n",
            "You don't add anything on the profiler, what about `collect()` instead?\n",
            "missing space after `//`\n",
            "I would have put this logic in the form subscriber instead. That way, the collector would be compatible with any versions of the Form component.\n",
            "traiiling whitespace\n",
            "we are using this anywhere else, should be removed\n",
            "As I said, I've used the first character that came. A better one must be found...\n",
            "it always exists at this stage as the check is done elsewhere\n",
            "Again, it's done in the Parser, so that won't happen.\n",
            "I don't know yet if we need to keep it close to Twig or not at all. That's why I kept none at first, but as both will probably diverge even more than today, that's probably safe to remove none support.\n",
            "ok, I've removed none and I've changed the operators to the PHP operators.\n",
            "done\n",
            "Twig supports PHP 5.2, which does not allow for the `a ?: b` construct.\n",
            "fixed\n",
            "I've updated the PR with `@#`.\n",
            "done\n",
            "If you mean, replace the Twig expression sub-system by this code, the answer is no as Twig is much more powerful.\n",
            "the variable names are now checked in the Parser.\n",
            "done\n",
            "the variable names are now checked in the Parser.\n",
            "and the valid names must be passed to the `compile()` method. The goal being to not do anything special in the compiled string.\n",
            "was just a typo, fixed now\n",
            "To avoid the BC break, can you instead add a `setPath()` method?\n",
            "This one should be private instead. The php docblock should also be removed as it does not give any useful information.\n",
            "blank line to be removed\n",
            "extra line to be removed\n",
            "there is a missing blank line before the __construct call.\n",
            "extra line to be removed\n",
            "empty line to be added before the @author tag.\n",
            " s at the end of exists\n",
            "I would have written:\n\n``` php\nif ($verbosity < 1) {\n    $verbosity = 1;\n} elseif ($verbosity > 3) {\n   $verbosity = 3;\n}\n```\n",
            "I prefer to min/max solution. If you try with someUnix command, you can add as many -v as you want, you will never get an error.\n",
            "we only document properties for objects \n",
            "we only document properties for objects\n",
            "same as above\n",
            "Rereading this patch, I was wondering why we don't know the encoding. A Symfony app has a charset settings which defines the default encoding for the app. So, why not assuming that this is the encoding used by the target URL as well?\n",
            "Type hinting is indeed a good idea.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "This is wrong as the DependencyInjection parameter bag does not support deep parameters.\n",
            "I think you are confusing the ParameterBag class from DependencyInjection and the one in HttpFoundation. There are totally different.\n",
            "Why removing the second part of the condition? That allows for a faster lookup.\n",
            "This method must be private.\n",
            "Can you make the whole condition on one line? Perhaps you can create a variable before for the closure?\n",
            "The parameter list does not seem to match the method signature.\n",
            "We are using `Boolean` in Symfony.\n",
            "The other way round: `date` should be `value` above.\n",
            "I would not name it travis as it is equally useful on your personal machine.\n",
            "I agree with @stof for another reason: decoupling testing from installing composer. That would allow to use this locally on your machine, independently of where composer is installed.\n",
            "`run-tests`?\n",
            "This method can be removed as it is not needed.\n",
            "This can be removed as it is already done after the condition.\n",
            "Actually, you should remove the other one instead.\n",
            "These 2 blank lines must be removed.\n",
            "This call should be on one line.\n",
            "You have 2 blank lines here.\n",
            "You should add a phpdoc here.\n",
            "You should also add a phpdoc here.\n",
            "This call should be on one line.\n",
            "The reuse of the finder is indeed a bug.\n",
            "extra blank line here.\n",
            "should be `hasDefaultRouteSet` (no `s` at the end of Routes).\n",
            "should be `Checks`. Why `extra`? and `defaults`?\n",
            "and the summary must be ended with a dot.\n",
            "same as above (`Sets` and a dot at the end).\n",
            "It looks like a big hack.\n",
            "typo, should probably be setDefaultRoute**s**\n",
            "I would remove the container dependency altogether and add a `setRequest(Request $request = null)` method instead. This will allow the container to automatically inject the correct Request object and others would need to call the setRequest() method by themselves.\n\nYou can have a look at a similar implementation in `LocaleListener` for instance. But basically, here is the `setRequest()` method:\n\n``` php\npublic function setRequest(Request $request = null)\n{\n    $this->request = $request;\n}\n```\n\nAnd call the method in the container configuration:\n\n``` xml\n<call method= setRequest ><argument type= service  id= request  on-invalid= null  strict= false  /></call>\n```\n\nAs the request can be null (outside request handling), you should take care of that edge case in your code.\n",
            "When we are not in the request scope (before handling a request or after handling a request), the request is null, so the setter must be able to accept/receive the null value.\n",
            "The setter must be called so that your object knows that it is acting outside the handling of a request. If not, you will still have access to an older Request object.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "Can you remove all occurences of `@return void` instead?\n",
            "All `@return null` can be removed\n",
            "The great benefit of private methods is that we can do whatever we want, so go for it.\n",
            "ok, let's not change it then\n",
            "that's why I added a comment in the framework bundle that explains why we need the pass to be register as late as possible, but not too late ;)\n",
            "Can you revert the whitespaces changes as it makes merging more difficult in case of a conflict.\n",
            "typo: no `s` at the end of `exists`.\n",
            "right, done in dc762e1\n",
            "As demonstrated by the tests that do not pass anymore, that basically reverts #8879 which is not possible.\n",
            "fixed\n",
            "I don't really care. Either looks fine to me.\n",
            "Doing your way, we could remove the initialization in the constructor.\n",
            "Is it really possible to have more than one form here?\n",
            "If there is no forms, you should add a sentence telling so as done elsewhere in the profiler.\n",
            "indentation should be aligned with h2.\n",
            "Missing capital letter for the first word and missing dot at the end.\n",
            "The same goes for all other PHPdocs.\n",
            "The PR is not finished yet.\n",
            "fixed\n",
            "throws an exception now.\n",
            "I've moved this line into the `if` below as the `handleException()` method will call the `finishRequest()` anyway (also added it in the throw call in `handleException()`).\n",
            "This class should now work in 2.3 or 2.4+ without any change.\n",
            "This class should now work in 2.3 or 2.4+ without any change.\n",
            "fixed now, thanks.\n",
            "well, I do agree but someone might have hacked Symfony in a way that it would break with this change. So, not sure if it's worth it.\n",
            "The ReferencingArrayIterator class should also be removed, no?\n",
            "You still need to remove the spaces around the dot.\n",
            "Do we really want to trigger the autoloader here? Or do we need to add `, false` at the end of the `class_exists` call?\n",
            "Then, I don't understand the issue here. If the class can be autoloaded, when will the condition return `false`?\n",
            "Got it now, thanks.\n",
            "that does not work as this method does not exist in all versions of Twig.\n",
            "This is not what I had in mind. I was thinking about adding a comma at the end of the line: `array('foo', 'bar'),`\n",
            "same as above\n",
            "As the method also accepts timezones as strings, I think it would be better to use `setTimeZone('UTC')`, no?\n",
            " would have named the method a bit differently:\n\n`isQuiet()`, `isVerbose()`, `isVeryVerbose()`, and `isDebug()`. The only for which there is no easy name is `isNormal()`.\n",
            "This one must be reverted as using md5 is part of the Digest scheme, so we cannot control what to use.\n",
            "same as above\n",
            "l the changes in this file should also be reverted, no?\n",
            "Why not use explicit arguments: `setTerminalDimensions($width, $height)`?\n\nAlso, you need to add the PHPDoc for this method.\n",
            "I would have used:  The current application \n",
            "should be  Sets terminal dimensions. .\n",
            "indeed, done in 7eaaec1\n",
            "done\n",
            "The way it is named now is how we do it elsewhere, so this is consistent.\n",
            "I think having a more readable code is more important than a micro optimization. So, I would keep this code as is.\n",
            "missing space around `/`\n",
            "Can you remove the parentheses around the 3 comparisons as they are not needed?\n",
            "This should be moved to a new '2.4' section\n",
            "All the @api tags must be removed.\n",
            "Can you revert the change in the file mode?\n",
            "missing whitespace after if\n",
            "I would remove this comment as it does not add anything interesting.\n",
            "I would remove the description as it does not add anything interesting.\n",
            "We don't document properties when they are not objects.\n",
            "I would remove this getter as you should never rely on a helper to get the input instance.\n",
            "I'm not a big fan of the injection of the input here as it means that the helper becomes stateful. I know that because of BC, we don't have many choices, but another possibility would be to just inject the value of the interaction flag. It would still be stateful, but  less .\n\nWhile writing this comment, I realize that injection the interaction flag is probably not a good idea, but let's discuss this possibility.\n",
            "missing headers\n",
            "What about adding a real phpdoc?\n",
            " Common options  should be  Available options \n",
            "right, fixed.\n",
            "fixed, added a test\n",
            "This change should be removed as it does not fix anything.\n",
            "adding a new method in an interface is a BC break.\n",
            "adding a new method in an existing interface is, unfortunately, also a BC break :(\n",
            "This must be reverted.\n",
            "because this method is tagged with @api and because this change does not change anything and does not fix anything.\n",
            "no\n",
            "There is nothing related to the quality of code, you are breaking BC and it fixes nothing, so please revert it. I will NOT merge this change.\n",
            "And last but not the least, it is not even related to the other change you made.\n",
            "I'm not going to change my mind.\n",
            "You must add a use statement for the interface and use the short class name here instead (same for the other method).\n",
            "What about just replacing `-` with `_` and be done with it. We don't need to make the variable  pretty , so no need to spend CPU time doing more transformations.\n",
            "yes, looks good to me.\n",
            "Why have you removed this code?\n",
            "@alcaeus Can you tell us more about this code removal? It does not look like it is related to the goal of this PR.\n",
            "this should be removed as we don't use mention the return value when it is null\n",
            "I agree with @stof \n",
            "It cannot as this method is part of PasswordEncoderInterface.\n",
            "missing whitespace after the `if`.\n",
            "But this is not a use case we need to support. getCode should return an integer.\n",
            "I prefer the current way.\n",
            "You must revert these changes as they don't add any value.\n",
            "Why do you change these versions?\n",
            "I don't why we should provide a dist file as you should not have to modify the autoloader.\n",
            "You have too many whitespaces beween the type hint and the variable name\n",
            "done\n",
            "this is the default behavior of PHP, so that should be removed.\n",
            "I don't see the need to add something that does nothing, it should be removed.\n",
            "Can you remove the whitespace after `!`?\n",
            "You need to remove the space between else and if\n",
            "I agree with @pborreli \n",
            "That's yet another BC break that is not needed. Let's keep the possibility to have a `this` parameter, that does not hurt anyway.\n",
            "Can you use `assertCount()` here?\n",
            "what about using `stream_is_local()` like we do elsewhere in the framework?\n",
            "we don't put dots at the end of the @... lines\n",
            "Because I trust @Seldaek who spent time doing benchmarks on real-world apps.\n",
            "Why have you changed `EXTR_SKIP` by `EXTR_OVERIWRITE`?\n",
            "The block of code above should be kept in the ifs to avoid doing to much work when we need to return false.\n",
            "I prefer the BC break.\n",
            "Indeed, this is a blocker.\n",
            "What about moving the setter to the PhpDumper class, and move the code in Kernel from the container to where we create the PhpDumper?\n",
            "If we move the setter from the Container to the PhpDumper, this code should be moved where we create the PhpDumper in this file. That's still not  perfect , but better as there is only one  hack .\n",
            "this should be removed (the @api tag).\n",
            "The 2 above use statements can be removed now.\n",
            "I think we need to remove this getter as there is no need to expose it.\n",
            "You need to check that there is a proxy instantiator (or if you cannot create one -- RealServiceInstantiator does not exist), if not, an exception should be thrown.\n",
            "I would not expose a getter for the proxy dumper.\n",
            "All the @api tags must be removed.\n",
            "private or you can move this code where you are using it as there is only one occurrence.\n",
            "everywhere in the PR. The @api tags are added later on.\n",
            "missing dot at the end of the sentence.\n",
            "I'm pretty sure that this is going to break stuff. Don't remember right now, but I'm pretty sure that those methods was protected for a very good reason.\n",
            "You should add a lazy service in a file for which we generate a PHP cache file to check that what is generated looks good.\n",
            "I would have written:\n\n``` php\nwhile (count($result) < $limit && $line = $this->readLineFromFile($file)) {\n```\n",
            "Indeed. I have not changed this part of the old PR.\n",
            "fixed now\n",
            "right, done.\n",
            "Something like this? {{ path( foo , { foo: [1, 2] }) }}?\n",
            "done\n",
            "It was a typo. It is at the right place as we are talking about BrowserKit here and not HttpKernel.\n",
            "fixed\n",
            "This is really costly. A better would be to reset all catalogues ($this->catalogues) when a resource is adding for a fallback locale.\n",
            "Can you put the whole exception on one line, please.\n",
            "Can you also keep everything on one line here?\n",
            "That won't work as the Client can be re-used for several requests. So, the redirect count must be reset each time there is a new request handled by the client.\n",
            "we are not using `yaml_encode` anymore in the profiler but `json_encode` instead. And to avoid blackslashes, you must use `|json_encode(64 b-or 256)`\n",
            "It's done this way for a reason: because those constant do not exist on all Symfony PHP supported versions. So, using constants would break on those versions of PHP.\n",
            "should probably be `testDumpFile()` (no s)\n",
            "both done\n",
            "done\n",
            "see a4abfb955\n",
            "see a4abfb955\n",
            "Can you convert this to a static array definition, like:\n\n``` php\nstatic $errors = array(\n    UPLOAD_ERR_INI_SIZE => 'The file ...',\n    UPLOAD_... => ...,\n);\n```\n",
            "locally.\n",
            "You are reintroducing the exact same bug as we had before synchronized services. Using the response event is not an option here as it is not always called (think of a sub-request that throws an exception for instance).\n",
            "should accept null by default for BC.\n",
            "What about marking it private?\n",
            "That's a BC break. Not sure how to deal with it. The only thing that comes to my mind is to not used the new request context and keep the old way.\n",
            "Yes, the more specific, the better.\n",
            "You must start the namespaces with a `\\`.\n",
            "You should use the following to convert encodings (like done in other parts of the framework):\n\n``` php\n        if (function_exists('mb_convert_encoding')) {\n            return mb_convert_encoding($string, $to, $from);\n        } elseif (function_exists('iconv')) {\n            return iconv($from, $to, $string);\n        }\n\n        throw new \\RuntimeException('No suitable convert encoding function (use UTF-8 as your encoding or install the iconv or mbstring extension).');\n```\n",
            "You should removed those constants and use plain strings instead in the code.\n",
            "must be `$source` instead of `(string) $translation->source`\n",
            "You should just use `XliffFileLoader` and add a blank line before this line.\n",
            "This must be reverted (same below).\n",
            "there are two other occurrences of this that should also be changed in the same way.\n",
            "other occurrences of the `stop()` call wrapped with a `try/catch` block.\n",
            "nevermind, I'm too tired.\n",
            "what about having a `__toString()` on all other Input classes.\n",
            "you need to keep the comment, which is still relevant.\n",
            "This is a BC break as before, `-q` always won over `-v`. That should be fixed.\n",
            "I would say: `Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug`.\n",
            "@Seldaek and I commented at the same time ;)\n",
            "no, the whole exception should be on one line.\n",
            "let's follow our (my?) conventions here. Everything on one line whenever possible. I began using sprintf for two reasons: visibility and the possibility to add translations at some point easily.\n",
            "That should not be tagged with `@api`\n",
            "The explanation block should probably be moved to the `getClientIp()` method as people should mostly use it instead of this one. You should also add a `@see getClientIp`.\n",
            "this blank line should be removed.\n",
            "you should add a space before `{`\n",
            "you should remove this blank line.\n",
            "Can you add a test for the multiselect?\n",
            "yes, good catch.\n",
            "you need to add a whitespace after `,`\n",
            "@lyrixx is right, we don't do this in Symfony.\n",
            "there is no whitespace after the `!` operator.\n",
            "I would have dealt with this in the same condition below (line 102) and set the type there when pos is 0.\n",
            "isn't it equivalent to `0 === $pos`?\n",
            "The first $pos variable, not the second one.\n",
            "there is an extra blank line here that should be removed.\n",
            "When comparing to `null`, you should use `!==`. Also, we use `null !== $array` in Symfony.\n",
            "This sentence looks weird.\n",
            "what about using `on`, `off`, and `off_lax` to be consistent with the configuration options?\n",
            "I would set the default value to be the one that was implicitly used in 2.2\n",
            "we don't use dots at the end of argument docs.\n",
            "we do use dots at the end of exception messages.\n",
            "small typo: there is a double t `testtStart...`\n",
            "I mean: `const NO_START_ON_DEMAND_STRICT = 'off'`. So using  `on`, `off`, and `off_lax` for values instead of 0, 1, and 2.\n",
            "You should also add it here (for a better BC).\n",
            "Consistency does matter. You should add them back. Sorry for the trouble.\n",
            "All exception messages must end with a dot.\n",
            "Looks good to me.\n",
            "There is some missing dots at the end of exception messages (and you removed some as well).\n",
            "Can you push your changes?\n",
            "This change should be reverted.\n",
            "you should keep the `@throws` lines after the `@return` one like it was before. We also try to document when each exception is thrown.\n",
            "Can you remove those markup as there are not standard Markdown and we are not using them.\n",
            "Can you put everything on the same line? Also, it's not just about it being not secure, so I think something like  Running the PHP built-in server in a production environment is NOT recommended  would be better.\n",
            "Same as above, the whole method call should be on the same line.\n",
            "we don't put whitespace before and after a dot in Symfony.\n",
            "That's not how we document function. The first line must say what it does (something like `Sets the node for the form`). And then,after a blank line, you can explain what it expects (what you've written here).\n",
            "Can you remove the dots at the end of this line and the line above?\n",
            "Like done in other parts of the framework, you should also support when mbstring is not available and fallback to the normal strlen function.\n",
            "Can you remove the whitespace around the dot (same above)?\n",
            "instead of `uniqid`, you should use `sha1(uniqid(mt_rand(), true))` as done elsewhere in the framework.\n",
            "`ENT_SUBSTITUTE` is PHP 5.4 only. So, you should add:\n\n```\nif (!defined('ENT_SUBSTITUTE')) {\n    define('ENT_SUBSTITUTE', 8);\n}\n```\n",
            "You should also escape the attribute name\n",
            "should be reverted\n",
            "I would call it `attributes`.\n",
            "The `id` should be added to the array of attributes.\n",
            "move it up! (like in the other classes... at the top)\n",
            "should be `$options`, no?\n",
            "Because of the `setExitCode` method that does not belong to this class.\n",
            "I wanted to use composition at first, but as the Application class has so many public methods (about 30 IIRC), it would make the implementation very verbose.\n",
            "I don't think this is a sign of anything and stability is more important here than anything else. As the new Applicaiton class is able to work with and without an event dispatcher, we can even merge everything back to the main Application class without any BC break. What do you/others think about this possibility?\n",
            "@schmittjoh see f7336d0\n",
            "This is a BC break as the signature is not the same anymore. You should add another method that enables to switch on/off the HTML extension.\n",
            "I'm going to make the change.\n",
            "`--xml` is still supported, so we must convert it to the right format too.\n",
            "we have standardize to use `sprintf` for exception messages.\n",
            "You must add `Deprecated since version 2.3, to be removed in 3.0.`.\n",
            "Can you remove the blank lines between @param lines?\n",
            "As this is the interface, you must add some description of the methods.\n",
            "If the format is not registered, you must throw an Exception.\n",
            "I would move this method to the proxy instead. The only proxy method could then be `describe()` like here for the helper.\n",
            "Sure, I did not added anything yet as this is just to start the discussion. And dependencies is indeed one topic.\n",
            "In fact, it is not required but if you have it, you have some extra features. The same goes with HttpKernel (and the special handling of HTTP exception classes).\n",
            "That's not a hard dep as you can get the content and the css directly.\n",
            "@stof is right.\n",
            "That will be changed when this PR is merged.\n",
            "fixed\n",
            "fixed\n",
            "The changes for Symfony SE is here: symfony/symfony-standard#523\n",
            "Symfony does not require mbstring to be installed. So, this should only be done if it is available (this is already done in many other places in the framework).\n",
            "I would not rename it for BC.\n",
            "for BC reasons, I would keep the original name.\n",
            "Please, don't reorder the use statements as it could make merging more difficult later on.\n",
            "As the signature changes, it should be done in master.\n",
            "The snippet from @Tobion is what I would have used.\n\nAlso, I thought about that before and I did not do it at that time as semantically, the time does not mean the same thing depending on whether we have a kernel or not. So, if we want to go down this road, I would just use the variable from PHP and remove usage of our own start time.\n",
            "I'm just saying that the times won't be about the same thing f you have a Kernel or not, which could be confusing.\n\nAlso, the time by itself is not that important. The difference between 2 pages is what is interesting.\n",
            "I would create 2 methods: `getNewMessages()`, `getObsoleteMessages()`.\n",
            "And a `getMessages()` method that returns the current messages.\n",
            "What about `Symfony\\Component\\Translation\\Catalogue\\OperationInterface`?\n",
            "What about Symfony\\Component\\Translation\\Catalogue\\Diff?\n",
            "Now that I see them, `MergeOperation` and `DiffOperation` would be more consistent with our naming conventions.\n",
            "`DiffOperation` would be better\n",
            "You can just remove the query string altogether as it will always only contain attributes.\n",
            "Can you inline the method instead?\n",
            "Why not:\n\n```\nforeach (array_reverse($clientIps) as $clientIp) {\n    foreach ($trustedProxies as $trustedProxy) {\n        if (IpUtils::checkIp($clientIp, $trustedProxy)) {\n            continue;\n        }\n    }\n\n    return $clientIp;\n}\n```\n",
            "`mb_string` is not required for Symfony.\n",
            "What about `sha1(uniqid(mt_rand(), true))` ?\n",
            "The `var_dump` should probably be removed.\n",
            "Can you use a regular `if` clause here?\n",
            "I definitely prefer an `if` clause here.\n",
            "Nothing gets added to 2.0 as it is not maintained anymore.\n",
            "You've probably used a tab here instead of spaces.\n",
            "Don't we need to keep the `null === $this->cwd` condition?\n",
            "it's not a requirement, only for testing, so it should be moved to the `require-dev` section.\n",
            "it must be moved to the suggest section as it is not a requirement. If not available, an exception should be thrown when trying to use the function.\n",
            "What is it for? If this is just for the unit tests, this should be removed and reflection should be used instead.\n",
            "yes, please.\n",
            "done\n",
            "The attributes you are adding are specific to listeners. That was proposed before and rejected. As @bamarni said, anything should be supported, so we won't add all possible attributes for all possible tags.\n",
            "Thos two tests should be kept and must work. If not, this is a BC break. And indeed, I think your change does not change these.\n",
            "we don't use `is_null` in Symfony but `null !==` instead.\n",
            "I think we need two methods here: one to add/register a new adapter (already covered by the `addAdapter()` method) and one to select the adapter to be used by default (the name can be `setAdapter()` as in this PR but it should take the adapter name as its only argument).\n",
            "`Adapter  %s  does not exist.`.\n",
            "Why do we need to call useBestAdapter() here, that seems counter-intuitive.\n",
            "`Sets the selected adapter to the best one according to the current platform the code is run on.`\n",
            "I mean, waht about creating a private method named `resetAdapterSelection()`?\n",
            "Or `false` to remove the node ;)\n",
            "I would set it to `true` by default (as this is what is done in the Symfony Standard Edition).\n",
            "there is a missing space after the `if`.\n",
            "there is a missing space after the `if`.\n",
            "This can be moved to the condition directly without creating a temp variable.\n",
            "You should replace `null === $request->server->get('HTTPS')` by `$request->isSecure()`.\n",
            "we definitely list bug fixes in releases (but there are added when I make a release -- that's also why good commit messages are important), I don't see what you are referring to here.\n",
            "I don't like the fact that we rely on PHP global variables here. So, this change should target 2.1+ as the Request object is an argument of the prepare() method as of Symfony 2.1.\n",
            "2.0 should not be maintained anymore anyway.\n",
            "nope, we don't trigger errors for things that are deprecated in 3.0. We will do that but only just before 3.0.\n",
            "fixed\n",
            "fixed\n",
            "symfony/symfony-docs#2246\n",
            "fixed\n",
            "right, I've just copied the config from the xml file. Simplified now.\n",
            "The mode is wrong on this file too.\n",
            "My approach is consistent: the master request is handled by the reverse proxy and must keep the information from its client. The sub-request is sent by the reverse proxy and has the local IP address.\n",
            "well, one can argue can you can only trust the proxy if the forwarded_for option is set to true (which is the default). If you turn off this option, then, the proxy cannot be trusted anymore, so theere is no security issue if everything is configured as it should be. As setting this option to false is probably not a common case, I'm going to remove this option.\n",
            "Not really. This is just a nice reminder for when 2.3 will be released. I hope that then, we will be able to change it to `>=2.2,<2.4-dev` most of the time (in the 2.2 branch and of course in the 2.3 one as well).\n",
            "No, it does not start the session.\n",
            "I've renamed it to synchronizers as this is more accurate now.\n",
            "That's the case, this method is not called when using a dumped container (a dumper container extends Container and not ContainerBuilder). Here is an example of a dumped code (see the unit tests below):\n\n``` php\n    protected function synchronizeRequestService()\n    {\n        if ($this->initialized('depends_on_request')) {\n            $this->get('depends_on_request')->setRequest($this->get('request', ContainerInterface::NULL_ON_INVALID_REFERENCE));\n        }\n    }\n```\n\nAnd for services without the `syncrhonized` flag, the method does not even exist.\n",
            "Yes, when you leave the request scope, the Request is null.\n",
            "I've added a safeguard.\n",
            "You're right.\n",
            "#6140 could be useful to fix this.\n",
            "IMO, 29e7b8a fixes the issue quite nicely (part of this commit is actually another fix that I've submitted as another PR -- #7450).\n",
            "That would not work as it uses `has` to determine of the service is available or not.\n",
            "That's not a problem when using the dumper as it just means that when you use ignore, there is one more check. If not, I've slightly changed my patch to take care of that.\n",
            "No we can't as the value is used in the user code:\n\n``` php\nfunction setRequest($request = null)\n{\n}\n```\n",
            "This should be removed as PHP does that automatically.\n",
            "As I said in the issue, we cannot use `asset` or point to any public files to keep the web profiler independent of Symfony, the full-stack framework. For instance, the web profiler works with Silex and Drupal without any modification (see https://github.com/sensiolabs/Silex-WebProfiler for Silex). That won't be the case anymore with this change.\n",
            "there is a typo REQUES_TIME_FLOAT -> REQUEST_TIME_FLOAT\n\nCan you add a unit test covering both cases?\n",
            "I would have named it `setPrefix()`, which would be weird when you do not pass any argument.\n",
            "IFAIU, it should not happen as the header is different depending on the server configuration.\n",
            "They are encoded because the whole thing is the value for the `_path` parameter. If you use = and & instead, it would not work.\n",
            "because the items are the key/value pairs you would have used for the placeholder in the path if you would have created a dedicated route.\n",
            "Why?\n",
            "Why is it more useful than creating a regular class?\n",
            "consistency with what?\n",
            "Returning `false` is a good practice and it is used in a lot of different places in the framework.\n",
            "and `false` means that we fail to find the executable.\n",
            "renamed to `fragment_rendering_strategy`\n",
            "good catch, fixed.\n",
            "fixed\n",
            "fixed\n",
            "renamed to `renderFragmentStrategy`\n",
            "renamed to `renderFragment`\n",
            "the sub-framework is actually independent of the templating layer (except for the HInclude renderer where it is optional). \n",
            "You are right, fixed now.\n",
            "done\n",
            "fixed\n",
            "fixed\n",
            "removed as it is not relevant anymore\n",
            "that's a debate we had in the past. But as for ESI, we decided to keep Booleans here.\n",
            "I would keep both as technically the both work. We can probably note that the function is the preferred way though.\n",
            "I don't think that this is a good idea. There is no `strategy` key in this case, and I don't why we would want to remove it (we don't remove any other non-valid keys).\n",
            "the big difference being that it is a legitimate option above.\n",
            "To be consistent with other error message, what about: `Unable to generate the URL as the  %s  route does not exist`.\n",
            ":+1:\n",
            "Actually, this is not a BC break as those methods have been introduced in 2.2 (see #5688). So, this can be replaced with something like  added ArrayNodeDefinition::canBeEnabled() and ArrayNodeDefinition::canBeDisabled() to simplify optional configuration management \n",
            "I would put the stopwatch as the last argument here.\n",
            "I need help here ;)\n\nWhat about  rendering_proxy ,  router_proxy ?\n",
            "Like ESI (and many other things in Symfony), everything that is optional must be explicitly enabled (also because it has some performance overhead).\n",
            "... and see above\n",
            "Good catch, done\n",
            "I've renamed `proxy` to `router_proxy`. Even if we already have a router entry and even if it does not use the Router component, this is still the best name that describes what it does: it routes a request before the default router.\n\nI'm open to change it again to a better name, but I cannot think of one.\n",
            "done\n",
            "fixed\n",
            "fixed\n",
            "This is wrong. The `addDefaultsIfNotSet()` will always enable the configuration even if it is not present. That's not what we want as explained in my previous comment.\n",
            "I've just talked with @vicb about this:\n- the current configuration works just fine\n- the one proposed by Victor does not work (as you need to explicitly set `enabled: true` to enable it).\n",
            "This should be the first line instead of being in the middle. That eases people who follow the CHANGELOG files.\n",
            "I agree\n",
            "I would make it disabled by default. So, it should be `canbeenabled` here.\n",
            "I thought that we decided to only support PHP >= 5.3.7 and just throw an exception for earlier PHP version.\n",
            "Why not just use `(int) $cost`?\n",
            "AFAIU, earlier versions of PHP has security issues and as we have other password encoders, why would we want to support PHP versions with known issues?\n",
            "In case of a test, the behavior is not as before. This is definitely a BC break.\n",
            "Why is it useful?\n",
            "I did not create this interface because I don't see why you would want to have another implementation. And you don't need an interface for extending anyway.\n",
            "If I understand correctly, you only need the extension, so I would just keep it and change the basename to a random one (just to avoid weird characters).\n",
            "Should probably be something like  Unable to replace ... \n",
            "You should use 4 spaces for indentation instead of 2.\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "oops, sorry, fixed now.\n",
            "done\n",
            "I would have injected the file path as an argument, that makes the method independent of the way we store the file path.\n",
            "why?\n",
            "ok, let's just use an empty string then.\n",
            "You should add that this is deprecated in 2.2 and that it will be removed in 3.0 (I think that removing support in 2.3 would be too fast).\n",
            "This class should be marked as deprecated in 2.2 and removed in 3.0.\n",
            "@dlsniper You are right. But in this specific case (and I commented on some PRs for the form framework as well), there is no need to break BC too fast (the fact that we keep those methods around don't add any maintenance burden and don't slow things down). Of course, the documentation should only use the new methods.\n\n@Seldaek I'm fine with the removal of the trigger_error calls.\n",
            "It can never return `true`. So, the current phpdoc is right.\n",
            "What about removing the `isWindows` property altogether as a call to `defined` should be fast enough (and it's only used twice in the file)?\n",
            " Updates the _standard_ output of the process ?\n",
            "should be  doesn't  and the  s  on makes should be removed.\n",
            "No need to use `env` here.\n",
            "yes, let's remove `env` in front of all `stty` calls.\n",
            "Both alternatives looks  complex  as you don't understand the purpose of this argument. What allowing `null` as the default value and create a new `ReflectionGraph` instance in that case? That would avoid breaking BC and would be the same as alternative 1 above.\n",
            "no space between else and if\n",
            "typo: locale -> currency\n",
            "double whitespace after the `=`\n",
            "not pushed yet?\n",
            "@bschussek Can you take @stof comment into account?\n",
            "You are right. We will trigger the error just before 3.0. For now, it should only be documented in the CHANGELOG for 3.0.\n",
            "I forgot to mention that this refactoring was also done to simplify code in Drupal.\n",
            "I've done that just for consistency.\n",
            "No, it is a test about importing other resources (some in the ini formats and others in the YAML format).\n",
            "I've tried to come up with a name starting with `is` but did not find one.\n",
            "good, I've changed the name to @stof proposal.\n",
            "fixed\n",
            "Renaming this class is ok for me as this is not a widely used class anyway (and it was added recently).\n",
            "why is commented? \n",
            "Probably not. Fatal errors only.\n",
            "Splitting the file in two makes sense.\n",
            "typo: `log them`\n",
            "`getDate()` always returns a \\DateTime instance. So, this cannot be done here.\n",
            "Returning a date in the past looks good to me.\n",
            "I've made a change but it is still not perfect when the default strategy is involved and an exception is thrown. But I don't know how to fix this elegantly (and the way it's done in HttpContentRenderer is far from perfect too).\n\nThe only idea I have is to create a `RequestAwareInterface` and when a service implements that, we automatically call the setRequest when we enter the request scope and remove it/reset the previous one when leave the request scope. I've not had a look at how we can implement that, but does not look easy to do that without performance impact.\n",
            "I had several possible names like: `SubRequestRenderingStrategy`, `HttpKernelRenderingStrategy`, `FallbackRenderingStrategy`, and `DefaultRenderingStrategy`. In the end, I chose `DefaultRenderingStrategy`.\n",
            "No need for a prefix as you need to import it in your routing file and use a prefix (like it is done today with the internal routes).\n",
            "fixed\n",
            "makes sense, done.\n",
            "done\n",
            "I don't understand. sendContent does call the callback which does output the content.\n",
            "fixed\n",
            "I thought about that, but because of a bug in the PHPDumper, that's not possible for hinclude. I'm working on fixing the bug so that we can use private services later on.\n",
            "which makes sense as when using streaming, you don't return anything, you output the content as it comes.\n",
            "I've fixed the phpdoc to take this case into account.\n",
            "fixed\n",
            "No:\n\n``` jinja\n{{ render(controller('B:C:A', {_format: 'json'})) }}\n```\n",
            "fixed\n",
            "I've just copied the existing code. I've refactored the code now. So, it should be fixed.\n",
            "fixed\n",
            "fixed now.\n",
            "fixed\n",
            "see #6565 for the bug fix\n",
            "fair enough, done\n",
            "The controller name is really freeform. As mentioned by @Koc, it can be a service controller (but that's just an example as Class::method also works).\n",
            "fixed\n",
            "I thought about that too but I'm not sure that this is needed often.\n",
            "done\n",
            "probably\n",
            "done.\n",
            "fixed\n",
            "I've renamed the method to `validateRequest` as it also validates the HTTP method. The inline comments already explain what it does.\n",
            "no, it must not. I'm also a pedant. And this is a comment for the core team only. It must not be part of the documentation.\n",
            "The sub-title was missing. fixed now.\n",
            "The strategy is now its own parameter.\n",
            "I think this is a very bad idea to be able to change the default strategy for many reasons:\n- First and foremost, using `render()` is a way to render a  partial  that needs some logic associated with it (think `include` vs `render`). Then, you might wat to use another strategy like ESI or hinclude.\n- Because we have many bundles in Symfony (like in Drupal with modules) and they should all be able to rely on something stable. I try to limit the number of moving things (less options, less settings, more predictability).\n- Each rendering strategy has its own set of options (like `alt` for ESI or `default` for hinclude), so the strategy should be chosen carefully by the developer and configured properly. If you can change the strategy globally, that could break things easily (and no, we won't add yet another setting to be able to set the default strategy global settings).\n- Lastly, I don't think it makes sense to use the ESI strategy for all the render calls (and the same goes for hinclude too). So, I fail to see the real-world use case.\n\nAnd if you really want to change the default strategy or if you want to implement your own default strategy, just create a strategy with the `default` name and register it in place of the standard one.\n",
            "The default strategy _should_ be `DefaultRenderingStrategy` (for the reasons I've explained above). The type hint is the interface so that you can change the default strategy class if you need to adjust it). I've also added a comment about why this is the case.\n",
            "No, as this class is still used in the DIC, which means that everyone will have the deprecated message without being able to fix it. And we cannot switch to the new class as it does not have the `forward` and `render` methods. Anyway, I don't think that too many people need to care about this.\n",
            "done. There is no replacements.\n",
            "fixed\n",
            "I should be deprecated in 2.2 and removed in 2.3.\n",
            "I would call this method `reset()` instead. That being said, why not just creating a new instance of the builder?\n",
            "I agree with stof. Another example in Symfony is the Finder.\n",
            "Yes, that's what we suggested for the Finder as well.\n",
            "You are just bypassing the validation here, which is wrong. Have a look at the error message. If you want to allow negative numbers, you must change the `isValidName()` method instead.\n\nping @bschussek \n",
            "There is no need to copy/paste the phpdoc. Can you just replace it with \n\n```\n/**\n * {@inheritdoc}\n */\n```\n",
            "That's really ugly and slow.\n",
            "I don't think that using array as a type hint is required everywhere. It forbids the possibility to pass an ArrayAccess object for instance (which sometimes might works).\n",
            "- No, the position is a query string parameter and not a placeholder on the route\n- No need to use `url` as we know that everything is under the same host anyway.\n",
            "I've removed the manual query string. For the host, my point was that we don't need it anyway.\n",
            "So, your fear is that people just copy/paste what I've done here?\n",
            "ok, fair enough, I've changed `path()` calls to `urls()` calls.\n",
            "Ok, I'm reverting my change as Request::create() already take care of keeping the host and the scheme (the information is already part of the `server` array).\n",
            "This should be `$column, array $row` to be consistent with the rest of the framework.\n",
            "@umpirsky You were right, this method should be at the end like in the other helper classes.\n",
            "what about calling it `finishRendering`?\n",
            "mbstring is not a required deps for Symfony, so you need to check and act accordingly like it's done elsewhere in the framework.\n",
            "cleanup sound good to me.\n",
            "You are right. Your suggestion is much better. I've just rename it. Thanks.\n",
            "Sorry, already merged this PR. It probably makes sense to move the check, but the tests must be fixed as well then as they won't pass anymore.\n",
            "we should check that Finfo is actually available.\n",
            "Can you add a comment about when this occurs? (a reference to phar files should be enough)\n",
            "fixed\n",
            "I prefer the previous version which is IMO more readable.\n",
            "Why was it buggy? Sorry, but I don't get it.\n",
            "ah, sorry, I read too fast. That does answer my question.\n",
            "This is just another step towards making the web profiler useable for other projects using HttpKernel. So, I agree with you that this is not that interesting as is.\n",
            "No, as if the template is not found (see line 85), it will fallback to ExceptionHandler.\n",
            "right, fixed now.\n",
            "because we have two cases:\n- When TwigBundle is available (we could use an include in this case);\n- When we are using the ExceptionHandler, where the stylesheets can be retrieve via the `getStylesheet()` method.\n",
            "As I said before, this is just one step towards the holy grail.\n",
            "fixed\n",
            "this blank line should be removed\n",
            "extra blank line here\n",
            "Can you revert the CS change here?\n",
            "As said in the PSR, there is no hard limite for the line length, so the previous version was compliant.\n",
            "The indentation is wrong.\n",
            "Why do we need a cache layer? Is it really worth it?\n",
            "we can optimize this call on PHP > 5.3.6 by using the `DEBUG_BACKTRACE_IGNORE_ARGS` constant.\n",
            "You are not testing anything anymore here.\n",
            "This should be removed as this is done when we release\n",
            "You're right, fixed now. Thanks.\n",
            "`computeDeprecationCount` for the private method?\n",
            "Keep it the current way as this is how it is done everywhere else in the data collectors.\n",
            "Why do you have an array here? You never register more than one error handler.\n",
            "I would just rename this to `setLogger()` and keep the logger as a static variable (so you can get rid of the `addLogger` method).\n",
            "This should probably be moved to the `debug.xml` file as the `ErrorHander` is only registered when debug mode is on. We don't want this listener to run in the production env.\n",
            "You should convert your listener to a proper subscriber as done everywhere else in Symfony core.\n",
            "oops, sorry about that, that's already what you've done.\n",
            "this should be removed as this is done when we release, but a note in the CHANGELOG should be added instead.\n",
            "`src/Symfony/Bundle/TwigBundle/CHANGELOG.md`\n",
            "`ip` should be uppercased.\n",
            "There is no security issue when using this configuration setting. The only thing is that it is not as flexible as the new way.\n",
            "I don't understand your last message, but there are no security issues. When calling trustProxyData(), we now just assume that are trusting the last proxy, and as such we return the last value of the x-forwarded-for header.\n",
            "Why are you talking about sockets here? I don't get it. But anyways, the old method is safe as this is just a shortcut for `setTrustedProxies(array($request->server->get('REMOTE_ADDR'))`.\n",
            "This implementation is totally wrong. The string format for a plural message can be more complex than just `foo|bar`, you can have ranges, several plurals, ...\n\nThat's also why we have what we have right now. If you want to use translation, you need the translation component.\n.\n",
            "So, if I get you correctly, we are reinventing a way to  fake  plural messages? The source message has a convention where we have 2 messages separated by a pipe? If that's the case, then it should be documented.\n",
            "And for the record, you cannot say that we don't have complicated plural messages in the core validators, as any message needing plural is complicated in some languages (a message is never complex by itself, but the translation for some languages are complex).\n",
            "There is no need to create a temp variable.\n",
            "already fixed\n",
            "I agree with @Seldaek that `if`s would be better.\n",
            "should be `Boolean` instead of `bool`\n",
            "Can you add the reference to the relevant PHP bugs, so that we can remove this when it is fixed upstream? Thanks.\n",
            "Also, I'm not sure this is the right thing to do as for instance I have no problem running the test locally with PHP 5.4. Is it related to Travis somehow?\n",
            "fair enough. Can you add the references to the PHP bugs before I merge?\n",
            "This should probably be renamed to `DoctrineType` as `Doc` can have many different meanings.\n",
            " `{` should be on the next line.\n",
            " `{` should be on the next line.\n",
            "removing the `logout` method is not BC.\n",
            "`canceled` should be `cancelled`.\n",
            "I'm definitely -1 on all those changes. There is not valid reason to create a temporary variable and I don't why it would be better.\n",
            "I would have used `parent::set('expires', 0)` and `parent::set('pragma', 'no-cache')` instead.\n",
            "This change should be reverted as it breaks BC. This can be discussed for the master branch though.\n",
            "the condition should be added to the previous condition.\n",
            "should be reverted\n",
            "the `has()` check is not needed and can be safely removed.\n",
            "I would always return `0` here.\n",
            "You should remove one blank line here.\n",
            "You need to add a blank line above `@return`\n",
            "I'm fine with change this interface.\n",
            "What about using the new methods instead of the deprecated one here (where you pass additional arguments to addCollection)?\n",
            "I would remove this as the var is private anyway\n",
            "Can you remove this comment?\n",
            "that does not help and this is not needed as all the comments from this PR will be part of the merge commit.\n",
            "What's the benefit of adding this? I understand when it is an object, but here, this has little value.\n",
            "extra blank line here.\n",
            "Should be in the CHANGELOG instead.\n",
            "It should go into the CHANGELOG of the FrameworkBundle in the 2.2 section.\n",
            "I agree with this change, but then we probably need to change the `getTotalTime()` to `getTotalDuration()`.\n",
            "It was done on purpose as this is a  private  class.\n",
            "Just revert this change.\n",
            "Can we just use `mixed` then?\n",
            "That makes me think that when not using a RequestContext, there is no way to define global default parameters.\n",
            "Keep it like this.\n",
            "Constructors are always defined first.\n",
            "this should be moved at the top of the class like done in other similar situations.\n",
            "Do we really need to extract?\n",
            "Right now, this is always 0.\n\nAlso, the list of arguments for the constructors is already quite long, so added something that is never used makes little sense to me.\n",
            "This should be reverted as this file is automatically generated when we release a new version.\n",
            "should be `Gets`. And there is a missing dot at the end.\n",
            "These 2 lines seems unneeded.\n",
            "I would just name it `sort()`.\n",
            "Can you move this method after the `__construct` one?\n",
            "there is a missing space before `.=`.\n",
            "Why do you want to remove this part?\n",
            "For the record, this was introduced in #4524\n",
            "I would like to keep the class even in master if possible.\n",
            "@eventhorizonpl Keep in mind that trying to get 100% coverage for the sake of it is not a good goal. We only test for things that actually matter.\n",
            "This should be kept as `app` may not be available when not using the full-stack framework.\n",
            "`disactivated` should be `deactivated`\n",
            "`Ask` should be `Asks` and there is a missing dot at the end of the line.\n",
            "this blank line should be removed.\n",
            "this blank line should be removed.\n",
            "I would have stored the executable under a `Resources/bin` directory like done in some other components.\n",
            "I don't see the point. And honestly, changing the code just for the sake of it is never a good idea.\n",
            "I would have expected a test that asserts the the service was not set after catching the exception.\n",
            "no, we write tests for a reason. So, this test should still work.\n",
            "All summary lines must end with a dot.\n",
            "All summary lines must end with a dot.\n",
            "We are not consistent anyway as we go to `Resources/views/` when using the location notation. So, it was done for three main reasons: trying to be as far as possible as the current notation to avoid confusion (or not), removing something that is, by convention, always present anyway, and more importantly trying to be more agnostic for when the templates are used outside of the full-stack framework.\n\nNow, I'm open to any suggestion and if the majority think we need/can keep the bundle suffix, that would fine for me as well.\n",
            "For testing, just use the `setAccessible()` method on the reflected method like we do at other places already.\n",
            "What about just `runCommand()`?\n",
            "I also think that the second argument should be an instance of `InputInterface` instead of an array.\n",
            "The examples are wrong: the second argument must be an InputInterface instance.\n",
            "$consoleCommand can be renamed to $command.\n",
            "You can already do that by extending the application and overriding the `getDefaultInputDefinition` method.\n",
            "Can you make another PR just for the added tests? Thanks.\n",
            "fixed\n",
            "fixed\n",
            "Same for me. If everything went fine, let's the return be implicit.\n",
            "should be `Prepends` and should end with a dot.\n",
            "Wouldn't be better to move this extension to the DependencyInjection component?\n",
            "Wouldn't it be better to create a compiler pass class for that logic directly in the DependencyInjection component?\n",
            "Doing that in the merge extension pass seems good to me.\n\nWhat you describe about the rare case does not seem like something we want to support. \n",
            "What about determining the prepending extensions in the process method directly? That way, the Kernel won't have to know about them at all and everything would be part of the container.\n",
            "What is it for?\n",
            "using `utf8_encode` looks wrong to me. Using `base64_encode` instead like done in the PDO driver should be better.\n",
            "You need the remove the `@api` tag here (and the same goes for the other one).\n",
            "should be `Returns ...`\n",
            "should be `this one returns`.\n",
            "you need to remove the `s` for `datas`.\n",
            "This should be on one line only (same below).\n",
            "what about using `SIGKILL` as the default value?\n",
            "... or you could just keep `null` as the default value and set it to `SIGKILL` if $signal is `null` and not on Windows?\n",
            "Can you remove this and submit it in another PR? Thanks.\n",
            "I don't like the method signature change. I would prefer to add a new method for this use case. It also makes things more explicit.\n",
            "This is also not a change in the phpdoc and I would argue that we want a `PropertyPath` here (`ViolationPath` also implements `PropertyPathInterface`).\n",
            "Still, I don't see the point in changing the check to the interface. What's the point?\n",
            "merge conflict resolution problem.\n",
            "there is a missing space after `if`.\n",
            "We are using ` ` instead of `'` in sentences. So it should be ` %s ` instead of `'%s'`.\n",
            "This blank line should be removed\n",
            "Serialized with a capital letter.\n",
            "should be just `$config['enabled']`\n",
            "Those blank lines should be removed\n",
            "It would be better to not do that in the setUp method as most of the tests do not use this. What about just creating the directory when you actually need it?\n",
            "fixed, thanks.\n",
            "You have a typo (`tthorw`) and we use ` ` instead of ``` for variable delimiters (` %s ` instead of ``%s``)\n",
            "I don't understand this change? Can you explain it? ping @eriksencosta.\n",
            "Can you remove the group?\n",
            "This breaks BC.\n",
            "good\n",
            "good\n",
            "good\n",
            "good\n",
            "This PR has been merged ;)\n",
            "Can you remove the @todo tag?\n",
            "I'm against adding a TODO-3.0.md in the repository. Instead, create an issue on Github.\n",
            "I'm not against this change but then, `RequestHelper`, `SessionHelper` and `RouterHelper` should also be moved. What others think?\n",
            "This should be kept. If you explicitly pass `null` as a `$path`, it should be chnaged to `/`.\n",
            "Can you revert to everything on one line? (same below)\n",
            "There is an issue here. What if I call the `setHint()` method more than once? You should keep the original message. And when you call it with `null`, you need to revert to the original message.\n",
            "Can you do the same for the other exceptions? Thanks.\n",
            "If we find a non-deletable buffer, is it a good idea to just skip it and try to close the ones after it? \n",
            "Have you tested this change? I'm pretty sure it won't work.\n",
            "why not naming it `createTemporaryFiles` like you have `createEmptyFiles`?\n",
            "I agree\n",
            "@aerialls and @stloyd are correct. Plain English must be used for the source.\n",
            "I prefer plain English to be consistent with other message catalogues.\n",
            "I'm -1 for the introduction of a `::create()` method in general and I think it does not make sense to add it only on some exceptions.\n",
            "Can you put everything in one line to be consistent with symfony CS?\n",
            "Can you put everything in one line to be consistent with symfony CS?\n",
            "I've made the change after merging.\n",
            "it is\n",
            "This is a mistake.\n",
            "fixed\n",
            "We only add to the benchmark group test that are really slow. That's not the case here.\n",
            "Can you add the missing parts of the phpdoc? (same for the setter)\n",
            "I would just remove the constant altogether.\n",
            "The variable should probably be named `$profileIndexed`.\n",
            "fixed\n",
            "I prefer to have explicit SQL statements.\n",
            "done\n",
            "This is not required, `null` is fine.\n",
            "No need to mock it. Just use the NullSeedProvider if you want.\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "it's done this way everywhere else.\n",
            "Now, we disable openssl only for PHP < 5.3.4\n",
            "done\n",
            "done\n",
            "I've renamed the class back to SecureRandom.\n",
            "fixed\n",
            "renamed.\n",
            "fixed\n",
            "I have added SecureRandomInterface to be able to mock the class in tests (as I don't see how seed providers would be able to do the same easily).\n",
            "You should use `preg_quote` to escape the string.\n",
            "What about just `path()` and `notPath()` for the method names? `contains` is used to check the file content, so it seems wrong to reuse the word here. And `path()` is more consistent with `name()` as well.\n",
            "The @api tags must be removed.\n",
            "I've moved the test for PHP 5.4 to avoid iterating when not needed. Good catch, thanks.\n",
            "This addition is not needed as it was the old behavior anyway.\n",
            "I think we need to break things here as the setting does not work anyway.\n",
            "How do you  tell  people?\n",
            "done\n",
            "Good idea. Done.\n",
            "should be removed.\n",
            "Should be  Normalizes \n",
            "`$count = substr_count($command, ' ');` does the same, but faster\n",
            "fixed. thanks.\n",
            "should be `!empty($matches[2])`\n",
            "That only works in a very specific case but not in general. Also, what's the point?\n",
            "You should re-add the original authors here too.\n",
            "You should re-add the original authors here too.\n",
            "That should be named `getBuilder()` as it returns a builder instance.\n",
            "The phpdoc is wrong as there are 2 arguments to the method.\n",
            "IIUC, that should only be done on Windows ... but not on *nux systems where it will fail. And what when the bug will be fixed?\n",
            "missing `@` before return.\n",
            "This is wrong. The `hasSession()` must return `true` when a request is associated with a session, that's all. The fact that the session is started or not is not the same thing.\n",
            "Can you remove this `@api` tag?\n",
            "nevermind\n",
            "It is implicit.\n",
            "We don't document properties (except sometimes for objects).\n",
            "No need to document protected/private methods.\n",
            "I would not remove the PHP 5.3.2 compat layer yet as many people are still using it (even if there are known issues)\n",
            "amend please\n",
            "Yes, renaming to `matcher` is a good idea.\n",
            "Can you remove the `@api` tag here and below. We will mark them later on. Thanks.\n",
            "there is a missing space after the `if` keyword.\n",
            "So, is it ready to be merged? or do you need more time to investigate the above questions?\n",
            "I think it should read  for locale ...  instead of  for the locale ...  (same for the other two)\n",
            "You can revert this change as you have re-added the old method now.\n",
            "AFAIR, not all rendered templates are rendered by this method, far from it. So, your array can be incomplete. Last time I checked (and I think nothing big changed since then), it was just impossible to get all rendered templates.\n",
            "If you only rely on the autoload file from Composer, it means that running composer is mandatory, not optional (which is not what you say in the README). I would keep an autoloader in this file for the classes in the component, and if the autoloader is present in the vendor dir, then also load it (which means that you never die ;)).\n",
            "perfect.\n",
            "You need to add the composer autoloader if it exists.\n",
            "What hav you changed `.` with `!`? Is it on purpose? Does it have to be like that un Hungarian?\n",
            "What about using stdout by default here instead of throwing an exception?\n",
            "How does it work if you have more than one streamed sub-requests? The stream would be already closed for the second one.\n",
            "Why not close the stream here?\n",
            "You can now simplify this with just `sprintf('http://symfony.com/doc/$branch/index.html', Kernel::VERSION)`\n",
            "Or even better, just remove the `symfony_doc` data as we already have the version in `symfony_version` and move the URL directly into the template.\n",
            "You should also try to use iconv if it is enabled and mbstring is not.\n",
            "sounds good to me.\n",
            "why is it commented?\n",
            "no as we catch PHP notices to convert them to exceptions... except if we modify the error handling we have right now. But I'm not a big fan of PHP notices/warnings anyway as people don't really read them.\n",
            "I agree with @stof.\n",
            "no pbe here.\n",
            "I would just ignore files that cannot be read. Throwing an exception seems to be too much in this situation.\n",
            "Can you remove the try/catch block here?\n",
            "Can you use annotation instead as this is what we use everywhere else?\n",
            "You should also use an annotation here.\n",
            "$value is an array here.\n",
            "I m fine with multiple check per `isset` call.\n",
            "We don't use  use  statements for global PHP classes. So, these use statements should be removed.\n",
            "This should be changed to `5.3.3` as all other components min PHP version has been changed recently to this version.\n",
            "I agree with @Seldaek \n",
            "I never used the `+` operator with arrays as I find it counter-intuitive. Can you revert this change?\n",
            "This is always hidden; probably because of the `a` tag.\n",
            "Have a look at my screenshot, it is _never_ displayed (this is probably due to a media query side-effect).\n",
            "The difference with your demo is that you don't have the link, because you have not configured the IDE in your configuration. Force link to any value and you will see what I have on my computer.\n",
            "You should add the `@` sign to avoid the warning.\n",
            "As done with the event dispatcher code, let's ask the original authors if they are willing to let us release this code under MIT.\n",
            "and before and after `-`.\n",
            "the same goes for the `==` above as well.\n",
            "2 is a reserved error (misuse of shell builtins). For user-defined errors, you must use exist codes in the range of 64 - 113. But as we are not using those anywhere else, what about just using exceptions?\n",
            "Can you make a PR so that it is not lost? (same for the other comment)\n",
            "`method_exists` seems good enough to me.\n",
            "This should be removed. We reuse the same kernel for all requests.\n",
            "You should add a use statement at the top of the file and just use the class name here.\n",
            "no, not necessarily.\n",
            "the XSD file must be updated too to allow this new setting to be used in XML configuration files.\n",
            "hmmm, right, looks like we have never created it. Nevermind then.\n",
            "I think it should be re-added.\n",
            "fixed\n",
            "hmmm, I can see them used just below.\n",
            "As the method only call its parent, I suppose we can remove it, no?\n",
            "This change should be reverted\n",
            "should be reverted\n",
            "should be reverted\n",
            "There is no need to add parenthesis here.\n",
            "`setUrl` takes only one argument. Should be `setIp()` for the IP.\n",
            "those 2 lines should probably be removed\n",
            "typo: `require`\n",
            "What about moving the new constructor arguments at the end so that there is no BC break?\n",
            "I think `dar` should be `dat`, no?\n",
            "What is the use case for this? If you are using the Apache matcher, you always rely on `$_SERVER`.\n",
            "I think you need to use `$_SERVER` then as introducing a new setter just for testing is wrong IMO.\n",
            "Can you make a PR on symfony-standard as well for this change?\n",
            "The `prefix` can also have parameters in it. So, I would rename `hostnamePattern` to `hostnamePrefix` to be more consistent (this only needs to be done here).\n",
            "I would opt for dynamically chosen colors. Anyone wanting to work on a patch?\n",
            "My personal preference would be to rename this to `is_ajax`.\n",
            "There is no need to use `PHP_EOL` here (`\\n` is fine).\n",
            "That does not make sense to output this in the XML as the command name itself is not present anymore. I've no simple solution but that definitely does not feel right..\n",
            "Why have you changed this? I prefer the old way as it tested the output with a known output.\n",
            "Yes, please\n",
            "If it fails again, I'd rather prefer to be explicit and change the fixture file.\n",
            "Can you revert to what was done before and let's talk about improving this in another PR as this is not related to the main purpose of this PR anyway.\n",
            "You should keep it like it was as you need to keep how it was done in Symfony 2.0, not before your patch.\n",
            "ah, the default is actually the content of the template. Then you are right.\n",
            "But then, what about given a default template _name_ instead of the content of the template?\n",
            "Can we remove this option for now, merge this PR and see after that how we can solve this?\n",
            "oh, right. Can you just remove the comment and squash your commits then?\n",
            "As I said, the pattern should not be changed here as it will break existing security configurations.\n",
            "Can we come up with a less  scary  name than `unsecure`?\n",
            "`internal` means that this route should only be used by Symfony internals. So, a route in there can definitely be public.\n",
            "You are right.\n",
            "Right, as you said above, people will have to change the default security rule, which is fine. So, the only thing that we need to figure out is another name for unsecure. I think `_internal_public` is fine.\n",
            "I would be more comfortable if we can just deprecate their usage. Making `setMessage` as an alias to `addViolation` looks good to me but what about the other two? Would they only return the first message?\n",
            "I don't like the idea of having warnings. I think documentation is enough here.\n",
            "There is a bug in the API viewer that I will fix soon. So, you can use {@inheritdoc} if you want.\n",
            "The {@inheritdoc} support has been fixed in the API generator.\n",
            "definitely +1 on keeping the routing panel. I think it just makes sense to have a dedicated entry from a user perspective.\n",
            "I don't mind.\n",
            "Can you revert the changes for the ` ` character?\n",
            "We never use HTML in the PHPdoc, just use a Markdown list (with `*`)\n",
            "When quoting a string, you must use ` `.\n",
            "`recover()` only exists for the `Swift_FileSpool`, so this option should only be used when we have such an instance.\n",
            "What about doing validation when setting a new service instead of here? It seems more appropriate and probably faster too.\n",
            "I'm not sure I understand. If you don't allow setting a service with a wrong id, there is no need to check it when getting the service.\n",
            "You should throw a `ParseException` instead. Also, can you put the whole exception on one line?\n",
            "The component is able to load any YAML file, so you should remove `service` from the exception message and probably add some context information. Something like: 'Unable to parse  %s  as the file is not readable.'\n",
            "We don't put FQN in phpdocs. Instead, we add use statements and just use the short class names.\n",
            "How?\n",
            "In fact, the code was not accurate.\n",
            "This breaks unit tests. Can you update them accordingly?\n",
            "It must be the last one as we are sending the content here. The `send()` in the front controller is a no-op for streamed responses.\n",
            "It is useful to set the status code or some headers.\n",
            "changed\n",
            "changed\n",
            "no specific reason.\n",
            "fixed\n",
            "fixed\n",
            "moved.\n",
            "We can also make the `DelegatingEngine` implement the `StreamingEngineInterface` and throw an exception if the engine does not implement this interface in the `stream` method.\n",
            "Instead, I have added the possibility to changed the `StreamedResponse` callback after its creation and I've forced the `$response` argument to be an instance of `StreamedResponse` (see ~~1d368e75fc~~ 473741b9).\n",
            "done in ~~1d368e75fc~~ 473741b9\n",
            "The event listener is needed because we need to be in the request scope to be able to generate the response. If you send the response in the front controller, the request is not available anymore. \n",
            "You are right. This is a nice side-effect of having another interface for streaming. Fixed here: e462f7b6\n",
            "I've updated the `check_cs` script to enforce usage of  `elseif` (see 8d7a6e598d).\n",
            "@Seldaek: This should be possible. \n",
            "What about adding a new option instead of using the render tag content? It would be more consistent.\n",
            "This is a BC break. You should instead create a new route for not to be secured internal routes.\n",
            "Why have you added the memory option? It does not seem to be related to the stderr support.\n",
            "But then, you are not really testing stdout and sterr.\n",
            "It does not work when the FileBag contains a multi-dimensional array of UploadedFile instances (see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/FileBag.php#L85).\n",
            "Can you add some unit tests for the recursive array?\n",
            "hehe, that's a very good question; we should return the PHP format.\n",
            "Why have you added this use statement? Apparently, this is not used anywhere in this file.\n",
            "Wouldn't it make sense to pass the cache dir as an argument?\n",
            "Why not use http://www.php.net/manual/en/class.sessionhandler.php instead?\n",
            "Looks like this option is actually called `session.save_handler`, not `session.save_handlers` (http://www.php.net/manual/en/session.configuration.php#ini.session.save-handler).\n",
            "I agree with @bschussek.\n",
            "fixed\n",
            "fixed\n",
            "added. thanks.\n",
            "You must add a use statement for the API generator to work correctly.\n",
            "This is also how I like it.\n",
            "should be `} elseif (`\n",
            "This blank line should be removed.\n",
            "Correct. I have changed it after the merge.\n",
            "Could we just name it `erase_credentials`?\n",
            "I think you can safely replace this condition with `$file = new File((string) $file);`.\n",
            "If we do the string cast, this can be removed.\n",
            "This is wrong as the method behavior is totally different from the parent. Why not set the content disposition without overriding this method?\n",
            "You should just use the short class name and add a use statement for it at the beginning of the file.\n",
            "This is a non-standard Markdown markup and should be removed. As the code is not indented, any sane Markdown renderer won't output what is expected (try with http://daringfireball.net/projects/markdown/dingus).\n",
            "Spring, not Sling ;)\n",
            "Dont know what Apache Sling is actually. It's based on the Spring framework, which is not an Apache project.\n",
            "Should be  Sets default locale . The same goes for all other docblocks.\n",
            "Gets the default locale.\n",
            "Prepares...\n",
            "Gets...\n",
            "Why restricting this behavior to `UsernamePasswordToken` tokens?\n",
            "The session is not always enabled. That should be checked first.\n",
            "There is no need to cast to an `array` as this is already done in the `FieldTypeValidatorExtension`.\n",
            "To mimik the behavior without a closure, this should probably be casted to an `array`.\n",
            "I think you should return as early as possible. As soon as you have found the class name, there is no point in parsing the rest of the file.\n",
            "What about renaming it to just `ClassMap` as the main feature is the creation of the class map, not the dump part.\n",
            "This line looks wrong.\n",
            "Wrong phpdoc.\n",
            "Wrong phpdoc.\n",
            "I'm not comfortable with this code as AFAIR, it means that the Doctrine bundle must be registered before the Security one for this  hack  to work.\n",
            "Ignore my previous comment as this works as expected in master (but not in 2.0).\n",
            "As `users` is the only possible key, would it possible to remove it altogether and put the users configuration directly under the main key?\n",
            "The security listener factories are configured via a config key and a tag. We should probably configure both in the same way. I don't know which one is better, but it looks weird to have two different ways.\n",
            "Ok,let's keep in mind that we need another PR to change the way security listener factories are registered then.\n",
            "@stof: Now that this PR is merged, can you work on the refactoring of the security listener factories?\n",
            "Why would you want to remove the token if it is anonymous? I think we just need to remove it when it's set to null.\n",
            "`-1*strlen($match[0])` could be just `-strlen($match[0])`\n",
            "fixed\n",
            "fixed\n",
            "I don't know much about how `mb_detect_encoding` work, but it looks fragile (and what about the performance).\n",
            "yes, the phpdoc must be fixed and the `array` type hint removed.\n",
            "I like the convenience check of the first proposal.\n",
            "why not just use a switch statement that converts `'true'` to `true`, ...?\n",
            "I think you need to remove the section because all other formats only store translations for one language and one domain in a file.\n",
            "there is no space between `else` and `if`.\n",
            "occured -> occurred\n",
            "The mobile  hack  has been removed. @kriswallsimth added this hack a while back (don't remember why). I'm fine with getting rid of it but this is not entirely BC.\n",
            "looks like you have some tabs instead of spaces here.\n",
            "Why not using the more conventional `$path.'/'.$file.'~'` file name for the backup?\n",
            "formatter should probably be dumper here.\n",
            "I don't get why we need a prefix option.\n",
            "I'm not comfortable with the FileWrite class. How can we manage translations stored in a database?\n",
            "You should add a `setHelp()` method to describe how to use the command and the different arguments/options (especially the prefix as its usage is -- at least to me -- not obvious).\n",
            "You should remove the whitespaces around dots.\n",
            "You should list the options that are common to all dumpers if any.\n",
            "What about renaming `load` to `extract`? The PHPdoc should be clear about the fact that the new messages are injected into the passed catalogue.\n",
            "As I see it, this class is just an extractor based on some other ones. So, what about implementing the `ExtractorInterface` and renaming it to something like `ChainExtractor` (for consistency with the other components)?\n",
            "should be `extract` now\n",
            "should be `extract` now\n",
            "should be `extract` now\n",
            "@Seldaek is correct.\n",
            "What for? Anyway, the Translation component must stay standalone.\n",
            "The `PotFileLoader` file is not part of this PR, it should probably be removed.\n",
            "Even if Windows supports symlink, we don't want to use it.\n\nI don't remember the specifics, but it seems to not be that well supported (as per the php.net comment for instance,  Symlinks on windows  are created by Symlink() which accept only absolute paths  but not relative paths .relative paths on windows are not supported for symlinks ).\n",
            "I think the code that checks the interface here is unneeded as most of the time, the check will already have been done by the compiler pass.\n",
            "there should be no spaces around `.`.\n",
            "ok, fair enough, we are not going to fix all those errors.\n",
            "@kaiwa: we try to improve error messages on case by case basis.\n",
            "`if (false === $value || (empty($value) && '0' != $value))` is easier to understand for me. @EvanK: Can you squash your commits and rebase the PR on the symfony/2.0 branch as this is a bug fix? Thanks.\n",
            "should be something like:  Replaces placeholders with service container parameter values in route defaults \n",
            "Several problems here:\n- What if the developer is not using UTF-8 as its encoding?\n- What if `iconv` is not available? You should at least try some alternative like done in `PhpEngine` (https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Templating/PhpEngine.php#L488). And if no conversion tool is available, just fall back doing nothing (that's better than an exception).\n",
            "I would have kept the `for` loop as done in the original code (it's faster).\n",
            "Inflection is very different from slugification and does not solve the same problem. I've just had a quick look at the Inflector class in Lithium and the transliteration part is just plain wrong.\n",
            "You should add an empty line between @param and @return.\n",
            "47 is already used. Can you update to use 48 instead? and squash your commits? thanks.\n",
            "The file always exist at this point.\n",
            "there is whitespace around `.`.\n",
            "new lines should be written at the top of the file so that when you use `find()`, the results are actually the most recent ones (as done in the SQLite profiler storage). The other possibility is to read the file in reverse in the `find()` method.\n",
            "You missed a newline before the return call.\n",
            "Wouldn't it make sense to remove the directories too?\n",
            "It would be better to override the existing one. I know that this is not the case in the SQLite profiler storage class, but that's a bug IMO.\n",
            "The first line of a phpdoc is a sentence where the subject (the method name is omitted). So, the verb should have an ending `s`. Being a sentence, it also should end with a `.` (should be fixed everywhere in this file).\n",
            "Removing the object is probably what most people will want. We can also introduce an option to define the method to call in case of a removal. If it is defined, we call it, if not we fall back to the current code.\n",
            "added here: https://github.com/symfony/symfony/commit/f9229fe6d84a259c620a30e836fd3597c0d4df85\n",
            "The dialog helper is not always available, so this need to be checked.\n",
            "If `posix_isatty` is not available, interactive mode should be disabled, no?\n",
            "right, let's keep it as it is then.\n",
            "That does not work. If you pass a non-valid IP for instance, you will have the \\RuntimeException (as PHP returns false for non-valid address and if IP v6 is disabled).\n",
            "There should be a better way to determine IP v6 support.\n",
            "That's really just a big hack. Also, it's weird to remove these specific parameters and not others.\n",
            "Can you revert this kind of changes? Thanks.\n",
            "This change should also be reverted. Now that we are the RC phase, the diff should only be about  real  changes.\n",
            "This must be on one line\n",
            "same as above.\n",
            "I don't understand this piece of code. What are you trying to do?\n",
            "What about the possibility to use an object with a `__toString()` method?\n",
            "I think we need to enforce the content as a string. So, I'm in favor of just casting the  thing  we have to a string.\n",
            "I suppose that this code should be moved elsewhere, no?\n",
            "What if there is a resource in the context? That won't work. Do we really need to dump the context in the Profiler?\n",
            "We need to sanitize the context before displaying as a resource will make everything fails (the profiler data are serialized as well).\n",
            "what about removing the second part of the test as it will probably be as fast to always do the str_replace?\n\nAlso, can you add a test?\n",
            "What about defaulting to `%kernel.charset%`?\n",
            "The OpenSSL extension is available on Windows too:\n\nhttp://www.php.net/manual/en/openssl.installation.php\n",
            "Blocking can also happen if you don't have enough entropy on Linux systems too, no?\n",
            "I'm -1 on whitelisting. The goal of the URLValidator is to validate that the URL is semantically correct, not that the URL actually exists.\n",
            "I think we can remove more than just these 2 keys (basically all the options defined in the parent, no?)\n",
            "I only want to look for files in src/ and tests/. In my root directory, I have many files that are not committed.\n",
            "This function is defined as part of GD so it is not always available.\n",
            "This check is only relevant if some size constraints are set. If not, you need to skip it.\n",
            "The variable should probably be named something like `$sizeNotDetectedMessage`. And there is a missing `the` in the message: `The size of the image could not be detected`\n",
            "`minWidth` should be renamed to `min_width` or even better just `min`.\n",
            "same as above\n",
            "same as above.\n",
            "same as above.\n",
            "You should add a withespace after the `(string)` cast.\n",
            "Can you removed this empty method?\n",
            "In Symfony, we don't use the FQCN in phpdoc. We prefer to use the short name and add a use statement.\n",
            "This class has the @api tag, which means that we cannot change it anymore. Is it possible to create another interface and only allow doc generation if you implement this new interface. I know that it will complexify things a bit, but we cannot break the stable API anymore.\n",
            "what about the else? when you pass a fileLinkFormat that it not empty?\n",
            "That only works if your code and your browser are on the same machine.\n",
            "What's the point then?\n",
            "This description is not correct. The `no-cache` directive  forces any intermediate caches to obtain a new copy from the origin server. \n",
            "Class names as parameters have always been supported.\n",
            "I don't understand this line. Null value doesn't mean that it is deleted. Cookies are deleted because of the expiration time.\n",
            "The check is not needed. Negative values are valid as far as I know, no?\n",
            "ok\n",
            "You must remove this new condition as changing the method for a get request is not a good idea (GET request must be safe).\n",
            "I don't understand the goal of this option as this command generates clases based on the mapping information. So, the mapping information are already provided in YAML, XML, or annotations. And if you want to convert from one format to another, you can use the `doctrine:mapping:convert` command.\n",
            "Looks really confusing to me. If you are using YAML or XML, how annotations will help you fix your problem? When using annotations, I suppose it will do nothing, no?\n",
            "And again, there is already a command to convert from one format to the other. Let's this command do only one thing.\n",
            "There is no need for this option to generate classes that use annotations for the mapping. I still don't see the point. Can you give me a concrete example of what it solves?\n",
            "@stof: To make it clear: I'm +1 for the `--no-backup` option, but -1 for the `--annotate` option as I don't understand the goal.\n",
            "`spl_object_hash()` cannot be used as a unique identifier (collisions are possible).\n",
            "I have experienced this collision problem with Twig quite recently. In Twig, the problem is a bit different as we create and delete many nodes. But the possibility of a collision does exist.\n",
            "Why so you add 1 to the time column?\n",
            "`grapheme_strlen` only works with UTF-8.\n",
            "done, thanks for the tip.\n",
            "What if there is `::` somewhere in the path?\n",
            "I think splitting this PR into two is indeed a very good idea.\n",
            "This code is not equivalent to the previous one, for instance when the `$eventName` method does not exist.\n",
            "This is not equivalent to the previous code. When the controller is a string, we should have the function name, not `Closure`.\n",
            "It does not make sense to support anything but a Closure here.\n",
            "The class name has Closure in its name. Again, I don't to support anything else, especially because of the `supports` method.\n",
            "I think we need to keep the call to `move_uploaded_file()`. It makes the process more secure AFAIK.\n",
            "right, sorry, I missed it.\n",
            "Instead of throwing an exception, I would prefer that we create the directory.\n",
            "Here, we need to return a `File` object, not an `UploadedFile` object (the parent use `new self()`).\n",
            "I think this change is wrong. In a test, you should have the exact same behavior as in real-life; so you must return an `UploadedFile` instance.\n",
            "Yes, this is a change but it will be more consistent with how we deal with that in other places.\n",
            "The solution was the `moved` flag.\n",
            "Why have you removed this check?\n",
            "I think you can just return `$this->extension`, no?\n",
            "should probably read: `@return ExtensionInterface|null The default extension or null if no extension should be loaded automatically`\n",
            "It's to enforce the naming convention in the configuration files (the main entry).\n",
            "It's not arbitrary, it's the convention we have decided to enforce. This allows people to guess the entry name.\n\nOT: Can you connect to Jabber, I need your help.\n",
            "Does it make sense to order listeners this way?\n",
            "What is it for?\n",
            "Can you give me an example of a route? Because I'm pretty sure we don't need this weird `~` support.\n",
            "`null` is now a valid default value for route variables:\n\nhttps://github.com/symfony/symfony/commit/7e58c3f9768a94ab5b4989b743e5e59a2d76f75d\n\n@everzet: I'm not sure if there is a problem with empty default values but as the empty string was already supported, supporting null seems natural.\n",
            "I think the time spent is not really relevant/useful as there is nothing the user can do to optimize it.\n",
            "let's remove this.\n",
            "What about enabling this pass only when debug is enabled?\n",
            "It's not really about the file, but more about performance. And yes, I think we should also register ContainerBuilderDebugDumpPass only in debug mode.\n",
            "We don't use parameters in the core anymore (except for classes). This should be injected directly from the Extension class. You can find an example here: https://github.com/symfony/symfony/commit/ff5dd41471fab043ec6cac672ea805f71894d948\n",
            "I think there is no need to create a method for that.\n",
            "That won't work: What about `--configuration = ...` (notice the space between configuration and the equal sign)\n",
            "`exit()` is use here for 2 reasons:\n- As it's really early in the bootstrap code, there is no way you can catch them\n- Without these directories, Symfony2 is useless\n",
            "It's not exactly the same. An uncaught exception displays a lot of noise and it's not always easy to spot the error message.\n",
            "Because the problem is quite common, the message on the screen should be as short as possible. From my experience, people just don't get the error message from an exception message.\n",
            "I don't see a need to remove the exit() calls for this specific case.\n",
            "Again, this case is really specific as without being able to write in the `cache/` directory, nothing can happen. So, debugging is not really useful in that case.\n",
            "When do you need `getKernel()`?\n",
            "should probably be renamed to `supports` to be consistent with other parts of the framework.\n",
            "@everzet; I can help you test this feature on my Mac.\n",
            "the code is fine like this. Using call_user_func is slower and it obfuscate the code.\n",
            "Could be:   Class  %s  could not be found - check the class name or your autoloader configuration \n",
            "If other autoloaders are registered, the error messages should be a bit different (instead of being definitive, it should suggest that another autoloader might be misconfigured -- don't know exactly how to say that in a concise way).\n",
            "should be 0777 to respect the current umask.\n",
            "Can you revert this change as a Controller as a suffix is just a convention; and if you are using annotations, this convention is not really needed. So, I'm +1 for  all the changes in this PR except this specific one. Thanks.\n",
            "I'd like to keep the current way. I find it way more readable.\n",
            "Also, it allows to add new lines easily.\n",
            "Boolean must be written as  Boolean , not  boolean .\n",
            "Why do you need this change?\n",
            "I think it should read:  Returns the template name. .\n",
            "What about calling it `getLogicalName()` instead?\n",
            "ok, I'm now just waiting for my other comments to be taken into account before actually merging this PR.\n",
            "I fail to see how your code is equivalent to the old one.\n",
            "That's weird. If I added this at some point, it was probably to fix something.\n",
            "That's typically a method that should now be private ;)\n",
            "This code is SQLite specific and will depend on the database you use.\n",
            "Can you fix the coding standard? (http://symfony.com/doc/2.0/contributing/code/standards.html)\n",
            "would have been nice to also put me as an author as I actually wrote most of that code ;)\n",
            "This is should not be executable (644 -> 755). Should be reverted to 644\n",
            "} catch {\n",
            "fabien@symfony.com\n",
            "That's still the SQLite version here, no?\n",
            "no space around `.`\n",
            "we don't have any events in the core except for the HTTP kernel. I'd like to avoid them if possible.\n",
            "You can use this instead:\n\n```\n$fs = new Filesystem();\n$fs->remove($dir);\n```\n",
            "For MySQL, this must be UTF8. I think , we need to remove the default value and skip it if it's not explicitly defined by the user.\n",
            "I would have chosen INFO as the default priority as we only use INFO or DEBUG in the core.\n",
            "Nope, that's only for bundles.\n",
            "I would have said: `No forms were submitted for this request.`\n",
            "Should be  No invalid forms detected for this request.  I think we are using `<em>` in the web profiler for such cases.\n",
            "Let's finish this PR first, we will be able to add more stuff afterwards.\n",
            "2 problems here:\n- the `ajax_layout.html.twig` template does not exist.\n- the `@` notation must be used in the web profiler.\n\nSo, this line should be:\n\n``` php\n{% extends '@WebProfiler/Profiler/layout.html.twig' %}\n```\n",
            "All template references must use the `@` notation.\n",
            "``` php\n    {% include '@WebProfiler/Profiler/toolbar_item.html.twig' with { 'link': profiler_url } %}\n```\n",
            "This block should be unindented\n",
            "When only one form is present, I would say something along the lines of: `Form Errors`\n",
            "When there is only one form, I would remove this headline and move the name into the `<h2>` tag instead: `Form Errors for {{ formName }}`.\n",
            "I would always display all forms, even if there are no errors.\n",
            "So, when they are no errors for a form, I would say `The form is valid` or `No errors for this form`.\n",
            "here is a missing space after the cast.\n",
            "I would remove this one and just use `data|length` in the template.\n",
            "You don't add anything on the profiler, what about `collect()` instead?\n",
            "missing space after `//`\n",
            "I would have put this logic in the form subscriber instead. That way, the collector would be compatible with any versions of the Form component.\n",
            "traiiling whitespace\n",
            "we are using this anywhere else, should be removed\n",
            "I would have said: `No forms were submitted for this request.`\n",
            "Should be  No invalid forms detected for this request.  I think we are using `<em>` in the web profiler for such cases.\n",
            "Let's finish this PR first, we will be able to add more stuff afterwards.\n",
            "2 problems here:\n- the `ajax_layout.html.twig` template does not exist.\n- the `@` notation must be used in the web profiler.\n\nSo, this line should be:\n\n``` php\n{% extends '@WebProfiler/Profiler/layout.html.twig' %}\n```\n",
            "All template references must use the `@` notation.\n",
            "``` php\n    {% include '@WebProfiler/Profiler/toolbar_item.html.twig' with { 'link': profiler_url } %}\n```\n",
            "This block should be unindented\n",
            "When only one form is present, I would say something along the lines of: `Form Errors`\n",
            "When there is only one form, I would remove this headline and move the name into the `<h2>` tag instead: `Form Errors for {{ formName }}`.\n",
            "I would always display all forms, even if there are no errors.\n",
            "So, when they are no errors for a form, I would say `The form is valid` or `No errors for this form`.\n",
            "here is a missing space after the cast.\n",
            "I would remove this one and just use `data|length` in the template.\n",
            "You don't add anything on the profiler, what about `collect()` instead?\n",
            "missing space after `//`\n",
            "I would have put this logic in the form subscriber instead. That way, the collector would be compatible with any versions of the Form component.\n",
            "traiiling whitespace\n",
            "we are using this anywhere else, should be removed\n",
            "I would have said: `No forms were submitted for this request.`\n",
            "As I said, I've used the first character that came. A better one must be found...\n",
            "it always exists at this stage as the check is done elsewhere\n",
            "Again, it's done in the Parser, so that won't happen.\n",
            "I don't know yet if we need to keep it close to Twig or not at all. That's why I kept none at first, but as both will probably diverge even more than today, that's probably safe to remove none support.\n",
            "ok, I've removed none and I've changed the operators to the PHP operators.\n",
            "done\n",
            "Twig supports PHP 5.2, which does not allow for the `a ?: b` construct.\n",
            "fixed\n",
            "I've updated the PR with `@#`.\n",
            "done\n",
            "If you mean, replace the Twig expression sub-system by this code, the answer is no as Twig is much more powerful.\n",
            "the variable names are now checked in the Parser.\n",
            "done\n",
            "the variable names are now checked in the Parser.\n",
            "and the valid names must be passed to the `compile()` method. The goal being to not do anything special in the compiled string.\n",
            "was just a typo, fixed now\n",
            "As I said, I've used the first character that came. A better one must be found...\n",
            "it always exists at this stage as the check is done elsewhere\n",
            "Again, it's done in the Parser, so that won't happen.\n",
            "I don't know yet if we need to keep it close to Twig or not at all. That's why I kept none at first, but as both will probably diverge even more than today, that's probably safe to remove none support.\n",
            "ok, I've removed none and I've changed the operators to the PHP operators.\n",
            "done\n",
            "Twig supports PHP 5.2, which does not allow for the `a ?: b` construct.\n",
            "fixed\n",
            "I've updated the PR with `@#`.\n",
            "done\n",
            "If you mean, replace the Twig expression sub-system by this code, the answer is no as Twig is much more powerful.\n",
            "the variable names are now checked in the Parser.\n",
            "done\n",
            "the variable names are now checked in the Parser.\n",
            "and the valid names must be passed to the `compile()` method. The goal being to not do anything special in the compiled string.\n",
            "was just a typo, fixed now\n",
            "@ChristianGaertner is right, there is no need for a sprintf call.\n",
            "To avoid the BC break, can you instead add a `setPath()` method?\n",
            "This one should be private instead. The php docblock should also be removed as it does not give any useful information.\n",
            "blank line to be removed\n",
            "extra line to be removed\n",
            "there is a missing blank line before the __construct call.\n",
            "extra line to be removed\n",
            "empty line to be added before the @author tag.\n",
            " s at the end of exists\n",
            "@ChristianGaertner is right, there is no need for a sprintf call.\n",
            "To avoid the BC break, can you instead add a `setPath()` method?\n",
            "This one should be private instead. The php docblock should also be removed as it does not give any useful information.\n",
            "blank line to be removed\n",
            "extra line to be removed\n",
            "there is a missing blank line before the __construct call.\n",
            "extra line to be removed\n",
            "empty line to be added before the @author tag.\n",
            " s at the end of exists\n",
            "@ChristianGaertner is right, there is no need for a sprintf call.\n",
            "I would have written:\n\n``` php\nif ($verbosity < 1) {\n    $verbosity = 1;\n} elseif ($verbosity > 3) {\n   $verbosity = 3;\n}\n```\n",
            "I prefer to min/max solution. If you try with someUnix command, you can add as many -v as you want, you will never get an error.\n",
            "I would have written:\n\n``` php\nif ($verbosity < 1) {\n    $verbosity = 1;\n} elseif ($verbosity > 3) {\n   $verbosity = 3;\n}\n```\n",
            "I prefer to min/max solution. If you try with someUnix command, you can add as many -v as you want, you will never get an error.\n",
            "we only document properties for objects \n",
            "we only document properties for objects\n",
            "same as above\n",
            "we only document properties for objects \n",
            "we only document properties for objects\n",
            "same as above\n",
            "Rereading this patch, I was wondering why we don't know the encoding. A Symfony app has a charset settings which defines the default encoding for the app. So, why not assuming that this is the encoding used by the target URL as well?\n",
            "Rereading this patch, I was wondering why we don't know the encoding. A Symfony app has a charset settings which defines the default encoding for the app. So, why not assuming that this is the encoding used by the target URL as well?\n",
            "Type hinting is indeed a good idea.\n",
            "Type hinting is indeed a good idea.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "This is wrong as the DependencyInjection parameter bag does not support deep parameters.\n",
            "I think you are confusing the ParameterBag class from DependencyInjection and the one in HttpFoundation. There are totally different.\n",
            "Why removing the second part of the condition? That allows for a faster lookup.\n",
            "This method must be private.\n",
            "Can you make the whole condition on one line? Perhaps you can create a variable before for the closure?\n",
            "The parameter list does not seem to match the method signature.\n",
            "We are using `Boolean` in Symfony.\n",
            "This is wrong as the DependencyInjection parameter bag does not support deep parameters.\n",
            "I think you are confusing the ParameterBag class from DependencyInjection and the one in HttpFoundation. There are totally different.\n",
            "Why removing the second part of the condition? That allows for a faster lookup.\n",
            "This method must be private.\n",
            "Can you make the whole condition on one line? Perhaps you can create a variable before for the closure?\n",
            "The parameter list does not seem to match the method signature.\n",
            "We are using `Boolean` in Symfony.\n",
            "The other way round: `date` should be `value` above.\n",
            "The other way round: `date` should be `value` above.\n",
            "I would not name it travis as it is equally useful on your personal machine.\n",
            "I agree with @stof for another reason: decoupling testing from installing composer. That would allow to use this locally on your machine, independently of where composer is installed.\n",
            "`run-tests`?\n",
            "This method can be removed as it is not needed.\n",
            "This method can be removed as it is not needed.\n",
            "This can be removed as it is already done after the condition.\n",
            "Actually, you should remove the other one instead.\n",
            "These 2 blank lines must be removed.\n",
            "This call should be on one line.\n",
            "You have 2 blank lines here.\n",
            "You should add a phpdoc here.\n",
            "You should also add a phpdoc here.\n",
            "This call should be on one line.\n",
            "The reuse of the finder is indeed a bug.\n",
            "This can be removed as it is already done after the condition.\n",
            "Actually, you should remove the other one instead.\n",
            "These 2 blank lines must be removed.\n",
            "This call should be on one line.\n",
            "You have 2 blank lines here.\n",
            "You should add a phpdoc here.\n",
            "You should also add a phpdoc here.\n",
            "This call should be on one line.\n",
            "The reuse of the finder is indeed a bug.\n",
            "extra blank line here.\n",
            "should be `hasDefaultRouteSet` (no `s` at the end of Routes).\n",
            "should be `Checks`. Why `extra`? and `defaults`?\n",
            "and the summary must be ended with a dot.\n",
            "same as above (`Sets` and a dot at the end).\n",
            "It looks like a big hack.\n",
            "typo, should probably be setDefaultRoute**s**\n",
            "extra blank line here.\n",
            "should be `hasDefaultRouteSet` (no `s` at the end of Routes).\n",
            "should be `Checks`. Why `extra`? and `defaults`?\n",
            "and the summary must be ended with a dot.\n",
            "same as above (`Sets` and a dot at the end).\n",
            "It looks like a big hack.\n",
            "typo, should probably be setDefaultRoute**s**\n",
            "I would remove the container dependency altogether and add a `setRequest(Request $request = null)` method instead. This will allow the container to automatically inject the correct Request object and others would need to call the setRequest() method by themselves.\n\nYou can have a look at a similar implementation in `LocaleListener` for instance. But basically, here is the `setRequest()` method:\n\n``` php\npublic function setRequest(Request $request = null)\n{\n    $this->request = $request;\n}\n```\n\nAnd call the method in the container configuration:\n\n``` xml\n<call method= setRequest ><argument type= service  id= request  on-invalid= null  strict= false  /></call>\n```\n\nAs the request can be null (outside request handling), you should take care of that edge case in your code.\n",
            "When we are not in the request scope (before handling a request or after handling a request), the request is null, so the setter must be able to accept/receive the null value.\n",
            "The setter must be called so that your object knows that it is acting outside the handling of a request. If not, you will still have access to an older Request object.\n",
            "I would remove the container dependency altogether and add a `setRequest(Request $request = null)` method instead. This will allow the container to automatically inject the correct Request object and others would need to call the setRequest() method by themselves.\n\nYou can have a look at a similar implementation in `LocaleListener` for instance. But basically, here is the `setRequest()` method:\n\n``` php\npublic function setRequest(Request $request = null)\n{\n    $this->request = $request;\n}\n```\n\nAnd call the method in the container configuration:\n\n``` xml\n<call method= setRequest ><argument type= service  id= request  on-invalid= null  strict= false  /></call>\n```\n\nAs the request can be null (outside request handling), you should take care of that edge case in your code.\n",
            "When we are not in the request scope (before handling a request or after handling a request), the request is null, so the setter must be able to accept/receive the null value.\n",
            "The setter must be called so that your object knows that it is acting outside the handling of a request. If not, you will still have access to an older Request object.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "Is it really possible to have more than one form here?\n",
            "If there is no forms, you should add a sentence telling so as done elsewhere in the profiler.\n",
            "indentation should be aligned with h2.\n",
            "Missing capital letter for the first word and missing dot at the end.\n",
            "The same goes for all other PHPdocs.\n",
            "Is it really possible to have more than one form here?\n",
            "If there is no forms, you should add a sentence telling so as done elsewhere in the profiler.\n",
            "indentation should be aligned with h2.\n",
            "Missing capital letter for the first word and missing dot at the end.\n",
            "The same goes for all other PHPdocs.\n",
            "missing space around `/`\n",
            "Can you remove the parentheses around the 3 comparisons as they are not needed?\n",
            "This should be moved to a new '2.4' section\n",
            "I've removed all versions for now.\n",
            "Let's not move things around for the sake of it.\n",
            "That's wrong, it can only return false\n",
            "I would remove this special case and just don't pretty format for PHP < 5.4 (because 5.3 is not supported anymore anyway).\n",
            "At the top of the file, if the JSON_PRETTY_PRINT constant is not defined, define it, and remove everything else. That way, on 5.3, it won't be pretty formatted, but as of 5.4, it will.\n",
            "Option 1 seems the best.\n",
            "no need to create a temp var here.\n",
            "You should use the request stack instead.\n",
            "Instead of relying on a setRequest method, you can take the request stack as an argument and call `->getMasterRequest()` whenever you need the request. That way, you always have the right master request. The current way won't work if you handle two master requests in the same PHP process (without rebooting the Kernel of course.)\n",
            "no, the Twig bridge is used by Silex without the definition as we are using Pimple there, so this is not a hard dependency.\n",
            "We cannot add this method to this interface as it is marked with an `@api` tag.\n",
            "Actually, the correct way is  There are no apples. .\n",
            "Indeed, I was fooled by the usage of `assertEquals`. Everything should be ok now.\n",
            "Can you remove the blanks?\n",
            "CS: `if ('files' === $this->getSaveHandler()->getSaveHandlerName()) {`\n",
            "What's the value of `$context` when the error occurs? I fail to see how this condition can help as if not passed, the context is an empty array.\n",
            "Why change this code?\n",
            "Should be  Clones \n",
            "This blank line should be removed.\n",
            "This blank line should be removed as well.\n",
            "I would named this method  duplicateRequest()  as we are calling the duplicate() method internally.\n",
            "This should be on one line with a dot at the end of the exception message.\n",
            "This should be on one line.\n",
            "I think that the above code is not needed and can be removed safely.\n",
            "Same for this code above. To be tested, but I'm pretty sure that PHP does not care and don't thrown any notice/warning.\n",
            "What does this do?\n",
            "we don't put dots at the end of the @... lines\n",
            "I don't see the need to make this configurable.\n",
            "ok, let's make it private then.\n\nAlso, you need to remove spaces around the `.` below and put the `{` above on its own line.\n",
            "And move it to the bottom of the file.\n",
            "Can you convert this to a static array definition, like:\n\n``` php\nstatic $errors = array(\n    UPLOAD_ERR_INI_SIZE => 'The file ...',\n    UPLOAD_... => ...,\n);\n```\n",
            "locally.\n",
            "The `formatter->format` call can be removed.\n",
            "The blank line must be removed.\n",
            "if the id option is not passed, then we should not add an id empty attribute.\n",
            "No, as it does not make sense to support arbitrary attributes that are not part of the HInclude spec.\n",
            "ok, what about having `id` as an option as this is defined in the spec and an `attributes` option where you can pass any other attribute?\n",
            "This implementation is totally wrong. The string format for a plural message can be more complex than just `foo|bar`, you can have ranges, several plurals, ...\n\nThat's also why we have what we have right now. If you want to use translation, you need the translation component.\n.\n",
            "So, if I get you correctly, we are reinventing a way to  fake  plural messages? The source message has a convention where we have 2 messages separated by a pipe? If that's the case, then it should be documented.\n",
            "And for the record, you cannot say that we don't have complicated plural messages in the core validators, as any message needing plural is complicated in some languages (a message is never complex by itself, but the translation for some languages are complex).\n",
            "there is a missing space after `foreach`.\n",
            "there is a missing space after `foreach`.\n",
            "there is a missing space after `foreach`.\n",
            "there is a missing space after `foreach`.\n",
            "I'm against adding a TODO-3.0.md in the repository. Instead, create an issue on Github.\n",
            "I'm not against this change but then, `RequestHelper`, `SessionHelper` and `RouterHelper` should also be moved. What others think?\n",
            "I'm not against this change but then, `RequestHelper`, `SessionHelper` and `RouterHelper` should also be moved. What others think?\n",
            "it is\n",
            "This is a mistake.\n",
            "fixed\n",
            "it is\n",
            "This is a mistake.\n",
            "fixed\n",
            "You should also try to use iconv if it is enabled and mbstring is not.\n",
            "sounds good to me.\n",
            "why is it commented?\n",
            "You should also try to use iconv if it is enabled and mbstring is not.\n",
            "sounds good to me.\n",
            "why is it commented?\n",
            "We don't use  use  statements for global PHP classes. So, these use statements should be removed.\n",
            "This should be changed to `5.3.3` as all other components min PHP version has been changed recently to this version.\n",
            "Can you make a PR so that it is not lost? (same for the other comment)\n",
            "Can you make a PR so that it is not lost? (same for the other comment)\n",
            "Can you make a PR so that it is not lost? (same for the other comment)\n",
            "What about moving the new constructor arguments at the end so that there is no BC break?\n",
            "Indeed, Symfony must not use the Doctrine way of creating exceptions.\n",
            "I would be more comfortable if we can just deprecate their usage. Making `setMessage` as an alias to `addViolation` looks good to me but what about the other two? Would they only return the first message?\n",
            "I don't like the idea of having warnings. I think documentation is enough here.\n",
            "I've updated the `check_cs` script to enforce usage of  `elseif` (see 8d7a6e598d).\n",
            "This is also how I like it.\n",
            "There is no need to cast to an `array` as this is already done in the `FieldTypeValidatorExtension`.\n",
            "To mimik the behavior without a closure, this should probably be casted to an `array`.\n",
            "I think you should return as early as possible. As soon as you have found the class name, there is no point in parsing the rest of the file.\n",
            "What about renaming it to just `ClassMap` as the main feature is the creation of the class map, not the dump part.\n",
            "This line looks wrong.\n",
            "Wrong phpdoc.\n",
            "Wrong phpdoc.\n",
            "I'm not comfortable with this code as AFAIR, it means that the Doctrine bundle must be registered before the Security one for this  hack  to work.\n",
            "Ignore my previous comment as this works as expected in master (but not in 2.0).\n",
            "As `users` is the only possible key, would it possible to remove it altogether and put the users configuration directly under the main key?\n",
            "The security listener factories are configured via a config key and a tag. We should probably configure both in the same way. I don't know which one is better, but it looks weird to have two different ways.\n",
            "Ok,let's keep in mind that we need another PR to change the way security listener factories are registered then.\n",
            "@stof: Now that this PR is merged, can you work on the refactoring of the security listener factories?\n",
            "Why would you want to remove the token if it is anonymous? I think we just need to remove it when it's set to null.\n",
            "`-1*strlen($match[0])` could be just `-strlen($match[0])`\n",
            "Why not using the more conventional `$path.'/'.$file.'~'` file name for the backup?\n",
            "formatter should probably be dumper here.\n",
            "I don't get why we need a prefix option.\n",
            "I'm not comfortable with the FileWrite class. How can we manage translations stored in a database?\n",
            "You should add a `setHelp()` method to describe how to use the command and the different arguments/options (especially the prefix as its usage is -- at least to me -- not obvious).\n",
            "You should remove the whitespaces around dots.\n",
            "You should list the options that are common to all dumpers if any.\n",
            "What about renaming `load` to `extract`? The PHPdoc should be clear about the fact that the new messages are injected into the passed catalogue.\n",
            "As I see it, this class is just an extractor based on some other ones. So, what about implementing the `ExtractorInterface` and renaming it to something like `ChainExtractor` (for consistency with the other components)?\n",
            "should be `extract` now\n",
            "should be `extract` now\n",
            "should be `extract` now\n",
            "I think the code that checks the interface here is unneeded as most of the time, the check will already have been done by the compiler pass.\n",
            "@kaiwa: we try to improve error messages on case by case basis.\n",
            "`if (false === $value || (empty($value) && '0' != $value))` is easier to understand for me. @EvanK: Can you squash your commits and rebase the PR on the symfony/2.0 branch as this is a bug fix? Thanks.\n",
            "should be something like:  Replaces placeholders with service container parameter values in route defaults \n",
            "should be something like:  Replaces placeholders with service container parameter values in route defaults \n",
            "Several problems here:\n- What if the developer is not using UTF-8 as its encoding?\n- What if `iconv` is not available? You should at least try some alternative like done in `PhpEngine` (https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Templating/PhpEngine.php#L488). And if no conversion tool is available, just fall back doing nothing (that's better than an exception).\n",
            "I would have kept the `for` loop as done in the original code (it's faster).\n",
            "Inflection is very different from slugification and does not solve the same problem. I've just had a quick look at the Inflector class in Lithium and the transliteration part is just plain wrong.\n",
            "You should add an empty line between @param and @return.\n",
            "You should add an empty line between @param and @return.\n",
            "47 is already used. Can you update to use 48 instead? and squash your commits? thanks.\n",
            "The file always exist at this point.\n",
            "there is whitespace around `.`.\n",
            "new lines should be written at the top of the file so that when you use `find()`, the results are actually the most recent ones (as done in the SQLite profiler storage). The other possibility is to read the file in reverse in the `find()` method.\n",
            "You missed a newline before the return call.\n",
            "Wouldn't it make sense to remove the directories too?\n",
            "It would be better to override the existing one. I know that this is not the case in the SQLite profiler storage class, but that's a bug IMO.\n",
            "The first line of a phpdoc is a sentence where the subject (the method name is omitted). So, the verb should have an ending `s`. Being a sentence, it also should end with a `.` (should be fixed everywhere in this file).\n",
            "The dialog helper is not always available, so this need to be checked.\n",
            "If `posix_isatty` is not available, interactive mode should be disabled, no?\n",
            "right, let's keep it as it is then.\n",
            "This function is defined as part of GD so it is not always available.\n",
            "This check is only relevant if some size constraints are set. If not, you need to skip it.\n",
            "The variable should probably be named something like `$sizeNotDetectedMessage`. And there is a missing `the` in the message: `The size of the image could not be detected`\n",
            "`minWidth` should be renamed to `min_width` or even better just `min`.\n",
            "same as above\n",
            "same as above.\n",
            "same as above.\n",
            "You should add a withespace after the `(string)` cast.\n",
            "Can you removed this empty method?\n",
            "This function is defined as part of GD so it is not always available.\n",
            "This check is only relevant if some size constraints are set. If not, you need to skip it.\n",
            "The variable should probably be named something like `$sizeNotDetectedMessage`. And there is a missing `the` in the message: `The size of the image could not be detected`\n",
            "`minWidth` should be renamed to `min_width` or even better just `min`.\n",
            "same as above\n",
            "same as above.\n",
            "same as above.\n",
            "You should add a withespace after the `(string)` cast.\n",
            "Can you removed this empty method?\n",
            "This class has the @api tag, which means that we cannot change it anymore. Is it possible to create another interface and only allow doc generation if you implement this new interface. I know that it will complexify things a bit, but we cannot break the stable API anymore.\n",
            "`grapheme_strlen` only works with UTF-8.\n",
            "done, thanks for the tip.\n",
            "What if there is `::` somewhere in the path?\n",
            "I think splitting this PR into two is indeed a very good idea.\n",
            "I think testing the output is not really relevant. First, because it does not mean that the dumper class works, and then because even the smallest change to the dumper will break the tests. I would have preferred tests on the behavior of the dumped class.\n",
            "You should store the temporary files in the /tmp directory and remove them afterwards (see `sys_get_temp_dir()`).\n",
            "I try to avoid using `setUpBeforeClass()` as it does not work when process isolation is set to `true`. Anyway, as you clean up the directory in `tearDown()`, it should be moved to `setUp()`.\n",
            "That's a big BC break for any DataCollector out there.\n",
            "sorry, didn't see the default value.\n",
            "Why do we need an interface here?\n",
            "For me, we need an interface only if we can have different implementations. If not, I don't see the point.\n",
            "Which best practice are you talking about?\n",
            "the use statement should also be removed for LoggerInterface\n",
            "@stof is right. The `Redis` example should be fixed instead.\n",
            "Why not just keep the $domain as is?\n",
            "right, can you remove the spaces around the `.` (above and below)?\n",
            "I would revert this change\n",
            "I would have added this phpdoc in `render()` instead.\n",
            "If a service is synchronized, it should not be in the request scope. A service should be either in the request scope or synchrnonized, not both.\n",
            "BC breaks are not an option, so the setter is the way to go.\n",
            "`send`? We don't send the buffers anyway. It's up to you to get the buffer and do whatever you want with them.\n",
            "In this context, I don't what it can do on top of removing the data from the buffer. See http://www.catb.org/jargon/html/F/flush.html\n",
            "I read the whole thing ;) Actually, I could link to definition 1, which is exactly what we do here, but I won't. I do understand what you mean, except that it does not apply here as the Process class never output/send the buffers, so there are no ambiguities here.\n",
            "good catch, thanks.\n",
            "``` jinja\n{% if not foo matches '//' %}\n```\n",
            "Can you remove the test for CSS selector as we have removed all such checks everywhere as composer must have been run to execute the tests.\n"
        ],
        "prs": [
            {
                "title": "[HttpFoundation] added a way to override the Request class",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7461, #7453 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#3021 |\n\nThis is an alternative implementation for #7461.\n\nI've also reverted #7381 and #7390 as these changes are not needed anymore.\n\nTodo:\n- [ ] add some tests\n"
            },
            {
                "title": "New Component: Expression Language",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8850, #7352 |\n| License | MIT |\n| Doc PR | not yet |\n\nTODO:\n- [ ] write documentation\n- [x] add tests for the new component\n- [x] implement expression support for access rules in the security component\n- [x] find a better character/convention for expressions in the YAML format\n- [x] check the performance of the evaluation mode\n- [x] better error messages in the evaluation mode\n- [x] add support in the Routing\n- [x] add support in the Validator\n\nThe ExpressionLanguage component provides an engine that can compile and\nevaluate expressions.\n\nAn expression is a one-liner that returns a value (mostly, but not limited to, Booleans).\n\nIt is a strip-down version of Twig (only the expression part of it is\nimplemented.) Like Twig, the expression is lexed, parsed, and\ncompiled/evaluated. So, it is immune to external injections by design.\n\nIf we compare it to Twig, here are the main big differences:\n- only support for Twig expressions\n- no ambiguity for calls (foo.bar is only valid for properties, foo['bar'] is only valid for array calls, and foo.bar() is required for method calls)\n- no support for naming conventions in method calls (if the method is named getFoo(), you must use getFoo() and not foo())\n- no notion of a line for errors, but a cursor (we are mostly talking about one-liners here)\n- removed everything specific to the templating engine (like output escaping or filters)\n- no support for named arguments in method calls\n- only one extension point with functions (no possibility to define new operators, ...)\n- and probably even more I don't remember right now\n- there is no need for a runtime environment, the compiled PHP string is self-sufficient\n\nAn open question is whether we keep the difference betweens arrays and hashes.\n\nThe other big difference with Twig is that it can work in two modes (possible\nbecause of the restrictions described above):\n- compilation: the expression is compiled to PHP and is self-sufficient\n- evaluation: the expression is evaluated without being compiled to PHP (the node tree produced by the parser can be serialized and evaluated afterwards -- so it can be saved on disk or in a database to speed up things when needed)\n\nLet's see a simple example:\n\n``` php\n$language = new ExpressionLanguage();\n\necho $language->evaluate('1 + 1');\n// will echo 2\n\necho $language->compile('1 + 2');\n// will echo  (1 + 2) \n```\n\nThe language supports:\n- all basic math operators (with precedence rules):\n  - unary: not, !, -, +\n  - binary: or, ||, and, &&, b-or, b-xor, b-and, ==, ===, !=, !==, <, >, >=, <=, not in, in, .., +, -, ~, _, /, %, *_\n- all literals supported by Twig: strings, numbers, arrays (`[1, 2]`), hashes\n  (`{a:  b }`), Booleans, and null.\n- simple variables (`foo`), array accesses (`foo[1]`), property accesses\n  (`foo.bar`), and method calls (`foo.bar(1, 2)`).\n- the ternary operator: `true ? true : false` (and all the shortcuts\n  implemented in Twig).\n- function calls (`constant('FOO')` -- `constant` is the only built-in\n  functions).\n- and of course, any combination of the above.\n\nThe compilation is better for performances as the end result is just a plain PHP string without any runtime. For the evaluation, we need to tokenize, parse, and evaluate the nodes on the fly. This can be optimized by using a `ParsedExpression` or a `SerializedParsedExpression` instead:\n\n``` php\n$nodes = $language->parse($expr, $names);\n$expression = new SerializedParsedExpression($expr, serialize($nodes));\n\n// You can now store the expression in a DB for later reuse\n\n// a SerializedParsedExpression can be evaluated like any other expressions,\n// but under the hood, the lexer and the parser won't be used at all, so it''s much faster.\n$language->evaluate($expression);\n```\n\nThat's all folks!\n\nI can see many use cases for this new component, and we have two use cases in\nSymfony that we can implement right away.\n## Using Expressions in the Service Container\n\nThe first one is expression support in the service container (it would replace\n#8850) -- anywhere you can pass an argument in the service container, you can\n\nuse an expression:\n\n``` php\n$c->register('foo', 'Foo')->addArgument(new Expression('bar.getvalue()'));\n```\n\nYou have access to the service container via `this`:\n\n```\ncontainer.get( bar ).getvalue(container.getParameter( value ))\n```\n\nThe implementation comes with two functions that simplifies expressions\n(`service()` to get a service, and `parameter` to get a parameter value). The\nprevious example can be simplified to:\n\n```\nservice( bar ).getvalue(parameter( value ))\n```\n\nHere is how to use it in XML:\n\n``` xml\n<parameters>\n    <parameter key= value >foobar</parameter>\n</parameters>\n<services>\n    <service id= foo  class= Foo >\n        <argument type= expression >service('bar').getvalue(parameter('value'))</argument>\n    </service>\n    <service id= bar  class= Bar  />\n</services>\n```\n\nand in YAML (I chose the syntax randomly ;)):\n\n``` yaml\nparameters:\n    value: foobar\n\nservices:\n    bar:\n        class: Bar\n\n    foo:\n        class: Foo\n        arguments: [@=service( bar ).getvalue(parameter( value ))]\n```\n\nWhen using the container builder, Symfony uses the evaluator, but with the PHP\ndumper, the compiler is used, and there is no overhead as the expression\nengine is not needed at runtime. The expression above would be compiled to:\n\n``` php\n$this->get( bar )->getvalue($this->getParameter( value ))\n```\n## Using Expression for Security Access Control Rules\n\nThe second use case in Symfony is for access rules.\n\nAs we all know, the way to configure the security access control rules is confusing, which might lead to insecure applications (see http://symfony.com/blog/security-access-control-documentation-issue for more information).\n\nHere is how the new `allow_if` works:\n\n``` yaml\naccess_control:\n    - { path: ^/_internal/secure, allow_if:  '127.0.0.1' == request.getClientIp() or has_role('ROLE_ADMIN')  }\n```\n\nThis one restricts the URLs starting with `/_internal/secure` to people browsing from the localhost. Here, `request` is the current Request instance. In the expression, there is access to the following variables:\n- `request`\n- `token`\n- `user`\n\nAnd to the following functions:\n- `is_anonymous`\n- `is_authenticated`\n- `is_fully_authenticated`\n- `is_rememberme`\n- `has_role`\n\nYou can also use expressions in Twig, which works well with the `is_granted` function:\n\n``` jinja\n{% if is_granted(expression('has_role( FOO )')) %}\n   ...\n{% endif %}\n```\n## Using Expressions in the Routing\n\nOut of the box, Symfony can only match an incoming request based on some pre-determined variables (like the path info, the method, the scheme, ...). But some people want to be able to match on more complex logic, based on other information of the Request object. That's why we introduced `RequestMatcherInterface` recently (but we no default implementation in Symfony itself).\n\nThe first change I've made (not related to expression support) is implement this interface for the default `UrlMatcher`. It was simple enough.\n\nThen, I've added a new `condition` configuration for Route objects, which allow you to add any valid expression. An expression has access to the `request` and to the routing `context`.\n\nHere is how one would configure it in a YAML file:\n\n``` yaml\nhello:\n    path: /hello/{name}\n    condition:  context.getMethod() in ['GET', 'HEAD'] and request.headers.get('User-Agent') =~ '/firefox/i' \n```\n\nWhy do I keep the context as all the data are also available in the request? Because you can also use the condition without using the RequestMatcherInterface, in which case, you don't have access to the request. So, the previous example is equivalent to:\n\n``` yaml\nhello:\n    path: /hello/{name}\n    condition:  request.getMethod() in ['GET', 'HEAD'] and request.headers.get('User-Agent') =~ '/firefox/i' \n```\n\nWhen using the PHP dumper, there is no overhead as the condition is compiled. Here is how it looks like:\n\n``` php\n// hello\nif (0 === strpos($pathinfo, '/hello') && preg_match('#^/hello/(?P<name>[^/]++)$#s', $pathinfo, $matches) && (in_array($context->getMethod(), array(0 =>  GET , 1 =>  HEAD )) && preg_match( /firefox/i , $request->headers->get( User-Agent )))) {\n    return $this->mergeDefaults(array_replace($matches, array('_route' => 'hello')), array ());\n}\n```\n\nBe warned that conditions are not taken into account when generating a URL.\n## Using Expressions in the Validator\n\nThere is a new Expression constraint that you can put on a class. The expression is then evaluated for validation:\n\n``` php\nuse Symfony\\Component\\Validator\\Constraints as Assert;\n\n/**\n * @Assert\\Condition(condition= this.getFoo() == 'fo' , message= Not good! )\n */\nclass Obj\n{\n    public function getFoo()\n    {\n        return 'foo';\n    }\n}\n```\n\nIn the expression, you get access to the current object via the `this` variable.\n## Dynamic annotations\n\nThe expression language component is also very useful in annotations. the SensoLabs FrameworkExtraBundle leverages this possibility to implement HTTP validation caching in the `@Cache` annotation and to add a new `@Security` annotation (see sensiolabs/SensioFrameworkExtraBundle#238.)\n"
            },
            {
                "title": "[HttpFoundation] tried to keep the original Request URI as much as possible to avoid different behavior between ::createFromGlobals() and ::create()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8507 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[TwigBridge] fixed form rendering when used in a template with dynamic inheritance",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5284 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Fixed registration of private event listeners/subscribers",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6541 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen registering a private event subscriber/listener, the listener was just ignored.\n\nThis PR does two things to fix the problem:\n- the event listener pass is done earlier to get access to the private services\n- when a private service is identified, a proper exception is thrown\n"
            },
            {
                "title": "[DependencyInjection] added tags validation when compiling a container",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes & no |\n| New feature? | yes & no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7543 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen using YAML or XML, the tags validadity are checked during loading, but when using PHP, that's not possible.\nSo, the added step in the compilation phase does that nicely.\n"
            },
            {
                "title": "[DependencyInjection] fixed a non-detected circular reference in PhpDumper (closes #8425)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8425 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Debug] removed usage of a deprecated class (closes #8992)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8992 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpFoundation] fixed format duplication in Request",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8976 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "fixed regression in the way the request format is handled",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8917 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fix HInclude src (closes #8951)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8951 |\n| License | MIT |\n| Doc PR | n/a |\n\nfixes a regression introduced in #8879\n"
            },
            {
                "title": "Fixed some random leaks",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixes some memory leaks",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | kinda |\n| New feature? | no |\n| BC breaks? | kinda as the Bundle `$reflected` property was removed |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Security] fixed a leak in the ContextListener",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nTrying to fix leaks when using the same Kernel to handle several requests in a row without resetting the Container or shutting down the Kernel.\n"
            },
            {
                "title": "Synchronized Service alternative, backwards compatible",
                "body": "This is a rebased version #7707.\n\n| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7707 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2956 |\n\nTodo/Questions\n- [x] do we deprecate the synchronize feature (and removed it in 3.0)?\n- [x] deal with BC for listeners\n- [x] rename RequestContext as we already have a class with the same name in the Routing component?\n- [x] move RequestStack and RequestContext to HttpFoundation?\n- [x] update documentation\n\nPrototype for introducing a `RequestContext` in HttpKernel.\n\nThis PR keeps the synchronized services feature, however introduces a `RequestContext` object additionally, that allows to avoid using synchronized service when injecting `request_context` instead of `request` into a service. The FrameworkBundle is modified such that it does not depend on synchronized services anymore. Users however can still depend on `request`, activating the synchronized services feature.\n\nFeatures:\n- Introduced `REQUEST_FINSHED` (name is up for grabs) event to handle global state and environment cleanup that should not be done in `RESPONSE`. Called in both exception or success case correctly\n- Changed listeners that were synchronized before to using `onKernelRequestFinished` and `RequestContext` to reset to the parent request (RouterListener + LocaleListener).\n- Changed `FragmentHandler` to use the RequestContext. Added some more tests for this class.\n- `RequestStack` is injected into the `HttpKernel` to handle the request finished event and push/pop the stack with requests.\n\nTodos:\n- RequestContext name clashes with Routing components RequestContext. Keep or make unique?\n- Name for Kernel Request Finished Event could be improved.\n"
            },
            {
                "title": "[BrowserKit] fixed the redirect behavior according to the RFC",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixed route parameters storage in the Request data collector (closes #8867)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8867 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Fix conflicts iwth unimplemented PHP ENT_* constants",
                "body": "When using `htmlspecialchars`, a bunch of constants can be used to configure the way the function behaves:\n\n``` c\n#define ENT_HTML_QUOTE_NONE         0\n#define ENT_HTML_QUOTE_SINGLE       1\n#define ENT_HTML_QUOTE_DOUBLE       2\n#define ENT_HTML_IGNORE_ERRORS      4\n#define ENT_HTML_SUBSTITUTE_ERRORS  8\n#define ENT_HTML_DOC_TYPE_MASK      (16|32)\n#define ENT_HTML_DOC_HTML401        0\n#define ENT_HTML_DOC_XML1           16\n#define ENT_HTML_DOC_XHTML          32\n#define ENT_HTML_DOC_HTML5          (16|32)\n/* reserve bit 6 */\n#define ENT_HTML_SUBSTITUTE_DISALLOWED_CHARS    128\n\n\n#define ENT_COMPAT      ENT_HTML_QUOTE_DOUBLE\n#define ENT_QUOTES      (ENT_HTML_QUOTE_DOUBLE | ENT_HTML_QUOTE_SINGLE)\n#define ENT_NOQUOTES    ENT_HTML_QUOTE_NONE\n#define ENT_IGNORE      ENT_HTML_IGNORE_ERRORS\n#define ENT_SUBSTITUTE  ENT_HTML_SUBSTITUTE_ERRORS\n#define ENT_HTML401     0\n#define ENT_XML1        16\n#define ENT_XHTML       32\n#define ENT_HTML5       (16|32)\n#define ENT_DISALLOWED  128\n```\n\nSo, the current (as of PHP 5.4) `ENT_*` constants values are as follows:\n\n```\nENT_COMPAT: 2\nENT_QUOTES: 3\nENT_NOQUOTES: 0\nENT_IGNORE: 4\nENT_SUBSTITUTE: 8\nENT_DISALLOWED: 128\nENT_HTML401: 0\nENT_XML1: 16\nENT_XHTML: 32\nENT_HTML5: 48\n```\n\nHHVM does not support all those constants, but more important, it defines its own constants with values used by some `ENT_*` constants:\n\n``` c++\n  enum class QuoteStyle {\n    Double       = 2,  // k_ENT_COMPAT:   escape double quotes only\n    Both         = 3,  // k_ENT_QUOTES:   escape both double and single quotes\n    No           = 0,  // k_ENT_NOQUOTES: leave all quotes alone\n    FBUtf8       = 4,\n    FBUtf8Only   = 8\n  };\n```\n\nAs you can see, the `ENT_SUBSTITUTE` and `FBUtf8Only` values are the same, but they are doing different things.\n\nIn Twig (https://github.com/fabpot/Twig), we are using the following snippet of code quite heavily to escape some outputs:\n\n``` php\nhtmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE, $charset);\n```\n\nWhen run under HHVM, and because of the conflict, it does not work as expected. One simple way to make it work is to define the `ENT_SUBSTITUTE` value to `0` as HHVM does not define this constant yet but I can imagine that when implemented, you will have a problem.\n\nSo, I propose to change the values of the `FB*` constants.\n\nThe other and most important problem is that the code in HHVM does not support several flags, but only one at a time.\n"
            },
            {
                "title": "[FrameworkBundle] made sure that the debug event dispatcher is used everywhere",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6686, #7673 |\n| License | MIT |\n| Doc PR | n/a |\n\nThe removal of the Profiler dependency on the TraceableEventDispatcher (#9170) allows to remerge the patch from #9068 that fixes #6686.\n\nThis PR also cleans up how profiles are stored. A Profile is now always stored only once.\n\nThe fix will only be available on 2.4+ as the changes are too deep to be backported to 2.2 and 2.3.\n"
            },
            {
                "title": "Hotfix for HTML form attribute handling",
                "body": "This PR was submitted on the symfony/DomCrawler read-only repository and moved automatically to the main Symfony repository (closes symfony/DomCrawler#15).\n\nThe following,\n\n```\n$form = $node->ownerDocument->getElementById($formId);\n```\n\n...is an unreliable way to retrieve the ID. \n\nEven if there is an element with an id attribute the id won't be recognized unless the document was validated at the point it was read which in the case of setNode (for whatever reason) does not happen under some circumstances. \n\nTo give an example, given the following xml file\n\n```\n<?xml version= 1.0  encoding= UTF-8 ?>\n<root>\n    <form id= testform1 ></form>\n</root>\n```\n\nAnd the following code,\n\n```\n<?php\n\nini_set('display_errors',1);\nini_set('display_startup_errors',1);\nini_set('html_errors', 1);\nerror_reporting(-1);\n\n$doc = new DomDocument;\n$doc->validateOnParse = true;\n$doc->Load('test.xml');\n\necho 'Form Tag Exists? '.($doc->getElementById('testform1') === null ? 'Nope' : 'Yup');\n```\n\nThe code will still output  Form Tag Exists? Nope  because of how picky the getElementById method is.\n\nFor more on the phenomenon see this stackoverflow answer: http://stackoverflow.com/questions/3391942/php-html-domdocument-getelementbyid-problems \n\nI haven't been able to track down why the document in question doesn't work with getElementById, but somehow I'm assuming it has something to do with html5 not having a DTD (though for what it's worth ownerDocument in that particular case somehow gets reduced to just the form and the fields; which is weird in of itself). For reference the real world circumstances where this borks miserably is when using behat with goutte.\n\nThe following XPath version appears to reliably work,\n\n```\n$xp = new \\DOMXPath($node->ownerDocument);\n$form = $xp->query( //*[@id='{$formId}'] )->item(0);\n```\n"
            },
            {
                "title": "Added support for encoding and decoding namespaced xml (xmlns)",
                "body": "This PR was submitted on the symfony/Serializer read-only repository and moved automatically to the main Symfony repository (closes symfony/Serializer#5).\n\nAdded new tests. These and all existing tests pass.\n"
            },
            {
                "title": "[DependencyInjection] added a simple way to replace a service by keeping a reference to the old one",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5920 |\n| License | MIT |\n| Doc PR | not yet |\n\nTODO:\n- [ ] add a cookbook entry for this new feature\n- [ ] add support in all loaders/dumpers\n- [ ] add unit tests\n- [x] see if there are use cases in Symfony that would benefit from this new feature\n- [x] find the best name for this feature\n\nWhen overriding an existing definition, the old service is lost:\n\n``` php\n$c->set('foo', 'stdClass');\n\n// this is going to remove the old definition with the new one\n// old definition is lost\n$c->set('foo', 'stdClass');\n```\n\nMost of the time, that's exactly what you want to do, but sometimes, you might want to decorate the old one instead. In this case, the old service should be kept around to be able to reference it in the new one. This PR implements this new feature:\n\n``` php\n$c->set('foo', 'stdClass');\n\n// I want to replace foo with a new one, but I need a reference of the old one (foo1.parent here)\n$c->set('foo1', 'stdClass')->addArgument('foo1.parent')->setDecoratedService('foo');\n```\n\nHere is what's going on here: the `setDecoratedService()` method tells the container that the `foo1` service should replace the `foo` service. By convention, the old `foo` service is going to be renamed `foo1.parent`, so I can inject it into my new service.\n\nYou can change the parent service name if you want to:\n\n``` php\n$c->set('foo1', 'stdClass')->addArgument('foo1.wooz')->setDecoratedService('foo', 'foo1.wooz');\n```\n\nAlso, several service can decorate a single one and everything should work fine:\n\n``` php\n$c->set('foo', 'stdClass');\n\n$c->set('foo1', 'stdClass')->addArgument('foo1.parent')->setDecoratedService('foo');\n$c->set('foo2', 'stdClass')->addArgument('foo2.parent')->setDecoratedService('foo');\n```\n\nNote that this is different from the existing `parent` definition attribute, where a service inherit/extends another one (as the two services co-exist independently).\n\nIn XML, that would work like this:\n\n``` xml\n<service id= foo1  class= stdClass  decorate= foo >\n    <argument type= service  id= foo1.parent  />\n</service>\n```\n"
            },
            {
                "title": "[ExpressionLanguage] replaced the =~ operator by matches (removed the != operator)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nTo be consistent with fabpot/Twig#1209\n"
            },
            {
                "title": "[FrameworkBundle] Adds the possibility to register Commands via the DIC",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | don't now |\n| Fixed tickets | #8166 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#3031 |\n\nTodo:\n- [x] Documentation\n- [x] Clean code (add type hinting)\n- [x] Add tests\n"
            },
            {
                "title": "[Console] added a compact layout for the table helper",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#3025 |\n\nThat helps with large tables like the ones we have in container:debug and router:debug.\n"
            },
            {
                "title": "[FrameworkBundle] fixed container:debug and router:debug commands",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n#7887 is buggy as hell :(\n"
            },
            {
                "title": "Fixed cache warmup of paths which contain back-slashes",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8781 |\n| License | MIT |\n| Doc PR | n/a |\n\nFrom #8781\n\n \nAt this step in the warmup process there is a string replacement made, but paths with backslashes\nare written into the cache file as something like `C:\\\\path\\\\to\\\\cache/pro_/...` but the str_replace\nsearches for the plain string `C:\\path\\to\\cache/pro_/...`, which produces no matches.\n\nThe fix solves this by using var_export to escape the search (and replace) paths so they match the\nformat originally output into the cache file.\n \n"
            },
            {
                "title": "Decoupled TraceableEventDispatcher from the Profiler",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis PR removes the Profiler dependency on the TraceableEventDispatcher. That makes things more decoupled and cleaner. This PR also cleans up how profiles are stored; a Profile is now always stored only once.\n\nI've created a `LateDataCollectorInterface` that is implemented for data collector that needs to get information from data that are available very late in the request process (when the request and the response are not even available anymore). The `lateCollect()` method is called just before the profile is stored.\n\nWe have 3 data collectors that implement that interface:\n- Time: As the traceable event dipsatcher gets inject timing information via the stopwatch about all events (including the `terminate` one), we need to get events from the stopwatch as late as possible.\n- Event: The traceable event dispatcher gathers all called listeners to determine non-called ones. To be able to accurately do that for all events (including the `terminate` one), we need to get the data as late as possible.\n- Memory: We want to get the memory as late as possible to get the most accurate number as possible\n\nI'm not very happy with the name and as always, better suggestions would be much appreciated.\n\nThis is an extract from #9168 \n"
            },
            {
                "title": "Fixed client insulation when using the terminable event",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] added missing argument to listener call",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | na |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen calling a listener, the dispatcher now must pass the event name and the dispatcher (see 7852), but the traceable event dispatcher did not do that.\n"
            },
            {
                "title": "[Validator] Added isValid() getter",
                "body": "This PR was submitted on the symfony/Validator read-only repository and moved automatically to the main Symfony repository (closes symfony/Validator#7).\n\nReposted in the main repo.\n"
            },
            {
                "title": "Add the remove and setAttribute methods ( Feature request )",
                "body": "This PR was submitted on the symfony/DomCrawler read-only repository and moved automatically to the main Symfony repository (closes symfony/DomCrawler#13).\n\nHi,\n\nOriginal solution proposed by bigmax ( http://bit.ly/11GyNAB )\n\nCheers\n"
            },
            {
                "title": "ExceptionController's debug is now twig.options.debug, not a kernel.debug",
                "body": "This PR was submitted on the symfony/TwigBundle read-only repository and moved automatically to the main Symfony repository (closes symfony/TwigBundle#1).\n\n| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nTwigBundle exposes configuration setting `debug` which is by default equal to `%kernel.debug%`.\nThis value can be overridden, but Twig's built-in ExceptionController always uses `%kernel.debug%` instead of `twig.oprions['debug']` so overriding does not affect it.\nSee e.g. [this question on StackOverflow](http://stackoverflow.com/questions/16833201/symfony-2-get-error-instead-of-debug-page-on-test-environment-how-to-set-deb)\nI faced this problem when tried to write tests for my custom 404 page. I set twig.debug to  false  in config_test.yml, but it still displayed stacktrace info instead of my custom 404 page\n"
            },
            {
                "title": "Fix problem with Windows file links (backslash in JavaScript string)",
                "body": "This PR was submitted on the symfony/WebProfilerBundle read-only repository and moved automatically to the main Symfony repository (closes symfony/WebProfilerBundle#5).\n\nWhen you have set php.ini setting xdebug.file_link_format, under Windows this window.location call here isn't escaped properly, so it results in something like:\n\n``` HTML\n<span class= sf-toolbar-info-method  onclick= window.location='pstorm://open/?url=file://F:\\HtDocs\\myproject\\src\\Foo\\Core\\Controller\\PageController.php&amp;line=28';window.event.stopPropagation();return false; >\n    pageAction\n</span>\n```\n\nAll backslashes in window.location are treated as escape sequences witch result in an incorrect link:\npstorm://open/?url=file://F:HtDocsmyprojectsrcFooCoreControllerPageController.php&line=28\n\nSo clicking this link my IDE (phpStorm) couldn't find that file.\n\nThe patch fixes this by escaping the backslashes.\n"
            },
            {
                "title": "[HttpKernel] made the cache key generation configurable for the default HttpCache store",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #9088 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Filesystem] introduced new Exception base classes",
                "body": "The Filesystem class now throws a `FileNotFoundException` if a file could not be found, rather than an basic `IOException`. The new exception is still a child of the `IOException`, this way it doesn' t breack BC.\nThe `IOException` now also takes as the first argument an path to the file of interest, which can be used via the `getPath()` method.\n\nThe switch to the FilesystemInterface will allow you to have an implementation accessing S3 or Dropbox, etc. and still inject it into a classes, which are requiring the Filesystem.\n\n| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| Doc PR | symfony/symfony-docs#2947 |\n"
            },
            {
                "title": "[PropertyAccessor] Throw exception on nonexistant  index  on read access",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | a kind of? |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | 7881 |\n| License | MIT |\n| Doc PR |  |\n\nSee discussion on issue #7881.\n"
            },
            {
                "title": "[Translator] added getLoaders() method",
                "body": "see #8984\n"
            },
            {
                "title": "[Security] limited the password length passed to encoders",
                "body": ""
            },
            {
                "title": "[Locale] added some more stubs for the number formatter",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8588, #6045 |\n| License | MIT |\n| Doc PR | n/a |\n\nI've used this snippet of code to populate the default values for the en locale:\n\n``` php\nfor ($style = 0; $style <= 8; $style++) {\n    $f = new \\NumberFormatter('en', $style);\n    echo 'array(';\n    for ($i = 0; $i <= 17; $i++) {\n        echo  ' .$f->getSymbol($i). ',  ;\n    }\n\n    echo  ),\\n ;\n}\n```\n"
            },
            {
                "title": "[ExpressionLanguage] made minor tweaks",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #9087 |\n| License | MIT |\n| Doc PR | n/a |\n- made ExpressionLanguage::parse return an ParsedExpression instance\n- optimized the size of the serialization of expressions\n"
            },
            {
                "title": "[FrameworkBundle] made sure that the debug event dispatcher is used everywhere",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6686, #7673 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Security] Split the component into 3 sub-components Core, ACL, HTTP",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #9047, #8848 |\n| License | MIT |\n| Doc PR | - |\n\nThe rationale behind this PR is to be able to use any of the sub components without requiring all the dependencies of the other sub components. Specifically, I'd like to use the core utils for an improved CSRF protection mechanism (#6554).\n"
            },
            {
                "title": "updated the composer install command to reflect changes in Composer",
                "body": ""
            },
            {
                "title": "[Console] Fixed exception rendering",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #9045 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen an exception message contains styles, the output is not the expected one. This PR addresses this issue.\n"
            },
            {
                "title": "fixed bytes conversion when used on 32-bits systems",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes (on 32-bits systems) |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8977 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis PR reverts #7413 and #742, which does not work well when a number is big (3Go for instance) and the machine is 32bits.\n"
            },
            {
                "title": "[HttpKernel] fixed route parameters storage in the Request data collector (closes #8867)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8867 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Made fragment URLs relative instead of absolute by default",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8458 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes a regression introduced with the new fragment system where fragment URLs were generated as absolute URLs. As per the ESI spec, there is no need to generate an absolute URL and this can even be problematic when dealing with internal sub-requests in a more  complex  hosting environment.\n"
            },
            {
                "title": "fixes fabpots comment at yaml pr#6",
                "body": ""
            },
            {
                "title": "duplicated the DebugClassLoader in the Debug component",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis is a follow-up for #8553.\n"
            },
            {
                "title": "[FrameworkBundle] added support for double-quoted strings in the extractor (closes #8797)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8797 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[WIP] [DependencyInjection] added support for expressions in the service container",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7352 |\n| License | MIT |\n| Doc PR | not yet |\n\nThis PR introduces a way to inject expression in the definition of a service.\n\nHere is a small usage example:\n\n``` php\nuse Symfony\\Component\\DependencyInjection\\ContainerBuilder;\nuse Symfony\\Component\\DependencyInjection\\Expression;\n\nclass Foo\n{\n    private $value;\n\n    public function __construct($value)\n    {\n        $this->value = $value;\n    }\n\n    public function getBarValue()\n    {\n        return $this->value;\n    }\n}\n\nclass Bar\n{\n    public function getValue()\n    {\n        return 'bar';\n    }\n}\n\n$c = new ContainerBuilder();\n$c->register('bar', 'Bar');\n$c->register('foo', 'Foo')->addArgument(new Expression('bar', 'value'));\n\necho $c->get('foo')->getBarValue(). \\n ;\n```\n\nHere is the XML version:\n\n``` xml\n    <services>\n        <service id= foo  class= Foo >\n            <argument type= expression  id= bar  path= value  />\n        </service>\n        <service id= bar  class= Bar  />\n    </services>\n```\n\nAnd the YAML version:\n\n``` yml\nservices:\n    bar:\n        class: Bar\n\n    foo:\n        class: Foo\n        arguments: [@bar::value]\n```\n\nThe `Expression` constructor takes a service id and a property path (as defined by the Symfony PropertyAccess component). Using the Symfony PropertyAccess component gives you a lot of flexibility in the way you get data from your objects.\n\nExpressions are not limited to service arguments, you can use them everywhere (like in a method call, a configurator, ...).\n\nTodo\n- [ ] update documentation\n- [ ] update all loaders and dumpers\n- [ ] add tests\n\nOpen questions:\n- Do we allow some cusomtization of the property access object (like support for __call?)\n"
            },
            {
                "title": "[Validator] fixed Boolean handling in XML constraint mappings",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5603 |\n| License | MIT |\n| Doc PR | n/a |\n\nping @bschussek\n"
            },
            {
                "title": "fixed request format when forwarding a request",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6932 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen calling forward() in a controller, the format is not the same as for the master request.\n"
            },
            {
                "title": "fixed locale management in sub-requests",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6932, #5532, #8604 |\n| License | MIT |\n| Doc PR | n/a |\n\nSame fix as #8821 but for `_locale`, and a rebase of #8604.\n"
            },
            {
                "title": "Sets _format attribute only if it wasn't set previously by the user",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8787, #8791 |\n| License | MIT |\n| Doc PR |  |\n"
            },
            {
                "title": "[HttpFoundation] added constants for HTTP status code in Response",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis adds constants for HTTP status code in Response. That's give the possibility to use constants instead of numbers in code.\n\nThese constants comes from FriendsOfSymfony/FOSRest but I think it is much better to keep them in Response as both the status texts and the constants should be synchronized.\n\nping @lsmith77\n"
            },
            {
                "title": "[HttpKernel] Fix request _format duplication for HttpKernel's ExceptionListener",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8777, #8778 |\n| License | MIT |\n\nThis is a better fix for #8777.\n"
            },
            {
                "title": "removed deps checks in unit tests",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nAs Composer is now widely used in the PHP world, having to run composer install before running the test suite is expected. This also has the nice benefit of removing a bunch of code, making things easier to maintain (there is only one place to declare a dev dependency), and probably more.\n\nsee fabpot/Silex#626 where we did the same a while ago for Silex.\n"
            },
            {
                "title": "[HttpKernel] fixed event listeners order when wrapped within a TraceableEventDispatcher",
                "body": "This is an attempt to fix #8426 without any BC breaks.\n"
            },
            {
                "title": "form_enctype() fix (closes #8660)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8660 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "changed the ESI fragment renderer to be always registered",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThis is an alternative implementation for #8427\n"
            },
            {
                "title": "[TwigBundle] Created stopwatch tag for profiling templates",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7953 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2630 |\n\nThis PR is the continuation of #7953\n\nThis PR adds a new tag to Twig which you can use to time parts of a template and see it in the timing tab of the profiler.\n\nUsage:\n\n``` jinja\n{% stopwatch foo %}\n... some things that gets timed\n{% endstopwatch %}\n```\n"
            },
            {
                "title": "Add the referer information that could help you findout where's the link comes from",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n#8218 rebased on master and slightly tweaked.\n"
            },
            {
                "title": "[TwigBundle] made the filesystem loader compatible with Twig 2.0",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes (for Twig 2.x) |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nWithout adding the exists() method, the code happens to work by chance,\njust because the current implementation of Twig exits() method calls\nfindTemplate().\n\nBut we know that it won't be the case anymore as of Twig 2.0.\n"
            },
            {
                "title": "replaced deprecated Twig features",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nAs Symfony depends on Twig 1.11+, removing the usage of deprecated features will allow Symfony 2.2+ to work with Twig 2.0.\n"
            },
            {
                "title": "moved some fixed dep versions from 2.2.* to ~2.2",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8613 |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "Added a missing dev dep for Httpkernel",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8613 |\n| License | MIT |\n| Doc PR | - |\n"
            },
            {
                "title": "[FrameworkBundle] fixed regression where the command might have the wrong container if the application is reused several times",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] fixed regression where the command might have the wrong container if the application is reused several times",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes a regression introduced in #8242. Before this PR, the commands were always getting the current container registered in the kernel. But as the commands are now registered only once, if the container changes, the commands were not aware of this change. That happens quite frequently in functional tests where the Kernel is booted and shutdown several times in the same process.\n"
            },
            {
                "title": "[Validator] Fixed StaticMethodLoader does not try to invoke methods of abstract classes anymore",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8589 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed regression where setting a service to null did not trigger a re-creation of the service when getting it (closes #8392)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8392 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "removed dead code and fixed CS",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Debug] Developer friendly Class Not Found and Undefined Function errors",
                "body": "This is a followup of #8156\n\n| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8156 |\n| License | MIT |\n| Doc PR | n/a |\n\nHere is the original description from #8156:\n\nPer a discussion with @weaverryan and others, I took a crack at enhancing the exception display for class not found errors and undefined function errors. It is not the cleanest solution but this is a work in progress to see whether or not following this path makes sense.\n# Class Names\n## Class Not Found: Unknown Class (Global Namespace)\n\n``` php\n<?php\nnew WhizBangFactory();\n```\n\n> Attempted to load class 'WhizBangFactory' from the global namespace in foo.php line 12. Did you forget a use statement for this class?\n## Class Not Found: Unknown Class (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar;\nnew WhizBangFactory();\n```\n\n> Attempted to load class 'WhizBangFactory' from namespace 'Foo\\Bar' in foo.php line 12. Do you need to 'use' it from another namespace?\n## Class Not Found: Well Known Class (Global Namespace)\n\n``` php\n<?php\nnew Request();\n```\n\n> Attempted to load class 'Request' from the global namespace in foo.php line 12. Did you forget a use statement for this class? Perhaps you need to add 'use Symfony\\Component\\HttpFoundation\\Request' at the top of this file?\n## Class Not Found: Well Known Class (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar;\nnew Request();\n```\n\n> Attempted to load class 'Request' from namespace 'Foo\\Bar' in foo.php line 12. Do you need to 'use' it from another namespace? Perhaps you need to add 'use Symfony\\Component\\HttpFoundation\\Request' at the top of this file?\n# Functions\n## Undefined Function (Global Namespace)\n\n``` php\n<?php\n// example.php:\n// namespace Acme\\Example;\n// function test_namespaced_function()\n// {\n// }\ninclude  example.php ;\n\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from the global namespace in foo.php line 12. Did you mean to call: '\\acme\\example\\test_namespaced_function'?\n## Undefined Function (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar\\Baz;\n\n// example.php:\n// namespace Acme\\Example;\n// function test_namespaced_function()\n// {\n// }\ninclude  example.php ;\n\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from namespace 'Foo\\Bar\\Baz' in foo.php line 12. Did you mean to call: '\\acme\\example\\test_namespaced_function'?\n## Undefined Function: Unknown Function (Global Namespace)\n\n``` php\n<?php\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from the global namespace in foo.php line 12.\n## Undefined Function: Unknown Function (Full Namespace)\n\n``` php\n<?php\nnamespace Foo\\Bar\\Baz;\n\ntest_namespaced_function()\n```\n\n> Attempted to call function 'test_namespaced_function' from namespace 'Foo\\Bar\\Baz' in foo.php line 12.\n"
            },
            {
                "title": "[Twig] fixed TwigEngine::exists() method when a template contains a syntax error (closes #8546)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8546 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "removed unused code",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Render objects fix",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7124 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] changed the fragment handler to explicitely disallow non-scalar in generated URIs (refs #8263)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8263 |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen using the `render()` function in Twig with a `controller()` reference, the attributes can contain non-scalar. That's fine for the inline strategy, but it cannot work for other strategies as it then involves a proper HTTP request.\n\nSo, this PR properly throw an exception in such situations to avoid difficult to find bugs.\n"
            },
            {
                "title": "[HttpFoundation] fixed issue with session_regenerate_id (closes #7380)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7380 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Security] fixed usage of the salt for the bcrypt encoder (refs #8210)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8210 |\n| License | MIT |\n| Doc PR | n/a |\n\nsee #8210\n"
            },
            {
                "title": "changed all version deps to accept all upcoming Symfony versions",
                "body": "Everything is in the title.\n"
            },
            {
                "title": "Console fix",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | yes (possibly) |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | symfony/symfony-standard#526 |\n| License | MIT |\n| Doc PR | n/a |\n\nEverything is explained in the commits.\n"
            },
            {
                "title": "[Security] fixed wrong merge (refs #4776)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes a bad conflict resolution when #4776 was merged.\n"
            },
            {
                "title": "added a missing check for the provider key",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "made some optimization when parsing YAML files",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis change makes a small speed optimization when loading a YAML file, but more important, it allows to use local stream wrappers instead of regular files on the filesystem.\n"
            },
            {
                "title": "[BrowserKit] fixed BC break done recently",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis PR tries to avoid a BC break that was introduced recently in the management of cookies (see #7738).\n\nsee fabpot/Silex#684\n"
            },
            {
                "title": "Profiler activation",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7064, #7071 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2565 |\n\nAs stated in #7071, there is no way to disable the profiler completely. Even when the `enabled` flag is set to `false`, the profiler is still registered but the data collectors are not activated.\n\nNow, when `enabled` is `false`, the profiler is disabled. To get the old `false` behavior, you now need to set `enabled` to `true` and set the new `collect` flag to `false`.\n\nTodo:\n- [x] update docs\n- [x] update Symfony SE -- not needed\n"
            },
            {
                "title": "[Security] Outsource all the BCrypt heavy lifting to a library",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThe [BCrypt bundle](https://github.com/elnur/ElnurBlowfishPasswordEncoderBundle) is already using the library.\n\nThis is a working implementation of #7247\n"
            },
            {
                "title": "[2.3] [TwigBridge] save auto-escaping of generated URLs when possible",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | [no] |\n| New feature? | [yes: optimization] |\n| BC breaks? | [no] |\n| Deprecations? | [no] |\n| Tests pass? | [yes] |\n| Fixed tickets | #7088 |\n| License | MIT |\n| Doc PR | [-] |\n\nDetermines at compile time whether the generated URL will be safe and thus\nsaving the unneeded automatic escaping for performance reasons.\n\nThe URL generation process percent encodes non-alphanumeric characters. So there is no risk\nthat malicious/invalid characters are part of the URL. The only character within an URL that\nmust be escaped in html is the ampersand ( & ) which separates query params. So we cannot mark\nthe URL generation as always safe, but only when we are sure there won't be multiple query\nparams. This is the case when there are none or only one constant parameter given.\nE.g. we know beforehand this will be safe:\n- path('route')\n- path('route', {'param': 'value'})\n\nBut the following may not:\n- path('route', var)\n- path('route', {'param': ['val1', 'val2'] }) // a sub-array\n- path('route', {'param1': 'value1', 'param2': 'value2'})\n\nIf param1 and param2 reference placeholder in the route, it would still be safe. But we don't know.\n"
            },
            {
                "title": "[FrameworkBundle] make RegisterKernelListenersPass reusable",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6643 |\n| License | MIT |\n| Doc PR | n/a |\n\nsee #6643 \n"
            },
            {
                "title": "[HttpFoundation] added a note about JSON responses as arrays (refs #6970)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6970 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2555 |\n"
            },
            {
                "title": "Add a way to create a short controller name (a:b:c) from a fully qualify one (controller::action)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5865 |\n| License | MIT |\n| Doc PR | n/a |\n\nWorking implementation of #5865\n"
            },
            {
                "title": "Browserkit redirections",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7811, #7731 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "fixed Client implementation to return the right Response (closes #4475)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #4475 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2549 |\n\nThis PR addresses #4475 by trying to minimize the BC break impact.\n"
            },
            {
                "title": "[WIP][HttpFoundation] File mime types and extensions",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5039, #6963, #5258, #7415, #5615 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis pull request addresses most of the issues regarding mime types and extension on File instances.\n\nI've also created an issue on the docs to add more documentation about how things work (see symfony/symfony-docs#2542).\n"
            },
            {
                "title": "[HttpKernel] added logging when an inline fragment cannot be rendered and ignore_errors is on",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7339, #1991, #6400 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis is a rebased and tested version of #7339. This is probably not the most beautiful code, but it gets the job done and does the exact same thing as any other exception handling.\n"
            },
            {
                "title": "Add This field is missing RU translation",
                "body": "This PR was submitted on the symfony/Validator read-only repository and moved automatically to the main Symfony repository (closes symfony/Validator#4).\n\n<source>This field is missing.</source>\nHave no translation. Not exists in EN version too. Just\u00a0forgot?\u00a0\nSymfony\\Component\\Validator\\Constraints\\Collection()\npublic $missingFieldsMessage = 'This field is missing.';\n"
            },
            {
                "title": "Filesystem::touch() not working with different owners (utime/atime issue)",
                "body": "This PR was submitted on the symfony/Filesystem read-only repository and moved automatically to the main Symfony repository (closes symfony/Filesystem#3).\n\nCase: I have 2 users, www-data and myself. I have a command script that makes a lock file in /var/lock/.../ something. This command is called from a post request by FOS and ran in the background.  Whever one of the 2 methods (web/cli manually) is used, the other user won't have permissions to use the Filesystem::touch(). The reason this won't work is the second parameter.\n\nWhat touch() does:\n$touch param: The touch time. If time is not supplied, the current system time is used.\n$atime param: If present, the access time of the given filename is set to the value of atime. Otherwise, it is set to the value passed to the time parameter. If neither are present, the current system time is used.\n\nSo the current code is basically copying this. However, if the second parameter is null it is still present and will cause the same problem. Note that all files and folders related are set to 0777 and have the owner of www-data. I'm accessing them under my own account here:\n\nInteractive shell\n\nphp > var_dump(touch('/var/lock/tripolis/ontw/dev/2140191804.lock', null));\nPHP Warning:  touch(): Utime failed: Operation not permitted in php shell code on line 1\n\nWarning: touch(): Utime failed: Operation not permitted in php shell code on line 1\nbool(false)\nphp > var_dump(touch('/var/lock/tripolis/ontw/dev/2140191804.lock'));\nbool(true)\n\nIf I were to pass it without second parameter, let it be time() or null (Filesystem uses time() by default if not present), it DOES work. However, Filesystem::touch() ALWAYS gives a parameter to touch. This parameter is exactly the same value as what the function itself would do in php. Let it be that in my case there is an issue with the atime. I'm not exactly sure how it works but it's not tracked or usable in my case. Because parameter 2 exists, parameter 3 is set. Parameter 3 is not allowed and therefore causes Filesystem::touch() to throw an exception.\n"
            },
            {
                "title": "Method each return an instance of Crawler instead DOMElement",
                "body": "This PR was submitted on the symfony/DomCrawler read-only repository and moved automatically to the main Symfony repository (closes symfony/DomCrawler#9).\n\nMethod each return an instance of Crawler instead DOMElement\n"
            },
            {
                "title": "Added html method into Crawler class",
                "body": "This PR was submitted on the symfony/DomCrawler read-only repository and moved automatically to the main Symfony repository (closes symfony/DomCrawler#11).\n\nA pull request is waiting for aproval, but is not tested\n- This method allow to get html inside desired element\n- New method is tested\n"
            },
            {
                "title": "[HttpKernel] allowed any callable to be returned by ControllerResolver::createController",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[BrowserKit] fixed detection of secure cookies received over https",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7666, #7738 |\n| License | MIT |\n| Doc PR | N/A |\n\nAs reported in symfony/symfony#7666, BrowserKit's cookie handling only recognises a secure cookie if the cookie option is set and the cookie was set over an https request. The client was not passing the url into the cookiejar update code, causing Cookie::isSecure() to always return false for every cookie.\n\nI have corrected this behaviour and added an additional unit test to prove the bug and fix.\n"
            },
            {
                "title": "[HttpFoundation][FrameworkBundle] Add CIDR notation support in trusted proxy list",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7312, #7262 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2287 |\n\nShould be rebased once #7734 is merged.\n"
            },
            {
                "title": "Refactored tests of Request::getTrustedProxies()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis PR reorganizes the tests for the request trusted proxies as they were unreadable. In the process, I've also removed obsolete stuff and changed the order returned by `Request::getClientIps()` (not a BC break as this method was added in 2.3 -- see #7612).\n"
            },
            {
                "title": "[DependencyInjection] fixed management of scoped services with an invalid behavior set to null",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7636 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed wrong exception class",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Console dispatcher",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #3889, #6124 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2352 |\n\nrefs #1884, #1929\n\nThis is an alternative implementation for adding events to console applications.\n\nThis implementation has the following features:\n- Available for anyone using the Console component and it is not tied to\n  FrameworkBundle (this is important as one thing we are trying to solve is\n  email sending from a command, and frameworks like Silex using the Console\n  component needs a solution too);\n- Non-intrusive as the current code has not been changed (except for renaming\n  an internal variable that was wrongly named -- so that's not strictly needed\n  for this PR)\n- The new DispatchableApplication class also works without a dispatcher,\n  falling back to the regular behavior. That makes easy to create applications\n  that can benefit from a dispatcher when available, but can still work\n  otherwise.\n- Besides the _before_ and _after_ events, there is also an _exception_ event\n  that is dispatched whenever an exception is thrown.\n- Each event is quite powerful and can manipulate the input, the output, but\n  also the command to be executed.\n"
            },
            {
                "title": "[Console] added a way to normalize a command display when using the tester",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "moved the request scope creation to the ContainerAwareHttpKernel class",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2343 |\n\nWhile updating the scope documentation, I realized that the request scope was created in the FrameworkBundle while the HttpKernel that manages it was in the HttpKernel component. So, this PR makes things more consistent.\n"
            },
            {
                "title": "[DependencyInjection] fixed wrong invalid behavior flag",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Debug] added the component (closes #6828, closes #6834, closes #7330)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | yes |\n| Tests pass? | yes |\n| Fixed tickets | #6828, #6834, #7330 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2479 |\n\nYou can use the individual tools, or register them all:\n\n``` php\nuse Symfony\\Component\\Debug\\Debug;\n\nDebug::enable();\n```\n\nChanges in Symfony SE: symfony/symfony-standard#523\n"
            },
            {
                "title": "[HttpKernel] made the Kernel class more flexible (closes #7396)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7396 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[ClassLoader] fixed heredocs handling",
                "body": "The end of an hereodc must have a newline to avoid PHP syntax errors.\n"
            },
            {
                "title": "[ClassLoader] fixed handling of heredocs",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[FrameworkBundle] fixed regression for the translator fallback configuration (refs #7100, closes #7315)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7315 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed id case when setting a service (also slightly enhanced an error message)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Fix missing argument",
                "body": "This PR was submitted on the symfony/Serializer read-only repository and moved automatically to the main Symfony repository (closes symfony/Serializer#4).\n\nFix  Warning: Missing argument 3  for XmlEncoder::buildXml() called several times in XmlEncoder::selectNodeType()\n"
            },
            {
                "title": "[WebProfilerBundle] removed the display of some information when their value is n/a",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7002 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[WIP] Removed deprecated stuff",
                "body": ""
            },
            {
                "title": "fixed HInclude renderer (closes #7113)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7113 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[2.3] [Translator] fixed inconsistency in Translator",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixed locale management when exiting sub-requests",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7063 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fix is temporary as #7007 will fix it properly in Symfony 2.3.\n"
            },
            {
                "title": "Fixed content type when passed as a server value",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7025 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "added a proper setter for the templating servicein HInclude",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] added error display suppression when using the ErrorHandler (if not, errors are displayed twice, refs #6254)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[WebProfilerBundle] removed dependency on FrameworkBundle (closes #6949)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6949 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Make HttpCache behaves more like a real reverse proxy",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6982, #7000 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Update Composer deps",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nSince we adopted Composer in Symfony, we limit the Symfony Components deps for any Symfony Component to the current version of Symfony. That's very limited as for instance, any version of Yaml can be used as a dependency for any other Symfony Component. So, this PR changes the version constraints for dependencies to the largest range possible.\n\nThe idea is also to open the range even more when new versions of Symfony comes.\n"
            },
            {
                "title": "[2.3] [WIP] Synchronized services...",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5300, #6756 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2343 |\n\nTodo:\n- [x] update documentation\n- [x] find a better name than contagious (synchronized)?\n\nrefs #6932, refs #5012\n\nThis PR is a proof of concept that tries to find a solution for some problems we have with scopes and services depending on scoped services (mostly the request service in Symfony).\n\nBasically, whenever you want to inject the Request into a service, you have two possibilities:\n- put your own service into the request scope (a new service will be created whenever a sub-request is run, and the service is not available outside the request scope);\n- set the request service reference as non-strict (your service is always available but the request you have depends on when the service is created the first time).\n\nThis PR addresses this issue by allowing to use the second option but you service still always has the right Request service (see below for a longer explanation on how it works).\n\nThere is another issue that this PR fixes: edge cases and weird behaviors. There are several bug reports about some weird behaviors, and most of the time, this is related to the sub-requests. That's because the Request is injected into several Symfony objects without being updated correctly when leaving the request scope. Let me explain that: when a listener for instance needs the Request object, it can listen to the `kernel.request` event and store the request somewhere. So, whenever you enter a sub-request, the listener will get the new one. But when the sub-request ends, the listener has no way to know that it needs to reset the request to the master one. In practice, that's not really an issue, but let me show you an example of this issue in practice:\n- You have a controller that is called with the English locale;\n- The controller (probably via a template) renders a sub-request that uses the French locale;\n-  After the rendering, and from the controller, you try to generate a URL. Which locale the router will use? Yes, the French locale, which is wrong.\n\nTo fix these issues, this PR introduces a new notion in the DIC: synchronized services. When a service is marked as synchronized, all method calls involving this service will be called each time this service is set. When in a scope, methods are also called to restore the previous version of the service when the scope leaves.\n\nIf you have a look at the router or the locale listener, you will see that there is now a `setRequest` method that will called whenever the request service changes (because the `Container::set()` method is called or because the service is changed by a scope change).\n"
            },
            {
                "title": "[2.3] [WebProfiler] added the possibility to override the application name/version in the WDT",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[2.3] [WebProfilerBundle] removed the display of some information when their value is n/a",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "replaced usage of the deprecated pattern routing key (replaced with path)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel] fixed the hinclude fragment renderer when the template is empty",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpFoundation] fixed Request::create() method",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nWhen creating a Request with Request::create(), some information can\ncome from the URI and the server variable. Until now, it was not clear\nwhich information had precedence over the other and as a matter of fact,\nthis method was not consistent.\n\nNow, information contained in the URI always take precedence over\ninformation coming from the server array. That makes sense as the server\narray is often copied from another existing Request object.\n"
            },
            {
                "title": "[DependencyInjection] enhanced some error messages",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpFoundation] fixed the creation of sub-requests under some circumstancies (closes #6923, closes #6936)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6923, #6936 |\n| License | MIT |\n| Doc PR | n/a |\n\nThis fixes the creation of a sub-request when the master request Request URI\nis determined with specific server information.\n"
            },
            {
                "title": "[Security] fixed session creation when none is needed (closes #6917)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6917 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[DependencyInjection] fixed a circular call (closes #6864)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6864 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[HttpKernel]\u00a0fixed regression when rendering an inline controller and passing some objects (closes #6822)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6822 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "renamed some classes and Twig functions to more descriptive names (refs #6871)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6871 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2205 |\n\nTodo:\n- [x] update the docs\n\nIn #6871, @kriswallsmith wondered if the names used for the ESI/HIncludes sub-framework were meaningful enough.\n\nI agree that this was not the case and I propose to remove the notion of **sub-requests** in favor of **fragments**. This sub-framework is a way to render fragments of a resource (the fact that it's done via another request is an implementation detail).\n\nWith that decision, all names can be renamed and are probably more meaningful. Some examples:\n- `HttpContentRenderer` -> `FragmentHandler`\n- `RouterProxyListener` -> `FragmentListener`\n- `router_proxy` -> `fragments` (configuration entry)\n- `DefaultRenderingStrategy` -> `InlineFragmentRenderer`\n"
            },
            {
                "title": "[Finder] fixed regression in the Finder component (it was possible to use it without using exec before, closes #6357)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes (fixed a BC break) |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6357 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Console] added some missing information in the phpdoc (closes #6464)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6464 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "removed deprecated messages coming for internal calls",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6407 |\n| License | MIT |\n| Doc PR | n/a |\n\nIt's probably not the cleanest code possible, but I don't see any other way to keep the type for BC and avoid the deprecated message when called internally.\n\nThat should fix the deprecated messages thrown by the Form and Validator components.\n"
            },
            {
                "title": "updated ValidatorExtension to avoid using a deprecated method",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "fixed a circular reference (closes #6730)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6730 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Content renderer simplification",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2179 |\n\nTodo:\n- [x] submit a PR for documentation update\n\nThe first commit makes the Request required when dealing with rendering strategies (see the commit why this was a bad idea to make it optional in the first place).\n\nThe second commit removes the need for a proxy route and replaces it with the same system we have in the security component.\n\nThe third commit makes the proxy path configurable (default to `/_proxy`).\n\nThis PR has been triggered by a discussion on #6791.\n"
            },
            {
                "title": "[DependencyInjection] fixed the creation of synthetic services in ContainerBuilder",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Hostname rename to host",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no (does not exist in 2.1) |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6775 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2165 |\n\nsee #6775\n"
            },
            {
                "title": "tweaked the deprecated error handler to actually display the deprecation message",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nI've also removed uninterested information (like the trigger_error stack\nframe).\n"
            },
            {
                "title": "[TwigBridge] fixed format_file to include the line number even if the link text is passed",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThat fixes the logs in the profiler where lines were not displayed for deprecated calls.\n"
            },
            {
                "title": "[HttpKernel] refactored the HTTP content renderer to make it easier to extend",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | kinda |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nThis makes the StreamedResponse logic reusable for other strategies and it also makes the RenderingStrategy interface less fuzzy about its contract.\n\nThat also makes features like #4470 easier to implement from the outside.\n"
            },
            {
                "title": "[FrameworkBundle] fixed circular reference for service templating (closes #6730, closes #6762)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6730, #6762 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[FrameworkBundle] fixed Client::doRequest that must call its parent method (closes #6737)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6737 |\n| License | MIT |\n| Doc PR | n/A |\n"
            },
            {
                "title": "[FrameworkBundle] fixed requirement of the _controller placeholder for the proxy route (closes #6783)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6783 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "[Yaml] fixed ignored text when parsing an inlined mapping or sequence (closes #6786)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6786 |\n| License | MIT |\n| Doc PR | n/a |\n"
            },
            {
                "title": "Routing options",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | yes |\n| Tests pass? | yes |\n| Fixed tickets | #5989, #5990, #6049 |\n| License | MIT |\n\nIn #5989, it has unanimously been decided to renamed `hostname_pattern` to `hostname` and `pattern` to `path`. That makes a lot of sense and I would like to do the renaming now as `hostname_pattern` is new in Symfony 2.2, so I'd like to avoid breaking BC just after the release. As we are modifying the route options, I've also included changes introduced by @Tobion in #6049 which were discussed in #5990.\n\nAs everything is BC, I think it's wise to include that in 2.2. What do you think?\n"
            },
            {
                "title": "[DependencyInjection] fixed a bug where the strict flag on references were lost (closes #6607)",
                "body": ""
            },
            {
                "title": "[DependencyInjection] Fixed PhpDumper when compiling inlined services",
                "body": ""
            },
            {
                "title": "[Console] fixed unitialized properties (closes #5935)",
                "body": ""
            },
            {
                "title": "added MatcherInterface as a marker for all Routing matcher classes",
                "body": "This allows to use a type hint when you want to support both UrlMatcherInterface and RequestMatcherInterface\n"
            },
            {
                "title": "[HttpKernel] refactored logging in the exception listener",
                "body": "- avoid code duplication\n- allow easier overloading of the default behavior\n"
            },
            {
                "title": "[DependencyInjection] removed hard dependency on the Config component",
                "body": "The Config component is a hard dependency for the loaders (but loaders\nthemselves are optional); all other classes should not have a hard dep\non Config. The introduction of a new flag allows to remove this\ndependency.\n\nThis commit also fixes skipped test dependencies.\n"
            },
            {
                "title": "[DependencyInjection] fixed setting a synthetic service on a frozen container",
                "body": "By definition of a synthetic service, setting it on a frozen container should be possible.\n"
            },
            {
                "title": "[FrameworkBundle] changed data collector templates to use the new namespaced template names",
                "body": "#6465 must be merged first.\n"
            },
            {
                "title": "made the kernel optional in all data collectors",
                "body": ""
            },
            {
                "title": "[WIP] Kernel refactor",
                "body": "Currently, the handling of sub-requests (including ESI and hinclude) is mostly done in FrameworkBundle. It makes these important features harder to implement for people using only HttpKernel (like Drupal and Silex for instance).\n\nThis PR moves the code to HttpKernel instead. The code has also been refactored to allow easier integration of other rendering strategies (refs #6108).\n\nThe internal route has been re-introduced but it can only be used for trusted IPs (so for the internal rendering which is managed by Symfony itself, or by a trusted reverse proxy like Varnish for ESI handling). For the hinclude strategy, when using a controller, the URL is automatically signed (see #6463).\n\nThe usage of a listener instead of a controller to handle internal sub-requests speeds up things quite a lot as it saves one sub-request handling. In Symfony 2.0 and 2.1, the handling of a sub-request actually creates two sub-requests.\n\nRendering a sub-request from a controller can be done with the following code:\n\n``` jinja\n{# default strategy #}\n{{ render(path( partial )) }}\n{{ render(controller( SomeBundle:Controller:partial )) }}\n\n{# ESI strategy #}\n{{ render(path( partial ), { strategy: 'esi' }) }}\n{{ render(controller( SomeBundle:Controller:partial ), { strategy: 'esi' }) }}\n\n{# hinclude strategy #}\n{{ render(path( default1 ), { strategy: 'hinclude' }) }}\n```\n\nThe second commit allows to simplify the calls a little bit thanks to some nice syntactic sugar:\n\n``` jinja\n{# default strategy #}\n{{ render(path( partial )) }}\n{{ render(controller( SomeBundle:Controller:partial )) }}\n\n{# ESI strategy #}\n{{ render_esi(path( partial )) }}\n{{ render_esi(controller( SomeBundle:Controller:partial )) }}\n\n{# hinclude strategy #}\n{{ render_hinclude(path( default1 )) }}\n```\n"
            },
            {
                "title": "[FrameworkBundle] fixed ESI calls",
                "body": "closes #6445\n"
            },
            {
                "title": "Added an HttpKernelExtension in Twig bridge and used it in the WebProfiler",
                "body": "The first commit introduces a new HttpKernelExtension in the Twig bridge that allows the rendering of a sub-request from a template (the code mostly comes from Silex, and will replace the code there at some point).\n\nThe name `render` is probably not the best one as it does not really tell you what it does (the same goes for the `render` tag we have in Symfony2 by the way).\n\nHere is a list of possible names:\n- `render()`\n- `render_request()`\n- `request()`\n- `subrequest()`\n- `include_request()`\n\nI don't really like the last one, but it is (perhaps) consistent with the `include` tag/function in Twig.\n\nThis new `render()` function is also a first step towards replacing the `render` tag (with support for ESI, SSI, ...). But it won't happen before we refactor the way it's managed now (a lot of the code is in the FrameworkBundle right now and that prevents Silex or Drupal to reuse it).\n\nThe other commits make use of this new extension to make the Web Profiler truly independent from TwigBundle and FrameworkBundle.\n"
            },
            {
                "title": "Config key normalization",
                "body": "This is a quick proof-of-concept for a better fix of #6086, where key normalizations can be disabled on specific nodes. The previous patch was not really useful as you were only able to disable key normalization globally for a configuration.\n\nping @lolautruche\n\nThe second commit fixes #5998.\n"
            },
            {
                "title": "[MessageCatalogue] Add Metadata to MessageCatalogue",
                "body": "rework of #4399\n\nFor improving the Gettext tools (PO, MO File Loader/Dumper) we need at least storage for their meta data.\n\nThis patch allows for issues below to store and process ie Po Header, Po Header Pluralisation rule.\n\nOpen\n- [[WIP]: Allow Drupal to use Translate component](https://github.com/symfony/symfony/pull/4249)\n- [[2.1][Translator] Symfony translation process & gettext](https://github.com/symfony/symfony/issues/4245)\n\nClosed:\n- [[Translation] Po/MoFileLoader parse plurization rules](https://github.com/symfony/symfony/pull/3023)\n\nIt has 1 TODO regarding addCatalogue: it now just override old values with new.\n"
            },
            {
                "title": "[Console] Add ability to select values interactively",
                "body": "This is a slightly modified version of #5417\n\nAdds ability to select from value list:\n\n```\n$values = array('One', 'Two', 'Three');\n$pick = $this->getHelper('dialog')->select($output, 'Pick a bundle:', $values, 2);\nvar_dump($pick);\n```\n\n... would give the following CLI output:\n\n```\nPick a bundle:\n  0   One\n  1   Two\n  2   Three\n> 1\n1\n```\n"
            },
            {
                "title": "Webprofiler refactor",
                "body": "This PR removes two hard dependencies from WebProfilerBundle:\n- The dependency on the DIC;\n- The dependency on TwigBundle.\n\nIt also removes the dependency on the DIC in the exception controller from TwigBundle for more consistency.\n"
            },
            {
                "title": "[Translation] uniformized the way exception are thrown in LoaderInterface::load()",
                "body": ""
            },
            {
                "title": "[Serializer] - undefined index #",
                "body": "replaces #6293\n"
            },
            {
                "title": "[HttpFoundation] changed UploadedFile::move() to use move_uploaded_file() when possible (closes #5878, closes #6185)",
                "body": "An alternative for #5878 and it fixes #6185.\n"
            },
            {
                "title": "[HttpFoundation] changed UploadedFile::move() to use move_uploaded_file() when possible",
                "body": "An alternative for #5878 and it fixes #6185.\n"
            },
            {
                "title": "[HttpFoundation] added a check for the host header value",
                "body": "alternative for #3865\n"
            },
            {
                "title": "[HttpFoundation] added a check for the host header value",
                "body": "alternative for #3865\n"
            },
            {
                "title": "[HttpFoundation] disabled Request _method feature by default",
                "body": "It should now be explicitely enabled via a call to enableHttpMethodOverride())\n"
            },
            {
                "title": "moved most static assets directly into the templates",
                "body": "This has been done for several reasons:\n- for consistency with the way we already manage the WDT and the\n  profiler icons;\n- it makes the Exception independent from the location of the assets\n  (and from the asset() function)\n- this is the second step to make the WebProfiler useable outside the\n  full-stack framework\n\nsee dbcd171dd3097f1f1d9d94c9112aaf8eb974a015\n"
            },
            {
                "title": "Public resources refactoring",
                "body": "The first 3 commits are just cosmetic ones.\n\nThe last one refactors CSS, images, and templates included in the built-in bundles. Right now, everything is tied to the exception pages, but the code can be used standalone.\n\nSo, the goal is to make things more decoupled and more reusable across different bundles. That way, a bundle can provide pages that look like the other ones in Symfony without the need to duplicate code.\n\nSee the associated PR for the distribution bundle to see an example.\n\nIf you want to have a look at the last commit (not sure if it is worth it), you probably want to append ?w=1 to the URL to avoid too much whitespace noise.\n"
            },
            {
                "title": "moved code helper code to the Twig bundle",
                "body": "These helpers are very specific and are only used in TwigBundle for the\nprofiler and the exception templates.\n"
            },
            {
                "title": "displayed the full event listener names to avoid name collisions (closes #5019)",
                "body": ""
            },
            {
                "title": "[HttpKernel] fixed Client when using StreamedResponses (closes #5370)",
                "body": ""
            },
            {
                "title": "fixed PDO session handler for Oracle (closes #5829)",
                "body": ""
            },
            {
                "title": "made usage of Composer autoloader for subtree-split unit tests",
                "body": "This PR also normalizes the way components are tested.\n"
            },
            {
                "title": "[HttpFoundation] moved the HTTP protocol check from StreamedResponse to Response (closes #5937)",
                "body": ""
            },
            {
                "title": "moved the Stopwatch classes to their own component",
                "body": "see https://github.com/symfony/symfony/issues/5911\n"
            },
            {
                "title": "[HttpKernel] added memory information in the Stopwatch",
                "body": ""
            },
            {
                "title": "Changed some security classes to implement the EventSubscriberInterface interface",
                "body": ""
            },
            {
                "title": "[Security] removed the 401 error custom status message",
                "body": "see fabpot/Silex#496\n"
            },
            {
                "title": "Remove the custom HTTP status message from 401 responses",
                "body": "see fabpot/Silex#496\n"
            },
            {
                "title": "[HttpKernel] normalized HTTP exceptions classes",
                "body": "I've removed the code as it is never used.\n\nAnd I've added the headers argument to all sub-classes.\n"
            },
            {
                "title": "[TwigBundle] added support for Twig namespaced paths (Twig 1.10)",
                "body": "In a template, you can now use native Twig template names, instead of\nthe Symfony ones:\n\nBefore (still works):\n\n```\n{% extends  AcmeDemoBundle::layout.html.twig  %}\n{% include  AcmeDemoBundle:Foo:bar.html.twig  %}\n```\n\nAfter:\n\n```\n{% extends  @AcmeDemo/layout.html.twig  %}\n{% include  @AcmeDemo/Foo/bar.html.twig  %}\n```\n\nUsing native template names is also faster.\n\nThe only drawback is that the new notation looks similar to the way we\nlocate resources in Symfony, which would be\n`@AcmeDemoBundle/Resources/views/Foo/bar.html.twig`. We could have used\nthe same notation, but it is rather verbose (and by the way, using this\nnotation did not work anyway in templates).\n\nTODO: update documentation\n"
            },
            {
                "title": "Fluent interface",
                "body": "This PR was submitted on the symfony/Process read-only repository and moved automatically to the main Symfony repository (closes symfony/Process#1).\n"
            },
            {
                "title": "Patch method OptionsResover::validateOptionValues().",
                "body": "This PR was submitted on the symfony/OptionsResolver read-only repository and moved automatically to the main Symfony repository (closes symfony/OptionsResolver#1).\n\nWhen we define allowed values for an optional option and the corresponding option was not set. On resolve, OptionsResover::validateOptionValues() was throwing a notice.\n"
            },
            {
                "title": "Replaced ContainerAwareTraceableEventDispatcher with TraceableEventDispatcher",
                "body": "The ContainerAwareTraceableEventDispatcher class was tied to both the\nSymfony container and the HttpKernel profiler. It made it non reusable\nin another context.\n\nThe new TraceableEventDispatcher only keeps the HttpKernel profiler\nintegration and is able to wrap any other event dispatcher. It makes it\nreusable in frameworks using the Symfony HttpKernel component like\nSilex.\n\nThe only drawback is that we don't have access to the listener\npriorities in the collected data anymore (but the listeners are still\nordered correctly). The change is still worth it I think.\n"
            },
            {
                "title": "[2.2] added a way to enable the profiler for the very next request in a functional test",
                "body": "Bug fix: yes/no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4307\nTodo: -\nLicense of the code: MIT\nDocumentation PR: should be done before merging\n\nAfter merging this PR, we need to disable the profiler in the test environment in Symfony SE.\n"
            },
            {
                "title": "[2.2][Security] Add a PRNG (closes #3595)",
                "body": "As per #3595, I have moved the secure random class from JMSSecurityExtraBundle to Symfony.\n\nIt has more impact than I expected ;)\n\nAs you will see, the implementation has been refactored a bit. The most notable change is that Doctrine support has been moved to the bridge with the addition of a proper Doctrine seed provider (Doctrine is not a special case anymore).\n\nThe Doctrine configuration has been moved to the DoctrineBundle: doctrine/DoctrineBundle#91\n\nschmittjoh/JMSSecurityExtraBundle#65 removes the code that has been moved.\n"
            },
            {
                "title": "Classloader optimization",
                "body": "The first commit fixes support for PHP 5.4 trait.\n\nThe second one does several things:\n- it optimizes the recent merge so that the reflection class instance is only loaded once;\n- we use the fact that we now get all class dependencies to automatically add all class dependencies to the map.\n"
            },
            {
                "title": "made the charset overridable (closes #2072)",
                "body": "The charset was configurable in a configuration file but it never worked:\n\n```\nframework:\n    charset: ISO-8859-1\n```\n\nNow, like for the cache and log dirs, you can configure the charset by\noverriding the getCharset() method in the app kernel:\n\n```\npublic function getCharset()\n{\n    return 'ISO-8859-1';\n}\n```\n"
            },
            {
                "title": "[HttpKernel] removed the storage of the current locale in the session",
                "body": "Before this commit, the current locale was stored in the session (if one\nwas already started). That way, for the next requests, even if the\nrequest locale attribute was not set, the locale was  restored .\n\nBut this is a really bad practice as it means that the same URL can have\na different content depending on the previous requests. It would have\nbeen better if the Vary header was set but the locale can be different\nfrom the value coming from the Accept-Language anyway.\n\nThis is a BC break but fortunately, you can restore the 2.0 behavior by\ncreating a simple event listener that contains the logic removed by this\ncommit.\n"
            },
            {
                "title": "added Request::getSchemeAndHttpHost() and Request::getUserInfo()",
                "body": "see #4312\n"
            },
            {
                "title": "[DomCrawler] fixed encoding when using addHtmlContent() (fixes #3881)",
                "body": "After looking around, this is clear that loadHtml() resets the encoding set on the DomDocument instance. So, the only workaround that actually works (and which is not an ugly hack) is to use `mb_convert_encoding` when it exists.\n"
            },
            {
                "title": "[2.2] Implements context escaping for Twig (fixes #839)",
                "body": ""
            },
            {
                "title": "moved event dispatcher classes to the EventDispatcher component",
                "body": "I have moved the two specialized event dispatcher classes from the FrameworkBundle bundle to the EventDispatcher component.\n\nIt makes them reusable outside the Symfony full-stack framework as they can be quite useful (people like @drak has a use for them for instance).\n\nIt makes the event dispatcher component _optionally_ rely on DependencyInjection and HttpKernel for these classes, like what we have in other components.\n\nWhat do you think?\n"
            },
            {
                "title": "[DomCrawler] added support for forms where several fields have the same ...",
                "body": "...name (which also bring us support for fields ending with [])\n\nThis change breaks the public API but it was necessary to make the component behave like a normal browser with a PHP backend.\n\nThis fixes #1579.\n\nAs we break the public API, I would like some feedback before merging it.\n"
            },
            {
                "title": "[HttpFoundation] added support for streamed responses",
                "body": "To stream a Response, use the StreamedResponse class instead of the\nstandard Response class:\n\n```\n$response = new StreamedResponse(function () {\n    echo 'FOO';\n});\n\n$response = new StreamedResponse(function () {\n    echo 'FOO';\n}, 200, array('Content-Type' => 'text/plain'));\n```\n\nAs you can see, a StreamedResponse instance takes a PHP callback instead of\na string for the Response content. It's up to the developer to stream the\nresponse content from the callback with standard PHP functions like echo.\nYou can also use flush() if needed.\n\nFrom a controller, do something like this:\n\n```\n$twig = $this->get('templating');\n\nreturn new StreamedResponse(function () use ($templating) {\n    $templating->stream('BlogBundle:Annot:streamed.html.twig');\n}, 200, array('Content-Type' => 'text/html'));\n```\n\nIf you are using the base controller, you can use the stream() method instead:\n\n```\nreturn $this->stream('BlogBundle:Annot:streamed.html.twig');\n```\n\nYou can stream an existing file by using the PHP built-in readfile() function:\n\n```\nnew StreamedResponse(function () use ($file) {\n    readfile($file);\n}, 200, array('Content-Type' => 'image/png');\n```\n\nRead http://php.net/flush for more information about output buffering in PHP.\n\nNote that you should do your best to move all expensive operations to\nbe  activated/evaluated/called  during template evaluation.\n## Templates\n\nIf you are using Twig as a template engine, everything should work as\nusual, even if are using template inheritance!\n\nHowever, note that streaming is not supported for PHP templates. Support\nis impossible by design (as the layout is rendered after the main content).\n## Exceptions\n\nExceptions thrown during rendering will be rendered as usual except that\nsome content might have been rendered already.\n## Limitations\n\nAs the getContent() method always returns false for streamed Responses, some\nevent listeners won't work at all:\n- Web debug toolbar is not available for such Responses (but the profiler works fine);\n- ESI is not supported.\n\nAlso note that streamed responses cannot benefit from HTTP caching for obvious\nreasons.\n"
            },
            {
                "title": "[2.2] [WIP] Add autocompletion as you type to the console",
                "body": "See here: http://groups.google.com/group/symfony2/browse_thread/thread/3a09aef0cee51d76/\n\nRebased version of #1456\n"
            },
            {
                "title": "Move management of the locale from the Session class to the Request clas",
                "body": "The locale management does not require sessions anymore.\n\nIn the Symfony2 spirit, the locale should be part of your URLs. If this is the case (via the special `_locale` request attribute), Symfony will store it in the request (`getLocale()`).\n\nThis feature is now also configurable/replaceable at will as everything is now managed by the new `LocaleListener` event listener.\n\nIt does break BC as `getLocale()` moved from Session to Request. The configuration for the default locale is now also done on the framework entry instead of the session one.\n\nAny thoughts?\n"
            },
            {
                "title": "Move management of the locale from the Session class to the Request class",
                "body": "The locale management does not require sessions anymore.\n\nIn the Symfony2 spirit, the locale should be part of your URLs. If this is the case (via the special `_locale` request attribute), Symfony will store it in the request (`getLocale()`).\n\nThis feature is now also configurable/replaceable at will as everything is now managed by the new `LocaleListener` event listener.\n\nIt does break BC as `getLocale()` moved from Session to Request. The configuration for the default locale is now also done on the framework entry instead of the session one.\n\nAny thoughts?\n"
            },
            {
                "title": "[SecurityBundle] added a validator for the user password",
                "body": "This validator is useful when you want to validate that an input value\nis equal to the user current password (in a form where the user can change\nhis password for instance).\n\nNote that this should not be used to validate a login form as this is\ndone automatically by the built-in security mechanism.\n"
            },
            {
                "title": "[Form] text is now the default type when not explicitely set and when no data class is set",
                "body": "Looks like a great enhancement to me, especially because the error message is really difficult to understand... and I don't see any drawback. Thoughts?\n\nJust have a look at the first commit to understand the change:\n\nhttps://github.com/symfony/symfony/commit/fd97dd00599a0220a0750faf3cd04aed1496df70\n"
            },
            {
                "title": "[DoctrineBundle] fixed extensions of generated files",
                "body": "depends on https://github.com/doctrine/doctrine2/pull/66\n\nfixed https://github.com/symfony/symfony/issues/1119\n"
            },
            {
                "title": "[EventDispatcher] Allow arbitrary callbacks",
                "body": "Follow-up for https://github.com/symfony/symfony/pull/791\n"
            },
            {
                "title": "Added support for PUT method",
                "body": "This adds proper support for PUT method (see #793)\n"
            },
            {
                "title": "added a way to  reload  an entity manager",
                "body": "This was submitted as another PR before: https://github.com/symfony/symfony/pull/728\n\nOnly the second commit is relevant. The first is part of another PR: https://github.com/symfony/symfony/pull/735\n\nReloading entity managers is useful when doing transactions with Doctrine2.\nWhen you catch a Doctrine exception, you must close the entity manager. A\nclosed entity manager cannot be used anymore; so you need to get a fresh one.\n\nIn the 'catch' block, call 'reload()' method instead of 'close()' to get a new\nentity manager:\n\n```\n$em->getConnection()->beginTransaction(); // suspend auto-commit\ntry {\n    //... do some work\n} catch (Exception $e) {\n    $em->getConnection()->rollback();\n\n    // call reload() instead of close()\n    $em = $em->reload();\n}\n```\n"
            },
            {
                "title": "Introduced a Registry class",
                "body": "The Registry knows all connections and entity managers declared into a service\ncontainer. The Registry is available via the 'doctrine' service.\n\nIf can be used to get connections and entity managers by name:\n\nBefore:\n\n$em = $this->get('doctrine.orm.entity_manager');\n$em = $this->get('doctrine.orm.foobar_entity_manager');\n\nAfter:\n\n$em = $this->get('doctrine')->getEntityManager();\n$em = $this->get('doctrine')->getEntityManager('foobar');\n\nIt is better for several reasons:\n- we rely less on naming conventions\n- IDEs will be able to auto-complete methods\n"
            },
            {
                "title": "[DoctrineBundle] introduced a Registry class",
                "body": "The Registry knows all connections and entity managers declared into a service\ncontainer. The Registry is available via the 'doctrine.registry' service.\n\nIf can be used to get connections and entity managers by name (instead of\nusing DIC parameters -- more information in the UPDATE file), and to 'reload'\nclosed entity managers.\n\nReloading entity managers is useful when doing transactions with Doctrine2.\nWhen you catch a Doctrine exception, you must close the entity manager. A\nclosed entity manager cannot be used anymore; so you need to get a fresh one.\n\nIn the 'catch' block, call 'reload()' method instead of 'close()' to get a new\nentity manager:\n\n```\n$em->getConnection()->beginTransaction(); // suspend auto-commit\ntry {\n    //... do some work\n} catch (Exception $e) {\n    $em->getConnection()->rollback();\n\n    // call reload() instead of close()\n    $em = $em->reload();\n}\n```\n"
            },
            {
                "title": "Doctrine auto mapping",
                "body": "Most of the time, you just want to register all your bundle mappings (and the default configuration is just fine). It's a bit tedious to do it by hand, not because of the amount of configuration you need to type, but mainly because you can easily forget to do so (also see https://github.com/symfony/symfony/pull/502).\n\nSo, setting `auto_mapping` to `true` allows Symfony to automatically register the mappings it founds in the enabled bundles (default is `false`).\n\nEven if `auto_mapping` is `true`, you can still define your mappings to add some more or to override the defaults.\n\nThis change means that the default configuration that works most of the time for most people is simple:\n\n```\norm:\n    auto_mapping: true\n```\n\nCan anyone see any problem?\n"
            },
            {
                "title": "[HttpKernel] ensured that all 4xx/5xx responses are handled by the exception listener",
                "body": "This commit ensures that Symfony has the same behavior whether you use Exceptions or Response instances.\n\nFor instance, the controllers below will have now the same behavior:\n\n```\nfunction ()\n{\n    return new Response('Not Found', 404);\n}\n\nfunction ()\n{\n    throw new NotFoundHttpException();\n}\n```\n"
            },
            {
                "title": "[Security] Remove special management for 403 errors",
                "body": "There is no reasons to handle 403 differently than other exceptions (404, ...).\n\nSo, I have:\n- added an AccessDeniedHttpException in HttpKernel\n- changed ExceptionListener to re-throw an AccessDeniedHttpException\n\nWhat do you think?\n"
            },
            {
                "title": "Fix exception when iconv or mbstring is not installed (was not reachable before)",
                "body": "Everything is in the title.\n"
            },
            {
                "title": "Fix data serialization when using process isolation (closes #614)",
                "body": "When setting process isolation to true, PHPUnit creates a script that is executed in another process. In the generated script, it serializes the data to be passed to the test method, and this is where there is an issue.\n\nA simple PHP script that exhibits the same issue:\n\n``` php\n$a = '\\\\\\\\foo';\nfile_put_contents(__DIR__.'/test.php', sprintf('<?php echo unserialize(\\'%s\\');', serialize($a)));\nexec('php '.__DIR__.'/test.php');\n```\n\nThe output of the script is:\n\n```\nPHP Notice:  unserialize(): Error at offset 10 of 11 bytes in /Users/fabien/work/twig/test.php on line 1\n```\n\nThe problem is that when a string contains two consecutive backslashes, it should be expanded to 4 to be correctly interpreted.\n"
            }
        ]
    },
    "2867228": {
        "repos": [
            "The Symfony PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "[Process] Removed unnecesary flush + get methods keeping flush only",
            "[Process] [Tests] Fixing faulty tests for stdout and stderr flush methods",
            "[Process] Added support for stdout and stderr flush (Issue #7884)",
            "[Process] New tests for flush methods"
        ],
        "issue_comments": [
            "I've submitted the doc changes for this PR. Now working on the failed test on travis.\n",
            "Hi,\n\nI like your suggestion, and I'll modify the PR as soon as I can ;-)\n\nThank you!\n",
            "I've updated the PR addresing your suggestion, Fabien. Thank you.\n",
            "I've submitted the doc changes for this PR. Now working on the failed test on travis.\n",
            "Hi,\n\nI like your suggestion, and I'll modify the PR as soon as I can ;-)\n\nThank you!\n",
            "I've updated the PR addresing your suggestion, Fabien. Thank you.\n"
        ],
        "issues": [
            {
                "title": "[Process] Added support for stdout and stderr flush (Issue #7884)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7884 |\n| License | MIT |\n| Doc PR | https://github.com/symfony/symfony-docs/pull/2728 |\n\n**To-do**\n- [x] Submit changes to the documentation.\n- [x] Fix a test broken on travis.\n- [x] Fix mistakes on the documentation.\n- [x] Removed flush + get methods.\n- [x] Changed tests assert calls.\n\nThis PR introduces flushing methods for both stdout and stderr on Process class. The new methods are:\n- flushOutput(): clears the output buffer.\n- flushErrorOutput(): clears the error output buffer.\n\nTests for new methods are included on the PR.\n"
            }
        ],
        "pr_comments": [
            "You're right @stloyd assertEmpty is more accurate. I'll change that. \n",
            "You're right @stloyd assertEmpty is more accurate. I'll change that. \n",
            "You're right @stloyd assertEmpty is more accurate. I'll change that. \n"
        ],
        "prs": [
            {
                "title": "[Process] Added support for stdout and stderr flush (Issue #7884)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7884 |\n| License | MIT |\n| Doc PR | https://github.com/symfony/symfony-docs/pull/2728 |\n\n**To-do**\n- [x] Submit changes to the documentation.\n- [x] Fix a test broken on travis.\n- [x] Fix mistakes on the documentation.\n- [x] Removed flush + get methods.\n- [x] Changed tests assert calls.\n\nThis PR introduces flushing methods for both stdout and stderr on Process class. The new methods are:\n- flushOutput(): clears the output buffer.\n- flushErrorOutput(): clears the error output buffer.\n\nTests for new methods are included on the PR.\n"
            }
        ]
    },
    "351471": {
        "repos": [
            "The Symfony PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "[DomCrawler] Added the ability to disable validation of all ChoiceFormField in a form.",
            "[DomCrawler] Allowed internal validation of ChoiceFormField to be disabled. (fixes #7672)"
        ],
        "issue_comments": [
            "I don't know what is the best.\n\n| Choice | Pros | Cons |\n| --- | --- | --- |\n| Field | Can be controlled on a per field basis | Tedious to disable validation on a whole form |\n| Form | Can disable validation of all fields with 1 method call | Cannot disable validation for only one field |\n| Both | Can disable validation of all fields with 1 method call or on a per field basis | None |\n\nFor the last option, my proposed implementation is to keep validation flag on the fields and having a method on the Form class to toggle the flag on all the fields.\n",
            "I made an attempt to implement the  Both  solution of my previous post.\n\n@fabpot What do you think ? Does it fits what you had in mind ? If so, do you think we should introduce an Interface for form fields having validation capabilities, and for the Form class itself ? I did not because only the ChoiceFormField has such capabilities yet.\n",
            "Finally I reworked the patch because the first one was way too complicated to handle such a case.\n",
            "@fabpot: I deleted the symfony repo on my account because of bad manipulations. I thought it would not prevent you from merging this PR. Tell me if you want me to open a new PR with these exact same changes. I will do it asap.\n",
            "I don't know what is the best.\n\n| Choice | Pros | Cons |\n| --- | --- | --- |\n| Field | Can be controlled on a per field basis | Tedious to disable validation on a whole form |\n| Form | Can disable validation of all fields with 1 method call | Cannot disable validation for only one field |\n| Both | Can disable validation of all fields with 1 method call or on a per field basis | None |\n\nFor the last option, my proposed implementation is to keep validation flag on the fields and having a method on the Form class to toggle the flag on all the fields.\n",
            "I made an attempt to implement the  Both  solution of my previous post.\n\n@fabpot What do you think ? Does it fits what you had in mind ? If so, do you think we should introduce an Interface for form fields having validation capabilities, and for the Form class itself ? I did not because only the ChoiceFormField has such capabilities yet.\n",
            "Is it really a security issue ? Sure they know the page exists but they cannot access it anyway. I don't think it's a big deal. Moreover, strictly http speaking: a non-existent page is different from a page you are not authorized to access. I think it fits with the Symfony philosophy.\n",
            "Yay, let's revive this issue !\nI'm having an issue similar to @adam-lynch , but using the security component.\n\nSuppose I'm on an intranet, and I have a login link directing me on my SF2 application. Of course, I never went on the SF2 application before, so no cookie no previous session or anything else. I click on the link, my authentication listener is called, it authenticates me, and then, two cases:\n- With session_fixation_strategy = 'invalidate', the session is  invalidated , then the token is set in the session. I'm redirected to the homepage but then I'm redirected to an error page because the token is not available is the session. And I can see there is no setcookie in the response headers.\n- With session_fixation_strategy = 'migrate', the session is  migrated , the same workflow applies but i'm authenticated because there is a setcookie in the redirect response.\n  In both case the session id should change, so I should have a setcookie in both case. But it's not what happen.\n\nThis is the exact same thing that @adam-lynch experiences with his application. There must be something wrong.\nI'm using Symfony 2.2.0.\n",
            "@fabpot What about the routes used by the security (when using the full stack framework) ? Some don't have a controller (I'm thinking of login check and logout of course). Though I think it would be possible to move the _controller to top level like @Seldaek said without making it mandatory, resulting in the same error as when you don't add a _controller in the defaults.\n",
            "@fabpot: I deleted the symfony repo on my account because of bad manipulations. I thought it would not prevent you from merging this PR. Tell me if you want me to open a new PR with these exact same changes. I will do it asap.\n"
        ],
        "issues": [
            {
                "title": "[DomCrawler] Allowed internal validation of ChoiceFormField to be disabled",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7672 |\n| License | MIT |\n| Doc PR | Not yet |\n\nHi,\n\nHere is a quite basic attempt to be able to disable the internal validation of the ChoiceFormField. It's pretty basic. \nFeel free to tell me what you think guys. Maybe I should check the `validationDisabled` property at the beginning of the `containsOption()` method ?\nI'll make the documentation PR as soon as the implementation will be validated.\n\nRegards.\n"
            },
            {
                "title": "[DomCrawler] Fixed a fatal error when setting a value in a malformed field name",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets |  |\n| License | MIT |\n| Doc PR |  |\n\nHi,\n\nI found a case where a fatal error happen when trying to set a value in a form field with a malformed name.\n\n```\nFatal error: Call to a member function setValue() on a non-object in /home/pierreyves/projects/symfony2/symfony/src/Symfony/Component/DomCrawler/FormFieldRegistry.php on line 128\n\nCall Stack:\n    0.0001     231832   1. {main}() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/composer/bin/phpunit:0\n    0.0035     688768   2. PHPUnit_TextUI_Command::main() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/composer/bin/phpunit:63\n    0.0035     689000   3. PHPUnit_TextUI_Command->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129\n    0.0224    2705448   4. PHPUnit_TextUI_TestRunner->doRun() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176\n    0.0301    2997392   5. PHPUnit_Framework_TestSuite->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/TextUI/TestRunner.php:349\n    0.0477    3613296   6. PHPUnit_Framework_TestSuite->runTest() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestSuite.php:745\n    0.0477    3613296   7. PHPUnit_Framework_TestCase->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestSuite.php:775\n    0.0477    3613296   8. PHPUnit_Framework_TestResult->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:776\n    0.0478    3614208   9. PHPUnit_Framework_TestCase->runBare() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestResult.php:648\n    0.0478    3630992  10. PHPUnit_Framework_TestCase->runTest() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:831\n    0.0478    3631856  11. ReflectionMethod->invokeArgs() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:976\n    0.0478    3631888  12. Symfony\\Component\\DomCrawler\\Tests\\FormTest->testSetValueOnMultiValuedFieldsWithMalformedName() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:976\n    0.0481    3635560  13. Symfony\\Component\\DomCrawler\\Form->offsetSet() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:255\n    0.0481    3635560  14. Symfony\\Component\\DomCrawler\\FormFieldRegistry->set() /home/pierreyves/projects/symfony2/symfony/src/Symfony/Component/DomCrawler/Form.php:320\n```\n\nIn this case, `FormFieldRegistry::getSegments('foo[bar')` method is called and it will return `array('foo')` only. Therefore the return of `FormFieldRegistry::get('foo[bar')` returns an array instead of a `FormField` and so the `setValue()` call happen on the array which leads to the fatal error.\n\nI tried to fix that. I don't know if it's the best way to do this so, as always, comments are welcome.\n"
            },
            {
                "title": "[Form] Fixed a typo in AbstractType phpdoc",
                "body": "This PR is a new version of PR #1862.\n\nOriginal comment :\nHi,\nNothing really awesome, but I fixed a typo in some phpdoc of the AbstractType class.\n"
            },
            {
                "title": "[Form] Typo in AbstractType phpdoc",
                "body": "Hi,\n\nNothing really awesome, but I fixed a typo in some phpdoc of the AbstractType class.\n"
            }
        ],
        "pr_comments": [
            "Fixed, thanks :)\n",
            "Fixed too.\n",
            "This use statement is not necessary. :)\n",
            "Does this help ? https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php#L857\nMaybe I'm wrong and misunderstood what you're looking for.\n",
            "@egeloen I know, but as @stof suggested, maybe we could make this one publicly available.\n"
        ],
        "prs": [
            {
                "title": "[DomCrawler] Allowed internal validation of ChoiceFormField to be disabled",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7672 |\n| License | MIT |\n| Doc PR | Not yet |\n\nHi,\n\nHere is a quite basic attempt to be able to disable the internal validation of the ChoiceFormField. It's pretty basic. \nFeel free to tell me what you think guys. Maybe I should check the `validationDisabled` property at the beginning of the `containsOption()` method ?\nI'll make the documentation PR as soon as the implementation will be validated.\n\nRegards.\n"
            },
            {
                "title": "[DomCrawler] Fixed a fatal error when setting a value in a malformed field name",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets |  |\n| License | MIT |\n| Doc PR |  |\n\nHi,\n\nI found a case where a fatal error happen when trying to set a value in a form field with a malformed name.\n\n```\nFatal error: Call to a member function setValue() on a non-object in /home/pierreyves/projects/symfony2/symfony/src/Symfony/Component/DomCrawler/FormFieldRegistry.php on line 128\n\nCall Stack:\n    0.0001     231832   1. {main}() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/composer/bin/phpunit:0\n    0.0035     688768   2. PHPUnit_TextUI_Command::main() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/composer/bin/phpunit:63\n    0.0035     689000   3. PHPUnit_TextUI_Command->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:129\n    0.0224    2705448   4. PHPUnit_TextUI_TestRunner->doRun() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/TextUI/Command.php:176\n    0.0301    2997392   5. PHPUnit_Framework_TestSuite->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/TextUI/TestRunner.php:349\n    0.0477    3613296   6. PHPUnit_Framework_TestSuite->runTest() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestSuite.php:745\n    0.0477    3613296   7. PHPUnit_Framework_TestCase->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestSuite.php:775\n    0.0477    3613296   8. PHPUnit_Framework_TestResult->run() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:776\n    0.0478    3614208   9. PHPUnit_Framework_TestCase->runBare() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestResult.php:648\n    0.0478    3630992  10. PHPUnit_Framework_TestCase->runTest() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:831\n    0.0478    3631856  11. ReflectionMethod->invokeArgs() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:976\n    0.0478    3631888  12. Symfony\\Component\\DomCrawler\\Tests\\FormTest->testSetValueOnMultiValuedFieldsWithMalformedName() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:976\n    0.0481    3635560  13. Symfony\\Component\\DomCrawler\\Form->offsetSet() /home/pierreyves/projects/symfony2/symfony/vendor/phpunit/phpunit/PHPUnit/Framework/TestCase.php:255\n    0.0481    3635560  14. Symfony\\Component\\DomCrawler\\FormFieldRegistry->set() /home/pierreyves/projects/symfony2/symfony/src/Symfony/Component/DomCrawler/Form.php:320\n```\n\nIn this case, `FormFieldRegistry::getSegments('foo[bar')` method is called and it will return `array('foo')` only. Therefore the return of `FormFieldRegistry::get('foo[bar')` returns an array instead of a `FormField` and so the `setValue()` call happen on the array which leads to the fatal error.\n\nI tried to fix that. I don't know if it's the best way to do this so, as always, comments are welcome.\n"
            },
            {
                "title": "[Form] Fixed a typo in AbstractType phpdoc",
                "body": "This PR is a new version of PR #1862.\n\nOriginal comment :\nHi,\nNothing really awesome, but I fixed a typo in some phpdoc of the AbstractType class.\n"
            },
            {
                "title": "[Form] Typo in AbstractType phpdoc",
                "body": "Hi,\n\nNothing really awesome, but I fixed a typo in some phpdoc of the AbstractType class.\n"
            }
        ]
    },
    "328359": {
        "repos": [
            "Chosen is a library for making long, unwieldy select boxes more friendly.",
            "The iconic font designed for use with Twitter Bootstrap",
            "The Symfony2 PHP framework",
            "sbt, a build tool for Scala",
            "Zipkin is a distributed tracing system"
        ],
        "commit_comments": [
            "@homakov is symbol of freedom! Thank you!  @php_peru is with you!\n",
            "why, just conventions in docblocks?\n",
            "oh so just removed that thing, I think the answer is actually how to detect the symfony root directory without doing this hack but i just couldnt find another way, as this is temporary before we migrate the phpspec command into console command which is what we are working, it i sjust that we are specking PHPSpecBundle with PHPSpec so it is hard to bring the chicken before the hen\n"
        ],
        "commits": [
            "add test for no interaction aka -n",
            "fix tests that got broken because of new argument for helper dialog",
            "add input to the arguments of dialog helper",
            "addressing comments by WouterJ",
            "change method name",
            "add failing test",
            "typo first->second",
            "update value 1,000.3",
            "update tests",
            "7644 add tests for passing number looking attributes as strings in XmlUtils::phpsize",
            "if it has commas then it is a string",
            "add OtherCommand file /cc Stof and update CommandTest yet not finished",
            "run command from command with just name\n\nmake easy running command within same application space command\naddress jozef's comments\naddress more of jozef's comments\naddress stof's comments\naddress fabpot's comments\nrun php-cs-fixer\nwip RFC\naddress fabpot comments",
            "revert to everything into one line",
            "cs missing spot",
            "[#1666] implement custom exception configuration messages via info\n\n[#1666] RFC: add support for optional custom error message for Configuration validation errors\n[#1666] remove method that was previously added on NodeDefinition since we will reuse info method\n[#1666] remove errorMessage methods introduced in BaseNode class since we are going through info this time\n[#1666] reuse getInfo message for error output in exception for ScalarNode class\n[#1666] clean up of ScalarNode adding of info exception message\n[#1666] reuse getInfo message for error output in exception for VariableNode class\n[#1666] correct a typo explicited -> made explicit\n[#1666] reuse getInfo message for error output in exception for NumericNode class\n[#1666] reuse getInfo message for error output in exception for FloatNode and IntegerNode\n[#1666] reuse getInfo message for error output in exception for EnumNode class\n[#1666] reuse getInfo message for error output in exception for BooleanNode class\n[#1666] reuse getInfo message for error output in exception for BaseNode class\n[#1666] reuse getInfo message for error output in exception for ArrayNode class\n[#1666] remove test on TreeBuilder test getInfo since it becomes redundant as info already is tested\n[#1666] fix test to use getInfo for ScalarNodeTest\naddress comments\nswtich to if (->getInfo() != null) {",
            "[#1666] add setHint method refactor on exception",
            "[#1666] comply with cs",
            "added note on ConfigurationInterface best practice",
            "remove comments",
            "fix for PropertyPath __get accessor",
            "[Form] add test getValue reads MagicWrapper property",
            "removed unused use statement and added parameters on info command call",
            "completed command call to generator",
            "added command class to generate class map",
            "test for ensuring creating form returns data of type specified in data_class",
            "latest modifications --- unfinished",
            "moved WebSpec under Test folder as suggested by Stof",
            "added WebSpec an analog class WebTestCase but for PHPSpec spec framework for specking symfony2 projects",
            "attempted to load PHPSpec library not from pear version installed but from the version under vendors folder",
            "removed old options and fixed bug",
            "fixes as commented",
            "added command to clear log files",
            "$node->hasAttribute('disabled') sf2 should not create disagreement between implementation and practice for a crawler. If sahi real browser can find an element that is disabled, then sf2 should too. \r\nhttps://github.com/Behat/Mink/pull/58#issuecomment-1712459",
            "fixed trans format for form.html.twig - important for UserBundle to work",
            "Added Ctrl+W and Esc accelerators to Log Window (but could not hide menu bar)"
        ],
        "issue_comments": [
            "@lyrixx why the segmentation fault, been seeing those randomly on travis \n",
            "@digitalkaoz this stuff is great, it is a must when working with forms man, you rock\n",
            "yes agree with @fabpot you can squash all commits into 1 now\n",
            ":shipit: :baby: :+1: \n",
            "the amount of skipped ones is alarming though, did you check the whole output? is symfony suite skipping that many?\n",
            "I have noticed some inconsistencies on the text, sometimes you mention a file, another times there is no word file on the exception message. :baby: \n",
            "do not rely on past tense for naming, what about  irregular verbs? thereby post and pre prefixes.\n",
            "weird , why travis is not showing on this PR?\n",
            "@Inori nice seeing you adding tests, cheers! you rock /o/\n",
            "http://stackoverflow.com/questions/4172735/php-filesize-for-absolute-path :baby: :+1: \n",
            "is there a failing test that this fixes? :baby:  just curious\n",
            "I think if this is merged it need a test\n",
            "nice, when someone says something like what @stloyd said, what is the approach? open 2 or 3 PRs with the changeset for each branch? or the maintainer would cherry-pick in case it is a clean merge? :baby: \n",
            "thanks @fabpot you rock! :baby: \n",
            "@entering why did you add the original tab?\n",
            "other than this this PR is :+1: \n",
            "@fabpot :shipit: \n\n:baby: :+1: \n",
            "@WouterJ if the breaks were on something really critical that would be something but dialog helpers, seriously? what is hard about adding the $input that was already provided by the command execute method?\n",
            "let's the guardians decide how to solve these situations, if there is a cleaner way suggest if not let's wait\n",
            "@stof about the breaks for sensio generator bundle i think is acceptable if we are to fix this\n\nI will try to fix the other infinite loop thing\n",
            "are the dots consistent with other validators?\njust curious what if the values are dots, would it create confusion? :baby: \n",
            ":baby: ready in that case\n",
            ":baby: :warning: tests are not passing though :+1: \n",
            "i fixed it thanks, damage has been done @stloyd  though\n",
            "@fabpot exactly it is a missusage, the test clarifies the way to achieve this\n",
            "@fabpot  he does not want a `1,2,3,4` which is a string humanly noticeable\nhe wants to imitate the `123,456` notation which pertains to numbers units, thousands, millions, billions, etc.\nThat notation is reserved to numbers only, therefore he must use a workaround with spaces. There is no harm on spaces he can later just use php ability to just parse it.\n",
            "@fabpot  solved :+1: \n",
            "@fabpot @Seldaek after reading this http://stackoverflow.com/questions/13553933/define-symfony-2-tag-attribute-as-an-array-in-xml-configuration now i understand what needs to happen, everything with `,` should be rendered as a string.\n",
            "@ryanfurtner it seems your approach works however is kind of flaky, i get to reload the css most of the times, but others the element just don't get fix, on the next click it gets refreshed. Do you have a newer version of your script corrected?\n",
            "also where are my tests? :'(\n",
            "i think is already pass that point, @stof had not said this is not needed or unwanted just make your point from the start and fight your PR until the end\n",
            "@fabpot i think this starts to open the quest to see how we are going to integrate content negotiation into symfony2. The drupal guys @lsmith77 @Crell are working on something https://github.com/winmillwill/BadFaith and acknowledge the need also. This is their thread http://drupal.org/node/1505080 . As of now afaik they are attemping something lame and temporary then implement algorithms down the road. So overall there will have to be a way to plug badfaith into symfony2 somehow.\n",
            "@fabpot, if it is a component maybe it be benefitial or adopted by others, if we force it sf2 only then it would be sad?\n",
            ":+1: don't forget to pull also the pending PRs :)\n\nname is src\\Symfony\\Component\\ContentNegotiation\n",
            "you should have rebased @shiroyuki , you are an expert in js telling by your page but here you will have to do things right with git to get this PR merged. I can help you for now just rebase or just rebase a clean branch and perhaps cherry pick your stuff.\n",
            "\u270c.|\u2022\u0361\u02d8\u203f\u2022\u0361\u02d8|.\u270c\n",
            "- should include tests\n- should include documentation (will you also update the component documentation for this new class?)\n",
            "ok @stof sorry it said it seemed not to be possible, i thought it was possible but I am wrong.\n",
            "I wish you can explain me more then about this class and how to use it in code so then I can write easily the documentation :D deal?\n",
            "it is not add but registerNamespace right?\n\nso the main idea is to get rid of the restriction to use Apc with Universal loader\n\nwhat is the comparative advantage between APC and Xcache?\n",
            "@lsmith77 I wonder if we can work more methods on the ClassMapper class in order to include also files that do not contain classes but functions, I have seen that occurring on say zetacomponents. If this generator not only generates a class map but a class map and the set_include_path to include these functions files that would rock? @stof?\n",
            "it could be a micro command, as this can be fed with a specific folder so to group things, then the cookbook\n",
            "I volunteer for the cookbook though i don't have a super realistic case yet\n",
            "oh but that empty_data is new right? that is a BC\n\nOn Thu, Feb 16, 2012 at 3:57 PM, Christophe Coevoet <\nreply@reply.github.com\n\n> wrote:\n> \n> This is expected. You return `null` for the parent, meaning that your\n> type does not inherit the behavior implemented in FieldType. And so you\n> don't get the logic implemented to use `data_class` for the empty data\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/3383#issuecomment-4009247\n",
            "@stof If I comment the method getParent I get\n\n Symfony\\Component\\Form\\Exception\\FormException: Could not load type  form \n",
            "@henrikbjorn other libraries don't replace phpunit or are equivalent, we can put this elsewhere, it is just that phpunit has some sort of crown then\n",
            "yes i will move it thanks fabpot you rock man\n",
            "wonder what the use case is for streaming a response, very interesting.\n",
            "ya era hora!\n",
            ":+1: for travis\n",
            "I want to do the same but for a regular php project, do you know how to? any news?\n",
            "RFC please tell if you need this command, sounds like I do :)\n",
            "for testing purposes, every once in a while, and if this is done through a command is better as one can have commands be chained elsewhere. It is a convenience like php app/console cache:clear, i can also do rm -rf app/cache why not? well a same argument applies, it will help to remove logs disregarding of what the settings, for the general common use case. of course.\n",
            "just another note \n\ncheck this https://github.com/cordoval/SchedulerBundle and you will see that the trend for Commands makes sense in the larger scheme of things. So rm -rf does not cut it when the tasks are more integrated within the framework tasks.\n",
            "@stof so I guess i have to bring up a kernel instance right, like the cache is done? \n",
            "hmm sounds like I can rather make a bundle to do this for now at least since sometimes uses for development are not necessarily integrated into other components\n",
            "I am in ubuntu hmm not sure if there is such a thing\nstill there will be logs depending on the environment, so a task has\nto be incorporated into symfony anyways, hmmm\nperhaps the jmsdebugging bundle or other module can take this effort\n@johannes?\n\nOn Sat, Aug 13, 2011 at 3:59 AM, pminnieur\nreply@reply.github.com\nwrote:\n\n> At least you should try to use `logrotate` if you are on Linux/MacOS to manage your log files (that's what I do) ;-)\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/1928#issuecomment-1796856\n",
            "there goes my hopes of entering the sf2 authors :'(\n\nOn Sat, Aug 13, 2011 at 4:07 AM, Luis Cordova cordoval@gmail.com wrote:\n\n> I am in ubuntu hmm not sure if there is such a thing\n> still there will be logs depending on the environment, so a task has\n> to be incorporated into symfony anyways, hmmm\n> perhaps the jmsdebugging bundle or other module can take this effort\n> @johannes?\n> \n> On Sat, Aug 13, 2011 at 3:59 AM, pminnieur\n> reply@reply.github.com\n> wrote:\n> \n> > At least you should try to use `logrotate` if you are on Linux/MacOS to manage your log files (that's what I do) ;-)\n> > \n> > ## \n> > \n> > Reply to this email directly or view it on GitHub:\n> > https://github.com/symfony/symfony/pull/1928#issuecomment-1796856\n",
            "hmm so basically just use rm -rf or logrotate, hmm nothing makes sense tonight :\n",
            "@Seldaek can you please elaborate on  because it's really just the StreamHandler (and it depends on which stream) that can be cleared, the rest is append-only.  It is not clear for me please. Thanks.\n\n@GromNaN please provide code snippet with more explanation\n\n@pminnieur  I did take a look at logrotate and seems feasible. I wonder if we should create a bundle to include commands to set the /etc/logrotate.d/sf2log file with the required specification like :\n\n```\n/home/cordoval/sites-2/project1/app/logs/dev.log {\n        daily\n        missingok\n        rotate 4\n        compress\n        sharedscripts\n}\n```\n\nand another command option to run the \n\n```\n$ logrotate /etc/logrotate.conf\n```\n\nI was even thinking on something like:\n\n```\nwatch logrotate /etc/logrotate.conf\n```\n\nfor hourly rotation or shorter periods of time\n\nthis could perhaps be easily embedded into:\n\n```\nphp app/console monolog:streamhandler:create --e=dev --interval=2 --path=default\nphp app/console monolog:streamhandler:watchrotate --e=dev\n```\n\nany thoughts?\n\n@schmittjoh I wanted you to know because your jmsdebuggingbundle offer very useful options for developers which is great. I am interested in hearing what your ideas for this is...\n",
            "@fabpot please let me know if this is going to be in sometime soon or not, just wondering why it is deviating ...\n",
            "@fabpot I guess you got my scenario wrong. I am not trying to submit any form. I am just happen to have a disabled box that is checked and I want to read with the DOM Crawler that is checked. Not to submit or anything but for the purposes of testing.\n\nPlease consider also that this request comes from asserting values using behat mink, mink is fully dependent on sf2 driver for when it is used except it is told to use a different driver like a real browser like sahi. When testing in chrome and firefox, the verification with the DOM is made that the disabled box is checked properly. Symfony2 DOM Crawler however misses that spot for that use.\n\nEven in the case where Symfony2 DOM Crawler component would have been thought not for this purpose of testing, or further for this particular scenario it would be good to make it more reusable for this kind of scenario.\n\nJust saying....\n",
            "oh no I was hoping to enter the authors, you already did the fix :'(\n",
            "this is the new address for the bundle @lsmith mentioned above:  https://github.com/knplabs/KnpConsoleAutocompleteBundle\n\nso i guess they are complementary... question is if the autocomplete inside commands can be achieved with a bundle as well? any thoughts?\n",
            "The problem is that these changes only work for interactive commands, for shell I am trying the ConsoleAutocompleteBundle, however not getting it to work currently, it seems the autocomplete for ubuntu is interfering with this other autocomplete, also the guys use mac and not ubuntu so sure for them works, but not for me :( just filed an issue\n",
            "why not\n\n```\nimplicit_submit\nimplicit_handle_request\n```\n\n?\nnot sure if auto is the best but it is imo\n",
            "@stof what do you mean type? do you mean that because it is a doctrine lifecycle event listener that is not registered in the container? I am confused. :baby:  \n",
            "@digitalkaoz this stuff is great, it is a must when working with forms man, you rock\n",
            "yes agree with @fabpot you can squash all commits into 1 now\n",
            ":shipit: :baby: :+1: \n",
            "the amount of skipped ones is alarming though, did you check the whole output? is symfony suite skipping that many?\n",
            "I have noticed some inconsistencies on the text, sometimes you mention a file, another times there is no word file on the exception message. :baby: \n",
            "had the same issue just upgraded to 3.6.11 and it disappeared\n",
            "I tried the captcha bundle and it is a collander :) \n\nhttp://phpperu.org/blog/upgrade-in-phpperu\n\nbefore i had thousands of spam, now i have around tenths\n\ni am with @hhamon in doing a FormExtra and have that bundle either on sensio :) or on FOS bundle of bundles\n",
            "@pvandommelen how can you receive two requests? just curious\n\nalso you don't ->send() any of the responses before the terminates\n",
            "oh so you are basically saying to have multiple frontends, well at least one and the one front controller consuming a queue/socket with requests! So to parallelize and max performance I guess. Very nice!\n",
            "is this a third option? \n\nhttp://php-and-symfony.matthiasnoback.nl/2013/07/symfony2-rich-console-command-output-using-aop/\n",
            "@gentisaliu did you attempt at fixing it? this is FOSS\n",
            "Is this what we mean by configuration validation errors ?\n\n``` sh\n->scalarNode('db_driver')\n    ->cannotBeOverwritten()\n    ->isRequired()\n    ->cannotBeEmpty()\n    ->setError('you must specify the type of persistence')\n->end()\n```\n",
            "true\n",
            "please review the question on https://github.com/symfony/symfony/pull/5094 and provide feedback\n",
            "@peterkokot  pete i think @fabpot  is not going to take all of these PRs because he said that for core bundles this does not apply\n",
            "`$` probably shouldn't be used, now the yaml loader could have a check on keys if they compraise the $ character or other and fire an exception accordingly\n",
            "@lyrixx yes this would break the BC, so is not a go\ni do not understand your comment about being too specific, could you please clarify?\n",
            "you missed the right repo\n\nhowever\n\nhttps://github.com/symfony/symfony/commit/79a842a83d140d024f49b06cc61f9598f22e93a9#L1R61\n\nshows that the guy added this separately only to build the options later on inside\n\nand also is because is called from the list command which could also take namespace as an option\n\ni guess you want to pass the namespace for some reason at some point so this is why is BC\n",
            "@lyrixx nice though, i did not know insight was preparing an SDK :+1: :baby: \n",
            "@stof  :baby:  ^^ \n",
            ":+1: thanks @pkraeutli \n",
            "@Sirian the first case is not reproducible, the second is and that is what this failed test ^^ above is for.\n",
            "@Sirian i think this awaits a big refactor on this case. I put up the failing test however i am seeing the logic here a bit horrendous to work on https://github.com/symfony/symfony/blame/master/src/Symfony/Component/Console/Application.php without refactoring the whole find and findNamespaces methods.\n\nso i think this gets closed as the issue is really on the understanding on which is the namespace and subnamespaces and command name and how to work with them or to refactor the whole thing.  /cc @fabpot \n",
            "I think it is because of this trick\n\n```\nif (version_compare(phpversion(), '5.4.0', '>=')) {\n    class NativeSessionHandler extends \\SessionHandler {}\n} else {\n    class NativeSessionHandler {}\n}\n```\n\nNativeFileSessionHandler is the true implementation that covers the scenarios for both 5.4 and below\n\nlet's close this @fabpot \n",
            "they are app specific handlers, not necessarily used in all distributions\nyou can register it as you have done it and it is fine\nnone of the other handlers like for instance PDO is registered by default\nhttp://symfony.com/doc/current/cookbook/configuration/pdo_session_storage.html\n\nclosed\n",
            "belleza!\n",
            "_Symfony hack sprint_\n\n```\ncordoval 11:00:35 AM\nfabpot: i am working on this https://github.com/symfony/symfony/issues/6091 \n\nfabpot 11:01:32 AM\ncordoval: add a small note so that we know that you are working on it\n```\n",
            "please file the ticket here https://github.com/sensio/SensioFrameworkExtraBundle/issues\n\n@fabpot we can close as this is related to a bug in SensioFrameworkExtraBundle\n",
            "maybe rather than say much more verbosity we should have `all verbosity`?\n",
            "after working on this more I did not see a direct benefit on this PR so I am closing it again\n\ni guess it was fun to play with and now i know how commands interact with apps and how they are registered.\n\nthanks @fabpot\n",
            "@stof any updates on this one? or is left to starve to death?\n",
            "@stof @fabpot  yes i will start tonight sorry for the delay :+1:\n",
            "I have thought in two ways to refactor:\n\n``` php\n$message = sprintf(\n    'Invalid configuration for path  %s : %s',\n    $this->getPath(),\n    $invalid->getMessage()\n);\nif ($this->getInfo() != null) {\n    $message .= sprintf( \\nError message: %s. , $this->getInfo());\n}\n$ex = new InvalidConfigurationException($message, $invalid->getCode(), $invalid);\n$ex->setPath(...)\n\nthrow $ex;\n```\n\ninto\n\n``` php\n$message = sprintf(\n    'Invalid configuration for path  %s : %s',\n    $this->getPath(),\n    $invalid->getMessage()\n)\n\n$ex = new InvalidConfigurationException($this->addErrorHintMessageIfPresent($message), $invalid->getCode(), $invalid);\n$ex->setPath(...)\n\nthrow $ex;\n```\n\nand have the helper method to the BaseNode class to avoid locs everywhere\n\nor even implementing this into the exception base class or some other but then do:\n\n``` php\n$ex->setPath(...);\n$ex->setInfo($this->getInfo());\n```\n\nAny preference? @stof @fabpot\n",
            "I will also work on changes to the documentation after this is re-factored and put into shape for merge.\n",
            "@schmittjoh the idea for the info in this case is to provide a sample peek of what the configuration looks like or a hint why usually things went wrong in terms of how the configuration is used. We are not trying to map a message to every problem as in the case where we have constraints and we want to specify things. I think for that we have the custom nodes that can be extended for a given specific data constraint/requirements, like the NumericNode or IntegerNode which were PRed. This is a small tiny helper hint to have. But yeah i agree with you that it is no more than that. \n\nMaybe @lsmith77 wanted to have just that or maybe more? I think this is like the run-time version of config:dump-reference command.\n",
            "@fabpot i will review it tonight thanks\n",
            "gah, i got swamped at my work, anyone be willing to take a look and what is left please? if not then i can say i can try looking at beginning of next week\n",
            "@fabpot ok iam working on this now, i got time, i will basically finish the tests which i think is the only thing left\n",
            ":+1: /cc @stof @lsmith77 \n",
            "@fabpot working on this right now\n",
            "@fabpot ok done, the error is because of another failing test in master, but so everything else is passing.\n\n:+1:  thanks for helping me out, I think some more refactoring could be done but it could also be overkill\n\nSo all good now\n",
            "@fabpot can this still get on 2.2 release?\n",
            "ok @fabpot i will bookmark this to work on, sorry about the delay, :baby: \n",
            "@Ocramius http://www.craftitonline.com/2012/11/lazy-load-services-and-do-not-inject-the-container-into-them/\n",
            "I will need this so i would like to start working on this yes or yes\n",
            "@rdohms yes i posted it and i just installed today SE :D\n",
            "@aerialls PR works to solve my problem but @rdohms  has a different one\n",
            "any ETA @bschussek ? I want to use it for tackling the problem of dynamic selects city-state\nhere http://www.craftitonline.com/2011/08/symfony2-ajax-form-republish/\n\nI am told:\n getDefaultOptions is changed to setDefaultOptions which will allow you to set depenedent values based on other forms \n\nso I am most interested +300!\n",
            "@bschussek what is already possilble @  Also, this is already possible before \n\nI am confused could you link to what you are referring to please?\n",
            "any ETA @bschussek ? I want to use it for tackling the problem of dynamic selects city-state\nhere http://www.craftitonline.com/2011/08/symfony2-ajax-form-republish/\n\nI am told:\n getDefaultOptions is changed to setDefaultOptions which will allow you to set depenedent values based on other forms \n\nso I am most interested +300!\n",
            "@bschussek what is already possilble @  Also, this is already possible before \n\nI am confused could you link to what you are referring to please?\n",
            "+1 at least this is good to know this is possible and since few people drive things like this in their formtypes i think it is kind of advantageous, just hope it is well documented :D\n",
            "and why not a link to this alternative solution\n",
            "symfony e2463caacdba6348b27c2be04a1d420d3fa4c5a5\ntwig 4a5057997d6d3ffacb2dad1550972a244d459ab8\nmonolog 303b8a83c87d5c6d749926cf02620465a5dcd0f2\ndoctrine-common 3f530763a550e0e1bee445492d551a443dc119a4\ndoctrine-dbal 03ea47792cf04b70bd765ae09e0c327d31318e38\ndoctrine cf10ee4d02432b3a19128d0d681a79ba329b89a6\nswiftmailer 8c3165691e36302405926abbae7526549db8b899\nassetic f829ad23d23c87480151a21faad49fefe7c09e5d\ntwig-extensions eba4f5d572bec05c72a47bbd73ba0a3330cf8f54\nmetadata 014d200714030996ae8ea26a7ccaccf86fc89734\nSensioFrameworkExtraBundle 9b9194a47effc66b08d44ae110b982352119ca17\nJMSSecurityExtraBundle b8b7eb294ed83d83ca7260ac018e701f08003538\nSensioDistributionBundle 2082cb99d408fd89243059c6eff866347ec00bbe\nSensioGeneratorBundle 88ecf05691825c81b6a19ca6e2dc1849f1a5dcd4\nAsseticBundle 41b5913b5086a0909af92adcb4a6005ee0051b16\n\nOn Fri, Sep 30, 2011 at 10:02 AM, Fabien Potencier\nreply@reply.github.com\nwrote:\n\n> Which version do you use? It should have been fixed in the latest 2.0 and master branch.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/2301#issuecomment-2250462\n",
            "all solved and updated to the bleeding edge, thanks @fabpot!\n",
            " 'data' => 'm' ?\n\njust do $model->setProperty(true) for a boolean radio button for instance or other accordingly\n\nThis is not an issue of symfony it is just that you need to learn a bit more how forms work, i am learning too\n\nhttp://www.craftitonline.com/2011/07/set-defaultcustom-selection-in-symfony2-forms/\n",
            "array('morning','evening') ... check the blog post, do your homework, I am updating some of my defaults as we speak for a project i am working on and it is working, my only difficulty is now that i have embedded things that I need to set defaults on...\n",
            "@lsmith sounds interesting taking a look\n",
            "@lsmith77 can you please elaborate on \n\n``` sh\nmy personal example use case is wanting to set a dynamic HTTP header in all commands calling a backend through a load balancer that picks the server based on said HTTP header.\n```\n\nI am also confused because in the other ticket you said tags, @fabpot reopened it because of it otherwise he would have kept it closed and now this is events again.\n",
            "this was part of my problem\n\nthat is why I had the original problem of this thread\n\nOn Fri, Jul 22, 2011 at 10:08 PM, komputerwiz\nreply@reply.github.com\nwrote:\n\n> As a precaution, make sure that MinkBundle and BehatBundle are loaded _only_ for the environment in which they are configured:\n> \n> ``` php\n> // app/AppKernel.php\n> // Add to AppKernel::registerBundles() function\n> \n> if ($this->getEnvironment() == 'test') {\n> \u00a0 \u00a0$bundles[] = new Behat\\BehatBundle\\BehatBundle();\n> \u00a0 \u00a0$bundles[] = new Behat\\MinkBundle\\MinkBundle();\n> }\n> ```\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/1766#issuecomment-1636321\n",
            "I just tested on app.php so production mode and I do not get the 500 page\nIs this normal behavior? i think it is entirely related to the development environment which does not want to initially set a session id? perhaps? @fabpot?\n",
            "yeah most likely it is a problem related to other bundles. Wondering which though here is my deps, can you reproduce it with this deps?\n\n[symfony]\n    git=https://github.com/symfony/symfony.git\n\n[twig]\n    git=https://github.com/fabpot/Twig.git\n    version=v1.1.0\n\n[monolog]\n    git=https://github.com/Seldaek/monolog.git\n\n[doctrine-common]\n    git=https://github.com/doctrine/common.git\n    version=2.1.0\n\n[doctrine-dbal]\n    git=https://github.com/doctrine/dbal.git\n    version=2.1.0\n\n[doctrine]\n    git=https://github.com/doctrine/doctrine2.git\n    version=2.1.0\n\n[swiftmailer]\n    git=https://github.com/swiftmailer/swiftmailer.git\n    version=v4.1.0\n\n[assetic]\n    git=https://github.com/kriswallsmith/assetic.git\n\n[twig-extensions]\n    git=https://github.com/fabpot/Twig-extensions.git\n\n[metadata]\n    git=https://github.com/schmittjoh/metadata.git\n\n[SensioFrameworkExtraBundle]\n    git=https://github.com/sensio/SensioFrameworkExtraBundle.git\n    target=/bundles/Sensio/Bundle/FrameworkExtraBundle\n\n[JMSSecurityExtraBundle]\n    git=https://github.com/schmittjoh/JMSSecurityExtraBundle.git\n    target=/bundles/JMS/SecurityExtraBundle\n\n[SensioDistributionBundle]\n    git=https://github.com/sensio/SensioDistributionBundle.git\n    target=/bundles/Sensio/Bundle/DistributionBundle\n\n[SensioGeneratorBundle]\n    git=https://github.com/sensio/SensioGeneratorBundle.git\n    target=/bundles/Sensio/Bundle/GeneratorBundle\n\n[AsseticBundle]\n    git=https://github.com/symfony/AsseticBundle.git\n    target=/bundles/Symfony/Bundle/AsseticBundle\n\n[doctrine-fixtures]\n    git=https://github.com/doctrine/data-fixtures.git\n\n[DoctrineFixturesBundle]\n    git=https://github.com/symfony/DoctrineFixturesBundle.git\n    target=/bundles/Symfony/Bundle/DoctrineFixturesBundle\n\n[FOSUserBundle]\n    git=https://github.com/FriendsOfSymfony/FOSUserBundle.git\n    target=/bundles/FOS/UserBundle\n\n[knp-snappy]\n    git=https://github.com/knplabs/snappy.git\n\n[Zend]\n    git=https://github.com/zendframework/zf2.git\n\n[SnappyBundle]\n    git=https://github.com/knplabs/KnpSnappyBundle.git\n    target=/bundles/Knp/Bundle/SnappyBundle\n\n[html5-boilerplate]\n    git=https://github.com/paulirish/html5-boilerplate.git\n\n[symfony-standard]\n    git=https://github.com/symfony/symfony-standard.git\n\n[MenuBundle]\n    git=https://github.com/knplabs/KnpMenuBundle.git\n    target=/bundles/Knp/Bundle/MenuBundle\n\n[AdminBundle]\n    git=https://github.com/sonata-project/SonataAdminBundle.git\n    target=/bundles/Sonata/AdminBundle\n\n[BluePrintBundle]\n    git=https://github.com/sonata-project/SonataBluePrintBundle.git\n    target=/bundles/Sonata/BluePrintBundle\n\n[jQueryBundle]\n    git=https://github.com/sonata-project/SonatajQueryBundle.git\n    target=/bundles/Sonata/jQueryBundle\n\n[ConsoleAutocompleteBundle]\n    git=https://github.com/cordoval/KnpConsoleAutocompleteBundle.git\n    target=/bundles/Knp/Bundle/ConsoleAutocompleteBundle\n\n[buzz]\n    git=https://github.com/kriswallsmith/Buzz.git\n    target=/buzz\n\n[SahiClient]\n    git=https://github.com/Behat/SahiClient\n    target=/behat/sahi\n\n[MinkBundle]\n    git=https://github.com/Behat/MinkBundle.git\n    target=/bundles/Behat/MinkBundle\n\n[Mink]\n    git=https://github.com/Behat/Mink.git\n    target=/behat/mink\n\n[BehatBundle]\n    git=https://github.com/Behat/BehatBundle.git\n    target=/bundles/Behat/BehatBundle\n\n[Gherkin]\n    git=https://github.com/Behat/Gherkin.git\n    target=/behat/Gherkin\n\n[Behat]\n    git=https://github.com/Behat/Behat.git\n    target=/behat/Behat\n\n[JMSDebuggingBundle]\n    git=https://github.com/schmittjoh/JMSDebuggingBundle.git\n    target=/bundles/JMS/DebuggingBundle\n",
            "under framework in config.yml\n\n```\nsession:\n    default_locale: %locale%\n    auto_start:     true\ntest: ~       # load Sf2 client as it is needed by Mink\n```\n",
            "@caramba1337 is also having the issue\nand another @rich_82 too\n",
            "hmm i bet then you are missing some of my configuration for behat or mink\n",
            "oh man I feel relieved, @Stof told me to place that line in there for some reason... i bet that is not right eh?\n",
            "I wonder what test: ~ does, if this all starts with that line then what is it for?\n",
            "@everzet closed the issue on mink and behat and i thought he was right. However this issue is like an interaction between the bundles. I would still involve the JMS bundles mainly the one for debugging since those are on dev mode probably have you enabled them too?\n",
            "right I saw that earlier. but i thought sf2 guys were aware of that. This only happens on development environment for me though. interesting, because prod and test environments are working rightly, is it different the session code between these environments?\n",
            "@everzet: is this the culprit then?\n\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/EventListener/TestSessionListener.php#L54\n\nbecause it is setting session id to null\n",
            "let me think... the closing was too fast for me. So I guess i just remove the test: ~ line or also add as you said  filesystem storage  because I am not running functional tests. Just on development mode. But yes i will need that done too for when I run sahi. However this was not bound to tests. So @schmittjoh are you saying that session_start functions cannot be used on dev environment?\n",
            "great @everzet i will try that again since i did that and no problems, and i guess remove that test: ~ line?\n\nbut i was concerned on development environment so not only on tests, perhaps on dev environment i should not be setting test: ~ then right but only under config_test.yml\n",
            "yeah it is just that as I showed in the blog post, my intention was not initially to test but to develop as it is BDD and the title of posts is defining specifications with gherkin to advance and outline a project :( I guess I am stuck on tests... the good thing about having it in development is that i can use other bundles at the same time like jmsdebugging bundle and play with all things on the table :'(\n",
            "yeah i think I just saw the difference:\n\n session:\n       storage_id: session.storage.filesystem\n\nman!\n\nOn Thu, Jul 21, 2011 at 12:51 PM, komputerwiz\nreply@reply.github.com\nwrote:\n\n> It worked for me!\n> \n> To elaborate on what @everet said, config_test.yml already sets the necessary values:\n> \n> ``` yaml\n> # app/config/config_test.yml\n> framework:\n> \u00a0 \u00a0test: ~\n> \u00a0 \u00a0session:\n> \u00a0 \u00a0 \u00a0 \u00a0storage_id: session.storage.filesystem\n> ```\n> \n> Just add your Behat and Mink configuration at the bottom of that file and create an app_test.php frontend controller for your test environment.\n> \n> ## \n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/1759#issuecomment-1625394\n",
            "I disagree. I guess this thread was quickly hijacked to portray as the problem was in testing.\n\ni am not talking about testing, i am talking about regular dev environment.\n\nI have removed the line test: ~ since it is not needed on config.yml and because i am on dev i use config_dev.yml which is the default from SE. And still get the error\n\nThe service  behat.test_client  has a dependency on a non-existent parameter  test.client.parameters .\n\nas @caramba1337 mentioned. Of course if i create a test environment for this it will work.\n\nbut i am not wanting to run my app in test, why do i still get the error for \n\nThe service  behat.test_client  has a dependency on a non-existent parameter  test.client.parameters . ???\n\nIs it that behat hijacks and forces the client to be test client?\n",
            "I am trying to run in development sorry you guys, what does development has to do with behat ? I am searching through dev config files and cannot find anything with behat, why behat attaches itself to dev in this agressive way?\n",
            "This is a behat problem for not detecting the environment and cancel the service perhaps?\n\nThe service  behat.test_client  has a dependency on a non-existent parameter  test.client.parameters .\n",
            "ok finally closed\n\non config_dev.yml\n\nnot only this\nframework:\n    test:       ~\n\nbut this also\nnot only this\nframework:\n    test:       ~\n    storage_id: session.storage.filesystem\n\nhttps://github.com/Behat/MinkBundle/issues/1\n\nsolved\n",
            "ok\n",
            "yes I have it on dev :) and on test as well\n",
            "this is the new address for the bundle @lsmith mentioned above:  https://github.com/knplabs/KnpConsoleAutocompleteBundle\n\nso i guess they are complementary... question is if the autocomplete inside commands can be achieved with a bundle as well? any thoughts?\n",
            "The problem is that these changes only work for interactive commands, for shell I am trying the ConsoleAutocompleteBundle, however not getting it to work currently, it seems the autocomplete for ubuntu is interfering with this other autocomplete, also the guys use mac and not ubuntu so sure for them works, but not for me :( just filed an issue\n",
            "@RogerWebb aye mate, your website is down? what happened? I am glad i republished a copy of your post on this, now trying to find better resources on how to do this.\n",
            "true, what shall we do? yours is better I think, have you tested it?\n",
            "you are removing the logger rather than maybe actually using the logger for some useful reasons, not sure which is best\n",
            "@fabriceb you missed this spot? thought this was already merged\n",
            ":-)\n"
        ],
        "issues": [
            {
                "title": "[RFC] add input to the arguments of dialog helper",
                "body": "addresses #8079 \n"
            },
            {
                "title": "[WIP] add failing test",
                "body": "#7948\n"
            },
            {
                "title": "typo first->second",
                "body": ""
            },
            {
                "title": "[Config] #7644 add tests for passing number looking attributes as strings",
                "body": "| Q | A |\n| --- | :-: |\n| Bug fix? | yes |\n| New feature | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7644 |\n| License | MIT |\n"
            },
            {
                "title": "[Console] easy run command within command",
                "body": "symfonylive hackingday PR for the console component\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: no\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: pending\n\n@jmather helped me with the initial refactoring and workaround\n\nWe had to avoid the initial way of doing things because definition can only be modified at construction time\n\n``` php\n// automatically adds command key if not passed in the input\nif (!$input->hasArgument('command')) {\n    $input->setArgument('command', $this->getName());\n}\n```\n\nso this approach was not suitable\n\nbut something had to be done to avoid:\n\n``` php\n$command = $this->getApplication()->find('doctrine:phpcr:fixtures:load');\n\n$arguments = array(\n    'command' => 'doctrine:phpcr:fixtures:load'\n);\n\n$input = new ArrayInput($arguments);\n\n$returnCode = $command->run($input, $output);\n\nreturn $returnCode;\n```\n\nto turn it into:\n\n``` php\nreturn $this->runCommand('doctrine:phpcr:fixtures', $input, $output);\n```\n"
            },
            {
                "title": "[2.2] add support for optional custom error message for Configura...",
                "body": "RFC: ref #1666\n\nBasically this is the start, but i wanted to ask which one of these options is better:\n1. extend/override the base Exception class to include the custom error message\n   this requires a modification of the throw specific expection passing Exception($this) meaning it is getting\n   the current node or the node from which the exception is being thrown\n2. propagate the changes in every class that throws exception similar than this PR\n   this would require changes in every particular class\n\nPlease vote whether 1 or 2 is more fit\n\nThanks to all symfony2 community :D\n"
            },
            {
                "title": "added note on ConfigurationInterface best practice",
                "body": "in sync with #4659\n"
            },
            {
                "title": "[Form] add test getValue reads MagicWrapper property",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Feature/class map generator command [#2407, #2471]",
                "body": "Adds a command for Map Class Generator\n\nhttps://github.com/symfony/symfony/issues/2407\n\nquote @lsmith77 :\n\n it appears we do not have tools to generate a class map to be used in the map class loader. maybe we should even provide a command. then again maybe this should be handled by https://github.com/sensio/SensioDistributionBundle/tree/master/Resources/bin ? \n"
            },
            {
                "title": "test for ensuring creating form returns data of type specified in data_c...",
                "body": "...lass\n\n``` sh\n\n~ phpunit tests/Symfony/Tests/Component/Form/FormFactoryTest.php \nPHPUnit 3.6.4 by Sebastian Bergmann.\n\nConfiguration read from /home/cordoval/sites-2/forum/vendor/symfony/phpunit.xml.dist\n\n..........................F.\n\nTime: 0 seconds, Memory: 11.25Mb\n\nThere was 1 failure:\n\n1) Symfony\\Tests\\Component\\Form\\FormFactoryTest::testNullObjectWithCustomTypeReturnsCorrectObjectType\nFailing in returning object of type specified in data_class when creating with empty data\nFailed asserting that false is true.\n\n/home/cordoval/sites-2/forum/vendor/symfony/tests/Symfony/Tests/Component/Form/FormFactoryTest.php:531\n\nFAILURES!\nTests: 28, Assertions: 57, Failures: 1.\n```\n"
            },
            {
                "title": "Feature web spec",
                "body": "WebSpec class for PHPSpec support\n"
            },
            {
                "title": "recursion problem when not defining catalogue",
                "body": "i get an infinite recursion\n\n Fatal error: Maximum function nesting level of '100' reached, aborting! in /home/cordoval/sites-2/gracia/vendor/symfony/src/Symfony/Component/Translation/MessageCatalogue.php on line 127 Call Stack: 0.0002 641896 1. {main}() /home/cordoval/sites-2/gracia/web/app_dev.php:0 0.0441 6382576 2. Symfony\\Component\\HttpKernel\\Kernel->handle() /home/cordoval/sites-2/gracia/web/app_dev.php:20 0.0629 9257576 3. Symfony\\Bundle\\FrameworkBundle\\HttpKernel->handle() /home/cordoval/sites-2/gracia/app/bootstrap.php.cache:547 0.0629 9258584 4. Symfony\\Component\\HttpKernel\\HttpKernel->handle() /home/cordoval/si\n\nwhen enabling translator fallback to en on config and leaving catalog messages.en.yml with missing entries for labels\n\nI thought the fallback would at least display the text for the key but it rather crashes into the loop\n\nany idea if this is a bug? what can I do?\n"
            },
            {
                "title": "added command to clear log files",
                "body": "added missing command like cache:clear but monolog:clear\n"
            },
            {
                "title": "$node->hasAttribute('disabled') sf2 should not create disagreement betwee",
                "body": "$node->hasAttribute('disabled') sf2 should not create disagreement between implementation and practice for a crawler. If sahi real browser can find an element that is disabled, then sf2 should too. \nhttps://github.com/Behat/Mink/pull/58#issuecomment-1712459\n"
            },
            {
                "title": "500 page Warning: session_start(): The session id is too long or contains illegal characters, valid characters are a-z, A-Z, 0-9",
                "body": "Whenever starting with an incognito or clean cache browser in any app in any browser\n\nI am getting Warning: session_start(): The session id is too long or contains illegal characters, valid characters are a-z, A-Z, 0-9\n\nWhenever reloading it works and also whenever I try to debug with phpstorm it gives no problems, however this is a problem because whenever i use sahi and try to test it blocks because of this issue\n\nhttp://www.craftitonline.com/2011/07/symfony2-keep-your-project-guided-with-behat-and-mink/ see below at the bottom for comments\n\nseveral users are experiencing this besides me so it is not confined to me alone\n\nThanks\n"
            },
            {
                "title": "fixed trans format for form.html.twig - important for UserBundle to work ",
                "body": "until this is not included UserBundle is broken on its forms\n"
            }
        ],
        "pr_comments": [
            "i don't think you need the comments\n",
            "wrong indentation, see the other tests\n",
            "from within is better?\n",
            "wrong indentation\n",
            "this should be indented\n",
            "i think indentation should be pushed one further\n",
            "integer\n",
            "recursively\n",
            "remove extra line breake\n",
            "same\n",
            "remove\n",
            "why not theader or tbody, just curious\n",
            "i wonder why we just collect only errors, is there a way to collect some useful information as well?\n",
            "no spaces after ,\n",
            "remove\n",
            "same\n",
            "should be placed last\n",
            "same problem\n",
            "add extra white spaces after casting\n",
            "add a space also after //\n",
            "InValid -> Invalid\n",
            "if you have removed the service then please remove the class key also from this file as it is already moved to its own property_access.xml :baby: \n",
            "should this be kept to Compiler? or is fine?\n",
            "too many extra line breaks\n",
            "remove space after '\n",
            "curly should go on the next line\n",
            "indentation is wrong\n",
            "remove one space  after return\n",
            "exists -> exist\n",
            "remove space after '\n",
            "exist -> exists \n",
            "maybe you should use sprintf\n",
            "remove space\n",
            "```\nstring|null\n```\n",
            "same as above?\n",
            "have you tried a dataprovider for this test? just wondering\n",
            "so we are not leaving spaces between the contactenating .'s, thought i just saw @bschussek  using them for his PR\n",
            "would it be good to add the $engine = $this->getTwig() into the setup?\n",
            "agree\n",
            "there has to be a criteria dividing certain messages from others that would explain this better, rather than just saying much more\n",
            "probably remove this because we all not use phpstorm :)\n",
            "remove\n",
            "still not implemented\n",
            "integer not boolean right?\n",
            "same here\n",
            "you can now remove this one i think\n",
            "if on the previous line $status is either    \n\nself::REQUIREMENT_MISMATCH    or\nself::REQUIREMENT_MATCH\n\nthen why not checking either one of them and doing a check on 0?\n",
            "@stof also said something regarding this that was wasted thanks to Github removing old comments\n\ncommunity is speaking through comments remember :)\n",
            "done\n",
            "done\n",
            "done\n",
            "done\n",
            "done\n",
            "it was protected, I made it public in order to test it though\n",
            "@stof this is called at the same level of run, so it makes sense to have it public as the run method\n",
            "done\n",
            "yes\n",
            "right @stof true, but i mean to say that if we want to pass a Configuration as argument it has to extend ConfigurationInterface.\n",
            "@stof it was true but there was no note anywhere that this was best practice so we may as well do it now.\n",
            "if you reply another time and this is not a good idea, please just close this. Thanks!\n",
            "done\n",
            "no typehint for classFinder?\n",
            "shouldn't you need to return false if not loaded?\n",
            "makes sense, thanks\n",
            "allows\n",
            "does it make sense to initialize to '' prefix or on the constructor?\n",
            "ok I guess we want it to be mandatory then.\n",
            "should not be config:dump-reference ?\n",
            "yes I will update and remove them for now\n",
            "about this,  $realLogDir = $this->getContainer()->getParameter('kernel.logs_dir'); I think takes care of the customization or not?\n",
            "in that case this command is just for common use, for development mostly, but it is very useful when dealing with repeated tasks and tests\n",
            "are you saying there is a command that already does this? hmm\n",
            "oh yeah just realized it sorry, I will PR again\n",
            "really? btw, Richard is this connected to a post on your blog?\n",
            "put the LICENSE under a meta folder according to best practices\n",
            "the --dev is not needed anymore\n",
            "--dev is not needed\n",
            "license can be under meta folder, nevermind recanted\n",
            "oh ok sorry did not know, pardon me sil vou plait :baby: \n",
            "same here --dev\n",
            "wrong indentation\n",
            "this should be indented\n",
            "i think indentation should be pushed one further\n",
            "integer\n",
            "recursively\n",
            "remove extra line breake\n",
            "same\n",
            "remove\n",
            "why not theader or tbody, just curious\n",
            "i wonder why we just collect only errors, is there a way to collect some useful information as well?\n",
            "no spaces after ,\n",
            "remove\n",
            "same\n",
            "should be placed last\n",
            "same problem\n",
            "add extra white spaces after casting\n",
            "add a space also after //\n",
            "InValid -> Invalid\n",
            "wrong indentation\n",
            "this should be indented\n",
            "i think indentation should be pushed one further\n",
            "integer\n",
            "recursively\n",
            "remove extra line breake\n",
            "same\n",
            "remove\n",
            "why not theader or tbody, just curious\n",
            "i wonder why we just collect only errors, is there a way to collect some useful information as well?\n",
            "no spaces after ,\n",
            "remove\n",
            "same\n",
            "should be placed last\n",
            "same problem\n",
            "add extra white spaces after casting\n",
            "add a space also after //\n",
            "InValid -> Invalid\n",
            "if you have removed the service then please remove the class key also from this file as it is already moved to its own property_access.xml :baby: \n",
            "should this be kept to Compiler? or is fine?\n",
            "too many extra line breaks\n",
            "if you have removed the service then please remove the class key also from this file as it is already moved to its own property_access.xml :baby: \n",
            "should this be kept to Compiler? or is fine?\n",
            "too many extra line breaks\n",
            "remove space after '\n",
            "curly should go on the next line\n",
            "indentation is wrong\n",
            "remove one space  after return\n",
            "exists -> exist\n",
            "remove space after '\n",
            "exist -> exists \n",
            "maybe you should use sprintf\n",
            "remove space\n",
            "remove space after '\n",
            "curly should go on the next line\n",
            "indentation is wrong\n",
            "remove one space  after return\n",
            "exists -> exist\n",
            "remove space after '\n",
            "exist -> exists \n",
            "maybe you should use sprintf\n",
            "remove space\n",
            "```\nstring|null\n```\n",
            "same as above?\n",
            "have you tried a dataprovider for this test? just wondering\n",
            "so we are not leaving spaces between the contactenating .'s, thought i just saw @bschussek  using them for his PR\n",
            "```\nstring|null\n```\n",
            "same as above?\n",
            "have you tried a dataprovider for this test? just wondering\n",
            "so we are not leaving spaces between the contactenating .'s, thought i just saw @bschussek  using them for his PR\n",
            "i don't think you need the comments\n",
            "wrong indentation, see the other tests\n",
            "you can also replace $form->getData() here with $formData\n",
            "oh ok, sorry :baby: \n",
            "done\n",
            "done\n",
            "this can be integer|string no?\n"
        ],
        "prs": [
            {
                "title": "[RFC] add input to the arguments of dialog helper",
                "body": "addresses #8079 \n"
            },
            {
                "title": "[WIP] add failing test",
                "body": "#7948\n"
            },
            {
                "title": "typo first->second",
                "body": ""
            },
            {
                "title": "[Config] #7644 add tests for passing number looking attributes as strings",
                "body": "| Q | A |\n| --- | :-: |\n| Bug fix? | yes |\n| New feature | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7644 |\n| License | MIT |\n"
            },
            {
                "title": "[Console] easy run command within command",
                "body": "symfonylive hackingday PR for the console component\n\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: no\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: pending\n\n@jmather helped me with the initial refactoring and workaround\n\nWe had to avoid the initial way of doing things because definition can only be modified at construction time\n\n``` php\n// automatically adds command key if not passed in the input\nif (!$input->hasArgument('command')) {\n    $input->setArgument('command', $this->getName());\n}\n```\n\nso this approach was not suitable\n\nbut something had to be done to avoid:\n\n``` php\n$command = $this->getApplication()->find('doctrine:phpcr:fixtures:load');\n\n$arguments = array(\n    'command' => 'doctrine:phpcr:fixtures:load'\n);\n\n$input = new ArrayInput($arguments);\n\n$returnCode = $command->run($input, $output);\n\nreturn $returnCode;\n```\n\nto turn it into:\n\n``` php\nreturn $this->runCommand('doctrine:phpcr:fixtures', $input, $output);\n```\n"
            },
            {
                "title": "[2.2] add support for optional custom error message for Configura...",
                "body": "RFC: ref #1666\n\nBasically this is the start, but i wanted to ask which one of these options is better:\n1. extend/override the base Exception class to include the custom error message\n   this requires a modification of the throw specific expection passing Exception($this) meaning it is getting\n   the current node or the node from which the exception is being thrown\n2. propagate the changes in every class that throws exception similar than this PR\n   this would require changes in every particular class\n\nPlease vote whether 1 or 2 is more fit\n\nThanks to all symfony2 community :D\n"
            },
            {
                "title": "added note on ConfigurationInterface best practice",
                "body": "in sync with #4659\n"
            },
            {
                "title": "[Form] add test getValue reads MagicWrapper property",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Feature/class map generator command [#2407, #2471]",
                "body": "Adds a command for Map Class Generator\n\nhttps://github.com/symfony/symfony/issues/2407\n\nquote @lsmith77 :\n\n it appears we do not have tools to generate a class map to be used in the map class loader. maybe we should even provide a command. then again maybe this should be handled by https://github.com/sensio/SensioDistributionBundle/tree/master/Resources/bin ? \n"
            },
            {
                "title": "test for ensuring creating form returns data of type specified in data_c...",
                "body": "...lass\n\n``` sh\n\n~ phpunit tests/Symfony/Tests/Component/Form/FormFactoryTest.php \nPHPUnit 3.6.4 by Sebastian Bergmann.\n\nConfiguration read from /home/cordoval/sites-2/forum/vendor/symfony/phpunit.xml.dist\n\n..........................F.\n\nTime: 0 seconds, Memory: 11.25Mb\n\nThere was 1 failure:\n\n1) Symfony\\Tests\\Component\\Form\\FormFactoryTest::testNullObjectWithCustomTypeReturnsCorrectObjectType\nFailing in returning object of type specified in data_class when creating with empty data\nFailed asserting that false is true.\n\n/home/cordoval/sites-2/forum/vendor/symfony/tests/Symfony/Tests/Component/Form/FormFactoryTest.php:531\n\nFAILURES!\nTests: 28, Assertions: 57, Failures: 1.\n```\n"
            },
            {
                "title": "Feature web spec",
                "body": "WebSpec class for PHPSpec support\n"
            },
            {
                "title": "added command to clear log files",
                "body": "added missing command like cache:clear but monolog:clear\n"
            },
            {
                "title": "$node->hasAttribute('disabled') sf2 should not create disagreement betwee",
                "body": "$node->hasAttribute('disabled') sf2 should not create disagreement between implementation and practice for a crawler. If sahi real browser can find an element that is disabled, then sf2 should too. \nhttps://github.com/Behat/Mink/pull/58#issuecomment-1712459\n"
            },
            {
                "title": "fixed trans format for form.html.twig - important for UserBundle to work ",
                "body": "until this is not included UserBundle is broken on its forms\n"
            }
        ]
    },
    "1206230": {
        "repos": [
            "The Symfony PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "Keep shortcut for better performance",
            "Add test for utf8 key",
            "[HttpFoundation] enable ParameterBag's set/has/remove to also handle deep parameters\n\nAllows the methods to handle deep parameters.\nThey now offer an additional boolean parameter to allow parsing of an array-syntax in the key.\nThe same behavior was already available for the get method.\nFixes #5040",
            "Wrong base class assumption...",
            "Make method private",
            "Fix docblock",
            "Fit condition to one line"
        ],
        "issue_comments": [
            "The tests should pass. The last build failed because Composer could not clone one of the github repositories (github down or something)...\n",
            "@fabpot Of course, sorry...\n",
            "Sorry for the commit mess, I have only a iPad and a remote shell at hand currently... I can squash when PR is ready.\n",
            "The tests should pass. The last build failed because Composer could not clone one of the github repositories (github down or something)...\n",
            "@fabpot Of course, sorry...\n",
            "Sorry for the commit mess, I have only a iPad and a remote shell at hand currently... I can squash when PR is ready.\n",
            "@stof Regarding my motivation for the second suggestion: We have Designers/Frontend-Engineers developing our error pages, that do not know where or how to throw an exception... Might be an organizational problem though...\n",
            "@aderuwe Creating a new bundle only for that might be overkill. Why not in TwigBundle? Of course that test routes / controller would only be available in dev mode...\n",
            "@fabpot I provided a PR offering a deep-access api for the  set / has / remove -methods that is exactly like that for the  get  method. And it is implemented without  eval  ;)\nIf that api is only wanted for  remove  (and not for  has  and  set ), I could of course shrink the PR.\nI can also provide a Doc PR, as soon as that is clear.\n",
            "I don't really know if this issue is about having  development error pages  (including stack traces etc.) in  production  or vice versa. Anyway it is related to #7446.\n"
        ],
        "issues": [
            {
                "title": "[HttpFoundation] enable ParameterBag's set/has/remove to also handle deep parameters",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5040 |\n| License | MIT |\n- [ ] Doc PR\n\nAllows the methods to handle deep parameters.\nThey now offer an additional boolean parameter to allow parsing of an array-syntax in the key.\nThe same behavior was already available for the get method.\n"
            },
            {
                "title": "Ease development for error pages",
                "body": "It is currently quiet hard to test modifications within custom error pages. It involves the following steps:\n1. Make the exception controller use the right template:\n   When in development mode the exception controller defaults to use a template called  exception_ . In production it searches for  error_ . So you either need to switch to production locally or rename your template temporarily. When switching to production locally Twig will start to cache the compiled templates. So you even need to clear the cache after each modification or deactivate caching in your Twig configuration. It is ugly anyway.\n2. Trigger an exception\n   To actually see the error page, an exception has to be thrown. This might still be easy for 404 exceptions (http://localhost/app.php/there/is/no/page/here...), but is more difficult for other exception types (e.g. 403, 500).\n\nSuggestion:\n1. The exception controller should offer a way to make him use the  production  templates within development mode. This could be a configuration variable in TwigBundle.\n2. We could offer routes for exception tests in development mode (e.g. /_exceptions-test/403). This routes would start a controller that just throws the specified exception.\nIt would be even nicer if calling the test route would implicitly switch to  production  templates without having to reconfigure TwigBundle.\n\nI have already had a look into TwigBundle and could provide a PR if you like the idea.\n\nOr am I overseeing something existing?\n"
            }
        ],
        "pr_comments": [
            "But otherwise I would not comply with the signature of the parent class. What would you suggest?\n\nAm 09.05.2013 um 15:03 schrieb Fabien Potencier notifications@github.com:\n\n> In src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParameterBag.php:\n> \n> > @@ -65,7 +65,7 @@ public function add(array $parameters)\n> >       *\n> >       \\* @api\n> >       */\n> > -    public function set($name, $value)\n> > -    public function set($name, $value, $deep = false)\n> >   This is wrong as the DependencyInjection parameter bag does not support deep parameters.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
            "Should work anyway (or was already broken before). Do you see any problem?\n",
            "Removed it to reduce redundancy. The helper method will also check this and return quiet fast.. Should I revert that?\n",
            "That is indeed a good idea, but my time is just running out (and I am only on smartphone anyway). Will add the test as soon as possible!\n",
            "@fabpot I readded the second part of the condition.\n",
            "@stof I added a test for utf8 keys, works fine.\n",
            "But otherwise I would not comply with the signature of the parent class. What would you suggest?\n\nAm 09.05.2013 um 15:03 schrieb Fabien Potencier notifications@github.com:\n\n> In src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParameterBag.php:\n> \n> > @@ -65,7 +65,7 @@ public function add(array $parameters)\n> >       *\n> >       \\* @api\n> >       */\n> > -    public function set($name, $value)\n> > -    public function set($name, $value, $deep = false)\n> >   This is wrong as the DependencyInjection parameter bag does not support deep parameters.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
            "Should work anyway (or was already broken before). Do you see any problem?\n",
            "Removed it to reduce redundancy. The helper method will also check this and return quiet fast.. Should I revert that?\n",
            "That is indeed a good idea, but my time is just running out (and I am only on smartphone anyway). Will add the test as soon as possible!\n",
            "@fabpot I readded the second part of the condition.\n",
            "@stof I added a test for utf8 keys, works fine.\n",
            "But otherwise I would not comply with the signature of the parent class. What would you suggest?\n\nAm 09.05.2013 um 15:03 schrieb Fabien Potencier notifications@github.com:\n\n> In src/Symfony/Component/DependencyInjection/ParameterBag/FrozenParameterBag.php:\n> \n> > @@ -65,7 +65,7 @@ public function add(array $parameters)\n> >       *\n> >       \\* @api\n> >       */\n> > -    public function set($name, $value)\n> > -    public function set($name, $value, $deep = false)\n> >   This is wrong as the DependencyInjection parameter bag does not support deep parameters.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub.\n",
            "Should work anyway (or was already broken before). Do you see any problem?\n",
            "Removed it to reduce redundancy. The helper method will also check this and return quiet fast.. Should I revert that?\n",
            "That is indeed a good idea, but my time is just running out (and I am only on smartphone anyway). Will add the test as soon as possible!\n",
            "@fabpot I readded the second part of the condition.\n",
            "@stof I added a test for utf8 keys, works fine.\n"
        ],
        "prs": [
            {
                "title": "[HttpFoundation] enable ParameterBag's set/has/remove to also handle deep parameters",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #5040 |\n| License | MIT |\n- [ ] Doc PR\n\nAllows the methods to handle deep parameters.\nThey now offer an additional boolean parameter to allow parsing of an array-syntax in the key.\nThe same behavior was already available for the get method.\n"
            }
        ]
    },
    "538415": {
        "repos": [
            "Headless WebKit with JavaScript API",
            "The Symfony PHP framework",
            "A PHP micro framework inspired by Sinatra"
        ],
        "commit_comments": [],
        "commits": [],
        "issue_comments": [],
        "issues": [
            {
                "title": "[Form] [Validator] Fixed post_max_size = 0 bug (issue #8065)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8065 |\n| License | MIT |\n| Doc PR |  |\n"
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "[Form] [Validator] Fixed post_max_size = 0 bug (issue #8065)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #8065 |\n| License | MIT |\n| Doc PR |  |\n"
            }
        ]
    },
    "546682": {
        "repos": [
            "The Symfony PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "[Validator] Russian translation of the IBAN & ISBN validator messages",
            "[Form] Make exception handling consistent with other components",
            "[Stopwatch] revert concat with spaces",
            "[Stopwatch] fix for use empty function",
            "[Stopwatch] Fix checking started events",
            "fixes",
            "Issue #7639 [HttpKernel] Improve TraceableEventDispatcher to not call Stopwatch::stop() when not started"
        ],
        "issue_comments": [
            "ping @bschussek \n",
            "@bschussek no problem, I'll wait.\n",
            "A bit later today I'll make rebase and update changelog file.\n",
            "Rebased. @bschussek plz review this.\n",
            "Sorry for closing\n",
            "updated.\n",
            "@bschussek not at all. It's pleasure to me to be a part of great community :)\n",
            "done\n",
            "@craue I don't know why your tests pass. When I comment line that you say, I have failed tests.\n![Screen Shot 2013-04-16 at 8 11 18 PM](https://f.cloud.github.com/assets/546682/387120/e1eec922-a6b8-11e2-9264-77c220997a96.png)\n",
            "ping @bschussek \n",
            "@bschussek no problem, I'll wait.\n",
            "A bit later today I'll make rebase and update changelog file.\n",
            "Rebased. @bschussek plz review this.\n",
            "Sorry for closing\n",
            "updated.\n",
            "@bschussek not at all. It's pleasure to me to be a part of great community :)\n",
            "done\n",
            "trying this one @bschussek \n",
            "@bschussek heh, ckeck it out;)\n",
            "@fabpot we must fix this for 2.1?\n",
            "@vicb ok, then I get it.\n",
            "ping @bschussek does anybody work on this? or I can get it?\n",
            "@fabpot yes you are right. I'll change this & make another commit\n",
            "@fabpot another place where we get CONTENT_TYPE from the server is getContentType method, but this method is available only at 2.1 branch\n",
            "@fabpot i made changes for 2.1 branch\n",
            "ok, I'll do this.\n"
        ],
        "issues": [
            {
                "title": "[Validator] Russian translation of the IBAN & ISBN validator messages",
                "body": "Added the Russian translation for new validators.\n"
            },
            {
                "title": "[Form] Make exception handling consistent with other components",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6544 |\n| License | MIT |\n"
            },
            {
                "title": "[Stopwatch] Fix array definition from 5.4",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7639, #7653 |\n| License | MIT |\n\nI was break tests for 5.3 with my prev. PR #7691\n"
            },
            {
                "title": "[Stopwatch] Fix checking started events",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7639, #7653 |\n| License | MIT |\n\nStopwatch component return true from isStarted method, when StopwatchEvent was added but not started.\n"
            },
            {
                "title": "[HttpKernel] Improve TraceableEventDispatcher to not call Stopwatch::stop() when not started",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7639 |\n| License | MIT |\n"
            },
            {
                "title": "[HttpFoundation] Fixed #5697 - Request::createFromGlobals, Request::getContentType",
                "body": "Changed checking CONTENT_TYPE from server to headers variable\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5697\nTodo: -\nLicense of the code: MIT\n"
            },
            {
                "title": "[HttpFoundation] Fixed #5697 - Request::createFromGlobals",
                "body": "Changed checking CONTENT_TYPE from server to headers variable\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5697\nTodo: -\nLicense of the code: MIT\n"
            },
            {
                "title": "[2.1][HttpFoundation][Request] Request object doen't set parameter from PUT & DELETE request methods",
                "body": "Hi all.\n\nWhen I run project at build in php server (php -S) at $_SERVER variable I don't have key CONTENT_TYPE, but only HTTP_CONTENT_TYPE.\nAs result PUT & DELETE requests doesn't have parameters data, which I send from client side via ajax for example.\n\nRequest class have this method:\n\n``` php\npublic static function createFromGlobals()\n{\n    $request = new static($_GET, $_POST, array(), $_COOKIE, $_FILES, $_SERVER);\n\n    if (0 === strpos($request->server->get('CONTENT_TYPE'), 'application/x-www-form-urlencoded')\n        && in_array(strtoupper($request->server->get('REQUEST_METHOD', 'GET')), array('PUT', 'DELETE', 'PATCH'))\n    ) {\n        parse_str($request->getContent(), $data);\n        $request->request = new ParameterBag($data);\n    }\n\n    return $request;\n}\n```\n\nWhen request object is initialised server variable is created from ServerBag class, that have getHeaders(). This method cuts all HTTP_ prefix from $_SERVER, and result is set to $request->header.\n\nMy question is:\nwhy this checking:\n\n``` php\nstrpos($request->server->get('CONTENT_TYPE'), 'application/x-www-form-urlencoded')\n```\n\nis from server variable instead of headers variable?\n\nIn mailing list & forum I didn't have answer.\n"
            }
        ],
        "pr_comments": [
            "sure, you are right\n",
            "@fabpot sorry, but I don't understand about what other occurrences you say.\nmaybe did you mean this:\nhttps://github.com/Olden/symfony/blob/cb9b57c4f170e4670b7b5773e92c808ed933bf94/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php#L414\n\nand this:\nhttps://github.com/Olden/symfony/blob/cb9b57c4f170e4670b7b5773e92c808ed933bf94/src/Symfony/Component/HttpKernel/Debug/TraceableEventDispatcher.php#L425\n",
            "@fabpot I haven't find it...\n"
        ],
        "prs": [
            {
                "title": "[Validator] Russian translation of the IBAN & ISBN validator messages",
                "body": "Added the Russian translation for new validators.\n"
            },
            {
                "title": "[Form] Make exception handling consistent with other components",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6544 |\n| License | MIT |\n"
            },
            {
                "title": "[Stopwatch] Fix array definition from 5.4",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7639, #7653 |\n| License | MIT |\n\nI was break tests for 5.3 with my prev. PR #7691\n"
            },
            {
                "title": "[Stopwatch] Fix checking started events",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7639, #7653 |\n| License | MIT |\n\nStopwatch component return true from isStarted method, when StopwatchEvent was added but not started.\n"
            },
            {
                "title": "[HttpKernel] Improve TraceableEventDispatcher to not call Stopwatch::stop() when not started",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7639 |\n| License | MIT |\n"
            },
            {
                "title": "[HttpFoundation] Fixed #5697 - Request::createFromGlobals, Request::getContentType",
                "body": "Changed checking CONTENT_TYPE from server to headers variable\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5697\nTodo: -\nLicense of the code: MIT\n"
            },
            {
                "title": "[HttpFoundation] Fixed #5697 - Request::createFromGlobals",
                "body": "Changed checking CONTENT_TYPE from server to headers variable\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5697\nTodo: -\nLicense of the code: MIT\n"
            }
        ]
    },
    "88061": {
        "repos": [
            "The Symfony2 PHP framework (PHP 5.3 only -- not yet stable) -- documentation for master is at http://symfony.com/doc/2.0/",
            "Official Zend Framework 2.0 git repository"
        ],
        "commit_comments": [
            "I came across this myself just today. Hadn't seen this discussion yet, however. https://github.com/jquery/jquery/pull/101\n",
            "adDcompilerPass should be addCompilerPass\n",
            "Instead of simply skipping when `SIGKILL` is not defined, how about replacing it with the literal `9` instead? `SIGKILL` is defined by the `pcntl` extension, which is separate from `proc_`. IMO that would be a better solution.\n",
            "This looks wrong (tm). See also fabpot/silex#541.\n",
            "I think that's a bad idea, because it changes the semantics of setContent. Adding a setData method might be an option, but I'm not convinced that is needed either.\n"
        ],
        "commits": [
            "[bug7193] add QUnit test case",
            "[bug7193] allow animations with numbers below -10000\n\nthis limitation was introduced to fix an old opera bug. however it limits the use of animate severely in all browsers.",
            "Fix http-kernel dep in symfony/security\n\nThe current constraint will not match 2.3.x-dev and cause edge cases\nwhere either:\n\n* composer falls back to symfony/symfony because it cannot find a match\n* composer installs 2.2 versions of http-kernel and http-foundation",
            "[DependencyInjection] Add clone for resources which were introduced in 2.1",
            "Merge remote-tracking branch 'upstream/2.1' into graphviz-frozen-container-2.1\n\n* upstream/2.1: (2632 commits)\n  [HttpKernel] fixed the creation of the Profiler directory\n  [Security] fixed session creation when none is needed (closes #6917)\n  [FrameworkBundle] removed obsolete comment (see 2e356c1)\n  Correct comment in NativeSessionStorage regarding session.save_handler\n  [Yaml] fixed wrong merge (indentation default is 4 as of 2.1)\n  Fixed missing class argument when throwing exception\n  [Security] Add PHPDoc to AuthenticationEvents\n  Fix typos in README\n  Added an error message in the DebugClassLoader when using / instead of \\.\n  KNOWN_ISSUES with php 5.3.16\n  bumped Symfony version to 2.1.8-DEV\n  updated VERSION for 2.1.7\n  updated CHANGELOG for 2.1.7\n  fixed CS\n  [Process] Fix docblocks, remove `return` from `PhpProcess#start()` as parent returns nothing, cleaned up `ExecutableFinder`\n  fixes a bug when output/error output contains a % character\n  [Profiler] [Redis] Fix sort of profiler rows.\n  Removed underscores from test method names to be consistent with other components.\n  Fix version_compare() calls for PHP 5.5.\n  Handle the deprecation of IntlDateFormatter::setTimeZoneId() in PHP 5.5.\n  ...\n\nConflicts:\n\ttests/Symfony/Tests/Component/DependencyInjection/Dumper/GraphvizDumperTest.php",
            "[DependencyInjection] Allow frozen containers to be dumped to graphviz",
            "Merge branch 'master' into text-traces\n\n* master: (449 commits)\n  [2.2] add http_method_override option to ease setup\n  fixed typo (closes #7290)\n  fixed ticket 7210\n  [2.3] [DI] Improve the generated PHPDoc of the dumped PHP container\n  [FrameworkBundle] Fixes invalid serialized objects in cache\n  [WebProfilerBundle] removed the display of some information when their value is n/a\n  remove dead code in yaml component\n  Fixed typo in UPGRADE-2.2\n  fixed typo\n  RedisProfilerStorage wrong db-number/index-number selected\n  [2.3] [DomCrawler] adds schema relative URL support to link\n  [DependencyInjection] added a test for the previous merge (refs #7261)\n  Unset loading[$id] in ContainerBuilder on exception\n  Default validation message translation fix.\n  remove() should not use deprecated getParent() so it does not trigger deprecation internally\n  adjust routing tests to not use prefix in addCollection\n  add test for uniqueness of resources\n  added tests for addDefaults, addRequirements, addOptions\n  adjust RouteCollectionTest for the addCollection change and refactor the tests to only skip the part that really needs the config component\n  added tests for remove() that wasnt covered yet and special route name\n  ...",
            "[TwigBundle] Use display instead of visibility for plain text trace buttons",
            "[TwigBundle] Add plain-text exception to exception page",
            "[HttpKernel] Re-introduce comment but note that throw happens in HttpKernel\n\nBased on feedback on the PR.",
            "[HttpKernel] Remove misleading comment from ExceptionListener",
            "[DomCrawler] Resolve relative URIs from Links\n\nThis is useful when using DomCrawler and HttpKernel\\Client with an\nHttpKernel that does not support relative requests to URIs.",
            "[Console] Allow any callable to be passed to Command::setCode",
            "[2.1] Exclude tests from zips via gitattributes",
            "[2.1] Fix SessionHandlerInterface autoloading\n\nThe path for 2.1 is also incorrect. For master, this was fixed in 3b4708. This patch adds the `target-dir` prefix to the autoloading base directory of the HttpFoundation stubs.",
            "[composer] The 2.2 branch should replace packages of version 2.2.*, not 2.1.*",
            "[Validator] Move doctrine/common dependency from require to suggest",
            "[Validator] Change default of ValidatorFactory::buildDefault to exclude annotations",
            "Merge branch 'master' into output-stream\n\n* master: (554 commits)\n  [WebProfilerBundle] fixed typo\n  [WebProfileBundle] remove dependency on the DIC\n  [WebProfilerBundle] removed dependency on the templating component\n  [HttpKernel] unified the way the traceable event dispatcher injects information into the profiler (closes #5733)\n  [WebProfilerBundle] avoid the usage of the global app variable\n  [WebProfilerBundle] changed all includes to use the new Twig's notation\n  [WebProfilerBundle] moved all static assets directly into the templates\n  [Console] [ProgressHelper] better percentage precision\n  [Form] Removed unused method ChoiceView::isSelected()\n  Fix incorrect inheritdoc blocks\n  [DomCrawler] fixed a bad merge\n  [Console] Fixes in ProgressHelper\n  [Security] Added Pbkdf2PasswordEncoder\n  FIX [2.1][ClassLoader]UniversalClassLoader not working with AnnotationRegistry::registerLoader\n  fixed typo\n  [Config] added some phpdocs\n  added entry to changelog\n  fixed CS\n  adds two convenience methods for optional configuration sections\n  added doc comments\n  ...\n\nConflicts:\n\tsrc/Symfony/Component/HttpFoundation/Tests/StreamedResponseTest.php",
            "[output-stream] Do not close stream for twig subrequests",
            "[output-stream] Refactor StreamingResponse implementation to use an OutputStream",
            "Merge remote-tracking branch 'upstream/master' into output-stream\n\n* upstream/master: (633 commits)\n  [Security] Fix the default authentication handlers config definition\n  updated VERSION for 2.0.16\n  update CONTRIBUTORS for 2.0.16\n  updated CHANGELOG for 2.0.16\n  [Validator] Improved error messages displayed when the Valid constraint is misused\n  [Form] Fixed TransformationFailedExceptions to be caught in the model transformers\n  [Form] Improved ValidatorTypeGuesser to interpret the constraints True and False\n  [Validator] Deprecated the Size constraint\n  [Validator] Fix docblocks\n  [Process] remade ProcessBuilder::setTimeout fluent\n  [Process] fixed setting the timeout to null\n  [Validator] Reverted the changes done to the Size constraint in 3a5e84f4a7eab00a9ea624eaa573bfe0d8b975c3\n  [Validator] Added the constraints MinCount and MaxCount\n  [Validator] Removed the Range constraint as it duplicates functionality given in Min and Max\n  [Form] Enabled error bubbling from the parts of a date/time field to the main field\n  [Locale] Fixed error resetting in StubIntlDateFormatter::parse()\n  [Form] Renamed the options  data_timezone  and  user_timezone \n  [Process] re-added the possibility to set the Process timeout to null (to disable it) (closes #4843)\n  added missing listener priority changes in the UPGRADE file (refs #2680)\n  [Form] Fixed tests failing on systems with timezones other than +01:00\n  ...\n\nConflicts:\n\tsrc/Symfony/Component/HttpFoundation/StreamedResponse.php",
            "[output-stream] Cosmetic tweak",
            "[output-stream] Close OutputStream after serving master request",
            "[output-stream] Expose the stream resource of StreamOutputStream",
            "[Validator] Change default of ValidatorFactory::buildDefault to exclude annotations",
            "Merge remote-tracking branch 'upstream/2.0' into validator-suggest-doctrine-common\n\n* upstream/2.0:\n  [Security] fixed phpdoc.\n  [Security] added some missing phpdoc for AbstractToken::setUser() and UsernamePasswordToken::__construct() methods.\n  bumped Symfony version to 2.0.14-DEV\n  [Security] Configure ports in RetryAuthenticationEntryPoint according to router settings\n  updated VERSION for 2.0.13\n  update CONTRIBUTORS for 2.0.13\n  updated CHANGELOG for 2.0.13\n  updated vendors for 2.0.13\n  Fixed tests\n  [Console] Selectively output to STDOUT or OUTPUT stream\n  [MonologBridge] Fixed the WebProcessor",
            "[Validator] Move doctrine/common dependency from require to suggest",
            "Correctly parse single-line @expectedException annotations",
            "do a putenv for <env> config (closes #386)",
            "add support for sqlite2",
            "[streaming] Do not set a Transfer-Encoding header of chunked\n\nApache expects the response to already be in chunked format in that case,\nwhich causes it to not deliver the streamed body.\n\nIf no Content-Length is set on the response, web servers will automatically\nswitch to chunked Transfer-Encoding, and handle the chunking for you.\n\nNginx does not share the issue that apache has, but will add the Content-\nLength header too.",
            "[streaming] Document and test that Transfer-Encoding is absent",
            "[composer] add  framework  keyword to main package",
            "[composer] add dependency-injection to main composer.json replace",
            "[composer] add composer.json",
            "[composer] add missing dependency-injection file, update versions to >=2.0",
            "[composer] add suggest to components and bridges",
            "[composer] rename {suggests => suggest}",
            "[composer] bump version to 2.0.4",
            "[composer] change main package name to symfony/symfony",
            "[HttpFoundation] Fix FileException checking in FileTest",
            "[TwigBundle] Default $globals to null as in FrameworkBundle/PhpEngine",
            "make Templating Engine $globals optional",
            "[HttpFoundation] minor optimization",
            "minor adjustments suggested by vicb",
            "[HttpFoundation] refactor Request::getClientIp test",
            "[HttpFoundation] test Request::create with an IP as host name",
            "[HttpFoundation] add IPv6 support to Request",
            "[Validator] add IPv6 support to UrlValidator",
            "[Validator] use full iPv6 regex\n\nit was taken from:\nhttps://github.com/strattg/ipv6-address-test/blob/master/Tests/Rfc3986RegexTest.php",
            "[HttpFoundation] refactor RequestMatcherTest to use dataProvider",
            "[HttpFoundation] IPv6 support for RequestMatcher",
            "[Locale] first implementation of StubIntlDateFormatter",
            "[Locale] add support for escaping, give specifics on implementation used in tests",
            "[Locale] move intl bugs to skipped tests",
            "[Locale] support for G and Q placeholders in StubIntlDateFormatter::format",
            "[Locale] add support for L, which is the same as M",
            "[Locale] use assertSame instead of assertEquals",
            "[Locale] add support for h",
            "[Locale] support for D (day of year)",
            "[Locale] support for E (day of week)",
            "[Locale] support for a (AM/PM)",
            "[Locale] support for H (24 hour)",
            "[Locale] refactor IntlDateFormatter::format to build regExp dynamically",
            "[Locale] implement k (24-hour (1-24)",
            "[Locale] support for K (12-hour (0-11))",
            "[Locale] support for m (minute of hour)",
            "[FrameworkBundle] fix addCompilerPass typo",
            "Optimize autoload prefix in composer.json\n\nBy having more specific autoload prefixes it is possible to reduce the number of stat calls made.",
            "[Locale] refactor IntlDateFormatter::format to build regExp dynamically",
            "[Locale] support for H (24 hour)",
            "[Locale] first implementation of StubIntlDateFormatter",
            "[Locale] add support for escaping, give specifics on implementation used in tests",
            "[Locale] move intl bugs to skipped tests",
            "[Locale] support for G and Q placeholders in StubIntlDateFormatter::format",
            "[Locale] add support for L, which is the same as M",
            "[Locale] use assertSame instead of assertEquals",
            "[Locale] add support for h",
            "[Locale] support for D (day of year)",
            "[Locale] support for E (day of week)",
            "[Locale] support for a (AM/PM)",
            "[DependencyInjection] Typo in Container\n\n freezed  should be  frozen .",
            "[Soap] Fix the class name of Reflection in AutoDiscover",
            "authenticity_token option for form_tag [#2988 state:resolved]",
            "[Locale] support for s (second)",
            "[Locale] refactor to use DateTime and DateTimeZone, adding timezone support",
            "[Locale] support for z (timezone offset from GMT)",
            "[Locale] add a list of unimplemented date format keywords",
            "[Locale] adjust to new quoting format, some tests failing",
            "[Locale] use UTC if timezone is unsupported",
            "[Locale] add some more test cases with escaping",
            "[Locale] slightly adjust regex for matching quotes",
            "[Locale] support standard date and time types if no format is set, refactoring and more tests",
            "[Locale] add another failing escape test case",
            "[Locale] Fixed two tests",
            "[Locale] Fixed implementation of quote parsing and replacement",
            "[Locale] minor naming change",
            "[Locale] use eriksens intl test helpers",
            "[Locale] fix failing test case",
            "[Locale] refactoring and some more tests",
            "[Locale] add remaining IntlDateFormatter methods with tests",
            "[Locale] re-order StubIntlDateFormatter methods, rename timezoneId to timeZoneId, add setLenient method",
            "[Locale] refactor tests, make use of specialized exception",
            "[Locale] remove setLocale from StubIntlDateFormatter",
            "[Locale] split another StubIntlDateFormatter test into two",
            "[Locale] only test BC era if on 64bit",
            "[Locale] throw NotImplementedException on unimplemented chars",
            "[Locale] initial stub of StubCollator with class constants",
            "[Locale] StubCollator: asort with initial tests",
            "[Locale] use is64Bit helper for StubIntlDateFormatterTest",
            "[Locale] add @author tag to StubIntlDateFormatter",
            "[Locale] add @author tag to StubCollator",
            "[Locale] add license docblock to LocaleTestCase",
            "[Locale] add docblocks to StubIntlDateFormatter and adjust some things to be more like StubNumberFormatter",
            "[Locale] convenience createStubFormatter method for StubIntlDateFormatter tests",
            "[Locale] refactor and simplify some parts of StubIntlDateFormatter",
            "[Locale] refactor date formatting into separate transformer classes, early concepts for date parsing",
            "[Locale] minor cosmetical tweaks to the pre-escaped regExp",
            "[Locale] import FullTransformer via usee statement",
            "[Locale] handle escaped (enquoted) strings when parsing",
            "[Locale] match reverseMatchingRegExp against full string value",
            "[Locale] add missing StubCollator methods, with tests",
            "[Locale] use the sort flag in StubCollator::asort()"
        ],
        "issue_comments": [
            "Possible duplicate of #278.\n",
            "I haven't really had a case where I would have needed to compile anything with HipHop. But for high-volume APIs, could be nice. ;-)\n",
            "That's the best I could come up with, if you have any suggestions for improving it, please let me know.\n",
            "Have you considered a generic decorator compiler pass? Something like a generic version of [this](https://github.com/igorw/yolo/blob/master/src/Yolo/Compiler/ControllerResolverDecoratorPass.php). Could possibly even be extended with priorities.\n\nThe basic premise is that adding tags (metadata) is much more generic and requires less adjustments to loaders/dumpers/schemata than adding a new service attribute.\n\nI agree that if the intent of this feature is decoration, then that term should be used.\n",
            "What is the use case for this feature? I don't think it makes sense. If you _do_ want a timeout for a meta-redirect, you'll also want to provide a response body, as to not present a blank page. Also, this will only work for browsers that do not support real HTTP redirects.\n\nIMO this does not belong in `RedirectResponse`.\n",
            "Thanks for following through with this PR!\n- You need to remove leading backslashes in some places to reference the correct exception class\n- Please check the [coding standards](http://symfony.com/doc/master/contributing/code/standards.html)\n",
            "Looks good.\n",
            ":+1:, we did a similar thing for phpBB.\n",
            "Should have some tests.\n",
            "Indeed, in fact the `UploadException` was added but never used.\n\nI found this commit: f2c1976da61d84366ac0f21c62270bf4123c19d8 but it was incorrectly removed as part of this mege commit: 3f70f89339506540bd38960a6393a3b0f28c3846.\n",
            ":+1: \n",
            "Why not `escapeshellarg`?\n\nI believe this patch incorrectly escapes. You cannot escape quotes inside strings on the shell. so to escape `I don't even`, you would have to do either ` I don't even ` or `'I don'\\''t even'`. `escapeshellarg` does the latter.\n",
            "Looking at the PHP source this actually appears to be highly platform specific. Maybe just skip the escaping if it matches `[a-zA-Z0-9-]+`.\n",
            "Is this considered a new feature? I would consider it a bug fix, so maybe it should go into `2.1`?\n",
            ":+1:\n",
            "Supporting inline definitions for YAML is definitely quite an interesting addition. What is lacking from this patch IMO, is support for arguments and ideally all the other `Definition` attributes.\n",
            "This condition should never happen. If you received a direct request from a proxy, that means it's not a proxy but a client. Am I missing something?\n",
            "This PR is massive. It should be broken down into smaller commits that can be reviewed more easily. If possible perhaps even into separate smaller PRs that can be applied atomically without breaking stuff.\n",
            "I'm not sure if introducing the `Document` is worth the amount of code it introduces. If #6339 can produce the same result with only 342 new LOC, maybe we should aim for something more similar to it.\n",
            "Possibly. I guess re-implementing pandoc inside of symfony seems like a bit much.\n",
            "`$subject` is no longer used anywhere. The `substr` is now done inline in the `preg_match` call. This code is effectively dead.\n",
            "Can you add a test case? EDIT: I guess someone beat me to that comment. :)\n",
            "Opened new PRs for 2.0 and 2.1. Closing this one.\n",
            "Looks good to me.\n\nping @Seldaek\n",
            "@stof change it to what? the goal is still to have it interpreted as JSON by the browser, so a JSON content type makes sense.\n",
            "This CSRF fix is **not** for JS or JSONP. It's for JSON. Therefore it doesn't make sense at all to apply it to JSONP responses. And it doesn't make sense to serve it with a JS content type.\n",
            ":+1:\n\nOne question though: will the content-type be implicitly overridden if it already exists?\n",
            "I did think about that. The problem is, to do this reliably you need to include something like [ZeroClipboard](https://github.com/jonrohan/ZeroClipboard) which then also requires flash. And I don't want to drag all kinds of strange dependencies in for something so small.\n",
            "Bump.\n",
            "Yeah. But since it's already fixed in master, I'd rather just leave it.\n",
            "Let me rephrase: Does it make sense to backport such things to 2.0?\n",
            "Ok. In that case, I'll look into making it consistent for 2.3.\n",
            "@vicb I just created the PR ^.\n",
            "I missed that on the commit I linked. I've updated the patch to re-introduce the comment but clarify that `throw` is in HttpKernel.\n",
            "Looks like GitHub did not close this PR properly on merge, closing manually.\n",
            "On further investigation this PR is most likely unnecessary.\n\nI was testing [CgiHttpKernel](https://github.com/igorw/CgiHttpKernel) against phpBB, and was getting failures because requests were going to the wrong URL. The root cause was a missing `/` at the beginning of requested URLs. Since the current URL is stored by the client and used to determine relative paths in subsequent requests, a request to `adm/index.php` followed by a (non-crawler driven) request to `posting.php` would fail, because it tries to go to `adm/posting.php` which does not exist. With goutte this was not an issue because we always used the full URI anyway.\n\n**TLDR:** Issue fixed by using root-relative URLs for all calls to the client.\n\nSorry for the inconvenience, closing.\n",
            "At this point we should consider separating formatting from the command class itself, and perhaps having a `--format=xml` flag instead of `--xml`.\n",
            "It's not really worth it for the main package. If we exclude anything, we should also exclude the tests. And AFAIK we would have to list all of the full paths for that which is a maintenance nightmare.\n\nThe `symfony/symfony` package should usually not get installed anyway.\n",
            "The thing is, this worked for me locally with `git archive`. So GitHub is doning some strange things. :-/\n",
            "I have contacted GitHub to see if they can make it consistent.\n",
            "Ah, maybe that's new then.\n\n```\n$ git --version\ngit version 1.7.12.2\n```\n",
            "For the record, GitHub have updated their git version and it is now working as intended.\n",
            "To add some context to this PR: On the master branch, this is now done through composer.\n",
            "Relevant commit: cacc88092945df1dd3ce9c87743467b401cfa5fe\n\nping @ManuelKiessling\n",
            "As per IRC, locale does not have autoloading for 2.1.\n",
            "Recommend used to exist but was removed.\n\n:+1:\n",
            "Sounds more like something mod_security (although in many cases it is too restrictive) should handle.\n",
            "Could also be simply:\n\n```\n$(function() {\n\n});\n```\n",
            "#4146 might also need a fix for this.\n",
            "I don't see how that's related. This PR does not deal with console output.\n",
            "Done. Tests currently failing due to failing master.\n",
            "I'm closing this PR as I'm not convinced this is the best approach.\n",
            "Any objections to changing the default to false and throw an exception if `$annotations && !class_exists('Doctrine\\Common\\Annotations\\AnnotationReader')`?\n",
            "Updated the ValidatorFactory to exclude annotations by default. However, this means it will fail if you pass it no arguments.\n",
            "New PR against master: #4290.\n",
            "This should use the new `require-dev` feature of composer.\n",
            "Gah, wanted to file this against 2.0.\n",
            "Perhaps it should use `--env`?\n",
            "\\o/\n",
            "I ran into some problems with the way this is implemented. The issues are related to transfer-encoding.\n\nFirst, it is not possible to force identity (the default) encoding, because StreamedResponse overrides it in any case. It should only set the encoding if none is set yet. Note: Even if it is explicitly set to identity and not overriden to chunked, apache will change it to  identity, chunked  because no content-length is set.\n\nNow this brings us to the second issue. When you send a transfer-encoding=chunked header, apache will expect the content to already be chunked. Of course this is not the case, and thus it does not work. Unless other webservers require it to be present, I would suggest simply not setting the transfer-encoding header. Since no content-length is set, the server should switch to chunked automatically.\n",
            "Nginx does not have that problem. But: Proposed solution confirmed working with nginx 1.0.5.\n",
            "2.0 just wasn't merged into master yet, that's all.\n",
            "Following dependencies do not have a composer.json yet: Twig, Doctrine (orm, dbal, common), swiftmailer.\n\nAlso missing from the standard edition: assetic, twig-extensions, jsm-metadata, SensioFrameworkExtraBundle, JMSSecurityExtraBundle, SensioDistributionBundle, SensioGeneratorBundle, AsseticBundle.\n\nThe point is, those can be added later on. Having the components composerized is already a leap forward. Also, doctrine depends on some symfony components, we've got to start somewhere.\n",
            "So, I've implemented all of @stof's suggestions, except (for reasons stated above):\n- doctrine to DoctrineBundle\n- swiftmailer to SwiftmailerBundle\n- twig to TwigBundle\n- doctrine-common to Validator\n- FrameworkBundle (what exactly does it depend on?)\n",
            "Wrong branch, trying again.\n",
            "Nice.\n\n`INTL_ICU_VERSION` is PHP 5.4 only, right?\n\nAlso, it may be possible to use:\n\n```\n$output = \\ReflectionExtension::export('intl', true);\n```\n\nThat way we can get rid of the output buffering.\n",
            "How about sticking this in an HttpKernel RequestListener?\n",
            "@marijn https://github.com/FriendsOfSymfony/RestBundle\n",
            "This is already supported. Look at Request::getContent().\n",
            "You probably also want to check if the content type is 'application/x-www-form-urlencoded' (or null?). As Johannes suggested, this should probably go in a RequestListener.\n\nKind of like is done in the RestBundle: https://github.com/FriendsOfSymfony/RestBundle/blob/master/Request/RequestListener.php except it will be in the FrameworkBundle.\n",
            "I pretty much agree with the points raised by Jordi. There is increased work with limited benefit. And in those places where it really matters we can always throw a specific exception.\n",
            "Yep, I saw that.\n",
            "Sounds like a good idea.\n\n@bschussek is there any reason why parse_url is not used in the UrlValidator?\n",
            "The only reason why I didn't use filter_var was because the host is part of a full URI regex. But if there is no problem with parse_url, I can easily refactor it.\n",
            "@jmikola Recent versions of `filter_var` (probably PHP 5.3+) support IPv6 just fine.\n",
            "Ok, so `filter_var` with `FILTER_VALIDATE_URL` doesn't support IPv6 addresses in URLs and seems limited in general. parse_url works, but does not really validate the URL, for example the tests cases caught 'http://google.com::aa' being parsed to a host name 'google.com:' -- not good.\n\nSo right now I'm sceptical as to whether either of these is a replacement for the regex.\n",
            "So any other suggestions?\n",
            "So `MockBuilder::disableArgumentCloning` would have been enough to fix this?\n\nEither way, me happy. Thanks alot!\n",
            "Ah, separate versioning. Thanks for the work guys, very much appreciated.\n",
            "Sorry, the pull request should have been to bschussek, I forgot to do  update commit range . So please disregard for now.\n",
            "Err, this is based on the fabpot branch, please pull into there.\n",
            "Have you considered a generic decorator compiler pass? Something like a generic version of [this](https://github.com/igorw/yolo/blob/master/src/Yolo/Compiler/ControllerResolverDecoratorPass.php). Could possibly even be extended with priorities.\n\nThe basic premise is that adding tags (metadata) is much more generic and requires less adjustments to loaders/dumpers/schemata than adding a new service attribute.\n\nI agree that if the intent of this feature is decoration, then that term should be used.\n",
            "Issue in symfony tracker (for those looking for it): https://github.com/symfony/symfony/issues/2531\n",
            "And for those wondering, the issue in symfony has now been fixed: https://github.com/symfony/symfony/pull/2617.\n",
            "Huge :+1:. I am surprised nobody brought this up yet. I mentioned it a few weeks ago on IRC and was about to create a ticket like this.\n\nCommand services can just be tagged with a console.command tag. The bundle system would need a couple changes to also fetch the commands from the DIC and exclude DIC commands from the convention-based discovery, but it should be doable.\n\n> BTW: I know that a command is not a real service (not stateless, and so), But it could be like controller as a service.\n\nI would actually say that a command _is_ stateless. It works exactly like a controller.\n",
            "Also just found [console-extra-bundle](https://github.com/seiffert/console-extra-bundle) by @seiffert.\n\nEDIT: @WouterJ I'm pretty sure the console.command tag was never in sf2 core.\n",
            "FYI, `PATH_INFO` comes from CGI. But since HttpFoundation is translating CGI back to HTTP, `path` may indeed make more sense.\n",
            "Oh, just noticed this is a duplicate of #125. However, my fix also adjusts the docblocks.\n",
            "Closing in favour of #175. (and no, I do not want to sign a CLA)\n",
            "Could check if `'cgi-fcgi' === php_sapi_name()`, but I woud avoid such a call in the Response directly, and set it in the front controller instead.\n\nEDIT: Or use some sort of response listener to do it.\n",
            "@alquerci did you verify that this is actually a problem? It might be an error in the PHP manual. See also [the cgi.rfc2616_headers ini setting](http://php.net/manual/en/ini.core.php#ini.cgi.rfc2616-headers).\n",
            "For the record, I don't think it's a good idea to add this kind of stuff to the response object directly. It's hard to test. Request and Response already have too much behaviour, adding even more is not going to help.\n",
            "What do you mean by  it does not exist ? How did you check for its existence?\n",
            "@alquerci how did you run it? on the command line? via php? php-cgi? php-cgi in fcgi mode?\n",
            "It shows up for my cgi-fcgi and is set to 0 (the default).\n",
            "I thought about this as well. I'm not a fully native speaker, but in my experience  insulate  mostly is used to contain heat or electricity within some place.\n\nI would agree that _isolate_ is more appropriate here.\n",
            "Why do you need to extend the request class? That really should not be necessary, the request should be treated like a value (i.e. data).\n",
            "IMO this patch is the lesser evil than introducing _yet another_ global var on the request, which could lead to strange side-effects. But I believe it can be vastly simplified by removing RequestFactoryInterface and replacing it with a callable that defaults to `Request::create`.\n\nJust my $0.02.\n",
            "Why do you need to extend the request class? That really should not be necessary, the request should be treated like a value (i.e. data).\n",
            "IMO this patch is the lesser evil than introducing _yet another_ global var on the request, which could lead to strange side-effects. But I believe it can be vastly simplified by removing RequestFactoryInterface and replacing it with a callable that defaults to `Request::create`.\n\nJust my $0.02.\n",
            "Did you install mongodb and start mongod?\n",
            "Please point me to where this is mentioned. Unless I'm misunderstanding the spec, it should be allowed.\n\n[7.2. Empty Nodes](http://www.yaml.org/spec/1.2/spec.html#id2786563) states that:\n\n```\n{\n  ? foo :\u00b0,\n  \u00b0: bar,\n}\n```\n\nShould resolve to:\n\n```\n%YAML 1.2\n---\n!!map {\n  ? !!str  foo  : !!null   ,\n  ? !!null      : !!str  bar ,\n}\n```\n\nWhere `\u00b0` is an empty value.\n",
            "A note about BC in relation to @beberlei's proposal: It might be possible to create a `ProxyRequest` which extends the Request, overrides all public methods to delegate to an internally stored request registry. There is some cost in terms of complexity/performance, but it could be done.\n",
            "The problem is that there can be sub-requests, and any service that depends on the request must be re-created for the scope of the sub-request. Then restored once the sub-request is completed. For this reason, any service that depends on any other request-scoped service must also be scoped to the request.\n\nLong story short, afaik scoping your subscriber to the  request  scope should fix the problem.\n",
            "@alexandresalome no, this is changing the generated code that will be run on every request ;-). But I agree that it's probably not worth it. Unless there is a benchmark proving _significant_ gains.\n",
            "The root cause of this is `EntityChoiceList::createIndex()` generating the index based on the entity id, which in this case is negative.\n",
            "To clarify the intent of the original PR: The idea is make the stable, zipped packages optimized for deployment. That means stripping out things like docs and tests that are not needed in production. When this is applied on a large scale, the savings are significant.\n\nOf course stable packages are also used in development, and as such having the documentation present can be very useful.\n\nFor the record, I have no problem reverting this. Stable packages != production; stripping out useless things in the deployment process is a sane approach. The fact that composer caches packages locally also helps for speed and bandwidth.\n\n:+1:\n",
            "I strongly agree with @Seldaek, the tests are not a public API and should not be depended on.\n",
            "As per the `stream_select` manpage it can return false when interrupted by a system call. That does not indicate that something is broken. However, I'm not sure if it is possible to distinguish between actual errors and interrupts without capturing and parsing the error message.\n",
            "Apart from the fact that overwriting the file will likely lead to problems (or slowdowns if flock is used), I don't really see the point of this. If you have an opcode cache, the whole classmap file will be cached in memory as opcodes anyway, so it will be very fast. Re-writing the file would in fact make it _slower_ because it needs to re-parse the file every time it changes.\n\nTLDR: I don't see the point, use APC and be happy.\n",
            "The error is most likely from the call to [DateTime::createFromFormat](http://php.net/manual/en/datetime.createfromformat.php). I don't know why this happens though.\n",
            "I propose we create a `Test` directory in addition to the `Tests` directory which is not excluded from the zips. This is consistent with the FrameworkBundle which has a Test and a Tests directory.\n",
            "I usually just use `$request->server->get('REQUEST_TIME')` for this directly.\n",
            "Looks like github is having some issues. There's not much we can do afaik.\n",
            "stream_select indeed does not accept negative timeout values. -1 is causing the stream_select call in `Symfony\\Component\\Process\\Process::start` to fail. There is no error displayed due to error suppression on the call.\n\nIs there any reason for the suppression? If anything, it should be removed.\n",
            "Caused by 7e3213cf3fcb9377b788c7ff8e3caac22b97d070 (PR #4434).\n",
            "With what value did it fail? Can you add a test case for that `HTTP_X_FORWARDED_FOR` value?\n",
            "You should probably use `__DIR__` to register the absolute directory name of your PEAR lib. Also, it should point to the directory containing `XML/RPC2`, so if that stuff were in `/vendor/XML/RPC2/Client.php`, you would have to specify: `__DIR__.'/../vendor'` as a path.\n",
            "Any objections to changing the default to false and throw an exception if `$annotations && !class_exists('Doctrine\\Common\\Annotations\\AnnotationReader')`?\n",
            "Updated the ValidatorFactory to exclude annotations by default. However, this means it will fail if you pass it no arguments.\n",
            "New PR against master: #4290.\n",
            "https://gist.github.com/4225207\n",
            "This is already an issue when trying to use a FilesystemIterator with the ftp stream wrapper. So maybe the fix is to remove this example from the docs and file the ticket to PHP.\n",
            "I tried adding that after the following lines in `Finder.php`:\n\n```\n$iterator = new \\RecursiveIteratorIterator(\n    new Iterator\\RecursiveDirectoryIterator($dir, $flags),\n    \\RecursiveIteratorIterator::SELF_FIRST\n);\n```\n\nBut it looks like one of those iterators depends on rewinding. The initial FTP connection succeeds, but then it just lists the first file twice and errors out again with the same error message.\n",
            "Ah, was using 2.1. Thanks!\n",
            "Fair enough ;-)\n",
            "It was YAML at the time.\n",
            "That's the point, it claims to make backups of files that don't exist. Sorry, the initial bug report was not clear enough.\n",
            "Please add a test for this.\n",
            "You need to set `X-Forwarded-Port` to `443` as well.\n",
            "This might be dangerous, `HTTP_HOST` is user input and can contain arbitrary data in some cases.\n",
            "Related: http://perfect-co.de/2011/02/why-http_host-is-evil/\n",
            "The problem is that then you have to either add `require` statements to all the class loader files or include two files just to get a class loader.\n",
            "You need to add a [Valid](http://symfony.com/doc/2.0/reference/constraints/Valid.html) constraint on the relation property.\n",
            "I heard about the issue with `readfile`, but found no further information about it. So I don't know if it still exists or even ever existed. EDIT: if you do find more about it, do tell.\n",
            "Having something like this in core might be nice, but then it really should support X-Sendfile. The problem is, I haven't really had time to dig into and document the differences of the various X-Sendfile implementations. Also, I don't know if fabpot would want that in core.\n",
            "Also, fabpot mentioned streaming responses at sfdaycgn, not sure how much that intersects with this. :)\n",
            "Yup, another resource for that is phpBB3's [functions_download](https://github.com/phpbb/phpbb3/blob/develop/phpBB/includes/functions_download.php#L218).\n",
            "In this case you would probably want to make an AcmeNewsBundle and an AcmeContactBundle.\n",
            "As of PHP 5.3, intl is a core extension, however it does not ship with OSX. Symfony ships with a stub re-implementation, so if you don't need advanced intl features you don't have to install the intl extension.\n\nYou app/autoload.php file should contain:\n\n```\n$loader->registerPrefixFallbacks(array(\n    __DIR__.'/../vendor/symfony/src/Symfony/Component/Locale/Resources/stubs',\n));\n```\n",
            "Confirmed working on 10.7.4. Cheers guys!\n"
        ],
        "issues": [
            {
                "title": "Correctly parse single-line @expectedException annotations",
                "body": ""
            },
            {
                "title": "returnCallback mutation of object arguments is broken",
                "body": "For some reason a `returnCallback` mocked method that mutates its arguments does not actually mutate them. I don't know the PHPUnit source code well enough to go debugging generated mocking code. However, I have made a failing test case for you.\n\n``` php\n<?php\n\nclass Thing\n{\n    private $type = 'normal';\n\n    public function mutate()\n    {\n        $this->type = 'mutant';\n    }\n\n    public function __toString()\n    {\n        return $this->type;\n    }\n}\n\nclass Mutator\n{\n    public function doMutation(Thing $thing)\n    {\n        $thing->mutate();\n    }\n}\n\nclass ReturnCallbackMutationBorkedTest extends PHPUnit_Framework_TestCase\n{\n    /** @test */\n    public function minimalTestCaseGood()\n    {\n        $thing = new Thing();\n\n        $mutator = new Mutator();\n\n        $before = (string) $thing;\n        $mutator->doMutation($thing);\n        $after = (string) $thing;\n\n        $this->assertSame('normal', $before);\n        $this->assertSame('mutant', $after);\n    }\n\n    /** @test */\n    public function minimalTestCaseBad()\n    {\n        $thing = new Thing();\n\n        $mutator = $this->getMock('Mutator', array('doMutation'));\n        $mutator\n            ->expects($this->once())\n            ->method('doMutation')\n            ->with($this->isInstanceOf('Thing'))\n            ->will($this->returnCallback(function ($thing) {\n                $thing->mutate();\n            }));\n\n        $before = (string) $thing;\n        $mutator->doMutation($thing);\n        $after = (string) $thing;\n\n        $this->assertSame('normal', $before);\n        $this->assertSame('mutant', $after);\n    }\n}\n```\n\nNote: It may very well be a PHP bug, but I'm going to blame PHPUnit until it proves itself innocent.\n\nCheers!\n"
            },
            {
                "title": "do a putenv for <env> config (closes #386)",
                "body": ""
            },
            {
                "title": "<php> <env> does not call putenv",
                "body": "The env tag in phpunit.xml sets the `$_ENV` key correctly, but does not call putenv. As a result, getenv() will not get the expected value.\n"
            },
            {
                "title": "Fix http-kernel dep in symfony/security",
                "body": "The current constraint will not match 2.3.x-dev and cause edge cases\nwhere either:\n- composer falls back to symfony/symfony because it cannot find a match\n- composer installs 2.2 versions of http-kernel and http-foundation\n"
            },
            {
                "title": "[2.2][Yaml] Blank values should resolve to null",
                "body": "The following syntax was valid in 2.1, and should be valid according to the YAML spec:\n\n```\ndb.options:\n  password:\nmyproject.test:\n  param2:  456 \n```\n\nHowever, since 2.2 this throws a `Symfony\\Component\\Yaml\\Exception\\ParseException`: Indentation problem in  file.yml  at line 2 (near  password: ).\n\nIMO this should be fixed. Or if the BC break was intentional, it should be documented.\n"
            },
            {
                "title": "Remove array type hint from GetResponseForControllerResultEvent::setControllerResult()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nI don't see a good reason to limit responses to arrays. The method was introduced in 2.2, so there is no real BC break.\n"
            },
            {
                "title": "[DependencyInjection] Allow frozen containers to be dumped to graphviz (2.1 merge)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThis is the 2.1 merge for #7017 with an addition for 2.1 specifically.\n\n> Note: The diff currently still contains commits from `2.0` which are not in `2.1` yet.\n"
            },
            {
                "title": "[DependencyInjection] Allow frozen containers to be dumped to graphviz",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThis PR replaces #7010.\n"
            },
            {
                "title": "[2.3][DependencyInjection] Allow frozen containers to be dumped to graphviz",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n"
            },
            {
                "title": "Correct comment in NativeSessionStorage regarding session.save_handler",
                "body": "It's save_handler, not save_handlers.\n"
            },
            {
                "title": "[2.3][TwigBundle] Use display instead of visibility for exception page icons",
                "body": "Originally spawned from #6612, this allows us to get rid of the ugly margins for the open and close icons on the exception page.\n"
            },
            {
                "title": "[2.3][TwigBundle] Add plain-text stack trace to exception page",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis is very useful for support. Today I asked somebody for a stack trace on IRC. I don't want screenshots, I want text. And there is currently no easy way to get it.\n\nThis patch adds a text-based stack trace to the exception page. The box is at the very bottom of the page and it is collapsed by default.\n\nScreen shot:\n\n![Screen Shot 2013-01-08 at 4 04 45 AM](https://f.cloud.github.com/assets/88061/49092/315c5b76-5940-11e2-8865-cf4e86fbfd1e.png)\n"
            },
            {
                "title": "[TwigBundle] There is no CSS visibility of display, should be visible instead",
                "body": ""
            },
            {
                "title": "[HttpKernel] Clarify misleading comment in ExceptionListener",
                "body": "Regression from 295860dfaf474604f242198ee487bc8c8045b8ae.\n"
            },
            {
                "title": "[2.0][DomCrawler] Resolve relative URIs from Links",
                "body": "Bug fix: kind of\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nThis is useful when using DomCrawler and HttpKernel\\Client with an\nHttpKernel that does not support relative requests to URIs.\n\nPlease check extensively and suggest additional test cases to ensure nothing is broken. Suggestions to simplify the algorithm are welcome.\n\nIf desired I can re-file against 2.1 or 2.2. But IMO this is a bugfix and as such belongs in 2.0.\n"
            },
            {
                "title": "[Propel1Bridge] Fix  and => &&  CS in ModelChoiceList",
                "body": ""
            },
            {
                "title": "[Console] Allow any callable to be passed to Command::setCode",
                "body": "Bug fix: no\nFeature addition: kinda\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n"
            },
            {
                "title": "Make YamlFileLoader and XmlFileLoader file loading extensible",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\nDocumentation PR: not needed\n\nFor phpBB we want to use a non-dumped container in the dev env to prevent having to clear the cache all the time. We're creating the container twice because we need some information at compile time which must be fetched from the container. The process is as follows:\n\nCreate temp container, get list of installed extensions (think bundles), create a compiler pass with the extensions list, create a new container with that compiler pass, compile it, dump it.\n\nThe problem is that we need to load and parse the YAML twice which is really slow. Caching it in the YamlFileLoader should save 50-100ms per page load.\n\nBy changing visibility to protected it becomes possible to extend the loader and cache file contents. \n"
            },
            {
                "title": "Change monolog require-dev to use the branch alias instead of dev-master",
                "body": "Ping @seldaek\n"
            },
            {
                "title": "[2.1] Exclude tests from zips via gitattributes",
                "body": "See also: [Composer - Light-weight distribution packages](http://getcomposer.org/doc/02-libraries.md#light-weight-distribution-packages).\n"
            },
            {
                "title": "[2.1] Fix SessionHandlerInterface autoloading",
                "body": "The path for 2.1 is also incorrect. For master, this was fixed in 3b47088c582f8ac9f969967380a8c5d8e97b47b8. This patch adds the `target-dir` prefix to the autoloading base directory of the HttpFoundation stubs.\n\nNote: Issue only affects 2.1, but it probably means `symfony/http-foundation` never worked on PHP 5.3.\n"
            },
            {
                "title": "[composer] The 2.2 branch should replace packages of version 2.2.*, not 2.1.*",
                "body": ""
            },
            {
                "title": "[Validator] Move doctrine/common dependency from require to suggest",
                "body": "`doctrine/common` is only used for the annotations, so it should be made optional.\n"
            },
            {
                "title": "[Console] Array default values should not use var_export",
                "body": "The code for printing default values of input options is:\n\n```\n$default = sprintf('<comment> (default: %s)</comment>', is_bool($argument->getDefault()) || is_array($argument->getDefault()) ? str_replace( \\n , '', var_export($argument->getDefault(), true)): $argument->getDefault());\n```\n\nThe use of `var_export` for arrays is not a good choice, as it produces quite verbose and unreadable output:\n\n```\nvar_export(array('foo'));\n```\n\nProduces:\n\n```\narray (  0 => 'foo',)\n```\n\nBetter would be:\n\n```\narray( foo )\n```\n\nOr even:\n\n```\n[  foo  ]\n```\n"
            },
            {
                "title": "[2.2] [output-stream] Refactor StreamingResponse implementation to use an OutputStream",
                "body": "This makes it possible to write through other channels than stdout. Using stdout will still work for  normal  webservers however.\n"
            },
            {
                "title": "[Validator] Move doctrine/common dependency from require to suggest",
                "body": "`doctrine/common` is only used for the annotations, so it should be made optional.\n"
            },
            {
                "title": "[DependencyInjection] Support Yaml calls without arguments",
                "body": ""
            },
            {
                "title": "[DependencyInjection] Support Yaml calls without arguments",
                "body": ""
            },
            {
                "title": "[2.0][Finder] Iteration fails with non-rewindable streams",
                "body": "The [finder docs](http://symfony.com/doc/current/components/finder.html) mention iterating over an FTP stream, like so:\n\n```\n$finder->in('ftp://example.com/pub/');\n```\n\nTurns out, this does not work. It errors out with:\n\n> [ErrorException]\n> Warning: FilesystemIterator::rewind(): stream does not support seeking in foo.php line 42\n\nOther stream wrappers may be affected as well.\n\nLooks like @krachot already mentioned this [somewhere](https://gist.github.com/796637) a year ago.\n"
            },
            {
                "title": "doctrine:generate:entities removes trailing newline",
                "body": "Certain editors, such as VIM, always add a trailing newline to files by default. It would make sense to not remove it every time the command is run.\n"
            },
            {
                "title": "doctrine:generate:entities lies about backups",
                "body": "When initially generating entities from mapping data, the command falsely claims to create backups, but the files do not exist.\n"
            },
            {
                "title": "Auto-select bundle in doctrine commands if only one has entities",
                "body": "If only one bundle has entities available, it should be auto-selected.\n\ne.g. `doctrine:generate:entities`, `doctrine:mapping:import`\n"
            },
            {
                "title": "[json-response] Add a JsonResponse class for convenient JSON encoding",
                "body": "Usage example:\n\n```\n$data = array(user => $user->toArray());\nreturn new JsonResponse($data);\n```\n"
            },
            {
                "title": "[2.1] Transport agnostic HTTP streaming",
                "body": "About a month ago streaming responses (#2935) landed in master. My concern with the current implementation is that it has no transport abstraction. It will always assume a CGI-like environment where echo delivers to the client.\n\nThe most important feature of Symfony2 is the HTTP abstraction it provides. Ideally we would have streaming supported in this abstraction as well. This would allow using Symfony2 with other web servers, such as [AiP](https://github.com/indeyets/appserver-in-php) or [mongrel2](http://mongrel2.org/).\n\nI have started some work on this in my [output-stream](https://github.com/igorw/symfony/compare/output-stream) branch. @fabpot if you like this approach it would be great if you could complete it, as I really don't have the time right now.\n"
            },
            {
                "title": "[HttpFoundation] Do not set a Transfer-Encoding header of chunked for streaming responses",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThis is an adjustment to the streaming introduced in #2935.\n\nApache expects the response to already be in chunked format when the Transfer-Encoding header is set to chunked, which causes it to not deliver the streamed body.\n\nIf no Content-Length is set on the response (regardless of Transfer-Encoding), web servers will automatically switch to chunked Transfer-Encoding, and handle the chunking for you.\n\nI have tested this with Apache 2.2.2 and nginx 1.0.5. Testing with other webservers is appreciated.\n"
            },
            {
                "title": "[TwigBundle] Do not clean output buffering below initial level",
                "body": "This resulted in issues with PHPUnit 3.6, which will buffer all output and clean them in the end. Since\nwe cleaned their buffer, the subsequent clean would raise a warning. This is documented in [issue 390](https://github.com/sebastianbergmann/phpunit/issues/390) of\nthe PHPUnit tracker.\n\nCloses #2531.\n\nThis also affects FOSRestBundle's ExceptionController /cc @lsmith.\n"
            },
            {
                "title": "replace occurences of  an UserInteface  with  a UserInterface ",
                "body": ""
            },
            {
                "title": "Composer update",
                "body": "Add doctrine and twig dependencies (they are now on packagist.org), move doctrine requires to recommends, add twig-bridge require to twig-bundle.\n\nPer @stof, symfony 2.1 (master) will need doctrine to be updated to 2.2-dev.\n"
            },
            {
                "title": "Composer",
                "body": "This PR adds a composer.json file for [composer](https://github.com/composer/composer) ([more info](packagist.org/about-composer)).\n\nFor discussion you can also go into #composer-dev on freenode and argue with naderman, seldaek and everzet.\n"
            },
            {
                "title": "Composer",
                "body": "This PR adds a composer.json file for [composer](https://github.com/composer/composer) ([more info](packagist.org/about-composer)).\n\nFor discussion you can also go into #composer-dev on freenode and argue with naderman, seldaek and everzet.\n"
            },
            {
                "title": "[EventDispatcher] Change the license of EventDispatcher from LGPL to MIT",
                "body": "It was previously agreed to re-license the Doctrine2 based\nEventDispatcher refactoring to use the MIT license. However, the files\nstill retain the LGPL license notice.\n\nThis commit changes the license to MIT.\n"
            },
            {
                "title": "[HttpFoundation] Fix FileException checking in FileTest",
                "body": "It's better to check the actual method call for exceptions. In this case, the cleanup was not happening (leaving behind test files) because the exception exited early from the test.\n"
            },
            {
                "title": "Make Templating Engine $globals optional",
                "body": ""
            },
            {
                "title": "IPv6",
                "body": "Adding support for IPv6. Please let me know if I missed anything. Also, I'm by no means a IPv6 expert, so review from somebody who is would be great.\n"
            },
            {
                "title": "[FrameworkBundle] fix addCompilerPass typo",
                "body": "adDcompilerPass should be addCompilerPass\n"
            },
            {
                "title": "[Locale] IntlDateFormatter",
                "body": ""
            },
            {
                "title": "[DependencyInjection]  freezed  should be  frozen  in comment",
                "body": ""
            },
            {
                "title": "jnunemaker-validatable not ruby 1.9 compatible",
                "body": "There may be more ruby 1.9 incompatibilities.\n"
            },
            {
                "title": "LH#2988 authenticity_token option for form_tag",
                "body": "https://rails.lighthouseapp.com/projects/8994/tickets/2988-authenticity_token-option-for-form_tag\n"
            },
            {
                "title": "PLT-Racket failed to build on 10.8",
                "body": "```\n$ brew install plt-racket\n==> Downloading https://github.com/plt/racket/tarball/v5.2\nAlready downloaded: /Library/Caches/Homebrew/plt-racket-5.2.tgz\n==> ./configure --enable-xonx --enable-shared --prefix=/usr/local/Cellar/plt-rac\n==> make\n==> Installing may take a long time (~40 minutes)\n==> make install\nraco setup: 1 running: games/cards/cards.scrbl\nraco setup: 3 running: datalog/scribblings/datalog.scrbl\nraco setup: 2 running: browser/browser.scrbl\nmake[1]: *** [install-3m] Trace/BPT trap: 5\nmake: *** [install] Error 2\n\nREAD THIS: https://github.com/mxcl/homebrew/wiki/troubleshooting\n```\n\nOSX 10.8.2.\n"
            },
            {
                "title": "New gnu-prolog: 1.4.1",
                "body": "The current version of gnu-prolog is resulting in a 404.\n\nThe patches need to be updated for this new version.\n"
            }
        ],
        "pr_comments": [
            "agreed, immutable please.\n",
            "Then make it private?\n",
            "While `AdapterInterface` is not part of the publically tagged API, this constitutes a BC break and should be documented accordingly if it cannot be avoided.\n",
            "Remove leading backslash.\n",
            "Move opening brace to next line.\n",
            "parent is usually called first.\n",
            "+1, please remove the type hint\n",
            "I disagree, which is why I suggested moving from a switch-case to this array in the original PR.\n",
            "This needs to do an `isset` on the `$error[$errorCode]`, otherwise there will be a notice.\n",
            "Should be `$maxFilesize`.\n",
            "A switch is more fragile than an array. It depends on state mutations to  return  a value. It produces much more code than using an array (3 lines per item). There's more noise when reading it. You need to beware of the `break` statements.\n\nI hope those reasons convince you. I really don't want to have a bikeshedding discussion over this.\n",
            "Is this duplication intentional? To verify that `getCurrentRequest` does not mutate anything?\n",
            "This could probably be refactored into an associative array. It might also be worthwhile to move the error message generation into a separate (private) method.\n",
            "Extract method for `escapeToken`?\n",
            "Wouldn't it be a lot simpler if the application text descriptor itself were responsible for rendering its elements? I think it would simplify the design and lead to less implicit dependency on the order of the descriptors.\n",
            "You are configuring, then adding the descriptors. This means the configuration will not be applied to them at all. Is that intentional?\n",
            "Ah, I see. Missed that part. :)\n",
            "propagators? s/e/o\n",
            "Maybe `addJsonCsrfPrefix()` since re-typing `while(1);` into controllers is kind of annoying.\n",
            "`setPrefix()` without an argument?\n",
            "Casing should be consistent here.\n",
            "Shouldn't it be getting `'Content-Type'`?\n",
            "It is a matter of consistency. While `headers->get` usage is generally a bit inconsistent, `Content-Type` appears to be the most commonly used notation, which makes sense, as it is how the HTTP RFC defines it.\n",
            "You should add some context as to why it is marked as public to avoid confusion.\n",
            "Naming could be improved for `$e`, perhaps `$stopwatchEvent`?\n",
            "This is more explicit as it verifies exactly where the notice occurs.\n",
            "This will indeed be a problem. Is there any way to know if we are handling a sub-request at this point?\n",
            "The idea was to allow async execution where the callback closes the stream later on. But since that doesn't really work properly with HttpKernel it makes sense to close it.\n",
            ":)\n",
            "CS: this should probably be unindented.\n",
            "Sorry, I meant:\n\n```\nreturn array(\n    'pre.foo' => array('preFoo', 10),\n    'post.foo' => array('postFoo'),\n);\n```\n",
            "Done.\n",
            "FYI, `--dev` is not related to stability, it's related to `require-dev` only. Confusing, I know, but two separate concepts with similar terminology.\n",
            "Strange indentation?\n",
            "I was referring to the tab.\n",
            "Double negative -- $valid might be more logical.\n",
            "CS\n",
            "agreed, immutable please.\n",
            "Then make it private?\n",
            "agreed, immutable please.\n",
            "Then make it private?\n",
            "agreed, immutable please.\n",
            "Then make it private?\n",
            "While `AdapterInterface` is not part of the publically tagged API, this constitutes a BC break and should be documented accordingly if it cannot be avoided.\n",
            "While `AdapterInterface` is not part of the publically tagged API, this constitutes a BC break and should be documented accordingly if it cannot be avoided.\n",
            "While `AdapterInterface` is not part of the publically tagged API, this constitutes a BC break and should be documented accordingly if it cannot be avoided.\n",
            "While `AdapterInterface` is not part of the publically tagged API, this constitutes a BC break and should be documented accordingly if it cannot be avoided.\n",
            "In CGI, the `CONTENT_TYPE` var has no `HTTP_` prefix.\n",
            "I disagree, which is why I suggested moving from a switch-case to this array in the original PR.\n",
            "This needs to do an `isset` on the `$error[$errorCode]`, otherwise there will be a notice.\n",
            "Should be `$maxFilesize`.\n",
            "A switch is more fragile than an array. It depends on state mutations to  return  a value. It produces much more code than using an array (3 lines per item). There's more noise when reading it. You need to beware of the `break` statements.\n\nI hope those reasons convince you. I really don't want to have a bikeshedding discussion over this.\n",
            "Strange indentation?\n",
            "I was referring to the tab.\n",
            "Double negative -- $valid might be more logical.\n",
            "CS\n"
        ],
        "prs": [
            {
                "title": "Bug 7193",
                "body": "Fix for ticket 7193: http://bugs.jquery.com/ticket/7193\n\nRelevant discussion: https://forum.jquery.com/topic/magic-number\n"
            },
            {
                "title": "Fix http-kernel dep in symfony/security",
                "body": "The current constraint will not match 2.3.x-dev and cause edge cases\nwhere either:\n- composer falls back to symfony/symfony because it cannot find a match\n- composer installs 2.2 versions of http-kernel and http-foundation\n"
            },
            {
                "title": "Remove array type hint from GetResponseForControllerResultEvent::setControllerResult()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nI don't see a good reason to limit responses to arrays. The method was introduced in 2.2, so there is no real BC break.\n"
            },
            {
                "title": "[DependencyInjection] Allow frozen containers to be dumped to graphviz (2.1 merge)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThis is the 2.1 merge for #7017 with an addition for 2.1 specifically.\n\n> Note: The diff currently still contains commits from `2.0` which are not in `2.1` yet.\n"
            },
            {
                "title": "[DependencyInjection] Allow frozen containers to be dumped to graphviz",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n\nThis PR replaces #7010.\n"
            },
            {
                "title": "[2.3][DependencyInjection] Allow frozen containers to be dumped to graphviz",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| License | MIT |\n"
            },
            {
                "title": "Correct comment in NativeSessionStorage regarding session.save_handler",
                "body": "It's save_handler, not save_handlers.\n"
            },
            {
                "title": "[2.3][TwigBundle] Use display instead of visibility for exception page icons",
                "body": "Originally spawned from #6612, this allows us to get rid of the ugly margins for the open and close icons on the exception page.\n"
            },
            {
                "title": "[2.3][TwigBundle] Add plain-text stack trace to exception page",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis is very useful for support. Today I asked somebody for a stack trace on IRC. I don't want screenshots, I want text. And there is currently no easy way to get it.\n\nThis patch adds a text-based stack trace to the exception page. The box is at the very bottom of the page and it is collapsed by default.\n\nScreen shot:\n\n![Screen Shot 2013-01-08 at 4 04 45 AM](https://f.cloud.github.com/assets/88061/49092/315c5b76-5940-11e2-8865-cf4e86fbfd1e.png)\n"
            },
            {
                "title": "[TwigBundle] There is no CSS visibility of display, should be visible instead",
                "body": ""
            },
            {
                "title": "[HttpKernel] Clarify misleading comment in ExceptionListener",
                "body": "Regression from 295860dfaf474604f242198ee487bc8c8045b8ae.\n"
            },
            {
                "title": "[2.0][DomCrawler] Resolve relative URIs from Links",
                "body": "Bug fix: kind of\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n\nThis is useful when using DomCrawler and HttpKernel\\Client with an\nHttpKernel that does not support relative requests to URIs.\n\nPlease check extensively and suggest additional test cases to ensure nothing is broken. Suggestions to simplify the algorithm are welcome.\n\nIf desired I can re-file against 2.1 or 2.2. But IMO this is a bugfix and as such belongs in 2.0.\n"
            },
            {
                "title": "[Propel1Bridge] Fix  and => &&  CS in ModelChoiceList",
                "body": ""
            },
            {
                "title": "[Console] Allow any callable to be passed to Command::setCode",
                "body": "Bug fix: no\nFeature addition: kinda\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n"
            },
            {
                "title": "Make YamlFileLoader and XmlFileLoader file loading extensible",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\nDocumentation PR: not needed\n\nFor phpBB we want to use a non-dumped container in the dev env to prevent having to clear the cache all the time. We're creating the container twice because we need some information at compile time which must be fetched from the container. The process is as follows:\n\nCreate temp container, get list of installed extensions (think bundles), create a compiler pass with the extensions list, create a new container with that compiler pass, compile it, dump it.\n\nThe problem is that we need to load and parse the YAML twice which is really slow. Caching it in the YamlFileLoader should save 50-100ms per page load.\n\nBy changing visibility to protected it becomes possible to extend the loader and cache file contents. \n"
            },
            {
                "title": "Change monolog require-dev to use the branch alias instead of dev-master",
                "body": "Ping @seldaek\n"
            },
            {
                "title": "[2.1] Exclude tests from zips via gitattributes",
                "body": "See also: [Composer - Light-weight distribution packages](http://getcomposer.org/doc/02-libraries.md#light-weight-distribution-packages).\n"
            },
            {
                "title": "[2.1] Fix SessionHandlerInterface autoloading",
                "body": "The path for 2.1 is also incorrect. For master, this was fixed in 3b47088c582f8ac9f969967380a8c5d8e97b47b8. This patch adds the `target-dir` prefix to the autoloading base directory of the HttpFoundation stubs.\n\nNote: Issue only affects 2.1, but it probably means `symfony/http-foundation` never worked on PHP 5.3.\n"
            },
            {
                "title": "[composer] The 2.2 branch should replace packages of version 2.2.*, not 2.1.*",
                "body": ""
            },
            {
                "title": "[Validator] Move doctrine/common dependency from require to suggest",
                "body": "`doctrine/common` is only used for the annotations, so it should be made optional.\n"
            },
            {
                "title": "[2.2] [output-stream] Refactor StreamingResponse implementation to use an OutputStream",
                "body": "This makes it possible to write through other channels than stdout. Using stdout will still work for  normal  webservers however.\n"
            },
            {
                "title": "[Validator] Move doctrine/common dependency from require to suggest",
                "body": "`doctrine/common` is only used for the annotations, so it should be made optional.\n"
            },
            {
                "title": "[DependencyInjection] Support Yaml calls without arguments",
                "body": ""
            },
            {
                "title": "[DependencyInjection] Support Yaml calls without arguments",
                "body": ""
            },
            {
                "title": "[json-response] Add a JsonResponse class for convenient JSON encoding",
                "body": "Usage example:\n\n```\n$data = array(user => $user->toArray());\nreturn new JsonResponse($data);\n```\n"
            },
            {
                "title": "[HttpFoundation] Do not set a Transfer-Encoding header of chunked for streaming responses",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThis is an adjustment to the streaming introduced in #2935.\n\nApache expects the response to already be in chunked format when the Transfer-Encoding header is set to chunked, which causes it to not deliver the streamed body.\n\nIf no Content-Length is set on the response (regardless of Transfer-Encoding), web servers will automatically switch to chunked Transfer-Encoding, and handle the chunking for you.\n\nI have tested this with Apache 2.2.2 and nginx 1.0.5. Testing with other webservers is appreciated.\n"
            },
            {
                "title": "[TwigBundle] Do not clean output buffering below initial level",
                "body": "This resulted in issues with PHPUnit 3.6, which will buffer all output and clean them in the end. Since\nwe cleaned their buffer, the subsequent clean would raise a warning. This is documented in [issue 390](https://github.com/sebastianbergmann/phpunit/issues/390) of\nthe PHPUnit tracker.\n\nCloses #2531.\n\nThis also affects FOSRestBundle's ExceptionController /cc @lsmith.\n"
            },
            {
                "title": "replace occurences of  an UserInteface  with  a UserInterface ",
                "body": ""
            },
            {
                "title": "Composer update",
                "body": "Add doctrine and twig dependencies (they are now on packagist.org), move doctrine requires to recommends, add twig-bridge require to twig-bundle.\n\nPer @stof, symfony 2.1 (master) will need doctrine to be updated to 2.2-dev.\n"
            },
            {
                "title": "Composer",
                "body": "This PR adds a composer.json file for [composer](https://github.com/composer/composer) ([more info](packagist.org/about-composer)).\n\nFor discussion you can also go into #composer-dev on freenode and argue with naderman, seldaek and everzet.\n"
            },
            {
                "title": "Composer",
                "body": "This PR adds a composer.json file for [composer](https://github.com/composer/composer) ([more info](packagist.org/about-composer)).\n\nFor discussion you can also go into #composer-dev on freenode and argue with naderman, seldaek and everzet.\n"
            },
            {
                "title": "[EventDispatcher] Change the license of EventDispatcher from LGPL to MIT",
                "body": "It was previously agreed to re-license the Doctrine2 based\nEventDispatcher refactoring to use the MIT license. However, the files\nstill retain the LGPL license notice.\n\nThis commit changes the license to MIT.\n"
            },
            {
                "title": "[HttpFoundation] Fix FileException checking in FileTest",
                "body": "It's better to check the actual method call for exceptions. In this case, the cleanup was not happening (leaving behind test files) because the exception exited early from the test.\n"
            },
            {
                "title": "Make Templating Engine $globals optional",
                "body": ""
            },
            {
                "title": "IPv6",
                "body": "Adding support for IPv6. Please let me know if I missed anything. Also, I'm by no means a IPv6 expert, so review from somebody who is would be great.\n"
            },
            {
                "title": "[FrameworkBundle] fix addCompilerPass typo",
                "body": "adDcompilerPass should be addCompilerPass\n"
            },
            {
                "title": "[Locale] IntlDateFormatter",
                "body": ""
            },
            {
                "title": "[DependencyInjection]  freezed  should be  frozen  in comment",
                "body": ""
            },
            {
                "title": "Optimize autoload prefix in composer.json",
                "body": "By having more specific autoload prefixes it is possible to reduce the number of stat calls made.\n"
            },
            {
                "title": "[Soap] Fix the class name of Reflection in AutoDiscover",
                "body": ""
            },
            {
                "title": "Correctly parse single-line @expectedException annotations",
                "body": ""
            },
            {
                "title": "do a putenv for <env> config (closes #386)",
                "body": ""
            },
            {
                "title": "LH#2988 authenticity_token option for form_tag",
                "body": "https://rails.lighthouseapp.com/projects/8994/tickets/2988-authenticity_token-option-for-form_tag\n"
            }
        ]
    },
    "183678": {
        "repos": [
            "Open Source, Distributed, RESTful Search Engine",
            "The Symfony2 PHP framework (PHP 5.3 only -- not yet stable) -- documentation for master is at http://symfony.com/doc/2.0/",
            "The PHP Unit Testing framework."
        ],
        "commit_comments": [
            "That's cool, but ideally license should be set to MIT. We try to stick to [SPDX](http://spdx.org/content/license-list) license identifiers for uniformity.\n",
            "Well holy shit, awesome!\n",
            " Redis ran out of memory, aborting ? :) No big deal, your version is definitely understandable but `for` there is a bit weird.\n",
            "OK, so the version check should be 5.4.12 / 5.3.22 / 5.5.0, I'll update the related issue. Thanks.\n",
            "It's possible to override in composer by requiring ` php : 5.3.3 as 5.3.4 ` - then again that only works on a machine with 5.3.3 on it, so it maybe does more harm than good to have that in your composer.json. Alienating RHEL/CentOS/Debian sounds a bit harsh though. Also this means third parties using components like Composer can not require 5.3.3 anymore. Well we can but we can't run tests on 5.3.3 because travis won't install the vendors. We only use Console, Finder & Process. I don't know which components really require 5.3.4, but it would be great to have more granularity than  5.3.4 for all .\n",
            "One of them seems to link it to the enable_gc setting though, so we may\nsay that on 5.3.3, you should disable gc if you want to avoid problems.\n",
            "Fair enough, I missed that. I'm still curious to see what the reaction\nof the broader user base will be if it's announced in a blog post though.\n",
            "If you extended the class ok, you won't benefit from the optional logging until you update your ctor, but that's just the log part, the behavior still works. Not a huge deal IMO, but feel free to send a PR to fix this if you get the setter stuff to work @stof.\n",
            "Many people don't know that, so it's good to mention it.\n",
            "That should maybe be `if ( \\t  === ltrim($this->currentLine, ' '))` though, to account for mixed tab/space indentation, like:\n\n```\n  \\tfoo: bar\n```\n",
            "Late congrats from the beach in Italy.. Finally found some open wifi :)\n",
            "Can you try this in your shell?\n\n```\n$ php -r 'var_dump(STDIN);'\n```\n\nIt should output `resource(1) of type (stream)`. If not, please try `php -r 'var_dump(PHP_SAPI);'`. If it's not CLI, then maybe your setup is a bit weird and you are running the CGI version in your CLI?\n",
            "Well, I suppose this part of the patch (the move from ternary operator to setting STDIN as default) should be reverted. If there is no alternative inputStream specified though, it will keep failing. Can you check if that's the case and submit a PR if this fixes your problem?\n",
            "Well, I think you need to revert the change at line 23, and then at line 38 needs to be like this:\n\n```\n $ret = fgets($this->inputStream ?: STDIN, 4096);\n```\n\nThat way if inputstream is configured (let's hope so), you shouldn't see the notice.\n",
            "Great, thanks\n",
            ":+1:\n",
            "This is a good change, but I think the name proxy isn't explicit enough for something that has security relevance. `allow_proxy_headers` or `trust_proxy_headers` would maybe be more explicit as to the weight that value carries.\n",
            "But it's inferior to the new GeneratorBundle, which will be present in the standard distribution, so it's best to keep the FrameworkBundle slim imo.\n",
            "Meh, ok. I'll do another PR that hopefully fixes that.\n",
            "@Partugal: With this hopefully it works for you: https://github.com/symfony/symfony/pull/1390 - please confirm if possible.\n",
            "Why did this happen exactly? It's a bit strange that some bundles remain in the main repo while some others are out. IMO if it's out it shouldn't be under the Symfony namespace anymore.\n",
            "Well why did this not happen with the SecurityBundle then? I think it\nwas an even bigger issue to have it on a different release cycle.\n\nAs for PRs, everyone has to deal with it, I don't see the problem, or\nwhy AsseticBundle is unique in that regard.\n\nIMO all bundles should move out of the core repo, or this one should\nhave another namespace, but the current situation is confusing.\n",
            "@beberlei: Agreed, althoguh now that the APIs are (tentatively?) stable,\nthere shouldn't be major breaks anymore that require commits in many\nparts of the code at once.\n\n@schmittjoh: Agreed as well, it's not ideal to manage, but again I don't\nreally mind which way it goes, I just wonder why there are two ways\nright now.\n",
            "I think a better way would be\n\n```\nsystem(sprintf('cd %s && git fetch origin && git reset --hard %s', escapeshellarg($installDir), $rev));\n```\n",
            "One thing we could do is, if bypass_shell is true, try to resolve relative binary paths with the PATH in $_SERVER['PATH']. Would that help?\n",
            "Can you try to work on a PR to fix this?\n",
            "@stof: I told you so :p (https://github.com/symfony/symfony/pull/818)\n\nBut then again, @fabpot agreed to merge this as is, and I guess he's the one that wrote the Twig bridge, so it'd be nice to have a common agreement here.\n",
            "This was an error, it shouldn't have been merged, encoders should normalize when/if needed.\n",
            "Maybe it should be on the error pages too, though I kinda doubt google indexes 404 pages.\n",
            "@fabpot: What about killing the schema dir as well? The xsds are sitting all lonely in there :)\n\n@beberlei: This really should be cached anyway, and if it's cached, it doesn't really matter how expensive it is to parse. I reckon this may not be done by every user, but let's say that those that don't care to cache anything probably won't notice or mind the little extra parsing hit.\n",
            "parse error :)\n",
            "Setting log_errors to false fixed it for me on windows, see https://github.com/symfony/symfony/commit/d05c59227d4c6f6e27d3556f0034d456b5a4a713 - I'm not sure why the error_log is still necessary for you if the logging is disabled though.\n",
            "Nevermind that, I got what happened now, when I patched it to turn of the log_errors, it worked because it didn't change the error_log anymore, so it was just happily logging in my usual error_log. Sending to `nul` really fixes it. PR coming.\n",
            "Meh, thanks, I looked for such a test but it doesn't seem to be listed in the twig docs.\n",
            "Sorry about that.. I will get myself a proper test app next time.\n",
            "@Gollam: Did you update monolog as well? Seemed to work fine here.\n",
            "D\u00e9j\u00e0 vu.\n\nI could think of ways where if you don't have an executable you try to resort to some crappy php emulation of whatever you were trying to do with an exec() call.\n",
            "I don't see why it can't end with a '/', well of course it makes it easier to be sure that the next nested prefix starts with a slash, but I'd prefer explicitness here. Type /prefix, or /prefix/, or whatever you want, but if there is no / at the beginning of the URL, there should be an error.\n",
            "Well ok, all I'm saying is it should throw an error if there is no leading slash, and if there is a trailing slash, instead of silently fixing it. Otherwise the routing file looks like a mess.\n",
            "Well I think that `prefix: foo` when you really mean `prefix: /foo` looks a bit messy. You specify urls, it should look like urls.\n",
            "Yeah! Another small routing patch that removes a big pain point :)\n",
            "I'd guess they can conflict if you send mixed messages to both you probably end up in a redirect loop. I don't know why anyone would force http on the auth page though if they specify https for the route.\n\nAlso @schmittjoh can you look at my last comment on http://trac.symfony-project.org/ticket/9686 (the second part)? I talked with @fabpot quickly and it seems this could be handled in the security component entirely. If you have questions I'm on irc..\n",
            "> Configuration is on a route basis, and not a regexp like in the Security component (securing everything under /admin for instance).\n\nRegarding that, it would be nice to have a setting in the framework > routing options to change the default scheme to https.\n",
            "I put it on my todos, I don't think it's important enough to have a ticket hanging around.\n",
            "I'd rather have == false, which I think is valid. Or is null, but please let  none  die :)\n",
            "This is a bad idea for security imo. The use cases for reading cookies in JS are extremely rare and should be conscious choices, because it's a big attack vector combined with an XSS attack.\n",
            "Anything you want to say?\n",
            "Just delete the Resources dir and put everything in bundles as it should be :)\n",
            "Yes, you just need to define a getParent() method in your SomeBundle that returns  OtherBundle , then SomeBundle's templates takes priority over OtherBundle's. IIRC this limited to one parent, so you'd have to create one bundle per eveyr bundle you want to override stuff from.. I guess app/Resources makes it easier, but I'm still not a big fan \n",
            "Isn't it possible inside the Config classes to validate the resolved value of a parameter whenever a parameter is encountered? It shouldn't be resolved yet though, only the validation should resolve it.\n",
            "Using a decent terminal like mintty or console2 should help :)\n",
            "Maybe it'd make sense to move the annotation parser out of doctrine as a standalone lib? Sounds like a common-enough use case that could be useful to many.\n",
            "It's not about the amount of files, and I do realize it's in common, it's just imo about sending a message that this is a standalone annotation parsing lib vs. being a part of the doctrine ecosystem, which many associate mostly with the ORM/ODM, and not reusable bits. \n\nAlso I have been bitten in the past by deleting  useless  stuff from my vendor dir, including doctrine-common, just because I didn't think of that dependency, even though I know it's there, so I would expect others to do the same mistake. Anyways it's not a big issue, just explaining my POV.\n",
            "I think what he means is more copying the Doctrine AnnotationReader stuff into the component, not rewriting it. Of course that introduces some extra work to keep the two in sync, but it's not quite NIH :)\n",
            "For this particular case, you can also do `$this->container->getParameter('kernel.environment')`\n",
            "@bobthecow: go convince the ZF guys to use tabs for ZF2.0, and maybe PEAR for PEAR2, then I'm sure Fabien will adjust accordingly :)\n",
            "All the changes above in this commit and baf5a0fa350c43a8debef0896c34ac8b8c32a2bf entirely should be reverted IMO. It basically breaks all the fixes I did in the PR I sent you. I know your code looks better and less messy, but the stuff I had is the only way I found to make it work with `-vv`/`-vvv` support + `--verbose=2` and `--verbose=3`. I tried it with ->getParameterOption() it didn't work at all it always returns the default value. Did you try it or are you just trusting the tests? This getParameterOption stuff works when you're in a command, but in the application options are not parsed yet and it doesn't work as it should, so hasParameterOption with exact matches is the only way it seems.\n",
            "This is good and it's what I meant by option 1, as far as I can tell it worked fine.\n",
            "Well, this commit should fix the issue introduced in the previous one since it calls escapeshellarg on _all_ args including the command. Do you still have issues with spaces in paths?\n",
            "Ah I just noticed this wasn't merged yet. I'll ping Fabien when I get a chance, because indeed the previous PR was messing things up, sorry about that.\n",
            "But this commit does exactly that: it escapes (which quotes) all args (including command), so you end up with ` foo   bar   baz `. Have you tried my code?\n",
            "It has been merged yesterday, please report it if you still have any issues.\n",
            "This basically can't happen since you hardcoded the dir above.\n",
            "Also why enable this one by default and not the other ones? It's pretty annoying having to enable them in every new project.\n",
            "Indeed. Still too bad the others aren't. I don't really get the point of having generally useful functionality hidden away in the extensions repo.\n",
            "truncate is one I typically need quite often.\n",
            "Only problem I see with this is that you can't notify the user anymore if email sending failed.\n",
            "I currently do `app.session.locale` which also works fine btw\n",
            "Cool, didn't know about `filename*=utf-8`.\n",
            "No, if it's false it's still processing stuff if they are in the class map (which is only built if $aggressive is false). Anyway the patch won't be merged, so it doesn't matter.\n",
            "It's true that # and ? should be encoded. That's my bad. However spaces _are_ encoded. As for the  , they don't get encoded, and in your templates they become &quot; because you've automatic escaping turned on I assume, but that's the correct behavior since values of html attributes should be html-encoded. I don't see how this could cause issues and this wasn't changed by this commit AFAIK. Double quotes in URLs by the way are a fairly bad idea, because at least on windows it causes weird issues since (I think that's the reason.. couldn't find any real data) it's not allowed in the windows paths.\n",
            "Attempted to address this in #1569 - If you see more problems, I'd be happy to hear about them, but I've done a ton of tests and beyond those meta characters everything was working fine for me, so I hope it's good now.\n",
            "Well, we had problems with rawurlencode, because it encodes '/' and other that cause issues with Apache just returning a 404 or 500 (not sure anymore) without even hitting PHP. There's a ton of different ways to plug PHP in a webserver, and every webserver has its own quirks. It's not easy to have it work well everywhere. I'll add spaces, though I'm not sure if they should be encoded to + or %20. Not sure if + can have bad implications, but it sure looks nicer.\n",
            "I'd be happy to revert to rawurlencode, but then we may have to whitelist a few chars that cause issues, instead of the current blacklist approach. Anyway I'll do more tests. There was another issue before in the UrlMatcher which has been fixed since, so that may have lead me to fix problems in the UrlGenerator which were not really existent.\n",
            "Yup, agreed, and indeed I was mislead by the other issue (which was the UrlMatcher not decoding). I tested and it seems to work all good now, with full encoding. I just decode the / back and turn %20 into + because it looks better and seems to work just fine. If you have a + in your component it's turned into a %2B, but if you have a space, it becomes +, and it's decoded properly since we use urldecode() in the matcher. + becomes space, and %2B becomes + again.\n\nSee #1573 - I hope it's good now.\n",
            "Can you review the new code, try it and see if it fits your expectations? It leaves the door opened to people extending the class to add more decoding to the unescapedChars array, if they really want to have nicer URLs. Most people just use [a-z0-9-] url slugs though, so I don't expect this to be a major issue.\n",
            "Alright, removed that then. Thanks.\n",
            "The issue is, if you encode / as %2F, apache just returns a 404, so this breaks everything. Also the routing allows you to change the requirements of a {var} to `.+`, in which case you can do stuff like: `/foo/{url}` and that matches `/foo/http://foo.com/`, where `http://foo.com/` is the value of {url}. I've had cases where this was needed, so I think it's acceptable to decode %2F.\n",
            "Is this really necessary? Initializing values in array is not triggering notices afaik, the following code runs fine here:\n\n```\nerror_reporting(E_ALL|E_STRICT);\nclass Foo {\n    function test() {\n        $this->foo['bar']['baz'] = 'A';\n        var_dump($this->foo);\n    }\n}\n$a = new Foo;\n$a->test();\n```\n",
            "I don't think the ON_ prefix is necessary here\n",
            "Eh? `form.pre_set_data` => `form.set_data` => `form.post_set_data`, the names are event names, the  on_  prefix is redundant at best.\n",
            "Should be => \n"
        ],
        "commits": [
            "Update requirements of the deb package\r\n\r\nVirtual packages such as java*-runtime are provided by various \r\njava/JRE implementations, which makes it more flexible to use.",
            "Use cphpunit runner to parallelize travis builds",
            "[DependencyInjection] Fix aliased access of shared services, fixes #8096",
            "[DependencyInjection] Remove get*Alias*Service methods from compiled containers",
            "[DependencyInjection] Rename ContainerBuilder::$aliases to avoid conflicting with the parent class",
            "[DependencyInjection] Add support for aliases of aliases + regression test",
            "marked some classes as being experimental in 2.3",
            "[HttpKernel] Remove args from 5.3 stack traces to avoid filling log files, fixes #7259",
            "[Console] Fix merging of application definition, fixes #7068, replaces #7158",
            "[DependencyInjection] Make service names case sensitive",
            "[DependencyInjection] Add a method map to avoid computing method names from service names",
            "[HttpKernel] Avoid updating the context if the request did not change\n\nDue to the BC $this->setRequest() call in the onKernelRequest method, the\nrequest is set twice every time in Symfony, and RequestContext::fromRequest\ntakes 1ms to run here so if we can skip one call it is a win.",
            "[HttpFoundation] Avoid a few unnecessary str_replace() calls",
            "[HttpFoundation] Optimize ServerBag::getHeaders()\n\nisset() vs in_array makes it take half the time (1ms/req here)\nsubstr() does not have to scan the whole string so it's a wee bit faster",
            "[Console] Fix tests on windows",
            "[Filesystem] Fix tests on windows",
            "Fix tests",
            "Add notes in UPGRADE and CHANGELOG",
            "Added more verbosity levels",
            "Fix handling of --verbose=... and BC break",
            "Fixed tests",
            "Removed unused options",
            "Revert invalid changes",
            "[Console] Handle new verbosity levels",
            "[Console] Add tests and support for more types of inputs",
            "[Console] Add support for multiple InputOption shortcuts",
            "[Console] Fix handling of namespaces to avoid conflict between 2nd+ level namespaces, fixes #7234",
            "[Console] Add failing test to demonstrate issue #7234",
            "Remove use of deprecated HttpKernel LoggerInterface",
            "[HttpFoundation] Remove special handling of empty arrays, fixes #5506",
            "[HttpKernel] Extend psr/log's NullLogger class",
            "[HttpKernel][Monolog] Add PSR-3 support to the LoggerInterface",
            "[Monolog] Mark old non-PSR3 methods as deprecated",
            "[Console] Fix error when mode is not in PATH",
            "[Form] Rename UnmodifiableFormConfig to ImmutableFormConfig",
            "[EventDispatcher] Rename UnmodifiableEventDispatcher to ImmutableEventDispatcher",
            "[Process] Add extra dirs argument to the executable finder to allow searching more dirs",
            "[Routing] Add strict_parameters option to disable exceptions when a route generation fails due to an invalid parameter",
            "[Routing] Update changelog",
            "[FrameworkBundle] Add info to config",
            "[DependencyInjection] Add ParameterBag::remove",
            "Force root package version in travis builds",
            "Add tests for output capturing",
            "Update branch aliases",
            "[Console] Use proc_open instead of exec to suppress errors when run on windows and stty is not present",
            "[Filesystem] Fix makePathRelative on windows with mixed paths, fix tests",
            "[Filesystem] Fix typo",
            "Fix chmod() calls to apply umask",
            "[Validator] Allow empty keys in the validation config",
            "Fix typo",
            "[Process] Fix a mistake triggering stream_select errors",
            "[Process] Removing useless code (this is already done in updateStatus)",
            "[Process] Close pipes before calling proc_close to avoid deadlocks as advised on the proc_close php.net documentation",
            "[Process] Skip test that is still getting stuck on windows",
            "[Process] Skip signal assertion on windows",
            "[Security] Log file/line that triggered the AccessDeniedException",
            "Remove phpunit.bat since composer creates a bat wrapper itself on windows",
            "[Process] Force _ENV inheritance when it is populated, fixes #3555",
            "Remove all default values from redirected url",
            "[Process] Code clean up",
            "[Process] Add ProcessBuilder::create() for more fluidity in the interface until 5.4",
            "[Console] Format simple arrays nicer",
            "[Console] Allow redefinition of application options descriptions",
            "[Console] Fix tests on windows",
            "[FrameworkBundle] Use only _route_params to generate redirect routes",
            "Merge pull request #1 from pminnieur/post_response\n\n[HttpKernel] Add Kernel::terminate() and HttpKernel::terminate() for post-response logic (without the BC break)",
            "Fix Console tests on windows",
            "[EventDispatcher] Add reference to the EventDispatcher on the Event",
            "Fix composer.json",
            "Adjust composer files to strictly require known to work packages",
            "Adjust doctrine requirements",
            "[HttpKernel] Add Kernel::terminate() and HttpKernel::terminate() for post-response logic",
            "Replace 2.1.* and not any version above 2.1",
            "Use psr0 autoloading instead of requiring a bunch of phpunit files at every request",
            "Clean up composer.json",
            "Guess eventName from event",
            "Fix func signature",
            "[Translation] Add failing tests to verify that UTF-8 lang files can't be used with another charset",
            "[Translation] Allow use of UTF-8 encoded catalogues into non-UTF-8 applications",
            "setExpectedException should not catch exceptions coming from PHPUnit's error handler\n\nToo often tests are believed to work because they catch an Exception, while they are in fact just catching a PHP warning/notice/error that has been converted to an Exception by PHPUnit",
            "[FrameworkBundle] Allow definition of extra app.* Twig globals from the configuration",
            "Fix tests for previous commit",
            "[DependencyInjection][HttpKernel] Prevent default kernel parameters from being shielded by the config parameters override",
            "[TwigBundle] Allow option to avoid auto-escaping of translations.",
            "[HttpFoundation] Fix bug in clearCookie/removeCookie not clearing cookies set with a default '/' path, unless it was explicitly specified",
            "[DependencyInjection] Add DIC Pass to remove *.class parameters, fixes #1684",
            "[MonologBundle] CS fix",
            "[MonologBundle] Added services for core processors",
            "[Bridge/Twig] Add required class to labels that match required fields",
            "[Console] Added Command::isEnabled method that defines whether to add the command or not",
            "[FrameworkBundle] Added isEnabled to Router commands, fixes #1467",
            "[HttpKernel] Removed Ini loading again",
            "[HttpKernel] Added support for php and ini configs",
            "[HttpKernel] Simplify some code",
            "[HttpKernel] Added AutoloadExtension\n\nThis extension is instanciated by default for Bundles that don't have an Extension class.\nIt automatically loads Resources/config/services.(yml|xml) service definitions into the Container if they exist.",
            "[HttpKernel] Added tests for AutoloadExtension",
            "[DomCrawler] Uppercase http methods",
            "[DoctrineBundle] Do not try to fetch doctrine listeners if doctrine is not enabled",
            "Fixed typo",
            "[Serializer] Restored docblocks from the deleted methods on SerializerInterface",
            "[Serializer] serialize shouldn't normalize since it's the encoder's job to do that when they require it",
            "[Serializer] Properly check for the DecoderInterface",
            "[Serializer] Implement SerializerAwareInterface",
            "[Serializer] Add checks for SerializerAwareInterface",
            "[Serializer] Inlined back the logic from isStructuredType and removed the method",
            "[Serializer] Cleaned up NormalizerInterface",
            "[Serializer] Added NormalizationAwareInterface",
            "[Serializer] JsonEncoder doesn't need SerializerAware anymore",
            "[Serializer] Renamed AbstractEncoder/Normalizer to SerializerAwareEncoder/Normalizer",
            "[Serializer] Fixed tests",
            "Update UPDATE file",
            "[Serializer] Removed properties argument",
            "[Serializer] Fixed typo",
            "[Serializer] NormalizableInterface now takes a Serializer and make sure the  is always optional",
            "[Serializer] Cleaned up SerializerAwareInterface",
            "[Serializer] Split decoder/encoder maps",
            "[Serializer] minor optimization",
            "[Serializer] CS fixes",
            "[Serializer] Split supports in supportsNormalization and supportsDenormalization",
            "Merge branch 'serializerLight' of http://github.com/schmittjoh/symfony into serializer",
            "Fixed docs typo",
            "[Serializer] Add support for Traversable objects",
            "[HttpFoundation] Do not auto-start the session when saving",
            "[HttpFoundation] Remove warnings when session id isn't given",
            "[FrameworkBundle] Do not override the session storage for test",
            "[FrameworkBundle] Adjust styling and display of logs",
            "[HttpKernel] Log non-http exceptions as critical as well",
            "[HttpKernel] Throw exception if no path is present in a resource",
            "[HttpKernel] Fix console output for reals",
            "Fixed status code check",
            "[HttpKernel] Log 500+ errors as critical and not error\n\nThis allows people to filter easily between 404 type of responses (that are mostly for users) and real errors in their application (where they probably want to get an email notification",
            "[HttpFoundation] Windows test fixes",
            "[MonologBundle] Added support for new Monolog log level",
            "[FrameworkBundle] Treat all log messages >=ERR as errors",
            "[HttpKernel] Removed log() from the LoggerInterface as the priority can not be safely determined across implementations",
            "[HttpKernel] Prevent errors leaking out in the console on windows",
            "[Form] Use proper transformation exception in case of failure",
            "[AsseticBundle] Set proper content-type headers",
            "[WebProfilerBundle] Prevent redirects to be intercepted in XHRs",
            "[Serializer] Some more privates",
            "[Serializer] Move private methods below protected ones",
            "[Serializer] Switched most protected to private or final",
            "[Serializer] Added docblock",
            "[Serializer] add methods to the SerializerInterface",
            "[Serializer] Added docblocks for NormalizableInterface",
            "[Serializer] Added @api annotations",
            "[Security] Prevent missing favicons from overriding the _security.target_path value",
            "[WebProfilerBundle] Display errors logged by monolog properly in logger panel",
            "[WebProfilerBundle] Display hand cursor on the close button",
            "[FrameworkBundle] Highlight error logs in red and not green",
            "[FrameworkBundle] Fix alignment of <li> with the selected class and small opera glitch",
            "[FrameworkBundle] Don't hide logs by default in exception pages",
            "[FrameworkBundle] Added getFlashMessages() to the SessionHelper",
            "[Config] Improved exception message a bit",
            "[SecurityBundle] Allow setting the class of in-memory users",
            "[SecurityBundle] Renamed init:acl to acl:init",
            "[FrameworkBundle] Renamed init:bundle to bundle:init to conform with other commands",
            "[MonologBundle] Fix DebugHandler to match Symfony's interface",
            "[MonologBundle] Added the MonologBundle",
            "Added monolog to autoload and vendors script",
            "[MonologBundle] Some code reorganisation",
            "[MonologBundle] Added path validation",
            "Fixed typos in previous commits",
            "Updated Logger class to match latest Monolog updates",
            "Added monolog tags to create all core channels",
            "Udpate for latest monolog version",
            "[HttpFoundation] Fixed test breaking on windows",
            "[HttpFoundation] UploadedFile::getOriginalName is now overriding getName",
            "[Form] Add exception for missing enctype attribute",
            "[HttpFoundation] Minor optimization",
            "[Routing] Parameters that are part of the URL pattern itself should not be urlencoded",
            "[Form][TwigBundle] Make use of the new label option when rendering forms",
            "[Form] Add getLabel() and a label option on form fields",
            "Include untrusted host in the exception message"
        ],
        "issue_comments": [
            "@bnoordhuis a type cast isn't even a line, it's not code, it's nothing. It's not like the CLA is of much use anyway, but when it blocks such PRs it's really getting absurd.\n",
            "I assume this works like `SORT .. ALPHA` regarding UTF-8 support?\n",
            "+1 on this, more debugging/profiling capabilities are always welcome.\n\n@ajuckel: BTW, below the comment form there is a  Enable notifications for this issue  link, which does just that :)\n",
            "Implemented in 2.6.0 as [BITCOUNT](http://redis.io/commands/bitcount) - thanks a lot @antirez, closing this.\n",
            "Anything that can prevent people from shooting themselves in the foot sounds great to me. If you really need a wider scope of interaction, one could argue that you can have some external scripts running on the redis box to at least get rid of the latency problems, then do your crazy work there. Or we could have an EVILEVAL command that breaks the sandbox ;)\n",
            "It's a good start, but [as I've said a year ago](http://code.google.com/p/redis/issues/detail?id=453) a database _should not start_ if it cannot take good care of your data in its current configuration. This is going to hurt people one day and I'm sure we have all seen what kind of shitstorm a blog post by a guy that lost some data can create for a database. Please reconsider.\n\nIMO when it starts, if it's configured with a RDB and there RDB isn't there, it should issue a SAVE itself to make sure saving is possible, and create an empty RDB. If it's not working fail hard please.\n",
            "Sorry about that, I'll close this issue then, and try a newer JVM - I'll get on the list if I still have issues. Thanks\n",
            "I don't know if it's just me but I'd rather not have a blank line above the `@since` if the previous line is a phpdoc annotation already. It's ok to keep all the annotations together IMO, and would save some vertical space ;)\n",
            "Yes, I also think that's nonsensical and should be removed, but as I\nsaid, maybe it's just me.\n",
            "Oh no I didn't expect you to do it because I ask :) Just wanted to start\na discussion.\n",
            "@ebihara there is a PR open on NelmioSecurityBundle for CSP support, which one merged will make the bundle cover  most things you mentionned here. As for X-Content-Type-Options, I wouldn't be against a pull request to add it to the bundle as well. I don't know if this really belongs in the framework itself because having smart defaults that fit everyone is a bit hard. It's good to make it easy to enable these features, but I don't necessarily agree that forcing them on everyone is a good thing.\n",
            "ping @tecbot @drmonty @Strate if you guys want to check the patch and/or try it in your apps.\n",
            "Pushed a fix for the ContainerBuilder class. Let's see if travis builds this time.\n",
            "I added a test for aliases of aliases that verifies everything gets the same instance as the shared aliased service.\n",
            ":+1: \n",
            "Seems reasonable to me.\n",
            "How about fixing https://github.com/symfony/MonologBundle/issues/5 instead of changing the error level to a notice? It would be a good thing to have and if flexible enough (like take an array of URL patterns to whitelist/blacklist) it could fit the needs of most people, or be disabled completely.\n",
            "> Having thought about it a little, changing the ActivationStrategy means\n> logging the exception on a higher level and then treating it like a\n> lower level again when it comes to taking action on it. \n\nThis is only true if you assume that an ActivationStrategy works on\nlevels.. But that is merely how the default one works. It could be that\nyou want to just trigger the fingers crossed handler on very specific\nevents individually from their log level.\n",
            "@fabpot I think he meant using `if (isset() || array_key_exists()) { return $val } else { return $default }`, which might be beneficial if most calls end up querying for a value that is present, but that's indeed a long shot.\n",
            "@fabpot can you please merge 2.1 in 2.2/master? Would like to add this to the composer build because it's affecting someone.\n",
            "As input yes, we probably should also support also arrays. I'll send another PR.\n",
            "/cc @igorw\n",
            "Seems fine, although it is madness that we allow  ,  as thousand separator in there at all IMO. I'd rather see this fixed, but I am not sure what this code is used for and what the impact would be.\n\nHow about you do an integer list and depending on the integers you have, they're either parsed as a string (integer list) or a float (thousand separators)? Sounds inconsistent and very error prone.\n",
            "Updated\n",
            "I wanted something more targetted because if you escapeshellarg `--foo` you end up with `'--foo'` and then it's an argument and not an option. But yeah it's probably best to just use it on argument and then nothing on options. I'll send another PR shortly.\n",
            "The PR is not mergeable yet IMO, it adds weird bugs. I'm investigating.\n",
            "Sent a PR (dlsniper/symfony#2) with some fixes, but that's unfortunately not the end of it. Since --verbose now has an optional value, doing things like: `composer show --verbose symfony/symfony` fails, because it takes symfony/symfony as the value to --verbose, and not as an InputArgument as it was before. Similarly doing `composer --verbose 2 show symfony/symfony` fails for example, because the parser takes the first argument as the command name, in this case it's `2` so it fails hard.\n\nI see a few ways of dealing with this:\n- revert the --verbose option to be VALUE_NONE. It still works as expected since we inspect the input tokens directly with hasParameterOption, and it fixes the problems. However that means you can't do `--verbose 3` anymore, you need the `=`.\n- make some ugly hack in the input parsing to ignore values following --verbose if they aren't 1/2/3\n- add some new thing in the InputOption class to specify accepted values, so that non accepted ones are ignored if a default value is provided. It's equally hackish IMO but makes it look more legit.\n\nI think I would prefer the first approach, because it's easy, and introduces a minor inconsistency for the verbose flag but that's hopefully ok. \n",
            "Answered inline in new commits regarding the code.\n\n> I'll start with the PR for multiple shortcuts/aliases if we want to have\n> support for that as well, let me know about it.\n\nI don't think multiple aliases really makes sense in most cases. Might\nbe good to have it for completeness, but usually you don't need to add\nmore mess to the cli args ;) And in this case it's not really aliases,\nbecause -vv is different from -v.\n",
            "@dlsniper I'll try to take over because I really need this.\n",
            "AFAIK this is not a problem, unless there is a regression in composer.\n",
            "@bschussek IMO if things get too crazy the best option is to always enforce it's installation, and skip using it if the ICU version is unusable, or never require it but throw an exception when it's missing but ICU is avail, or solve it via documentation somehow.\n",
            "@bschussek every symfony/icu could require a specific lib-ICU version that matches it. That way when you require symfony/icu, you'll get the right one for your system. If you don't require it's not there and that's it.\n\nI am not convinced this is a good idea though (no matter how you solve it composer-wise), because it means your composer.lock file working on your machine might not install on the production server if it has a different ICU version. Most people have no clue about ICU at all, and it will create lots of support pain. Bundling all versions (with some reason maybe) might be an easier approach.\n\nAlso I would think that splitting this off in a new lib or whatever but _not_ a symfony component would be wiser, because it sounds like a standalone thing that shouldn't follow the symfony release cycle and I'm afraid this will create more pain as well.\n\nLastly, and I'm sure this is just my misunderstanding of what you're doing but I have to ask: why do we have to bundle ICU data at all? I thought intl+ICU was all about having the right data. I'd think you should bundle data _if_ intl is not present and symfony/intl is used as a fallback.\n",
            "@bschussek I think the problem of the lock file I mentioned before is still true, that if you run update with a given ICU version, then you can't install from that lock file on another machine with different ICU, if the symfony/icu package requires that specific ICU version. In a way that's good because it means people will notice it early, and that's better than doing it in a logged warning IMO, but that's probably going to cause some support load.\n",
            "Well, `composer update --no-dev symfony/icu` should install everything\nfrom lock file + update this one, so it should work fine.\n\nAnother hack could be to require explicitly the symfony/icu that your\nserver needs to force devs to use the correct version, and if they can't\nyou can always add:\n\n```\n provide : {\n     lib-ICU :  * \n}\n```\n\nWhich will make all symfony/icu installable, but that should be done\nvery carefully I suppose.\n\nWhat are the consequences of running symfony/icu on an incorrect ICU data?\n",
            "I don't know what the current situation is, but it sounds to me like this PR is just adding complexity. I never had problems with ICU and I don't know if that's because I was lucky or not. What's this PR solving exactly? And if there are only two data set formats isn't it possible to ship a single package with both formats included in their latest available versions? I understand that there is a waste of space, but is it that big?\n",
            "Can you explain why?\n",
            "Fair enough. The main issue I see is that you end up with  garbage  query params in the URL. Any params that was needed by the previous page and not needed by the new one ends up as ?foo=bar in the URL. It's usually not harmful, but not very clean either. I'm not sure what it would take to grab all the params that a route can use, and only copy those over.\n",
            "Eh I see. I can't say it's the less hacky thing I ever saw, but it might be alright. I don't think I'm the best person to take this call though.. Let's see what @fabpot thinks.\n",
            "Sure the null check needs to say, it should be like this IMO: `if (null === $this->cwd && (defined('ZEND_THREAD_SAFE') || defined('PHP_WINDOWS_VERSION_BUILD'))) { ... }`\n",
            "I just had to disable useBestAdapter() in composer since it was causing issues on solaris (composer/composer#2168). Is there no way to check if find is the proper gnu find before enabling this adapter?\n",
            "@vicb done.\n",
            "AFAIK @fabpot expanded the requirements of many packages, which might make this irrelevant (it's not mergeable too).\n",
            "Ah right it is mergeable, I blame jetlag :)\n",
            "See #5506 for additional context. The JsonResponse used to sort of enforce returning objects, but obviously not everyone wants to follow those guidelines. That said, the issue of naked arrays being exploitable seems to be only a problem in very old Firefox versions. As such I'd say enforcing it is not necessary. People should anyway use objects because it makes more sense and is more extensible.\n\nAs for google, see http://stackoverflow.com/questions/2669690/why-does-google-prepend-while1-to-their-json-responses - my guess is if they add this everywhere, then if someone fucks up and returns an array instead of an object, at least it doesn't introduce a vulnerability.\n",
            "Closing since it was fixed in monolog\n",
            "This should not be applied blindly, if used with monolog 1.3 pre-fix it will fail. I think it will be released as 1.4.0 anyway, so maybe the requirement can then be bumped while applying this fix?\n",
            "Well, the problem is just that your project allows for dev versions. ~1.3 means 1.3 up to 2.0. I changed the master branch to be 1.4.x-dev now, so we could for now just require 1.3.\\* in symfony to prevent using the upcoming release, then when it's released merge this PR and bump to `~1.4`.\n",
            "OK I actually found a not so ugly way to avoid the BC break so the code can stay the same in symfony, see https://github.com/Seldaek/monolog/issues/152\n",
            "Indeed @stloyd, and the HttpKernel's LoggerInterface already extends the Psr one, so no need to change it (actually changing it creates a big BC break). Closing this.\n",
            "Oops :)\n",
            "If we really consider this as a BC break and document it as such then I guess it should be 2.2 only and not 2.1. @fabpot?\n",
            "Eh thanks, didn't have time to do it yesterday.\n",
            "If null already uses the current working directory, what's the point of calling getcwd() at all?\n",
            "php.net says `or NULL if you want to use the default value (the working\ndir of the current PHP process)` which sounds like getcwd() to me.\n",
            "For full BC though, `getWorkingDirectory` should `return $this->cwd ?:\ngetcwd();` Then at least if that call fails the whole process isn't\nfailing. I don't see why anyone would use that getter though.\n",
            ":+1:\n",
            "Looks fine, I will try to wrap up the 1.3.0 soon so you can migrate the code to use it (well it can already be done I guess in the master branch).\n",
            ":+1: ping @fabpot \n",
            "Thanks, it's a good start. It doesn't respect the docopt spec fully but that can always be improved with time, at least it seems to render something usable.\n",
            "Here is the sample authenticator + user provider I used for building this, it can only authenticate one hardcoded user but obviously you could hook in anything: https://gist.github.com/4117358\n",
            "Pushed an update to this PR:\n- added a simple_token firewall/factory/whole-shebang for API-key and other usages that don't fit well with user/password forms. You just get a Request in this case and decide what to do with it.\n- renamed a few methods to try and make more sense.\n\nYou can check a demo implementation of it in my symfony-standard fork, simplesecurity branch. Here is the diff: https://github.com/Seldaek/symfony-standard/compare/4f7a61c...simplesecurity\n\nThis allows you to access the secured area like:\n- http://localhost/sfsecurity/web/app_dev.php/demo/secured/hello/World?apikey=41393af0d87e64a9581f7eeac6b73dcb769b0889 => you're logged in as alice since that's the api key defined for alice in app/config/apikeys.txt\n- http://localhost/sfsecurity/web/app_dev.php/demo/secured/hello/World => login with foo/bar and you get logged in as foo via form, according to passwords defined in app/config/users.txt\n\nNext step I want to do is add success_handler & failure_handler support to both, called by default on the authenticator service, and perhaps allow them to be configured to some other service like the form_login currently allows. After that I think we have a solid base and it should be documented, but I'm obviously open to any feedback regarding naming or anything else.\n",
            "I updated the PR. Things are looking good now, success and failure handlers are supported without configuration (if you implement it it gets called). There is one issue left however, something I must have messed up prevents the two from being used together (if you do, the form login stops working). No time to finish this tonight, but I'll try to get back to it soon, and if anyone has an idea what might cause this please say so.\n",
            "@althaus you get the Request in the createToken() method, so you should store all information needed from the request into a custom token class, and then use that information authenticateToken() to verify the user. It should indeed be possible this way, and I would be happy if you'd try it and give feedback.\n",
            "@catchamonkey yeah but that's the thing, the factory, authentication provider and authentication listener are regrouped into one zero-configuration thing with this PR. This reduces the cognitive overhead quite a bit, and doesn't restrict you so much. I think most things can still be achieved this way.\n\nThat said, it's not gonna be as easy as sf1 i guess.\n",
            "Maybe you can pull https://github.com/Seldaek/symfony/commit/5e8a5267f67428e18fa6dc38cccefd9f3ca9738f into your branch (for some reason I can't send a PR to your repo, it doesn't show up in github's repo selector.. looks like they don't like projects with too many forks). It allows you to use usort() which hopefully is faster than your merge sort, though I did not bench it. I also added tests to confirm the functionality.\n",
            "Sorry please check https://github.com/Seldaek/symfony/commit/376dd93c569362a162bd2e79c7eea115ac5e355e instead, I missed a few tests in the RequestTest class.\n",
            "NP, I'll try to migrate composer over this new helper, because this duplication makes little sense.\n",
            "Should be verified on various platforms I think, because the old code works well for most (we use a similar thing in composer).\n",
            "I think the problem is that the display() method doesn't pass the barWidth and stuff to overwrite(), so it can't do its job properly. In composer what we did is always store the last message length so when you call overwrite it just uses that length to rollback to the beginning of the line, but that's maybe not feasible in the helper.\n",
            "BTW I fixed a bug yesterday relating to the COMPOSER_ROOT_VERSION thing, it should detect the original branch better now, though it won't be on travis until they update their composer.phar\n",
            "Ok I figured out the problem, the hack is even hackier I guess now, but it should work for people with and without --enable-sigchild at least.\n",
            "@schmittjoh I'm not sure how that's related to this issue? The problem here is that $exitcode is -1 when it should be 0, I don't see how the additional level of exec would help but maybe I'm missing your point.\n",
            "Just tried to rebase and it's not so trivial.. I can try to rebuild the\npatch from scratch for 2.0 if it's important.\n",
            "@fabpot ok so the question remains whether there should be a ctor check for the configure flag to enable this or if we just always do it and hope it doesn't cause issues.\n",
            "We'd need a special build with sigchild (doable with travis I guess, but quite involved) to really test it properly. Then you'd need to run the test a few times because the sigchild behavior is quite erratic..\n",
            "1.\\* is still ok I think. Obviously the latest version is better, and if you update composer will pick the latest, but I don't think we need to force people to upgrade if there is no BC break.\n",
            "Where do you see `>=1.0,<1.2-dev`?\n",
            "Ok fixed.. Everywhere else in the master branch it is required with `1.*` so I didn't get what you meant :)\n",
            "@Tobion http://schlueters.de/blog/archives/125-Do-not-use-PHP-references.html - search for  copy-on-write  if you don't want to read it all.\n",
            "After a quick look, I'd say +1\n",
            "I feel this could/should be implemented when the use case mandates it by extending the event dispatcher. It sounds like a bit much overhead for the 99% of people that won't need it. Maybe I'm missing a major use case though.\n",
            "Adding a new interface is the best way. Then you make the generator implement it, and before calling that method you check with instanceof NewInterface. If you feel like doing it I wouldn't mind.\n",
            "Would be even better if the exception message had a link to some cookbook page explaining how to enable this stuff (run as admin or [disable the security policy](http://superuser.com/a/125981/37460), though that hasn't worked well for me).\n",
            "@bschussek what about reversing the order of the transformers when doing reverse transform? It just seems to be transforming in the wrong order at the moment.\n\nAlternatively, if things relying on arrays would just check for Traversable instead, that would also fix the problem it seems?\n",
            "Thank you, @travisbot.\n",
            "It just says that the current version of the root package is dev-master, because otherwise since the composer.json file has no version, we can't know, so it tries to guess from git info if it finds any, but in the case of a pull request, the version is not dev-master, so the branch-alias doesn't trigger, so it ends up having a version of symfony/symfony installed that's 1.0.0 - but some of the dependencies require another version, so it sort of conflicts with itself.\n",
            "What about just doing `strtr($foo, '\\\\', '/')` to get rid of the backslash issues entirely? Because the current code looks fine to me. preg_quote escapes backslashes already. \n",
            "well, there is already a mess and mix of / and \\ in that string, so I don't think it'd be very harmful to normalize it everywhere.\n",
            "Either that, or just fix the cache_dir/base_dir when it's being created.\n",
            "@stof I never said one should normalize the whole container..\n",
            "Just in case the description isn't clear enough: This shouldn't be merged, but I'm hoping @pulzarraider or someone else can look into the failing test and send a fix.\n",
            "Well, looks like it fails too on linux given the travis failure. So did I mess up the test case? I thought it was outputing the process stuff by default before as well as capturing it, if no callback was provided. But maybe I was mistaken.\n",
            "@pulzarraider ok thanks. I figured out what the problem was now. It was kinda broken, I just didn't write the proper test case. Basically it was not calling the callback in most cases. See #4400\n",
            ":+1:\n",
            "D'oh. Good catch thanks.\n",
            "This looks fine to me, I asked him to submit the PR, but I wanted to get feedback from others.\n",
            "I'm really not sure this is a good idea. It would be better as part of the config.php/check.php scripts IMO, to give you a warning that your system may be misconfigured, but enforcing it like that may put people in trouble if they can not disable the option.\n",
            "@drak what about if you detect that doing session_write_close()? Then configuring it and calling session_start() should do the right thing no?\n",
            "+1 (Side note: Using your fork of symfony for PRs would be good I think, otherwise it creates noisy versions on packagist.)\n",
            "I don't agree, false indicates something failed in a way or another, but the common  lack of a value  is null. That's what properties default to when you just do `public $foo;`. False is a common misuse in older php code, but it has just been possible because for most code, false == null. That said, if the exception is obscure, it should be improved.\n",
            "Well, I guess we'll need @bschussek to answer about the real intent behind this code, and why it's like that. That said, IMO a getter returning false because there is no value is broken, and it should be fixed. False is a value, it's a boolean, the opposite of true, a negative value of sorts, but it's not _nothing_. Old code written that way typically will work no matter if it's false or null, so why not fix it?\n",
            "Fair enough, but I suppose if it's like this there is a reason, in which case all we can do is improve the exception message to describe what's happening and how to fix it best. Anyway let's wait for a word from @bschussek :)\n",
            ":+1: (minus the test breakage;)\n",
            "So in theory you can switch this back to use self.version now, but it is not really foolproof. It only works if you're on a checkout of a git branch, then it will use that branch as the version. So if you are on a random commit that's not a branch tip, you'll get a 1.0.0 and things may break, so I think leaving 2.1.\\* might be better.\n",
            "Yup, to be fair in retrospective maybe that should have been translated in the controller directly (that's why it had message + params as an array), but this is code that predates 2.0 by at least six months, so it was obviously not clear what best practices were. Anyway it seems it can be fixed without much harm, so for the sake of safety and because I may not be the only crazy person having done this, it'd be good to fix IMO.\n",
            "@maoueh by the way you shouldn't hesitate to report an issue if you see weird stuff popping up in places where it doesn't belong :) I didn't notice because I have both [ansicon](http://adoxa.3eeweb.com/ansicon/) and stty on my machine.\n",
            "Interesting point, damned ini settings. Could you apply that to the whole codebase? There are many more http_build_query calls across the framework.\n",
            "Tried it on 5.4.0 - I get the following when I checkout your branch:\n\n```\nSS..........ESSSSSSSSSS...E.S\n\nTime: 0 seconds, Memory: 19.75Mb\n\nThere were 2 errors:\n\n1) Symfony\\Component\\Process\\Tests\\ProcessTest::testProcessResponses with data set #0 ('output', 'getOutput', 'echo \\'output\\';')\nUndefined offset: 1\n\nC:\\Users\\seld\\Web\\symfony\\framework\\src\\Symfony\\Component\\Process\\Process.php:342\nC:\\Users\\seld\\Web\\symfony\\framework\\src\\Symfony\\Component\\Process\\Process.php:168\nC:\\Users\\seld\\Web\\symfony\\framework\\src\\Symfony\\Component\\Process\\Tests\\ProcessTest.php:46\n\n2) Symfony\\Component\\Process\\Tests\\ProcessTest::testIsRunning\nUndefined offset: 1\n\nC:\\Users\\seld\\Web\\symfony\\framework\\src\\Symfony\\Component\\Process\\Process.php:342\nC:\\Users\\seld\\Web\\symfony\\framework\\src\\Symfony\\Component\\Process\\Tests\\ProcessTest.php:106\n```\n\nWhen I remove the skipping of `ProcessTest::testProcessPipes` - it still hangs so it looks like your fix is not working.\n\nJust for reference, with latest master checkout I get this:\n\n```\nSS...........SSSSSSSSSS.....S\n\nTime: 2 seconds, Memory: 19.75Mb\n\nOK, but incomplete or skipped tests!\n```\n\nDon't have time right now, but if I find time to look at your diff in more details I will, maybe it's possible to fix it.\n",
            "Ok, it passes again on 5.4.\n",
            "I agree it should be ignored, but you also probably should install it somewhere globally on your machine and put that in the PATH so you have it everywhere and don't need 300 copies of it. Incidentally it would also not require you to gitignore it since it would be outside of the git dirs.\n",
            "As far as I know this is not correct since chmod() does not apply the umode on to the mode you give it, I think that's only valid for mkdir().\n",
            "Doing `chmod($file, 0777 ^ umask())` should do the trick.\n",
            "```\n$ php -r 'new DateTime( foo );'\n\nFatal error: Uncaught exception 'Exception' with message 'DateTime::__construct(): Failed to parse time string (foo) at\nposition 0 (f): The timezone could not be found in the database' in Command line code on line 1\n```\n",
            "In a constructor it's pretty hard to return false, so it has to throw an exception. The php.net docs also say it so I'm fairly sure it's nothing specific to my setup.\n",
            "The dummy key I added in the test makes it fail without the fix.\n",
            "Not sure what the point is, since it's already defined in the parent class: https://github.com/Seldaek/monolog/blob/master/src/Monolog/Handler/FirePHPHandler.php#L55\n",
            "Ok good :)\n",
            "Probably the  valid options  array should be defined one outside the loop (looking at the original version I mean, not the PR version) to avoid redefining it at every iteration, but other than that I don't really see anything that should change.\n",
            "This does not belong there, it should be done in the test bootstrap file. See the last code sample on http://getcomposer.org/doc/01-basic-usage.md#autoloading otherwise you're cluttering the autoload namespace for all users of the package even though they will never need to load test classes in their apps.\n",
            "Well if we want to expose these classes to end users, sure it should be in the composer.json, but I really think that's a bad idea. Test utilities that are meant to be reused should probably be moved inside the src/ directory, like WebTestCase is. Anyway let's reopen and wait for @fabpot's opinion - but in the meantime if you could details which classes you need from tests/ and why it would be great.\n",
            "Overall this seems like a good improvement. I didn't check the code in detail though.\n",
            "Sounds like a great change to me.\n",
            "Why would it break apps? It just makes what the URLs accept more flexible, but I doubt a slash will break most things. If people want to restrict what gets in I hope they don't use blacklists.\n",
            "Ah right, that is a good point, and indeed kind of a blocker.\n",
            "I guess a command (or ideally standalone tool, or backport the command to 2.0) that checks for all sorts of potential issues with 2.1 upgrade and then lets you know about solutions or offers to fix it for you would be good too.\n",
            "I was thinking about this and about the initial plan to support URI templates, and it occured to me maybe these changes (or the current behavior) are going in the wrong direction. The [spec](http://tools.ietf.org/html/draft-gregorio-uritemplate-08#page-5) says as far as I understand it that `{foo}` is anything except [reserved chars](http://tools.ietf.org/html/draft-gregorio-uritemplate-08#section-1.5) (`:`, `/`, `?`, `#`, `[`, `]`, `@`, `!`, `$`, `&`, `'`, `(`, `)`, `*`, `+`, `,`, `;`, `=`). Then `{+foo}` allows for matching of those reserved chars too. Shouldn't we simply match that? It sounds sensible to me to have `{foo}` parse to `[^:/?#[]@!$&'()*+;=,]+?` which should let `{foo}-{bar}` work fine for example given the non-greediness of the regex.\n",
            "@vicb: Well.. if 3227 already exists. I don't see why I should create an additional one. The question IMO is whether it's relevant to this PR or not, and if yes what we do about it.\n",
            "There are already handlers that can be definer per-firewall for successful and failed logins, see\n\n```\n            failure_handler: some.service.id\n            success_handler: some.service.id\n```\n\non http://symfony.com/doc/current/reference/configuration/security.html\n",
            "By the way the main difference between those handlers and a simple event (and the reason why they are not event already) is that they work per-firewall, and not at the global level. That said, many applications only have one firewall and in that case using the standard event system makes it a bit more straightforward to use, so adding this may not be such a bad idea.\n",
            "Yup I think having a clear spec and tests backing that would be great, right now it's a bit fuzzy what happens when you don't use simple `/{foo}/{bar}` patterns. The changes look good other than that, from your description at least.\n",
            "Honestly I have no clue looking at the patch if this breaks anything. You added tests which is great, but I remember spending a few hours about a year ago testing everything with the Apache matcher, PHP matcher, various amounts of crazy characters in the URLs etc. It's not easy to cover all cases and it's close to impossible to write tests for all of it, so whatever happens to this, we need to make sure it is tested extensively before 2.1 stable is released.\n",
            "I checked a few projects and this is what I found (usage of getPathInfo & getBaseUrl):\n- One use case of getPathInfo to check if the url started with `/something/` which is a prefix used for all  overlay  content which had to be treated differently somewhere => most likely unaffected\n- One use case for checking path prefixes by regex in our [CorsBundle](https://github.com/nelmio/NelmioCorsBundle/blob/master/EventListener/CorsListener.php#L52-56) => potentially affected depending on the complexity of regexes I'd say\n",
            "So this is just there to use if you want to throw an exception when a process call failed in your application? It doesn't seem enabled by default, which I think is good anyway.\n",
            "@kriswallsmith please see the related issue for more details. I realize this shouldn't be necessary, and it doesn't seem to be necessary on my machine either.\n",
            "Well as I said on the linked issue his proposed change breaks the behavior on my machine - so I'm not sure how we can make sure it works equally everywhere.\n",
            "Yeah I'm sure there is a way to make sense of it, but we will need more data points than you and me to make a proper patch. I'm on 5.3.8 VC9 NTS / windows, no suhosin.\n",
            "Ok closing this then. If you manage to figure it out though it'd be great. Because perhaps we can do something about it, or at least document it if we can't.\n",
            "It seems fine at first glance. I don't have time to look at it in detail right now sorry.\n",
            "This is a new 2.1 feature AFAIK so no it's not breaking anything. If _controller is deemed necessary then we should add it on the attributes, but not in the _route_params IMO.\n",
            "No it shouldn't because in 2.0 there was no _route_params in 2.0. But I sent #3437 that I think is a better fix. If you agree you can close this.\n",
            "@drak Please no. Moving the session was already a pain IMO since it was type-hinted in a few places (lack of interface, and interface doesn't include flash stuff still). Creating BC breaks just for fun like that is annoying for interop of bundles. It doesn't matter whether we have 10 or 15 classes in one directory.\n",
            "I think it's useful because it's a class we need in almost every project, and I don't think we're alone. It's super simple but makes me wonder every time why I have to recreate it. I don't want an additional bundle just for 3lines of code. Similarly I would say a JsonpResponse would be great, or maybe just an optional $callback arg to the json response to enable jsonp mode.\n\nI just had someone ask me on irc how to do JSONP so while I think it's obvious and I'm sure you'd think that too, it obviously isn't to newcomers. The Response stuff is hidden behind those render methods & such and people don't realize they can simply subclass. If a few examples were in core it would be both helpful for learning and useful on a day to day basis.\n\nAs for other formats, well JSON is typically used nowadays, except when you want more fancy XML APIs, but for that the JMSSerializerBundle + FOSRestBundle are superior and we can't achieve such things in a few lines of code. I could also see a BinaryResponse or DownloadResponse or such that has proper  force-download  headers and accepts any binary stream, but that's another debate.\n",
            "I'm using FOSRestBundle when it's needed, but when you just have a small scale app that needs one or two json responses for specialized stuff it is slightly overkill. And again, newcomers probably won't know about it, and encouraging using it for simple use cases isn't exactly the best learning curve we can provide.\n",
            "Meh. Forcing people to copy paste code from the cookbook in every second project isn't exactly a step forward with regard to ease of use and user-friendliness. \n",
            "I mean following this logic, things like the X509 authentication should just be put in cookbooks too because almost nobody needs that. We have tons of code in the framework, I don't get the resistance with adding such a simple class which makes code more expressive.\n",
            "I still fail to see why it doesn't belong in core.. There are tons of little helpers here and there, a base controller class made only of proxies, and then this gets turned down because it is simple to do it yourself? Sure it is simple, but it's repetitive and boring too. And while it's simple when you know your way around, some people aren't really sure how to do it.\n\nThe whole point of a framework is to avoid repetitive bullshit and be more productive. @fabpot do you have any real arguments against? I can see that you don't see a big use to it, fair enough, but do you see any downside at all?\n",
            "It's  processed  but not functionally altered, so the code remains native PHP code usable with any autoloader.\n",
            "A restrictive pre-processor is still a pre-processor. This kind of stuff is what FLOW3 does, and as far as I know, it causes massive pains (mostly with regard to debugging I'd imagine). \n",
            "@lsmith77: +1 on using the proposed PSR cache interface.. and to adjust to any changes it has until 2.1 is released. We should really push for finalization of it before 2.1, that way we can join the party.\n",
            "I would like to reiterate that PLEASE take a look at the [proposed PSR cache interface](https://github.com/evert/fig-standards/blob/master/proposed/objectcache.md) and PLEASE make this PR compatible as much as possible. It may well lead nowhere, but at least it has a lot of feedback built in already from many different projects.\n",
            "@vicb thanks. I know it's not perfect yet, but I would rather have us contribute to the effort than going our separate way.\n",
            "I agree with @stof. get() should return the value, and optionally you\ncan check if it worked if this is relevant to your use case.\n",
            "@vicb in most cases, cache entries contain data, not null. So I don't care so much if the key existed, if I get a null I can safely assume it did not exist and populate the cache. Also it's reasonable to assume people are familiar with [apc_fetch](http://docs.php.net/manual/en/function.apc-fetch.php) which works like that too.\n",
            "I'm for 1. too as I said above, for apc and just because it is more obvious, all the get() methods return something's value.\n",
            "I preferred the original proposal of `channels: [!bar]` to blacklist and `channels: [bar]` to whitelist for conciseness, but maybe the new approach is more in Symfony's spirit of explicitness.\n",
            "This should be an error because it makes no sense. If you whitelist, you don't need a blacklist anymore.\n",
            "@alexandresalome could you rebase/whatever and reopen this on https://github.com/symfony/monologbundle ? That'd be nice, because I think it's a great feature.\n",
            "The git/http/https thing is coming back every few months. It seems none of the protocols will work for everybody. http is the least problematic though.\n",
            "I'm sure you encounter more corporate networks than I, but anyway it's just the impression I got from user feedback/complaints we got on this stuff.\n",
            "This is fine by me (the PR), I think for camel-cased vs underscores, relying on the JMS bundle might be better, it's hard to do without metadata at the class/property level.\n",
            "I'm not quite sure if this is a regression that was introduced at some point, but I remember doing a lot of tests with this pre 2.0.0, and it was working quite well. I'd just like to be cautious doing this.\n\nRemoving the decoding might break some stuff though, I know I used getPathInfo in some places relying on the fact that the value is decoded.\n",
            "Just an idea: what about exposing flush() to twig? Possibly in a way that it will not call it if the template is not streaming. That way you could always add a flush() after your </head> tag to make sure that goes out as fast as possible, but it wouldn't mess with non-streamed responses. Although it appears flush() doesn't affect output buffers, so I guess it doesn't need anything special.\n\nWhen you say  ESI is not supported. , that means only the AppCache right? I don't see why this would affect Varnish, but then again as far as I know Varnish will buffer if ESI is used so the benefit of streaming there is non-existent.\n",
            "Should the options be sync-js and async-js? It might be a bit more self explanatory. Async has a common JS connotation but sync may be a bit more confusing.\n",
            "This is not right, because it depends on git config. For instance my git clones still use `\\n`, even though I'm on windows. If you change this, the tests will break for me. You should change your git config's `core.autocrlf` to be `input` or `false`, because I suspect it is set to `true`, which automatically converts everything to CRLF and that is not such a good idea.\n",
            "This seems like the wrong place to fix it, since you're quoting the full command, it may be that you're including arguments in the process name. This escaping should be done beforehand IMO.\n",
            "This breaks a lot of code out there for no real benefit (as far as I can see).\n",
            "As always, shoot first ask questions later hu? You can enable classmap instead of psr-0 if you like, I don't mind much, the point is just that your autoloader as it stands is wasteful. It's not a big deal in a context where it's only used to run phpunit but installing it as part of your project and having it registered in the composer autoload rules makes it a bit of a problem IMO.\n",
            "On a sidenote, I agree PSR-0 isn't all shiny, but I do wonder why you'd bash it so harshly given that your project is compliant with it?\n",
            "@claylo I don't see how wasting cpu cycles of many devs has anything to do with dogma. As written above, this has nothing to do with psr-0 or not. Composer's `files` autoloading is not meant for this though, it's meant for autoloading functions since they can't be loaded by standard autoloaders.\n\n@sebastianbergmann I didn't get what you mean there. Searching for source code files?\n",
            "@sebastianbergmann (answering https://github.com/sebastianbergmann/phpunit/pull/647#issuecomment-8655601 which seems to have landed in the wrong issue): I see now, so you disagree with the way it's implemented but not with the concept of the PEAR-style classnames => path mapping. The thing we did to work around this in Composer is support PSR-0 with a  search for source file  method, which indeed is slower since it needs to hit the filesystem, but provides more flexibility since you can add a class and it just works without the need to rebuild the autoloader's class => path map. Then we have a command (`composer dump-autoload --optimize`) that turns all PSR-0 packages into classmap ones, so if you do that during deployment/build you get a fast autoloader for production but without the dev-time inconveniences.\n",
            "@claylo the real release date is when you tag it, that info is in git, and read by composer/packagist. The release version is read from the tag name.\n\nI can appreciate that you old school PEAR people are doing it differently, and that's fine. However, I don't see any value in forcing people to run `package2composer` before releasing. If the requirements didn't change you most likely don't need to run it anyway. My point isn't that it might be forgotten to update the version in the package.xml, but rather than package2composer might be forgotten by people using exclusively PEAR. Removing those will make it work equally well and prevent mistakes. I don't see the problem with that.\n",
            "@claylo I should nothing thank you. I'm trying to discuss facts here. Using git for deployment has nothing to do with my pull request - how you deploy code doesn't matter, it's just how packagist reads and build the package info that I'm discussing here. And packagist does use git/VCS information. Besides it doesn't prevent PEAR from working either since it's just about the composer.json. I'm not sure how you read me as disrespecting anything. \n\nI'm just trying to make this work better and more easily for everyone. Apologies if that offended you.\n",
            "Glad to see this moving forward. I tried it and found a few issues though, @claylo please take a look to double check: #647 #648 #649\n",
            "@claylo I already tried to explain that the way autoloading is done in the phpunit packages is broken, it would certainly work better with classmap or psr0 if phpunit was patched to not depend on its own specific autoloader - patch which I also provided, though granted it might not be complete. Anyway this might indeed work better with one of the latest versions of composer that prevents multiple includes of vendor/autoload.php from triggering many autoloaders. If that doesn't fix it, then I guess it should be fixed in phpunit.\n",
            "@claylo:\n\n> Composer supports specifying a classmap file, or other  custom  includes. That's the whole point of the  file  option, right? To support composer installation for projects that don't adhere to classmaps or PSR-0? It would be smoother if everyone did do it that way, but the existence of 'file' autoload support indicates composer acknowledges and  works  with scenarios where packages do not do classmaps and PSR-0.\n- Composer does not support specifying a classmap, it can generate the classmap from the php files you point it to if you use the  classmap  autoloading option.\n-  files  is mainly made to force-load functions since those can not be autoloaded. It shouldn't be abused since it means those files are required at every request, no matter if they're needed or not. Using it for a custom autoloader should not be needed since composer's autoloader can handle everything via either psr-0 or classmap.\n- PHPUnit's problem, and why I said it should be fixed in PHPUnit, is two-fold: it has its own autoloader that automatically loads the autoloaders of other packages (meaning the package is not self-contained and that's not good) and it requires its own autoloader (or at least part of it) for some functionality, which could (should IMO) be achieved differently, see my other PR that was closed.\n\nYour solution of removing the files autoloading from the other packages so that stuff isn't loaded twice is not a great idea IMO because it means those packages can not be used standalone anymore, since they don't have an autoload config for composer.\n",
            "It's not just a preference, the current way of doing it is wasting cpu cycles. If you choose not to care that's fine, but for such a high profile project as PHPUnit I think this sort of attention to detail is warranted.\n\nAnyway I'll drop the case, this isn't going anywhere useful.\n",
            "@sebastianbergmann glad to see you agree that it's not an ideal way, no problem with not rushing it, as I pointed out in my PR I wasn't sure it's a complete solution, and I realize you can't do major changes without some BC assurance. Anyway the current workaround works so no problem, it's just not perfect, but it'll do for most people. It's not about making composer happy, I just tried to point out the problem because I noticed it.\n\nAs for PEAR vs Composer, I hope we can agree on  to each his own . That said I'd be happy to hear what problems you see, maybe not here though.\n",
            "I'm not sure this is a great idea. I understand your reasons, you probably wasted time debugging an issue, but the ability to override routes from third party bundles can be quite handy.\n",
            "If you manage to do that, sure it'd be fine by me. But the problem is that mostly this happens in `yml` config files, and yaml parsing is such that keys with same names override each other, so it's pretty hard to detect.\n\nI'd recommend `app/console router:debug` to see if a URL is really missing from the router.\n",
            "Thanks, I've had similar issues running tests here.\n",
            "Well as we discussed the 2.0 branch is not a priority right now, but yes if someone wants to port the changes to 2.0 it'd be good.\n",
            "Good to know, can you fix that in Monolog's FirePHPHandler too?\n",
            "Just use `$_SERVER['HTTP_X_FIREPHP_VERSION']`\n",
            "Also fixes #2613\n",
            "Right, sorry I wasn't looking, I just wanted the email spam to stop :p\n\nI added another  fix  for the $eventName, but I'm not really sure what outcome that has. If it produces funny results then I guess the best is to just revert the other commit indeed.\n",
            "It's one of those days uh.. Fixed that now.\n",
            "Yeah the get_class trick makes the profiler view pretty lame. It just has to be reverted.\n",
            "A simple $foo($arg) is faster than call_user_func, fine, but with all the if/else logic here are you sure it is still faster?\n",
            "I don't see why it would be slower, if it's a commonly fired event yes you blast away the `sorted` listener cache every time you add one, but most of the time those optional listeners are for the response, which is typically not sorted yet when you add the listener, so I don't think there is any overhead.\n\nAs for the code smell, of course it's a matter of preference, but I have the opposite view on control flow, I find it weird that listeners are registered when they are not used in the end, while doing it my way I think it's more clear what happens.\n\nFor sub-requests, I'm not sure what you mean. In this instance, and in most response listeners I have seen, the sub-requests are always ignored anyway by the listener.\n",
            "@drak: Every event is part the event dispatching system and therefore should be aware of the dispatcher imo. It's not like the ContainerAwareInterface which is gluing things that do not especially have to know about the DIC together.\n\nIf we do that, then we have to start arguing every time we need the dispatcher in a given event, because the original author did not think it was necessary, and then that will only make it into the next minor version, etc. Not fun at all.\n",
            ":+1:\n",
            "You should add some more isset guards in hasFlash etc so that it doesn't trigger warnings when you call hasFlash on a different type than status, and it does not have any flash message set for that type. This is just an example, I think other methods might be suffering from the same problem.\n",
            "Didn't read everything, busy, but regarding the mention of our security bundle, it is highlighting a big issue with priorities imo, in that we're missing a one-stop page that lists all the existing priorities, and possibly some more details like  if you do this, don't go above this priority or it'll blow up . Otherwise it'll just be a game of escalation :)\n",
            "Whoever does it please don't normalize `foo: bar` to `foo:bar`, it's really harming readability imo.\n",
            "@helmer I don't mind about single or double quote, they don't matter. Whitespace matters, the rest is religion.\n",
            "Sure, but I don't think anybody will argue that a minified file is more readable than a fully expanded one. And that's just about whitespace. Where the braces are placed doesn't affect readability as long as it's consistent. Single quotes are more readable in PHP imo because you _know_ from the get go it's a string without any interpolated variable, you don't have to read the full string to figure it out. In CSS, AFAIK single or double quote has no special meaning, so I don't care either way.\n",
            "Also @fabpot it'd be great if you would submit all the sub-tree packages to packagist.org, that way we could start using them individually. \n\nBy the way if you want the automatic versioning is now working so if you just delete the  version  from the json files, it should do the right thing. Up to you. See details on http://packagist.org/about\n",
            "This makes me wonder if it'd be possible to cook up an  extra_attributes  attribute, that would basically define attributes that are globally available on all fields, like this help_txt. The problem is we can't really extend the base field type since it's used by all others, so this would give a nice extension point. While it looks doable at first sight, I'm not entirely sure it would work well with the flow of the form builder.\n",
            "Ah cool I didn't know about that.\n",
            "I am not yet sure what I would use it for, but I like the idea.\n",
            "I do wonder if this should be reverted or not. I had to abandon it for another more customized solution here. The reason is that some strings aren't different enough to trigger UTF-8 or ISO-8559-15, take  \u00fc  for example, depending on the mb_detect_encoding encoding order you pass, it will always detect the first encoding of the two, because there's not enough info in  \u00fc  to distinguish. Then it force-decoded stuff that was already in ISO-8859-1, or failed to decode stuff that was in UTF-8 depending on the order I set.\n\nNow this might still come in handy for eastern european, arabic, russian, asian languages and the others I forget which are all way beyond the ISO-8559-1/UTF-8 compatibility range. So maybe it's ok to leave it in. \n",
            "I thought all form fields were trimming by default. Isn't that the case? Of course it could still be useful in the Validator if you view it as a standalone component.\n",
            "Yeah I just wanted to be sure my assumption was correct. I see no problem in having it in the validator too, but maybe it should be a bit more standard and be applied to all validators?\n",
            "Also I'd say it should be `trim` and not `trimmed`, though I see arguments for both.\n",
            "Also, just for information, the plan is to have `symfony/framework-bundle` be the  framework , with all dependencies to doctrine etc, though we should really only have strict requirements in there, and then in symfony-standard we ship a composer.json that requires the framework-bundle, doctrine-orm and things like that that are not essential to core. Otherwise people don't have a choice about what they use anymore.\n\nJust a comment btw, the json is invalid, all / should be escaped. However json_decode is nice enough to parse those without complaining, browsers do too, even Crockford's json2.js does, so I'm not sure if we should privilege readability over strictness, since it seems nobody really cares about this escaping. \n",
            "symfony/ is just the (mandatory) vendor namespace. Also ext/ has been renamed to ext- now, so it's not in any vendor, and should avoid potential issues.\n",
            "@beberlei: Mandatory. As of yesterday http://packagist.org/ will tell you you have an invalid package name if there's no slash in it. See https://github.com/composer/packagist/commit/1306d1ca82ecb004a885671b823c9793efa9354b#diff-3\n",
            "Yeah this was a compromise between the license header and acknowledging of the various people that worked on this. I don't think it's practical to have an exhaustive list in the composer file, so if @fabpot feels like removing himself that's fine by me, but I don't care much either way.\n",
            ":+1: :)\n",
            "Seems like a better solution for flexibility's sake. Would be quite awesome if you could add a cookbook entry to symfony/symfony-docs about this, otherwise I'm afraid we'll have to explain it over and over again :)\n",
            "Thanks. You can already do a pull request against symfony-docs, just reference this pull request in it so it's not merged before this is merged.\n",
            "Maybe the whole similar language stuff could be dropped from the PR, but I think it still is more accurate than the current code so I'd be happy to see some of those improvements in another PR.\n\nHowever, for such small things, packaging a full bundle sounds a bit silly, so I'd still like to see it in core, otherwise this kind of stuff is getting lost. The overhead is not so big since lang negotiation is only done once per session afaik?\n",
            "Since similar language support is completely optional (I mean, if it's null, nothing happens), the overhead is really minimal so I'd still think it's cool to have it in core.\n",
            "@fabpot Then maybe this should be scrapped from the request and moved to another service that takes a request header.\n",
            "@lsmith77 roughly half of the added lines is for the similar languages. The rest imo is a bugfix.\n",
            "Can you show an example of compiled regex (from the cache) that fails to match + some example url input that should match but fails?\n\nI just have a feeling that adding the multiline mod is not a good solution because it means you'll just match a part of the URL. I'd think adding the dotall (`s`) would be better so that `.+` matches even the linebreak.\n",
            "What @lsmith77 meant is to add a PHPUnit test case in the Router test suite :) It's always better to ensure the bug doesn't reappear later on.\n",
            "Looks good to me now. Thanks.\n",
            "What's the reasoning behind this? Is SQLite causing issues? Isn't it faster than file storage?\n",
            "Ok sorry I missed the other PR. Sounds great :)\n",
            "This will fail if the mbstring ext isn't enabled, you should still test for the mb_ function first.\n",
            "No idea, if it's there it should work. A temporary glitch somewhere can never be excluded unfortunately. If it's not reproducible consistently though not much we can do.\n",
            "Well, I'm open to suggestions, but with your way we have lots of code out there that will be left with a  charset: UTF-8  in the config that really has no meaning, if you change it nothing happens. My patch fixes it, and while I indeed wouldn't recommend overriding kernel params, I don't see why we should prevent it either. It's just weird if you try to set a parameter and for a while it looks like it's set but it isn't really.\n",
            "There is a ton of things you shouldn't mess with if you don't know what you're doing, but that's not the point.\n\nThere is currently a bug with a feature that is shipped in the default config. Either we fix it or we remove it and throw a warning, which is a BC break. I am ok with both solutions, but imo fixing it would be better. \n\nIf really you are concerned about kernel params being overridden, I can change the check in kernel to only check for charset.\n",
            "@Stof: The parameters only have to exist when the container is compiled/dumped no? If so, I would say @fabpot's fix is ok for me. But otherwise it would be a bit annoying indeed.\n",
            "Interesting problem. It is however strange that the filter > whitelist entry of src/Symfony isn't overriding the default blacklist entry.\n",
            "Good to see you fixed it on your end, this smelled of unnecessary hackery :)\n",
            "You can add false === $value though. I think that'd be alright. But indeed empty() will not work.\n",
            "Although there is also empty arrays for collection/selects maybe, maybe it's best to use `if (empty($value) && '0' !== $value && 0 !== $value)`?\n",
            ":+1:\n",
            "It's @schmittjoh that you want to talk to :)\n\nAs for this being in monolog, it doesn't really make sense because it's really just the StreamHandler (and it depends on which stream) that can be cleared, the rest is append-only.\n",
            "@cordoval: What I mean is, the StreamHandler is the only one that you could  clear . All other handlers like email and stuff can not be  undone , once you write in them, it's done forever. So adding a custom API in monolog to clear handlers doesn't make much sense imo.\n",
            "According to the spec it seems that PATCH requests shouldn't be of application/x-www-form-urlencoded content-type so it shouldn't match the first if, and in the second it's probably wrong to default to application/x-www-form-urlencoded, no?\n",
            "As I understand it, a PATCH request must specify a content-type or it's invalid, so we could just skip the second behavior if no content-type is present. \n\nAs your first link says:\n\n```\nThe list of differences is in a format defined by the media type of the entity (e.g.,\n application/diff ) and MUST include sufficient information to allow\nthe server to recreate the changes necessary to convert the original\nversion of the resource to the desired version.\n```\n\nSounds like PATCH is highly application specific, and not so standardized, probably because it's not very useful for most purposes.\n",
            "Yeah, but that sucks. Maybe bundles should enable autoescaping if they want to rely on it? :)\n",
            "Of course, we can also _always_ disable it. Say it was a bug, fix in 2.0.1, fine by me. \n",
            "Alright, let's close this.\n",
            "Wait what, the tag doesn't escape? That sounds inconsistently fail. Let's reopen. IMO we need to have the same behavior across the board, otherwise translators can never know if what they type will be escaped or not, so they don't know if it's ok to put html, they don't know if they should escape html entities themselves, etc.\n",
            "I think it would make perfect sense, escaping translations doesn't make much sense to begin with, but if we have one filter that escapes and one tag that doesn't, it's really bad imo. It means as a translator you never know where/how your text is going to be used, so it may or may not be escaped. As a template editor you probably know if the string should contain html so you could mark as raw those strings, but then why isn't the trans tag escaping as well? \n\n@fabpot you say that the trans tag only accepts plain text, sure, but the trans filter also in most cases takes only plain text, and here I don't know if it's normal but when I do `{{ 'foo'|trans }}` and `foo` is mapped to `<h1>Foo</h1>`, it escapes it, which is a bit annoying.\n\nAnyway I'm not really sure either or is better, but I think both tag and filter should do the same just so you can interchangeably use them without having to change the translation strings.\n",
            "The reason is that Cookie::__construct defaults to '/' btw, so if you don't specify it, and then call clearCookie without specifying again, the paths don't match.\n",
            "IMO if people want that they should specify the path manually, by default cookies are always set for the entire host and I think it should stay like that.\n",
            "@fabpot: ping? You said this was ok, but it was never merged.\n",
            "Thanks ;)\n",
            "I'm ok with this PR because it's not harmful, but as a rule, you should always call parent::__construct() in your own constructor when you extend another class.\n",
            "Well I'd say if you don't call the parent constructor, you should better check its code to replicate whatever it was doing, plus/minus what you don't want, otherwise you deserve the error :)\n\nHowever, as I said, I'm +1 for this PR, but not for the reasons you brought forward. It's not quite complete though. I'd also move those lines into default value for properties:\n\n```\n    $this->catchExceptions = true;\n    $this->autoExit = true;\n\n\n    $this->ignoreValidationErrors = false;\n    $this->applicationDefinitionMerged = false;\n```\n",
            "In that case it seems less dramatic since it's lazy-initialized, one could argue there's a potential memory upside. Anyway, let's see what @fabpot thinks of all this, but it's not a huge deal either way.\n",
            "@fabpot: Using GitHub's green merge button should be ok just this one time? It's only modifications in the comments after all.\n",
            "@odino: you can still do another PR just for the test cases if they still make sense.\n",
            "Ok, I updated this to just clarify the message, because when I got the issue after some serious copy-paste coding, I thought it was quite confusing - it seems to imply you mistyped the class name when using the class, and therefore it was not found, while the typo is in the class's file itself.\n",
            "I don't see a good reason not to allow it, assuming it causes no technical problems. If people do stupid things with it, we can't always help them.\n",
            "@fabpot: Isn't it possible to enforce stricter guidelines on the route? Like throw an exception in case requirements aren't specified for all segments that touch each other? It's already possible to screw up the regex by doing stuff like:\n\n```\nfoo:\n    pattern: /{a}/{b}\n    requirements: { a: '.+' }\n```\n\nMy point being, if people want, they'll break things, but if we can offer some guidelines and then allow power usage of tools, that's nicer than being restrictive.\n",
            "Alright, let's drop it for now then. Maybe later :)\n",
            "I suppose replacing the sprintf call by a plain `$foo.':'.$bar...` string would save some more cycles, if this is really called as much as you said. It's not like it's very useful in this case anyway.\n",
            "Then maybe we should somehow support redefining services with the same name while keeping the old one as parent, otherwise we need this foo.default for every service out there?\n",
            "I guess you'd do it anyway, but we should pick a winner between .real and .default\n",
            "Yeah I definitely agree it's not nice, as I said it was just an attempt to see what the result would be. Let's close this, I leave you to decide what to do with the #1684 - @schmittjoh's solution sounds fine if we really want to clean up the parameters.\n",
            "Maybe `squash`, `resolve` or `internal` would do with a short name, basically it's just resolving the names within the DIC but not giving access to them after it.\n\nThe problem is how to represent it in Yaml. What about:\n\n```\nparameters:\n    foo:\n        value: bar\n        squash: true\n```\n",
            "Ah true, parameters aren't flat strings. Crap. It sucks to introduce something that's not supported across the board though. Maybe `_foo: bar` would be a private parameter, but that's also a BC break, and it means changing visibility requires a rename which is always a pain (hello PHP4 privates).\n\nAlso, if we do this, we need to make sure parameters you redefine (possibly in yaml) are made public unless specified otherwise, it would avoid some WTFs I think.\n",
            "@mheleniak: Don't worry I didn't forget about your issue :) I tested it here, matching on commas is still working, even when it's urlencoded. Please check it works for you though.\n",
            "I think the requirements of the route should be adjusted rather than hacking this together. Which I'm not even sure would work since the url is decoded by the urlmatcher before matching it against the regex.\n",
            "In `FrameworkBundle/Resources/config/routing/internal.xml`, you should be able to add the requirements to override the default ones. I'm not sure if that'd fix the issue, but I think so. `[^/]+?`\n",
            "Well I think slashes aren't allowed in controller names.\n",
            "Ah sorry I misread :) Then it's fine I suppose.\n",
            "It shouldn't be a problem if you restrict _format and have no conflicts (like .xml at the end of your path), but yes, it can create problems theoretically. Maybe we should put the _format before separated with a / or make it mandatory, if it's possible, since it's all generated by the framework anyway it and never exposed to users it shouldn't matter much how the url looks.\n",
            "Yeah I got that, but what about my proposal? What would `/{controller}/{_format}/{path}` do if _format is empty? Would it still match correctly with `$controller//$path` ?\n",
            "The problem is, if path is `foo.xml` and _format is null, it'll be parsed as path => foo, _format => xml, which is not the same.\n\nAlso . doesn't have to be escaped in character classes.\n",
            "Or, as I said above, you have to make the _format a mandatory arg, and then if there is always a format, `foo.xml` as path will produce `foo.xml.html` with an html format, in which case it'll work.\n",
            "That sounds like a great change. I think it might explain/fix the issues I've encountered with AppCache on my production box. Never had time to look into it, but IIRC I noticed the missing Content-Length, and it seemed to load forever.\n",
            "@lenar all you have to do is skip setting the Content-Length for `1xx`, `204`, and `304` responses I believe.\n",
            "But this should maybe be done in sendHeaders() \u00e0 la `fixContentType`, because you can't be sure about the statusCode before that.\n",
            "@fabpot: Please merge, this is a regression in yesterday's PR\n",
            "Wow guys, if this turns into a full blown class generator solution, I'm happy to close the PR.\n\n required  is not a name that's commonly used for main page elements, it's typically associated with forms, and therefore I don't see the need to make it unnecessary longer/namespaced. Similarly I don't see the need to add it to the input/select/.., because they already have an attribute, which you can very easily select as: `input[required]` in CSS. That works everywhere except IE6, but we can't build for the future on very old browsers. If you really want support for IE6, you can override the templates imo. But core should be looking forward, as it already is with HTML5, form markup, etc.\n\nAs for calling it form-label-required or label-required, again, I don't see the benefit, you can use `label.required` if you want to avoid conflicts with non-label elements having a required class, or a safer `form .required`. There are plenty of options in CSS itself, let's not make this overly complex.\n",
            "Really? Come on, we're talking about forms, it's not like you have billions of form/input tags per page that have to be parsed by the browser when you select that. Also you don't have to select the elements, if you want true performance just use no stylesheet, your users will thank you.\n",
            "@schmittjoh, @lenar: We're catering to the most common use case, for which this will be more than fast enough. Small/medium scale websites don't have to optimize on CSS rules parsing, they usually have much bigger issues to deal with. If you really care about it, overriding the block to remove the class is just as easy as it was to for me to add it, but IMO this is the edge case.\n",
            "Add a getSession() if you want so we can do `$this->getSession()->setFlash(..)`, but adding direct shortcuts makes no sense IMO. It disconnects users from the reality of where things are actually happening when they do a function call.\n",
            "Yup, it's definitely a good addition.\n",
            "@fabpot: I'm not sure why this is tagged 2.1, but IMO this should go in now.\n",
            "I agree it's nice if it's all clean, but that kind of PR is not so great imo, it destroys history (blame), and potentially breaks a bunch of outstanding PRs too.\n",
            "I'd have made that a `\\LogicException`, but that's just me hating on custom exceptions. Otherwise as said on IRC, :+1:.\n",
            "@rande: Even for reusable bundles it's alright, as soon as you need/want an extension you can just add one and nobody will notice the difference. If you do that now people that included the file directly will get burnt since the extension could define stuff that the config include then overrides etc. I'm not sure which are the priority rules there anymore, but it sounds dangerous.\n",
            "@lsmith77: I think it'll be ok with the generator, let me do the other PR then you can still complain if it doesn't work for you.\n",
            "Creating a bundle is so boring that if the generation works well nobody will want to do it without I think. Besides it's not really optimizing for generation, the current solution worked just fine except for the fact it may lead beginners to doing mistakes.\n",
            "There https://github.com/sensio/SensioGeneratorBundle/pull/35\n",
            "No problem, thanks for reporting it and doing the work of figuring out the problem :)\n",
            "Added tests and support for __toString + numbers (kinda pointless but well..)\n",
            "I thought forwarding everything was useful. But the syntax for the simple use case (only label) just became unusable.\n\nI'd have liked an auto-handling of the label by doing: `{% form_row('foo', 'label') %}` => and in the form_row function just check if the data is only a string, wrap it into `array('label' => array('label' => $var))`. Then we'd keep the flexibility to pass any attributes when needed, and the simplicity of the common use case.\n",
            "Yes I know it didn't change I was referring to your proposal that was an improvement in functionality but not readability.\n\nAnyway I'm just asking here to see what @fabpot thinks of it, if it's not gonna happen I'd rather not spend time on it, especially since I don't know the internals of the form rendering too well.\n",
            "I don't think those constants bring any value if they map to things that will never change and that are explicit already. It's just adding extra code.\n\nEventually a `$request->isMethod('POST')` method I could see a small benefit to it, but for the rest since we can't cover all possible http methods that are out there we shouldn't do that imo.\n",
            "@fabpot: just ping me when you are merging this one, so I can merge in monolog and we avoid out-of-sync issues.\n",
            "Ah right, I thought the interfaces wouldn't match, but PHP allows extra args it seems so I'll merge right now.\n",
            "Well yes otherwise you break the interface. Anyway it's merged so @fabpot, anytime :)\n",
            "It would be nice to use openssl on windows OR uniqid + warning imo. Throwing an exception is really not user friendly, or at least you should say that users can also upgrade to 5.3.4+ to get the correct behavior, forcing them to override a method sounds like we're not trying hard enough.\n",
            "@schmittjoh: Sorry, I overlooked that :) Still think you could mention 5.3.4+ as an alternative to writing your own RNG provider though, but apart from that all good for me.\n",
            "Alright makes sense, sorry I missed that.\n",
            "It's not because many people have editors that strip trailing whitespace.\n",
            "Your  <?php   to  <?php   replace seems a bit wrong :)\nWhat's with the blank line before return statements? This sounds wrong. For example this is perfectly valid imo and having a blank line before the first return would totally mess it up:\n\n```\nif ($foo) {\n    return false;\n}\n// do more\nreturn true;\n```\n\nDidn't check the entire diff btw, just looking at your script here.\n",
            "I think it's caused by the slash separator, but packing parameters together like that makes no sense anyway with the default  [^/]+  regex. If they have no slash separating them, then the first parameter will always grab everything.\n",
            "Symlinks on windows, although technically possible, don't quite work with PHP on most setups. Also git doesn't seem to support them either on windows (not sure why not). For those reasons, and although I'm sure this doesn't apply to every project, I would recommend you just have everyone run `assets:install [--symlink]` on their local machine, and make that command run on the server as part of your deployment process.\n",
            "I get what you're trying to do, but IMO the thing about having a bunch of `define()` calls + the if/else blocks that have to be merged deep down in the framework just indicate that there is a design failure somewhere. For the define calls I think FirePHP should not require it, or have different non-static/global ways of being configured, for the rest, I think/hope we can figure out a way to do it with monolog.\n",
            "With Firefox 5+, I'd recommend using DeveloperCompanion that you can download at http://developercompanion.com/ - you do not need the paid version for simple logging. If you use monolog 1.0 it should work with that, at least it does for me.\n\nThe whole Insight protocol may be merged at some point, but for now it is way too intrusive IMO. I hope @cadorn can improve that aspect, remove constants and stuff like that and make it a truly encapsulated library.\n",
            "Note that you should uninstall FirePHP too.\n",
            "The problem is, since I don't see a sane way to integrate this in Symfony, I didn't really look at how to integrate in Monolog yet either. The way I understand it, people can use the advanced feature of it by just doing the wrapping stuff themselves, and they don't need a particular monolog integration for that, since monolog already logs to firephp just fine. \n\nI'm not sure what the Insight stuff brings (to either Monolog or Symfony users in general) that is worth adding those constants. I get that you want to provide the constants and the whole wrapping as an option, but I doubt there is any technical limitation to also letting users bootstrap it in a more encapsulated way? It could rely on a request listener or whatever if needed, but dropping stuff in the front controller is not gonna happen I believe.\n",
            "Beyond the ON_\\* prefix that I still think is not necessary, this is all good for me.\n",
            "Agreed, this stuff is framework debug information.\n",
            "Yeah, that's true, maybe we just need to reintroduce (again, meh:) NOTICE between INFO and WARNING.\n\n@kaiwa Of course the other way could be that you just add your DB handler to the app logger stack. That could be done in a onCoreRequest listener or such, basically you'd have to call `->pushHandler($yourDBHandler)` on the `monolog.logger.app` service. That way your messages will flow to it, but it won't receive noise from the framework stuff since those log on monolog.logger.request and other log channels.\n",
            "Just FYI, from Monolog\\Logger (which has CRITICAL and ALERT):\n\n```\n * Debug messages\nconst DEBUG = 100;\n\n * Messages you usually don't want to see\nconst INFO = 200;\n\n * Exceptional occurences that are not errors\n * This is typically the logging level you want to use\nconst WARNING = 300;\n\n * Errors\nconst ERROR = 400;\n\n * Critical conditions (component unavailable, etc.)\nconst CRITICAL = 500;\n\n * Action must be taken immediately (entire service down)\n * Should trigger alert by sms, email, etc.\nconst ALERT = 550;\n```\n\nThe values kind of match http error codes too, 4xx are expected errors that are not really important (404s etc) and 5xx are server errors that you'd better fix ASAP. I'm ok with the descriptions, but I think alert and critical should be included too. I'll probably update Monolog docblocks to match whatever ends up in the docs.\n",
            "@kaiwa you can do a lot, but not from the default monolog configuration entry, I'm not sure if we can really make that fully configurable without having a giant config mess. Please refer to my [comment above](https://github.com/symfony/symfony/pull/1073#issuecomment-1234316) to see how you could solve it. Maybe @fabpot has an idea how to make this more usable though.\n",
            "Didn't try, but if it works, +1 of course.\n",
            "Maybe it should be called attr for consistency with the template stuff, or the other should be renamed attributes. Other than that, I'm +1, data-\\* attributes are awesome, and abusers will find ways to abuse things either way.\n",
            "You can use `array('attr' => array('data-foo' => 'bar'))`, which will output `data-foo= bar `, which can be read easily by jQuery for example as `$('el').data('foo')`. It's a standard compliant and elegant way to pass extra data needed by the JS code along with DOM nodes, without polluting everything with script tags and all.\n",
            "Well, I agree it most likely belongs in the template, but it's kind of data stuff that is not directly impacting the display rules of the element, so in some cases having the possibility to set that from the php code might be useful. Anyway I'll let @mvrhov answer maybe he had a more concrete use case. I just think it's nice to leave the door open, but I don't really need it.\n",
            "AFAIK from past experience with pipes on windows the only solution at some point to avoid blocking on either platform was to fork the entire logic (well, the code was a bit more complex than this), the current solution seems ok to me if it works everywhere.\n",
            "@fabpot: merge ping\n",
            "The application/x-www-form-urlencoded content type should be used whenever you use form data stuff, which look just like query params in the url, but placed in the request body. When you do a POST with jQuery, it will encode the object you pass it in that form, and I sure hope it uses the proper header alongside it.\n\n@fabpot: One use case that might not be handled is a PUT with multipart/form-data? Not sure if that's valid, but I don't see why it wouldn't be.\n",
            "I think it's alright in the sense that for those requests, you probably don't want to do anything else than parse_str() on that data, but yes it maybe should not be in core (but rather handled in RestBundle and such, and therefore remain optional).\n",
            "@fabpot: merge please\n",
            "Well, deserialize decodes + denormalizes, serialize encodes (which implicitly normalizes when needed), so they're reverse operations. That being said yes they're not very useful and I think they weren't there initially. I don't see the harm in keeping them for clarity though.\n",
            "I'm not trying to play who owns what here, I don't care about my component or not. I agree with you that it is a cleaner design, but the problem is that some encoders do not require normalization, and some might even need that the data is _not_ normalized. \n\nAs I said in your previous PR, I wouldn't be against an interface or such for the encoders so they can advertise whether they need normalized data or not. That way everything is separated but we don't force-normalize stuff that doesn't need to be, which I hope you can agree is also a good thing. And as I also said on IRC, I'd rather discuss this and find good solutions than have you fork it all because you think I am not willing to change it or I don't know what, which is not the case. I just want to keep use cases in mind and not just change things for the sake of clean design.\n",
            "Meh, github quoting showing it's limitations.\n- Will fix.\n- Not sure what you mean by  no clear way on how to do things .\n- HtmlEncoder for example does not require the normalization pass. I could see custom cases where you want real objects with their custom methods to render the view as well, I have no real use case right now but we should leave the door open imo.\n\nI'll update this PR.\n",
            "Ok, pushed a bunch of new changes. I hope that can make everyone happy :)\n\nOne more use case for the NormalizationAwareInterface is the XmlEncoder as you can see, since it merges simplexml nodes straight into the DOM tree it's creating; normalizing those into php arrays before wouldn't make much sense.\n\nThe rest has been fixed except for the $properties thing. I'm not against it, just don't have time right now.\n",
            "As much as I enjoy reading your early hour debates, you're two stubborn Germans and this will never end :) Also I'm leaving for Italy in a couple hours, and have no more time for this discussion. \n\nI did the clean thing in e6a02482c7ff8083cec69c501670d1ca0632891f, I hope everyone is happy now, or at least that you can adjust your code and live on.\n\n@fabpot: I think this is mergeable now.\n@schmittjoh: Once merged, if you could please use this stuff in SerializerBundle, it'd be great, so that one day there is a hope to move that to core.\n",
            "@schmittjoh: Well I'm glad we discussed things, but at this point it was more about being right than having a constructive discussion imo, and especially about a little detail compared to the rest of the PR. Anyways I implemented it as you wanted, so I guess it wasn't a waste of time.\n",
            "@fabpot: it is mergeable, the only pain point left (?) is that @schmittjoh thinks it should be more decoupled, and me & @lsmith77 like it as it is now. I'd still merge this and then we can see about a second step if needed. I don't think anyone is against the changes in this PR.\n",
            "@fabpot: good to merge\n",
            "Oops :p\n@fabpot: good to merge\n",
            "Shouldn't it go into `Symfony\\Bridge\\Monolog\\HttpKernel`?\n",
            "Agreed, just thought it was the standard, but I don't mind. \n\n@fabpot: good to merge then\n",
            "@fabpot: ack.\n",
            "Ok closing this then.\n",
            "Good to see you sending PRs instead of just pointing out errors in commits ;) And +1 on this btw.\n\nThe only thing that could be nice to make this complete is to add support for FILTER_FLAG_NO_PRIV_RANGE and FILTER_FLAG_NO_RES_RANGE in the Ip Constraint.\n",
            "It really shouldn't happen unless people willingly open up their config or app_dev file to the outside world, but since this apparently happens, +1.\n",
            "Awesome! The only problem I see is that the Date and Time types have a pattern option already. Not sure what it does though, so I guess it just should be renamed to a more explicit name.\n",
            "I guess he meant only add whitespace to align keys up to some point, then those that overflow are just not aligned.\n",
            "Yeah, I was gonna suggest this should be executed on move() or right after it rather than in the constructor.\n",
            "@xaav: this isn't about the code base, it's about the tests. Of course you shouldn't use DIRECTORY_SEPARATOR everywhere in the code because it doesn't matter, but if some tests are breaking, that's annoying because you never know if you broke something.\n\n@vicb yeah the problem with realpath is it only works if the file actually exists, I just fixed the tests without really looking at what they were doing. Anyway I'm closing this since it duplicates your PR.\n",
            "Ok, I'll reopen for now, just to be sure we don't miss it. This should be closed if https://github.com/symfony/symfony/pull/674 is merged.\n",
            "@fabpot: updated, only the fix to the tests is left from the previous PR, and I removed the log method.\n",
            "@fabpot: good for me.\n",
            "@schmittjoh: what about @rdohms's other suggestion? To me having the full namespace in the `@import` every time is also a pain, and if it could be mitigated it'd be great.\n",
            "I think the point of checking in the kernel is that you don't even enable the bundle.\n",
            "All I'm saying is the check probably can remain for performance reason, maybe with a !=  prod  instead of ==  dev . I'm not against your patch though.\n",
            "I think your entity (or whatever data class) should default to have true in that property, and then the form should be fine.\n",
            "I'm +1 on this, but I'd prefer  callback  than  function  in the phpdoc blocks, if that's not correct I'll be happy to be corrected though :)\n\nIn general I don't see why anything should be restricted to being a closure, if we expect a callback we should accept any callback, no matter what. Now if the `$closure()` syntax is indeed faster and we need that in some internal performance critical parts where we know we'll only have closures, I think that's ok, but for user-exposed areas if possible we should accept any callback.\n",
            "Well.. I don't care too much either way, both are readable imo, but it seems to me like your replacements aren't right. `continue 2` doesn't jump 2 braces, it jumps two foreach/for/while loops, your goto labels need to be out of the parent loop.\n",
            "Nah the only confusion is that I read `continue` as `break` somehow on the first diff, but other than that I find the goto kinda confusing for `continue`. For break I think it's acceptable because you jump out and that's it, but for continue it just feels weird.\n",
            "If it works, sure go ahead. Didn't really check in detail but it sounds ok.\n",
            "I'd prefer \n\n```\norm:\n    auto_mapping: true\n    mappings:\n         FOSUserBundle: { auto_mapping: false }\n```\n\nMore consistent, but yeah that sounds like a good option.\n",
            "I just don't like false or [] because the null (~) value means automapping, it's a bit too many magic-meaningful-values. One is ok, but then it gets complicated.\n",
            "Oh right, sorry. I guess the current patch is good then.\n",
            "Thanks (and oops:) / @fabpot: good to merge in case it's not obvious.\n",
            "I thought the IRC meeting concluded that we would add those as necessary/required, not enforce it all at once.\n",
            "I still think this is not necessary and adds a lot of use statements for no good reason. I've to think about using those damn exceptions when I write code which is annoying.\n\nAnd on top of that, since all components are so decoupled, this doesn't really serve a purpose, since one call to some component is very unlikely to throw two different `UnexpectedValueException` from two different components. The cases where it could really be useful to catch one specific exception will probably be so rare that it should be done on a case-by-case basis imo not as a global policy.\n",
            "Just for the record, I never thought this was a good idea (I mean I'm not changing my opinion here). There is just not enough of a cost/benefit for me. But it's mostly taste I suppose.\n",
            "Good to know I'm not rambling for nothing ;)\n",
            "I'm all for this but did you check you didn't cast any objects? Because if an object is passed, the cast will just grab its public properties, while the array($obj) will really wrap it into an array.\n\nSame goes for null, `(array) null` => `array()` instead of `array(null)`. I don't know if it matters in these cases, just saying it could be an issue.\n",
            "We don't support var replacements during install, so if you don't set the version constant before tagging this is not gonna be easy. For users it's fairly easy, they can do `composer show phpunit/phpunit` and see which version they got installed. If you really want to do it, you can hack something up using the composer installed repository:\n\n```\n$packages = json_decode(file_get_contents(dirname(__FILE__) . '/../../composer/installed.json'));\n```\n\nThen you can check in packages for the version of phpunit/phpunit. Same should be done for installed_dev.json since it's likely to be a dev requirement only. \n\n(ping @naderman)\n",
            "You should use `$request->isXmlHttpRequest()` to test for that.\n",
            "The favicon was different since it was a 404 I was trying to solve, and the 404s can't really be detected in the listener. However in this case, we can target ajax requests pretty accurately. Again it's just a problem of  main page  vs hidden request that the browser makes in the background _after_ the main page is loaded. IMO you want to redirect the user to whichever page they came from, not to some random URL the browser tried to fetch.\n",
            "@schmittjoh: Depends how you do it of course, but I'd think if you build such an application, you don't get redirected to a login page, you load the login form from the server with an XHR and you display it to the user, and you store what you wanted to load in the first place so you can load it once you're authenticated.\n\nAnyway I agree such stuff is not really great to have in core, we just need to document how to easily grab the referrer and store it in the form and then use that to redirect.\n",
            "Awesome. It's been on my list of little things to fix for about a year now.. never got to it :)\n",
            "Well to me the alias is just a pointer to the concrete service, and if you add another logger implementation, the aliases might conflict but you can still tell them apart by using their concrete names. \n\nThat being said, I'm ok with updating the patch, just wanted to say it reduces flexibility, but I don't think it's a real problem in this case.\n",
            "This also allows btw to have pure decoders that can't encode back, though I'm not sure there is any use case for that.\n\n@fabpot: good for merging\n",
            "@fabpot: can this be merged or closed? Sounds like a good cleanup, but it will slowly become a hassle to merge with time.\n",
            "I like the approach of http://trac.symfony-project.org/ticket/9686 better, because you define which routes should be served how. This could even be enforced by specifying the _scheme in the requirements maybe.\n",
            "Just curious, why ssl and not https? If you call the other one http, I think it's better, because after all https is just http + ssl, not _only_ ssl.\n",
            "I'm not sure why simplexml can not be used here? \n\n```\n$xml = simplexml_load_string('<response><person gender= M >Peter</person></response>');\necho $xml->person['gender'];\necho $xml->person;\n// outputs MPeter\n```\n\nThis works fine for me. I believe DOMDocument is a tad slower/heavier than SimpleXML, so if possible I'd like to keep it how it was before.\n",
            "Ok great. Well this all feels a bit hackish, but since there is no good way to represent XML with native PHP datatypes, I guess it's as good as it gets. \n\n@fabpot - this is clear for merging as far as I'm concerned.\n",
            "The charset is missing, so my CSS file is not seen as utf-8, which sucks a bit.\n",
            "Well it's quite a specific problem I believe. Usually files are either served through apache (where you can configure the charset yourself), or the stuff served via the framework is either xml (charset in content), json (charset always utf8), html (for that we default to utf8). I don't really have time to check it out right now.\n",
            "> 1. <link charset=  > or other metadata from the linking mechanism (if any)\n\nThat's deprecated in HTML5 btw\n\n> The question of course is whether the UAs follow the spec or not.\n\nEarlier I tried in Opera and Firefox, both failed to read the file as\nutf-8 by default. I tried with @charset, that worked everywhere except\nfor Firefox. The header solved it everywhere.\n",
            "Nah of course not, who uses anything else than UTF-8 these days? :)\n",
            "I'm definitely :+1: - the only use case that it disturbs is people trying to debug issues in the framework itself, which in time should hopefully only affect core devs, and if you really need your syntax highlighting you can disable the bootstrap file in your app_dev.php and just require the autoloader afaik. Of course for looking at compiled DIC and stuff it's not as nice, but again this is a use case that should be less and less common with time.\n\nOn the other hand, people with no Sf2 experience coming to it with their IDEs and opening cache files by mistake sounds pretty bad to me. I saw how it looked on @lsmith77 machine it's pretty annoying every time you want to jump to a class that's in cache it offers you two choices and you have to select one or the other. Beyond the fact that it's confusing, it's also slower, and it occurs much more often in day to day business.\n",
            "Above PR has been merged, so this can be merged imo.\n\n@stof: maybe just one comment. rotatingfile should probably be rotating_file. Same for fingerscrossed actually I guess.\n",
            "Yeah I'm not blaming you ;) I just noticed and realized it was probably not a good idea. The BC break is minor, I'd even say we could accept both values, but let's see what fabien thinks.\n",
            "Done https://github.com/symfony/symfony-standard/pull/50 - found nothing in docs\n",
            "If he would agree to at least adopt the PEAR standard for autoloading, and split up his classes into different directories/files, that'd be great already, no need to force the jump to PHP5.3. I managed to make the Predis author change his mind about this, so it's not a hopeless cause. We just need to inform.\n",
            "Well, PEAR is PSR-0 compatible AFAIK, considering it replaces _ to /, it just doesn't use namespaces, but it's the same thing really - http://groups.google.com/group/php-standards/web/psr-0-final-proposal - couldn't find anything PEAR specific, but it should be easy to explain.\n",
            "Congrats for the attention to detail of changing the Shell output as well. \n",
            "I couldn't care less about xml configs but I agree this patch made sense. It should be a fake url maybe, but still should be something useful by default. `'http://'.strtolower($this->getName()).'.bundle/'` ? :)\n",
            "Not sure what you're trying to fix, but I hope that's not making CSRF tokens one-time-use only. That'd be pretty annoying for people using tabs heavily.\n",
            "Ok got it - I didn't have time to look at what the code did exactly - but with the explanation it looks good to me. I mean it's a bugfix, no arguing.\n",
            "Good idea, thanks :)\n",
            "@bschussek: Regarding the default currency, I don't think there should be one. If you want a money field, you should be able to specify the currency you want with it.\n\nOther than that, after a quick look, the thing that weirds me out a bit is that everything is a Type, fields are types, forms are types. It's just naming, but I don't really get why Type is better than Field. Sure they seem to be only configuring the builder, but still, in effect they are the closest representation of fields that we have in code, so why not call them that? \n\nThe rest looks good at first sight, although the level abstraction might get confusing to some. Time will tell.\n",
            "I still think they should be called Field and Form. Because yes, they are not really fields or form, they're just configurations of lala, but that's an implementation detail that users shouldn't have to care about imo.\n",
            "@schmittjoh @brikou: well yeah, that's what I was trying to say before. Those types _are_ the closest things to fields and forms that we have, so let's call them that, even though it's not a concrete implementation of a field or a form but just a way to configure the internal classes, nobody cares about that, people know about fields and forms, and will talk about that, and will wonder wtf Types are.\n",
            "@bschussek: If one does `$form = $factory->create(new RegisterForm())` and then expects $form to be his RegisterForm, well I think they have issues. On the other hand we could say that maybe the factory should inject stuff in RegisterForm (handled by the parent class) and then return the form object, then your `$form` would actually be a form class + your method.\n",
            "I'm not sure where this is used in the codebase exactly so maybe I'm saying crap but why do you resolve those URLs? Why not leave them as they are? All browsers understand `//foo.com/blah.js` so there is really no need to resolve the urls I think. Again, sorry if I misunderstood intent.\n",
            "A bit more research indicates that _maybe_ it was actually a good idea :) \n\nhttp://robertnyman.com/2010/02/18/css-files-downloaded-twice-in-internet-explorer-with-protocol-relative-urls/\nhttp://stackoverflow.com/questions/4303633/preventing-secure-insecure-errors-by-using-protocol-relative-urls-for-image-sourc\n\nVarious edge cases that might make it problematic. Since this feature is only useful to developers (i.e. not having to type the protocol selection logic), and serves no real purpose in the output (afaik) beyond the feeling of having hip URLs, maybe it's good if the framework resolves them.\n",
            "That is great flexibility. I'm all for it.\n",
            "(thinking out loud..)\n\nGiven that all those  complex  response types are mostly used for web services, and given that for web services you actually don't really need a custom error handler (it's not like the consumer needs to see a pretty error page for json requests), I think it's indeed a bit over the top to have this response>exception>response cycle.\n\nFor 404 errors and such though, that you want humans to see, you should then use `NotFoundHttpException`, and we should advertise that only. But that's inconsistent and awkward to miss the ability to return a `NotFoundResponse`. \n\nMaybe `HttpException` should take a `Response` injected as argument, so you can inject the `NotFoundResponse` in it, and in that case the exception handler wouldn't re-create a response but just set a new content in it or just not do anything to it if there is no template defined for the given format. Best of both worlds?\n",
            "@lsmith: I'd expect this is gonna happen more than once. He's got lsmith on twitter and irc, old habits die hard. You can switch off notifications for the thread at the bottom of the page btw.\n",
            "I think it'd be better to add the `use Symfony\\Component\\HttpFoundation\\RedirectResponse` in the DefaultController template, that way if people just copy paste `return new RedirectResponse()` from somewhere, it'll work, but it doesn't make them think they need a dependency on the redirect() method to do this.\n",
            "This is great, but if you don't specify the version I hope it takes the last-modified date or something as a version? If it doesn't yet, then it would be a great addition, maybe with an explicit version: auto or something..\n",
            "This works in unit tests, but won't work for Request::createFromGlobals(). I'll try to work on some integration with the Serializer if I can find time this week.\n",
            "@kris yeah that's the plan, provide a facility to build REST services, but this shouldn't be part of the Request class since it can't read php://input without potentially creating problems.\n\n@john: the issue is that on some SAPIs, you can only read php://input once, so we shouldn't do it automatically.\n",
            "Building a generic facility in your layout that displays all messages, no matter what their key is, and uses the key as the css class for example.\n",
            "That would require that you use the exact same flash message key everywhere in your app, and then wrap the message in a hash with class/message. Kinda sucks. I really don't see what's the big deal about adding this method?\n",
            "Well alright, IMO all collections-of-stuff that are protected should be accessible as a whole. There always is a use case for iterating over stuff versus knowing exactly what you want.\n",
            "Because the visibility defaults to public, and you can't actually have anything else than public, so the convention is to specify nothing.\n",
            "Don't have time to look at the implementation, but from a conceptual point of view, I think the bundle aliases are great. That way we maybe could allow people to refer to bundles with FQCNs, or alias, rather than the current getName() stuff which has seen some controversy on the ml.\n\nSo you'd have `blog:Post:new` or `Acme\\BlogBundle:Post:new` instead of `AcmeBlogBundle:Post:new`. Should make the  shortness  and  explicitness  camps happy :)\n\nFor the other change, I'm not sure, it feels a bit weird that getExtension returns nothing or one ext, and then if you want two you have to use a completely different code path (that'd still be done in boot, right?).\n",
            "@edorian: Pirum 1.1 just means that when you load it via a [PEAR repository](http://getcomposer.org/doc/05-repositories.md#pear) it will load faster than it did before. The package name should then be `pear-phpunit/PHPUnit`.\n\nAs for having phpunit as part of your requirements, we don't have it yet, but eventually there will be a `require-dev` section just for that purpose. Only for when you work on a lib, and then having phpunit as part of the deps would be quite nice I think. Having composer support in PHPUnit itself would allow leveraging a few more features than with the PEAR fallback.\n\nI haven't tried installing/running via composer yet, but I think one of the issues someone had was the fact that PHPUnit or one of its dependencies still relies on require_once and the include path to be setup, which just won't work with Composer. Autoloading we can do just fine.\n",
            "Well yes, but everyone keeps saying this is discouraged and omg omg if you do that there is no BC guarantee. So yes, I think it's stupid to have to go through the extension for anything I want to do instead of leveraging the full power of the DIC, but I try to be nice and comply :)\n",
            "The question remains who  wins  when the maintainer decides it's not intended to be an extension point and the user thinks it's a valid use case. But I guess I don't care enough about this particular issue to argue further :)\n",
            "Oh, didn't see that one, I guess I didn't have it enabled. Will do.\n",
            "Done, and created a related PR for docs https://github.com/symfony/symfony-docs/pull/125\n",
            "BTW small note I forgot: any service using the logger can define the channel it's using with a tag, and by default (if not specified) they end up in the  app  channel.\n",
            "This is by design. Unless you do have a valid use case for an HTML response without a body tag?\n",
            "Closing because it's superseded by https://github.com/symfony/symfony/pull/142\n",
            "Well iirc it wasn't working with %252F either here but whatever we will see I guess. I wasn't the one experiencing the issue first hand.. I'd think it's still safer to just replace spaces by +, because I don't think anything should be encoded in a URL's path? But anyway it's too late to read the spec today :)\n",
            "Just discussed the issue of sub-request firewalling with Lukas. I think it could be fixed if we removed the _internal routes, and forced sub-requests/forwards/render calls to be done via real URLs. Then we need to be smart about handling authentication errors in the sub-requests, but anyway this is not the place so I think he's writing a mail to the ml to discuss this in further details.\n",
            "IMO  http basic is already dead simple since there is no UI or custom stuff needed usually? I think custom form logins are  often  needed, and custom header-based auths as well can be useful for APIs. This should cover most use cases and it's a good start. If we identify more stuff later it can always be added. I wouldn't want to delay this even further because it might not be 100% complete.\n",
            "I don't know if it's just me but I'd rather not have a blank line above the `@since` if the previous line is a phpdoc annotation already. It's ok to keep all the annotations together IMO, and would save some vertical space ;)\n",
            "Yes, I also think that's nonsensical and should be removed, but as I\nsaid, maybe it's just me.\n",
            "Oh no I didn't expect you to do it because I ask :) Just wanted to start\na discussion.\n",
            "I see two way to work around this: setRequest(null) then setRequest($request) again (if the null is actually allowed), or modify the request in the app.php or kernel before the kernel.request starts.\n",
            "The issue is that on a typical request setRequest will be called twice\nwith the exact same object, and doing the whole context stuff twice is\nwasteful. Now I see your point but if we do check if anything changed\nwe'd have to waste memory and even more cpu cycles than it was\npreviously wasting I think. It seems like there is no good option here.\n",
            "Agreed about the pre-auth for sure, it was originally called SimpleTokenAuthenticator but got renamed for consistency with existing classes. That said given the target of the feature, it might be better to put simplicity above consistency.\n",
            "I am not. I'd like if someone else can take this over, but I guess first we need to make a decision :)\n",
            "`~1.0` right now only allows `1.0` and above, `1.0-beta` is below `1.0` stable, so that's why it fails. You should require `~1.0-beta` everywhere that should fix it.\n",
            "The former works, the latter not yet, but I think it probably should (c.f. that linked composer issue).\n",
            "Just another thing, in theory it should also replace all the packages (sub-components) that it contains. Like [symfony does](https://github.com/symfony/symfony/blob/master/composer.json#L23). Obviously this isn't necessary now since you don't have the subpackages just with this PR, but it should be added eventually.\n\nAlso you may want to add:\n\n``` json\n     extra : {\n         branch-alias : {\n             dev-master :  2.0-dev \n        }\n    }\n```\n\nThat will alias the master branch to 2.0.x since that's what the branch is targeting.\n",
            "Nothing to add, looks like a small but good improvement.\n",
            "How about a new kernel.terminate listener that writes the session and calls fastcgi_finish_request? That just means if you need to modify the session you should register a listener with higher prio than this one, otherwise the session class should throw an exception in set() if it's been closed already (in case it doesn't yet).\n",
            "I am kind of -1, it will duplicate the amount of symfony packages you have installed for not so much gain. If it's done in a generalized manner for all components I'm definitely -1. If targetted to a few specific components maybe, but I am not sure where we would draw the line.\n",
            "Let's be clear that replacing a core component is already possible. I read @fago's point and I can appreciate that, but I don't agree that this is the best solution.\n\nMaybe having one Symfony\\Interface package with all the main interfaces that really glue stuff together would be ok. I'd guess we only need 5-10 interfaces in there, and the components needing them could require it. That way we don't have an explosion of packages/complexity, but we still provide some amount of separation for those that really need it. Most likely the drupal guys would anyway need most of the other interfaces that are put in there, so combining them is not a huge problem.\n\nEdit: Eh well, @DavidBadura beat me to it :)\n",
            "Just to be clear, what @KrzysztofZalasa describes is a suggestion, this is not the case right now. It's also unlikely to happen IMO.\n",
            "Yeah the advantage of requiring it goes through composer is that you can then use the package name to look up the bundle name in the vendor dir. Unfortunately there is no guaranteed direct mapping between package name and bundle name.\n",
            "By register config, I mean that we could maybe generate that if the\nConfiguration class is present and offers enough\ninformation/documentation. Surely this is no easy task though, but at\nleast adding a bundlename: ~ might be good just to make sure the bundle\nkicks in.\n",
            "Ah well, old habits die hard :) Anyway maybe exposing the default config\nof the bundle would be good, so you know what's available and what to\ntweak.\n",
            "IMO /foo/ should work indeed, it has annoyed me a couple times, it's not part of the param so I don't know why it would be stripped automatically.\n",
            "How about a ProcessChain class that would take a list of Process/ProcessChain instances and run them one by one, it could run in AND or OR mode - so in AND mode it would stop as soon as something exits with non-zero. It would be stoppable at any time and return the current Pid of whichever subprocess it's currently running, all other calls could be forwarded to the current subprocess as well.\n\nNesting of ProcessChain allows you to build AND/OR combinations if really needed.\n",
            ":+1: from my part. I'm not sure what it means for ApacheDumper though. It shouldn't be a problem I suppose, this is just compiled to regexes right?\n",
            "I know this is not a real solution, but the  easy  fix is to use varnish instead of the HttpCache, it'll be faster and does its own housekeeping. You should consider it if it's an option for you.\n",
            "That said, a command to clean up old entries would be nice, so it can be ran out of band from the web workers.\n",
            "Not it's not quite the same, this just generates the current requests' link through the routing, which allows you to change a few variables. It does not help you to generate another url that is a sub-path of the current one, it makes no assumption about URL structure whatsoever.\n",
            "Maybe this use case is covered by your code, but I think your code does way more, and it's arguable whether that's a good idea or not.\n",
            "Well fair enough, I thought it included all of #3958 as well. Anyway I guess this is covered by your PR, so if that gets merged I'm happy, if it doesn't then the issue is still valid as a more simplistic approach.\n",
            "Yeah ok, except that for external code that accesses this information, having a non-resolved controller breaks expectations. We ran into the problem in the NelmioApiDocBundle which needs resolved controllers to parse the annotations, and one of them was not showing up.\n",
            "@stof what about DRY? Some filters have a lot of code, putting such code in every setter is quite a recipe for disaster.\n",
            "I think it's doable in a decent way for unix, but it's probably be hard to make it work on windows. Then again I would still welcome such a feature. It's just hard to make generic enough. Another feature that would be nice is a timeout, so that if a process just hangs for some reason (IO deadlock or whatever) it gets killed anyway after X seconds. Say `isSingleProcess(3600)` would kill the other processes if they took too long.\n",
            "The `!is_writable` will always trigger, it's just checking that cache & logs are writable early on so that you don't get weird failures down the line. Obviously this is not a good idea when you want to run read-only. Try overriding the method in your AppKernel?\n",
            "We will provide solutions for autoloading performance tweaking in Composer so IMO this should not be a concern here. Focus on the class cache and other hello-world-optimizations :)\n",
            "I guess what he wants is to set a remember me cookie programmatically from any action. I agree this would be useful for some use cases. Right now figuring out how to do this is quite non trivial since it is done automagically deep into Security-land. If you don't mind I reopen.\n",
            "There is also https://github.com/InterNations/DependencyInjectionBundle which took a slightly different approach for doctrine entities, I'm not entirely convinced, but it's there if you want it.\n",
            "Well there are a boatload of RFCs, I don't know what's the status on Swift, but it should be easy to use a test suite on both to check. As for the  why not? , well nobody ever mentioned it, that's mainly why, other than that I have nothing against it.\n",
            "Anyone feels like cleaning things up if they need to be (ping @stloyd) in dominicsayers/isemail, and turning it into a composer package so that we can just depend on it from symfony and improve the validator?\n",
            "Yeah having it in filter_var would make sense too of course, but given that'd end up in PHP 5.5 at best, I would say it's still a good thing to have a decent userland implementation accessible.\n",
            "@egulias IMO 10x slower for validating emails correctly vs creating false negatives is definitely worth it. Emails aren't validated so often in performance critical paths. I would say yes it should be a validator and yes submit a PR and then we can talk more there.\n",
            "@willdurand You can't complain about incomplete regex implementations AND about the performance of the right approach :) I think correctness beats speed here.\n\n@fabpot another option is to make it a mandatory-optional dependency, so if you have the dep it uses it, and if not it just throws an exception instead of relying on a broken implementation. I realize it's not as nice, but would avoid complaints about unnecessary deps.\n",
            "Yes it means if you don't have the dep and try to use EmailValidator you\nget an exception. It's not nice but then again we may have to make\ncompromises because of the monolithic-repo approach. The\nsymfony/validator package could have a hard dependency though.\n",
            "One thing regarding non-RFC emails though is that IMO the validator\nshould reject them, but SwiftMailer should accept anything blindly as\nlong as it has an @ and perhaps a . after. I don't think it's\nSwiftMailer's job to validate stuff. If you send garbage you'll get\nbounces back, but if it's non-valid yet supported by the target MX then\nwhat's the problem?\n",
            "Nope not really, you could try to replace composer show -i by a php script that echoes the same output at once or something, just to see if it is due to the way the output flushes out or if it's due to the output itself, or whatever.\n",
            "I don't know why it was done, but frankly it's not a bad thing to get rid of historical RCs. Helps with composer memory issues too if there are less packages to inspect overall in the solver. Hopefully I find time (and a way) to work on fixing that though, but just saying it does have a benefit.\n",
            "@stof the lock file contains the time stamp of the commit too, so if the\ncommit disappeared it should successfully be able to recover and install\nto a commit that happened at that time. It's true though that it's not\nalways correct and might cause issues.\n",
            "@stof I agree it'd be nicer, but it comes with the downside that if someone re-tags we will keep the old hash on packagist, so that means we have to start updating tags as well while we didn't do that untli now. More cpu time for updates.. but no biggie I guess. Just something to keep in mind.\n",
            "IMO there is no common case and not common case.. Either you validate an email according to the RFC or you don't. Which equates to giving a damn about users with exotic emails or not. I think it would be best if the framework did the right thing always by default so that you are RFC compliant without even having to know about it, but that's just my point of view obviously.\n",
            "Duplicate of #8096 - and I have a PR coming in a few minutes.\n",
            "Sorry but no idea, it might actually be a bug. Not sure why it would be caused by my changes though, but it's not impossible.\n",
            "Alternatively we could have a map of aliases to avoid calling the getAliasId() method?\n",
            "See #8709  \n",
            "@mpdude monolog will add the exception(s) source line/file automatically in files if you use the LineFormatter. The other formatters might not treat it as well I'm not really sure.\n",
            "@WouterJ yes, the patch is not complete, but before adjusting everything I think we should discuss whether we want to do this or not.\n",
            "Is it a publicly accessible bundle so I could try and reproduce easily here?\n",
            "Cool thanks @pborreli \n",
            "Closing as per stof's comment. getKernel is enough for accessing.\n",
            "Also.. IPv6 please :)\n",
            "What kind of improvements are you thinking of?\n",
            "Can you try with latest monolog see if it looks better? However I'm not sure if the message you were seeing came from monolog's serialization. Looks like it might be something symfony does when logging.\n",
            "@bamarni see #7587. \n",
            "I'm on it, trying to make something reversible (i.e. you can pass toString back into a StringInput and things work as expected.\n",
            "2.2.0\n",
            "OK I figured out that it failed because I had the `api:doc` command from the NelmioApiDocBundle. Sent a PR to fix this.\n",
            "I think it's better now that the log format is a bit smaller, or is it still an issue?\n",
            "The fix is going to be released in: 5.4.12 / 5.3.22 / 5.5.0, lower versions of 5.4 and 5.3 are affected and need this workaround.\n",
            "Looks good yes.\n",
            "@PierreJoye it seems that PHP builds with `--enable-maintainer-zts` are also affected by this on linux, and even on 5.4.12 it still is present. @loicfrering just helped debug this on travis (where they added this configure flag recently). Seems like https://bugs.php.net/bug.php?id=50524 is related.\n\nIs there an easy way to detect ZTS builds? That way we could enable this fix for ZTS builds only. Or maybe we should revert to always doing:\n\n```\nif (null === $this->cwd) {\n    $this->cwd = getcwd() ?: null;\n}\n```\n",
            "@lizjulien could you update your PR to enable this workaround for any php that has ZEND_THREAD_SAFE for now? Because it seems it's still not fixed in 5.4.12 on linux at least (haven't checked windows).\n",
            "I think it's the only option until we can test for sure that it is fixed in a given version.\n",
            "github is returning random 404s lately, that's probably why, try and run it again it should work. monolog bundle is definitely not in a private repo.\n",
            "Sent a PR with a fix (see above), as a workaround if you hit this problem you can just cd in the dir where you installed it, and run `composer install` manually to finalize the project setup.\n",
            "OK the fix was merged and the latest composer now ships with it, so it should all be back to normal.\n",
            "@heckfy-ai thanks for letting us know. I added a check for that in composer so you get a proper warning instead of weird errors. \n",
            "You just can't require the framework-bundle dev-master together with symfony 2.1 since framework-bundle is included in symfony, and dev-master is 2.2 not 2.1. Removing the framework bundle requirement should fix it.\n",
            "I think you just shouldn't specify _all_ dependencies. I doubt you need\nphpcr/phpcr in there, it's already required by the cmf bundles so let\nthem take care of that, that way you avoid conflicts in versions.\n",
            "As far as I can tell, if you update monolog to the latest state it should work. Composer doesn't need monolog so it should be able to do that just fine.\n",
            "I don't know how you got in that state, but to use PSR3 monolog/monolog should be 1.3.0, symfony/monolog-bundle should be 2.2.x-dev.\n",
            "OK updated according to all the feedback. I tested it in an app and it still seems to work so there shouldn't be any major issues.\n",
            "@fabpot if you merge please merge also the bundle PR, otherwise it won't be possible to update without conflict.\n",
            "@frosas you can blame me for releasing as 1.3.0 and not 2.0, but technically for monolog this isn't really a BC break, I just added an interface. The problem is due to the way it's used in symfony, it ended up as a fatal error. In any case the situation is now sorted out I think.\n",
            "@frosas relying on X.Y.\\* is painful because you always need to wait until someone updates the constraint to get the new version. Of course using ~1.3 like in this PR means if I fuck up and break BC people will update to it, but that's a less likely occurrence than the alternative I think, so I would rather not use X.Y.*\n",
            "@frosas sorry I didn't get you still had the problem. I tagged a 2.1.7 of monologbundle which hopefully fixes your issue.\n",
            "I tend to agree it probably causes more pain than good. I fixed composer docs to avoid promoting the practice, because I have seen it spread quite a bit lately https://github.com/composer/composer/commit/bf328697e1ae7d290fb17df2e902a652ec4d9378\n",
            "One thing worth noting is that test helper classes and such that are\nmeant to be used by other people should really be moved to a Test/\nnamespace ideally, to clearly separate public API from internal tests.\n",
            "Looks good apart from that small comment. Regarding forward slash delimiters I think they should die but that's another debate :)\n",
            "It's up to @fabpot ultimately but IMO those fixes are ok on 2.1 only, it's too much of a hassle to do it for 2.0 and if nobody noticed the problem until now it's probably not such a big deal. Besides the release plan says it's EOL'd no?\n",
            "The rationale was that if stream_select failed, it will fail every time (maybe this is an incorrect assumption and I introduced a bug there). Since the while loop checks for $this->pipes being not empty, if the process dies off and stream_select() starts failing, it will be stuck in the while loop forever. That's what I was fixing there. As far as I can tell, your fix reintroduces that problem. Can you explain a bit more what you mean by  error-output and output are empty ? Maybe adding a test for the case you are seeing would help too?\n",
            "Ok I see. So I guess your fix makes sense since stream_select can fail legitimately, but it's not the whole story. If it fails because the process died off (or whatever the cause was on windows) we shouldn't keep trying forever. Maybe just adding a limit of N retries that is reset whenever a call succeeds would be enough to go over the odd system call being interrupted without allowing infinite loops. Not sure what N makes sense.\n",
            "Seems pretty cool, but could you replace all `/usr/bin/env stty` calls by simply `stty`? That way it would also work on windows - if you have mingw or cygwin installed and stty is in the path at least. I don't see the benefit of doing the /usr/bin/env trick here. That's good for shebang lines because you need an absolute path, but in an exec/shell_exec call, you can rely on the PATH and just type the command name.\n",
            "Maybe the default value should be shown somehow?\n",
            "See https://github.com/composer/composer/issues/1414#issuecomment-11338037 for an explanation and solution.\n",
            "Well, it should be asMarkdown and --markdown, my point was that the markdown code should look/feel like docopt when you look at it in the browser, but it shouldn't be docopt because that's plain text, and that's already more or less the standard text output of the help command anyway. I opened another issue to make the plain text output more like docopt (#6329)\n",
            "IMO it's fine to just duplicate the `@deprecated` note in the message, since anyway this code is meant to be completely deleted, this duplication should not do much harm.\n",
            "AOP or not is an implementation detail that doesn't matter so much to me, but anyway seems like everyone is :+1: so all we need now is a volunteer to implement it :)\n",
            "All the proposal is about is adding trigger_error(). I don't think the `@deprecated` should go away. It's good if it helps people with fancy IDEs, but that's not everyone.\n\n@dlsniper if you read the proposal again you will see the problem is not upgrading the framework and not testing it, it's just that right now if we throw E_DEPRECATED you can't even test the upgrade, you'll just get exception pages all the time. That interrupts the work and can make the update seem more expensive than it actually is. If you just get warnings in the logs you can update, check everything still works, then migrate your code to fix the deprecated stuff later, even over a few months if needed. Some people have large codebases.\n",
            "@dlsniper yes that's exactly what I proposed, changing the error handler. Nobody suggested writing a custom parser for the annotations or whatever you seem to think of here. @vicb suggested AOP but I think we can agree that it's not such a great option for users of the components.\n\nNow whether the error handling should be configurable or not that's another point, but if we make it configurable I would only make it an option to throw or not for E_DEPRECATED, the rest is fine as it is.\n",
            "@KingCrunch no way I will support disabling exceptions for notices/warnings/strict notices. Those should always yell loud in your face in development. Hiding them only leads to writing more bugs.\n\n@vicb :panda_face:?\n",
            "@KingCrunch there is a big difference IMO. Common notices/warnings occur when you write buggy code. Deprecation stuff appear because the framework (or a new php version) introduces them, not because you did a mistake.\n",
            "@KingCrunch what I am trying to mitigate is the cost of upgrading to a new version of the framework. In this case it's not about  If I use a deprecated method , it's  If I used a method and now it is deprecated . You could not know six months ago that it was going to be deprecated, so you wrote the code and all was fine, now you upgrade and suddenly nothing works anymore because of deprecation stuff. The deprecation however only lets you know that you should upgrade in the next six months because the next big framework release will remove those methods. So you have six months to upgrade at your pace, why force people to do so all at once? On the other hand, php notices/warnings appear _while you write code_, and as such you should be told about these ASAP so you can fix them while you are writing the code.\n",
            "@vicb I have no doubt it's feasible, but I have serious doubts it's a good idea, I kind of hope you are joking :) \n",
            "@stof I am sure it can't cover everything. Like yaml for DI doesn't cover everything. Does it mean it's wrong? No idea. I am just putting the idea out there.\n",
            "Fair enough.\n",
            "Cool thanks, did you try out if `-vv` works though? I was wondering if that would blow up the console or not.\n",
            "I just think -vv/-vvv is a more common paradigm than --debug. People actually try it and get no result. Also it is just a verbosity change in the way that it gives you more verbose output. I think it's good to consolidate it all in one v/vv/vvv. 3 levels should be enough for most purposes really.\n",
            "How about --verbose=1/2/3 (with --verbose being equivalent to --verbose=1) and -v/-vv/-vvv?\n",
            "@fabpot can we have feedback from you? Is `--verbose=1/2/3 (with --verbose being equivalent to --verbose=1) and -v/-vv/-vvv` alright? I'd like to get this moved forward.\n",
            "OK cool, @dlsniper do you have some time to work on updating this?\n",
            "@dlsniper new PR coming or why did you close?\n",
            "I would have seen it the other way, because to me DEBUG is the lowest level info you can get. I agree VERY_VERBOSE is a crappy name, but I couldn't come up with anything better, if you do feel free to pick something else :)\n",
            "Nope it does not sound reasonable :) Having the tests with the code is primordial to ensure PRs pass etc. It'd be a massive hassle to have them split. What can be done is using .gitattributes to eliminate the test dirs from the zip archives, but removing them from the git repo is a really bad idea IMO.\n",
            "I believe you can just quote the keys like: ` /a-directory-with-dashes : myfirstnamespace`\n",
            "Agreed, then again if we go there we might also say _controller should be top level.\n",
            ":+1: from me, hoping that it doesn't create too much confusion in the future.\n",
            "Just FYI since not everyone here is following the PHP-FIG mailing list I guess, I started a proposal for a PSR LoggerInterface - if we get that then it'll be possible to rely on that instead of relying on monolog. It's a slightly more neutral approach. I'll do my best to push this forward before end of the year.\n",
            "It seems that people prefer to talk than help get shit done. \n\nPR is at https://github.com/php-fig/fig-standards/pull/60 - you can find the previous discussion at https://groups.google.com/forum/?fromgroups=#!topic/php-fig/yL_wDyiT6GY%5B1-25%5D - if no big opposition suddenly appears I will move it to vote soon, and hopefully we have something standardized by the end of the year. As soon as things seem to go in the right direction we can begin implementing the changes in symfony to make sure stuff is ready on time.\n",
            "@frosas it wasn't merged yet, so no. And it's nothing to do with twig really, so I doubt it. Maybe the latest twig release broke something though. Anyway I would open a new issue somewhere else :)\n",
            "I think a generic LoggerInterface would make more sense than every framework having the same interface. Duck typing would be best, but this is PHP.. another approach would be screw the type hints and just assume ->err and whatnot are implemented by what's passed, which is true of most (all?) logging libs.\n",
            "That'd be ideal, but most likely not gonna happen. A PSR package shipping the interface would be good enough IMO.\n",
            "No need to convince me much :) It should be fairly easy AFAIK.\n",
            "Indeed defining commands via a docopt block would be pretty cool.\n",
            "It's just not something we support at this point because it creates lots of potential issues, if your projects don't use the same version of anything you'll have side effects any time you update one project. We will try to provide a decent solution for symlinking vendors in composer eventually, but I don't want to support people shooting themselves in the foot.\n",
            "@coviex I mean that if at any point two projects use the same package in different versions you won't be able to since the last you update will always win. \n",
            "I gues taking line 3/4 and then grabbing the \\d's at the end of the line would do. Kinda hackish but not much more than the current solution.\n",
            "This should be fixable easily on your end once composer/composer#1186 is merged.\n",
            "Oh, @denderello was on it too yesterday, with a slightly different approach though, he should push his code.\n",
            "I think it's important to allow options to be numbers too, like `-6` should be a valid option to enable ipv6 for example, but if it doesn't exist probably it should be skipped and considered to be an argument.\n",
            "There are two reasons to enforce objects at the top level of the JSON responses:\n- http://haacked.com/archive/2009/06/25/json-hijacking.aspx\n- If you always return something like `{ items : []}`, the day you need to return the items + some other stuff (total count for paging, related link, anything really)  you can just add it without breaking the API: `{ items :[],  stuff : woo }`.\n",
            "I was just explaining why it's like that. Regarding the first point you're right though, it should be enforced always or never. And given that if you follow my second point you'd never need this feature anyway - I'd tend to agree with you that this should just be scrapped altogether.\n",
            "Indeed at this point given the amount of hackery needed for the sigchild support it might be best to only enable it when needed. On the other hand, it is more likely we'll have regressions since not many people will test it if it's only enabled sometimes. It might be good to have a switch like the enableWindowsCompatbilitylala() so that you can run tests with and without the sigchild workarounds at least, to see if the result is consistent even on builds without sigchild.\n",
            "@fabpot  We had the same issue in composer.. It makes sense like xdebug.scream to debug shitty legacy applications that hide errors instead of dealing with them, but it's indeed not supposed to be turned on all the time.\n",
            "Closing because it should be applied on 2.0 actually.\n",
            "@Tobion http://schlueters.de/blog/archives/125-Do-not-use-PHP-references.html - search for  copy-on-write  if you don't want to read it all.\n",
            "lib-ICU gives you the ICU version in composer\n",
            "Isn't it a resource locator issue? I didn't try it, but the composer ClassLoader's code looks like it handles underscores just like the UniversalClassLoader\n",
            "@Geckow if you have a fix, opening a PR would be the best way.\n",
            "Maybe usleep(100) or something smaller than sleep(1) would be enough?\n",
            "@fabpot The fix was applied in master but not 2.0 - you can cherry-pick 417130506798627a70d5a82df51a91326d2738e0.\n",
            "MonologBundle creates services with method calls, but it works just fine for most people so I don't think it's the root cause of the issue.\n",
            "Yeah, I checked and I guess it would be doable by extending the EM & wrapping the hydrator, but it's not a small task and it would stop working if people extend the EM themselves.\n",
            "Well I don't know if anything else creates hydrators, but extending the EM was just a way to wrap the hydrators so that we can collect info when they're called.\n",
            "And as I said, the goal is just to wrap the hydrators inside the EM. From a quick search the only place where hydrators are instantiate seems to be in EM::newHydrator - if you extend that with:\n\n```\n    public function newHydrator($hydrationMode)\n    {\n        return new HydratorWrapper(parent::newHydrator($hydrationMode));\n    }\n```\n\nThen they should hopefully all be created with wrappers, and passed to the proxies and collections with the wrappers.\n\nThe missing piece is an interface for hydrators.\n",
            "Sounds okayish to me. I don't like it so much but I really don't have time to dive deep into it, so I won't consider my first opinion to be worth much.\n",
            "Do you have `framework: session: ~` still in the config or did you remove the whole session block from the config? That might explain it.\n",
            "I'm all for more security features, and both the String class & the Prng class for wrapping openssl make a lot of sense IMO, but I fail to see the use of the rest. \n\nIf we just want a seed to have a fallback in case openssl is missing, I'd rather have a secret in the config.yml than a million classes to store the same secret in the DB. Maybe I'm missing something though? /cc @schmittjoh\n",
            "@schmittjoh why would you need to replace the seed provider? Don't you think that people serious about security to the point that they would want a stronger seed provider would enable openssl instead?\n",
            "@jalliot I think mcrypt should be after if you make it use /dev/urandom, not 100% sure but openssl is probably higher quality than urandom.\n",
            "Are you on CentOS? It might be related to composer/composer#876. In any case I would guess that doing a `rm -rf /myProject/vendor/swiftmailer` and then trying again should help.\n",
            "There seems to be an issue with proc_open detection of exit codes on\nCentOS but I haven't had time to investigate more yet.\n",
            "Just FYI, in 5.4 streams can implement chmod too. I know it's not a definite solution right now, but something to keep in mind.\n",
            ":+1: for consistency.\n",
            "You have to update your app/autoload.php, you can grab a new copy from https://raw.github.com/symfony/symfony-standard/master/app/autoload.php\n",
            "Why not just `getSchemeAndHost`? That sounds long enough, and is fairly explicit given the context.\n",
            "Ok makes sense.\n",
            "It's an interesting hack, but it doesn't sound really worth it.\n",
            "It's a good addition, but you should still use ANSICON first if it's available. mode returns the buffer size and not the window size, which means the lines are not the real terminal height, but the buffer setting. ANSICON has both informations and hence allows you to be more correct. For columns/width both offer equally good information since the buffer size is not bigger than the window.\n",
            "I updated the changelog\n",
            "You can achieve this by checking the URL pattern in the ExceptionHandler controller you define. I'm not sure we can do this in a more generic way.\n",
            "What could be useful is to detect whatever bundle's route was used when the exception was thrown (given most exceptions will happen during the controller execution). That gives us the correct bundle in most cases I'd say.\n",
            "Why is prepend/append bad practice?\n",
            "(Random thoughts warning)\n\nKinda sucks for the template change. I guess the other one won't affect too many people. Is it really a big hurdle? Most people don't interact with the view apart from templates.\n\nAlso setVar sounds weird. setParameter might be more familiar.\n\nAnother random idea (no idea about feasibility since I don't know FormView or the rendering process well enough): What about exposing a $view->getData() or such that returns a ParameterBag-style object. That object could then be passed to the templates, so the get() call in templates still work. That might work if templates never need to call anything else on the view object than the data.\n",
            ":+1:, I think it would help a great deal to get more eyeballs on the code before we push out a beta.\n",
            "I agree for the sake of correctness. I also think that such URLs shouldn't exist, but that's another point. Why not just using `\\{` as an escape sequence though?\n",
            "IMO this is a perfectly reasonable request. POST requests can also contain query parameters, and if you're not POSTing url-encoded data, and for any reason can not use a custom header, then why not allow the override from query params? Of course this still is only applied to POST requests. Query parameters, even though they're called $_GET in php, really have nothing to do with the request being GET or POST.\n",
            "As I said, and as @borodiychuk said above, and as [the code says](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L876), this only happens for POST requests. GET requests are a non-issue.\n",
            "Having no processor does not affect the logger or handlers. I'll try to reproduce this later.\n",
            "Fixed by https://github.com/symfony/MonologBundle/commit/02c05a1d70af3e48904a05336ac65f95809ca420 - please update and confirm.\n",
            "Not sure I see many use cases for it, but I sort of like the idea.\n",
            "Works fine on my 5.4 (windows), but I've had someone with similar issues running composer (process always returned non-zero status codes, but I don't think it was 5.4).\n",
            "Oh sorry I didn't recognize the name in my email.\n",
            "Thanks for digging into it. I added a warning to the composer installer script: https://github.com/composer/getcomposer.org/commit/3524377ef627365d18635cada23b1287b59cce52\n\nAlso you may want to vote & maybe ask for an update on https://bugs.php.net/bug.php?id=22999 - it's pretty damn old, would be nice if someone would finally fix it.\n",
            "This is really equivalent to:\n\n```\n_wdt:\n    pattern: /_wdt/{token}\n    requirements:\n        token: [^/]+?\n```\n\nNot sure if it makes it easier or not.\n",
            "IMO the current behavior goes in the direction of having secure defaults. Sure it's annoying sometimes, but you can easily provide a `array('required'=>false)` to the field and be done with it.\n",
            "I just mean that by default it treats stuff as required so that you can't have accidentally missing or inconsistent data.\n\nI agree with you that the detection can probably be improved, but I don't think it should be removed altogether, or default to false.\n\nFor boolean fields, a very common use case is the  I read and accept the terms of use blabla  checkbox which _has_ to be checked for the form to be valid.\n\nFor your NOT NULL column that you would like to be an empty string, sure I see your point, but the way the form stuff works, if the field is left empty, it will set the value to null, and then your DB query storing the object will fail.\n",
            "Depends on what you are working on. Anyway changing it now would break things, so I don't think it's a good idea. But it's not my call, let's see what @bschussek has to say.\n",
            "Well then, looks like I was the idiot :p Good to know.\n",
            "It's a known issue in PHP: https://bugs.php.net/bug.php?id=60120 https://bugs.php.net/bug.php?id=51800\n\nAs far as I know, @pierrejoye is on it, no idea when it'll be fixed though.\n",
            "Just so I know, which version of composer were you using (`composer.phar -V`)? This behavior sounds weird, using latest composer it should return immediately and let you know it can't install because the folder is not in a clean state.\n",
            "This sounds bad but I can't really think of anything that could've caused it so I'm not sure how to go about fixing it.\n",
            "It would need to be set up on all repos ideally, not just symfony/symfony. And by the way there is a Packagist hook already predefined on github so you can just type your username and [API key](http://packagist.org/profile/), no need to hardcode the hook URL.\n",
            "Done on all subtrees too? :) It would be really nice because it lowers the packagist load, makes updates faster, and eventually I'll have to reduce the crawling rate even more (it's every 4hours now) to push people to install the hook.\n",
            "Dirty hack idea (because I enjoy that sport): before dispatching register a new autoloader that will create any class that does not exist with:\n\n``` php\neval(<<<CODE\nclass $class\n{\n    public function __call($name, $args) \n    {\n    }\n}\nCODE\n);\n```\n\nThat way services can be created and then called even if they don't exist anymore. It would mask any classname mistake though, so it should only be registered when the cache:clear command is called IMO.\n",
            "IMO the only command that matters for the issue of  listener classes\ngone  if cache:clear, if it's called maybe the events should just not be\ntriggered at all, or you should implement one of those hacks.\n\nIt's the same with the routing, annotations and whatever else is in the\ncache, if you remove the class and you don't clear your cache in prod\nenvironment you will have weird bugs where the framework goes further\nthan it should before blowing up on a missing class.\n\nIt is a predicate of the framework that if you change the code, you\nshould clear your prod cache before deploying, so IMO it's ok to have\nthat problem for other commands. But the cache:clear command must work\nat all costs (including dropping listeners, maybe while outputting a\nwarning), because that's the way many people will use to clear/warmup\ntheir cache.\n",
            "@ondrowan, is your test file saved as UTF-8? In master branch I would say it should work, not sure about 2.0.\n",
            "The dummy key I added in the test makes it fail without the fix.\n",
            "@codeconsortium it's not very old school. It's how URLs are supposed to be. There is a resource (`/blog` or `/blog/posts/123`) and then there are parameters/filters to change the way this resource is displayed, those are just fine in the query string. Paging and such do not belong in the resource URL. There is a middle ground between `index.php?<3billion parameters>` and `/rewrite/everything/and/3/param/4/302/445930`.\n",
            "It's not about Web 2.0 or not, most older  modern  frameworks promoted this because they misunderstood it, because RewriteRules were the new cool thing to have and abuse, but the modern modern frameworks do not promote this because it does not make sense in terms of HTTP / REST URL design.\n",
            "As far as I know this is just not done for performance reasons, because rescanning all dirs for new translation files on every request would be quite expensive. Perhaps someone else has a better explanation though.\n",
            "Only adding new translation files requires a cache clear. But it is still an inconvenience, and if it can be fixed it'd be great.\n",
            "No that would make things very slow. The cache (or most of it anyway) is checked for freshness in dev mode, so that the parts that need to be modified are rebuilt, while in production these checks are skipped for performance, and the cache is assumed to be always fresh.\n",
            "This would be more consistent with assetic, but assetic isn't really consistent with anything else in twig, although I see the benefits in that particular case for swapping and omitting parameters.\n",
            "@gunnarlium to answer this question I think we need a common understanding of what  jQuery for PHP  means :) DomCrawler is a DOM manipulation tool, and combined with the CssSelector component does a lot of what jQuery can do regarding DOM tricks. What are you missing?\n",
            "@evillemez the common pattern for BC is to add a new interface, say IntrospectableContainerInterface or something, that extends ContainerInterface, then you can type-hint that without restricting use of competing implementations of the Container class.\n",
            "This is done [there](https://github.com/symfony/symfony/pull/3381/files#L1R115) (with context for the PR) and the reason is that the [php docs](http://docs.php.net/manual/en/function.proc-open.php) say that NULL will inherit the environment of the PHP process. If this is not the case, I guess we need to explicitly copy $_ENV?\n",
            "I see. I would say that the change is correct then but that we should handle that case in Process. I'll try to do a PR quickly.\n",
            "Ok, can you try my patch in https://github.com/symfony/symfony/pull/3565/files ? I had to check for $_ENV being non empty, because it is empty when not included in the php.ini `variable_order` setting. If it is, it should copy the array, and if it isn't, it should pass null and hopefully php does its things (here it seemed to work, because if I pass an empty array some tests break since PATH is missing, but with null they run fine).\n",
            "But without that, it basically overrides all envs with the empty array, so it destroys all envs. It seems your code works only when envs are missing?\n",
            "The code mentions:\n\n```\n            // Global countries (f.i.  America ) have numeric codes\n            // Countries have alphabetic codes\n```\n\nThat may allow you to filter them out.\n\nAnyway those resources are not really coming from Symfony itself so I don't think it's our responsibility to fix it.\n",
            "Ultimately @fabpot can call it, but I'm pro version_compare because it's just typically used for those checks, which may not make it more readable but makes it less WTF since it's a common pattern.\n",
            "This is already fixed in latest 2.1 AFAIK.\n",
            "Ping @jmikola - I guess injecting the container in the helper is the only option here?\n",
            "I haven't checked, but for such things I find it way easier to find them in cookbooks than in the changelog - if you don't mind reformatting/copy that in a docs PR it'd be great.\n",
            "Aye this is perfect for the changelog, it's just typically something that you think about 3months later and you can't find anywhere where you read it, so cookbook would be easier :)\n",
            "I am not sure _everything_ will always be able to be built at warmup time. Running everything read-only is going to be pretty tough IMO. That said, yes, building the classes cache should be doable in a cache warmer if it isn't yet.\n",
            "Sorry that's just short for  in my opinion  :)\n",
            "If you find/write a MongoDB handler that can be reused reasonably easily, please send a PR.\n",
            "Regarding the handler, can you submit it as a pull request on http://github.com/Seldaek/monolog ? Then we could add support for it in MonologBundle directly.\n",
            "I would use that in the autoload just to avoid file_exists calls for nothing:\n\n``` json\n             SessionHandlerInterface :  src/Symfony/Component/HttpFoundation/Resources/stub \n```\n\nThe class is part of the  prefix  too.\n",
            "Sure, although  generally  sounds a bit scary in your sentence :)\n\nWhat about the bypass_shell option?\n",
            "No no, don't get me wrong, I'm not suggesting this should be removed. I'm just saying it should be done for all processes or none, but not just for those run via the ProcessBuilder because that's a good recipe for WTFs.\n",
            "Still not sure about the bypass_shell option though. And @beberlei mentioned problems? Can you expand on that?\n",
            "Added back to Process, with a switch so if anyone runs into problems they can easily disable it.\n",
            "Ping @fabpot - I think this is ready now\nPing @kriswallsmith if this gets merged please update Assetic stuff to restore the bypass_shell option if it's really needed.\n",
            "@kriswallsmith (Sorry about the confusing title) My concern is just that if you use Process then decide to  upgrade  to the ProcessBuilder, you suddenly have a change of behavior that might break stuff without you noticing. I just want to avoid this unexpected behavior.\n\nAs for the $env stuff, I added a couple tests now, and then expanded that ternary operator a bit.. It actually was broken before. It passed null if you had no env set, but even if you did not call `inheritEnvironmentVariables`. If you want to inherit by default - which I agree it should - then why was `inheritEnv = false` in the constructor? I changed it too and now there is hopefully less confusion.\n\nRestored bypass_shell=true unless it's explicitly set to false.\n",
            "backupGlobals seems to be enabled by default.\n\nAs for the enhanceWindowsCompatibility, yes. It's a poor name, but no I don't have any idea for a better one, because nobody could explain me what it does. People just scream that it's necessary.\n\n@pierrejoye: If you or anyone can conclusively confirm that this stuff is always better, then we always do it. If it's not then it must be optional, and if it's not a flag then what? The point of the component is to abstract the proc_open horrors. If people have to know about windows quirks with regard to proc_open to use it, then it's not a very useful abstraction.\n\nAdditionally, if it _is_ always better to use those portability fixes, then why isn't php doing it itself?\n",
            "Ok so it sounds to me like the current code is correct, it tries to fix\nthings as best as we know how to by default, and just gives you a way to\ndisable things in the odd case we messed up and some of those fixes are\nharmful to some use cases.\n",
            "Agreed, but I can't think of anything better. It is indeed esoteric magic fixes that should work better but nobody seems 100% sure about it, so I think it's fairly accurate.\n",
            "Not sure if the sample at the top is up to date (didn't read the gazillion comments) but can I ask why `hostname_pattern` vs just `hostname` or even better `_hostname` in `requirements`? It just seems a bit weirdly inconsistent, but maybe there is a good reason I missed.\n",
            "I see, then I agree it might not belong in requirements, but still not sure hostname vs hostname_pattern.. The `_pattern` surely didn't hint at anything for me, but maybe that's my bad :)\n",
            "Try updating asseticbundle again, it should be fixed now.\n",
            "In theory you should tag the service `scope= request `. But I guess that won't work either since the logger is required before the request service is present. I'm not sure if there is another solution than injecting the container here.. Maybe @stof remembers something else. I'm pretty sure this was discussed already once, just don't have time to dig into it now.\n",
            "@stof ping?:) I guess injecting the container and then adding request info only when the request is available would be ok.\n",
            "@stof: How do you see this? I mean, the base class already supports an empty serverData property, so it could be filled-in later on, and it will just attach the data to log entries when it becomes available. I guess we could have a request listener adding it and that's it?\n",
            ":-1: on this. No clear benefit to me.\n",
            "That is a feature to some, and a problem to others. I don't want to have to prefix everything with `f:`, and I don't want to see people type `framework:` all the time because they don't know about shortcuts. I also don't see what the visual grouping brings, cache stuff are not really related to router stuff. Those are different subsystems of the framework, much like the doctrine bundle is, there is no unity.\n",
            "You can `composer install --dev` to get proper clones. I'm not really pro or against, just saying it's an option. \n",
            "I can confirm this should not happen. I didn't verify it does, but if it does this should not be closed until it's fixed.\n",
            "The only way I see that could be possible is this:\n\n``` yaml\nbased_on:\n      : Based on\n    trial: Trial\n```\n\nThis would create a key called `based_on.`, and then we could rtrim() keys to remove `.` on the right, which would allow you to do this. That said, it is magic behavior that may introduce other issues down the line, so I would really not recommend it. \n\nIf you really need such thing use flat keys where you get conflicts.. It's a YAML format limitation and that's about it.\n",
            "Also you can look at the code since you already know of something that does what you want: https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Command/RouterDebugCommand.php#L71\n",
            "IMO [this solution](https://github.com/schmittjoh/JMSI18nRoutingBundle/pull/4#issuecomment-2541734) is the best, to avoid redirections altogether, and just create language links that point to the right localized version of the page you're looking at.\n",
            "Actually one thing that might be nice to help achieving this even in 2.1 is to have either:\n- `{{ path(null, {foo: bar }) }}`: `null` would generate the current route, and automatically merge the second arg with the current requests's `_route_params`.\n- `{{ self({foo:  bar }) }}`: a new helper for this behavior instead of hackish `null` behavior.\n\nI could implement either if you think it's worth it @fabpot  \n",
            "Wouldn't it be better if the shell ran all commands through Process instead of using the same process? It's not the first time someone runs into this issue.\n",
            "That doesn't work, everything is potentially  shell incompatible . If you touch code while it's in memory, it doesn't update. Simple as that. The shell should not be used for stuff that is in development IMO, unless it's fixed using external processes.\n",
            "As far as I can see, the remap is always done using the fixXmlConfig stuff: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/PrototypedArrayNode.php#L184\n\nAs for the useAttributeAsKey, changing the merge mode fine, but IMO it shouldn't use the  key  array key as a key, since yaml does not have attributes like xml does.\n",
            "My point with the remap is that it is **executed** every time, it is not context dependent. Same for useAttributeAsKey, I realize that at this point all we have is arrays, but the way the array is built is different between xml and yaml, and that's why we need to  remap  things or use attributes as keys because we don't have keys in xml, but forcing that behavior on to the yaml configs is not helping because it's not something standard that you expect. In xml you know that you have to provide some sort of key for it to work. \n\nSince I never use xml app configs, I had no idea that twig globals were using the  key  name to do something special, and I was burnt in a way that most end users would not have been able to figure out without extensive research I think. \n\nIMO this is bad, and the Node classes should act differently based on what config format was used to generate the array.\n",
            "I saw that. I'm exposing what I think is an issue here, I realize it's not working as I want it to, otherwise I wouldn't be here. And if I saw an easy fix I would have submitted a PR. Please try to understand the problem and think of possible solutions instead of telling me it can't work, nothing moves forward if all we do is close doors.\n",
            "See https://github.com/Seldaek/symfony/commit/3bdee44e2d5ce28fdc41bad6790ef6617ee6fec6 - basically this demonstrates that the behavior applies to all formats, when it should really only apply to xml. If you comment out the setKeyAttribute line (which is called internally via useAttributeAsKey basically), then it passes.\n",
            "I'm sorry but I'm not ok with closing this as is. This isn't _only_ affecting the twig globals, that's just an example. It's a failure of the Config component that does not realize whether it uses xml or not. Now if we want to say that we can't fix it, then I guess we indeed can close this ticket, and then it has to be fixed in every place that uses useAttributeAsKey. Except I'm not even sure if your fix is possible because the problem is that the problematic Yaml I created parses to the same as a valid XML. So how can we check in beforeNormalization whether it's valid or invalid?\n",
            "I don't agree that it shouldn't know about format. To abstract correctly it _must_ know about formats. We have things that are built in there to handle XML differences, and we apply those to all formats, this is just plain wrong.\n\nI'm just trying to avoid problems for people, I don't know why I have to argue so much about it. Fixing WTFs should be our top priority if we want to build a user friendly system. Maybe I'm mistaken.\n\nAnd I'm still not sure I get your point about the normalization.. I don't see what in this specific case causes the problem. Have you checked my test case? It doesn't use beforeNormalization tricks, and it still fails. Well it works correctly if you assume this array comes from XML, but fails if you assume it comes from Yaml. https://github.com/Seldaek/symfony/commit/3bdee44e2d5ce28fdc41bad6790ef6617ee6fec6\n",
            "That's a fact, it's been stated already, and it does not help move the discussion forward. Software evolves, I'm more interested in what it can become than in what it is now. The question is: Can we fix that without introducing a big mess or not? It seems to require a few steps:\n- Add the format to ContainerBuilder::loadFromExtension so it can keep track of which config array comes from which format\n- Forward the config formats as a third arg to DI Extension::load()?\n- Forward the config formats to $this->processConfiguration()\n- Handle formats in Config component\n\nThe third step is the only one affecting userland, and I guess this forwarding could be made optional, if we have the info good, if not it's just like now.\n\nIs it worth it? Does it open more possibilities than fixing this issue?\n",
            "Well, I still think it's wrong, but whatever I don't have time to play around with the code so I'll drop the case and accept your PR as a fix for the issue at hand. It still doesn't fix the underlying problem as far as I can tell, but I'll just assume you're right and I'm missing something.\n",
            "Doing slow stuff after the user got his response back without having to implement a message queue. I believe @pminnieur wanted to use it to send logs to loggly?\n",
            "@fabpot: one could say that on shared hostings it is still useful because they generally don't give you gearman or *MQs. Anyway I think it'd be nice to really complete the HttpKernel event cycle.\n",
            "I have ran into the same problem, but it somehow went away and I never had time to investigate further.\n",
            "There are other meta-names available in the XmlEncoder, @-something for attributes, then there is something happening with a # but I'm not quite sure what. I'm just saying, maybe *item isn't the best name, if it introduces a third metacharacter. Apart from that I'm fine with it.\n",
            "Yeah, I am against those magic features, but I am against XML in general so I don't know if that counts.\n\nThe problem is, without those, it's pretty difficult to produce the XML you want from PHP arrays.\n",
            "That sounds better. But I don't know if it will affect anyone.\n",
            "Here's what I did for functional tests, not nice but it helped.\n\n``` php\n    static protected function createClient(array $options = array(), array $server = array())\n    {\n        if (!static::$kernel) {\n            self::$kernel = self::createKernel($options);\n            self::$kernel->boot();\n            self::$conn = self::$kernel->getContainer()->get('doctrine.dbal.default_connection');\n        } else {\n            self::$kernel->boot();\n            self::$kernel->getContainer()->set('doctrine.dbal.default_connection', self::$conn);\n        }\n\n        $client = self::$kernel->getContainer()->get('test.client');\n        $client->setServerParameters($server);\n\n        return $client;\n    }\n```\n",
            "Are you sure that php.ini is used when you sudo?\n\nPlease try: `sudo php -i | grep apc.enable_cli`\n",
            "I also get this every now and then, it just fails to delete something for no apparent reason and then that crashes the entire process.\n",
            "IMO Yaml should not use include by default anyway, it's a potential security issue and one that many people using the component do not realize exists.\n\nSince the typical PHP-in-Yaml abuse that was seen in sf1 doesn't seem to have carried over to Sf2, I think it could be disabled in 2.1, while leaving an option to turn it on.. It could even be a static flag.\n",
            "You should add some more isset guards in hasFlash etc so that it doesn't trigger warnings when you call hasFlash on a different type than status, and it does not have any flash message set for that type. This is just an example, I think other methods might be suffering from the same problem.\n",
            "You have to specify the requirements to match what you want, in this case I assume something like:\n\n``` yaml\nMyBundle_homepage:\n    pattern:  /hello{name}\n    defaults: { _controller: MyBundle:Default:index, name: Peter }\n    requirements: { name:  .*  }\n```\n",
            "Thanks, just for reference, this patch allows for this to work: https://github.com/schmittjoh/JMSI18nRoutingBundle/pull/4#issuecomment-2541734\n",
            "I looked at this recently but it doesn't seem possible in nginx to set environment variable per request for one call to the backend, so this may not be possible unless we hack it with custom headers or custom query args.\n",
            "I am not yet sure what I would use it for, but I like the idea.\n",
            "`%2B` is an encoded `+`. `%20` is space.\n",
            "Ok. I have to say though it's not so easy to replicate cleanly without hacking into core; I had to copy paste lots of stuff from the core files to get it working externally here due to the private stuff and the fact loadCatalogue doesn't return the loaded catalogue.\n\nThat means the sooner it gets in core the better. Can you still comment on the patch? I'll rebase on master later.\n",
            "By the way IMO it is a bug fix much in the same direction as #2072 - edge cases perhaps because most people use UTF8, but painful for those that don't. Changing the charset was a feature in 2.0, and it should be made to work in 2.0.x as far as I'm concerned. Then again, I'm probably biased.\n",
            "Done.\n",
            "@schmittjoh: WDYT? I'm not sure how much that makes sense if we replace most of the core stuff by your implementation. \n\nOther than that, purely regarding the current implementation, I guess this makes sense.\n",
            "I guess nobody specified ids if they are not usable as it is, and since the proper behavior seems to be to fallback to the source element, IMO it's not a major break and sounds more like a bugfix.\n",
            "I think it's mostly so it  just works  for beginners that don't have to learn about the assets stuff to get started with the framework.\n\nI'd just advise you to edit the vendor script to your project's needs.\n",
            "True, the vendor script is not very polished or thought through, because it's a temporary solution until we move to [composer](http://github.com/composer) in 2.1. Then I'm pretty sure it won't update your assets anymore :)\n",
            "Also, you could quite easily use a kernel.response listener that is preconfigured by the controller.\n",
            "If you define your route with a trailing slash, accessing the page without one will automatically redirect to the trailing-slash variant. If you define without, then it's the only valid one.\n\nOr to explain in more visual terms:\n\nConsidering those routes:\n\n``` yaml\n_service_demo:\n    pattern: /demo/\n    defaults: { _controller: TestBundle:Default:demo}\n\n_service_test:\n    pattern: /test\n    defaults: { _controller: TestBundle:Default:demo}\n```\n\n```\n/demo  => 301 /demo/\n/demo/ => 200\n/test  => 200\n/test/ => 404\n```\n",
            "The 301 is the only redirect, the 404 is not a redirect, it just shows an error page. We chose only to support trailing slash if it's explicitly defined with a trailing slash in your route. If you want this behavior, then define the route pattern with a trailing slash. Pages that are  leafs  and don't have further nested pages usually don't have a trailing slash, so there is no reason for people to add one, and if they do they'll get a 404, but if you like to support both on your leaf pages you can also define those with trailing slash.\n",
            "Besides, having two URLs with the same content is not a good thing, so if you really like to support both but redirect the user to a version without trailing slash, you can define two routes like that:\n\n``` yaml\n_service_demo:\n    pattern: /demo\n    defaults: { _controller: TestBundle:Default:demo}\n\n_service_demo_fallback:\n    pattern: /demo/\n    defaults: { _controller: FrameworkBundle:Redirect:redirect, route: _service_demo }\n```\n\nIn this case, the fallback route is only defined to redirect to the other one.\n",
            "It's quite verbose, but in some places would be really helpful. Also the desc() could be extracted as the translation for the default locale I guess. Which would be kinda neat, allowing you to only write keys and default values in templates, and have all the translation files generated automatically.\n",
            "Maybe the whole similar language stuff could be dropped from the PR, but I think it still is more accurate than the current code so I'd be happy to see some of those improvements in another PR.\n\nHowever, for such small things, packaging a full bundle sounds a bit silly, so I'd still like to see it in core, otherwise this kind of stuff is getting lost. The overhead is not so big since lang negotiation is only done once per session afaik?\n",
            "Since similar language support is completely optional (I mean, if it's null, nothing happens), the overhead is really minimal so I'd still think it's cool to have it in core.\n",
            "@fabpot Then maybe this should be scrapped from the request and moved to another service that takes a request header.\n",
            "@lsmith77 roughly half of the added lines is for the similar languages. The rest imo is a bugfix.\n",
            "@schmittjoh: Nope that sets it as `{{ foo }}` in every template. Which is ok, but I don't like to trash the global namespace, and if they're in a sub-variable, I think having them in app is much more elegant (depending on what the data is of course).\n",
            "Well you already have things like app.environment, app.debug and I have things to add like an app-specific country code for some multi-site deployment thing. IMO that belongs right on the app variable, and if not I don't know what else to call it.\n",
            "Alright I keep my hackish thoughts for myself then :)\n\nWould you care to help me to find another name than `app` that doesn't suck though? I couldn't come up with anything useful.\n",
            "As said on IRC, I'm not against this, I'm sure @schmittjoh's stuff is more flexible. I think it mostly comes down to whether @fabpot wants to have this in core or if we should keep a simple low-key solution and let people that need more power use the other bundle (in which case they should at least be made interoperable imo). I have no preference, and can't speak much about @schmittjoh's bundle due to lack of time on my end. I'd just like this to be unified one way or another - because the current split makes little sense and might confuse people.\n",
            "@schmittjoh: I think it's unfortunate that you decided to play lonesome cowboy. I have been using the SerializerBundle+FOSRestBundle with some success, but it still feels pretty tough to get it to do what I want without implementing custom logic in the entities or view handlers. Annotations are great but they are not context specific, and usually depending on the action I do not want to serialize a whole object including its relations. Having groups like for the validator would help.\n\nI agree the component is quite limited as it is, but the bundle is perhaps too complicated for basic use cases. I think bringing back stuff in core would provide more balance - and yes, that means compromising, but it's the same for everyone. The end result IMO is usually great, as the whole framework can attest.\n",
            "@atrauzzi: BTW, somewhat unrelated to the issue at hand, but speaking of stuff that you may have just missed by accident, have you seen the [SymfonyCMF](https://github.com/symfony-cmf) project? Might be nice to join instead of doing your own CMS thing on the side :)\n",
            "Well, I'm open to suggestions, but with your way we have lots of code out there that will be left with a  charset: UTF-8  in the config that really has no meaning, if you change it nothing happens. My patch fixes it, and while I indeed wouldn't recommend overriding kernel params, I don't see why we should prevent it either. It's just weird if you try to set a parameter and for a while it looks like it's set but it isn't really.\n",
            "There is a ton of things you shouldn't mess with if you don't know what you're doing, but that's not the point.\n\nThere is currently a bug with a feature that is shipped in the default config. Either we fix it or we remove it and throw a warning, which is a BC break. I am ok with both solutions, but imo fixing it would be better. \n\nIf really you are concerned about kernel params being overridden, I can change the check in kernel to only check for charset.\n",
            "@Stof: The parameters only have to exist when the container is compiled/dumped no? If so, I would say @fabpot's fix is ok for me. But otherwise it would be a bit annoying indeed.\n",
            "I agree with @Koc that we could do this to allow the logging (via the symfony logger service) of those fatal errors. It may also allow sending of email or such via monolog, which php wouldn't do, even properly configured.\n",
            "Yup maybe the Security component should detect if a user's primary key has changed in the session and throw an exception unless it was explicitly refreshed. Something along those lines. I'm not sure if it's possible though. @schmittjoh?\n",
            "You can add false === $value though. I think that'd be alright. But indeed empty() will not work.\n",
            "Although there is also empty arrays for collection/selects maybe, maybe it's best to use `if (empty($value) && '0' !== $value && 0 !== $value)`?\n",
            "What happens if you do call parent::__construct() in `Symfony\\Component\\Finder\\SplFileInfo::__construct`? The question is, if it fixes it, whether it also works on 5.3 or not.\n",
            "According to the spec it seems that PATCH requests shouldn't be of application/x-www-form-urlencoded content-type so it shouldn't match the first if, and in the second it's probably wrong to default to application/x-www-form-urlencoded, no?\n",
            "As I understand it, a PATCH request must specify a content-type or it's invalid, so we could just skip the second behavior if no content-type is present. \n\nAs your first link says:\n\n```\nThe list of differences is in a format defined by the media type of the entity (e.g.,\n application/diff ) and MUST include sufficient information to allow\nthe server to recreate the changes necessary to convert the original\nversion of the resource to the desired version.\n```\n\nSounds like PATCH is highly application specific, and not so standardized, probably because it's not very useful for most purposes.\n",
            "Yeah, but that sucks. Maybe bundles should enable autoescaping if they want to rely on it? :)\n",
            "Of course, we can also _always_ disable it. Say it was a bug, fix in 2.0.1, fine by me. \n",
            "Alright, let's close this.\n",
            "Wait what, the tag doesn't escape? That sounds inconsistently fail. Let's reopen. IMO we need to have the same behavior across the board, otherwise translators can never know if what they type will be escaped or not, so they don't know if it's ok to put html, they don't know if they should escape html entities themselves, etc.\n",
            "I think it would make perfect sense, escaping translations doesn't make much sense to begin with, but if we have one filter that escapes and one tag that doesn't, it's really bad imo. It means as a translator you never know where/how your text is going to be used, so it may or may not be escaped. As a template editor you probably know if the string should contain html so you could mark as raw those strings, but then why isn't the trans tag escaping as well? \n\n@fabpot you say that the trans tag only accepts plain text, sure, but the trans filter also in most cases takes only plain text, and here I don't know if it's normal but when I do `{{ 'foo'|trans }}` and `foo` is mapped to `<h1>Foo</h1>`, it escapes it, which is a bit annoying.\n\nAnyway I'm not really sure either or is better, but I think both tag and filter should do the same just so you can interchangeably use them without having to change the translation strings.\n",
            "The reason is that Cookie::__construct defaults to '/' btw, so if you don't specify it, and then call clearCookie without specifying again, the paths don't match.\n",
            "IMO if people want that they should specify the path manually, by default cookies are always set for the entire host and I think it should stay like that.\n",
            "@fabpot: ping? You said this was ok, but it was never merged.\n",
            "Thanks ;)\n",
            "It's an accessibility trade-off we have to make IMO. Having a new token per request means that if you browse a site with many tabs at once, a form could have an invalid token just because it was regenerated by another tab. Very annoying.\n\nWe could generate one-time tokens, but that makes things more complicated for a very little benefit. The bottom line is that if your connection is compromised and an attacker can steal your csrf token, having one per request or whatever won't help that much.\n",
            "You can access http://localhost/Symfony/web/config.php to verify that your web server and php configuration are sufficient to run Symfony2.\n",
            "@fabpot: Using GitHub's green merge button should be ok just this one time? It's only modifications in the comments after all.\n",
            "@odino: you can still do another PR just for the test cases if they still make sense.\n",
            "Does adding a flush() solve it too?\n",
            "After updating to stable at last, I noticed the same issue here. You can try it with firebug in the Net tab: http://nelm.io/ has the onload in ~500ms, http://nelm.io/?cl=1 (that re-enables the content-length header) takes 15seconds for the browser to time out. It's waiting for 9K to come, but gzipped content is only 2.7K. \n\nI'd recommend removing the header, unless that causes issue anywhere, in which case I really don't know what we'll do :)\n\nBTW this was with Apache 2.2 + mod_fastcgi, according to stuff I read, _maybe_ mod_fcgid wouldn't cause the issue, but I don't consider this an acceptable fix, and it seems like @krevindiou has had it with IIS too anyway.\n",
            "Well, obviously every browser has its own way of coping, but the fact is this is not a valid HTTP response anymore.\n\nBesides, sending the Content-Length seems to remove Apache's ability to send `Transfer-Encoding:chunked`, which is a bit fail too.\n",
            "@lsmith77 Re: MultiCurlAsync, this is usually a special case and an optimization, so I think you can add the Content-Length yourself on the backend.\n\nFor the rest, the main issue is that if you have script behaviors that rely on the load event, they are delayed by 15seconds in some browsers, which is really unacceptable.\n",
            "Ok, I updated this to just clarify the message, because when I got the issue after some serious copy-paste coding, I thought it was quite confusing - it seems to imply you mistyped the class name when using the class, and therefore it was not found, while the typo is in the class's file itself.\n",
            "I don't see a good reason not to allow it, assuming it causes no technical problems. If people do stupid things with it, we can't always help them.\n",
            "@fabpot: Isn't it possible to enforce stricter guidelines on the route? Like throw an exception in case requirements aren't specified for all segments that touch each other? It's already possible to screw up the regex by doing stuff like:\n\n```\nfoo:\n    pattern: /{a}/{b}\n    requirements: { a: '.+' }\n```\n\nMy point being, if people want, they'll break things, but if we can offer some guidelines and then allow power usage of tools, that's nicer than being restrictive.\n",
            "Alright, let's drop it for now then. Maybe later :)\n",
            "I think we could either have `umask(0770)` or with a safer `0700` in the standard distro, that way people would at least see it, and be able to change it more easily. Alternatively having a kernel parameter for the umask might do as well?\n",
            "Adding stuff to the standard-distro shouldn't affect any existing app, only new ones, unless they update all the files but in that case they should check wtf they are doing.\n",
            "Well it was easier up until recently because everything changed a lot, but now that default configs etc are stable, I think this should happen less.\n",
            "See #1686 - though I'm not too confident it should go through :)\n",
            "You can have your own base controller in your project for that kind of methods. We can't add every second one liner that makes someone's life a bit easier in the framework, especially since the docs say that you should drop the framework's base controller class eventually and roll your own stuff.\n\nThe purpose of the current methods is to abstract services mostly so that beginners don't have to know right away, but in this case, the gain is really minimal and it doesn't really hide anything.\n\nOn a side note, your `$json` argument should be `$data` or whatever, but it's not json yet at this point :)\n",
            "This is addressed by PR #1470\n",
            "yeah I'm just saying so that nobody bothers with a duplicate PR, but of course feel free to leave this open.\n",
            "I realize it's not useful for core stuff like the profiler or assetic, but in other instances it could be nice to have. I was mostly echoing http://stackoverflow.com/q/6571774/6512 \n",
            "Yes AdminBundle has the same problem, since it's open-source reusable stuff. But you could want an internal bundle to have some fixed routes.\n",
            "Of course, if you _really_ want it, you can override the core router loader service, and add your own routes, but only one bundle can do that.\n",
            ":+1: This kind of mess with everyone using their own caching providers is what you find in Drupal plugins, each having their own wheel, and it's very unpleasant to work with. \n",
            "IMO it would be better if we had a cache interface in Cache namespace or something, \u00e0 la PHPCR, that everyone -including doctrine- would extend from or just use as is. We can't build standards on top of the Doctrine namespace.\n",
            "Yes, that's a good start, for Symfony, but I'd hope for a world where every PHP lib could require 'cache_interface', and 'cache', and where any cache provider library would provide 'cache' and also require 'cache_interface. That should allow any library to use a cache chosen by the user (by requiring any lib that provides cache). I hope to do that with composer.\n",
            "I tried and couldn't reproduce the issue, if I delete a twig template, it correctly throws an exception saying it can not find the template. Can you reproduce it reliably? If you can't fix it yourself providing more information would be great.\n",
            "Well then maybe you can fix it ;) If I delete any template used on the page I'm looking at here it throws an exception.\n",
            "Sounds like your symfony vendor is not up to date, did you update your deps.lock file? You can try running `php bin/vendors.php update` to update deps.lock, but that will update every project to the latest version, so it may break your application if it's not up to date.\n",
            "I think they are now handled with routes or absolute paths/URLs, so you must do: `login_path: route_name` and then in your routing config define the `route_name` route with `/{_locale}/foo`. \n",
            "Ok, must be a real bug then :)\n",
            "Yup, it's definitely a good addition.\n",
            "@fabpot: I'm not sure why this is tagged 2.1, but IMO this should go in now.\n",
            "Note that it's never really registered. During the registration it's checked and skipped if not enabled.\n\nHowever, doing it as you suggest means overriding/copy-pasting all the code from the core Bundle class, which I don't like so much. It also means adding code specific to those two commands in a somewhat unrelated place, which I also don't like.\n\nI'm not saying the current solution is perfect, but from the alternatives I considered, it's the best I have found.\n",
            "Rebased\n",
            "Note that it's never really registered. During the registration it's checked and skipped if not enabled.\n\nHowever, doing it as you suggest means overriding/copy-pasting all the code from the core Bundle class, which I don't like so much. It also means adding code specific to those two commands in a somewhat unrelated place, which I also don't like.\n\nI'm not saying the current solution is perfect, but from the alternatives I considered, it's the best I have found.\n",
            "Rebased\n",
            "Added https://github.com/symfony/symfony/pull/1470. I hope it helps, we'll see what Fabien thinks, but please try it and report back if it solves the problem. Also having more detail on what you did/are attempting to do could be helpful.\n",
            "That would technically be better, but I suppose the reason @fabpot did it like it is now is that it's easier for newcomers, and in most cases, nobody needs conditional definition because either your bundle is enabled or it's not. FrameworkBundle is a bit special in that it has many many services in one.\n",
            "Merged in master (scheduled for 2.1)\n",
            "You can specify it when rendering:\n\n```\n{{ form_widget(form.fileField, {'attr': {'size': '50'}}) }}\n```\n\nIs this not working/not good enough?\n",
            "I fixed this issue shortly before RC1, so it's normal if you're on Beta5, please upgrade.\n",
            "Your Monolog vendor is outdated, make sure it is up to date.\n",
            "This could be implemented as an extra argument on getErrors imo, `$deep = false` or maybe even true by default.\n",
            "@stof: I think it could be true, and the code that displays errors can just specify false, but at least that way when someone tries to get errors in his controller, he gets it all, no wtf.\n",
            "I proposed `event_listener` but @fabpot didn't like it, `symfony.event_listener` could do, but usual we refer to global stuff as framework more than symfony, so `framework.event_listener`?\n\nThe point is that the kernel  owns  the event dispatcher, even if anyone can dispatch his stuff through it. You still listen on the kernel dispatcher. So it's not that wrong imo.\n\nAs for the others. I agree that the  core  name is a bit strange. kernel would be more suitable imo. @fabpot?\n",
            "Well yeah that's why I liked the idea of having only `event_listener`. IMO even with `framework.event_listener` the confusion can still happen.\n",
            "Ok, added another commit that does that renaming. Updated the two related PRs in -docs and -standard as well.\n",
            "@mvrhov: Yup, that's what pushed me to reconsider adding this.\n\n@stealth35: I'm not sure if this is needed. I don't want this to be too strict, with another validator or with an extra option I think we can make a check that the domain actually exists, or do a GET / on it or something, but this just checks validity of the syntax.\n",
            "@stealth35: Fixed\n",
            ":+1: \n\nFeel free to steal code/ideas from the sample at the end of http://seld.be/notes/unpredictable-hashes-for-humans - it's not completely fool proof I guess (mcrypt isn't always on I think), but otherwise I think it has the best methods in top-down order of quality.\n",
            "Whatever happens we need a few persons with advanced crypto knowledge to look at the plan before we go forward with it imo. But DB-backed solution sounds a bit slow.. I'd rather have a solution reading from MCRYPT_DEV_URANDOM, and an alternative one with higher quality that stores in the db if you like. URANDOM is more than enough for most purposes, and still way better than what the average website does out there (c.f. Sony & friends lately..).\n",
            "Summary of what I found out:\n\nWe should IMO have two APIs to serve various use cases in the best ways:\n\nFor crypto-safe use cases, we should use openssl_random_pseudo_bytes() and just let the user wait (roughly 1second on most machines). The delay might be fixed in 5.3.8 (or 5.3.7, but unlikely). This means that crypto-safe should not be called on every request because the hit is pretty bad. For 5.3.3 and below, the function sometimes times out, so perhaps we should degrade to non-crypto-safe and log a warning advising users to upgrade. See http://bugs.php.net/bug.php?id=51636 for news on this.\n\nFor non-crypto-safe use cases, we should just use uniqid(), according to Pierre Joye it does the smartest thing with 5.3+, so we can rely on it to give out decent (considering it's not crypto-safe) output. In 5.4 there might be a new api to mcrypt to get non-crypto-safe data out in windows, but right now MCRYPT_DEV_URANDOM is actually the same as MCRYPT_DEV_RANDOM.\n",
            "Yup I'm looking at this with @Stof\n",
            ":+1:, sounds like a good change especially with the event.\n",
            "Yes, considering the limitation (that we do not have an early response that can be injected:p) I guess it should be handled in the front controller.\n",
            "Shouldn't that cookie have _no_ expiration time, and therefore be bound to the browser session?\n",
            "Ah, alright. Makes sense then.\n",
            ":+1: finally some effort in this direction, although as @schmittjoh said without generation this won't bring us very far. But if it allows everyone to document their stuff already, I think it's still a plus, otherwise we'll have generation without content. And content without generation is still useful for people looking at the sources.\n",
            ":+1: finally some effort in this direction, although as @schmittjoh said without generation this won't bring us very far. But if it allows everyone to document their stuff already, I think it's still a plus, otherwise we'll have generation without content. And content without generation is still useful for people looking at the sources.\n",
            "I agree, for now. But the whole form validation in browsers is very young, and we can expect improvements in the future. For example Firefox already has a [non-standard attribute](https://developer.mozilla.org/en/HTML/Element/input#attr-x-moz-errormessage) and can [use title too](https://developer.mozilla.org/en/HTML/HTML5/Forms_in_HTML5#Constraint_Validation). So maybe we should keep it as is for now, just to avoid BC issues later on?\n",
            "Maybe it should be called attr for consistency with the template stuff, or the other should be renamed attributes. Other than that, I'm +1, data-\\* attributes are awesome, and abusers will find ways to abuse things either way.\n",
            "You can use `array('attr' => array('data-foo' => 'bar'))`, which will output `data-foo= bar `, which can be read easily by jQuery for example as `$('el').data('foo')`. It's a standard compliant and elegant way to pass extra data needed by the JS code along with DOM nodes, without polluting everything with script tags and all.\n",
            "Well, I agree it most likely belongs in the template, but it's kind of data stuff that is not directly impacting the display rules of the element, so in some cases having the possibility to set that from the php code might be useful. Anyway I'll let @mvrhov answer maybe he had a more concrete use case. I just think it's nice to leave the door open, but I don't really need it.\n",
            "Your Monolog vendor must not be up to date, those constants do exist.\n",
            "The  ?  placeholder there is in fact regular expression paths, and not routing related. Therefore you should use something like: `/[a-z]{2}/login` for example, which should match /en/login and /de/login etc.\n",
            "Ah sorry, I guess I misunderstood your question. This is indeed a problem for which there is no good solution atm I'm afraid. What you can try is this:\n\n``` yaml\naccount:\n    pattern:      /{_locale}/account\n    defaults: { ... }\n\n_post_login:\n    pattern:      /account\n    defaults: { _controller: FrameworkBundle:Redirect:redirect, route: 'account' }\n```\n\nThat way if all goes well if you point the target_path to /account, it will redirect and use the session's locale to generate the url to /xx/account.\n\nThe other solution, that's maybe less hackish, would be to specify the  _target_path  (iirc) as a hidden form field in your login form, and generate the proper url based on the current locale.\n",
            "Make sure it works before thanking me ;) As for the feature, considering the configuration value is only a _default_ and the actual value should be given in the form, I guess yes, if it's solved for you you can close this, and if you feel like being real nice you could head to https://github.com/symfony/symfony-docs and submit a pull request to improve the docs about this :)\n",
            "@schmittjoh looks like this code was never merged? Also I think you're misusing strtr() there, it should be `strtr($this->determineTargetUrl($request), array('{_locale}', $session->getLocale()));` or better just use str_replace in this case.\n",
            "I remember complaining about the need to write a freakin' CompilerPass to override simple stuff.. And that was even before we decided to remove most parameters :/\n\nSadly we can't have a clean design and have easy ways for people to shoot themselves in the foot. They still have the full power to shoot themselves though, it just requires more learning, even for valid use cases.\n",
            "+1 for @ajessu's proposal, just put the asset list into an assets parameter, it feels much more natural anyway.\n\nI'm just not sure about the `@jquery` notation though, it looks like a service reference, which is good because it's familiar, but bad because it's confusing, since I assume there is no jquery service but you're just referring to another bundle here? I don't really have a better idea though, just pointing it out.\n",
            "Good to see you sending PRs instead of just pointing out errors in commits ;) And +1 on this btw.\n\nThe only thing that could be nice to make this complete is to add support for FILTER_FLAG_NO_PRIV_RANGE and FILTER_FLAG_NO_RES_RANGE in the Ip Constraint.\n",
            "@kriswallsmith: Kinda. I'm just scared that we're locking ourselves in this situation where event names (and accompanying method names) will have to get longer and longer to avoid conflicts between bundles.\n\n@Koc: I know.\n\n@stloyd / @mvrhov: Thanks guys but this was just to get stuff to work quickly. I'm not saying the code is ready, I'd just like to get people's opinion on the idea of the change, then we can discuss whether this or that detail of the implementation is fine.\n",
            "@schmittjoh: I guess it could. I initially tried to keep more BC, then realized if we're gonna do the change we should break BC while we still can instead of having slower code that tries to handle every possible variant.\n",
            "Awesome! The only problem I see is that the Date and Time types have a pattern option already. Not sure what it does though, so I guess it just should be renamed to a more explicit name.\n",
            "Every kernel having its own root_dir could help, otherwise cache files might conflict. You can override the kernel's getRootDir() method to change that. Or as Koc said you put them in different folders and they'll automatically have different dirs.\n\nAlso another thing that you could have forgotten to do is change which kernel is used in the front controllers, do blog_dev.php and business_dev.php each have their own kernel included in the file?\n",
            "The thing is that flash messages are only useful when you redirect. If you don't redirect, then you can just pass the message to your template straight away, no need to go through the session store for that.\n\nIf you do redirect, then the system works well, unless you redirect twice in a row, but I really don't see why you would do that. This is bad practice for performance reasons, especially on mobile connections; and the valid use cases for doing this are extremely rare.\n",
            "Should be fixed by my commit now, if you can try and confirm it'd be great.\n",
            "+1, quite annoying and unnecessary to protect that for XSS imo, unless you don't trust your translators :)\n",
            "Yeah, I'd tend to say the couple guys that are gonna build a web-based form builder should know what they're doing, so we don't annoy all the others, but secure by default is probably a mantra we should stick to.\n",
            "I agree with the interface cleanups and the split of the normalization/denormalization support, that makes sense. The fact that you moved the normalization out of the encoders and into the serializer isn't that great though imo. \n\nI liked the fact that you could have your own encoder for PDF for example that would know about your project's own objects and use them in specific ways, in this case you would not require a normalization phase, making it a bit faster, and it might even prevent you from doing stuff if you don't have access to the objects. \n\nIf you really think this is a good thing, one way to solve it to avoid duplication in all encoders could be an interface (NormalizerAwareEncoder or so) an encoder can implement that would skip this step, and move the call to normalize into the encode method.\n",
            "What about my other comment? XmlEncoder calls normalize, but JsonEncoder does not anymore. \n\nAlso the cache seems to be gone again. \n\nFinally I don't quite get why you want to remove the ReflectionClass instance? It's not gonna be a major performance hit, but the fact is in most cases you'll want the CustomNormalizer to run first imo, and that one will always create the ReflectionClass, so why not do it early and let other normalizers use the same instance if needed?\n",
            "I'll review it all tomorrow (hopefully, sorry about the delay) then it'll be merged.\n",
            "I agree with the interface cleanups and the split of the normalization/denormalization support, that makes sense. The fact that you moved the normalization out of the encoders and into the serializer isn't that great though imo. \n\nI liked the fact that you could have your own encoder for PDF for example that would know about your project's own objects and use them in specific ways, in this case you would not require a normalization phase, making it a bit faster, and it might even prevent you from doing stuff if you don't have access to the objects. \n\nIf you really think this is a good thing, one way to solve it to avoid duplication in all encoders could be an interface (NormalizerAwareEncoder or so) an encoder can implement that would skip this step, and move the call to normalize into the encode method.\n",
            "What about my other comment? XmlEncoder calls normalize, but JsonEncoder does not anymore. \n\nAlso the cache seems to be gone again. \n\nFinally I don't quite get why you want to remove the ReflectionClass instance? It's not gonna be a major performance hit, but the fact is in most cases you'll want the CustomNormalizer to run first imo, and that one will always create the ReflectionClass, so why not do it early and let other normalizers use the same instance if needed?\n",
            "I'll review it all tomorrow (hopefully, sorry about the delay) then it'll be merged.\n",
            "@schmittjoh: what about @rdohms's other suggestion? To me having the full namespace in the `@import` every time is also a pain, and if it could be mitigated it'd be great.\n",
            "Conditional includes are messing with APC's caching though I believe.\n",
            "This is a bad idea I think. The problem is only if the resource that the browser tries to get does not exist, so having rules for jpg and all gives the false impression that without this rule they would be secured, which is not the case.\n\nThe only other/better way to fix it in my sense would be to check whether the page that is requested matches any route, but that probably creates too many dependencies to be acceptable, that's why I went this way.\n",
            "Besides, this is really not _magic_, it's just a conditional statement to work around a problem that most browsers will introduce, that will confuse the hell out of most users. Pragmatic is what it is.\n",
            "Johannes: There is not gonna be this one and another and another. The favicon is the only thing that browsers fetch automatically afaik. \n\nI didn't get the second part of your comment. If they want to secure the favicon, they would need to have an actual route for it, and modify the htaccess or something, because at the moment static files are **not** going through the framework. And if they would do that, everything would still work fine with my patch, the only thing is that if you'd go to /favicon.ico, and then get a login form, and login, you would be redirected to / instead of /favicon.ico, that's the only edge case this patch creates, and it is a really tiny tiny one compared to what it solves.\n",
            "@fabpot: true, some of those damned apple-touch-icon thingies are fetched automatically. Therefore I guess I'm back to my other proposal: use the router to check if the url is actually matching any route, and if not you don't store that url in the session since you don't really want to redirect the user to a 404..\n",
            "Sitemap and robots are only fetched by crawlers afaik, which shouldn't be able to login anyways. But what do you think of my router idea? This would be the most future proof since it works with everything, and does not require any configuration.\n",
            "Discussed a bit further on irc. Johannes doesn't like to depend on the router, and also there could be more issues if people do ajax requests or something that are valid on the login page, then they'd again override their session value. \n\nTherefore I see two last options:\n- The very least: stop overriding the value. If it's already in the session, don't write over it. We could store a timestamp as well to have a 60seconds TTL or something. But I don't think that's necessary because this issue is really only on sites that are secured on `/.*`, which means that typically you won't hit 5 different urls before logging in.\n- Ideally: kill the damn _feature_. Force users to implement it themselves by getting the referrer and storing it in the login form as a hidden field, no more session storage. If we can do this automatically that'd be even better. Using the session to store that is fucked up. If I click two private links for example on a site, and both pages are opened and ask me to login, if I login in both, I don't want to end up twice on the second page. Every login form should be context-aware.\n\nWhat do you think?\n",
            "I'd still like to investigate storing the stuff in the form, we could still store in both session and form, to take care of the password forgotten case, we'd fallback on the session if the form doesn't have any data. I don't know the code well enough to assess the feasibility at the moment, but could you please give it some thought in an open-minded way? :)\n",
            "So it's mostly a documentation issue I guess. If you don't mind, let's leave this open until it can be fixed in docs.\n",
            "Ack - and the standard distro now has robots, apple icon and favicon files by default, which should reduce the problems. Closing this.\n"
        ],
        "issues": [
            {
                "title": "Add population count command",
                "body": "Seeing as this is really easy and efficient in C, but can be pretty cumbersome or slow in higher level languages, I think it would be quite cool to have it native in redis: http://en.wikipedia.org/wiki/Hamming_weight#Language_support\n\nThe use case comes from http://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/\n"
            },
            {
                "title": "Update requirements of the deb package",
                "body": "Virtual packages such as java*-runtime are provided by various java/JRE implementations, which makes it more flexible to use.\n\nNote: I can't say I tested this, but AFAIK it should help. If you can make a test build and link to it on the related ML thread I can try to install it see if it still works with my setup at least.\n"
            },
            {
                "title": "Memory leaks",
                "body": "I'm having some memory issues with ElasticSearch. To the point that my box totally froze a couple days ago when every process started invoking the oom-killer.\n\nHere are all the infos I could gather so far, if you need anything else, please let me know and I'll try to provide.\n\n```\n$ sudo tail -n20 /var/log/syslog\nFeb 18 01:36:12 intertubes kernel: grsec: Segmentation fault occurred at 00007f810622e280 in /usr/local/java/jre1.6.0_13/bin/java[java:4911] uid/euid:0/0 gid/egid:0/0, parent /bin/bash[bash:4648] uid/euid:0/0 gid/egid:0/0\nFeb 18 01:36:14 intertubes kernel: grsec: Segmentation fault occurred at 00007f810622e8c0 in /usr/local/java/jre1.6.0_13/bin/java[java:4947] uid/euid:0/0 gid/egid:0/0, parent /bin/bash[bash:4648] uid/euid:0/0 gid/egid:0/0\nFeb 18 01:36:14 intertubes kernel: grsec: Segmentation fault occurred at 00007f810622e5c0 in /usr/local/java/jre1.6.0_13/bin/java[java:4953] uid/euid:0/0 gid/egid:0/0, parent /bin/bash[bash:4648] uid/euid:0/0 gid/egid:0/0\nFeb 18 01:36:28 intertubes kernel: grsec: Segmentation fault occurred at 00007f810622ea40 in /usr/local/java/jre1.6.0_13/bin/java[java:4934] uid/euid:0/0 gid/egid:0/0, parent /bin/bash[bash:4648] uid/euid:0/0 gid/egid:0/0\nFeb 18 01:36:28 intertubes kernel: grsec: Segmentation fault occurred at 00007f810622e980 in /usr/local/java/jre1.6.0_13/bin/java[java:4909] uid/euid:0/0 gid/egid:0/0, parent /bin/bash[bash:4648] uid/euid:0/0 gid/egid:0/0\n\n$ java -version\njava version  1.6.0_13 \nJava(TM) SE Runtime Environment (build 1.6.0_13-b03)\nJava HotSpot(TM) 64-Bit Server VM (build 11.3-b02, mixed mode)\n\n$ uname -a\nLinux intertubes.ch 2.6.34.6-xxxx-grs-ipv6-64 .#3 SMP Fri Sep 17 16:06:38 UTC 2010 x86_64 GNU/Linux\n```\n\nElasticSearch version is 0.14.2.\n\nBasically in the last 3 days since I started it, it went from 8.4 to 11.4% of memory usage, and it's virtually unused. The syslog dumps are also somewhat worrying, but I'm not sure what they mean or where I can find more info.\n"
            },
            {
                "title": "Fix symfony/yaml requirement",
                "body": "Requiring `~2.1` in composer.json would be best, because that allows any version up to 3.0. BC shouldn't be an issue for the yaml component in the 2.x series so it's safe enough. Without this it's impossible to require phpunit in projects using symfony 2.2+ packages.\n"
            },
            {
                "title": "Use psr0 autoloading instead of requiring a bunch of phpunit files at every request",
                "body": "This one is slightly problematic. \n\nBasically force-including PHPUnit/Autoload.php and similar files in satellite projects is not a good thing, because those register a lot of autoloaders, and require a few files already, which means if you have phpunit installed in your project, whenever you include the composer autoloader you end up loading a bunch of PHPUnit files you'll most likely not need.\n\nSo the solution is to switch to PSR-0 autoloading, which seems to work fine apart from PHPUnit_Util_GlobalState that calls phpunit_autoload() which fails obviously. So I attempted to workaround the issue by just returning phpunit files from the declared classes. I'm not sure however whether this is complete nor if it is an acceptable workaround since I'm not sure in which contexts this method is used. That said I don't see a better way to fix it apart from reworking the code a bit more so that the classmap used in phpunit_autoload() is available separately/individually in another file of the project.\n\nIf this solution should be accepted, the same change to composer.json should be applied to all satellite projects with their respective PSR-0 prefixes.\n"
            },
            {
                "title": "Remove phpunit.bat since composer creates a bat wrapper itself on windows",
                "body": ""
            },
            {
                "title": "Clean up composer.json",
                "body": "See claylo/conductor#1 - this should be applied to all the new  composerified  repos before you tag a new version.\n"
            },
            {
                "title": "Exception handling fix",
                "body": "See the commit description, this is a really annoying side effect which has led to bad code making it through the tests, and then failing in real conditions.\n"
            },
            {
                "title": "Parallelized travis builds",
                "body": "Sort of WIP, I need to see how travis behaves when building the PR. If successful it might replace #7708\n"
            },
            {
                "title": "[Console] Make text output of HelpCommand docopt compliant",
                "body": "The whole thing already feels like [docopt](http://docopt.org/) a bit - but by changing a few things, adding default values etc I think we could do better.\n\nAnother thing that might be good in addition to having ->setHelp() in the commands is a ->setUsage() that would take an array of usage examples that can be dumped on top of the help text in the Usage section.\n"
            },
            {
                "title": "[FrameworkBundle] bundle:install / remove commands",
                "body": "I have been thinking about this for a while and I think the best way to have bundles added to the kernel etc when you install one from composer is to do this from the symfony console.\n\nThe main issue is that if it's done with a composer hook/script, it'll fire at random when you install an old bundle, or if you upgrade a bundle it will remove/install it if it's installed as a zip. Lots of issues.\n\nOn the other hand, a bundle:install command could take a package name, install it via composer, and once installed prompt you if it should be enabled for all envs or only dev/test, and prompt if it should register a config/routing/.. automatically. Similarly bundle:remove would clean up the config, routing and whatnot, instead of leaving users with all that dirty work to do.\n\nThe downside is it probably means having composer as a dependency of the command.\n"
            },
            {
                "title": "[2.2] [Routing] Re-generating the current URL",
                "body": "(Derived from #2951)\n\nGenerating the current URL is sometimes useful, one common example is to create links to the same page with a different locale, but there are other use cases like multi-parameterized routes where you want to change one while keeping the rest intact.\n\nI would like to propose the following alternatives (in twig helpers, but the same should be added to the UrlGenerator obviously):\n- `{{ path(null, {foo: bar }) }}`: `null` would generate the current route, and automatically merge the second arg with the current requests's `_route_params`.\n- `{{ self({foo:  bar }) }}`: a new helper for this behavior instead of hackish `null` behavior.\n"
            },
            {
                "title": "[Router][FrameworkBundle] Class loading exceptions hidden by the DelegatingLoader",
                "body": "We just spent a nice debugging session only to find that there was a typo in the namespace of the class (inside the file), which meant the class couldn't be loaded, and it did not appear as valid in the routes.\n\nThe reason is that the [ControllerNameParser](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/ControllerNameParser.php#L54) is checking class_exists, which throws an exception on this particular case, so all is well, but the [DelegatingLoader](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/DelegatingLoader.php#L63) catches the exceptions and discards it all.\n\nI'm not sure how to fix this, because I suppose the DelegatingLoader has a good reason for ignoring exceptions. I don't see what that would be though? Surely if a controller can not be resolved, the developers should be warned?\n"
            },
            {
                "title": "[Validator] Improve EmailValidator",
                "body": "We really should migrate away from filter_var to a stronger solution like http://code.google.com/p/isemail/source/browse/PHP/trunk/is_email.php which seems like the only solution mentioning RFCs, being maintained, and not being dependent on a specific PHP version.\n\nI emailed the author to see if he would be willing to migrate it to a more class-based approach and remove all those constants from the global namespace.\n"
            },
            {
                "title": "Include untrusted host in the exception message",
                "body": "`Invalid *` error message without the actual value that triggered them are really unhelpful to debug issues.\n"
            },
            {
                "title": "[DI] Fixes access of aliases shared services",
                "body": "Fixes #8096 and I noticed that the aliases methods weren't really needed anymore so I removed them. I think it's fine since they were protected, but did it in a separate commit in case you just want the bugfix.\n\nNote that while the DI tests pass, I didn't run this patch as part of a real app. I'd appreciate if someone has the time to verify it still works given it's slightly critical code.\n"
            },
            {
                "title": "[DependencyInjection] Make service names case sensitive",
                "body": "This skips a call that IMO is unnecessary, but obviously it is strictly speaking a BC break. I just have no idea if anyone relies on service names being case insensitive or not.\n"
            },
            {
                "title": "[DependencyInjection] Add a method map to avoid computing method names from service names",
                "body": "/cc @schmittjoh @stof\n\nThe diff is a bit messy because of indenting, but all this adds really is an `if(isset($this->methodMap[$id])) { $method = $this->methodMap[$id]; }` that bypasses the method_exists + strtr calls. It's not a huge improvements but saves some cycles on something that's typically called a few hundred times per request.\n"
            },
            {
                "title": "A few optimizations",
                "body": ""
            },
            {
                "title": "Windows test fixes",
                "body": "I checked all components/bundles/bridges.. Now everything is green except a few things still in Process that I wasn't sure what to do with yet.\n"
            },
            {
                "title": "[Console] Allow arrays to be used for lists of shortcuts",
                "body": "Follow-up to #7839\n"
            },
            {
                "title": "[Console] Add more verbosity levels",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6066 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2554 |\n\nThis adds new verbosity levels.\n\nReplaces #7626 /cc @dlsniper\n"
            },
            {
                "title": "[Console] Add support for multiple InputOption shortcuts",
                "body": "IDEs and others parsing the xml output of command helps should take note that there is a new shortcuts attribute listing all shortcuts, the shortcut one will only list the first for BC.\n"
            },
            {
                "title": "[Console] Input::__toString escaping fixes",
                "body": "Follow up to #7648, also includes a fix for StringInput to parse newlines and other whitespace chars properly instead of normalizing them all to spaces. It was kinda needed to test it properly, so I bundled both in one.\n"
            },
            {
                "title": "[Console] Fix merging of application definition",
                "body": "Fixes #7068, replaces #7158 - the fix there introduces a regression and always shows the application arguments in the commands help (i.e. it lists  command  as an argument to every command, except list because it overrides getNativeDefinition).\n"
            },
            {
                "title": "[Console] Add ArgvInput::__toString, fixes #7257",
                "body": ""
            },
            {
                "title": "[2.2][Console] Fix autocompletion of command names when namespaces conflict",
                "body": "Fixes #7234\n\nCurrently autocompletion of namespaces works on _all_ namespaces at once. This fixes it to only search inside subnamespaces once we matched the first level namespace. Otherwise if you have `api:doc` and `generate:doctrine:entity` commands, typing `gen:doc:entity` trips it up because it thinks  doc  is  api:doc , and you end up with a completed name of `generate:doc:entity` which does not match any command.\n"
            },
            {
                "title": "[2.2][HttpKernel] Remove args from 5.3 stack traces to avoid filling log files",
                "body": "Fixes #7259 - it just makes the PHP 5.3 behavior match the one on 5.4.\n"
            },
            {
                "title": "[Console] Command aliases are not auto-completed",
                "body": "These two work fine, the second is an alias of the first:\n\n```\n$ app/console doctrine:generate:entity\n  Welcome to the Doctrine2 entity generator\n\n$ app/console generate:doctrine:entity\n  Welcome to the Doctrine2 entity generator\n```\n\nHowever, if you use shortened names, the aliased form does not work:\n\n```\n$ app/console doc:gen:entity\n  Welcome to the Doctrine2 entity generator\n\n$ app/console gen:doc:entity\n  [InvalidArgumentException]\n  Command  gen:doc:entity  is not defined.\n```\n"
            },
            {
                "title": "[Process] Add a version check to the code added in #7102",
                "body": "When PHP 5.5 is released, and if the code still seems to work fine, a version check could /should be added to the block added in #7102 so that it's only executed on 5.3/5.4 since these are the buggy versions.\n"
            },
            {
                "title": "[Process][2.0] getcwd failure fix",
                "body": "Fix regression introduced in #6620\nFixes #7082\n\nFor reference, here is the current behavior I saw:\n\nPHP 5.4.11, windows:\n\n```\n5.4.11\\php.exe -r  chdir('c:\\\\'); var_dump(getcwd()); $p = proc_open('pwd', [['pipe', 'r'], ['pipe', 'w'], ['pipe', 'w']], $pipes, null); var_dump(stream_get_contents($pipes[1])); \nstring(3)  C:\\\\ \nstring(14)  /c/Users/seld\\n \n```\n\n(I use pwd which is a unix util so it dumps a funny path, but don't look at that)\n\nPHP 5.5alpha4, windows (seems fixed):\n\n```\n5.5.0a4\\php.exe  -r  chdir('c:\\\\'); var_dump(getcwd()); $p = proc_open('pwd', [['pipe', 'r'], ['pipe', 'w'], ['pipe', 'w']], $pipes, null); var_dump(stream_get_contents($pipes[1])); \nstring(3)  C:\\ \nstring(3)  /c\\n \n```\n\nPHP 5.3.10, ubuntu:\n\n```\nphp -r  chdir('/'); var_dump(getcwd()); \\$p = proc_open('pwd', array(array('pipe', 'r'), array('p\nipe', 'w'), array('pipe', 'w')), \\$pipes, null); var_dump(stream_get_contents(\\$pipes[1])); \nstring(1)  / \nstring(2)  /\\n \n```\n\nSince the permission issue that #6620 originally was fixing is most likely not gonna happen on windows, this seems like a safe enough compromise. Ideally a check for PHP<5.5 should be introduced, but I would like to be sure it's been fixed and is not just a lucky coincidence (/cc @PierreJoye)\n\nI would recommend merging fast and maybe adding the version check later, since it breaks composer create-project on windows. The workaround being: cd in the dir and run `composer install` again to finalize the project setup.\n"
            },
            {
                "title": "[Process] Warn user with a useful message when tmpfile() failed",
                "body": "Simple warning so users know what's going on instead of getting a proc_open error, see composer/composer#1581. \n\nCan't get the PR template since ~~symfony.com~~ my dns resolver is dead :)\n"
            },
            {
                "title": "[HttpFoundation] Fix sentence and provide a hint at the solution for affected people",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Remove special handling of empty arrays, fixes #5506",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: tiny/no\nSymfony2 tests pass: yes\nFixes the following tickets: #5506\nLicense of the code: MIT\n\nSee the linked issue for details, IMO it should be removed because it's not consistently applied and just a WTF for people.\n"
            },
            {
                "title": "[HttpKernel][MonologBridge] PSR-3 support",
                "body": "This enables PSR-3 support and monolog 1.3+. The first commit is the main part. The rest deals with deprecation of short-hand methods (warn/err/crit/emerg) that are fully expanded in PSR-3 (warning/error/critical/emergency).\n\nThe downside of deprecating them is that for bundles it's a bit harder to support older and newer versions. If that is too much of a hassle you can drop that for now and cherry pick the first commit.\n\nThe upside is that it forces people to move towards PSR-3 compatible stuff, which means eventually we could completely drop the LoggerInterface from the framework. In any case I think the documentation should only mention the `Psr\\Log\\LoggerInterface` and people should start hinting against that. The change should be done in core as well I suppose.\n\nAnyway I wanted to throw this out there as it is to get feedback.\n"
            },
            {
                "title": "[Console] Fix output formatting issues",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n"
            },
            {
                "title": "[Console] Add support for parsing terminal width/height on localized windows",
                "body": "Fixes #5742\n"
            },
            {
                "title": "[Console] Add --markdown export to HelpCommand",
                "body": "The Help command supports a dump to xml via `console help --xml command`. Having the same for with a [docopt](http://docopt.org/)-looking markdown output would be pretty neat for dumping stuff to a web page documentation.\n"
            },
            {
                "title": "[RFC] Better handling of @deprecated",
                "body": "The current path we are on is the following: 2.1 added a few `@deprecated` annotations - 2.2 might add a few more, and 2.3 will remove those methods. When upgrading to 2.3 users that did not carefully read release notes will suffer fatal errors for calling non-existing methods.\n\nI think this might be a better approach: Add `trigger_error()` calls in 2.2 for all the deprecated methods, that send a `E_USER_DEPRECATED` with a useful upgrade message. The problem is our error handler converts that to exceptions, which means upgrading to 2.2 you can't develop anymore without upgrading your code. Therefore I have another change proposal that accompanies it: `E_DEPRECATED` and `E_USER_DEPRECATED` should be treated more softly even in development. Instead of throwing, log a warning message, and add a warning to a new data collector that would show a warning in the dev toolbar saying you are using deprecated methods. You are free to ignore it until 2.3 if you like fatals better, but it gives you a good chance to smoothly upgrade instead of putting the app in an unusable state until you do all the required changes.\n"
            },
            {
                "title": "[Form] Defining Forms in Yaml",
                "body": "This came up earlier while I was showing the form framework to someone. He asked why forms could not be defined in yaml files instead of needing this Type class, and at first sight I can't find a good reason why not.\n\nUnless I missed something, most (all?) forms are just a name/class + an array of fields with options. \n\nThoughts @bschussek?\n"
            },
            {
                "title": "[Security] Add simpler customization options",
                "body": "The goal of this is to provide a simpler extension point for people that don't have the time to dive into the whole security factory + authentication provider + user provider + authentication listener + token mess. As it stands, it gives you a way to just create one class that is handling all the security stuff in one (by implementing SimpleFormAuthenticatorInterface and UserProviderInterface) + one or more token classes.\n\nI would like feedback on whether people think this makes sense or not before continuing and doing a SimpleHttpAuthenticatorInterface for non-form based stuff.\n\nJust FYI that's how it would look in security.yml:\n\n``` yaml\nsecurity:\n    providers:\n        simple:\n            id: simple_authenticator\n    firewalls:\n        foo:\n            pattern: ^/\n            simple_form:\n                provider: simple\n                authenticator: simple_authenticator\n```\n\n/cc @atrauzzi (who posted a long rant on the ML about how hard this all is, and I can't agree more - I hope it's the right account on github?)\n"
            },
            {
                "title": "[Console] Add higher verbosity levels",
                "body": "I think there should be new VERBOSITY_VERY_VERBOSE and VERBOSITY_DEBUG levels added to https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Output/OutputInterface.php#L27 and the application should accept by default levels via `-v`, `-vv` and `-vvv`. Not sure if the last bit is already support by the Console component or not.\n\nFor information the verbosity is handled [in the Application](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Application.php#L175)\n"
            },
            {
                "title": "[Console] Read input in raw mode to avoid processing escape sequences",
                "body": "As outlined in composer/composer#1238:\n\n> Use read -r rather than the current read shell builtin to take a password from the user on the CLI, the -r is the raw option which means backslashes () aren't interpreted as escape characters, so \\ is a literal \\, otherwise they are nommed or double slashes become single ones etc.\n"
            },
            {
                "title": "[Console] Fix error when mode is not in PATH",
                "body": "Small bugfix, fixes composer/composer#1208\n"
            },
            {
                "title": "[Console] List available commands in the help command",
                "body": "The help command should at least mention the list command (only if it's enabled though), or just simply list available commands when called on the top level `console --help` (not `console foo --help`). \n\nSee composer/composer#1143\n"
            },
            {
                "title": "[Process] Add workaround for PHP's internal sigchild failing to return proper exit codes",
                "body": "PHP compiled with --enable-sigchild basically fails to return exit codes, and randomly returns -1 instead most of the time (see https://bugs.php.net/bug.php?id=29123).\n\nThis works around it by having the exit code going through another pipe. It's enabled by default for linux because the new pipe trick won't work on windows I think, but that's unlikely to be an issue because most people don't compile their own php there.\n\nI could have it enabled only when sigchild is enabled using the code below, but obviously that adds some overhead, so I'm not sure what's worst.\n\n``` php\nob_start();\nphpinfo(INFO_GENERAL); \n$sigchild = false !== strpos(ob_get_clean(), '--enable-sigchild');\n```\n\nThat said, this renders composer unusable (because we do check exit codes) for people having sigchild enabled, and it's not so easy to workaround outside of the Process class itself, so I hope this is an acceptable fix.\n"
            },
            {
                "title": "Add support for Monolog 1.2.0",
                "body": "It's BC just in case someone still uses an older monolog version\n"
            },
            {
                "title": "Add support for Monolog 1.2.0",
                "body": "It's BC just in case someone still uses an older monolog version\n"
            },
            {
                "title": "Rename unmodifiable to immutable",
                "body": "Maybe it's just me, but it sounded really wrong. The EventDispatcher one was added in 2.1 so no BC break. I don't know about the Form one, but I guess it's just used internally anyway.\n"
            },
            {
                "title": "[Doctrine] Hydration profiling",
                "body": "At the moment, the DoctrineDataCollector reports the query duration, but not the time it takes to hydrate. I see a query taking 0.5sec and my controller taking 20seconds in the timeline. If the doctrine pane reported the query as having taken 0.5sec + ~20sec to hydrate, it would be a bit easier to see what the hell is going on.\n"
            },
            {
                "title": "ExecutableFinder changes",
                "body": "It cleans up stuff a bit and adds a guess for xampp users that wouldn't have php in their path\n"
            },
            {
                "title": "[Routing] Add strict_parameters option to disable exceptions on invalid parameters",
                "body": ""
            },
            {
                "title": "Force root package version in travis builds",
                "body": "This hopefully fixes the composer builds. Let's see what travisbot thinks.\n"
            },
            {
                "title": "[Process] Windows callback handling fix",
                "body": ""
            },
            {
                "title": "Add tests for output capturing",
                "body": "The first test fails on windows, this problem appeared with the merge of #4069 /cc @pulzarraider\n\nBasically it doesn't seem to be capturing output properly anymore. I have tried to debug it but I just seem to be missing a point in where it captures this.\n"
            },
            {
                "title": "[DependencyInjection] Add ParameterBag::remove",
                "body": ""
            },
            {
                "title": "Update master branch alias to target 2.2",
                "body": ""
            },
            {
                "title": "Bump monolog dependency in 2.0",
                "body": ""
            },
            {
                "title": "[Console] Use proc_open instead of exec to suppress errors.",
                "body": "stty is _sometimes_ there on windows, but not always, so with proc_open we can quietly return null instead of outputting errors.\n\n/cc @gnutix: that's the error you told me about this morning in https://gist.github.com/2478037\n"
            },
            {
                "title": "[Filesystem][Others] Fix chmod method and all calls to chmod throughout the framework",
                "body": "Fixes the issue I mentioned in #4004 - basically php's chmod() does not apply the umask by default (unlike mkdir's mode arg which is masked by umask, from which I guess the confusion comes from).\n\nSo I expanded all cache writes and such to 0666 when they were 0644, and then mask it against umask, so that we respect the user settings a bit better.\n\nAlso fixed Filesystem::chmod which completely ignored the umask argument before.\n\nFixed a few tests on windows too.\n"
            },
            {
                "title": "[Templating] Return base URL when an empty path is given to asset()",
                "body": "I think it's straightforward enough in the patch. Tests pass. It's quite useful to generate the base path to send to a JS frontend.\n"
            },
            {
                "title": "Process fixes",
                "body": "A few fixes, including making the tests pass on windows and fixing composer/composer#543. Given the sensitivity of this code I did a bunch of very granular commits explaining everything.\n"
            },
            {
                "title": "[Finder] Avoid unnecessary use of the @ operator",
                "body": "Tests are passing\n"
            },
            {
                "title": "[Console] Fixes terminal width in tests",
                "body": "This fixes the [tests that broke on travis-ci](http://travis-ci.org/#!/symfony/symfony/jobs/1031109) (which seems to advertise a terminal width of ~34, not sure why).\n"
            },
            {
                "title": "[Console] Exception rendering fixes",
                "body": "This fixes two things:\n- `\\r`'s in exception messages were output (in case of `\\r\\n` newlines), creating really weird results on windows.\n- long exception messages were wrapping and then the  red  block was completely messed up, with half black/half red lines, now it's wrapped before output if the terminal width can be detected.\n\nIf you don't care about merging this for 2.0, you can also merge the `console_ex` branch which applies on master. Due to moving tests and renaming of some normalize stuff in the tests, the two test patches are kind of different.\n\nRFC: I am really not sure where to put those getTerminalWidth/Height methods. I guess this is not the best place.\n"
            },
            {
                "title": "[Validator] Allow empty keys in the validation config",
                "body": "This allows you to just list fields that don't have validation rules (yet), for future reference it's kinda helpful. Right now if they're not commented out a fatal is thrown because null isn't an array.\n"
            },
            {
                "title": "[FrameworkBundle] Add support for full URLs to redirect controller",
                "body": "I'd consider this a bugfix since at the moment using an URL just redirects to `/current/pathhttp://example.org`.\n"
            },
            {
                "title": "[Security] Log file/line that triggered the AccessDeniedException",
                "body": "I had to debug some strange issue in a complex system and with all the nested requests and such, knowing exactly what was triggering the login page to show up wasn't so easy. This helps (unless you use annotations, but the JMSSecurityExtra bundle could use a custom exception class that overrides getLine/getFile and makes it point to the annotation line).\n"
            },
            {
                "title": "[Process] Fix command escaping",
                "body": "My bad, I misunderstood what escapeshellcmd was good for. This fixes it by properly escaping all args.\n\nThe test suite hangs here but it already did before, so I'm not sure if all tests pass.\n"
            },
            {
                "title": "Chainable response",
                "body": "Fixed feedback from #3605\n"
            },
            {
                "title": "Chainable responses",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n"
            },
            {
                "title": "[Process] Force _ENV inheritance when it is populated, fixes #3555",
                "body": "Tentative fix for #3555 - should be confirmed before merging IMO.\n"
            },
            {
                "title": "[DependencyInjection] Allow parsing of parameters near escaped percent signs",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no (unless someone relied on the buggy behavior..)\nSymfony2 tests pass: yes\n"
            },
            {
                "title": "[Tests] Allow autoload to run without vendors being cloned",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n"
            },
            {
                "title": "Add branch-alias for composer",
                "body": "This should restore the 2.1-dev version (as an alias of dev-master) so that `2.*` or `2.1.*` constraints work again. I'll adjust packagist soon to also display those aliases.\n"
            },
            {
                "title": "Ignore destructive memcached tests by default",
                "body": "Follow up for #3438\n"
            },
            {
                "title": "Fix tests",
                "body": "- Some windows fixes\n- Skip memcached for real when it's not there - by the way I think those tests are insane since they seem to run a purge() on the memcached server. If you run this by accident somewhere where it matters it could hurt. I think they should be put in a group disabled by default, I'll be happy to add that change if it's deemed useful.\n- Fixed the timer tests for good on windows (which seems to be quite bad at `usleep`). I also documented them so you actually know how it failed when it does, the false instead of true wasn't super useful.\n"
            },
            {
                "title": "[HttpKernel] Remove the _controller since it is not a route parameter part of the URL",
                "body": "There is no reason for the _controller to be there, the whole idea behind this _route_params thing was to help re-generating the current page's URL, you can easily grab the _route + _route_params and reconstruct it without having lots of garbage as query parameters like `?_controller=Foo::..`\n"
            },
            {
                "title": "[WebProfiler] Add default route to access the profiler more easily",
                "body": "When you have the toolbar disabled, it's pretty annoying to reach the _profiler, I never remember what to type to get something except `/_profiler`. This shows the last ten runs which is quite useful.\n"
            },
            {
                "title": "[FrameworkBundle] Remove all default values from redirected url",
                "body": ""
            },
            {
                "title": "ProcessBuilder clean up",
                "body": "- Code cleanup\n- Added create() static method for easy creation until we can do `$process = (new ProcessBuilder())->add()->getProcess();`\n- Removed windows wrapping of commands. This does not belong there IMO. If assetic needs that it should add it, and if it's generally beneficial to everyone then we should add it to Process, but having it implicitly only when using ProcessBuilder makes on sense.\n"
            },
            {
                "title": "[HttpKernel] Escape php tags to avoid eval() injection in HttpCache",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Use only _route_params to generate redirect routes",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nRoutes in RedirectController are generated using all request attributes, which is inconvenient since I abuse request attributes to store other things (device types and such) relevant to the app. It renders the RedirectController useless since it adds unrelated query parameters to URLs it creates.\n"
            },
            {
                "title": "[Console] Fix tests on windows",
                "body": "Rebased version of #3059 after merging #3066. This code isn't in 2.0 but still needs fixing.\n"
            },
            {
                "title": "Fix Console tests on windows (2.0)",
                "body": "Rebased #3059 on 2.0 - once this is applied I will rebase it again because some of the fixes could not be applied to 2.0.\n"
            },
            {
                "title": "[Console] Allow redefinition of application options descriptions",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThis allows you to redefine an `InputOption` as long as it keeps the same semantic (same default, same name, same alias, same modes). There are two purposes:\n- Modifying the description with a more accurate one\n- Making sure the option appears in your commands' help\n\nConcrete example: I often want to provide a verbose version of commands. It's an elegant and very common pattern, but I basically can't document what is going to happen if you do `--verbose` since the base Application already defines `--verbose`. Also the `--verbose` option does not appear when you do `console <command> --help`, which means people probably won't think of using that option.\n"
            },
            {
                "title": "[Console] Format simple arrays nicer",
                "body": "Minor cosmetic adjustment for simple (i.e. with sequential numeric keys) arrays\n"
            },
            {
                "title": "Fix Console tests on windows",
                "body": ""
            },
            {
                "title": "useAttributeAsKey and fixXmlConfig also apply to non-XML config files",
                "body": "It was my understanding that those two functions only applied when loading xml config files. It seems however that they always apply.\n\nI had this in my twig globals:\n\n```\ntwig:\n    globals:\n        foo: { key: bar }\n```\n\nI would expect to be able to read `foo.key` in my twig templates, but it instead maps `bar` to an empty array, since the twig config contains:\n\n```\n    $rootNode\n        ->fixXmlConfig('global')\n        ->children()\n            ->arrayNode('globals')\n                ->useAttributeAsKey('key')\n```\n\nI don't know the internals of that component well enough to know if it's fixable, but IMO those xml-specific hacks should not produce unexpected results in other config formats.\n"
            },
            {
                "title": "[HttpKernel] Add Kernel::terminate() and HttpKernel::terminate() for post-response logic",
                "body": "This came out of a discussion on IRC about doing stuff post-response, and the fact that right now there is no best practice, and it basically requires adding code after the `->send()` call.\n\nIt's an attempt at fixing it in an official way. Of course terminate() would need to be called explicitly, and added to the front controllers, but then it offers a standard way for everyone to listen on that event and do things without slowing down the user response.\n"
            },
            {
                "title": "Adjust composer files to strictly require known to work packages",
                "body": "I also bumped doctrine common to 2.2, because it seems 2.1 doesn't have the AbstractManagerRegistry stuff that is used by symfony 2.1. Please someone correct me if this is wrong.\n"
            },
            {
                "title": "Fix composer.json files to be stricter",
                "body": ""
            },
            {
                "title": "Fix composer.json files",
                "body": "> =2.1 does not include the 2.1.0-dev versions, since those are lesser than 2.1.0 stable, so nothing is really working right now.\n"
            },
            {
                "title": "Fix requirement name",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Cookie values should not be restricted",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThe restriction I removed makes no sense IMO because we do not use setrawcookie() to send cookies. setrawcookie() does throw a warning when the cookie value contains incorrect characters, but not setcookie(). The latter will just urlencode() the value so it becomes valid. This is also what is done by `Cookie::__toString`, so this could be used in combination with header() to just send raw cookies that are valid, even with values that are invalid in their decoded form.\n\nPHP urldecodes cookies on input, so it all works fine.\n"
            },
            {
                "title": "Fix func signature of TraceableEventDispatcher",
                "body": "Fixes problem in db6fea9fd014b9272627ee8c715368b7a1918741\n"
            },
            {
                "title": "[EventDispatcher] Add reference to the EventDispatcher on the Event",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nI don't like registering event listeners unless they are really used, it seems wasteful. So I tend to register listeners for the response event in other listeners, only when they will be required. @stof has [brought to my attention](https://github.com/nelmio/NelmioCorsBundle/commit/fb243ace83c55280d8a7841a0fbaf22a4e947600#commitcomment-696467) that this may cause issues in Silex or any other situation where event listeners are not lazy loaded, since it creates a circular reference in that case.\n\nWith this PR, avoiding the circular reference is possible, without bloating the response listener with unnecessary  do I need to do anything?  code.\n"
            },
            {
                "title": "[MonologBridge] Adjust for Monolog 1.0.2",
                "body": "This is BC, it just turns off headers in browsers that don't have Firebug, I have had problems in IE with more than 150 log entries just crashing the page.\n"
            },
            {
                "title": "Replace 2.1.* and not any version above 2.1",
                "body": ""
            },
            {
                "title": "Allow use of UTF-8 catalogues in non-UTF-8 applications",
                "body": "This is #2313 but targetting the master branch.\n\nBug fix: yes\nFeature addition: ?:)\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nThe problem I'm having is that, while porting an existing app, we are using UTF-8 everywhere to have a migration path ready, but the current application and DB is still in ISO-8859-1, which means translations containing accented chars are broken.\n\nAlso, we didn't hit the issue yet since we don't use forms much, but I imagine we would have similar issues with core translations for the validator which are all UTF-8 encoded.\n\nNote that I explicitly suppressed this conversion in case your application is setup as UTF-8, to make sure most people are not affected by any slow down this introduces.\n"
            },
            {
                "title": "Allow use of UTF-8 catalogues in non-UTF-8 applications",
                "body": "Bug fix: yes\nFeature addition: ?:)\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nThe problem I'm having is that, while porting an existing app, we are using UTF-8 everywhere to have a migration path ready, but the current application and DB is still in ISO-8859-1, which means translations containing accented chars are broken.\n\nAlso, we didn't hit the issue yet since we don't use forms much, but I imagine we would have similar issues with core translations for the validator which are all UTF-8 encoded.\n\nNote that I explicitly suppressed this conversion in case your application is setup as UTF-8, to make sure most people are not affected by any slow down this introduces.\n"
            },
            {
                "title": "Adjust the way of checking for windows",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Allow definition of extra app.* Twig globals from the configuration",
                "body": "This may be too hackish to make it in core, but I think it's a pretty cool feature so I suggest it anyway.\n\nBasically it allows to add data into the  app  globals from config.yml like:\n\n``` yaml\ntwig:\n    globals:\n        app:\n            foo: bar\n```\n\n`{{ app.foo }}` is now working in the templates.\n"
            },
            {
                "title": "Allow kernel parameters to be overriden by extensions",
                "body": "This just cost me a few hours, I'll try to explain carefully.\n\nThe ContainerBuilder receives kernel parameters first, because they are needed for the application config. Then the application config is loaded, and after that the extensions are loaded.\n\nAll the parameters/services/aliases defined _before_ the extensions are loaded are saved, and restored after the extensions got loaded, because anything you define in the config should take precedence over everything else. That is good. But the problem is that kernel params are added before the app config, and those are also protected by this behavior. \n\nFor example `framework.charset` is broken at the moment because in the FrameworkExtension it sets the `kernel.charset` value, and it is then reset to UTF-8 after the extension is merged.\n\nWhat the patch does is load the kernel params, load the app config, diff the two to be sure we have only the app config, and pass that to the compiler pass that merges extensions, so it can restore only those parameters that were added by the app config. We unfortunately can't just ignore kernel.\\* params because those could be defined by users in the app config.\n"
            },
            {
                "title": "WDT debugging",
                "body": "While implementing collectors I did a mistake in the template name and it never told me, so I was left wondering why my stuff didn't show up. Not so nice IMO. Also the first commit is to allow template names to be specified fully. I don't see why this shouldn't be allowed, since it is the way you specify templates everywhere else.\n"
            },
            {
                "title": "[2.1] [TwigBundle] Allow option to avoid auto-escaping of translations.",
                "body": "This adds a `twig.trust_translations` option. If set to true. The trans and transchoice filters don't auto-escape anymore. I like to put HTML in my translation strings, and it's pretty annoying to have to mark them all as `|raw`.\n\nNote: This is incomplete, the trans tag should be updated as well, but I wanted feedback first.\n"
            },
            {
                "title": "[HttpFoundation] Fix bug in clearCookie/removeCookie not clearing cookies",
                "body": "[HttpFoundation] Fix bug in clearCookie/removeCookie not clearing cookies set with a default '/' path, unless it was explicitly specified\n"
            },
            {
                "title": "[ClassLoader] Improve exception messages of the debug class loader",
                "body": ""
            },
            {
                "title": "[DependencyInjection] Add DIC Pass to remove *.class parameters, fixes #1684",
                "body": "Just had a stab at trying to fix #1684. I realize it's not perfect, especially with the aggressive mode on. But just as a note, my compiled DIC went from 105KB to 99KB with `$aggressive` `false`, and then to 92KB with `true`. \n\nWhether we want to optimize to hell at the risk of creating issues for some (of course we should document it), I don't know.\n"
            },
            {
                "title": "[Routing] Revert to rawurlencode + whitelisting of '/'",
                "body": "After more discussion on 761724ae57d07cee2368bee86a2f1fe22cf188fc - sorry you merged too fast for once ;)\n"
            },
            {
                "title": "[Routing] Add # and ? to escaped chars",
                "body": "See comments on 761724ae57d07cee2368bee86a2f1fe22cf188fc\n"
            },
            {
                "title": "[MonologBundle] Added services for core processors",
                "body": ""
            },
            {
                "title": "[Bridge/Twig] Add required class to labels that match required fields",
                "body": "I have used this to simply style labels that are required with a red star behind them using this CSS:\n\n``` css\nlabel.required::after {\n    content:   * ;\n    color: #c00;\n}\n```\n\nThe problem is that you can't use `input[required] + label::after` as a selector since the label is typically rendered before the input. There is no way to check for an element that is _followed by_ another, only elements _following_.\n\nOf course this CSS in particular won't work except in the latest browsers, but you could still use the `label.required` selector to add a background image and so on. I think this is a very common use case and therefore I think it'd benefit the core framework.\n"
            },
            {
                "title": "[2.1] Dispatch event when the RouteCollection is done loading",
                "body": "This would allow bundles to hook into the route collection building process, to add routes automatically. This would only happen at compile time.\n"
            },
            {
                "title": "[Router] Bunch o' Fixes",
                "body": "The first commit changes the escaping rule to fix issues I had previously, and #752 as well, here's from the full commit message:\n\n```\nOnly + and % are now encoded in generated routes, since they are the only characters that, if not encoded, could cause problems/conflicts when decoded. Namely + turns into a space, and % followed by numbers could do funky things.\n\nThe matcher decodes everything which works since nothing will have %NN without being escaped, and + are escaped as well.\n```\n\nSecond commit is just a test fix for the first\n\nThird and fourth are simply dumper escaping issues, nothing to argue about.\n\nNote that all changes have had test cases added, and I spent a few hours torturing/testing all this stuff with both Apache and PHP dumpers, in many browsers, and with URLs as wonky as `/%01%02%03%04%05%06%07%08%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20!%22$%25&%27%28%29*+,-./0123456789:;%3C=%3E@ABCDEFGHIJKLMNOPQRSTUVWXYZ%5B%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B|%7D~/baz` which essentially represent the 1-255 char range minus ? and #.\n\nThe only issues I really encountered after all the patches were applied is that Apache refuses to match `%22` (= ` `) and `*` in a url. I guess it's just because they're not allowed chars in windows paths, but | and < > works fine though. Anyway this works with the PHP dumper, and it didn't work either without my patches so it's not like I broke it, I'm just saying for the record.\n"
            },
            {
                "title": "[2.1] [Console] Added Command::isEnabled method",
                "body": "This addresses #1467.\n\nThe idea is to allow commands to evaluate whether they can run or not, since they are automatically registered. \n- It's useful for the two router:\\* commands since they're optional (router can be disabled), but part of the FrameworkBundle that is not really optional. \n- It could be useful for third party code as well.\n- It's BC.\n- aa95bb0d395810b29a3e654673e130736d9d1080 should address the issue in #1467, while the other commits just make sure the command is not registered at all if the router isn't standard.\n\nOne issue remains though:\n- A few other services like twig helpers get the `r\u00f2uter` injected, this means that if there is really **no** router service defined, there is still an error. I'm not sure how to fix those beyond adding `on-invalid= null ` but I'm not sure if that's desirable. I guess we could argue that the router is a big candidate for replacement/suppression, and as such it should be truly optional, but if we do it I don't know where it'll lead. I don't want to end up in a situation where half the dependencies are optional to support every possible combination. @fabpot wdyt?\n"
            },
            {
                "title": "[HttpKernel] Added AutoloadExtension",
                "body": "This extension is instanciated by default for Bundles that don't have an Extension class.\nIt automatically loads Resources/config/services.(yml|xml) service definitions into the Container if they exist.\n\nThe idea came from @lsmith77 - many people don't get the concept of extensions, and the best way for them is to smash service definitions in their app config, or put it in the bundle and include it from the app config, but that ends up creating issues apparently (I'll let Lukas explain if needed). So the idea here is that by default the GeneratorBundle should create a services.yml or xml, and people can drop their services in there. That way we can skip the subject of extensions entirely for people that don't write reusable bundles. \n\nAlso it standardizes the name a bit, instead of having a ton of different names as we have right now. It could be a good thing to rename the core files to follow this convention, except for FrameworkBundle and SecurityBundle (and any other?) that have many files.\n"
            },
            {
                "title": "[HttpFoundation] Add REQUEST_TIME by default",
                "body": "Without this the getting the REQUEST_TIME from the Request in tests is breaking.\n"
            },
            {
                "title": "HttpCache changes for 304 responses",
                "body": "Fixes #1413\n"
            },
            {
                "title": "[WebProfilerBundle] Fixes toolbar content check",
                "body": "It appears that some html optimizers trim the comments, therefore the old check was not working. This is more robust.\n\nFixes the issue reported in 8541a5bcbc97f965f4c53fc3ece790cdc4a922bf\n"
            },
            {
                "title": "[WebProfilerBundle] Make sure the toolbar closes properly",
                "body": "Due to the whitespace element between the div which clears and the toolbar div, in some browsers it was left over after you close the toolbar, this doesn't happen anymore.\n\nTested in IE7/9/FF4/Opera11\n"
            },
            {
                "title": "Non-blocking WDT & prevents garbage to slip in the page",
                "body": "I made the loading non-blocking so that it's not preventing normal operation of the page when the WDT takes a bit long to come up (happens sometimes when the machine is busy).\n\nThe second commit also checks that the response looks correct, to prevent stack traces and such to appear in the page if there was a problem. The main issue is not really stack traces though it's mostly with security and intercept_redirect enabled, if you look at a fully secured site you get twice the redirect intercept message to the login page.\n\nTested in IE7/9/FF4/Opera11\n"
            },
            {
                "title": "[HttpFoundation] Ensure response body is string, fixes #1378",
                "body": "The issue in #1378 is clearly just a misuse of the class due but the error it triggers is confusing. This hopes to fix that.\n"
            },
            {
                "title": "Rename kernel.listener to kernel.event_listener",
                "body": "Better consistency with doctrine.event_listener\n"
            },
            {
                "title": "[FrameworkBundle] Prevent breakage when an array callback is not callable",
                "body": "W/o this you get warnings that objects can't be converted to strings.\n"
            },
            {
                "title": "[Validator] Add support for IDNs and custom TLDs",
                "body": "Minor changes to allow for IDNs and [custom TLDs](http://news.softpedia.com/news/ICANN-Approves-New-Custom-Generic-Top-Level-Domains-Like-google-bank-206977.shtml). This is the only sane way to support everything in a timeless manner.\n"
            },
            {
                "title": "[HttpFoundation] Small optimization of Session flash handling",
                "body": "Due to copy-on-write, this is faster and takes less memory unless the flashes are changed during the request, but that's not very likely as typically you set flashes, redirect, then show them, and at that point you do not modify them again.\n"
            },
            {
                "title": "Profiler access in functional tests is broken",
                "body": "The stuff documented on http://symfony.com/doc/current/cookbook/testing/profiling.html is actually failing because the profiler is in the request scope. \n\nCalling getProfiler() throws:\n\n```\nSymfony\\Component\\DependencyInjection\\Exception\\InactiveScopeException: You cannot create a service ( profiler ) of an inactive scope ( request ).\n```\n\nSee https://github.com/symfony/symfony-standard/pull/80 for more details.\n"
            },
            {
                "title": "[DomCrawler] Uppercase http methods",
                "body": "That way it all matches what the HttpFoundation\\Request class does\n"
            },
            {
                "title": "[DoctrineBundle] Do not try to fetch doctrine listeners if doctrine is disabled",
                "body": "If you have the doctrine bundle enabled but nothing in your config you get errors because of the compiler pass right now.\n"
            },
            {
                "title": "[Serializer] serializer refactoring",
                "body": "Big cleanup of the interfaces\n"
            },
            {
                "title": "Serializer",
                "body": "This includes #802 and adds some stuff back from the previous PR of @schmittjoh.\n"
            },
            {
                "title": "[HttpFoundation] Do not auto-start the session when saving",
                "body": "In the current code, __destruct() always calls save(), which calls start(), so even without auto_start, the session is always started. Since all session getters/setters auto-start the session, this shouldn't be an issue. \n\nThe only potential edge case is if someone sets a flash message, doesn't read them on the next request, and doesn't start the session either, then they won't be cleared. But I don't think this is a real use case we have to care about, people disabling session auto_start should know what they're doing with flash messages and all.\n"
            },
            {
                "title": "[HttpFoundation] Remove warnings when session id isn't given",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Do not override the session storage for test",
                "body": "This is removed in favor of https://github.com/symfony/symfony-standard/pull/70\n\nOtherwise, if you want to use your own session storage in tests it's impossible (or rather made overly difficult).\n"
            },
            {
                "title": "[EventDispatcher] Allow arbitrary callbacks",
                "body": "Copy from the commit messages that are relevant:\n\n```\n[EventDispatcher] Allow registration of arbitrary callbacks\n\nThis in effect removes the direct link between event name and the method name on the handler.\nAny callback can be given as a handler and the event name becomes an arbitrary string. Allowing for easier namespacing (see next commit)\n```\n\nAnd:\n\n```\nUpdate Core and Security events to latest model\n\nThe main benefit is that in XML/YML files we have common syntax (i.e. core.controller, form.pre_bind) that properly namespaces event names (before: onCoreController was ok, preBind was not).\nOn the other hand in PHP land we also have namespaced events, CoreEvents::controller, FormEvents::preBind, before it was Events::onCoreController, Events::onPreBind, we now have more context.\n```\n\nI'll update Forms if we can agree this is progress, because I already wasted enough time on this as it is.\n\nObviously the one huge drawback is BC breaks for everyone that registered events in their code, others should be unaffected.\n"
            },
            {
                "title": "[FrameworkBundle] Adjust styling and display of logs",
                "body": "As discussed .. minor adjustments\n"
            },
            {
                "title": "[HttpKernel] Log non-http exceptions as critical as well",
                "body": "This is a continuation of https://github.com/symfony/symfony/commit/838853e58bfe97cf67c9454d2ee2308ba25957a3 because I forgot one place, and also because the if wasn't catching non-http exceptions, I thought they were converted to 500 HttpExceptions already at that point.\n"
            },
            {
                "title": "[HttpKernel] Throw exception if no path is present in a resource",
                "body": "BTW: Those exceptions are pretty badly hidden by multiple layers of catching I think, basically if you have a bad rule in your routing like `resource: @FooBundle` you get an exception from FileLoader containing the exception from Loader, but no trace of the Kernel exception which has the proper message. I didn't have time to figure it out but it should be improved imo to give better reporting.\n"
            },
            {
                "title": "[HttpKernel] Fix console output for reals",
                "body": ""
            },
            {
                "title": "[HttpKernel] Log 500+ errors as critical and not error",
                "body": "This allows people to filter easily between 404 type of responses (that are mostly for users) and real errors in their application (where they probably want to get an email notification\n\nNote: Didn't really try the patch, but I believe it's the only place where this has to be done?\n"
            },
            {
                "title": "[HttpFoundation] Windows test fixes",
                "body": ""
            },
            {
                "title": "Monolog updates",
                "body": "- Minor adjustment to the log templates\n"
            },
            {
                "title": "Added level constants LoggerInterface",
                "body": ""
            },
            {
                "title": "[Form] Use proper transformation exception in case of failure",
                "body": "Without this, the exception is not caught as a form error, but instead triggers a 500 into the user's face.\n"
            },
            {
                "title": "Monolog FirePHP support",
                "body": "Again a use case for writing headers before the response is created. I'm not advocating for early response, I prefer the way it is now, but having an early-ResponseHeaderBag somewhere could be handy.\n"
            },
            {
                "title": "[MonologBundle] Add logger alias to monolog.logger",
                "body": ""
            },
            {
                "title": "[AsseticBundle] Set proper content-type headers",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Allow init:bundle to be called with / as namespace separator",
                "body": "Just a bit easier than having to type Foo\\\\Bar or 'Foo\\Bar'\n"
            },
            {
                "title": "[Security] Remove unneeded and invalid use statement",
                "body": "This is trying to import an Events symbol which already exists in the Symfony\\Component\\Security\\Http namespace => fatal error. It breaks code coverage, and I guess any code relying on this class.\n"
            },
            {
                "title": "[WebProfilerBundle] Prevent redirects to be intercepted in XHRs",
                "body": ""
            },
            {
                "title": "Serializer: Moved to privates & added @api",
                "body": "- Some extra docblocks\n"
            },
            {
                "title": "[Security] Redirect to Referrer is broken when the favicon is missing on a fully secured site.",
                "body": "it goes like:\n\n```\nGET / => you get a login form, browser fetches page components, among which:\nGET /favicon.ico => 404 => htaccess throws it at Symfony => overrides the _security.target_path value\n```\n\nWhich sucks.\n\nNow if you create 404s  on purpose  in your page, this is maybe your own problem, but the favicon is requested by browsers even if it's not defined in the markup, so this is a specific case that is worth addressing in the framework imo.\n"
            },
            {
                "title": "[FrameworkBundle] A few visual/UX fixes to the exception page",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Session helper",
                "body": "Found this while cleaning up my 50 branches.. Couldn't find the associated pull request, but it still sounds to me like a valid use case to snatch all flashes at once and loop over them. Sorry if I'm repeating myself :)\n"
            },
            {
                "title": "[WebProfilerBunder] Display hand cursor on the WDT close button",
                "body": ""
            },
            {
                "title": "[Config] Exception msg improvement",
                "body": ""
            },
            {
                "title": "[SecurityBundle] Allow setting the class of in-memory users",
                "body": ""
            },
            {
                "title": "Rename .symfony to .gitkeep which is more standard git practice",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] init:bundle => bundle:init",
                "body": "The command names are all constructed as: `resource:action`, and `init:bundle` is backwards.\n"
            },
            {
                "title": "MonologBundle",
                "body": "So, I spent the last week reworking Monolog quite a lot, and now with much help from Stof (thanks!) I'd like to introduce the MonologBundle to core. It is a drop-in replacement for ZendBundle as it is. If it's accepted we can look at maybe adjusting the core interfaces to match it a bit more, but that's not necessary.\n\nPlease take a look at Monolog's [README](https://github.com/Seldaek/monolog) (mostly Core Concepts & Notable Features) - it has nothing to do with a Zend\\Log rewrite anymore.\n\nHere's a sample output btw http://pastie.org/private/cyf6gcapzgvm9vlpkuf5q where you can see the different log channels present before the log level (e.g. event.DEBUG = <channel>.<level>), of course the format can be tweaked if necessary.\n\nStof plans on adding more tests this weekend btw, if it's accepted we'll definitely follow up on that.\n\nA PR for the sandbox will follow.\n"
            },
            {
                "title": "[Form][HttpFoundation] Fixes to FileField ",
                "body": "And some minor changes to UploadedFile\n"
            },
            {
                "title": "Routing urlencode fix",
                "body": "With the current way, if you have / for example in a route variable, it encodes it in %2F, and since this is not valid in URLs apache returns a 404 without even hitting app.php.\n\nEdit: Of course, query parameters are still url encoded as they should be by http_build_query below in that same method.\n"
            },
            {
                "title": "[Fomr] Added label option to Form fields",
                "body": "The idea is that you can define a label key that does not have to match with your property name. In conjunction with translation keys this can be pretty useful.\n"
            }
        ],
        "pr_comments": [
            "Please make sure that it still really works in a real world CLI app with `-v/-vv/-vvv/--verbose=2/--verbose=3`. It was a pain to get it all working given the verbose stuff happens early on.. that's why the code looked wonky.\n",
            "Indeed PSR3 only defines what the LoggerInterface::log method should receive, configuring a handler in this case is completely separated.. I can see that this binds the implementation to monolog though which is potentially bad.. You could have a service or helper static method in the monolog bridge that takes a PSR-3 level and calls `constant('Monolog\\Logger::'.uppercase($level))` to resolve it to a level value.\n",
            "It assigns `$method`, and it skips the execution of the else if it passes, so it can continue below. I know it's a bit weird, but it was the best way to avoid redundant checks or code.\n",
            "It is quite wise yes, especially because the character has a special meaning in regexes. That means it'll already be escaped so no need to escape it. The engine can deal with `\\d{3}` just fine since it can count the opening/closing brackets, and skip those that are escaped. That's why I tend to always use `{}` as delimiters, because it doesn't add yet another char you have to escape.\n",
            "Nope, will fix that.\n",
            "Requests should really not be changed.. And as described in the commit, the problem is that it's always called twice for BC with frameworks that don't call setRequest\n",
            "I'm ok to revert this bit, but TBH either way doesn't matter so much I\nguess in this case. 5mio iterations is a lot..\n",
            "If you like to do a PR to revert that please feel free. I'm busy with\nother stuff at the moment.\n",
            "Seems correct\n",
            "True. Will update.\n",
            "String inherits already, I'll see what I can do about ArrayInput. IMO it could inherit from Argv but maybe I missed something\n",
            "I wouldn't say `(normal, default)` here but rather `(verbose)`, otherwise it's confusing in two ways:\n-  normal  does not mean VERBOSITY_NORMAL but rather VERBOSITY_VERBOSE\n-  , default  isn't really the default, it's just the default value of specifying --verbose, but --verbose isn't equal to no args.\n",
            "@fabpot did you just miss this? I don't understand the class name either.\n",
            "Just for info, I have seen people generate routes with patterns like:\n`/foo?bar={bar}` just because of some legacy reasons. So removing the\nquery string in all cases might create issues.\n",
            "Well it was working in 2.0, but maybe they had to fix this since then.\n",
            "Couldn't we use false or 0 or something that doesn't trip up isset()? As far as I can remember, services can only be objects, so it should be safe. But not sure if this code is sensitive enough that it is worth it.\n",
            "Well we could pass null if the current value is 0/false, but the question is whether isset vs array_key_exists is worth the hackery in the code or not.\n",
            "Suggest is not taking a version constraint anyway, ideally it should be a description as to why you need the package, then specifying a version might be good to hint at what is compatible (but for extensions it's kind of pointless)\n",
            "Maybe best is `~2.2,>=2.2.3` or `>=2.2.3,<3.0`\n",
            "OK. But then I think we better remove the trigger_error() to avoid the pain of maintaining code for older versions as well as 2.2+. Is that fine by you?\n",
            "@crell the dependency is a require-dev though not require, so if one uses symfony/symfony _without_ the full framework (and without monolog bundle in particular), then it would fail indeed. I'll fix that.\n",
            "It might be safer to just always do this and the check below as well, without the darwin/freebsd check. Other systems might be affected, or it might change in the future, you never know.\n",
            "I would just use something dumber like `if (false === stripos($lastError['message'], 'interrupted system call')) {` here to reduce chances it fails if php changes the way the message is reported.\n",
            "I have to say I don't quite see the advantage of this weird case `evaluate me this` vs the if/elseif that was there before. More lines and awkwardness for no benefit (that I can see).\n",
            "Yeah I was pondering registering a failure handler automatically and calling that on failure, but not sure yet. Things have to be discussed.\n",
            "Why not keep it? I find it quite nice that generic exception handlers can read out the code and get useful info out of it.\n",
            "Ok, I meant why not use $statusCode in there then?\n",
            "Indeed it should :)\n",
            "The file is called `hiddeninput.exe` all lowercased\n",
            "And it's not a composer _bug_ per se. It's a side effect of all the auto-versioning magic and we can't really fix it, but given it only affects a few packages it sounds worth the benefits.\n",
            "Why not set that to `!defined('PHP_WINDOWS_VERSION_BUILD') && $this->isSigchildEnabled()` by default? Because with the current patch it seems that in most cases you'll anyway call that method to check if it's enabled at some point or another, so you might as well just enable the workarounds? I think getting the proper exit code is a more common use case than getting the pid.\n",
            "I don't think any distro ships with this on, it's a legacy switch that\nsome people compiling php manually still have for historical reasons\nmore than concrete reasons IMO (except for the few oracle+php users).\n",
            "Just got a report of an undefined constant SIGKILL on what appears to be an OSX machine :| https://github.com/composer/composer/issues/1791\n",
            "suggest and require-dev aren't really mutually exclusive\n",
            "Should be  init:prng  I think\n",
            "That's not right. openssl works fine on windows these days, it was failing in the early 5.3 builds, but at least in 5.4 it seems to work very well, and I'd guess in 5.3.8+ or something also. Also the `defined('PHP_WINDOWS_VERSION_BUILD')` test is probably better than stripos.\n",
            "That's an unnecessary line since it's set by ref in the call below\n",
            "Agreed, the String name might be dangerous if it is turned into a\nreserved word at some point.\n",
            "IMO it would be nicer to just keep it in as defaultNull and in validate check if it's set and then tell people. This sort of thing could be removed in 2.2..\n",
            "Well, throwing an exception with more details than  zomg framework.charset is an unknown config value . I think giving clear error messages goes a long way to help people. Given the size of the user base and that it's most likely going to affect 99% of users (since the value was set in the default config), I think it's worth the 2 extra minutes doing it.\n",
            "s/Name/Make/\n",
            "Done, please check though, first time I touched that.\n",
            "As @stof said, I don't think that would make sense.\n",
            "We could say the same for the context.. One assignment isn't the end of the world in terms of duplication.\n",
            "I don't know if we should. I think suggestions for tiny features like that don't make much sense, if you always end up with 20 suggestions you won't read them anymore.\n",
            "Generating an invalid URL means it potentially would lead to another route, or to a 404. At least the empty link will just reload the page, and it's weird but not broken. It logs the error so you can look at it, but it doesn't create blank pages for your users. As for catch, yeah, I really want to wrap all my twig calls into try/catch just in case. Truth is this has happened to me because I didn't realize the data could contain some special characters, since it was inserted in the DB by another script not under my control, and it blew up half the page of the site, which I think is way more of a disaster than a broken link, or  bad API design .\n",
            "You see a use case and I see another one.. So what do we do? I added it\nas an option, because I see why it may not apply to eveyrone, and\nbecause in dev I do want to see an exception, this stuff should be\nfixed, there is no reason for it to be a valid behavior ever, but in\nproduction such a mistake should just not destroy the whole page. Your\n use case  isn't a use case either, nobody should rely on this. It's\njust a way to ensure higher availability of your site.\n",
            "Your assumption is that you will never make a mistake. This is a wrong assumption. Everyone messes things up eventually, and when it happens I'd like to mitigate the problem. That's why there is a strict_variables mode in twig, not because you don't trust your data, but because you may not notice problems at development time if they only happen in weird conditions, and you don't want to have a blank page for a strict warning while things would otherwise run fine.\n\nSimilarly, we have escaping by default, not because we don't know which data to trust, but because when people have to mark dangerous data by hand, they mess up eventually and end up with XSS leaks.\n\nTo sum up, I think this is a great feature for writing robust apps, and I don't think generating broken links or empty links matters much, I just want the page to show up, and an error to end up in my mail box so that I can go fix it when I have time and not at 3am when a cron job imports data and blows up the whole site.\n",
            "because the umask is a reversed bitset, so ^ does the same as ~ with the mask reversed with 0777. Both of those are true:\n\n``` php\nvar_dump(\n    0755 === (0777 ^ 0022),\n    0755 === (0777 & (0777 & ~ 0022))\n);\n```\n",
            "This is not really valid. I guess assertEmpty will pass if getDefault returns null, or 0. I also don't like those  fancy  phpunit method because their behavior is never really clear if you don't look at the implementation. If I see an assertEquals I'm fairly sure of what's happening without having to think too much.\n",
            "`{` should be on its own line for methods/classes.\n",
            "There should be a space after `if` and such, see [coding standards](http://symfony.com/doc/current/contributing/code/standards.html) for more details.\n",
            "$jsonp (renamed as callback as @vicb said) should default to null IMO. Same in ::create\n",
            "`if ($this->callback)`  is enough.\n",
            "I think this whole thing should be wrapped in a `if ($headers)` (before explode) because explode will return `array('')` (one element) if you give it an empty string, and then it'll call `header('', false)` which isn't great.\n",
            "Why not use version_compare with PHP_VERSION? It's not like the code is performance critical, and I think it's just more readable since more common. Same below in the tests.\n",
            "Maybe you could do a similar check in the RedisProfilerStorage::getRedis method to give a decent error to people instead of a missing class Redis.\n",
            "Please send a PR if you really think this matters - sorry but I can't see this file anymore :) And yeah I'm sure it still will fail every now and then, but hopefully rarely enough that it is not too distracting when developing. The only solution would be to increase the sleeps so that small inaccuracies become less relevant, but that makes running the tests annoying too.\n",
            "Correct, fixed now.\n",
            "Since @stof won't say it, I will. Missing space after catch :)\n",
            "For the time being, 1.0.\\* matches 1.0.0-alpha1 yes. This will hopefully change soon though. Anyway this is the most correct thing to do right now I suppose.\n",
            "It doesn't. `$foo['bar']['baz'] = true;` is valid for example\n",
            "True, feel free to send a PR :)\n",
            "Ah crap, I worked on the patch on an older checkout that didn't have that fix yet. Thanks, fixed now.\n",
            "The render() call does accept a Response, and if you pass one it is reused, but in this case it is not reused it's replaced by a StreamingResponse. If anything this should only accept a StreamingResponse so that it can be reused, except it's not possible to set the callback later than in the constructor, so that does not make sense either. I would just remove it.\n",
            "Why do you have this event listener at all actually? Can't you just let the send() method be called as usual by the front controller? Sounds like it's equivalent to me.\n",
            "I don't agree. That can easily be done on the returned response. Allowing a response to passed while it's not going to be used (only read and then discarded) is misleading.\n",
            "I don't think it's possible to have _maybe open tags_ in twig. Well it is but then you must have a hint in the first `{% render...%}` that says some content is coming, otherwise you can't know if you must parse until `{% endrender %}` or not. Anyway it would be cool to have the option.\n",
            "You should be able to get it from `$_SERVER['argv'][0]`\n",
            "Shouldn't this be true by default? I mean either it helps everybody and we enable it always, or it causes issues and we tell people to be careful when using the shell.\n",
            "Please use 4-spaces to indent, not tabs.\n",
            "Fixed\n",
            "I realize that, but I think we need to decide if this is needed first, and then how to deal with BC later.\n",
            "We could dispatch directly from the Kernel to avoid adding it to the interface, but IMO it belongs in the HttpKernel.\n",
            "It can be dispatched in the Kernel just fine with this, as I said the call to ->terminate has to be added in the front controller anyway, that does not change.\n\n``` php\npublic function terminate() \n{\n    $this->container->get('event_dispatcher')->dispatch(...);\n}\n```\n",
            "This should be the message to `$this->markSkipped('...')` so that tests are properly marked as skipped.\n",
            "Don't you think you should still throw a not implemented exception `if PHP_INT_SIZE == 4` ?\n",
            "Well they are required by some parts of the framework, so I think this is correct. If you don't want that stuff then just require specific components/bundles instead of the whole symfony/symfony package.\n",
            "Then you should not use the symfony/symfony package but just rely on individual subpackages as I said above. \n\nI did not include the doctrine and propel packages here and it's already a bad thing IMO. This package says it replaces all the subpackages, so it should be equivalent to listing them all one by one, and it should require whatever they require.\n",
            "Is this correct?\n\nframework-bundle requires symfony/doctrine-bundle\ndoctrine-bundle requires symfony/doctrine-bridge\ndoctrine-bridge requires doctrine/common 2.2.*\n\nIf so, I'll update all files. Or does framework bundle really rely on doctrine itself (not just the bundle stuff)?\n",
            "Ok fixed I believe.\n",
            "Ah right, thanks, fixed.\n",
            "Is it really required all the time or should it go in recommend?\n",
            "Fixed by https://github.com/symfony/symfony/pull/2704\n",
            "What about a validation or beforeNormalization callback that checks if `factories` is defined and throws an exception with a link to this PR if it is? Could be a nice hint for people that upgrade and don't read upgrade notes carefully.\n",
            "Since there is no runtime cost imo it is worth helping people out. It is frustrating enough as it is to setup this stuff. If we change it we have to make it smooth.\n",
            "The proper domain is ex**a**mple.com/org :)\n",
            "It is fairly fragile if not configured properly, yes. But without this, it just poops UTF-8 in your non-UTF-8 output, which is not any better to be honest.\n\nAs for speed, surely this patch slows things down, but only at compile time. Then again, it's the best and most centralized solution I have found. Decoding the source file before parsing is a no-go, since YAML has to be UTF-8 for example.\n\nAll in all, I do agree that this might need to be made optional somehow. Just so it doesn't surprise people with poorly configured mbstring who don't use UTF-8. Because it _might_ detect a wrong encoding and then try to transcode to their target encoding using wrong source charset, which would be bad. If you do know what you're doing though, it's a great way to get an app ready for migration imo. Also please don't forget about the issue I mentionned with the validation messages.\n",
            "Please use `defined('PHP_WINDOWS_VERSION_MAJOR')` to test for windows, it feels a tad safer.\n",
            "That doesn't seem supported by twig, unless you implement the full ArrayAccess, and it seems you'd have to lie and use array_key_exists in __isset() otherwise it throws an exception if a value is null. The __call thing works fine for readonly variables, though as I said it is a bit hacky.\n\nAnyway, I'll happily update to ArrayAccess if @fabpot thinks it's better that way, but I'd like feedback before.\n",
            "Ah right I missed that `isset($object->$item)` earlier. I'll do the change.\n",
            "Why 31? Is that how Intl parses it?\n",
            "Referrer is written with two Rs. The HTTP header, in its valid form, has a typo, but we shouldn't reproduce that everywhere imo :)\n",
            "The benefit of this class isn't really to forget how to write PHP I'd say :) The main thing is that this provides encapsulation, allows you to run many request/responses within one process (for testing, subrequests, app server in php etc).\n",
            "This ain't cosmetics :)\n\nYou're changing the behavior there, it won't fetch the proper version when installing anymore, it just does a clone, which is not correct.\n",
            "You can just use `return $this->server->get('PHP_AUTH_USER')`. It will return null or the value, no need to test for the value's presence twice. I'd also fix the `@return` to be `string|null`.\n\nThis comment also applies to getPassword btw.\n",
            "Fixed\n",
            "The command docs are not up to date anymore.\n",
            "I wonder if we should just ignore handlers that don't exist here. Because otherwise you have to define your service only in one environment (assuming your handler is only defined in dev env for example), which isn't particularly nice. Of course ignoring it means we don't catch typos, not nice either.\n",
            "True, although it's probably less likely that a channel will only exist in one environment.\n",
            "Bah, I'll fix.. but I really don't get this one.\n",
            "should be `hasReadline` :)\n",
            "Well, if your router implements the Symfony RouterInterface, the core command would not be disabled, and then they would conflict if they have the same name, but I suppose it's just doing it in top-down order of the bundles, so yours would probably win over the core one. Whether it's a good idea to do that though is another question :)\n",
            "Done\n",
            "Indeed.. I never saw anyone use them in a bundle, so I tend to forget they exist :) Updated the code.\n",
            "I'd like feedback from @fabpot before doing anything with params. I think as is this is useful, if only for project-specific bundles. If we add params it might become too magic.\n",
            "The Interface defines this in the docs:\n\n```\n * @throws \\InvalidArgumentException When provided tag is not defined in this extension\n```\n\nSo I'm not gonna change it, especially since this code is executed by the framework itself and at compile time only, so I don't see anyone trying to catch that.\n",
            "You could still use it to define params, I'll leave it until we get word from @fabpot on what he thinks about parameter handling. If we don't do params then yeah this can go away.\n",
            "Fair enough, I read tag as option, but I still see no value in a custom exception here. Yet other extensions are throwing raw SPL stuff and everybody is still alive.\n",
            "Ok it's gone.\n",
            "@schmittjoh: +1; though IIRC we decided on adding them gradually where\nit makes sense, it seems like not everyone has the same definition of\nmaking sense :)\n",
            "Right sorry, removed.\n",
            "If you really want to support that, I don't mind adding a check for it.\n",
            "I thought of that, but I'm not sure if it's preferable. You could argue that a response listener might want to call getContent(), get back the object, and do some more stuff with it. As it is now, anything that is passed to a function that requires a string will just be converted to string on the fly, so it works.\n",
            "Well yes I know how it's _supposed_ and intended to work, but you could still argue that with higher priority listener etc someone might want to do crazy things. And I don't see any reason to prevent them from being crazy. With the current patch, we ensure the response has a string or string-like content, that's good enough imo.\n",
            "It does, but I like this better as it's unicode specific, the other one could be misinterpreted if you miss the  u  flag. Anyway they're equal so..\n",
            "@stealth35: What is this supposed to do? I can't find any details on it anywhere. Think I should add \\pS for symbols? Either way this is a first step that returns true for most domains, if we find false negatives later we should correct them.\n",
            "Why? All `array_flip(array_keys())` does afaik, is building the exact same array except the values are numeric and not the original messages. I don't quite see the point since it's just used to do an `array_diff_key()` later on, and the keys are exactly the same in both arrays.\n",
            "BTW I actually checked that the tests still pass ;)\n",
            "AFAIK it won't block, it will just block for a few milliseconds, and then timeout and return something with a lesser entropy. If you look at my link in #1314 - that's the reason I used `mcrypt_create_iv()` first. It allows you to take from URANDOM, which will never block at least. People that really need highly secure tokens can use their own implementation with MCRYPT_DEV_RANDOM imo, if they have the hardware for it.\n",
            "As I said, the OpenSSL behavior should be to try for a few ms and then give up and give lesser quality (at which point $strong will be set to false). Note that the slowness on Windows has apparently been fixed in 5.3.4:  Fixed possible blocking behavior in openssl_random_pseudo_bytes on Windows. (Pierre) . \n",
            "I put some comments on http://bugs.php.net/bug.php?id=52523 and\nhttp://bugs.php.net/bug.php?id=51636 to try to get more info. Both are\nunacceptable to use right now on my machine. I'd expect it to fuck up\nwith RANDOM, but not URANDOM. I'll nag Pierre see if he knows anything\nthat can help.\n",
            "Would be nice to add a couple lines here explaining how flash messages are intended as quick storage for data when performing a redirect, and should not be used for the simple case of passing data to templates.\n",
            "In theory, everything should be escaped, because $url could contain stuff like ! or other characters that mess up the command. In practice in this case it's highly unlikely, but escapeshellarg() should be standard for all CLI calls imo.\n",
            "Please don't do exact checks on TLDs, it'll be invalid eventually, and there's nothing worse than a website telling you something valid is not.\n",
            "Also, this doesn't accept IDNs. Why not? \n",
            "Yeah I'm not saying it's invalid now, just that eventually new TLDs will\nappear, and then it won't be valid anymore until the code is updated,\nand we will have stale codebases out there with crappy validators.\n\nWe're just checking for well-formedness here, we do not check that a\ndomain points to a real server with a real page at that exact URL, so\nimo we shouldn't try to be too smart. A more advanced validator could\nrequest the URL to see what status code is returned, but I don't think\nthis one should.\n",
            "As I previously said, I don't think we should whitelist TLDs. Just like\nwe can not whitelist SLDs. It's too complex for the scope of this\nvalidator, people can complain all they want imo..\n",
            "> Hmmm... about whitelisting SLDs you mean i.e. `.gov.us` ? SLDs can be treated as every LLDs i.e. `very.long.domain.name.com` ;-)\n\nWhat I mean is that since you can not validate the entire domain,\nvalidating half of it has zero value. It doesn't ensure anything, but it\nmay trigger false negatives in the future, so we should not do it.\n",
            "Sorry for being anal about this, but a few (honest) questions:\n- Is there anything in the spec that says TLDs must be between 2 and 9 chars?\n- Should we really enforce the dot? On the net, domains have SLD.TLD, sure, but a domain like  foo  is still valid, as long as your dns/hosts-file resolves it properly.\n",
            "Still not indented right :)\n",
            "Inconsistent indentation\n",
            "Using `/usr/bin/env php`  is better imo because it resolves php using PATH\n",
            "This block is not necessary, remove the `isset()` in the first `if` and it should all work fine without warning. \n",
            "Merged Stof's patch.\n",
            "The Exception base class should not be thrown, use UnexpectedValueException or such. PHPUnit's next major release will not allow  @expectedException Exception  anymore.\n",
            "Also, what if you provide an object that is callable (through __invoke)? It would be a valid callback, but would break this code.\n",
            "I'm with lukas on this one, splitting up means a lot of new methods on the Serializer, and doesn't really benefit much besides the extremely rare use case of a Decoder that can not encode, which is the only case not covered currently. If you insist though I'll do the two maps because it doesn't really matter either way.\n\nAs for supportsEncoding(), I'm not too keen on that, the two interfaces are perfect for that job.\n",
            "I don't think implementing the logic for skipping SimpleXmlElement instances really belongs in _every_ normalizers, doing the normalization when needed in the xml encoder makes more sense imo. \n\nAbout empowering the user, it is still possible, if you call serialize() it will do the smartest thing depending on the format, but you can still call encode by hand if you  really want to skip the normalization, or you can normalize first if you want to force normalization.\n",
            "No no that was an oversight, let's kill it.\n",
            "I'm sorry but I still fail to see what benefits that gives anyone. It just means more normalizers that have to be registered for nothing, and especially the order will start to matter a lot and the more you add the more complex this gets.\n\nYour use case can be achieved with the current model, call `$serializer->normalize($data)` by hand and it will normalize everything in a generic way, then you can cache that, and then send it to any encoder by just calling `$serializer->encode($cachedData, 'format')`. If something is getting in your way please let me know.\n\nNote that the interface, while it can't be removed, is only skipping the normalization step when you call `$serializer->serialize()`. If you really want to enforce normalization, you can still call normalize explicitly yourself. That sounds easier to me than subclassing to override the method.\n",
            "Yes, I'm ok with making DecoderInterface extend EncoderInterface, because that makes sense and clarifies how it is. The alternative is just more wasteful and complex for almost zero benefit (you still can implement an encoder/decoder that throws an exception in encode for that one-in-a-million use case).\n\n@schmittjoh: can you live with that?\n",
            "Fixed\n",
            "Because they're implementation specific, and aren't really necessary to have a working serializer. You could have another one that is setup in a completely different way. I was a bit trigger happy when I added them.\n",
            "True, will update.\n",
            "Mostly because the array(obj, method) callback structure is very well known, but if others think this would be better, I'm not really against it. It's a detail.\n",
            "Absolutely, fixed.\n",
            "I think this should be:\n\n```\n$className = $class->getName();\n$object = new $className;\n```\n\nThe current code will just create a new ReflectionClass instance, since `new $object` creates a new instance of `$object`'s class.\n",
            "This should be called deserialize.\n",
            "Why do you create a normalized copy of the array instead of overwriting the value into `$data`? I'm not sure how it'll work out memory wise, but I think it might have a lower footprint with a direct overwrite.\n",
            "Well ok, for Traversable this wouldn't work, nevermind.\n",
            "The whole caching seems broken; you can't assume that one class will always be normalized into the same array, different instances can obviously have different data.\n\nAlso the UnsupportedException should go away since you added back supportsNormalization/supportsDenormalization, they should be used like supports was used before imo.\n",
            "$this->markTestSkipped() returns early since it throws an exception.\n",
            "That's kind of what I was afraid of with Component Exception. Exception-creep. I think it's perfectly fine for a find method to return null if it didn't find anything. Here you're just using the exception as some sort of control-flow to return null in every single case that the finder didn't find anything. Why can't it return null itself and all the exception classes go away?\n",
            "> However, the general case is that if you search for an executable and it\n> cannot be found, you cannot continue.\n\nThat's the general case that has to be defined by the guy calling the\ncode imo. If find() return null and it is an exception case, then I\nthrow an exception. If find() throws an exception itself, it does too\nmuch. Not finding something is not an exception, it's just an expected\nresult of looking for stuff.\n",
            "Well, I don't have time to review the entire framework, so I complain when I see things. And yes, I think the 3 new Exception classes are useless. You don't have to agree, it's alright. I'll go overreact somewhere else.\n",
            "Right, I'll update that..\n",
            "Because they're not going anywhere, and if people want to extend and use them that's fine by me.\n",
            "Sure, on my side I don't see the point of forcing people to go through a getter when the property is there but I'll update if it makes it more consistent with the rest.\n",
            "Seems useless, and also where is that InotifyTracker class?\n",
            "The default and recommended mode is 0777, the umask will be applied to it.\n",
            "Hah, so much for opening links and not checking them out immediately. Nevermind :)\n",
            "Because I'm paranoid and wanted to handle `/favicon.ico?with=get&par=ams`. It probably doesn't matter either way though.\n",
            "filter_var isn't compliant with the email specification, but I guess it's still better than the old pattern, until someone has the time to integrate that other email parsing lib..\n",
            "Please make sure that it still really works in a real world CLI app with `-v/-vv/-vvv/--verbose=2/--verbose=3`. It was a pain to get it all working given the verbose stuff happens early on.. that's why the code looked wonky.\n",
            "Please make sure that it still really works in a real world CLI app with `-v/-vv/-vvv/--verbose=2/--verbose=3`. It was a pain to get it all working given the verbose stuff happens early on.. that's why the code looked wonky.\n",
            "IMO the `framework` keyword is all you need here. Zend and ZF are present in description/name etc. The search will pick up on those already, and these really have nothing to do with what the package _is_ or _does_. It could be zen, but I doubt zend is a state of being :) Of course the components themselves should have keywords about what they do more specifically.\n",
            "This means the file will be loaded every single time, and all those namespaces will be registered every time as well. I think the previous solution was better performance wise for people with intl enabled.\n",
            "The class prefixes are not a big issue, but if it's possible to avoid polluting this with tons of prefixes it's better, the more prefixes the slower it gets.\n",
            "Referrer is written with two Rs. The HTTP header, in its valid form, has a typo, but we shouldn't reproduce that everywhere imo :)\n",
            "The benefit of this class isn't really to forget how to write PHP I'd say :) The main thing is that this provides encapsulation, allows you to run many request/responses within one process (for testing, subrequests, app server in php etc).\n",
            "You can just use `return $this->server->get('PHP_AUTH_USER')`. It will return null or the value, no need to test for the value's presence twice. I'd also fix the `@return` to be `string|null`.\n\nThis comment also applies to getPassword btw.\n",
            "should be `hasReadline` :)\n",
            "Well, if your router implements the Symfony RouterInterface, the core command would not be disabled, and then they would conflict if they have the same name, but I suppose it's just doing it in top-down order of the bundles, so yours would probably win over the core one. Whether it's a good idea to do that though is another question :)\n",
            "Done\n",
            "True, I got mixed up when focused on my kernel changes.. Is it better now?\n",
            "Well I was merely following the guidance of our great leader :) I think it can be cleared in the docs why it is so, or if you want feel free to take it to the ml.\n",
            "The Exception base class should not be thrown, use UnexpectedValueException or such. PHPUnit's next major release will not allow  @expectedException Exception  anymore.\n",
            "Because they're implementation specific, and aren't really necessary to have a working serializer. You could have another one that is setup in a completely different way. I was a bit trigger happy when I added them.\n",
            "I think this should be:\n\n```\n$className = $class->getName();\n$object = new $className;\n```\n\nThe current code will just create a new ReflectionClass instance, since `new $object` creates a new instance of `$object`'s class.\n",
            "This should be called deserialize.\n",
            "Why do you create a normalized copy of the array instead of overwriting the value into `$data`? I'm not sure how it'll work out memory wise, but I think it might have a lower footprint with a direct overwrite.\n",
            "Well ok, for Traversable this wouldn't work, nevermind.\n",
            "The whole caching seems broken; you can't assume that one class will always be normalized into the same array, different instances can obviously have different data.\n\nAlso the UnsupportedException should go away since you added back supportsNormalization/supportsDenormalization, they should be used like supports was used before imo.\n",
            "I think this should be:\n\n```\n$className = $class->getName();\n$object = new $className;\n```\n\nThe current code will just create a new ReflectionClass instance, since `new $object` creates a new instance of `$object`'s class.\n",
            "This should be called deserialize.\n",
            "Why do you create a normalized copy of the array instead of overwriting the value into `$data`? I'm not sure how it'll work out memory wise, but I think it might have a lower footprint with a direct overwrite.\n",
            "Well ok, for Traversable this wouldn't work, nevermind.\n",
            "The whole caching seems broken; you can't assume that one class will always be normalized into the same array, different instances can obviously have different data.\n\nAlso the UnsupportedException should go away since you added back supportsNormalization/supportsDenormalization, they should be used like supports was used before imo.\n"
        ],
        "prs": [
            {
                "title": "Parallelized travis builds",
                "body": "Sort of WIP, I need to see how travis behaves when building the PR. If successful it might replace #7708\n"
            },
            {
                "title": "Update requirements of the deb package",
                "body": "Virtual packages such as java*-runtime are provided by various java/JRE implementations, which makes it more flexible to use.\n\nNote: I can't say I tested this, but AFAIK it should help. If you can make a test build and link to it on the related ML thread I can try to install it see if it still works with my setup at least.\n"
            },
            {
                "title": "Include untrusted host in the exception message",
                "body": "`Invalid *` error message without the actual value that triggered them are really unhelpful to debug issues.\n"
            },
            {
                "title": "[DI] Fixes access of aliases shared services",
                "body": "Fixes #8096 and I noticed that the aliases methods weren't really needed anymore so I removed them. I think it's fine since they were protected, but did it in a separate commit in case you just want the bugfix.\n\nNote that while the DI tests pass, I didn't run this patch as part of a real app. I'd appreciate if someone has the time to verify it still works given it's slightly critical code.\n"
            },
            {
                "title": "[DependencyInjection] Make service names case sensitive",
                "body": "This skips a call that IMO is unnecessary, but obviously it is strictly speaking a BC break. I just have no idea if anyone relies on service names being case insensitive or not.\n"
            },
            {
                "title": "[DependencyInjection] Add a method map to avoid computing method names from service names",
                "body": "/cc @schmittjoh @stof\n\nThe diff is a bit messy because of indenting, but all this adds really is an `if(isset($this->methodMap[$id])) { $method = $this->methodMap[$id]; }` that bypasses the method_exists + strtr calls. It's not a huge improvements but saves some cycles on something that's typically called a few hundred times per request.\n"
            },
            {
                "title": "A few optimizations",
                "body": ""
            },
            {
                "title": "Windows test fixes",
                "body": "I checked all components/bundles/bridges.. Now everything is green except a few things still in Process that I wasn't sure what to do with yet.\n"
            },
            {
                "title": "[Console] Allow arrays to be used for lists of shortcuts",
                "body": "Follow-up to #7839\n"
            },
            {
                "title": "[Console] Add more verbosity levels",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6066 |\n| License | MIT |\n| Doc PR | symfony/symfony-docs#2554 |\n\nThis adds new verbosity levels.\n\nReplaces #7626 /cc @dlsniper\n"
            },
            {
                "title": "[Console] Add support for multiple InputOption shortcuts",
                "body": "IDEs and others parsing the xml output of command helps should take note that there is a new shortcuts attribute listing all shortcuts, the shortcut one will only list the first for BC.\n"
            },
            {
                "title": "[Console] Input::__toString escaping fixes",
                "body": "Follow up to #7648, also includes a fix for StringInput to parse newlines and other whitespace chars properly instead of normalizing them all to spaces. It was kinda needed to test it properly, so I bundled both in one.\n"
            },
            {
                "title": "[Console] Fix merging of application definition",
                "body": "Fixes #7068, replaces #7158 - the fix there introduces a regression and always shows the application arguments in the commands help (i.e. it lists  command  as an argument to every command, except list because it overrides getNativeDefinition).\n"
            },
            {
                "title": "[Console] Add ArgvInput::__toString, fixes #7257",
                "body": ""
            },
            {
                "title": "[2.2][Console] Fix autocompletion of command names when namespaces conflict",
                "body": "Fixes #7234\n\nCurrently autocompletion of namespaces works on _all_ namespaces at once. This fixes it to only search inside subnamespaces once we matched the first level namespace. Otherwise if you have `api:doc` and `generate:doctrine:entity` commands, typing `gen:doc:entity` trips it up because it thinks  doc  is  api:doc , and you end up with a completed name of `generate:doc:entity` which does not match any command.\n"
            },
            {
                "title": "[2.2][HttpKernel] Remove args from 5.3 stack traces to avoid filling log files",
                "body": "Fixes #7259 - it just makes the PHP 5.3 behavior match the one on 5.4.\n"
            },
            {
                "title": "[Process][2.0] getcwd failure fix",
                "body": "Fix regression introduced in #6620\nFixes #7082\n\nFor reference, here is the current behavior I saw:\n\nPHP 5.4.11, windows:\n\n```\n5.4.11\\php.exe -r  chdir('c:\\\\'); var_dump(getcwd()); $p = proc_open('pwd', [['pipe', 'r'], ['pipe', 'w'], ['pipe', 'w']], $pipes, null); var_dump(stream_get_contents($pipes[1])); \nstring(3)  C:\\\\ \nstring(14)  /c/Users/seld\\n \n```\n\n(I use pwd which is a unix util so it dumps a funny path, but don't look at that)\n\nPHP 5.5alpha4, windows (seems fixed):\n\n```\n5.5.0a4\\php.exe  -r  chdir('c:\\\\'); var_dump(getcwd()); $p = proc_open('pwd', [['pipe', 'r'], ['pipe', 'w'], ['pipe', 'w']], $pipes, null); var_dump(stream_get_contents($pipes[1])); \nstring(3)  C:\\ \nstring(3)  /c\\n \n```\n\nPHP 5.3.10, ubuntu:\n\n```\nphp -r  chdir('/'); var_dump(getcwd()); \\$p = proc_open('pwd', array(array('pipe', 'r'), array('p\nipe', 'w'), array('pipe', 'w')), \\$pipes, null); var_dump(stream_get_contents(\\$pipes[1])); \nstring(1)  / \nstring(2)  /\\n \n```\n\nSince the permission issue that #6620 originally was fixing is most likely not gonna happen on windows, this seems like a safe enough compromise. Ideally a check for PHP<5.5 should be introduced, but I would like to be sure it's been fixed and is not just a lucky coincidence (/cc @PierreJoye)\n\nI would recommend merging fast and maybe adding the version check later, since it breaks composer create-project on windows. The workaround being: cd in the dir and run `composer install` again to finalize the project setup.\n"
            },
            {
                "title": "[Process] Warn user with a useful message when tmpfile() failed",
                "body": "Simple warning so users know what's going on instead of getting a proc_open error, see composer/composer#1581. \n\nCan't get the PR template since ~~symfony.com~~ my dns resolver is dead :)\n"
            },
            {
                "title": "[HttpFoundation] Fix sentence and provide a hint at the solution for affected people",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Remove special handling of empty arrays, fixes #5506",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: tiny/no\nSymfony2 tests pass: yes\nFixes the following tickets: #5506\nLicense of the code: MIT\n\nSee the linked issue for details, IMO it should be removed because it's not consistently applied and just a WTF for people.\n"
            },
            {
                "title": "[HttpKernel][MonologBridge] PSR-3 support",
                "body": "This enables PSR-3 support and monolog 1.3+. The first commit is the main part. The rest deals with deprecation of short-hand methods (warn/err/crit/emerg) that are fully expanded in PSR-3 (warning/error/critical/emergency).\n\nThe downside of deprecating them is that for bundles it's a bit harder to support older and newer versions. If that is too much of a hassle you can drop that for now and cherry pick the first commit.\n\nThe upside is that it forces people to move towards PSR-3 compatible stuff, which means eventually we could completely drop the LoggerInterface from the framework. In any case I think the documentation should only mention the `Psr\\Log\\LoggerInterface` and people should start hinting against that. The change should be done in core as well I suppose.\n\nAnyway I wanted to throw this out there as it is to get feedback.\n"
            },
            {
                "title": "[Console] Fix output formatting issues",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n"
            },
            {
                "title": "[Console] Add support for parsing terminal width/height on localized windows",
                "body": "Fixes #5742\n"
            },
            {
                "title": "[Security] Add simpler customization options",
                "body": "The goal of this is to provide a simpler extension point for people that don't have the time to dive into the whole security factory + authentication provider + user provider + authentication listener + token mess. As it stands, it gives you a way to just create one class that is handling all the security stuff in one (by implementing SimpleFormAuthenticatorInterface and UserProviderInterface) + one or more token classes.\n\nI would like feedback on whether people think this makes sense or not before continuing and doing a SimpleHttpAuthenticatorInterface for non-form based stuff.\n\nJust FYI that's how it would look in security.yml:\n\n``` yaml\nsecurity:\n    providers:\n        simple:\n            id: simple_authenticator\n    firewalls:\n        foo:\n            pattern: ^/\n            simple_form:\n                provider: simple\n                authenticator: simple_authenticator\n```\n\n/cc @atrauzzi (who posted a long rant on the ML about how hard this all is, and I can't agree more - I hope it's the right account on github?)\n"
            },
            {
                "title": "[Console] Read input in raw mode to avoid processing escape sequences",
                "body": "As outlined in composer/composer#1238:\n\n> Use read -r rather than the current read shell builtin to take a password from the user on the CLI, the -r is the raw option which means backslashes () aren't interpreted as escape characters, so \\ is a literal \\, otherwise they are nommed or double slashes become single ones etc.\n"
            },
            {
                "title": "[Console] Fix error when mode is not in PATH",
                "body": "Small bugfix, fixes composer/composer#1208\n"
            },
            {
                "title": "[Process] Add workaround for PHP's internal sigchild failing to return proper exit codes",
                "body": "PHP compiled with --enable-sigchild basically fails to return exit codes, and randomly returns -1 instead most of the time (see https://bugs.php.net/bug.php?id=29123).\n\nThis works around it by having the exit code going through another pipe. It's enabled by default for linux because the new pipe trick won't work on windows I think, but that's unlikely to be an issue because most people don't compile their own php there.\n\nI could have it enabled only when sigchild is enabled using the code below, but obviously that adds some overhead, so I'm not sure what's worst.\n\n``` php\nob_start();\nphpinfo(INFO_GENERAL); \n$sigchild = false !== strpos(ob_get_clean(), '--enable-sigchild');\n```\n\nThat said, this renders composer unusable (because we do check exit codes) for people having sigchild enabled, and it's not so easy to workaround outside of the Process class itself, so I hope this is an acceptable fix.\n"
            },
            {
                "title": "Add support for Monolog 1.2.0",
                "body": "It's BC just in case someone still uses an older monolog version\n"
            },
            {
                "title": "Add support for Monolog 1.2.0",
                "body": "It's BC just in case someone still uses an older monolog version\n"
            },
            {
                "title": "Rename unmodifiable to immutable",
                "body": "Maybe it's just me, but it sounded really wrong. The EventDispatcher one was added in 2.1 so no BC break. I don't know about the Form one, but I guess it's just used internally anyway.\n"
            },
            {
                "title": "ExecutableFinder changes",
                "body": "It cleans up stuff a bit and adds a guess for xampp users that wouldn't have php in their path\n"
            },
            {
                "title": "[Routing] Add strict_parameters option to disable exceptions on invalid parameters",
                "body": ""
            },
            {
                "title": "Force root package version in travis builds",
                "body": "This hopefully fixes the composer builds. Let's see what travisbot thinks.\n"
            },
            {
                "title": "[Process] Windows callback handling fix",
                "body": ""
            },
            {
                "title": "Add tests for output capturing",
                "body": "The first test fails on windows, this problem appeared with the merge of #4069 /cc @pulzarraider\n\nBasically it doesn't seem to be capturing output properly anymore. I have tried to debug it but I just seem to be missing a point in where it captures this.\n"
            },
            {
                "title": "[DependencyInjection] Add ParameterBag::remove",
                "body": ""
            },
            {
                "title": "Update master branch alias to target 2.2",
                "body": ""
            },
            {
                "title": "Bump monolog dependency in 2.0",
                "body": ""
            },
            {
                "title": "[Console] Use proc_open instead of exec to suppress errors.",
                "body": "stty is _sometimes_ there on windows, but not always, so with proc_open we can quietly return null instead of outputting errors.\n\n/cc @gnutix: that's the error you told me about this morning in https://gist.github.com/2478037\n"
            },
            {
                "title": "[Filesystem][Others] Fix chmod method and all calls to chmod throughout the framework",
                "body": "Fixes the issue I mentioned in #4004 - basically php's chmod() does not apply the umask by default (unlike mkdir's mode arg which is masked by umask, from which I guess the confusion comes from).\n\nSo I expanded all cache writes and such to 0666 when they were 0644, and then mask it against umask, so that we respect the user settings a bit better.\n\nAlso fixed Filesystem::chmod which completely ignored the umask argument before.\n\nFixed a few tests on windows too.\n"
            },
            {
                "title": "[Templating] Return base URL when an empty path is given to asset()",
                "body": "I think it's straightforward enough in the patch. Tests pass. It's quite useful to generate the base path to send to a JS frontend.\n"
            },
            {
                "title": "Process fixes",
                "body": "A few fixes, including making the tests pass on windows and fixing composer/composer#543. Given the sensitivity of this code I did a bunch of very granular commits explaining everything.\n"
            },
            {
                "title": "[Finder] Avoid unnecessary use of the @ operator",
                "body": "Tests are passing\n"
            },
            {
                "title": "[Console] Fixes terminal width in tests",
                "body": "This fixes the [tests that broke on travis-ci](http://travis-ci.org/#!/symfony/symfony/jobs/1031109) (which seems to advertise a terminal width of ~34, not sure why).\n"
            },
            {
                "title": "[Console] Exception rendering fixes",
                "body": "This fixes two things:\n- `\\r`'s in exception messages were output (in case of `\\r\\n` newlines), creating really weird results on windows.\n- long exception messages were wrapping and then the  red  block was completely messed up, with half black/half red lines, now it's wrapped before output if the terminal width can be detected.\n\nIf you don't care about merging this for 2.0, you can also merge the `console_ex` branch which applies on master. Due to moving tests and renaming of some normalize stuff in the tests, the two test patches are kind of different.\n\nRFC: I am really not sure where to put those getTerminalWidth/Height methods. I guess this is not the best place.\n"
            },
            {
                "title": "[Validator] Allow empty keys in the validation config",
                "body": "This allows you to just list fields that don't have validation rules (yet), for future reference it's kinda helpful. Right now if they're not commented out a fatal is thrown because null isn't an array.\n"
            },
            {
                "title": "[FrameworkBundle] Add support for full URLs to redirect controller",
                "body": "I'd consider this a bugfix since at the moment using an URL just redirects to `/current/pathhttp://example.org`.\n"
            },
            {
                "title": "[Security] Log file/line that triggered the AccessDeniedException",
                "body": "I had to debug some strange issue in a complex system and with all the nested requests and such, knowing exactly what was triggering the login page to show up wasn't so easy. This helps (unless you use annotations, but the JMSSecurityExtra bundle could use a custom exception class that overrides getLine/getFile and makes it point to the annotation line).\n"
            },
            {
                "title": "[Process] Fix command escaping",
                "body": "My bad, I misunderstood what escapeshellcmd was good for. This fixes it by properly escaping all args.\n\nThe test suite hangs here but it already did before, so I'm not sure if all tests pass.\n"
            },
            {
                "title": "Chainable response",
                "body": "Fixed feedback from #3605\n"
            },
            {
                "title": "Chainable responses",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n"
            },
            {
                "title": "[Process] Force _ENV inheritance when it is populated, fixes #3555",
                "body": "Tentative fix for #3555 - should be confirmed before merging IMO.\n"
            },
            {
                "title": "[DependencyInjection] Allow parsing of parameters near escaped percent signs",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no (unless someone relied on the buggy behavior..)\nSymfony2 tests pass: yes\n"
            },
            {
                "title": "[Tests] Allow autoload to run without vendors being cloned",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n"
            },
            {
                "title": "Add branch-alias for composer",
                "body": "This should restore the 2.1-dev version (as an alias of dev-master) so that `2.*` or `2.1.*` constraints work again. I'll adjust packagist soon to also display those aliases.\n"
            },
            {
                "title": "Ignore destructive memcached tests by default",
                "body": "Follow up for #3438\n"
            },
            {
                "title": "Fix tests",
                "body": "- Some windows fixes\n- Skip memcached for real when it's not there - by the way I think those tests are insane since they seem to run a purge() on the memcached server. If you run this by accident somewhere where it matters it could hurt. I think they should be put in a group disabled by default, I'll be happy to add that change if it's deemed useful.\n- Fixed the timer tests for good on windows (which seems to be quite bad at `usleep`). I also documented them so you actually know how it failed when it does, the false instead of true wasn't super useful.\n"
            },
            {
                "title": "[HttpKernel] Remove the _controller since it is not a route parameter part of the URL",
                "body": "There is no reason for the _controller to be there, the whole idea behind this _route_params thing was to help re-generating the current page's URL, you can easily grab the _route + _route_params and reconstruct it without having lots of garbage as query parameters like `?_controller=Foo::..`\n"
            },
            {
                "title": "[WebProfiler] Add default route to access the profiler more easily",
                "body": "When you have the toolbar disabled, it's pretty annoying to reach the _profiler, I never remember what to type to get something except `/_profiler`. This shows the last ten runs which is quite useful.\n"
            },
            {
                "title": "[FrameworkBundle] Remove all default values from redirected url",
                "body": ""
            },
            {
                "title": "ProcessBuilder clean up",
                "body": "- Code cleanup\n- Added create() static method for easy creation until we can do `$process = (new ProcessBuilder())->add()->getProcess();`\n- Removed windows wrapping of commands. This does not belong there IMO. If assetic needs that it should add it, and if it's generally beneficial to everyone then we should add it to Process, but having it implicitly only when using ProcessBuilder makes on sense.\n"
            },
            {
                "title": "[HttpKernel] Escape php tags to avoid eval() injection in HttpCache",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Use only _route_params to generate redirect routes",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nRoutes in RedirectController are generated using all request attributes, which is inconvenient since I abuse request attributes to store other things (device types and such) relevant to the app. It renders the RedirectController useless since it adds unrelated query parameters to URLs it creates.\n"
            },
            {
                "title": "[Console] Fix tests on windows",
                "body": "Rebased version of #3059 after merging #3066. This code isn't in 2.0 but still needs fixing.\n"
            },
            {
                "title": "Fix Console tests on windows (2.0)",
                "body": "Rebased #3059 on 2.0 - once this is applied I will rebase it again because some of the fixes could not be applied to 2.0.\n"
            },
            {
                "title": "[Console] Allow redefinition of application options descriptions",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThis allows you to redefine an `InputOption` as long as it keeps the same semantic (same default, same name, same alias, same modes). There are two purposes:\n- Modifying the description with a more accurate one\n- Making sure the option appears in your commands' help\n\nConcrete example: I often want to provide a verbose version of commands. It's an elegant and very common pattern, but I basically can't document what is going to happen if you do `--verbose` since the base Application already defines `--verbose`. Also the `--verbose` option does not appear when you do `console <command> --help`, which means people probably won't think of using that option.\n"
            },
            {
                "title": "[Console] Format simple arrays nicer",
                "body": "Minor cosmetic adjustment for simple (i.e. with sequential numeric keys) arrays\n"
            },
            {
                "title": "Fix Console tests on windows",
                "body": ""
            },
            {
                "title": "[HttpKernel] Add Kernel::terminate() and HttpKernel::terminate() for post-response logic",
                "body": "This came out of a discussion on IRC about doing stuff post-response, and the fact that right now there is no best practice, and it basically requires adding code after the `->send()` call.\n\nIt's an attempt at fixing it in an official way. Of course terminate() would need to be called explicitly, and added to the front controllers, but then it offers a standard way for everyone to listen on that event and do things without slowing down the user response.\n"
            },
            {
                "title": "Adjust composer files to strictly require known to work packages",
                "body": "I also bumped doctrine common to 2.2, because it seems 2.1 doesn't have the AbstractManagerRegistry stuff that is used by symfony 2.1. Please someone correct me if this is wrong.\n"
            },
            {
                "title": "Fix composer.json files to be stricter",
                "body": ""
            },
            {
                "title": "Fix composer.json files",
                "body": "> =2.1 does not include the 2.1.0-dev versions, since those are lesser than 2.1.0 stable, so nothing is really working right now.\n"
            },
            {
                "title": "Fix requirement name",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Cookie values should not be restricted",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThe restriction I removed makes no sense IMO because we do not use setrawcookie() to send cookies. setrawcookie() does throw a warning when the cookie value contains incorrect characters, but not setcookie(). The latter will just urlencode() the value so it becomes valid. This is also what is done by `Cookie::__toString`, so this could be used in combination with header() to just send raw cookies that are valid, even with values that are invalid in their decoded form.\n\nPHP urldecodes cookies on input, so it all works fine.\n"
            },
            {
                "title": "Fix func signature of TraceableEventDispatcher",
                "body": "Fixes problem in db6fea9fd014b9272627ee8c715368b7a1918741\n"
            },
            {
                "title": "[EventDispatcher] Add reference to the EventDispatcher on the Event",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nI don't like registering event listeners unless they are really used, it seems wasteful. So I tend to register listeners for the response event in other listeners, only when they will be required. @stof has [brought to my attention](https://github.com/nelmio/NelmioCorsBundle/commit/fb243ace83c55280d8a7841a0fbaf22a4e947600#commitcomment-696467) that this may cause issues in Silex or any other situation where event listeners are not lazy loaded, since it creates a circular reference in that case.\n\nWith this PR, avoiding the circular reference is possible, without bloating the response listener with unnecessary  do I need to do anything?  code.\n"
            },
            {
                "title": "[MonologBridge] Adjust for Monolog 1.0.2",
                "body": "This is BC, it just turns off headers in browsers that don't have Firebug, I have had problems in IE with more than 150 log entries just crashing the page.\n"
            },
            {
                "title": "Replace 2.1.* and not any version above 2.1",
                "body": ""
            },
            {
                "title": "Allow use of UTF-8 catalogues in non-UTF-8 applications",
                "body": "This is #2313 but targetting the master branch.\n\nBug fix: yes\nFeature addition: ?:)\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nThe problem I'm having is that, while porting an existing app, we are using UTF-8 everywhere to have a migration path ready, but the current application and DB is still in ISO-8859-1, which means translations containing accented chars are broken.\n\nAlso, we didn't hit the issue yet since we don't use forms much, but I imagine we would have similar issues with core translations for the validator which are all UTF-8 encoded.\n\nNote that I explicitly suppressed this conversion in case your application is setup as UTF-8, to make sure most people are not affected by any slow down this introduces.\n"
            },
            {
                "title": "Allow use of UTF-8 catalogues in non-UTF-8 applications",
                "body": "Bug fix: yes\nFeature addition: ?:)\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\n\nThe problem I'm having is that, while porting an existing app, we are using UTF-8 everywhere to have a migration path ready, but the current application and DB is still in ISO-8859-1, which means translations containing accented chars are broken.\n\nAlso, we didn't hit the issue yet since we don't use forms much, but I imagine we would have similar issues with core translations for the validator which are all UTF-8 encoded.\n\nNote that I explicitly suppressed this conversion in case your application is setup as UTF-8, to make sure most people are not affected by any slow down this introduces.\n"
            },
            {
                "title": "Adjust the way of checking for windows",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Allow definition of extra app.* Twig globals from the configuration",
                "body": "This may be too hackish to make it in core, but I think it's a pretty cool feature so I suggest it anyway.\n\nBasically it allows to add data into the  app  globals from config.yml like:\n\n``` yaml\ntwig:\n    globals:\n        app:\n            foo: bar\n```\n\n`{{ app.foo }}` is now working in the templates.\n"
            },
            {
                "title": "Allow kernel parameters to be overriden by extensions",
                "body": "This just cost me a few hours, I'll try to explain carefully.\n\nThe ContainerBuilder receives kernel parameters first, because they are needed for the application config. Then the application config is loaded, and after that the extensions are loaded.\n\nAll the parameters/services/aliases defined _before_ the extensions are loaded are saved, and restored after the extensions got loaded, because anything you define in the config should take precedence over everything else. That is good. But the problem is that kernel params are added before the app config, and those are also protected by this behavior. \n\nFor example `framework.charset` is broken at the moment because in the FrameworkExtension it sets the `kernel.charset` value, and it is then reset to UTF-8 after the extension is merged.\n\nWhat the patch does is load the kernel params, load the app config, diff the two to be sure we have only the app config, and pass that to the compiler pass that merges extensions, so it can restore only those parameters that were added by the app config. We unfortunately can't just ignore kernel.\\* params because those could be defined by users in the app config.\n"
            },
            {
                "title": "WDT debugging",
                "body": "While implementing collectors I did a mistake in the template name and it never told me, so I was left wondering why my stuff didn't show up. Not so nice IMO. Also the first commit is to allow template names to be specified fully. I don't see why this shouldn't be allowed, since it is the way you specify templates everywhere else.\n"
            },
            {
                "title": "[2.1] [TwigBundle] Allow option to avoid auto-escaping of translations.",
                "body": "This adds a `twig.trust_translations` option. If set to true. The trans and transchoice filters don't auto-escape anymore. I like to put HTML in my translation strings, and it's pretty annoying to have to mark them all as `|raw`.\n\nNote: This is incomplete, the trans tag should be updated as well, but I wanted feedback first.\n"
            },
            {
                "title": "[HttpFoundation] Fix bug in clearCookie/removeCookie not clearing cookies",
                "body": "[HttpFoundation] Fix bug in clearCookie/removeCookie not clearing cookies set with a default '/' path, unless it was explicitly specified\n"
            },
            {
                "title": "[ClassLoader] Improve exception messages of the debug class loader",
                "body": ""
            },
            {
                "title": "[DependencyInjection] Add DIC Pass to remove *.class parameters, fixes #1684",
                "body": "Just had a stab at trying to fix #1684. I realize it's not perfect, especially with the aggressive mode on. But just as a note, my compiled DIC went from 105KB to 99KB with `$aggressive` `false`, and then to 92KB with `true`. \n\nWhether we want to optimize to hell at the risk of creating issues for some (of course we should document it), I don't know.\n"
            },
            {
                "title": "[Routing] Revert to rawurlencode + whitelisting of '/'",
                "body": "After more discussion on 761724ae57d07cee2368bee86a2f1fe22cf188fc - sorry you merged too fast for once ;)\n"
            },
            {
                "title": "[Routing] Add # and ? to escaped chars",
                "body": "See comments on 761724ae57d07cee2368bee86a2f1fe22cf188fc\n"
            },
            {
                "title": "[MonologBundle] Added services for core processors",
                "body": ""
            },
            {
                "title": "[Bridge/Twig] Add required class to labels that match required fields",
                "body": "I have used this to simply style labels that are required with a red star behind them using this CSS:\n\n``` css\nlabel.required::after {\n    content:   * ;\n    color: #c00;\n}\n```\n\nThe problem is that you can't use `input[required] + label::after` as a selector since the label is typically rendered before the input. There is no way to check for an element that is _followed by_ another, only elements _following_.\n\nOf course this CSS in particular won't work except in the latest browsers, but you could still use the `label.required` selector to add a background image and so on. I think this is a very common use case and therefore I think it'd benefit the core framework.\n"
            },
            {
                "title": "[Router] Bunch o' Fixes",
                "body": "The first commit changes the escaping rule to fix issues I had previously, and #752 as well, here's from the full commit message:\n\n```\nOnly + and % are now encoded in generated routes, since they are the only characters that, if not encoded, could cause problems/conflicts when decoded. Namely + turns into a space, and % followed by numbers could do funky things.\n\nThe matcher decodes everything which works since nothing will have %NN without being escaped, and + are escaped as well.\n```\n\nSecond commit is just a test fix for the first\n\nThird and fourth are simply dumper escaping issues, nothing to argue about.\n\nNote that all changes have had test cases added, and I spent a few hours torturing/testing all this stuff with both Apache and PHP dumpers, in many browsers, and with URLs as wonky as `/%01%02%03%04%05%06%07%08%0E%0F%10%11%12%13%14%15%16%17%18%19%1A%1B%1C%1D%1E%1F%20!%22$%25&%27%28%29*+,-./0123456789:;%3C=%3E@ABCDEFGHIJKLMNOPQRSTUVWXYZ%5B%5D%5E_%60abcdefghijklmnopqrstuvwxyz%7B|%7D~/baz` which essentially represent the 1-255 char range minus ? and #.\n\nThe only issues I really encountered after all the patches were applied is that Apache refuses to match `%22` (= ` `) and `*` in a url. I guess it's just because they're not allowed chars in windows paths, but | and < > works fine though. Anyway this works with the PHP dumper, and it didn't work either without my patches so it's not like I broke it, I'm just saying for the record.\n"
            },
            {
                "title": "[2.1] [Console] Added Command::isEnabled method",
                "body": "This addresses #1467.\n\nThe idea is to allow commands to evaluate whether they can run or not, since they are automatically registered. \n- It's useful for the two router:\\* commands since they're optional (router can be disabled), but part of the FrameworkBundle that is not really optional. \n- It could be useful for third party code as well.\n- It's BC.\n- aa95bb0d395810b29a3e654673e130736d9d1080 should address the issue in #1467, while the other commits just make sure the command is not registered at all if the router isn't standard.\n\nOne issue remains though:\n- A few other services like twig helpers get the `r\u00f2uter` injected, this means that if there is really **no** router service defined, there is still an error. I'm not sure how to fix those beyond adding `on-invalid= null ` but I'm not sure if that's desirable. I guess we could argue that the router is a big candidate for replacement/suppression, and as such it should be truly optional, but if we do it I don't know where it'll lead. I don't want to end up in a situation where half the dependencies are optional to support every possible combination. @fabpot wdyt?\n"
            },
            {
                "title": "[HttpKernel] Added AutoloadExtension",
                "body": "This extension is instanciated by default for Bundles that don't have an Extension class.\nIt automatically loads Resources/config/services.(yml|xml) service definitions into the Container if they exist.\n\nThe idea came from @lsmith77 - many people don't get the concept of extensions, and the best way for them is to smash service definitions in their app config, or put it in the bundle and include it from the app config, but that ends up creating issues apparently (I'll let Lukas explain if needed). So the idea here is that by default the GeneratorBundle should create a services.yml or xml, and people can drop their services in there. That way we can skip the subject of extensions entirely for people that don't write reusable bundles. \n\nAlso it standardizes the name a bit, instead of having a ton of different names as we have right now. It could be a good thing to rename the core files to follow this convention, except for FrameworkBundle and SecurityBundle (and any other?) that have many files.\n"
            },
            {
                "title": "[HttpFoundation] Add REQUEST_TIME by default",
                "body": "Without this the getting the REQUEST_TIME from the Request in tests is breaking.\n"
            },
            {
                "title": "HttpCache changes for 304 responses",
                "body": "Fixes #1413\n"
            },
            {
                "title": "[WebProfilerBundle] Fixes toolbar content check",
                "body": "It appears that some html optimizers trim the comments, therefore the old check was not working. This is more robust.\n\nFixes the issue reported in 8541a5bcbc97f965f4c53fc3ece790cdc4a922bf\n"
            },
            {
                "title": "[WebProfilerBundle] Make sure the toolbar closes properly",
                "body": "Due to the whitespace element between the div which clears and the toolbar div, in some browsers it was left over after you close the toolbar, this doesn't happen anymore.\n\nTested in IE7/9/FF4/Opera11\n"
            },
            {
                "title": "Non-blocking WDT & prevents garbage to slip in the page",
                "body": "I made the loading non-blocking so that it's not preventing normal operation of the page when the WDT takes a bit long to come up (happens sometimes when the machine is busy).\n\nThe second commit also checks that the response looks correct, to prevent stack traces and such to appear in the page if there was a problem. The main issue is not really stack traces though it's mostly with security and intercept_redirect enabled, if you look at a fully secured site you get twice the redirect intercept message to the login page.\n\nTested in IE7/9/FF4/Opera11\n"
            },
            {
                "title": "[HttpFoundation] Ensure response body is string, fixes #1378",
                "body": "The issue in #1378 is clearly just a misuse of the class due but the error it triggers is confusing. This hopes to fix that.\n"
            },
            {
                "title": "Rename kernel.listener to kernel.event_listener",
                "body": "Better consistency with doctrine.event_listener\n"
            },
            {
                "title": "[FrameworkBundle] Prevent breakage when an array callback is not callable",
                "body": "W/o this you get warnings that objects can't be converted to strings.\n"
            },
            {
                "title": "[Validator] Add support for IDNs and custom TLDs",
                "body": "Minor changes to allow for IDNs and [custom TLDs](http://news.softpedia.com/news/ICANN-Approves-New-Custom-Generic-Top-Level-Domains-Like-google-bank-206977.shtml). This is the only sane way to support everything in a timeless manner.\n"
            },
            {
                "title": "[HttpFoundation] Small optimization of Session flash handling",
                "body": "Due to copy-on-write, this is faster and takes less memory unless the flashes are changed during the request, but that's not very likely as typically you set flashes, redirect, then show them, and at that point you do not modify them again.\n"
            },
            {
                "title": "[DomCrawler] Uppercase http methods",
                "body": "That way it all matches what the HttpFoundation\\Request class does\n"
            },
            {
                "title": "[DoctrineBundle] Do not try to fetch doctrine listeners if doctrine is disabled",
                "body": "If you have the doctrine bundle enabled but nothing in your config you get errors because of the compiler pass right now.\n"
            },
            {
                "title": "[Serializer] serializer refactoring",
                "body": "Big cleanup of the interfaces\n"
            },
            {
                "title": "Serializer",
                "body": "This includes #802 and adds some stuff back from the previous PR of @schmittjoh.\n"
            },
            {
                "title": "[HttpFoundation] Do not auto-start the session when saving",
                "body": "In the current code, __destruct() always calls save(), which calls start(), so even without auto_start, the session is always started. Since all session getters/setters auto-start the session, this shouldn't be an issue. \n\nThe only potential edge case is if someone sets a flash message, doesn't read them on the next request, and doesn't start the session either, then they won't be cleared. But I don't think this is a real use case we have to care about, people disabling session auto_start should know what they're doing with flash messages and all.\n"
            },
            {
                "title": "[HttpFoundation] Remove warnings when session id isn't given",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Do not override the session storage for test",
                "body": "This is removed in favor of https://github.com/symfony/symfony-standard/pull/70\n\nOtherwise, if you want to use your own session storage in tests it's impossible (or rather made overly difficult).\n"
            },
            {
                "title": "[EventDispatcher] Allow arbitrary callbacks",
                "body": "Copy from the commit messages that are relevant:\n\n```\n[EventDispatcher] Allow registration of arbitrary callbacks\n\nThis in effect removes the direct link between event name and the method name on the handler.\nAny callback can be given as a handler and the event name becomes an arbitrary string. Allowing for easier namespacing (see next commit)\n```\n\nAnd:\n\n```\nUpdate Core and Security events to latest model\n\nThe main benefit is that in XML/YML files we have common syntax (i.e. core.controller, form.pre_bind) that properly namespaces event names (before: onCoreController was ok, preBind was not).\nOn the other hand in PHP land we also have namespaced events, CoreEvents::controller, FormEvents::preBind, before it was Events::onCoreController, Events::onPreBind, we now have more context.\n```\n\nI'll update Forms if we can agree this is progress, because I already wasted enough time on this as it is.\n\nObviously the one huge drawback is BC breaks for everyone that registered events in their code, others should be unaffected.\n"
            },
            {
                "title": "[FrameworkBundle] Adjust styling and display of logs",
                "body": "As discussed .. minor adjustments\n"
            },
            {
                "title": "[HttpKernel] Log non-http exceptions as critical as well",
                "body": "This is a continuation of https://github.com/symfony/symfony/commit/838853e58bfe97cf67c9454d2ee2308ba25957a3 because I forgot one place, and also because the if wasn't catching non-http exceptions, I thought they were converted to 500 HttpExceptions already at that point.\n"
            },
            {
                "title": "[HttpKernel] Throw exception if no path is present in a resource",
                "body": "BTW: Those exceptions are pretty badly hidden by multiple layers of catching I think, basically if you have a bad rule in your routing like `resource: @FooBundle` you get an exception from FileLoader containing the exception from Loader, but no trace of the Kernel exception which has the proper message. I didn't have time to figure it out but it should be improved imo to give better reporting.\n"
            },
            {
                "title": "[HttpKernel] Fix console output for reals",
                "body": ""
            },
            {
                "title": "[HttpKernel] Log 500+ errors as critical and not error",
                "body": "This allows people to filter easily between 404 type of responses (that are mostly for users) and real errors in their application (where they probably want to get an email notification\n\nNote: Didn't really try the patch, but I believe it's the only place where this has to be done?\n"
            },
            {
                "title": "[HttpFoundation] Windows test fixes",
                "body": ""
            },
            {
                "title": "Monolog updates",
                "body": "- Minor adjustment to the log templates\n"
            },
            {
                "title": "Added level constants LoggerInterface",
                "body": ""
            },
            {
                "title": "[Form] Use proper transformation exception in case of failure",
                "body": "Without this, the exception is not caught as a form error, but instead triggers a 500 into the user's face.\n"
            },
            {
                "title": "Monolog FirePHP support",
                "body": "Again a use case for writing headers before the response is created. I'm not advocating for early response, I prefer the way it is now, but having an early-ResponseHeaderBag somewhere could be handy.\n"
            },
            {
                "title": "[MonologBundle] Add logger alias to monolog.logger",
                "body": ""
            },
            {
                "title": "[AsseticBundle] Set proper content-type headers",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Allow init:bundle to be called with / as namespace separator",
                "body": "Just a bit easier than having to type Foo\\\\Bar or 'Foo\\Bar'\n"
            },
            {
                "title": "[Security] Remove unneeded and invalid use statement",
                "body": "This is trying to import an Events symbol which already exists in the Symfony\\Component\\Security\\Http namespace => fatal error. It breaks code coverage, and I guess any code relying on this class.\n"
            },
            {
                "title": "[WebProfilerBundle] Prevent redirects to be intercepted in XHRs",
                "body": ""
            },
            {
                "title": "Serializer: Moved to privates & added @api",
                "body": "- Some extra docblocks\n"
            },
            {
                "title": "[Security] Redirect to Referrer is broken when the favicon is missing on a fully secured site.",
                "body": "it goes like:\n\n```\nGET / => you get a login form, browser fetches page components, among which:\nGET /favicon.ico => 404 => htaccess throws it at Symfony => overrides the _security.target_path value\n```\n\nWhich sucks.\n\nNow if you create 404s  on purpose  in your page, this is maybe your own problem, but the favicon is requested by browsers even if it's not defined in the markup, so this is a specific case that is worth addressing in the framework imo.\n"
            },
            {
                "title": "[FrameworkBundle] A few visual/UX fixes to the exception page",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] Session helper",
                "body": "Found this while cleaning up my 50 branches.. Couldn't find the associated pull request, but it still sounds to me like a valid use case to snatch all flashes at once and loop over them. Sorry if I'm repeating myself :)\n"
            },
            {
                "title": "[WebProfilerBunder] Display hand cursor on the WDT close button",
                "body": ""
            },
            {
                "title": "[Config] Exception msg improvement",
                "body": ""
            },
            {
                "title": "[SecurityBundle] Allow setting the class of in-memory users",
                "body": ""
            },
            {
                "title": "Rename .symfony to .gitkeep which is more standard git practice",
                "body": ""
            },
            {
                "title": "[FrameworkBundle] init:bundle => bundle:init",
                "body": "The command names are all constructed as: `resource:action`, and `init:bundle` is backwards.\n"
            },
            {
                "title": "MonologBundle",
                "body": "So, I spent the last week reworking Monolog quite a lot, and now with much help from Stof (thanks!) I'd like to introduce the MonologBundle to core. It is a drop-in replacement for ZendBundle as it is. If it's accepted we can look at maybe adjusting the core interfaces to match it a bit more, but that's not necessary.\n\nPlease take a look at Monolog's [README](https://github.com/Seldaek/monolog) (mostly Core Concepts & Notable Features) - it has nothing to do with a Zend\\Log rewrite anymore.\n\nHere's a sample output btw http://pastie.org/private/cyf6gcapzgvm9vlpkuf5q where you can see the different log channels present before the log level (e.g. event.DEBUG = <channel>.<level>), of course the format can be tweaked if necessary.\n\nStof plans on adding more tests this weekend btw, if it's accepted we'll definitely follow up on that.\n\nA PR for the sandbox will follow.\n"
            },
            {
                "title": "[Form][HttpFoundation] Fixes to FileField ",
                "body": "And some minor changes to UploadedFile\n"
            },
            {
                "title": "Routing urlencode fix",
                "body": "With the current way, if you have / for example in a route variable, it encodes it in %2F, and since this is not valid in URLs apache returns a 404 without even hitting app.php.\n\nEdit: Of course, query parameters are still url encoded as they should be by http_build_query below in that same method.\n"
            },
            {
                "title": "[Fomr] Added label option to Form fields",
                "body": "The idea is that you can define a label key that does not have to match with your property name. In conjunction with translation keys this can be pretty useful.\n"
            },
            {
                "title": "Use psr0 autoloading instead of requiring a bunch of phpunit files at every request",
                "body": "This one is slightly problematic. \n\nBasically force-including PHPUnit/Autoload.php and similar files in satellite projects is not a good thing, because those register a lot of autoloaders, and require a few files already, which means if you have phpunit installed in your project, whenever you include the composer autoloader you end up loading a bunch of PHPUnit files you'll most likely not need.\n\nSo the solution is to switch to PSR-0 autoloading, which seems to work fine apart from PHPUnit_Util_GlobalState that calls phpunit_autoload() which fails obviously. So I attempted to workaround the issue by just returning phpunit files from the declared classes. I'm not sure however whether this is complete nor if it is an acceptable workaround since I'm not sure in which contexts this method is used. That said I don't see a better way to fix it apart from reworking the code a bit more so that the classmap used in phpunit_autoload() is available separately/individually in another file of the project.\n\nIf this solution should be accepted, the same change to composer.json should be applied to all satellite projects with their respective PSR-0 prefixes.\n"
            },
            {
                "title": "Remove phpunit.bat since composer creates a bat wrapper itself on windows",
                "body": ""
            },
            {
                "title": "Clean up composer.json",
                "body": "See claylo/conductor#1 - this should be applied to all the new  composerified  repos before you tag a new version.\n"
            },
            {
                "title": "Exception handling fix",
                "body": "See the commit description, this is a really annoying side effect which has led to bad code making it through the tests, and then failing in real conditions.\n"
            }
        ]
    },
    "315266": {
        "repos": [
            "The Symfony PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            " #7106 - fix for ZTS builds"
        ],
        "issue_comments": [
            ":star2: better.\n",
            "This seems indeed useless.\nRelated #7106, can you confirm @Seldaek ?\n",
            "Ok i'll fix\n",
            "True, i think it's better like that\n",
            "ok, I'll take it all quietly\n",
            "thx\n",
            "I'm going to remove this branch and make another PR that is up to date.\n",
            "Same issue here, on 5.4.\n",
            "@Seldaek ok for you like that ?\n",
            "@Seldaek Sure, i'll do that. But just to be sure, we remove all check for version and we replace it by a constant check?\n",
            "ok\n",
            "Same issue for 5.4.15 (on 2.3)\n\n```\nDeprecated: IntlDateFormatter::setTimeZoneId(): Use datefmt_set_timezone() instead, which also accepts a plain time zone identifier and for which this function is now an alias in /Users/lizjulien/Work/myapp/vendor/symfony/symfony/src/Symfony/Component/Form/Extension/Core/Type/DateType.php on line 271\n```\n"
        ],
        "issues": [
            {
                "title": "#7106 - check php version for getcwd()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7106 |\n| License | MIT |\n"
            },
            {
                "title": "[DomCrawler] Handle relative links",
                "body": "| Q | A |\n| --- | --- |\n| Fixed tickets | #7219 |\n| License | MIT |\n"
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "#7106 - check php version for getcwd()",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7106 |\n| License | MIT |\n"
            },
            {
                "title": "[DomCrawler] Handle relative links",
                "body": "| Q | A |\n| --- | --- |\n| Fixed tickets | #7219 |\n| License | MIT |\n"
            }
        ]
    },
    "564529": {
        "repos": [
            "The Symfony2 PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "[HttpKernel] Use a simple isError from Response for HandleException",
            "[Form] Make exception handling consistent with other components refs #6544",
            "[DependencyInjection] Return self for add...\n\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nReturn self instance when call an ADD something method.",
            "fix CS into Finder\n\nfix CS into Finder",
            "Fix CS phpdoc FormConfigEditorInterface",
            "Add Support for boolean as to string into yaml extension"
        ],
        "issue_comments": [
            "@Burgov the FormException extends the Exception from the SPL and TransformationFailedException extends the RuntimeException from the SPL.\n\nI don't think that create an other RuntimeException from the Form component is very usefull at this time.\nBut if @bschussek have any suggestions..\n",
            "Ok i will check on it\n",
            "@bschussek in the last case, we can just use our Exception class who override the SPL, don't you think ?\nOr in certain cases use a specialized one.\n",
            "@stof the FormException actually extends the \\Exception, so you are suggesting me to use RuntimeException (who extends \\RuntimeException and implements ExceptionInterface from Form component) instead?\n",
            "@pborreli done.\n",
            "@fabpot this one is Ok just some typos and a useless Namespace using\n",
            "@fabpot PR ok \n",
            "@Axxiss @stof is this issue still valid ?\n",
            "You can do this into your root Type\n\n``` PHP\npublic function buildForm(FormBuilderInterface $builder, array $options)\n{\n// some code\n}\n\npublic function getName()\n{\n// some code\n}\n\npublic function setDefaultOptions(OptionsResolverInterface $resolver)\n{\n    $resolver->setDefaults(array('attr' => array('novalidate' => false)));\n}\n```\n\nAnd into your twig template\n\n``` TWIG\n{{ form_start(form) }}\n{{ form_rest(form) }}\n{{ form_end(form) }}\n```\n",
            "Hi @Kifah \nCan you provide your schema / model annotations?\n",
            "Hi @odolbeau to store your user's last connection time, you can use the on interactive login event.\n",
            "Hi @arnaugm the uri given is not the same because, when you launch your tests, they are not aware about VHOST or path uri. the localhost uri given by the link is just a reference. the important is `/user/edit`.\nWhat are you asserting in your test ? the full uri ?\n",
            "Can you provide more information about your code ?\n",
            "Nice ;-)\n",
            "Have you tried to get the specific error from your `password` field ?\n",
            "Have you tried this `$form->get('password')->getErrors()` ?\n",
            "hmm it's weird but can you try this ?\n\n```\nforeach ($form->get('password') as $widget) {\n    print_r($widget->getErrors());\n}\n```\n\nMaybe it's a common problem with the error_bubbling\n",
            "@josefvanniekerk i had the same issue has you.\nIn my case, this is what i did.\n\nIn my webtestcase\n\n```\n    /**\n     * authenticate a user, by creating a token and inject\n     * it into the security context\n     */\n    public function login($client, $username, $scope = null, $providerKey =  secured_area )\n    {\n        $user = $this->getUserByUsername($username);\n        $token = new CustomToken($user, $user->getAccessToken(), null, $providerKey, $scope, $user->getRoles());\n        $client->getContainer()->get('security.context')->setToken($token);\n\n        $session = $client->getContainer()->get('session');\n        $session->set('_security_' . $providerKey, serialize($token));\n        $session->save();\n    }\n```\n\nBecause there is some cookie check in the default ContextListener\ni create a new contextListener who extends the BaseContextListener and replace\n\n```\n    $session = $request->hasPreviousSession() ? $request->getSession() : null;\n```\n\nby\n\n```\n    $session = $request->hasSession() ? $request->getSession() : null;\n```\n\nAnd in my config_test.yml\n\n```\nparameters:\n    security.context_listener.class: Sensio\\Bundle\\XXXXXBundle\\Test\\Security\\Http\\Firewall\\ContextListener\n```\n\nMaybe there is a better way... ( @fabpot @stof  )\n",
            "@josefvanniekerk `save`  is not enough,  because of the `hasPreviousSession` from the request\n",
            "It's not a behavior of symfony but one of doctrine.\n`PreUpdate` and `PrePersist` are called only if there is a change into your Entity (doctrine) properties,\nthe property `file` is not persisted, so it no change the Entity state. \n\nYou should call your `preUpload` or `upload` method into your controller.\n",
            "You can do that into your entity.\n\n```\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\n\nclass Entity\n{\n    protected $file;\n\n    // ...\n\n    public function upload()\n    {\n        if (null !== $this->file && $this->file instanceof UploadedFile) {\n            // do your logic\n        }\n    }\n}\n```\n\nAnd call `upload` method into your action controller.\n",
            "Yep, you should.\n\n```\n$user->upload()\n```\n\ngive you less logic into your controller than\n\n```\nif(null !== $user->imagefile)   {\n    $user->setProfilePic('');\n}\n```\n\nI think it's better\n",
            "The render order is specify by the order how you add your type.\nSo if you make the good order into your main type, you can just use `{{ form_widget(form) }}` and it's done.\n",
            "have you check if the bubbling error is true or false ?\n",
            "Have you added theses lines into your routing_dev.yml\n\n```\n_assetic:\n    resource: .\n    type:     assetic\n```\n",
            "every changes done\n",
            "every changes done\n",
            "I don't think it's a good way to add html into your FormType, i think it's a better way to \nplay with your own form template.\n",
            "@fabpot can you close this one ? it reference to a PR who was merged\n",
            "sorry @vicb for the misunderstood. \n",
            "What do you mean by  please revert all permission changes  because i did not change any permissions by myself :/\n",
            "@stof i'm on linux but i did not change any chmod or chown since a clone the repo\n",
            "you mean rebase ? If it the case i have never test\n",
            "Yep i will look at it\n",
            "@stof  I squash my commits. It's ok ?\n",
            "yep sure\n",
            "@stof I made all Doctrine PRs to respect this new one\n",
            "@bschussek any comments on this PR ?\n",
            "@bschussek thx for your comments, i will do this as soon as possible\n",
            "@bschussek should i remove all call to guessMinLength ?\n",
            "ping @bschussek is it good like this ?\n",
            "@bschussek @vicb i think it's good now, and i think i understood the diff between Size and SizeLength Constraint ValueGuess (One is for numeric and the other for string). It was not clear in my mind when i made the change. But now it's okay\n",
            "@lsmith77 I don't know, what append, i merge the master into my branch...\nSo a recreate a PR https://github.com/symfony/symfony/pull/4077 but it seems alright now.\n",
            "@bschussek do you want i create a new PR for the changelog ?\n",
            "What do you mean by  please revert all permission changes  because i did not change any permissions by myself :/\n",
            "@stof i'm on linux but i did not change any chmod or chown since a clone the repo\n",
            "you mean rebase ? If it the case i have never test\n",
            "Yep i will look at it\n",
            "@stof  I squash my commits. It's ok ?\n",
            "yep sure\n",
            "@stof I made all Doctrine PRs to respect this new one\n",
            "@bschussek any comments on this PR ?\n",
            "@bschussek thx for your comments, i will do this as soon as possible\n",
            "@bschussek should i remove all call to guessMinLength ?\n",
            "ping @bschussek is it good like this ?\n",
            "@bschussek @vicb i think it's good now, and i think i understood the diff between Size and SizeLength Constraint ValueGuess (One is for numeric and the other for string). It was not clear in my mind when i made the change. But now it's okay\n",
            "@lsmith77 I don't know, what append, i merge the master into my branch...\nSo a recreate a PR https://github.com/symfony/symfony/pull/4077 but it seems alright now.\n",
            "@bschussek do you want i create a new PR for the changelog ?\n",
            "please referer to the doc http://symfony.com/doc/current/book/security.html \nYou let symfony validate your form for you :)\n",
            "you are using a wrong way.\nHave you read the Acme Demo code ?\n",
            "The form is validate in the security component, you don't have to worry about that\n",
            "You have to add by yourself the submit input to your form.\n",
            "ahh sorry for the misunderstood.\n",
            "but selecting form by ID and submit it, is not working ? ping @stof \n",
            "thx @vicb for validating my mind :)\n",
            "So is this is good for you @niepi ?\n",
            "I can't reproduce the bug, but i'm using BrowserKit instead of Goutte\n",
            "@niepi any news ?\n",
            "you have to use the right transport.\nfor example `php vendors.php install --transport=git`\n\nping @fabpot this ticket can be closed\n",
            "ping @fabpot issue OK, can be closed.\n",
            "it's closed because @sensi said he found a solution to his problem\n",
            "I'm working on a patch\n",
            "I think we can closed this issue. ping @fabpot\n",
            "@fabpot this issue can be closed too.\n",
            "The error is still here. i'm searching to fix it.\n",
            "so i talked with fabpot, and the _locale is passed throw the url, and because of a 404 error, we can't know what is the _local from the url who is unknown.\nSo to prevent this kind of error you need to passe default _locale into your routing or with the {{path()}} function.\nBut there is no full support for this problem.\n",
            "this isssue can be claused (source @fabpot )\n"
        ],
        "issues": [
            {
                "title": "[HttpKernel] Use a simple isError from Response for HandleException",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | no (but they did not pass at all) |\n| License | MIT |\n"
            },
            {
                "title": "[Form] Make exception handling consistent with other components",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nFixes the following tickets: #6544\nTodo: -\nLicense of the code: MIT\n"
            },
            {
                "title": "[DependencyInjection] Return self for add...",
                "body": "Bug fix: no\nForget fix: yes\nFeature addition: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nReturn self instance when call an ADD something method.\n"
            },
            {
                "title": "fix CS into Finder",
                "body": "fix CS into Finder\n"
            },
            {
                "title": "Fix CS phpdoc FormConfigEditorInterface",
                "body": "Just a CS fixer\n"
            },
            {
                "title": "[Form] add guess pattern",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: https://github.com/symfony/symfony/issues/3766\nTodo: -\n\nDue to some trouble when rebase my previous PR i open a new one with Master merged\nRefs PR: https://github.com/symfony/symfony/pull/3927\n"
            },
            {
                "title": "Add Support for boolean as to string into yaml extension",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: 3992\nTodo:\n- Maybe use only boolean checker instead of YamlDumper->dump\n"
            },
            {
                "title": "Add Support for boolean or others (except resource and array), as to string into yaml extension",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: 3992\nTodo:\n- Maybe use only boolean checker instead of YamlDumper->dump\n"
            },
            {
                "title": "[Form] add guess pattern",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: https://github.com/symfony/symfony/issues/3766\nTodo: -\n"
            }
        ],
        "pr_comments": [
            "Why create a new variable here ?\n",
            "done\n",
            "done\n",
            "Yep @link could be better\n",
            "Maybe i can make a PR to fixe this ?\n",
            "I don't know why it shows diff here...\n",
            "Fixed\n",
            "ah ok, i will revert it.\n",
            "Yep sure i revert it as you wish\n",
            "It's fixed now, i will squash and make some PR into others Repo who depends of this\n",
            "It's because of merging min into pattern. But if it's useless i remove it\n",
            "Same as doctrineOrmTypeGuesser comment\n",
            "Ok, i understand, but why it was in guessMin if a null was return ?\n",
            "Why create a new variable here ?\n",
            "Why create a new variable here ?\n",
            "done\n",
            "done\n",
            "Yep @link could be better\n",
            "Maybe i can make a PR to fixe this ?\n",
            "done\n",
            "done\n",
            "Yep @link could be better\n",
            "Maybe i can make a PR to fixe this ?\n",
            "done\n",
            "done\n",
            "Yep @link could be better\n",
            "Maybe i can make a PR to fixe this ?\n",
            "I don't know why it shows diff here...\n",
            "Fixed\n",
            "ah ok, i will revert it.\n",
            "Yep sure i revert it as you wish\n",
            "It's fixed now, i will squash and make some PR into others Repo who depends of this\n",
            "It's because of merging min into pattern. But if it's useless i remove it\n",
            "Same as doctrineOrmTypeGuesser comment\n",
            "Ok, i understand, but why it was in guessMin if a null was return ?\n",
            "I don't know why it shows diff here...\n",
            "Fixed\n",
            "ah ok, i will revert it.\n",
            "Yep sure i revert it as you wish\n",
            "It's fixed now, i will squash and make some PR into others Repo who depends of this\n",
            "It's because of merging min into pattern. But if it's useless i remove it\n",
            "Same as doctrineOrmTypeGuesser comment\n",
            "Ok, i understand, but why it was in guessMin if a null was return ?\n",
            "I don't know why it shows diff here...\n",
            "Fixed\n",
            "ah ok, i will revert it.\n",
            "Yep sure i revert it as you wish\n",
            "It's fixed now, i will squash and make some PR into others Repo who depends of this\n",
            "It's because of merging min into pattern. But if it's useless i remove it\n",
            "Same as doctrineOrmTypeGuesser comment\n",
            "Ok, i understand, but why it was in guessMin if a null was return ?\n"
        ],
        "prs": [
            {
                "title": "[HttpKernel] Use a simple isError from Response for HandleException",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | no (but they did not pass at all) |\n| License | MIT |\n"
            },
            {
                "title": "[Form] Make exception handling consistent with other components",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nFixes the following tickets: #6544\nTodo: -\nLicense of the code: MIT\n"
            },
            {
                "title": "[DependencyInjection] Return self for add...",
                "body": "Bug fix: no\nForget fix: yes\nFeature addition: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nReturn self instance when call an ADD something method.\n"
            },
            {
                "title": "fix CS into Finder",
                "body": "fix CS into Finder\n"
            },
            {
                "title": "Fix CS phpdoc FormConfigEditorInterface",
                "body": "Just a CS fixer\n"
            },
            {
                "title": "[Form] add guess pattern",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: https://github.com/symfony/symfony/issues/3766\nTodo: -\n\nDue to some trouble when rebase my previous PR i open a new one with Master merged\nRefs PR: https://github.com/symfony/symfony/pull/3927\n"
            },
            {
                "title": "Add Support for boolean as to string into yaml extension",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: 3992\nTodo:\n- Maybe use only boolean checker instead of YamlDumper->dump\n"
            },
            {
                "title": "Add Support for boolean or others (except resource and array), as to string into yaml extension",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: 3992\nTodo:\n- Maybe use only boolean checker instead of YamlDumper->dump\n"
            },
            {
                "title": "[Form] add guess pattern",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: https://github.com/symfony/symfony/issues/3766\nTodo: -\n"
            }
        ]
    },
    "4438652": {
        "repos": [
            "The Symfony PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "Fix #6029 : check the version of intl instead of the version of PHP - use intl version, not icu version",
            "Fix #6029 : check the version of intl instead of the version of PHP - revert the whitespaces",
            "Fix #6029 : check the version of intl instead of the version of PHP"
        ],
        "issue_comments": [
            "The Travis CI build failed https://travis-ci.org/symfony/symfony/builds/11272906\n\nWould it not be better to check the version of php in addition to intl ?\n"
        ],
        "issues": [
            {
                "title": "Fix #6029 : check the version of intl instead of the version of PHP",
                "body": ""
            }
        ],
        "pr_comments": [
            "it's done :+1: \n"
        ],
        "prs": [
            {
                "title": "Fix #6029 : check the version of intl instead of the version of PHP",
                "body": ""
            }
        ]
    },
    "121793": {
        "repos": [
            "The Symfony 2 PHP framework (PHP 5.3 only -- everything is HIGHLY EXPERIMENTAL -- things WILL change)"
        ],
        "commit_comments": [],
        "commits": [
            "Support of non default entity manager for EntityUserProvider"
        ],
        "issue_comments": [
            "@jakzal that's why never forget to run test locally :p. will investigate more, but my app seems working for now. probably the test needs work too\n",
            "Oh. That's wonderful then. \n\nI think what's missing is proper doc. The one in http://symfony.com/doc/master/reference/configuration/security.html is missing the `manager_name` key. \n\nI'll close this and create a pull request in the docs.\n",
            "I suggest use `'format'` as is as option name to be consistent with date type. It should also follow the time codes in php date format.\n\nMaybe throw invalid argument if a passed code does not have anything to do with time formating such as year, months and days. But it should allow literal codes which are escaped by backslash i think.\n\nThe allowed codes\n\n```\na   Lowercase Ante meridiem and Post meridiem   am or pm\nA   Uppercase Ante meridiem and Post meridiem   AM or PM\nB   Swatch Internet time    000 through 999\ng   12-hour format of an hour without leading zeros 1 through 12\nG   24-hour format of an hour without leading zeros 0 through 23\nh   12-hour format of an hour with leading zeros    01 through 12\nH   24-hour format of an hour with leading zeros    00 through 23\ni   Minutes with leading zeros  00 to 59\ns   Seconds, with leading zeros 00 through 59\n```\n",
            "@davedevelopment format is more flexible and the fact that time field is not an hour only type.\n",
            "@bschussek i guess so but it still needed for single_text widget. For dropdowns, I aggree that  there must be another option but it also means adding another dropdown to select am/pm.\n",
            "It should be configuration agnostic and rely on HTTP uri header. I'm not a rails dev but this is possible in php when computed againts script_name and script_filename headers of front web controller.\n\nReference:\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L624-647\n",
            ":+1: \n",
            "I simplified the change. And the reason why tests for text help do not need changes is because in CommandTest, the commands are executed first which also merges app definition  before invoking asText or asXml  . While in ApplicationTest, commands are never run therefore app definition is not being merged.\n",
            "it might be caused by reverse proxy not sending x-forwarded-port header\n",
            "My composer.json\n\n```\n\n{\n     name :  symfony/framework-standard-edition ,\n     description :  The \\ Symfony Standard Edition\\  distribution ,\n     autoload : {\n         psr-0 : {   :  src/  }\n    },\n     repositories : [\n        {\n             type :  vcs ,\n             url :  https://github.com/KnpLabs/KnpMenuBundle.git \n        }\n    ],\n     require : {\n         php :  >=5.3.2 ,\n         symfony/symfony :  2.1.* ,\n         doctrine/orm :  2.2.0 ,\n         doctrine/doctrine-bundle :  dev-master ,\n         twig/extensions :  dev-master ,\n         symfony/assetic-bundle :  dev-master ,\n         symfony/swiftmailer-bundle :  dev-master ,\n         symfony/monolog-bundle :  dev-master ,\n         sensio/distribution-bundle :  dev-master ,\n         sensio/framework-extra-bundle :  dev-master ,\n         sensio/generator-bundle :  dev-master ,\n         jms/security-extra-bundle :  1.1.0 ,\n         jms/di-extra-bundle :  1.0.1 ,\n         sonata-project/user-bundle  :  dev-master ,\n         sonata-project/doctrine-orm-admin-bundle  :  dev-master ,\n         stof/doctrine-extensions-bundle :  dev-master ,\n         liip/imagine-bundle :  dev-master ,\n         friendsofsymfony/facebook-bundle :  dev-master ,\n         knplabs/knp-menu :  dev-html_safe as 1.0.x-dev \n    },\n     scripts : {\n         post-install-cmd : [\n             Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap ,\n             Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache \n        ],\n         post-update-cmd : [\n             Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::buildBootstrap ,\n             Sensio\\\\Bundle\\\\DistributionBundle\\\\Composer\\\\ScriptHandler::clearCache \n        ]\n    },\n     config : {\n         bin-dir :  bin \n    },\n     extra : {\n         symfony-app-dir :  app ,\n         symfony-web-dir :  web \n    }\n}\n```\n",
            "@stof fos_user.new_password.short\n",
            "here's the profiler dump that contains the stack trace https://www.dropbox.com/s/4aoz12tdbnl1p6n/4fa558b78cf8b.txt\n"
        ],
        "issues": [
            {
                "title": "[DoctrineBridgeBundle] Support of non default entity manager for EntityUserProvider",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | na |\n| Fixed tickets | doctrine/DoctrineBundle#188 |\n| License | MIT |\n\nthis is reference to doctrine/DoctrineBundle#188\n\nTLDR The EntityUserProvider found in DoctrineBridgeBundle only assumes entity to use default EntityManager.\n"
            },
            {
                "title": "[Console] [Enhancement] fixes #5316",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5316\n"
            },
            {
                "title": "Translator throwing error on pluralization",
                "body": "I'm getting this exception during render of constraint error. I'm using the changepassword form of fosuserbundle using only one character for new password. I used en as default locale so $position = 1 but $standardRules has only one value on key 0 which is the one defined in validations.en.yml of fosuserbundle.\n\n```\n    __project__/vendor/symfony/symfony/src/Symfony/Component/Translation/MessageSelector.php at line 78   \n    $position = PluralizationRules::get($number, $locale);\n    if (!isset($standardRules[$position])) {\n        throw new \\InvalidArgumentException('Unable to choose a translation.');\n    }\n    return $standardRules[$position];\n```\n"
            }
        ],
        "pr_comments": [
            "actually the test fixtures did change\n",
            "applied your suggestion @stof \n"
        ],
        "prs": [
            {
                "title": "[DoctrineBridgeBundle] Support of non default entity manager for EntityUserProvider",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | na |\n| Fixed tickets | doctrine/DoctrineBundle#188 |\n| License | MIT |\n\nthis is reference to doctrine/DoctrineBundle#188\n\nTLDR The EntityUserProvider found in DoctrineBridgeBundle only assumes entity to use default EntityManager.\n"
            },
            {
                "title": "[Console] [Enhancement] fixes #5316",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #5316\n"
            }
        ]
    },
    "657357": {
        "repos": [
            "The Symfony2 PHP framework",
            "The PHP Unit Testing framework."
        ],
        "commit_comments": [],
        "commits": [
            "Add `build.xml` to run testsuite in parallel\n\nBased of the work that @ocramius has done to speed up the testsuite\nrunning on travis for zf2!\n\nhttps://github.com/zendframework/zf2/pull/3703",
            "[WIP][RFC] Keep 'old' render behavior. Sign _internal urls instead.",
            "Revert  restricted to only URIs the first argument of the render tag \n\nThis reverts commit 64d43c806bc1c00dda536305565d8aaa3d07b699.",
            "Revert  [TwigBundle] added a compatibility layer for the render tag so that the same code can work in both 2.1 and 2.2 \n\nThis reverts commit a5e1c4a65736a15e849ea90f3d360db2547273f6.",
            "Revert  [FrameworkBundle] restricted to only URIs the first argument of the actions helper \n\nThis reverts commit 3341c8ec43ba89ba67623d502471c546961a55ac.",
            "[Yaml] Add test showing that dates before 01 Jan 1970 are correctly parsed",
            "[Process] Update changelog + test for `ProcessBuilder#setArguments()`",
            "[Process] Add ability to reset arguments on ProcessBuilder",
            "[Security] Move translations file to 'security' domain",
            "[Security] Switch to English messages as message keys",
            "[Security] Change signature of `AuthenticationException` to match `\\Exception`",
            "[Security] Add `getMessageKey` and `getMessageData` to auth exceptions",
            "[Security] Add initial translations for the exceptions",
            "[Security] Fix AuthenticationException constructor calls",
            "[Security] Fix AuthenticationServiceException constructor calls",
            "[Security] Fix InsufficientAuthenticationException constructor calls",
            "[Security] Add custom `getMessageKey` AccountStatusException childs",
            "[Security] Add initial translations for AccountStatusException childs",
            "[Security] Fix exception constructors called in `UserChecker`",
            "[FrameworkBundle] Register security exception translations",
            "[Security] Add note about changed constructor to changelog",
            "[Security] Removed `get/setExtraInformation`, added `get/set(Token|User)`",
            "[Security] Introduced `UsernameNotFoundException#get/setUsername`",
            "[Security] Fix `AuthenticationException` serialization",
            "[Security] Fix CS + unreachable code",
            "[Form] '@group benchmark' for form performance tests",
            "[Security] Add note to changelog about BC break",
            "[Security] Extract default logout success handling logic",
            "[DoctrineBridge] Fix arguments when registering event listeners on multiple connections\n\nFixes #4712",
            "[DoctrineBridge] Failing testcase for event listeners and multiple connections",
            "[Security] Remove hard dependency on $providerKey for default auth success handler",
            "[Validator] Fix docblocks",
            "[Process] Fix disabling of timeout",
            "[Process] Add failing testcase for disabling timeout (regression)",
            "[Security] Fix regression after rebase. Target url should be firewall dependent",
            "[Form] PropertyPath: Fix reading from custom array object. Fixes #4535",
            "[Form] PropertyPath: Add failing testcase for reading from CustomArrayObject",
            "[Security] Fix retrieval of encoder when configured for concrete classes",
            "[Security] Add failing testcases for EncoderFactory",
            "[HttpKernel] Remove unneeded test class (suggestion by @stof)",
            "[Routing] Fix component 'standalone' testsuite",
            "[Form] Fix component 'standalone' testsuite",
            "[HttpKernel] Fix component 'standalone' testsuite\n\n- Missing dependency in one file\n- Move helper class out of KernelTest because it implemented an\n  interface that depends on another component (thus would crash the\n  testsuite if invoked)",
            "[Security] Add note to CHANGELOG about refactored authentication failure/success handling\n[Security] Various CS + doc fixes\n[Security] Exception when authentication failure/success handlers do not return a response\n[Security] Add authors + fix docblock",
            "[Security] Move default authentication success handling strategy to seperate class\n[Security] Update configuration for changes regarding default success handler\n[Security] Fix + add AbstractFactory test",
            "[Security] Move default authentication failure handling strategy to seperate class\n[Security] Update configuration for changes regarding default failure handler\n[Security] Fixes + add AbstractFactory test for failure handler",
            "[Security] Update AuthenticationFailureHandlerInterface docblock. Never return null",
            "[Config] Numerical keys for prot. arrays if useAttributeAsKey is set",
            "[FrameworkBundle] Make session save path configurable",
            "[Filesystem] Add exists function",
            "Added Numeric comparator",
            "[HttpFoundation] Added RSS HTTP request format",
            "NANs are never equal, fixes #750",
            "[FrameworkBundle] Remove unused variable in TemplateLocator",
            "ResizeDataListener::presetData and ::preBind should should pass data when recreating rows"
        ],
        "issue_comments": [
            "It seems that one test of the Console component is failing. Maybe related to the tty provided by ant I guess? Anyone with more experience in this have any insights in this? @Seldaek maybe?\n",
            "I'll fix all the comments, no fix for the tty problem yet.\nOp 20 apr. 2013 22:35 schreef  Fabien Potencier  notifications@github.com\nhet volgende:\n\n> @asm89 https://github.com/asm89 Are you working on updating this PR?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/symfony/symfony/pull/7708#issuecomment-16710875\n> .\n",
            "@fabpot I haven't been able to figure out the TTY issue. I was hoping\n@Seldaek or some other console expert could take a quick look. If not, I'll\nre-open if I find a fix myself.\n\nOn Thu, Jun 13, 2013 at 10:10 AM, Fabien Potencier <notifications@github.com\n\n> wrote:\n> \n> Any news on this PR. If we cannot make it work (especially for the tty\n> issue), then let's close it for now.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/symfony/symfony/pull/7708#issuecomment-19377765\n> .\n",
            "Have you looked at https://github.com/sonata-project/SonataIntlBundle? It provides these filters and more.\n",
            "How would this work with a dumped container? (php one)\n\nOther than that, interesting to see work on dynamic parameters in the DIC. I'd really like to put database information in for example $_ENV instead of getting it compiled into cache files.\n",
            "@fabpot Nice, looks easy indeed.\n@bschussek Any numbers on the performance of PropertyAccessor? In other places I'm not too worried about using the component, but the dumped container should be super optimized imo.\n",
            ":+1: We indeed get `symfony/symfony` now, as we explicitly rely on `http-kernel: 2.3.*@dev`.\n",
            "Why are the separate branches necessary? Can't the component ship all binary data?\n",
            "Is that size really a problem? With the caching composer does nowadays a lot of real user installs will come from cache first. If you require a stable release you'll get a zip/tar download. An installation of symfony standard is `157MB` big these days.\n\n``` bash\n/tmp/sf2 $ git clone https://github.com/symfony/symfony-standard.git\\\n/tmp/sf2 $ cd symfony-standard\n/tmp/sf2/symfony-standard (master) $ composer.phar install\n...\n/tmp/sf2/symfony-standard (master) $ du -h --max-depth=1\n0   ./bin\n155M    ./vendor\n128K    ./web\n116K    ./src\n1.1M    ./app\n720K    ./.git\n157M    .\n```\n",
            "@gnutix Example #2 on that page? :)\n",
            "What is the benefit of the lib? Crypt works fine? And the comments on SecureRandom, shouldn't we fix that class instead?\n",
            "@vicb \n\n> What about HInclude, it seems the code has been removed ? (I think I understand but the reason why butit should be > mentionned in your post)\n\nWith signed uris `HInclude` could in theory stay, but it's probably still a bad idea. There could be another way of rendering hinclude tags with routes imo.\n\n> Not everybody use a RP & HInclude must be accessible to the outside world.\n\nYes, so adding HInclude was one of the things that fully opened up a security hole it seems. It would be nice however to attempt to fix it. :)\n\n> And one last but important q, why would using a controller be better than using a path ?\n\nNot having to create a route for every single controller action? Why should a controller action be tied to the routing system? If you rely on rendering partials, having to add a route for all of them is a real dealbreaker imo (not to mention each partial now has to generate a url, go through the url matcher etc).\n\n---\n\nThe point is that the creation of `_internal` urls and the interpretation of them was broken, but that doesn't mean that rendering partials  `{% render 'BlogBundle:Post:list' with { 'limit': 2} %}`  is suddenly a bad idea. Is it really worth the BC break in a 2.2 version?\n\n@fabpot Any thoughts?\n",
            "@vicb Yes, but since 2.2 is not out yet the complete removal of the feature could still be reverted?\n",
            "@fabpot @vicb #6459 would make it easier to add different rendering strategies indeed, this is very nice. Will it however also re-introduce the `{% render 'BlogBundle:Post:list' with { 'limit': 2} %}` syntax?\n",
            "@fabpot In that case, maybe `render` could still behave as it did in 2.0 and 2.1 and `render_uri` could be added for the now options? Is it really worth breaking BC on this?\n\n@vicb If you're comfortable with it you can e-mail me about this too (iam.asm89 [at] gma...). While I tend to agree with the general feeling that the app will be exposed to brute force attacks when using url signing, in the end this isn't different from your `remember_me` cookie being vulnerable for these kind of attacks (see `TokenBasedRememberMeServices`). Apart from that it's still possible to secure the `_internal` route with for example varnish configuration. \n",
            "Maybe the `GraphvizDumper` can also show something on the edges if a service is  lazy ?\n",
            "How would this work if you want to have: his/her apple(s)?\n",
            "@fabpot You should checkout the related issue #3703. If you want to use form login without CSRF to post from non-symfony pages then users might not already have a symfony session.\n",
            "@fabpot This PR can be closed. I created a ticket here: http://www.doctrine-project.org/jira/browse/DDC-1923.\n",
            "ping @bschussek \n",
            "Cool! You could have worked from my branch. ;) But it seems that you fixed it? I'll close this PR in favor of yours. #4612\n",
            "@fabpot One testcase fails on PHP 5.3.3, but I'm not sure why. Any clues?\n",
            "I also tested this solution, but it failed on the tests I added.\n",
            "Related issue #4553\n",
            "@fabpot @schmittjoh I'd like to refactor this like #4599. If you agree on that I'll work on it and send a PR.\n",
            "I tried it and the test I added still fails. The code change you propose doesn't execute because `if (!isset($v[$this->keyAttribute]) && is_int($k))` will still evaluate to true.\n",
            "Will there be options to somehow keep the debug toolbar 'expanded' or something? I guess the folding of the sf and php information makes sense, but I personally look at the request/time/memory/security and query parts of the toolbar a lot. As my browser window is big enough to show all information at once, this would be a huge step backwards imo.\n",
            "This is probably related: #3227.\n",
            "I agree that it might be an interesting option to add `clearstatcache` calls to the Filesystem component (possible configured in the constructor), but I think this should be done in a separate PR, because all the other functions should be updated too.\n",
            "+1. Having the same 'problem' with oauth2.\n",
            "This PR can not be merged as the validator should use the Doctrine Common ClassMetadata api, but will now be accessing ORM specific properties (breaking mongo/couch). Apart from that it is also broken because there is no check if the entity is indeed STI or has parent classes for other reasons.\n",
            "Haven't thought of it. Can send a PR with the cherry-picked commit.\n",
            "@fabpot yes, that's what I mentioned. Are you cherry-picking that commit to the 2.0 branch? :)\n",
            "+1 on this feature addition. :) It would be another great improvement on the feature-set of the framework!\n",
            "I guess it's a bugfix, but I'm not sure what the behavior was before 3.7. I can rebase onto master if it's considered a BC break. :)\n",
            "No problem. New PR over here: #2803.\n",
            "Ok, you explained it to me a bit on irc. I still think it's counter-intuitive to _not_ pass the data, although it may be available at this point. There is also another pending PR that addresses the issue in a slightly other way: #1461.\n\nFor people with the same issue as me (liking to have the data), have a look at this gist by stof:\nhttps://gist.github.com/ad2bb08714848484226d\n",
            "I think there is one other issue with this PR. The property option is inconsistent with the property option of the 'entity' type. This is confusing?\n\nMore information here:\nhttps://github.com/Gregwar/FormBundle/issues/3\n",
            "Any insights from @fabpot or @bschussek? \n\nI think this is a nice to have for forms interacting with js? Also have a look at the discussion here:\nhttps://github.com/Gregwar/FormBundle/issues/3\n",
            "No chance for a fix for this in 2.1? Quite some people participating in this issue, so I guess there is some demand?\n",
            "@stof: you're right. I was confused because the bug was fixed earlier in HttpFoundation. :)\n\nChanged it!\n",
            "In the commit pointed out here I re-added a numeric comparator with the same behaviour as in phpunit 3.5 (abs + delta behaviour). The `is_nan()` behaviour was kept the same. The behaviour was added in this commit to fix another issue 0173089f. I've checked out the code and it seems the special case that makes two `NAN`s equal to each other ([here](https://github.com/sebastianbergmann/phpunit/commit/0173089f#L0R100)). Was (incorrectly?) modelled after the `is_finite()` check above.\n\nI've send a pull request that passes all current tests and ensures that `NAN`s are never considered equal.\n\nEdit: see #751.\n",
            "It seems that one test of the Console component is failing. Maybe related to the tty provided by ant I guess? Anyone with more experience in this have any insights in this? @Seldaek maybe?\n",
            "I'll fix all the comments, no fix for the tty problem yet.\nOp 20 apr. 2013 22:35 schreef  Fabien Potencier  notifications@github.com\nhet volgende:\n\n> @asm89 https://github.com/asm89 Are you working on updating this PR?\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/symfony/symfony/pull/7708#issuecomment-16710875\n> .\n",
            "@fabpot I haven't been able to figure out the TTY issue. I was hoping\n@Seldaek or some other console expert could take a quick look. If not, I'll\nre-open if I find a fix myself.\n\nOn Thu, Jun 13, 2013 at 10:10 AM, Fabien Potencier <notifications@github.com\n\n> wrote:\n> \n> Any news on this PR. If we cannot make it work (especially for the tty\n> issue), then let's close it for now.\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/symfony/symfony/pull/7708#issuecomment-19377765\n> .\n",
            "+1 on `KernelTestCase` (`#3`)\n",
            "What is the usecase for not updating the model if constraints fail? Maybe the biggest confusion comes from the fact that when calling `$form->isValid()` the data was already bound to the model? Should preventing the model update really be a goal of the form/validation component?\n\nWhen using doctrine2 for example, getting an untouched entity if the form binding fails could/would be something like:\n`if (!$form->isValid()) $entityManager->refresh($model);`\n",
            "Does this belong in core? How about CAS/oauth etc in that case? /cc @schmittjoh \n",
            "Does this belong in core? How about CAS/oauth etc in that case? /cc @schmittjoh \n",
            "Why do you have different user providers for the same user objects? What is the difference between the two?\n",
            "@bschussek Is your idea that the symfony framework should provide the javascript validation implementation?\n",
            "I don't see why this should be provided by core instead of providing it in a bundle? Especially since it probably semi hard to do this while:\n- supporting all important browsers\n- not prescribing some JS library (e.g. jquery, backbone, etc)\n\nI'm also wondering how it would handle custom validators.\n",
            "Have you looked at https://github.com/sonata-project/SonataIntlBundle? It provides these filters and more.\n",
            "@coviex Can you give more information? The reverse engineering process also tries to guess associations from your foreign keys etc. In that case there would be multiple places where you should change `Actors` to `Actor`.\n",
            "I've looked into this and it is possible to set a the cookie from a controller action, but it requires quite some work. You need to:\n- know the name of the firewall you want the rememberme services for\n- alias the service because it is private\n- call the [`RememberMeServicesInterface#loginSuccess()`](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/RememberMe/RememberMeServicesInterface.php#L81) method with a request object, the response that is going to be returned and the active security token\n\nFinally, if your rememberme services are not configured to always set the remember me cookie, you need to  fake  the `remember_me_parameter` because the cookie will not be set otherwise.\n\nAll of this is a tricky, but I personally don't see a straightforward way to make this process a lot easier without refactoring quite a bit (for example, the rememberme services being dependent on a firewall name).\n\n@albyrock87 For your usecase I think you should consider to implement your authentication scheme as an authentication provider. Right now I guess you're doing everything in a controller?\n",
            "@albyrock87 Not sure what you're authenticating against, but I'd like to shamelessly plug [HWIOAuthBundle](https://github.com/hwi/HWIOAuthBundle) which supports facebook/google/twitter etc. ;)\n",
            "@craue What does your code look like for gaining a new role?\n\nI don't think this is a bug btw, but rather a missing feature?\n",
            "I guess this is hard to do, unless priorities or something like it would be introduced. That's probably doable, but where would the responsibility for the priority lie? Can the user configure it or does the implementation provide it?\n",
            "With the proposal of @Seldaek, how does this work? If you don't have the dep you cannot validate emails?\n",
            "Isn't the whole point of composer and packagist that it's easy to use the deps you want? Why add a hard dependency to an external lib while you can also point users to it? Add the hard dep in the symfony standard edition to teach developers sane defaults.\n",
            "@fabpot Why does a hard dep on an external email validator in the `symfony/validator` make sense? I think there are enough use cases for using the component without then need for validating an email address?\n",
            "@lsmith77 The proxies are also very useful for lazy-loading services. Changing the proxied object using this synchronized approach seems very in-transparent for me.\n",
            "@bartfeenstra Dates before 1970 are represented by negative numbers. See the PR I created with a test showing that dates before 1970 work.\n\nAre you having issues with this?\n",
            ":+1: and great idea of putting it in the debug toolbar\n",
            "-1 for adding AOP as dep\n",
            "What I like about the RFC is that the `trigger_error()` could be in the components themselves. It requires some work, but also component users will see the deprecation messages.\n",
            "There is also a CacheBundle implementation pending here: #3225.\n",
            "What does this component add over integrating doctrine/common? (Or Stash?)\n\nWhile I somewhat understand the  need  of a `CacheInterface` that can be used in the Symfony components without adding 3rd party dependencies, I do not see why Symfony should implement all the caching drivers by itself. If a general interface is added the component could have adapters to libraries like doctrine/common and Stash. Note that symfony/frameworkbundle already has a dependency on doctrine/common.\n\nAn earlier PR by @beberlei only implemented the `ApcCache` to implement the `ApcUniversalClassLoader` with it, but the PR can easily be extended to encourage the adapter approach: #3211. Of course there is also discussion on the original issue: #1513.\n\nLet me ping @tedivm too. :)\n",
            "The component would suggest Stash or doctrine/common for the adapters. That's is probably no problem at all because in practice the frameworkbundle already has a dependency on doctrine/common and as soon as you start using anything with annotations, dbal or one odm/orm etc you will also have doctrine/common already.\n\n+1 on your efforts to move this stuff forward btw :) I didn't state that before I see :)\n",
            "No, `false` is not a type, where boolean / string / integer / ... etc are. :)\n",
            "Or just `@inheritDoc`?\n\nOn Fri, Sep 14, 2012 at 9:41 AM, Pascal Borreli notifications@github.comwrote:\n\n> please reopen.. it should be\n> \n> @return Boolean always false in that case\n> \n> \u2014\n> Reply to this email directly or view it on GitHubhttps://github.com/symfony/symfony/issues/5495#issuecomment-8553784.\n",
            "ping @schmittjoh\n",
            "@schmittjoh I removed the `get/setExtraInformation` and added the more explicit getters/setters as you suggested.\n",
            "@fabpot Did you reschedule this for 2.2? Why? It was originally a 2.1 ticket. I think it is an important one because at the moment there is no reliable way to show users the cause of an `AuthenticationException` without the threat of exposing sensitive information. This issue has been around for a while, see the original issue this PR refers to, or for example [this TODO comment in FOSUB](https://github.com/FriendsOfSymfony/FOSUserBundle/blob/master/Controller/SecurityController.php#L37).\n\nThe PR itself is ready to merge now. My only question that remains is about whether the actual translations should be functional tested?\n",
            "@fabpot I totally agree with your point of view. I just have been trying to pickup some security issues that were still open. :)\n",
            "Since the beta period is over I assume the window was missed to get this security related PR in 2.1. If I have feedback from @fabpot I'll still try to make it mergeable asap though.\n",
            "I can pick this up, but I have two outstanding questions:\n- One about adding `::create()`? https://github.com/symfony/symfony/pull/4935#discussion_r1358297\n- And what is the final verdict on the messages? https://github.com/symfony/symfony/pull/4935#discussion_r1165701 The initial idea was that the exception itself have an exception message which is plain english and informative for the developer. If you want to display the 'safe' user messages you have the optional dependency on the translator. There is a comparison made with the Validator component, but in my opinion that's a different case because the violations always contain the message directed at the user and have no plain english message for the developer. Apart from that the Validator component contains it's own code for replacing `{{ }}` variables in messages (duplication? not as flexible as the translator). Concluding I'd opt for: optional dependency on translator component if you want to show 'safe' user messages + message keys.\n\n@schmittjoh Any things to add?\n",
            "Any final decision on this? On one hand I have @stof and @schmittjoh +1 on message keys, on the other @fabpot -1. I guess it's your call @fabpot.\n\nEdit: also @vicb seemed to be +1 on message keys earlier on.\n",
            "@fabpot Can you please give a definite answer on this? I personally think @stof and @vicb have good points to do message keys, but with all these different people +1 and -1'ing the PR I'm lost on what it should actually do.\n",
            "ping @fabpot \n",
            "ping @fabpot We talked about this in Berlin. Any final thoughts on the PR? :) One idea was to do message keys + opt depend on the translator component if you want to use them, or use your own implementation.\n",
            "@fabpot @vicb I'll rebase this PR, fix the comments and refactor the message keys to use plain English + {{ }} syntax for the placeholders.\n",
            "@fabpot If I fix this tonight, will it make the beta?\n",
            "@fabpot I switched the implementation to English messages instead of message keys and fixed the final comments + rebased. Anything you want me to do after this?\n\nStill happy with `getMessageKey()`?\n",
            "ping @fabpot :)\n",
            "Thanks! :)\n",
            "@stof Done :)\n",
            "@fabpot Done.\n",
            "How is your listener `acme.security.authentication.listener.openid` defined? It should be defined as abstract. Refer to the discussion here: #4837.\n",
            ":+1: This also fixes the same issue on linux\n",
            "@suxxes Your listener definition should be abstract. A security listener definition should not be an actual definition. Your factory will setup the actual listener definition for a specified firewall id.\n\n@fabpot I don't think this is an actual bug. The security listener definitions should be abstract? #4599 adds new dependencies to other abstract services, that is why the DIC complains now, but it did not complain before. I guess this can be 'reverted' by not adding the dependencies but add `<argument />` instead, since the factory will replace the arguments anyway. Not sure what would be the right thing to do. If you want to 'revert' the change I'll try it out and send a PR.\n",
            "Your listener definition is used by the security bundle to configure an _actual_ listener for specific firewalls. The definition itself will not be used.\n",
            "@suxxes Yes it worked before, but the fact that the DIC didn't complain was 'luck'. Checkout the [documentation of `AbstractFactory#getListenerId`](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory/AbstractFactory.php#L109). It states:  Subclasses must return the id of the abstract listener template .\n\n@fabpot It is not a bug imo\n",
            "@fabpot This PR can be closed. I created a ticket here: http://www.doctrine-project.org/jira/browse/DDC-1923.\n",
            "@trooney Can you re-open this issue on the [DoctrineBundle](https://github.com/doctrine/DoctrineBundle)? It seems to be a configuration issue. \n\n@tystr Can you open an issue on the [DoctrineMongoDBBundle](https://github.com/doctrine/DoctrineMongoDBBundle)?\n",
            "Ah, my bad. I'm looking into it.\n",
            "@trooney @tystr Can you too check that the issue is fixed now? :)\n",
            "ping @bschussek \n",
            "I will, but I'll first do the same for the failure logic.\n",
            ":+1: thank you @stof. I think this is good to go now.\n",
            "@schmittjoh @fabpot The `LogoutListener` currently throws an exception when the successhandler doesn't return a `Response` ([link](https://github.com/symfony/symfony/blob/9e9519913d2c5e2bef96070bcb9106e1e389c3bd/src/Symfony/Component/Security/Http/Firewall/LogoutListener.php#L101)). Should this code check for this too?\n",
            "@fabpot Can you make a final decision on this? If you decide on point 3, this code can be merged.  I agree with the arguments of @stof about the option handling and it 'only' being a BC break for direct users of the security component. I even think these direct users should be really careful anyway, since the behavior of the success and failurehandlers now change back to how they acted in 2.0.\n\nNow I am thinking about it, can't the optional parameters of this class move to setters anyway? That will make it cleaner to extend.\n",
            "ping @fabpot \n",
            "@fabpot I rebased the PR, added the authors and also ported the fix that was done in 8ffaafa86741a03ecb2f91e3d67802f4c6baf36b to be contained in the default success handler. I also squashed all the CS and 'small blabla fix' commits. Is it ok now?\n\nEdit: travisbot will probably say that the tests in this PR fail, but that is because current master fails on form things\n",
            "I rebased the PR, tests are green now: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=refactor-authentication-success-handling)](http://travis-ci.org/asm89/symfony).\n",
            "I've been diving into this. I'll create a separate issue.\n",
            "#4865 address your issue. Be aware that you need to set the options and optionally the `$providerKey` of the parent service in your overriding service, but first the PR has to be approved of course. ;)\n",
            "You are now setting your own service as the success handler. It is your responsibility to set the appropriate options and the providerkey (by overriding the constructor and setting it up there).\n",
            "@Inori It is easier now than it was in 2.0 where you even had to copy over all the code to get the same behaviour.\n",
            "+1 Maybe this holds for some other default behaviour of the AbstractAuthenticationListener too?\n\nBTW I've been thinking about this before when handling with the AbstractAuthenticationListener and if @ShurikAg is fine with it I'd be happy to refactor some stuff and send a PR.\n",
            "I guess the failure logic could also move to a default failure handling class and also some other places in the security system could use this refactoring. Do you agree @schmittjoh ?\n",
            "@jrfish Do you want to work on a PR for this improvement?\n",
            "@vicb I think it can be safely removed from the `AbstractAuthenticationListener`. The [next method called](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/AbstractAuthenticationListener.php#L128) in the sequence is the abstract `attemptAuthentication()` method. Listeners that inherit from the class can check for a previous session in there and throw the appropriate exception if needed. In core the `UsernamePasswordFormAuthenticationListener` would only have to check for that if a csrf provider is [injected](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/UsernamePasswordFormAuthenticationListener.php#L78).\n\nIt would be a BC break though for people implementing their own listeners that _do_ depend on a previous session being active.\n\nIf you want to go through with it I'd be happy to send a PR.\n\n@schmittjoh Am I seeing this correctly?\n",
            "As @stof there is no way to ensure the PDO connection is actually closed on `$connection->close()`. Adding that statement to the command will probably lead to other nasty bugs in the future.\n\nIf you need to setup database data for testing etc I'd recommend looking at for example the [LiipFunctionalTestBundle](https://github.com/liip/LiipFunctionalTestBundle) for loading fixtures.\n",
            "The security system defines the username as being  [some unique user identifier](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/User/UserProviderInterface.php#L20) . The naming might be a bit confusing but you just have to make sure something unique is in there. I guess that in your case it would be some userid of the webservice.\n\nThe `refreshUser` function only acts as a function to literally refresh the user object. It is up to you how you implement it. You can decide that returning the object is enough, reload it from the database or check with the webservice that the user is still valid.\n",
            "Using the `{_locale}` placeholder in the host would set the locale for the request just like it does now?\n\nAnother thing I'm wondering is how/if it should be possible to set the hostname pattern for all your routes, or at least when importing routes? Otherwise you'll end up repeating the same host pattern over and over again. I think this is also important when importing routes from third party bundles.\n",
            "@Koc Have you looked at the [JMSI18nRoutingBundle](https://github.com/schmittjoh/JMSI18nRoutingBundle)? It supports different hosts for different locales and generates and matches routes accordingly. Not sure if it is what you need, but it may be useful. :)\n",
            "Note that `{'standalone': true}` takes care of esi-tags being generated. Without standalone it still the _ESI_ implementation of Symfony that's handling the request, so ESI is used no matter what.\n\nWhat would you recommend as an alternative? The whole point was to allow for more transparent switching of ESI implementation (so it doesn't matter if you use varnish, squid or symfony, they all do the same). An object manager like Doctrine already has your object from the previous request if you use ESI without standalone, so this isn't a very big issue?\n",
            "Sorry if I was being unclear, but without `standalone` it is still symfony mimicking ESI behaviour. Even subrequests etc can be cached if I'm correct?\n\nEdit: https://github.com/symfony/HttpKernel/blob/master/HttpCache/Esi.php\n",
            "I agree that securing controller actions is superior, but that isn't provided in core?\n\nIn 2.1 the Router listener got a higher priority than the security firewall, so it could be possible to configure access_control rules with routes.\n\nI don't get really your i18n argument (yet). Since securing i18n paths with the current possibilities in core is also quite cumbersome. When I think about your i18nRoutingBundle matching access_control rules on route names would probably very feasible.\n",
            "One way or the other, it seems to be related to this bug in php:\nhttps://bugs.php.net/bug.php?id=55156\n\nNot sure why it is surfacing now? Maybe @schmittjoh knows more about it?\n",
            "I think there is one other issue with this PR. The property option is inconsistent with the property option of the 'entity' type. This is confusing?\n\nMore information here:\nhttps://github.com/Gregwar/FormBundle/issues/3\n",
            "Any insights from @fabpot or @bschussek? \n\nI think this is a nice to have for forms interacting with js? Also have a look at the discussion here:\nhttps://github.com/Gregwar/FormBundle/issues/3\n",
            "No chance for a fix for this in 2.1? Quite some people participating in this issue, so I guess there is some demand?\n",
            "@vicb This issue is fixed then?\n",
            "+1 on this, I think it counter-intuitive to not have the data passed while it's available. I created a PR that achieves the same result (I wasn't aware of this one), but without the option here: #2222.\n",
            "@JeppeMariager look over here: https://github.com/symfony/symfony/pull/2222#issuecomment-2146015.\n\nQuote:  For people with the same issue as me (liking to have the data), have a look at this gist by stof:\nhttps://gist.github.com/ad2bb08714848484226d \n",
            "+1 on this, I think it counter-intuitive to not have the data passed while it's available. I created a PR that achieves the same result (I wasn't aware of this one), but without the option here: #2222.\n",
            "@JeppeMariager look over here: https://github.com/symfony/symfony/pull/2222#issuecomment-2146015.\n\nQuote:  For people with the same issue as me (liking to have the data), have a look at this gist by stof:\nhttps://gist.github.com/ad2bb08714848484226d \n",
            "+1 for something like `Form::BIND_PARTIAL` that will be very useful for things like PATCH requests indeed.\n",
            "I wrote some tests and a fix before. I only pushed the tests, since AurelC2G seems to have fixed the issue.  See PR #1288 for the tests.\n\nThe only thing I was wondering, shouldn't the default charset still be set in the constructor of Response.php? The current version doesn't have responses with getCharset() === null. I thought that was intended behaviour?\n",
            "@AurelC2G: Yes, and your commit fixes the issue described (see the tests, they fail on master and succeed on your patch!). :)\n\nThe only question I have is: in master $response->getCharset() will _always_ return a charset. I thought that maybe that was intended behavior. If that's the case, then the ResponseListener would require some change.\n"
        ],
        "issues": [
            {
                "title": "Alias to an alias",
                "body": "We are potentially interested in exposing parts of our Elasticsearch cluster to the Internet. The idea is to do authentication in Varnish before we hit the actual backend. With the authentication done we do want to limit the accessible documents on a per customer basis.\n\nWith [Filtered Aliases](http://www.elasticsearch.org/guide/reference/api/admin-indices-aliases/) it is possible to create an alias for an existing index and add additional filters to each request. It is possible to create such an index alias for every customer in our system. When a request comes in we use Varnish to rewrite the original request URL to include the customer id returned by the authentication backend. Simplified example:\n\n```\nClient\n   | /jobs/123\n   v\nVarnish\n   | /{customerId}/jobs/123\n   v\nElasticsearch\n```\n\nIn our current setup we already use aliases in order to do live reindexing. We have an alias `production_jobs` pointing to an index `production_jobs_1368699241`. We can swap the alias to another index without noticeable downtime for our users. It would be great if the setup described above could also leverage this pattern, but now by pointing the alias for a customer to the production index alias. In that case we would only have to update the alias as we do now, instead of doing it for every customer specific alias.\n"
            },
            {
                "title": "NANs are never equal, fixes #750",
                "body": ""
            },
            {
                "title": "Added Numeric comparator (to retain BC?)",
                "body": "In the new 3.6.0 release, the behavior of assertEquals with a delta parameter seems to have changed. I believe there are two things that changed:\n\n1) The new release only allows for floats/doubles to be compared with a delta, whereas the previous stable release 3.5.15 allowed all numeric values to be compared with a delta.\nThe 'old' version actually had a numericComparison for it, instead of the new Double comparator:\nhttps://github.com/sebastianbergmann/phpunit/blob/3.5.15/PHPUnit/Framework/Constraint/IsEqual.php#L292\nhttps://github.com/sebastianbergmann/phpunit/blob/3.5.15/PHPUnit/Framework/Constraint/IsEqual.php#L363\n\n2) The delta parameter seems to be handled in a slightly different way:\nThe older version would return success if `abs($expected - $actual) <= $delta`\nhttps://github.com/sebastianbergmann/phpunit/blob/3.5.15/PHPUnit/Framework/Constraint/IsEqual.php#L368\n\nThe newer version will return success if `abs($expected - $actual) < $delta` (it fails if `abs($expected - $actual) >= $delta`):\nhttps://github.com/sebastianbergmann/phpunit/blob/master/PHPUnit/Framework/Comparator/Double.php#L110\n\n---\n\nI'm not sure if this is an intentional BC break, or even a BC at all? There is nothing mentioned about it in the changelog. I've  found  the BC break with testsuites that suddenly had failing tests...\n\nIf it was not intentional please review the patch that I've attached.\n"
            },
            {
                "title": "[WIP] Add `build.xml` to run testsuite in parallel",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nBased of the work that @ocramius has done to speed up the testsuite\nrunning on travis for zf2! https://github.com/zendframework/zf2/pull/3703\n\nOn my laptop a full run of the testsuite goes from 1m 36s to 36s. This way we also occupy travis-ci less. :)\n"
            },
            {
                "title": "Fix typos in README",
                "body": ""
            },
            {
                "title": "[WIP][RFC] Signed internal uris",
                "body": "Recently a security issue with the `_internal` uris of the FrameworkBundle led to the removal of the ability to directly render partials with controller actions, e.g. `{% render 'BlogBundle:Post:list' with { 'limit': 2} %}`. For me, people around me and probably other developers this mechanism was a big plus of Symfony2, because it was very easy to enable rendering these partials as `standalone` and get all the nice features of Varnish/esi.\n\nWith this pull request I propose to revert to the  old  render behavior, but only remove the `/_internal_public` route and secure the `/_internal` route by signing the url. The implementation in this PR is far from finished, but I'm looking for comments.\n\nThe complete removal of the feature should not have happened in my opinion, because not everyone relies on solely the routing firewall for security (annotations/aop, access checks in controllers, etc). Furthermore, if you do not use ESI, `_internal` uris will never be generated! Finally there are also other ways to make sure that `_internal` urls are only requested by your reverse proxy (e.g. Varnish) and are not accessible for the outside world.\n\nThere is also a POC by @fabpot that will allow for different rendering strategies if merged (#6459). The signed urls could also be a separate rendering strategy, but then it would still be useful to be able to do things like `{% render 'BlogBundle:...%}`.\n"
            },
            {
                "title": "[Yaml] Add test showing that dates before 01 Jan 1970 are correctly parsed",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nAdds a test related to issue #6275, showing that the Yaml inline parsing supports ISO 8601 dates before 1980.\n"
            },
            {
                "title": "[Process] Add ability to reset arguments on ProcessBuilder",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis PR adds the ability to  reset  the arguments set on a `ProcessBuilder`. This allows the builder to be re-used without having to set things like custom environment variables, current working directory etc again.\n"
            },
            {
                "title": "[2.2][Security] AuthenticationException enhancements",
                "body": "Bug fix: semi\nFeature addition: yes\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=issue-837)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: #837\nLicense of the code: MIT\n\nThis PR adds the functionality discussed in #837 and changes the constructor of the `AuthenticationException` to match that of `\\Exception`. This PR will allow developers to show a translated (save) authentication exception message to the user. :)\n\n_Todo:_ \n- Add some functional test to check that the exceptions can indeed be translated?\n- Get feedback on the current English messages\n"
            },
            {
                "title": "[Form] '@group benchmark' for form performance tests",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=form-performance)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nI think a PR or note about this has been rejected before, but since build statuses on PRs sometimes seem to fail if travis is busy I think moving the form performance tests to `@group benchmark` should be reconsidered.\n\nEdit: even master is currently failing on this\n"
            },
            {
                "title": "[Security] Extract default logout success handling logic",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: yes, small one for people using the component\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=default-logout-success-handler)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nAs discussed earlier with @fabpot and @schmittjoh. This PR extracts the default logout success handling logic to a separate class that users can extend.\n\nNote: build status is red, but that is because of a failing performance test in the form component? ..\n"
            },
            {
                "title": "[DoctrineBridge] Fix arguments when registering event listeners on multiple connections",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=issue-4712)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: #4712\nLicense of the code: MIT\n"
            },
            {
                "title": "[Security] Remove hard dependency on $providerKey for default auth success handler",
                "body": "Bug fix: yes?\nFeature addition: yes?\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-default-auth-successhandler-extension)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nIn 8ffaafa86741a03ecb2f91e3d67802f4c6baf36b a hard dependency was introduced between the default authentication success handling code and the active firewall. This makes sense. However, for people implementing their own success handler this makes it impossible to extend the default class as the `$providerKey` is set in the extension of the security bundle.\n\nThis PR makes the dependency a soft one so people can extend the class and use the default definition as a parent for their own service. However it is the responsibility of the developers to set the appropriate `$providerKey` if they want to use the target url saved in the session. Imo this is the right way as the developer should also set the appropriate options for the parent class in the overriding constructor.\n"
            },
            {
                "title": "[Security] Fix the default authentication handlers config definition",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-security-default-authentication-handlers-config)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nOptions should be a collection, when you use the default handler definition as a parent you will get an error that the argument of the constructor is a string and not an array, because for your own service the extension of the security bundle will not replace the arguments.\n"
            },
            {
                "title": "[Validator] Fix docblocks",
                "body": ""
            },
            {
                "title": "[Process] Process disable timeout",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=process-disable-timeout)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\n50109ebcc20ae410d4602460dc933b1e067a959f re-introduces the ability to disable the timeout on a process, but the commit is incomplete. This PR adds tests + fixes it.\n"
            },
            {
                "title": "[Form] PropertyPath readValue fails for custom array objects",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=issue-4535)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR addresses issue #4535. I added previously failing tests and a possible fix for the issue. It re-introduced a 'special-case' for real `arrays`. I'd like to have feedback from @bschussek.\n\nTravis will possible say this PR fails after merge because current symfony-master is failing.\n"
            },
            {
                "title": "Fix security encoder factory",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-security-encoder-factory)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR adds two testcases + a fix for the retrieval of an encoder from the `EncoderFactory`.\n"
            },
            {
                "title": "Fix component testsuites",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-component-testsuites)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThe testsuites of some components would crash when running them seperately (from their own directory for example). This PR fixes that by skipping some additional tests if dependencies for the test aren't met. In the case of `HttpKernel` there was also a helper class in `KernelTest` that is now moved to it's own file. This was needed because the class implemented the `BundleInterface`, which depends on the `DependencyInjection` component. The autoloader would then crash the complete test suite.\n\nI sent this PR to the `master` branch since the tests have been moved and splitted some while ago, before it wasn't really possible to have this situation. If for maintainability reasons it should still be send to the 2.0 branch, let me know!\n"
            },
            {
                "title": "[Security] Refactor authentication success handling",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=refactor-authentication-success-handling)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR extracts the default authentication success handling to its own class as discussed in #4553. In the end the PR will basically revert #3183 (as suggested by @schmittjoh) and fix point one of #838.\n\nThere are a few noticeable changes in this PR:\n- This implementation changes the constructor signature of the `AbstractAuthentictionListener` and `UsernamePasswordFormAuthenticationListener` by making the `AuthenticationSuccessHandler` mandatory (BC break). If this WIP is approved I will refactor the failure handling logic too and then this will also move one place in the constructor\n- This PR reverts the change of making the returning of a `Response` optional in the `AuthenticationSuccessHandlerInterface`. Developers can now extend the default behavior themselves\n\n@schmittjoh Any suggestions? Or a +1 to do the failure logic too?\n"
            },
            {
                "title": "[Config] Numerical keys for prot. arrays if useAttributeAsKey is set",
                "body": "Bug fix: not sure\nFeature addition: not sure\nBackwards compatibility break: not sure\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=numeric-keys-config)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nWhen using an array node with children of prototype array and `useAttributeAsKey`, using numerical values for the keys throws an exception. For example (`useAttributeAsKey('id')`):\n\n``` php\n<?php\n// works\narray (\n    'thing' => array(\n        array('foo', 'bar', 'id' => 'a')\n    )\n);\n\n// works and is the same as above\narray (\n    'thing' => array(\n        'a' => array('foo', 'bar')\n    )\n);\n\n// works\narray(\n    'thing' => array(\n        array('foo', 'bar', 'id' => 42), array('baz', 'qux', 'id' => 1337),\n    ),  \n);\n\n// works with this patch and is the same as above\narray(\n    'thing' => array(\n        42 => array('foo', 'bar'), 1337 => array('baz', 'qux'),\n    ),  \n);\n```\n"
            },
            {
                "title": "[FrameworkBundle] Make session save path configurable",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=configurable-session-save-path)](http://travis-ci.org/asm89/symfony)\n\nMakes it possible to configure the session save path. It still defaults to saving sessions in the kernel cache dir. This might not be appropriate if you want to keep your user sessions after deploying your application.\n\nAs promised to @fabpot I will also do a PR on the docs explaining why this might be useful.\n"
            },
            {
                "title": "[FrameworkBundle] Subrequests should always use GET method",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: maybe?\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=subrequest-request-method)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: -\nTodo: -\n\nWhen generating a subrequest using the bundle/controller notation instead of a url, the method of the duplicated subrequest isn't set to GET, while this does happen in the other case (see [here](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/HttpKernel.php#L143)). This causes weird behavior when embedding actions with forms on a page that is already reached through a POST request (since most forms check if POST was the request method before binding to the request).\n"
            },
            {
                "title": "[Filesystem] Add exists function",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=filesystem-exists)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: -\nTodo: -\n\nThe function itself is very trivial. I think it's still useful in the filesystem component, because it will be easier to mock the filesystem for classes that depend on it (instead of using the `Filesystem#remove` etc functions, but then falling back to `file_exists`, which can't be mocked (easily)).\n"
            },
            {
                "title": "Fix small typos in IcuResFileDumper",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Added RSS HTTP request format (in 2.0)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThe RSS HTTP request format was added to the master branch some while ago: #2096.\n\nCan we also have it in the 2.0 releases? Please see the arguments of the previous PR.\n"
            },
            {
                "title": "[BrowserKit] CookieJar can't parse multiple cookies from Set-Cookie",
                "body": "`CookieJar::updateFromResponse()` assumes that each `Set-Cookie` header contains only one cookie:\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Component/BrowserKit/CookieJar.php#L97\n\nThis is wrong since the following is a valid header defining three cookies (foo=1, bar=2, PHPSESSID=id):\n`Set-Cookie: foo=1; expires=Fri, 13 Jan 2012 11:04:36 GMT; domain=.example.org, bar=2; expires=Fri, 13 Jan 2012 11:04:36 GMT; domain=.example.org, PHPSESSID=id; expires=Fri, 13 Jan 2012 11:04:36 GMT`\n\nAnother error is that this header is parsed to a cookie `foo` with domain `.example.org, bar=2`.\n"
            },
            {
                "title": "[FrameworkBundle][HttpKernel] Symfony esi handling allows objects to be passed as parameters",
                "body": "The framework has support for rendering  esi  tags. The internal implementation allows to pass objects as parameters of render standalone tags. This is a problem, because if you switch to a real reverse proxy, the objects in the parameters will be nullified.\n\nI think this behavior should be changed to allow users to switch more transparently between a real reverse proxy and the symfony2 implementation.\n\nThe problem probably lies in the generation of the _internal uri. The code uses the `http_build_query()` method that will not include objects with no public fields: https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/HttpKernel.php#L188. Parameters should only be scalars?\n"
            },
            {
                "title": "[FrameworkBundle] Remove unused variable in TemplateLocator",
                "body": "2.0 version of #2799\n"
            },
            {
                "title": "[FrameworkBundle] Remove unused variable in TemplateLocator",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no (99% sure)\nSymfony2 tests pass: no (currently some Locale\\Stub* tests fail for me on latest master, all the rest succeeds)\nFixes the following tickets: -\n\nUnused class field that survived an earlier refactor by @fabpot. Not 100% sure about BC break or not since the field is protected (could be used in subclasses?), but unused in the current code.\n"
            },
            {
                "title": "ResizeDataListener::presetData and ::preBind don't pass data to recreated row",
                "body": "ResizeDataListener::presetData and ::preBind could/should pass data to $this->factory->createNamed(...) when recreating rows. This makes the data object available in the $options['data'] variable in the form class.\n\nThe 'createNamed' function was introduced in:\nhttps://github.com/symfony/symfony/commit/a97366fbcb75d96bc53916732580c4b88784cad2#diff-0\n\nIs there a special reason why the value isn't passed as data? I figured it's a bug.\n\nThis commits addresses the issue and updates the tests.\n"
            },
            {
                "title": "[HttpFoundation] Fixed incorrect ServerBag comment",
                "body": ".\n"
            },
            {
                "title": "[DomCrawler] Fixed handling of relative query strings as links",
                "body": "The link object concatenates links containing only a query string to the current URI. This shouldn't happen if the current URI already contains a query string.\n\nThis PR fixes the incorrect behavior (tests included).\n"
            },
            {
                "title": "[HttpKernel] Added tests for non UTF-8 content types.",
                "body": "Tests to check that #1281 is fixed and to prevent regression in the\nfuture.\n"
            }
        ],
        "pr_comments": [
            "If you're using the class directly you can now use `Builder::create(...)->path(...)`. That's a common use case for builder classes like this.\n",
            "Agreed. I'll revert that.\n",
            "Any suggestions?\n",
            "So only this particular exception?\n",
            "Others agree on this too? I'll refactor it (including removing the `security.` prefix from all keys).\n",
            "@fabpot So the message keys are fine? The way @vicb described it was exactly the idea.\n",
            "@fabpot Any preference in this? The patch works fine without the `::create()`, but I can add and implement `::create()` too.\n",
            "@weaverryan I think @Tobion literally means shouldn't it be  are  instead of  is  in `There is %%count%% apples`. ;)\n",
            "I only moved it out of the original `KernelTest` class. I'll try to remove it.\n",
            "It was not needed indeed. I think it was a 'leftover' from when there was no `BundleInterface` yet (?).\n",
            "Good catch. They should all be protected since the class is designed to be extended. I'll update it.\n",
            "Those methods do more than just calling the default failure/success handlers (also events, resetting tokens etc etc). For clarity it's nice to keep them separate imo.\n",
            "The contract of the class has changed as the handlers aren't optional anymore. I wasn't aware of the fact that you could have required parameters  after  optional ones.\n\nSo the options now are:\n1) BC break and change the order of the arguments\n2) Smaller BC break: only remove the `= null` from the constructor. People will still have to update their project to inject the failure/success handlers\n3) No BC break by instantiating the handlers when they're not passed\n\n@schmittjoh For the third option, how would passing the options for the handlers work? I guess the listener gets them all and passes them all?\n@fabpot Any preference?\n",
            "I know. So the BC break would then be that there are 3 extra required parameters, but no change of order. The last option wouldn't require a BC break at all I guess.\n",
            "It's probably better to use `curl -s http://getcomposer.org/installer | php`. The installer will do some basic checks and do things like retrying to download `composer.phar` (since that sometimes fails while the new .phar is built).\n",
            "That will also allow other sources (PATH and COOKIE). Sure you want to add those too?\n\nAlso `$request->get()` is slow, as per the notice here: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Request.php#L460. On the other hand it is only run on login success.\n",
            ":thumbsup:\n",
            "Why not a simple check for `null`? As the provider is injected in the constructor the object will be type hinted?\n\nIs this to guard against people doing crazy things while extending the class?\n",
            "+1\n",
            "Why the ternary operator here?\n",
            "There should be no space between the method name and the parenthesis.\n",
            "If you're using the class directly you can now use `Builder::create(...)->path(...)`. That's a common use case for builder classes like this.\n",
            "If you're using the class directly you can now use `Builder::create(...)->path(...)`. That's a common use case for builder classes like this.\n",
            "If you're using the class directly you can now use `Builder::create(...)->path(...)`. That's a common use case for builder classes like this.\n",
            "Agreed. I'll revert that.\n",
            "Any suggestions?\n",
            "Why not a simple check for `null`? As the provider is injected in the constructor the object will be type hinted?\n\nIs this to guard against people doing crazy things while extending the class?\n"
        ],
        "prs": [
            {
                "title": "[WIP] Add `build.xml` to run testsuite in parallel",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | n/a |\n| License | MIT |\n| Doc PR | n/a |\n\nBased of the work that @ocramius has done to speed up the testsuite\nrunning on travis for zf2! https://github.com/zendframework/zf2/pull/3703\n\nOn my laptop a full run of the testsuite goes from 1m 36s to 36s. This way we also occupy travis-ci less. :)\n"
            },
            {
                "title": "Fix typos in README",
                "body": ""
            },
            {
                "title": "[WIP][RFC] Signed internal uris",
                "body": "Recently a security issue with the `_internal` uris of the FrameworkBundle led to the removal of the ability to directly render partials with controller actions, e.g. `{% render 'BlogBundle:Post:list' with { 'limit': 2} %}`. For me, people around me and probably other developers this mechanism was a big plus of Symfony2, because it was very easy to enable rendering these partials as `standalone` and get all the nice features of Varnish/esi.\n\nWith this pull request I propose to revert to the  old  render behavior, but only remove the `/_internal_public` route and secure the `/_internal` route by signing the url. The implementation in this PR is far from finished, but I'm looking for comments.\n\nThe complete removal of the feature should not have happened in my opinion, because not everyone relies on solely the routing firewall for security (annotations/aop, access checks in controllers, etc). Furthermore, if you do not use ESI, `_internal` uris will never be generated! Finally there are also other ways to make sure that `_internal` urls are only requested by your reverse proxy (e.g. Varnish) and are not accessible for the outside world.\n\nThere is also a POC by @fabpot that will allow for different rendering strategies if merged (#6459). The signed urls could also be a separate rendering strategy, but then it would still be useful to be able to do things like `{% render 'BlogBundle:...%}`.\n"
            },
            {
                "title": "[Yaml] Add test showing that dates before 01 Jan 1970 are correctly parsed",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nAdds a test related to issue #6275, showing that the Yaml inline parsing supports ISO 8601 dates before 1980.\n"
            },
            {
                "title": "[Process] Add ability to reset arguments on ProcessBuilder",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis PR adds the ability to  reset  the arguments set on a `ProcessBuilder`. This allows the builder to be re-used without having to set things like custom environment variables, current working directory etc again.\n"
            },
            {
                "title": "[2.2][Security] AuthenticationException enhancements",
                "body": "Bug fix: semi\nFeature addition: yes\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=issue-837)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: #837\nLicense of the code: MIT\n\nThis PR adds the functionality discussed in #837 and changes the constructor of the `AuthenticationException` to match that of `\\Exception`. This PR will allow developers to show a translated (save) authentication exception message to the user. :)\n\n_Todo:_ \n- Add some functional test to check that the exceptions can indeed be translated?\n- Get feedback on the current English messages\n"
            },
            {
                "title": "[Form] '@group benchmark' for form performance tests",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=form-performance)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nI think a PR or note about this has been rejected before, but since build statuses on PRs sometimes seem to fail if travis is busy I think moving the form performance tests to `@group benchmark` should be reconsidered.\n\nEdit: even master is currently failing on this\n"
            },
            {
                "title": "[Security] Extract default logout success handling logic",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: yes, small one for people using the component\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=default-logout-success-handler)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nAs discussed earlier with @fabpot and @schmittjoh. This PR extracts the default logout success handling logic to a separate class that users can extend.\n\nNote: build status is red, but that is because of a failing performance test in the form component? ..\n"
            },
            {
                "title": "[DoctrineBridge] Fix arguments when registering event listeners on multiple connections",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=issue-4712)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: #4712\nLicense of the code: MIT\n"
            },
            {
                "title": "[Security] Remove hard dependency on $providerKey for default auth success handler",
                "body": "Bug fix: yes?\nFeature addition: yes?\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-default-auth-successhandler-extension)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nIn 8ffaafa86741a03ecb2f91e3d67802f4c6baf36b a hard dependency was introduced between the default authentication success handling code and the active firewall. This makes sense. However, for people implementing their own success handler this makes it impossible to extend the default class as the `$providerKey` is set in the extension of the security bundle.\n\nThis PR makes the dependency a soft one so people can extend the class and use the default definition as a parent for their own service. However it is the responsibility of the developers to set the appropriate `$providerKey` if they want to use the target url saved in the session. Imo this is the right way as the developer should also set the appropriate options for the parent class in the overriding constructor.\n"
            },
            {
                "title": "[Security] Fix the default authentication handlers config definition",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-security-default-authentication-handlers-config)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nOptions should be a collection, when you use the default handler definition as a parent you will get an error that the argument of the constructor is a string and not an array, because for your own service the extension of the security bundle will not replace the arguments.\n"
            },
            {
                "title": "[Validator] Fix docblocks",
                "body": ""
            },
            {
                "title": "[Process] Process disable timeout",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=process-disable-timeout)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\n50109ebcc20ae410d4602460dc933b1e067a959f re-introduces the ability to disable the timeout on a process, but the commit is incomplete. This PR adds tests + fixes it.\n"
            },
            {
                "title": "[Form] PropertyPath readValue fails for custom array objects",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=issue-4535)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR addresses issue #4535. I added previously failing tests and a possible fix for the issue. It re-introduced a 'special-case' for real `arrays`. I'd like to have feedback from @bschussek.\n\nTravis will possible say this PR fails after merge because current symfony-master is failing.\n"
            },
            {
                "title": "Fix security encoder factory",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-security-encoder-factory)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR adds two testcases + a fix for the retrieval of an encoder from the `EncoderFactory`.\n"
            },
            {
                "title": "Fix component testsuites",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=fix-component-testsuites)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThe testsuites of some components would crash when running them seperately (from their own directory for example). This PR fixes that by skipping some additional tests if dependencies for the test aren't met. In the case of `HttpKernel` there was also a helper class in `KernelTest` that is now moved to it's own file. This was needed because the class implemented the `BundleInterface`, which depends on the `DependencyInjection` component. The autoloader would then crash the complete test suite.\n\nI sent this PR to the `master` branch since the tests have been moved and splitted some while ago, before it wasn't really possible to have this situation. If for maintainability reasons it should still be send to the 2.0 branch, let me know!\n"
            },
            {
                "title": "[Security] Refactor authentication success handling",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=refactor-authentication-success-handling)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nThis PR extracts the default authentication success handling to its own class as discussed in #4553. In the end the PR will basically revert #3183 (as suggested by @schmittjoh) and fix point one of #838.\n\nThere are a few noticeable changes in this PR:\n- This implementation changes the constructor signature of the `AbstractAuthentictionListener` and `UsernamePasswordFormAuthenticationListener` by making the `AuthenticationSuccessHandler` mandatory (BC break). If this WIP is approved I will refactor the failure handling logic too and then this will also move one place in the constructor\n- This PR reverts the change of making the returning of a `Response` optional in the `AuthenticationSuccessHandlerInterface`. Developers can now extend the default behavior themselves\n\n@schmittjoh Any suggestions? Or a +1 to do the failure logic too?\n"
            },
            {
                "title": "[Config] Numerical keys for prot. arrays if useAttributeAsKey is set",
                "body": "Bug fix: not sure\nFeature addition: not sure\nBackwards compatibility break: not sure\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=numeric-keys-config)](http://travis-ci.org/asm89/symfony)\nLicense of the code: MIT\n\nWhen using an array node with children of prototype array and `useAttributeAsKey`, using numerical values for the keys throws an exception. For example (`useAttributeAsKey('id')`):\n\n``` php\n<?php\n// works\narray (\n    'thing' => array(\n        array('foo', 'bar', 'id' => 'a')\n    )\n);\n\n// works and is the same as above\narray (\n    'thing' => array(\n        'a' => array('foo', 'bar')\n    )\n);\n\n// works\narray(\n    'thing' => array(\n        array('foo', 'bar', 'id' => 42), array('baz', 'qux', 'id' => 1337),\n    ),  \n);\n\n// works with this patch and is the same as above\narray(\n    'thing' => array(\n        42 => array('foo', 'bar'), 1337 => array('baz', 'qux'),\n    ),  \n);\n```\n"
            },
            {
                "title": "[FrameworkBundle] Make session save path configurable",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=configurable-session-save-path)](http://travis-ci.org/asm89/symfony)\n\nMakes it possible to configure the session save path. It still defaults to saving sessions in the kernel cache dir. This might not be appropriate if you want to keep your user sessions after deploying your application.\n\nAs promised to @fabpot I will also do a PR on the docs explaining why this might be useful.\n"
            },
            {
                "title": "[FrameworkBundle] Subrequests should always use GET method",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: maybe?\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=subrequest-request-method)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: -\nTodo: -\n\nWhen generating a subrequest using the bundle/controller notation instead of a url, the method of the duplicated subrequest isn't set to GET, while this does happen in the other case (see [here](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/HttpKernel.php#L143)). This causes weird behavior when embedding actions with forms on a page that is already reached through a POST request (since most forms check if POST was the request method before binding to the request).\n"
            },
            {
                "title": "[Filesystem] Add exists function",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/asm89/symfony.png?branch=filesystem-exists)](http://travis-ci.org/asm89/symfony)\nFixes the following tickets: -\nTodo: -\n\nThe function itself is very trivial. I think it's still useful in the filesystem component, because it will be easier to mock the filesystem for classes that depend on it (instead of using the `Filesystem#remove` etc functions, but then falling back to `file_exists`, which can't be mocked (easily)).\n"
            },
            {
                "title": "Fix small typos in IcuResFileDumper",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Added RSS HTTP request format (in 2.0)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nThe RSS HTTP request format was added to the master branch some while ago: #2096.\n\nCan we also have it in the 2.0 releases? Please see the arguments of the previous PR.\n"
            },
            {
                "title": "[FrameworkBundle] Remove unused variable in TemplateLocator",
                "body": "2.0 version of #2799\n"
            },
            {
                "title": "[FrameworkBundle] Remove unused variable in TemplateLocator",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no (99% sure)\nSymfony2 tests pass: no (currently some Locale\\Stub* tests fail for me on latest master, all the rest succeeds)\nFixes the following tickets: -\n\nUnused class field that survived an earlier refactor by @fabpot. Not 100% sure about BC break or not since the field is protected (could be used in subclasses?), but unused in the current code.\n"
            },
            {
                "title": "ResizeDataListener::presetData and ::preBind don't pass data to recreated row",
                "body": "ResizeDataListener::presetData and ::preBind could/should pass data to $this->factory->createNamed(...) when recreating rows. This makes the data object available in the $options['data'] variable in the form class.\n\nThe 'createNamed' function was introduced in:\nhttps://github.com/symfony/symfony/commit/a97366fbcb75d96bc53916732580c4b88784cad2#diff-0\n\nIs there a special reason why the value isn't passed as data? I figured it's a bug.\n\nThis commits addresses the issue and updates the tests.\n"
            },
            {
                "title": "[HttpFoundation] Fixed incorrect ServerBag comment",
                "body": ".\n"
            },
            {
                "title": "[DomCrawler] Fixed handling of relative query strings as links",
                "body": "The link object concatenates links containing only a query string to the current URI. This shouldn't happen if the current URI already contains a query string.\n\nThis PR fixes the incorrect behavior (tests included).\n"
            },
            {
                "title": "[HttpKernel] Added tests for non UTF-8 content types.",
                "body": "Tests to check that #1281 is fixed and to prevent regression in the\nfuture.\n"
            },
            {
                "title": "NANs are never equal, fixes #750",
                "body": ""
            },
            {
                "title": "Added Numeric comparator (to retain BC?)",
                "body": "In the new 3.6.0 release, the behavior of assertEquals with a delta parameter seems to have changed. I believe there are two things that changed:\n\n1) The new release only allows for floats/doubles to be compared with a delta, whereas the previous stable release 3.5.15 allowed all numeric values to be compared with a delta.\nThe 'old' version actually had a numericComparison for it, instead of the new Double comparator:\nhttps://github.com/sebastianbergmann/phpunit/blob/3.5.15/PHPUnit/Framework/Constraint/IsEqual.php#L292\nhttps://github.com/sebastianbergmann/phpunit/blob/3.5.15/PHPUnit/Framework/Constraint/IsEqual.php#L363\n\n2) The delta parameter seems to be handled in a slightly different way:\nThe older version would return success if `abs($expected - $actual) <= $delta`\nhttps://github.com/sebastianbergmann/phpunit/blob/3.5.15/PHPUnit/Framework/Constraint/IsEqual.php#L368\n\nThe newer version will return success if `abs($expected - $actual) < $delta` (it fails if `abs($expected - $actual) >= $delta`):\nhttps://github.com/sebastianbergmann/phpunit/blob/master/PHPUnit/Framework/Comparator/Double.php#L110\n\n---\n\nI'm not sure if this is an intentional BC break, or even a BC at all? There is nothing mentioned about it in the changelog. I've  found  the BC break with testsuites that suddenly had failing tests...\n\nIf it was not intentional please review the patch that I've attached.\n"
            }
        ]
    },
    "753327": {
        "repos": [
            "The Symfony2 PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "fix #4265 toolbar hiding page content"
        ],
        "issue_comments": [
            "for me that is nice feature\n\n+1\n",
            "Both ways are good. To be clear you set margin not padding in my solution, and adding !important makes this margin overrides any before set body margin bottom. But I think that div will do its job, just add 10px more to its height as currently toolbar has about 10px shadow on hover.\n",
            "you miss the clue\n\nstring '\\L' get stripped from that path, everything else was the same not just '\\' is stripped\n",
            "ok, now everything is clear. so i need to escape it or use single quote?\n"
        ],
        "issues": [
            {
                "title": "fix #4265 toolbar hiding page content",
                "body": "my proposition on fixing this\n"
            },
            {
                "title": "suggestion: webprofiler should not hide bottom page content",
                "body": "atm webprofiler has z-index positive to be over content. this is good but if I have some information in last line of output it is hidden under webprofiler. this could probably be fixed with setting for body margin bottom on height of webprofiler bar.\n"
            },
            {
                "title": "Invalid path resolving in autoloader",
                "body": "When i got such service definition:\n\nservices:\n    imap:\n        class:  Tools\\TFIBundle\\Lib\\ImapMailbox \n\ni have such error:\n\nFatal error: Class 'Tools\\TFIBundle\u2028ib\\ImapMailbox' not found in /home/profarmaceuta/tfitools/app/cache/dev/appDevDebugProjectContainer.php on line 1158\n\nbut when change to:\n\nservices:\n    imap:\n        class:  Tools\\TFIBundle\\Model\\ImapMailbox \n\neverything is ok\n"
            },
            {
                "title": "config.yml autoload for every registered bundle",
                "body": "now we need to import every bundle config.yml file to get bundle configuration in kernel. it will be nice to have kernel search and autoload config files.\n"
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "fix #4265 toolbar hiding page content",
                "body": "my proposition on fixing this\n"
            }
        ]
    },
    "208304": {
        "repos": [
            "The Symfony2 PHP framework",
            "Python HTTP Requests for Humans\u2122."
        ],
        "commit_comments": [],
        "commits": [
            "Fixed quoting issues with Yaml Inline Parser\n\n* Added test parse error in parseQuotedScalar\n  * Expecting to throw tests, previously trimmed string\n  * More details on issue: https://github.com/symfony/symfony/issues/4021\n* Enforces single quote escaping when within string quotes\n  * Shortens the scope of the validation match\n  * Stricter matching rules\n* Ensures double quoted strings are not parsed incorrectly\n* Split quote matching into 2 types of quotes\n  * Separates single and double quotes\n  * Fixes intollerence for un escaped double quote",
            "Raise an error for unsupported hook event\n\n* Raises a ValueError for an unsupported hook event",
            "Raise an error for unsupported hook event\n\n* Raises a ValueError for an unsupported hook event",
            "Fixed KeyError on non deafult HOOk\n\n* Initializes empty hook event on new event name"
        ],
        "issue_comments": [
            "But I don't monkey patch, I extend the session object to add events.\n\nWhat's the point in adding a hooks system if it breaks when you try to use it. I'm simply requesting a fix of the code that already exists.\n",
            "I'm happy to provide a patch so that others aren't going to hit this issue.\n\nI would prefer a ValueError as stating that it's not implemented suggests that it's going to be. Which given the argument you've provided sounds unlikely.\n",
            "Resolved and squashed\n",
            "Right-o will remove\n",
            "resolved\n",
            "Sure - looking into it.\n",
            "I believe that's fixed.\n\nThe entire suite works locally now.\n",
            "Unsure why travis fails.\n",
            "I've created a test to ensure the previously mentioned string causes a Symfony\\Component\\Yaml\\Exception\\ParseException .\n\nJust posting fix and then will create pull request.\n",
            "Another test to consider:\n    `test:  don t do somthin  like that `\n\nWhich shouldn't parse either (but currently does), fixed in above pull request.\n",
            "Minor amendments made as per @fabpot 's request\n"
        ],
        "issues": [
            {
                "title": "[Yaml] fix parsing quotes problem",
                "body": "Added some basic checking for quotes on their own within strings. Used single quote ' followed by  ,  and  :  to denote the end of the current string to test.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4021\nTodo: N/A\n"
            },
            {
                "title": "Raise an error for unsupported hook event",
                "body": "Fixes #1525 against branch 2.0\n- Raises a ValueError for an unsupported hook event\n"
            },
            {
                "title": "Raise an error for unsupported hook event",
                "body": "Fixes #1525\n- Raises a ValueError for an unsupported hook event\n"
            },
            {
                "title": "KeyError during register_hook",
                "body": "If an event is added that isn't  response , during req.prepare() a KeyError is thrown.\n\nThe error is difficult to track down and relates to the copying process of hooks from the request to the PreparedRequest.\n\nThere should either be a better error message displayed. I.e. hook event not supported\n\nOr, as is in my pull request ( #1524 ) the RequestHooksMixin.register_hook method should handle creating the event.\n"
            },
            {
                "title": "Fixed KeyError on non deafult HOOK",
                "body": "At present, if you attempt to attach a hook that isn't for the event 'response' you'll get a KeyError during initialization of PreparedRequest.\n\nI intend to use the hook mechanism to add logic of my own and therefore create my own events.\n\nI believe this would be useful functionality for anyone extending the requests framework.\n"
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "[Yaml] fix parsing quotes problem",
                "body": "Added some basic checking for quotes on their own within strings. Used single quote ' followed by  ,  and  :  to denote the end of the current string to test.\n\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #4021\nTodo: N/A\n"
            },
            {
                "title": "Raise an error for unsupported hook event",
                "body": "Fixes #1525 against branch 2.0\n- Raises a ValueError for an unsupported hook event\n"
            },
            {
                "title": "Raise an error for unsupported hook event",
                "body": "Fixes #1525\n- Raises a ValueError for an unsupported hook event\n"
            },
            {
                "title": "Fixed KeyError on non deafult HOOK",
                "body": "At present, if you attempt to attach a hook that isn't for the event 'response' you'll get a KeyError during initialization of PreparedRequest.\n\nI intend to use the hook mechanism to add logic of my own and therefore create my own events.\n\nI believe this would be useful functionality for anyone extending the requests framework.\n"
            }
        ]
    },
    "24047": {
        "repos": [
            "The Symfony 2 PHP framework (PHP 5.3 only -- everything is HIGHLY EXPERIMENTAL -- things WILL change)"
        ],
        "commit_comments": [],
        "commits": [
            "Fix #3929",
            "Fix #3971",
            "[Propel1] Add a PropelExtension\n\nThe propel extension allow to use propel specific type (ModelType) outside of\nSymfony2.",
            "Fix CS",
            "Fix some CheckStyle violations on Components.\n\nOn casts, Control signature etc.",
            "Fix cs",
            "Revert  merged branch drak/eventdispatcher_opimization (PR #2597) \n\nThis reverts commit db6fea9fd014b9272627ee8c715368b7a1918741, reversing\nchanges made to 47b09f791b832761621348d6a526a303a5428522.",
            "Fix some CheckStyle violations on Components.\n\nOn casts, Control signature etc.",
            "Changes forgotten in view refactoring in 056b6e4d\n\n* Several .php template have not been renamed in .php.html"
        ],
        "issue_comments": [
            "@Stof Fixed :).\n",
            "lsmith77: ok, so i revert my change only on RequestMatcher file ?\n",
            "Oops i made a mistake, i have created a new pull request on a new branche named cs. See https://github.com/symfony/symfony/pull/2624, can you tell me Stoff if you can merge it.\n\nThanks\n",
            "+1\n"
        ],
        "issues": [
            {
                "title": "Fix #3929",
                "body": ""
            },
            {
                "title": "Fix #3971",
                "body": ""
            },
            {
                "title": "[Propel1] Add a PropelExtension",
                "body": "The propel extension allow to use propel specific type (ModelType) outside of\nSymfony2.\n"
            },
            {
                "title": "Fix cs",
                "body": ""
            },
            {
                "title": "Fix some CheckStyle violations on Components.",
                "body": "On casts, Control signature etc.\n\nThis Pull request follow the #2618 (https://github.com/symfony/symfony/pull/2618) where @stof had some trouble to merge it. \n"
            },
            {
                "title": "Fix some CheckStyle violations on Components.",
                "body": "On casts, Control signature etc.\n"
            },
            {
                "title": "Fix",
                "body": "Hi,\n\nI discovered that changes were forgotten in view refactoring on commit 056b6e4d.\n\nJoseph Rouff.\n"
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "Fix #3929",
                "body": ""
            },
            {
                "title": "Fix #3971",
                "body": ""
            },
            {
                "title": "[Propel1] Add a PropelExtension",
                "body": "The propel extension allow to use propel specific type (ModelType) outside of\nSymfony2.\n"
            },
            {
                "title": "Fix cs",
                "body": ""
            },
            {
                "title": "Fix some CheckStyle violations on Components.",
                "body": "On casts, Control signature etc.\n\nThis Pull request follow the #2618 (https://github.com/symfony/symfony/pull/2618) where @stof had some trouble to merge it. \n"
            },
            {
                "title": "Fix some CheckStyle violations on Components.",
                "body": "On casts, Control signature etc.\n"
            },
            {
                "title": "Fix",
                "body": "Hi,\n\nI discovered that changes were forgotten in view refactoring on commit 056b6e4d.\n\nJoseph Rouff.\n"
            }
        ]
    },
    "690667": {
        "repos": [],
        "commit_comments": [],
        "commits": [],
        "issue_comments": [
            "Just asked myself the same question today... \n\nI would like to display a dropdown list of hierarchical entity data, something like\n\nEurope \n- Belgium \n- France \n  Asia \n- Japan \n- China \n\nTo do that, I could add a method getChoiceText() in my entity :\n\n``` php\n\npublic function getChoiceText() {\n   return ltrim(str_repeat('-', $this->level) . ' ' . $this->name);\n}\n\n```\n\nIt works, but it feels a bit odd to add purely  form/presentation  logic in my entity. This method will only be used in my form.\n\nThe callback idea makes sense, although there's no doubt we can live without.\n\nWouldn't it be possible to use the 'property' option to achieve what @mvrhov is suggesting ? This option could accept either a string, to be used by PropertyPath, or a closure that would be provided with an entity ?\n",
            "I've just encountered the exact same issue on Symfony 2.2 - I had to change the upload_max_filesize in my php.ini file.\n",
            "Done\n",
            "Done\n",
            "Just asked myself the same question today... \n\nI would like to display a dropdown list of hierarchical entity data, something like\n\nEurope \n- Belgium \n- France \n  Asia \n- Japan \n- China \n\nTo do that, I could add a method getChoiceText() in my entity :\n\n``` php\n\npublic function getChoiceText() {\n   return ltrim(str_repeat('-', $this->level) . ' ' . $this->name);\n}\n\n```\n\nIt works, but it feels a bit odd to add purely  form/presentation  logic in my entity. This method will only be used in my form.\n\nThe callback idea makes sense, although there's no doubt we can live without.\n\nWouldn't it be possible to use the 'property' option to achieve what @mvrhov is suggesting ? This option could accept either a string, to be used by PropertyPath, or a closure that would be provided with an entity ?\n",
            "I tried to reproduce the issue but it appears to work fine with the current master branch.\n\nI defined a ManyToOne field in the entity and added the field in the form without any explicit field type or option, and the field is built as an EntityType.\n\nI can provide a test case if necessary but I think this issue can be closed.\n",
            "Working on this one\n",
            "Checked against the master branch with the code in the gist, looks fine to me. I cannot be 100% sure that I reproduced exactly what @benjamindulau as I don't have the controller or the entity code, but I'm positive that the error is associated (and displayed next) to the parent form (Entry) and not in one of the embedded form.\n\nI can provide a test in AbstractLayout, but I am not sure it is necessary.\n",
            "Working on it right now\n"
        ],
        "issues": [
            {
                "title": "Medium grid",
                "body": "I really like what you did with the small / large grid. \n\nAs the settings file define small, large, but also medium screen sizes, I think that the medium grid would bring a nice addition to the grid system.\n\n``` html\n<div class= row >\n  <div class= small-8 medium-4 large-6 columns >...</div>\n  <div class= small-4 medium-4 large-3 columns >...</div>\n  <div class= small-12 medium-4 large-3 columns >...</div>\n</div>\n```\n\nNot sure how that would play with _Source Ordering_ tough.\n\nWhat do you think ? If you are ok with the idea, I'm ready to contribute the code.\n"
            },
            {
                "title": "[Form] by_reference when embedding a single object",
                "body": "When setting data on an embedded form that has the option 'by_reference' set to false, the provided model data is cloned before being converted to norm data / view data.\n\nI understand that it is the desirable behavior when dealing with collections, as only the Collection instance is cloned, and not its items.\n\nWhen embedding a single object, the behavior seems problematic : if the form's underlying object is a Doctrine entity previously inserted in the database, cloning it will prevent Doctrine from being able to update it - it will be considered as a new entity.\n\nOf course, I could set 'by_reference' to true but I need the actual setter to be called on the  parent  object.\n\nA simple example : a user entity, with an optional extended profile entity. My user form type embeds the extended profile form type. I need setExtendedProfile() to be called on the user entity, so 'by_reference' needs to be set to false. However, if I use the form to update an existing user entity, the cloning operation on the extendedProfile entity will trick Doctrine into thinking that this extendedProfile entity is a new entity.\n\nNot sure whether it is an actual bug or if I am missing something. My first idea would be to change the Form class so that it only clones \\Traversable instances, and not every single object. @bschussek, if it is indeed a reasonable solution I can provide a patch along with adapted unit tests.\n\n``` php\n\nclass User\n{\n    /**\n     * @var ExtendedProfile\n     * @ORM\\OneToOne(targetEntity= ExtendedProfile , mappedBy= user , cascade={ all }, orphanRemoval=true)\n     */\n    private $extendedProfile;\n\n    public function getExtendedProfile()\n    {\n        return $this->extendedProfile;\n    }\n\n    public function setExtendedProfile($extendedProfile)\n    {\n        // Do important stuff here\n        $this->extendedProfile = $extendedProfile;\n    }\n    ...\n}\n\nclass ExtendedProfile\n{\n     /**\n     * @var User\n     * @ORM\\OneToOne(targetEntity= User , inversedBy= extendedProfile )\n     * @ORM\\JoinColumn(name= user_id , referencedColumnName= id , nullable=false)\n     */\n    private $user;\n    ...\n}\n\nclass UserType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('extendedProfile', 'extended_profile', array('by_reference' => false))\n            ...\n    }\n}\n\n```\n"
            },
            {
                "title": "[Form] Fixed singularization of  prices ",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis PR is similar to #4758, although in this case, the singularization of  prices  into  prex  or  prix  is obviously a mistake. I guess anyone working on a e-commerce platform with multiple prices on a product model could encounter this issue.\n\nI adapted the tests as well ; there shouldn't be any bc break.\n"
            },
            {
                "title": "[Form] [DoctrineBridge] Better field type guessing for array doctrine type and array validator type",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1692\nTodo: -\n"
            }
        ],
        "pr_comments": [
            "fixed\n",
            "fixed\n",
            "I would say :\n\nAlternatively, $labelPath can be a PHP callable\ntaking an element from the ObjectChoiceList as \nparameter and returning a string.\n\nBut then $labelPath should be documented as a mixed parameter ?\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "fixed\n",
            "I would say :\n\nAlternatively, $labelPath can be a PHP callable\ntaking an element from the ObjectChoiceList as \nparameter and returning a string.\n\nBut then $labelPath should be documented as a mixed parameter ?\n",
            "I would say :\n\nAlternatively, $labelPath can be a PHP callable\ntaking an element from the ObjectChoiceList as \nparameter and returning a string.\n\nBut then $labelPath should be documented as a mixed parameter ?\n"
        ],
        "prs": [
            {
                "title": "[Form] Fixed singularization of  prices ",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nLicense of the code: MIT\n\nThis PR is similar to #4758, although in this case, the singularization of  prices  into  prex  or  prix  is obviously a mistake. I guess anyone working on a e-commerce platform with multiple prices on a product model could encounter this issue.\n\nI adapted the tests as well ; there shouldn't be any bc break.\n"
            },
            {
                "title": "[Form] [DoctrineBridge] Better field type guessing for array doctrine type and array validator type",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1692\nTodo: -\n"
            }
        ]
    },
    "1403080": {
        "repos": [
            "The Symfony2 PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "[AbstractRememberMeServices] Add support for the remember_me parameter in the query"
        ],
        "issue_comments": [
            "so it's not meant to be used on checkbox?\n",
            "Thanks, it fixed it!\n",
            "It looks like it only occurs from within an embedded form.\nIn [DelegatingValidator](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Validator/Validator/DelegatingValidator.php), **line 88**, preg_match is trying to match a mappedPath to the violation's propertyPath.\n\nI've printed those mathcing attempts as `preg_match(mappedPath, propertyPath)` from both an embedded form and a non-embedded form:\n\nIn **UserType** form (non-embedded) I have a field named **birthday** of type **date**:\n\n```\npreg_match(/^data\\.birthday\\.(?!\\w)/, data.birthday)\npreg_match(/^data\\.birthday\\.year(?!\\w)/, data.birthday)\npreg_match(/^data\\.birthday\\.month(?!\\w)/, data.birthday)\npreg_match(/^data\\.birthday\\.day(?!\\w)/, data.birthday)\npreg_match(/^data\\[birthday\\]\\.(?!\\w)/, data.birthday)\npreg_match(/^data\\[birthday\\]\\.year(?!\\w)/, data.birthday)\npreg_match(/^data\\[birthday\\]\\.month(?!\\w)/, data.birthday)\npreg_match(/^data\\[birthday\\]\\.day(?!\\w)/, data.birthday)\npreg_match(/^data\\.birthday(?!\\w)/, data.birthday) <-- MATCH!\n```\n\nAs you can see, the MATCH comes on the correct child field - the **birthday** field.\n\nIn **RegistrationForm** I have an embedded form named **user** of type **UserType** with the same **birthday** field:\n\n```\npreg_match(/^children\\[user\\]\\[birthday\\]\\.data\\.(?!\\w)/, children[user].data.birthday)\npreg_match(/^children\\[user\\]\\[birthday\\]\\.data\\.year(?!\\w)/, children[user].data.birthday)\npreg_match(/^children\\[user\\]\\[birthday\\]\\.data\\.month(?!\\w)/, children[user].data.birthday)\npreg_match(/^children\\[user\\]\\[birthday\\]\\.data\\.day(?!\\w)/, children[user].data.birthday)\npreg_match(/^children\\[user\\]\\[birthday\\](?!\\w)/, children[user].data.birthday)\npreg_match(/^children\\[user\\](?!\\w)/, children[user].data.birthday) <-- MATCH!\n```\n\nAs you can see here, there is no match for the **birthday** field, and the match is for the **user** form.\n\nIn mappedPath, the **birthday** field is `children[user][birthday]`\nIn propertyPath, the **birthday** field is `children[user].data.birthday`\n\nThat's why there's no match\n",
            "@stof I was able to reproduce this error on 2.0.12.\nIt occurs on expanded choice fields of nested forms, for example:\n\n```\nclass UserType extends AbstractType\n{\n    public function buildForm(FormBuilder $builder, array $options)\n    {\n        $builder->add('username', 'text')\n                ->add('gender', 'choice', array('choices' => array('0' => 'male',\n                                                                   '1' => 'female'),\n                                                'expanded' => true));\n    }\n}\n\nclass RegistrationType extends AbstractType\n{\n    public function buildForm(FormBuilder $builder, array $options)\n    {\n        $builder->add('user', new UserType());\n    }\n}\n```\n\nIn this case, `username` will render it's error in the right place, while `gender` will bubble up.\n\nI was able to fix it [Here](https://github.com/tamirvs/symfony/commit/cd136d09e841fd40c396846fc6e346c7f1a1b7be), please have a look :)\n",
            "@kevindew, @stof  these changes were posted by me, but I think that @bschussek was working on a fix ([#4341](https://github.com/symfony/symfony/pull/4341), [#3903](https://github.com/symfony/symfony/issues/3903))\n"
        ],
        "issues": [
            {
                "title": "ChoiceFormField::isDisabled for checkbox",
                "body": "Checking if a checkbox is disabled using `isDisabled()` returns _false_ even when the checkbox really is disabled.\n\nI looked through the code and I think the problem is [this line](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Field/ChoiceFormField.php#L65) because when I dumped the `ChoiceFormField` checkbox object this is what I got:\n\n``` php\n['options':private] =>\n    array {\n        array {\n            'value' => 1,\n            'disabled' => true\n        }\n    }\n['value':protected] =>\n    null\n```\n\nSo obviously this `$option['value'] == $this->value` is _false_..\nIf when building the form I add an option `'value' => null` to the checkbox form it works just fine.\n\nShouldn't the checkbox `isDisabled` function be different than the one for other choice inputs?\n"
            },
            {
                "title": "[Security] Don't redirect when the AuthenticationException is thrown",
                "body": "Hi,\n\nwhen the **AuthenticationException** or **AccessDeniedException** are thrown, the [ExceptionListener](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Http/Firewall/ExceptionListener.php) catches it and immediately redirects to the login page.\nSometimes this is not wanted (for example in ajax request to a secured page), but I couldn't find a way to disable it, so it would be nice to have one :)\n"
            },
            {
                "title": "2.1 beta2: Custom success handler throws an exception",
                "body": "I have a custom authentication listener + provider with a custom success handler. when upgrading to 2.1 beta2 (on beta1 everything works good) I get an exception:\n\n```\nRuntimeException: The definition  acme.security.authentication.listener.openid   has a\nreference to an abstract definition  security.authentication.success_handler . Abstract\ndefinitions cannot be the target of references.\n```\n\nI know the error is because of [this commit](https://github.com/symfony/symfony/commit/c6aa392df7b1b68d7f5be0b858bd93e97a5a6cdc) but is it a bug or just wrong implementation by me? It seems that the [default abstract handler](https://github.com/symfony/symfony/blob/c6aa392df7b1b68d7f5be0b858bd93e97a5a6cdc/src/Symfony/Bundle/SecurityBundle/Resources/config/security_listeners.xml#L110) is passed to the listener instead of my custom one.\n\nmy security.yml:\n\n```\nsecured_area:\n    ...\n    openid:\n        check_path: /login/openid/auth\n        success_handler: acme.identity.authentication.handler\n        failure_handler: acme.identity.authentication.handler\n```\n\nand the service definition:\n\n```\nacme.identity.authentication.handler:\n    class: %acme.identity.authentication.handler.class%\n```\n"
            },
            {
                "title": "[AbstractRememberMeServices] add support for the remember_me parameter in the query",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\n\nI found myself having to pass the _remember_me parameter in the query instead of as a POST parameter, because I use OpenID which don't support POSTing, and I think it could be helpfull and harmless feature.\n"
            },
            {
                "title": "[Form][DelegatingValidator] Fix path mapping for embedded forms",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: DelegatingValidatorTest\nFixes the following tickets: [#1917](https://github.com/symfony/symfony/issues/1917), [#3018](https://github.com/symfony/symfony/issues/3018)\n\nTried to fix the bug where multi-input types (i.e. date, radio) of embedded forms get wrong path mapping\n\n```\nchildren[subForm][choiceType].data\n```\n\nshould be\n\n```\nchildren[subForm].data.choiceType\n```\n"
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "[AbstractRememberMeServices] add support for the remember_me parameter in the query",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\n\nI found myself having to pass the _remember_me parameter in the query instead of as a POST parameter, because I use OpenID which don't support POSTing, and I think it could be helpfull and harmless feature.\n"
            },
            {
                "title": "[Form][DelegatingValidator] Fix path mapping for embedded forms",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: DelegatingValidatorTest\nFixes the following tickets: [#1917](https://github.com/symfony/symfony/issues/1917), [#3018](https://github.com/symfony/symfony/issues/3018)\n\nTried to fix the bug where multi-input types (i.e. date, radio) of embedded forms get wrong path mapping\n\n```\nchildren[subForm][choiceType].data\n```\n\nshould be\n\n```\nchildren[subForm].data.choiceType\n```\n"
            }
        ]
    },
    "475833": {
        "repos": [
            "The Symfony2 PHP framework"
        ],
        "commit_comments": [
            "Yihaa! \n",
            "Seems to me that it is an InvalidArgument? Which exception would you prefer?\n"
        ],
        "commits": [
            "Fix missing space.",
            "Make the exception-test more explicit.",
            "Check attribute type of service tags\n\nThe attributes of service tags have to be of a scalar type.\nIt was possible to add arrays here with yaml-configuration."
        ],
        "issue_comments": [
            "tststs... got it.\n",
            "This way?\n",
            "on the way...\n",
            "Moved to https://github.com/symfony/symfony/pull/3926\n",
            "@fabpot: shall we reopen this one to pull it into master or how are the changes from 2.0 merged into master (especially as the location of the copmponent-tests has moved)?\n",
            ":+1:\n",
            "Should be fixed with: https://github.com/symfony/symfony/pull/3921\n",
            ":-1: By cloning/downloading the SE package it becomes your personal project and should not be coupled to the SE-repo anymore. So the dependency-file is completely related to your project and any further upgrades in this too...\n",
            ":+1: makes sense to me.\n"
        ],
        "issues": [
            {
                "title": "Fix issue #3251: Check attribute type of service tags",
                "body": "The attributes of service tags have to be of a scalar type.\nIt was possible to add arrays here with yaml-configuration.\n\nRefs #3921\n"
            },
            {
                "title": "For 2.0: Fix issue 3251: Check attribute type of service tags",
                "body": "The attributes of service tags have to be of a scalar type.\nIt was possible to add arrays here with yaml-configuration.\n"
            },
            {
                "title": "Fix issue #3251: Check attribute type of service tags",
                "body": "The attributes of service tags have to be of a scalar type.\nIt was possible to add arrays here with yaml-configuration.\n"
            },
            {
                "title": "Remove the facing-slash from .gitignore  /vendor/ . ",
                "body": "The /vendor/ entry in .gitignore points to the project-root but\nshould be relative, as symfony is a vendor too.\n\nThis commit makes it possible again to use submodules or even add a vendor to a project-git-repo.\n"
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "Fix issue #3251: Check attribute type of service tags",
                "body": "The attributes of service tags have to be of a scalar type.\nIt was possible to add arrays here with yaml-configuration.\n\nRefs #3921\n"
            },
            {
                "title": "For 2.0: Fix issue 3251: Check attribute type of service tags",
                "body": "The attributes of service tags have to be of a scalar type.\nIt was possible to add arrays here with yaml-configuration.\n"
            },
            {
                "title": "Fix issue #3251: Check attribute type of service tags",
                "body": "The attributes of service tags have to be of a scalar type.\nIt was possible to add arrays here with yaml-configuration.\n"
            },
            {
                "title": "Remove the facing-slash from .gitignore  /vendor/ . ",
                "body": "The /vendor/ entry in .gitignore points to the project-root but\nshould be relative, as symfony is a vendor too.\n\nThis commit makes it possible again to use submodules or even add a vendor to a project-git-repo.\n"
            }
        ]
    },
    "179912": {
        "repos": [
            "The Symfony2 PHP framework",
            "The missing package manager for OS X."
        ],
        "commit_comments": [
            "Hi Joseph\nThere is no special reason to choose `call_user_func_array`\n\nAlso this patch not solves our problem. I closed. \n\n`$reflClass->getName()` still points to parent class and it fails.\n"
        ],
        "commits": [
            "Fix for issue #3179",
            "Update mongo-php 1.2.6",
            "MongoDB PHP extension updated to 1.2.4",
            "solr-php 1.0.1",
            "Updated formula",
            "Version bump : mongo-php 1.2.2",
            "[Update] RRDTool 1.4.5",
            "Version bump",
            "Update : Redis 2.2.7",
            "Update : Apc 3.1.8",
            "Formula added.",
            "Update : Version bump, Redis 2.2.6",
            "Merge branch 'mongo-php-patch' of github.com:import/homebrew into mongo-php-patch",
            "mongo-php added.\n\nRemoved dependency 'mongo'",
            "Removed dependency 'mongo'",
            "mongo-php added.",
            "apc.shm_size now uses M/G suffixes"
        ],
        "issue_comments": [
            "@paulirish @Jonhoo @darktable Everyday i noticed from tons of issues mentioning my username. No problem for me. \n",
            "I tested my fix under different conditions. It was failed and not solves problem of issue #3179.\nSorry guys. Im closing this pull request.\n",
            "A looking good for me.\n",
            "No, it not depends solr for installation. \n",
            "Oh sorry, i accidentally closed this pull request. I tested formula without installing solr, it works without problem. \n",
            "Oh, This bug [Fatal error: Unknown: apc_fcntl_unlock failed: in Unknown on line 0](http://www.google.com/search?client=safari&rls=en&q=Fatal+error:+Unknown:+apc_fcntl_unlock+failed:+in+Unknown+on+line+0&ie=UTF-8&oe=UTF-8) occurs again and again. Im closing this pull request.\n",
            "Oh.. Im closing this pull request, cause today i discovered a problem w/ APC 3.1.8 and PHP 5.3.6 on Mac OS X. \n\nhttp://pecl.php.net/bugs/bug.php?id=22688\n",
            "@adamv I removed dependency from Formula, tested it, works w/ out problem. \n",
            "I squashed commit 32a3681 and c707c2e to 181f0cb. Is it enough ?\n",
            "OptionsResolver +1\n",
            "OptionsResolver +1\n",
            "I'm using `Symfony\\Component\\Validator` for validating some Yaml files and i need to declare loadValidatorMetadata for this `Validateable` objects. Only interfaces can have static methods in PHP and does not supports `abstract static function`.\n",
            "@bschussek No, when i remove it from interface, Reflection calls correct method. Only i want to use an concept / interface for my `Validateable` objects. \n\nNow i changed my static method validation constraints to collection constraints and i'm validating it like this https://github.com/import/heatbeat/blob/feature/nodes-and-leafs/lib/Heatbeat/Leaf/AbstractLeaf.php#L54\n"
        ],
        "issues": [
            {
                "title": "Fix for issue #3179",
                "body": ""
            },
            {
                "title": "[Validator] StaticMethodLoader invokes wrong method",
                "body": "```\ninterface FooInterface {\n\n    public static function loadValidatorMetadata($metadata);\n}\n\nclass Bar implements FooInterface {\n\n    private $baz = 'bogus';\n\n    public static function loadValidatorMetadata($metadata) {\n        $metadata->addPropertyConstraint('baz', new Assert\\MinLength(10));\n    }\n\n}\n\n$validator = new Validator(\n                new ClassMetadataFactory(new StaticMethodLoader()),\n                new ConstraintValidatorFactory()\n);\n$violations = $validator->validate(new Bar);\nif ($violations->count()) {\n    throw new \\Exception($violations);\n}\n```\n\nI have classes that needs to be validated with `Symfony\\Component\\Validator` and this classes uses `StaticMethodLoader` strategy for validation. I declared `loadValidatorMetadata` method in interface but `StaticMethodLoader` invokes wrong method and following error occures.\n\n```\nFatal error: Uncaught exception 'ReflectionException' with message 'Trying to invoke abstract method FooInterface::loadValidatorMetadata()' in Symfony/Component/Validator/Mapping/Loader/StaticMethodLoader.php on line 44\n\nReflectionException: Trying to invoke abstract method Heatbeat\\FooInterface::loadValidatorMetadata() in /Symfony/Component/Validator/Mapping/Loader/StaticMethodLoader.php on line 44\n```\n\nLooks like there is a problem with Reflection. \n"
            },
            {
                "title": "[Process] Can't determine segmentation faults",
                "body": "I tested symfony process component with  segmentation fault  command. If  segmentation fault  occurs, process not stop, it waits until timeout and throws RuntimeException in this line https://github.com/symfony/Process/blob/master/Process.php#L180\nI thought this is not a problem of Symfony Process. (It maybe problem of process functions of PHP)\n\nI'd illustrated this problem in this screenshot : http://i53.tinypic.com/219ufbp.png\n\nActual result : Process waits until timeout.\nExpected result : Process stops when segmentation fault.\n"
            },
            {
                "title": "#1636",
                "body": "Fixed problems with running processes returns wrong exitcode (-1) on Linux. \n"
            },
            {
                "title": "[Process] Successful processes returns -1 as exitcode",
                "body": "Hi, Im using Process component in an open source project for executing shell commands. Everything was fine in OS X. But when i running shell commands in an Ubuntu box, exitcode returns <code>'-1'</code> (instead of 0) and <code>Process::isSuccessful</code> returns false. (Btw command was run successfully.)\n\nSample code is there : https://github.com/import/heatbeat/blob/master/lib/Heatbeat/Util/CommandExecutor.php#L118\n\nWhen i debugged this cases, i saw $this->status[ running ] is <code>true</code> (in Process.php line 177) and termination status of the process is <code>0</code>. (Process.php line 171). \n\nI solved this problem with ; \n\nFrom : \n\n<pre>\n        proc_close($process);\n\n        if ($this->status['signaled']) {\n            throw new \\RuntimeException(sprintf('The process stopped because of a  %s  signal.', $this->status['stopsig']));\n        }\n\n        return $this->exitcode = $this->status['exitcode'];\n</pre>\n\n\nTo :\n\n<pre>\n        $exitCode = proc_close($process);\n\n        if ($this->status['signaled']) {\n            throw new \\RuntimeException(sprintf('The process stopped because of a  %s  signal.', $this->status['stopsig']));\n        }\n        \n        return $this->exitcode = ($this->status[ running ] ? $exitCode : $this->status[ exitcode ]);\n</pre>\n\n\nAfter i tested Process component with different commands and different test cases. It works correctly on my OS X Lion and Ubuntu 11.04\n"
            },
            {
                "title": "[Update] mongo-php 1.2.6",
                "body": ""
            },
            {
                "title": "[Update] mongo-php to 1.2.4",
                "body": ""
            },
            {
                "title": "Problems when installing mongo-php 1.2.3 ",
                "body": "Installation of mongo-php formula was failed due to following errors : \n\n<code>\nld: duplicate symbol _mongo_ce_Mongo in .libs/mongo.o and .libs/php_mongo.o for architecture i386\ncollect2: ld returned 1 exit status\nld: duplicate symbol _mongo_ce_Mongo in .libs/mongo.o and .libs/php_mongo.o for architecture x86_64\ncollect2: ld returned 1 exit status\nlipo: can't open input file: /var/tmp//ccwqytCD.out (No such file or directory)\nmake: **\\* [mongo.la] Error 1\n==> Exit Status: 2\n</code>\n\nFull output in here : https://gist.github.com/1156255\n\nI tested mongo-php with **1.2.2 version installed without any problem.**\n"
            },
            {
                "title": "Added formula : solr-php 1.0.1",
                "body": ""
            },
            {
                "title": "Updated formula mongo-php",
                "body": ""
            },
            {
                "title": "[Update] Mongo DB, PHP Pecl Extension 1.2.2",
                "body": ""
            },
            {
                "title": "[Update] RRDTool 1.4.5",
                "body": ""
            },
            {
                "title": "APC, version bump : 3.1.6 -> 3.1.9",
                "body": ""
            },
            {
                "title": "Update : Redis 2.2.7",
                "body": ""
            },
            {
                "title": "Update : Apc 3.1.8",
                "body": ""
            },
            {
                "title": "New formula : mongo-php",
                "body": "From : #5489\n"
            },
            {
                "title": "Update : Version bump, Redis 2.2.6",
                "body": ""
            },
            {
                "title": "New Formula : mongo-php",
                "body": "mongo-php is formula for installing MongoDB PHP extension to work with MongoDB w/ PHP.\n"
            },
            {
                "title": "apc.shm_size now uses M/G suffixes",
                "body": ""
            }
        ],
        "pr_comments": [],
        "prs": [
            {
                "title": "Fix for issue #3179",
                "body": ""
            },
            {
                "title": "#1636",
                "body": "Fixed problems with running processes returns wrong exitcode (-1) on Linux. \n"
            },
            {
                "title": "[Update] mongo-php 1.2.6",
                "body": ""
            },
            {
                "title": "[Update] mongo-php to 1.2.4",
                "body": ""
            },
            {
                "title": "Added formula : solr-php 1.0.1",
                "body": ""
            },
            {
                "title": "Updated formula mongo-php",
                "body": ""
            },
            {
                "title": "[Update] Mongo DB, PHP Pecl Extension 1.2.2",
                "body": ""
            },
            {
                "title": "[Update] RRDTool 1.4.5",
                "body": ""
            },
            {
                "title": "APC, version bump : 3.1.6 -> 3.1.9",
                "body": ""
            },
            {
                "title": "Update : Redis 2.2.7",
                "body": ""
            },
            {
                "title": "Update : Apc 3.1.8",
                "body": ""
            },
            {
                "title": "New formula : mongo-php",
                "body": "From : #5489\n"
            },
            {
                "title": "Update : Version bump, Redis 2.2.6",
                "body": ""
            },
            {
                "title": "New Formula : mongo-php",
                "body": "mongo-php is formula for installing MongoDB PHP extension to work with MongoDB w/ PHP.\n"
            },
            {
                "title": "apc.shm_size now uses M/G suffixes",
                "body": ""
            }
        ]
    },
    "244663": {
        "repos": [
            "The Mongo Database",
            "The Symfony 2 PHP framework (PHP 5.3 only -- everything is HIGHLY EXPERIMENTAL -- things WILL change)",
            "Official Zend Framework 2.0 git repository",
            "The PHP Unit Testing framework.",
            "Octopress is an obsessively designed framework for Jekyll blogging. It\u2019s easy to configure and easy to deploy. Sweet huh?"
        ],
        "commit_comments": [
            "It looks like the wrapper class would have to implement the `Doctrine\\DBAL\\Driver\\Connection` interface, correct? Perhaps `class` should allow interfaces to be specified, and then we can tailor the error message accordingly. An interface is fine for adding method calls or compile-time checks, and we'd be able to report a specific error if the user accidentally tried to have the container create the service.\n",
            "Hypothetically, what happens if this message triggers for both Max and Min constraints on the same field? Would it be duplicated in the frontend?\n",
            "Isn't bumping iterations just a superficial tweak to add some processing time to otherwise quick hash algorithms?  Ideally, we'd want to use algorithms with a much slower execution time, in order to make each crack attempt too slow to be reasonably done en masse.\n",
            "Here's the original PR with my explanation: https://github.com/fabpot/symfony/pull/741\n\nI was expecting to have a discussion on it, but it was merged quite quickly.\n",
            "In the interest of consistent configuration, we'd probably want to drop the dual-nature of `annotations` in PHP and YAML. It can either be boolean `true` or have `namespaces` (an associative array of prefixes => namespace paths) under it.\n\nIn this case, I think the XML format is most clear. Annotations is simply an attribute (with only a boolean value) and namespaces are defined under the `validation` tag.  No reason that can't also be done for PHP and YAML as well.\n",
            "Making the class abstract would also enforce the method signature, as explained [here](http://engineering.shopopensky.com/post/inheritance-in-php-or-why-you-want-to-use-an-interface-or-an-abstract-class).  But I agree; I don't see why Command isn't abstract.\n\n```\n/**\n * Executes the current command.\n *\n * @throws \\LogicException When this abstract class is not implemented\n */\nprotected function execute(InputInterface $input, OutputInterface $output)\n{\n    throw new \\LogicException('You must override the execute() method in the concrete command class.');\n}\n```\n\nThat certainly hints that it should be.\n",
            "Ryan: I'm all for an abstract class.  My point above was that the class was likely intended to be abstract from the get-go, per the `@throws` documentation.\n",
            "Every little bit helps.  Technically, the first `preg_match()` could be replaced with:\n\n```\nif ('Action' != substr($method, -6))\n```\n\n:)\n",
            "What are the cases where one would actually need to use a Bundle class (per margijn's example)?\n\nI imagine two cases where renaming the custom bundle classes could be beneficial:\n- Avoid having dozens of Bundle.php files within a project directory tree.  This would be a boon for code editors that let you quick-open files (throughout your project) by their base name.\n- Avoid using namespace aliases (do they have a bad stigma?)\n\nAssuming `use as` should be avoided, I wonder if this would be better or worse:\n\n```\nclass Bundle extends \\Symfony\\Foundation\\Bundle\\Bundle\n```\n\nI can't forsee a reason why one would need to access anything withing the base Bundle class (which a `use` would have allowed for easily).\n",
            "I wasn't arguing one way or the other, just postulating some reasons why it might have been done :)\n",
            "> **henrikbjorn**: makes us need to type even more characters everytime we are referencing a bundle in Doctrine ORM or Doctrine ODM\n\nDo you mean when referencing entity/document classes?  The Bundle's initializing class, `Symfony\\Framework\\SomeBundle\\SomeBundle`, should only need to show up if you're enabling the Bundle in your kernel.  Other places, like routing.yml includes and class references, should be unaffected.\n",
            "I suggest: `{% javascript 'bundles/blog/js/blog.js' %}`\n",
            "This should be `javascript` singular, as it conflicts with the `JavascriptsTokenParser` class.\n",
            "I had also fixed this in a local fork last month, as the code was consistently breaking on our Linux machines.  I submitted a pull request back then, but it wasn't picked up - I'll try again.\n\nhttp://github.com/opensky/symfony/commit/aa70df9c9014335699ef4f5fbdb74002b4b8e3c9\n\nMy guess is that the Symfony devs are mostly using Macs, where  .  isn't returned as a leaf (an obscure platform difference).\n",
            "This commit broke the build: http://travis-ci.org/#!/symfony/symfony/builds/872900\n\n@vicb: I realize you made the race condition fix in 93cc9efb8a758607c1cc901dcc1f6408cf2a45c2 against the 2.0 branch. Did you also create one against master? I hesitate to simply use 2.0's method body for `ClassMetadataFactory::getClassMetadata()`, as there are some slight differences (e.g. interface handling).\n",
            "@vicb: No worries. I was just tracing a build failure as I saw the test suite fail when I submitted a recent PR.\n",
            "@fabpot: Is it possible that this commit may have broken the XmlDriver and YamlDriver classes in DoctrineMongoDBBundle?\n\nAfter updating my symfony submodule to master (today), I noticed exceptions for missing directories being thrown in the [getAllClassNames()](https://github.com/symfony/DoctrineMongoDBBundle/blob/master/Mapping/Driver/XmlDriver.php#L55) method. During the iteration over `$this->paths`, the element values are being checked as a directory, but they contain namespaces. The actual path is stored as the element key.\n",
            "Per my comment below, it looks like this is the line that broke DoctrineMongoDBBundle. I think a temporary fix will be to modify that bundle's `addPaths()` method to flip its parameter - at least until we can decide on @stof's suggestion: #2463\n",
            "Awesome to see this coming into core. We had something like this at OpenSky and I imagine many folks implemented homemade solutions for this, too.\n",
            "Fields configured as dislabled and readonly should entail certain default validation which correlates with the HTML spec. I don't find any fault with how the HTML spec defines these fields, and feel it'd do us well to abide the spec rather than invent our own convention.\n\nFor disabled fields, we should validate that the field value is not present in submitted data. It should be present in the domain object when displaying the form. Practically, disabled fields are there just for display purposes. Perhaps that's irrelevant to the purpose of the Form component, which is all about mapping fields to object data properties, but that doesn't mean there isn't a need for them.\n\nReadonly fields should be validated to contain the exact same data when submitted. Since the browser submits data from readonly fields, we don't want to trust the user or her browser to not have edited the field. Additionally, we might want to avoid setting domain object data from a readonly field. Ideally there'd be no harm in re-setting the property's value, but some developers like to put special logic in setter methods (more than simple assignments), so it might be safer to avoid a setter call.\n\nYou could argue that if we avoid invoking setters for readonly fields, the validation that the submitted data is unchanged isn't necessary. Perhaps, but the user violated a contract with our Form, so I'd argue the data is invalid :)\n",
            "@bschussek to your point about  readonly  lacking visual cues, that's easily handled with some CSS.\n\nMy last comment may have been premature, though. I didn't realize at the time that forms didn't support **both** readonly and disabled.\n",
            "@bschussek Per your tweet:\n\n> It's important that behaviour != rendering. A read-only field could also be rendered as plain text\n\nBehavior-wise, if I specify a field as readonly in the Form class, that means I expect its identical value to be provided in the binding data.\n\nI'm not comfortable mixing terms here, as I think both readonly and disabled HTML attributes serve distinct purposes and imply certain behavior. Readonly inputs should be submitted unchanged (I'd argue you can't just render them as plain text). Disabled inputs should not be submitted at all (ideally they shouldn't be changed, but their state at submission time is irrelevant). To validate submitted data from an HTML form, our constraints are that readonly fields were given back to us and disabled fields are absent.\n\nFrom a server-side perspective, I'd consider the disabled attribute to be more specific to rendering, since it is by definition ignored during the entire submission process and, of course, binding. If any of the two attributes could be rendered as plain text, that would be  disabled .\n\nI see value in forms being able to make fields available purely for display purposes (disabled) and having them available as real inputs but non-modifiable (readonly). Perhaps the readonly option for the field is decided at runtime or the state of the initial object. I may have Javascript that depends on a readonly input's value to perform a computation within the browser, and perhaps I'd still like disabled fields rendered as plain text. Just some examples of middle ground.\n",
            "I wouldn't consider it valid, but I could expect the user to tamper with a readonly field. Hence the reason I'd invalidate the form if the readonly field changed - or if a disabled field was present _at all_.\n\nIn HTML forms (without Restful URLs), one might want to make the object's ID a readonly field. But say we're using forms to bind and validate incoming data from something like a JSON API. This kind of strictness might be entirely appropriate. I know it sounds silly to yield a validation message if an end users tampers with a readonly input on an HTML form - and OpenSky's UI designers would never allow me to do that - but in the context of a strict API I think it's reasonable. The rules:\n- This form field must be present and unchanged\n- Extra form fields (and disabled fields) must not be present (no different from validating `isSubmittedWithExtraFields()`)\n\nOn the subject of `isSubmittedWithExtraFields()`: If I was requiring my forms not to be submitted with extra fields (maybe asserting extra fields is false), the designer could inadvertently break form validation everywhere by electing to use `readonly` in place of `disabled`.\n\n> Whether or not the value is present in the bound data is not relevant to you as an end-user.\n\nFor the designer implementing the form template, if the field has a single option to work with, how can he intelligently handle the attribute rendering? Consider a form with two text inputs, both of which are  disabled  (field option). In the template, how can the designer intelligently decide to make one  readonly  and the other  disabled  (HTML attributes)? A theme wouldn't help us here, and I imagine the designer might have to take it upon himself to inject the attribute himself. Based on how the form theme is going to add either  readonly  or  disabled  (HTML attributes) by default, and in the render method we can only add _more_ attributes (not take any away), the resulting HTML would be:\n\n``` html\n<input type= text  name= foo  disabled= disabled  />\n<input type= text  name= foo  disabled= disabled  readonly= readonly  />\n```\n\nMaybe this is a separate problem: the ability to override attributes set by the form theme (e.g. `name` or `id`) at render time. I'd rather focus on the `readonly`/`disabled` argument, so forgive me for going off tangent :)\n"
        ],
        "commits": [
            "Fix typo in SyncClusterConnection exception",
            "Use DBQuery._addSpecial() more and return self from comment()\n\nChanging comment()'s return value is a BC break, but this makes the method consistent with other modifiers that also add special query properties.\n\nAlso adds a few methods to the DBQuery.help() output.",
            "SERVER-3483 JS test for Timestamp JSON wrapper",
            "Fix param docs for PropertyAccessor read method",
            "[PropertyAccess] Remove trailing periods from doc blocks\n\nPeriods were left in place for entries with multiple sentences/statements.",
            "[Console] Fix default value handling for multi-value options\n\nThe default value for array options will be an array, so it is not suitable to use as the default when processing one of many values for a multi-value option. Using null seems appropriate here, as it indicates the absence of a value and also converts nicely to an empty string (as opposed to an empty array).\n\nFixes #7689",
            "[PropertyAccess] Remove trailing periods from doc blocks\n\nPeriods were left in place for entries with multiple sentences/statements.",
            "Fix param docs for PropertyAccessor read method",
            "[HttpFoundation] Revise Mongo session storage\n\n * Default to _id for storing session ID\n * Use MongoDate instead of MongoTimestamp (BC break)\n * Rename default field names ( sess_  is redundant)\n *  justOne  is redundant for session removal\n * Assert true return values in method tests\n * Add note about TTL collections for gc()\n * Don't set identifier in upsert (invalid behavior)",
            "[DoctrineBridge] Require class option for DoctrineType",
            "[Config] Fix comment typo",
            "[DependencyInjection] Fix Yaml file loader test\n\nThis broke when 2.0 was recently merged into master with b9daae28476385d16984a729b9e7c8e30911fa23, as the Yaml fixture change from 24a0d0a2dcf334efc7d85f1c816c01d7fa4111f8 was not included.",
            "[DoctrineBridge] Initialize proxies in UniqueEntityValidator\n\nFixes #3163",
            "[HttpKernel] Throw exception if TimeDataCollector has no last event",
            "[Form] Failing test for empty_data option BC break\n\nThis demonstrates the issue described in symfony/symfony#3354. FieldType no longer has access to the child type's data_class option, which makes it unable to create the default closure for empty_data.",
            "Handle reflected param names for variable length arguments\n\nThe existing code handled cases where a PHP extension declared an argument for the reflection API without providing a name (typically done for referenced arguments). Also handle the case where the name it provides is  ...  (i.e. variable arguments), as that would break mock object generation.\n\nSee: http://php.net/manual/en/language.pseudo-types.php",
            "[HttpKernel] Fix call to Memcached::set() in MemcachedProfilerStorage\n\nThe existing code seems to have been copied from MemcacheProfilerStorage. Memcache::set() includes a $flag argument, but Memcached::set() omits that. See:\n\n * http://php.net/manual/en/memcached.set.php\n * http://php.net/manual/en/memcache.set.php",
            "Grammar and formatting in upgrade doc\r\n\r\nAdded logical component headings to changes. Grouped changes by bullets, with indented text and code blocks. Applied consistent formatting to method names and code references. Re-flowed paragraph text to abide an 80-character column.",
            "[DoctrineBridge] Rename data fixtures loader class",
            "[DoctrineBridge] Suggest doctrine/data-fixtures dependency",
            "[DoctrineBridge] Add common data fixtures loader",
            "[FrameworkBundle] Allow cache:clear/warmup to skip optional warmers",
            "[HttpKernel] Fix missing $method argument in MongoDbProfilerStorageTest\n\nThis test case fixes failures related to a signature change for ProfilerStorageInterface::find(). See: 1aef4e806b5a99312b82a0b10a9d2e2f4d4314ba and 5f2226807cfe4f37c461709d41f991d615cf0684.",
            "[Security] Refactor LogoutListener constructor to take options\n\nThis will facilitate adding additional options for CSRF protection. Additionally, a unit test for existing behavior was added.",
            "[Security] Allow LogoutListener to validate CSRF tokens\n\nThis adds several new options to the logout listener, modeled after the form_login listener:\n\n * csrf_parameter\n * intention\n * csrf_provider\n\nThe  csrf_parameter  and  intention  have default values if omitted. By default,  csrf_provider  is empty and CSRF validation is disabled in LogoutListener (preserving BC). If a service ID is given for  csrf_provider , CSRF validation will be enabled. Invalid tokens will result in an InvalidCsrfTokenException being thrown before any logout handlers are invoked.",
            "[SecurityBundle] Fix execution of functional tests with different names\n\nUsing  securitybundletest  as the default environment for the functional test's kernel causes a PHP fatal error redeclaring the class  appSecuritybundletestDebugProjectContainer  when multiple tests (with unique names) are executed. In lieu of forcing tests to specify their own environment explicitly, we can simply append the test name into the environment.\n\nNote: this bug may be related to PHPUnit executing multiple tests within the same process.",
            "[SecurityBundle] Add functional test for form login with CSRF token",
            "[SecurityBundle] Templating helpers to generate logout URL's with CSRF tokens\n\nAs each firewall is configured, its logout listener (if any) will be registered with the LogoutUrlHelper service. In a template, this helper may be used to generate relative or absolute URL's to a particular firewall's logout path. A CSRF token will be appended to the URL as necessary.\n\nThe Twig extension composes the helper service to avoid code duplication (see: #2999).",
            "[SecurityBundle] Define class parameter for LogoutUrlExtension service\n\nSee: 60ebaaad70e6d7b8e280f34730973ee29c4c559d",
            "[SecurityBundle] fix service class by adding a parameter, on twig extension",
            "[Security] Refactor LogoutListener constructor to take options\n\nThis will facilitate adding additional options for CSRF protection. Additionally, a unit test for existing behavior was added.",
            "[Security] Allow LogoutListener to validate CSRF tokens\n\nThis adds several new options to the logout listener, modeled after the form_login listener:\n\n * csrf_parameter\n * intention\n * csrf_provider\n\nThe  csrf_parameter  and  intention  have default values if omitted. By default,  csrf_provider  is empty and CSRF validation is disabled in LogoutListener (preserving BC). If a service ID is given for  csrf_provider , CSRF validation will be enabled. Invalid tokens will result in an InvalidCsrfTokenException being thrown before any logout handlers are invoked.",
            "[SecurityBundle] Fix execution of functional tests with different names\n\nUsing  securitybundletest  as the default environment for the functional test's kernel causes a PHP fatal error redeclaring the class  appSecuritybundletestDebugProjectContainer  when multiple tests (with unique names) are executed. In lieu of forcing tests to specify their own environment explicitly, we can simply append the test name into the environment.\n\nNote: this bug may be related to PHPUnit executing multiple tests within the same process.",
            "[SecurityBundle] Add functional test for form login with CSRF token",
            "[SecurityBundle] Templating helpers to generate logout URL's with CSRF tokens\n\nAs each firewall is configured, its logout listener (if any) will be registered with the LogoutUrlHelper service. In a template, this helper may be used to generate relative or absolute URL's to a particular firewall's logout path. A CSRF token will be appended to the URL as necessary.\n\nThe Twig extension composes the helper service to avoid code duplication (see: #2999).",
            "[Config] Use LoaderResolverInterface for type-hinting",
            "[DependencyInjection] Format base exception classes consistently",
            "[DependencyInjection] Create additional SPL exceptions",
            "[DependencyInjection] Use component-specific SPL exceptions\n\nThis replaces existing use of core SPL exceptions with the equivalent classes defined within the component. Although method documentation has been changed, this change should be BC since the component-specific SPL exceptions extend their core counterpart.\n\nThis commit purposely omits any changes to the PhpDumper, which throws several core SPL exceptions.",
            "[DependencyInjection] Fix up @throws documentation",
            "[DependencyInjection] Make exceptions consistent when ContainerBuilder is frozen\n\nSome methods previously threw LogicExceptions when the ContainerBuilder was frozen. Using BadMethodCallException (a descendant of LogicException) in all cases improves consistency and preserves BC.",
            "[DependencyInjection] Use exception class for API doc generation\n\nThe API doc generator needs a use statement to properly reference the component's own InvalidArgumentException class.",
            "[DependencyInjection] Use component's SPL classes in dumped service container",
            "[DependencyInjection] Fix class check and failure message in PhpDumper test",
            "Note DependencyInjection exception changes in the 2.1 changelog",
            "Note LoaderResolverInterface type hinting in the 2.1 changelog",
            "[FrameworkBundle] Assets templating helper does not need request scope\n\nNo other helpers have request scope and the assets helper's parameters don't appear to depend on the request in any way, so this appears to be unnecessary. As-is, request scope here prevents use of the assets helper from a console command that may need to internally render a template.",
            "[EventDispatcher] Remove static declaration for EventSubscriberInterface::getSubscribedEvents()\n\nExisting code never invokes this subscriber method statically and the Doctrine interface upon which it's based is also not static. Changing it to a normal method will also allow the interface to be mocked easily, in contrast to requiring stub classes (see EventDispatcherTest).",
            "[2.1] Session SaveHandler support for MongoClient driver class\n\nSee: #3145",
            "[Form] Refer to FormView explicitly in its own getParent() type-hint\r\n\r\nUsing  self  makes mocking impossible, as the type-hint would then refer to the extending class and make the declaration incompatible.",
            "[2.0] Log Writer support for MongoClient driver class\n\nSee: #3145",
            "[Form] Remove unnecessary use statements in EventListeners",
            "Revise MongoDB session save handler's gc() docs",
            "[Security] Dispatch event when SecurityContext is read from session in ContextListener::handle()\n\nThis event is helpful if the developer must observe the context's token when it is first initialized during the request, but before it may be overwritten by an authentication listener in that same request. Before this change, the closest events were onCoreRequest (before ContextListener::handle() is invoked, so too soon) or onSecurityInteractiveLogin (after the context's token is overwritten, so too late). Additionally, there were no suitable hooks within security component services (such as success/failure handlers in the authentication listeners).",
            "[Form] Use strict string comparison against  $$key$$  in CollectionField\n\nWithout strict comparison, the first element of a collection will never be removed if its key is integer zero.",
            "[FrameworkBundle] Change validator's annotation prefix from  validation  to  assert ",
            "[Config] Alias used classes in NodeBuilderTest to avoid conflicts with fixture classes required in TreeBuilderTest\n\nDepending on the order of execution of Config\\Definition\\Builder tests (due to filesystem ordering), namespace conflicts can occur between real classes and fixtures loaded by the TreeBuilderTest.",
            "Added MongoDB session save handler",
            "[Security] Copy token attributes when auth providers create a new token from another\n\nPreAuthenticatedAuthenticationProvider and UserAuthenticationProvider tend to copy a token instead of modifying it during their authenticate() methods, which is probably a good idea if the token might be immutable. Ensure that the token's attributes get copied along with everything else.",
            "[Security/DependencyInjection] adds support for merging security configurations\n\nThe merging is done in three steps:\n\n    1. Normalization:\n    =================\n    All passed config arrays will be transformed into the same structure\n    regardless of what format they come from.\n\n    2. Merging:\n    ===========\n    This is the step when the actual merging is performed. Starting at the root\n    the configs will be passed along the tree until a node has no children, or\n    the merging of sub-paths of the current node has been specifically disabled.\n\n       Left-Side       Right-Side      Merge Result\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n       -nothing-       array           Right-Side will be taken.\n       scalar          scalar          Right-Side will be taken.\n       array           false           Right-Side will be taken if ->canBeUnset()\n                                       was called on the array node.\n       false           array           Right-Side will be taken.\n       array           array           Each value in the array will be passed to\n                                       the specific child node, or the prototype\n                                       node (whatever is present).\n\n    3. Finalization:\n    ================\n    The normalized, and merged config will be passed through the config tree to\n    perform final validation on the submitted values, and set default values\n    where this has been requested.\n\nYou can influence this process in various ways, here is a list with some examples.\nAll of these methods must be called on the node on which they should be applied.\n\n  * isRequired(): Node must be present in at least one config file.\n  * requiresAtLeastOneElement(): PrototypeNode must have at least one element.\n  * treatNullLike($value): Replaces null with $value during normalization.\n  * treatTrueLike($value): Same as above just for true\n  * treatFalseLike($value): Same as above just for false\n  * defaultValue($value): Sets a default value for this node (only for scalars)\n  * addDefaultsIfNotSet(): Whether to add default values of an array which has not\n                           been defined in any configuration file.\n  * disallowNewKeysInSubsequentConfigs(): All keys for this array must be defined\n                                          in one configuration file, subsequent\n                                          configurations may only overwrite these.\n  * fixXmlConfig($key, $plural = null): Transforms XML config into same structure\n                                        as YAML, and PHP configurations.\n  * useAttributeAsKey($name): Defines which XML attribute to use as array key.\n  * cannotBeOverwritten(): Declares a certain sub-path as non-overwritable. All\n                           configuration for this path must be defined in the same\n                           configuration file.\n  * cannotBeEmpty(): If value is set, it must be non-empty.\n  * canBeUnset(): If array values should be unset if false is specified.\n\nArchitecture:\n=============\nThe configuration consists basically out of two different sets of classes.\n\n  1. Builder classes: These classes provide the fluent interface and\n                      are used to construct the config tree.\n\n  2. Node classes: These classes contain the actual logic for normalization,\n                   merging, and finalizing configurations.\n\nAfter you have added all the metadata to your builders, the call to\n->buildTree() will convert this metadata to actual node classes. Most of the\ntime, you will not have to interact with the config nodes directly, but will\ndelegate this to the Processor class which will call the respective methods\non the config node classes.",
            "[FrameworkBundle] Integrate Configuration\\Builder class for config merging and normalization\n\nThis fixes some BC problems introduced in f9138d313b83f951cf82a2f7f902a2d6dd14fbb3. Some top-level can now be simply enabled by providing true/null in PHP/YAML. Additionally, the Configuration\\Builder allows options to be unset by providing  false  (helpful for overriding activation in a previous config file). All options supporting these behaviors can be found in the Configuration.php file (look for canBeUnset() and treatNull/TrueLike()).\n\nMajor changes:\n\n * Removed  enabled  option for profiler config. Profiler is now enabled if its config is true, null or a map.\n * Restore original config structure for validation namespaces. In PHP/YAML, namespaces are defined under annotations as an alternative to false (disabled) and true/null (enabled). For XML, annotation remains a boolean attribute for validation and a one or more optional namespace tags may appear within <app:validation />. During config normalization, namespace tags under validation will be moved to annotations to conform to the PHP/YAML structure (this occurs transparently to the user).\n * Restore behavior for router/templating config sections being optional (as shown in changes to session/validation test fixtures). If either top-level section is unset in the configuration, neither feature will be enabled and the user will no longer receive exceptions due to missing a resource option (router) or engines (templating). Resource/engines will still be properly required if the respective feature is enabled.\n * Remove unused router type option from XML config XSD. Type is only relevant for import statements, so this option is likely useless.\n\nAdditional small changes:\n\n * Added isset()'s, since config options may be unset\n * Wrap registerXxxConfiguration() calls in isset() checks\n * Load translation.xml in configLoad(), since it's always required\n * Default cache_warmer value (!kernel.debug) is determined via Configuration class\n\nThings to be fixed:\n\n * Configuration\\Builder doesn't seem to respect isRequired() and requiresAtLeastOneElement() (or I haven't set it properly); this should replace the need for FrameworkExtension to throw exceptions for bad router/templating configs\n * The config nodes for session options don't have the  pdo.  prefix, as dots are not allowed in node names. To preserve BC for now, the  pdo.  prefix is still allowed (and mandated by XSD) in configuration files. In the future, we may just want to do away with the  pdo.  prefix.\n * Translator has an  enabled  option. If there's no use case for setting  fallback  independently (when  enabled  is false), perhaps  enabled  should be removed entirely and translator should function like profiler currently does.\n * Profiler matcher merging might need to be adjusted so multiple configs simply overwrite matcher instead of merging its array keys.",
            "Fix criteria for DB session garbage collection\n\nSessions are expired if their modified timestamp plus lifetime is less than, not greater than, the current time.",
            "Append PHP_EOL to logged lines in Mail and Stream writers\n\nPHP_EOL was previously appended in Simple formatter.",
            "Use getDateTimeFormat() method in log formatters",
            "Use DateTime for timestamp field in log event data\n\nDate formatting is now the responsibility of the formatter classes. Writers that do not support a formatter, or those that work with event data outside of FormatterInterface::format(), will be responsible for handling the DateTime object on their own.",
            "Convert DateTime to MongoDate in MongoDB log writer",
            "Added MongoDB log writer",
            "SERVER-8558: Test replica set flapping and heartbeatTimeoutSecs\n\nAlso adds two fail points to support JS tests. rsDelayHeartbeatResponse will delay the replSetHeartbeat command response on a node. rsStopHeartbeatRequest may be used to preemptively fail a heartbeat to another member (by its host:port).",
            "Support unidirectional network partitioning in ReplSetTest\n\nThe default behavior (bidirectional) remains as-is. This adds support for terminating an X->Y link while leaving Y->X untouched.",
            "Support mongobridge delay parameter in ReplSetBridge\n\nThis should be compatible with future improvements to support ranged delays (see #317)",
            "Fix typo in blockquote plugin docs"
        ],
        "issue_comments": [
            "There is no JIRA ticket for this. It's just something I came across while working on a QA ticket.\n",
            "@IanWhalen: I noticed this was lingering, so I rebased it atop master. I had hoped it was trivial enough to merge through GitHub, but should I open a codereview issue on it? Is a JIRA ticket necessary?\n",
            "Cross-referencing: https://jira.mongodb.org/browse/SERVER-8901\n",
            "Thanks!\n",
            "Ah, yes. Didn't realize that `master` was already for 2.3.\n",
            "@jakzal: I just noticed some failures running 2.1 tests locally.\n\nI believe it was the fault of the ICU version comparison methods in the base Locale TestCase class. Specifically, all of those methods normalized the versions using:\n\n```\nprotected function normalizeIcuVersion($version)\n{\n    return ((float) $version) * 100;\n}\n```\n\nMy current system reported ICU was 4.8.1.1, but after normalization, this was equal to 4.8. I tried changing the three ICU comparison methods to use `version_compare()` instead, and that fixed my original test failure in `StubLocaleTest::testGetCurrenciesData()`, but it lead to new failures in `StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingIntl()`.\n\nIs there any reason we're using Brazilian currency here? It seems to have been the cause of all of these silly edge cases.\n",
            "@jakzal: I know you didn't write the tests (this was a much smaller PR), but it was also the most recent Locale ticket I found at the time :)\n\n@bschussek: Thanks for the link to #7386, I'll check that out.\n",
            "Without the `class` option provided, a `null` class value gets passed to the object manager's `getClassMetadata()` method, which results in a PHP error in `class_parents()`:\n\n```\n1) Doctrine\\Bundle\\MongoDBBundle\\Tests\\Form\\Type\\DocumentTypeTest::testDocumentManagerIsReturnedWhenGettingEm\nclass_parents(): object or string expected\n\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.php:40\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:257\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:281\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:205\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/mongodb-odm/lib/Doctrine/ODM/MongoDB/DocumentManager.php:292\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Bridge/Doctrine/Form/ChoiceList/EntityChoiceList.php:102\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php:121\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:466\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:308\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/OptionsResolver.php:231\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormType.php:116\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:99\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:50\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/Tests/Form/Type/DocumentTypeTest.php:41\n```\n\nAdditionally, omitting the `em` option leads to another PHP error as `null` is passed to `spl_object_hash()`:\n\n```\n1) Doctrine\\Bundle\\MongoDBBundle\\Tests\\Form\\Type\\DocumentTypeTest::testDocumentManagerIsReturnedWhenGettingEm\nspl_object_hash() expects parameter 1 to be object, null given\n\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php:103\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:466\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:308\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/OptionsResolver.php:231\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormType.php:116\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:99\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:50\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/Tests/Form/Type/DocumentTypeTest.php:41\n```\n\nHowever, I'm hesitant to require the `em` option, as non-ORM types extending DoctrineType may use their own option (e.g. `document_manager`) and set the `em` option internally. Requiring `em` at the OptionsResolver level seems to throw an exception before we can copy the option.\n",
            "Looking a bit more into the `em` option and the `spl_object_hash()` error, it looks like the `$choiceList` option Closure is executing before the `em` option's normalizer Closure, which should set an empty `em` option by running the `class` option through `getManagerForClass()`. I'd reckon that's a bug, since `em` need not be provided.\n",
            "2cc7d2f44f4c1252dd2ac9964f0f92dce96f051b should be a failing test case at the moment.\n",
            "The `em` option definitely should not be required, but the test case above (for inferring it based on `class`) fails because of `Options::all()`:\n\n```\npublic function all()\n{\n    $this->reading = true;\n\n    // Performance-wise this is slightly better than\n    // while (null !== $option = key($this->lazy))\n    foreach ($this->lazy as $option => $closures) {\n        // Double check, in case the option has already been resolved\n        // by cascade in the previous cycles\n        if (isset($this->lazy[$option])) {\n            $this->resolve($option);\n        }\n    }\n\n    foreach ($this->normalizers as $option => $normalizer) {\n        if (isset($this->normalizers[$option])) {\n            $this->normalize($option);\n        }\n    }\n\n    return $this->options;\n}\n```\n\n`em` is only inferred from `class` by its normalizer, but normalization happens after resolution and the resolving closure for `choice_list` depends on `em` being an object.\n",
            "One possible solution would be to duplicate the `em` normalization within `choice_list`'s closure in order to compute the SPL object hash. Otherwise, I imagine the `choice_list` logic would have to take place in a normalizer; however, that would be quite fragile, as it'd depend on `em` appearing first in the normalizer array.\n",
            "I think EntityType is affected by this. See 2cc7d2f44f4c1252dd2ac9964f0f92dce96f051b\n",
            "We were waiting for @bschussek to follow-up. I'll try to sit with him today if he arrives before I leave to catch my plane.\n",
            "Resubmitting against 2.1 in #5632.\n",
            "Odd, I got a GitHub notification when Fabien merged this but not when you opened the original PR.\n\n@vicb: Could you explain why there's no need to check if `$this->data['events']['__section__']` is set in the TimeDataCollector class? That was the main code in #3706 that avoided the exception in my use case.\n",
            ":+1:\n",
            "@stof: Thanks for the suggestion. I wasn't aware of that method.\n",
            "@vicb: I have no experience enabling profiling on its own, as I've always used it in tandem with the WDT, but exporting profiler data for investigation in a dev environment sounds plausible.\n\nBut even with that method, I think we have a problem with stopwatch events not being created. They are primarily created by `TraceableEventDispatcher::updateProfile()`, but without debugging enabled in the kernel, that event dispatcher implementation isn't used.\n\nThe NPE I was receiving wasn't just related to the WDT for the current request. It was also when viewing the full-page profiler. Profiling data generated during a request when debug mode was off was unserialized and had an empty `events` array in its data.\n\nI can see why the exception message I generated should be changed (I was just trying to mimic the tips provided in other obscure exceptions). Perhaps the real question is what `getTotalTime()` and `getInitTime()` should report if the last event is unavailable. Can we get away with using the current time in its place? It seems that throwing an exception would simply break the profile view, and profile data without stopwatch events should still be valid.\n",
            "What do you mean by a  generic solution ? The issue here (null pointer exception) seems only to do with the TimeDataCollector's existing code -- and that's likely to happen whether I'm exporting serialized profiler data from a production server or viewing it on the same machine that captured it.\n",
            "Indeed, I'm aware of the general scope of the error. This was just a tangible test case based on the example @merk discussed in #3354. `empty_data` is one of the few options set by FieldType, so it was a very simple example of the BC break.\n",
            "@Burgov, ah I saw your original PR and went along with this because of @stof's comment. Looks like you reached a working solution since then, though :+1:\n",
            "FYI: #3789 includes this commit, so we can close this once that is merged.\n",
            "If that were the case, what would be the point of using `--` at all? :)\n- http://wiki.bash-hackers.org/dict/terms/end_of_options\n- http://perldoc.perl.org/Getopt/Long.html#Mixing-command-line-option-with-other-arguments\n",
            "This was also reported in doctrine/DoctrineMongoDBBundle#84.\n\nLet it be stated that we should create some functional tests for this validator :)\n",
            "Thanks for catching this. My mistake in b1f545b677b50f4f09bb746daef6f97f0da57f18. SecurityBundle's functional tests for StandardFormLogin and CsrfFormLogin, which I added, don't test the success handler option.\n\n@fabpot: Looks good to merge.\n",
            "Do you have an example of this being used within a console command?\n\nI'd be curious what the performance overhead is. My earliest console commands (nearly 2 years ago) would print status during each iteration (for a database migration) and I found the impact noticeable. After some time, I revised it to only print each X iterations, which often matched up with the batch size inserts/updates.\n\nBut for the last year, I've been using [declare(ticks=X)](http://php.net/manual/en/control-structures.declare.php) and have been quite happy with the results. By tuning the tick interrupt, the performance overhead is very small. It's especially helpful when dealing with processing code that is difficult to interrupt with a manual call to update the progress display, as PHP takes care of invoking the tick handler for me. I've thought about making such a console component helper for it, but I think the implementation is too invasive to abstract into a helper.\n\nHere's an example of it being used in OrnicarMessageBundle's [MongoDBMigrateMetadataCommand](https://github.com/ornicar/OrnicarMessageBundle/blob/master/Command/MongoDBMigrateMetadataCommand.php).\n",
            "Why does `1 sec` flash over to `1 secs` before `2 secs` is rendered?\n",
            "Per conversation with @stof in doctrine/DoctrineBundle#23, I'm also going to integrate the compiler pass (an abstract version both bundles can use) into this PR.\n",
            "Just realized there's an issue with the naming assumptions, since Doctrine ORM uses  doctrine  as its registry service ID but  doctrine.dbal  as its event manager prefix. Fixing.\n",
            "I second @stof's point here. This class is specifically for loading fixtures into application with a service container. Likewise, that is why the base class it inherits is in the common data-fixtures library.\n\nSince this is common to both ORM and ODM, the most logical home for it would be DoctrineCommonBundle, and I believe that's what the bridge is :)\n",
            "@fabpot: @stof is referring to FriendsOfSymfony/FOSUserBundle@6cbe4da32a58d9f8e4fc656dc22aea56c432d89d. A user of OrnicarMessageBundle alerted me to this issue.\n\nMy commit message above mentions two possible solutions. Either inheriting field types clear the text type's transformer chain before appending their own, or transformers are rewritten to no-op for empty strings in addition to `null`. I was in favor of the former option.\n\nRegarding #2421: Throwing an UnexpectedTypeException for non-string and non-numeric values (e.g. arrays, objects) seems like a non-essential convenience for the developer. The alternative is that you might end up seeing `Array` or an object's string representation printed in a text input field. I don't think it's too much to ask that developers catch that themselves -- and who's to say someone might not want to original behavior? Lastly, the role of the text type as a common parent should lead us to be very conservative about restricting its functionality.\n",
            "@bschussek: If FOSUserBundle's UsernameToUserTransformer transformer was prepended to the stack (ahead of ValueToStringTransformer), I assume `UsernameToUserTransformer::transform()` would execute before `ValueToStringTransformer::transform()`.\n\nDuring reverse transformation, would `ValueToStringTransformer::reverseTransform()` be called first?\n",
            "I'll recreate a new PR. I figured 2.0 would be acceptable since there were possible security implications. Thanks.\n",
            "http://www.youtube.com/watch?v=wjkdynBFHuQ&t=24s\n\n@bobthecow: please send me your mailing address.\n",
            "@schmittjoh brings up a good point here about anonymous users being returned. I remember now why it was removed in the first place.\n\nA small cookbook article could explain to users how to plug in their own SecurityContext with such a method implemented based on their specific needs.\n",
            "One question I came across while implementing this PR: the doc blocks in ContainerInterface reference InvalidArgumentException (actually the component's local SPL equivalent), but there is no practical need for that class to be used in the file. How will the API doc generator handle this? Do we need to change the doc block reference to the full class path?\n",
            "I'll update the exceptions in the dumped container code as well. Thanks for the feedback.\n",
            "Ok, this should be ready to review and merge. Tests needed some updating, but they still pass.\n",
            "That second merge doesn't look correct, either.\n\nTo @lsmith77's point, I'm fine if this change is better suited for the master branch, since it is a BC break. I didn't think it'd be a problem, since the methods I modified weren't labeled `@api`. Let me know if you'd like this rebased against master and submitted as a new PR, though.\n",
            "I would urge a reconsideration here as well. If not now, then perhaps in the near future when Travis CI's anticipated features come to fruition. The dot-file addition seems even less invasive than adding `composer.json` files to our various components, and both are strong gestures of support for these community initiatives.\n",
            "Done: #2223. I'll close this out and keep an eye out for when that commit makes its way back down to master.\n",
            "I'm a fan of using one character to get to the end of the inheritance tree (to the discussion of `end()` vs. `next()`) above. I don't think there's a big use case for extending a template in the middle of the chain - that would require at least four templates in the entire chain to be worthwhile, I believe. Otherwise, if you had three templates, the normal extension behavior (from the child-most template) would target the parent instead of grandparent.\n\nRegarding syntax, `!` reminds me CSS's `!important` syntax, which is about overriding in a different direction. My vote is for `^` as a single-character prefix.\n",
            "I was about to create a PR for this very same quirk, as this was causing my CDN's for various environments to all get merged together. I think we can get away with merging it directly to 2.0 since `assets_base_urls` are hardly covered in the documentation at all.\n\nOnce this gets merged, I wouldn't mind writing up a blurb on them to explain how the shorthand syntax works and this merging strategy.\n",
            "I just noticed this PR only fixes the `base_urls` config option under `packages`. We should also correct this behavior for `assets_base_urls`, which appears further up in FrameworkBundle's Configuration.php file.\n",
            "@schmittjoh: I have the second commit for this sitting in https://github.com/jmikola/symfony/tree/configFix (rebased on your branch) if you'd prefer to merge that into your branch to update this PR.\n",
            "@fabpot: I'll get on that now. Thanks!\n",
            "Done: https://github.com/symfony/symfony-docs/pull/714\n",
            "This is the Doctrine bridge equivalent for my fix to DoctrineMongoDBBundle: https://github.com/symfony/DoctrineMongoDBBundle/pull/42\n",
            "@fabpot: Should this be closed, or was that merge only into the 2.0 branch? It looks like an automated Github merge, but without my original commit.\n",
            "I do use listeners. This is just something I came across while writing some EventDispatcher unit tests.\n\n@schmittjoh: If the purpose was to avoid instantiating event subscribers, why does all the code pass around instances of subscribers instead of invoking this static method on the class? Shouldn't `EventDispatcher::addSubscriber()` instead take the name of a class, which should implement EventSubscriberInterface?\n",
            "I realize it's short notice, but is anyone available to speak for this in this week's developer meeting (5pm CET in #symfony-dev on Freenode)? I recall @Gregwar said he would be unavailable in his email yesterday.\n",
            "@Gregwar: it would probably be helpful to add some unit tests, if only for the transformer. We shouldn't get into the habit of introducing new functionality without test coverage.\n",
            ":+1: on dumping the environment at output. Does the debug option mean anything in this context, though?\n",
            "@fabpot: Would translators allow the message to be customized on a per-form basis?\n\nIt's fine either way, as our only priority is changing the default message. Thanks for the pointer. I'll try to submit our translator solution to the docs as a recipe when it's working.\n",
            "@shieldo: I developed a work-around some time ago: https://github.com/symfony/symfony/pull/2223\n\nIf you configure your asset packages to use SSL for all of their base URL's, request scoping will not be introduced. The individual, named asset packages will not have a request scope (see: `FrameworkBundle::createPackageDefinition()`), nor will the package manager (see `registerTemplatingConfiguration()`). In any other situation, the request dependency exists because we need to know what the current protocol is to select a base URL. \n",
            "@bschussek: Why did the Tests counterpart of FormInterface extend Iterator instead of IteratorAggregate?\n\nI don't think it's PHPUnit's job to add additional interfaces to a mock - even if Traversable is a special case. Traversable seems akin to Closure, in that it exists and may be used for type checking, but it isn't intended to be implemented or extended directly. That's why I feel FormInterface was in need of a fix.\n",
            "I concede the point. Thanks for taking the time to discuss :+1:\n\nIf you think it's worthwhile, I'd suggest a comment block atop the Test FormInterface interface explaining why it exists. And maybe even in the real FormInterface, to say that inheriting classes must implement one of the two iterator interfaces. I can imagine this tripping up some developers down the line, especially if folks are writing their own unit tests without examining those in the Form component.\n",
            "Should the UrlValidator be refactored to piggy-back on the IpValidator for the host part? Looks like some duplication there, and UrlValidator appears to be incomplete in its current form.\n",
            "Not sure if `parse_url()` makes sense here, as based on [this comment](http://www.php.net/manual/en/function.parse-url.php#90365) where someone had to augment it with ipv6 support. How would `parse_url()` compare with `filter_var()`?\n\nI think even with the EmailValidator, we kind of agreed to settle for `filter_var()` for email just to keep things sane. Its regex is configurable in php.ini, and the whole issue of finding that perfect regex was too much :)\n",
            "I don't think a blanket disabling of interface injection due to the presence of a single method call in the concrete definition will work. If that method call doesn't conflict with the add()/set() calls of the interface, there's really nothing to even fix.\n\nIdeally, I'd want some way to intelligently decide between the conflicts states.\n- Method calls exist in the definition; regardless of whether the interface specifies them, disable interface injection (what this PR does originally)\n- Method call exists in both the definition and interface. Allow method calls to stack (what currently happens)\n- Method call exists in both the definition and interface. Ignore method calls in interfaces that are already in the definition (or a previous interface?)\n- Possibly more that I'm missing\n\nIn either case, adding a flag to the method call that tells us where it came from is helpful. As custom compiler passes could easily implement any of these strategies.\n\nAs discussed in IRC, you're leaning towards a single config option to turn interface injection on/off on a per-service basis. We probably want such a config option to live on the service definition itself.\n",
            "> And saying that you need to have code assist etc to create a  Enterprise scale application  is plain stupid but we can ask the OpenSky guys what they use ? \n\n@henrikbjorn, we have people using stuff ranging from from vi to eclipse. I've personally had no luck excluding these files from my build path. Although my project settings have:\n- Included: (All)\n- Excluded: opensky/cache/*\n\nEclipse continues to call up 4-5 copies of core classes with its auto-complete. One of those is the real file and the rest are duplicates from the multiple cache files. I'm unsure if this is the result of my own error with the configuration or some fault of eclipse.\n",
            "Pinging @lsmith and @paschke to take a look at this, as well.\n\nTo summarize the use case that necessitated this PR:\n\n> Bulat and I are doing something with social sign-on, where a user might be authenticated with a facebook/twitter token and end up logging in to their native username/password account. Our business requirements dictate that we link the social account to their native account, and to do so, we needed to determine (within the single request that the user logs in) what their original and new tokens are, so that we can establish a link in User object of the new token. The security component's only events are switching users (i.e. impersonation) and interactive login, and there's no hooks in services between the token being unserialized from the session and the user logging in. I proposed having a new event after unserialization from the session, to be dispatched at the end of ContextListener::handle(), which would allow the develop to inspect the SecurityContext before an authentication listener took effect.\n",
            "Just to clarify: Gigya is a wrapper for various social services' OAuth systems (e.g. Facebook, Twitter). When we use their API, Gigya provides us with their own ID, which is what Bulat is storing in his token.\n\nWe can all agree a hidden input isn't an optimal solution, as it invites the user to alter the data (via Firebug or some other mechanism).\n\nAs for session-stashing, one concern is stale data remaining in the session. I'm sure we've experienced this with post-login redirects:\n- User tries to access some protected URL (e.g. `/account/address-book`) and is redirected to `/login`\n- User decides not to log in and instead browses elsewhere on the site. The stashed URL would usually be read and removed after logging in, but since that didn't happen, it stays in the session\n- User later decides to use a generic, non-interruptive login form\n- After logging in, they're redirected to `/account/address-book` because that was the last, stashed post-login redirect URL\n\nA similar issue could occur if we stashed the previous token or Gigya user ID, and linking accounts is far more serious business than post-login redirect URL's.\n\nSaving the Gigya token data in a session flash attribute when the login form is rendered is also not ideal as those volatile attributes could disappear if the user opens an another on-site page in the background, or some AJAX request is fired off behind the scenes.\n\nFor these reasons Bulat and I saw that it was imperative we handle the account linking during a single HTTP request. Even outside of this admittedly very specific use case, can we really say there's no reason a developer might need or want to know that user A is transitioning their authentication state to user B? What about for analytics or auditing, to help track which users are sharing accounts on a single computer/browser?\n\nWithout a dispatched event, our best alternative appears to insert an onCoreRequest listener before the security component kicks in and read the serialized token directly from the session ourselves by hard-coding the expected session key: `'_security_'.$contextKey` (as much of a hack as that is).\n",
            "The interactive login event is presently only dispatched from:\n- AbstractAuthenticationListener\n- AbstractPreAuthenticatedListener\n- RememberMeListener\n\nIn addition to BasicAuthenticationListener, perhaps DigestAuthenticationListener also needs this change.\n",
            "Doesn't that argument apply to pre-authentication as well? The HTTP and pre-auth mechanisms can both be stateless.\n\nWe are using event listeners to track and update timestamps for site activity by logged in users. Originally, we hacked up AuthenticationTrustResolver to add extra logic around the remember and fully-authenticated roles, but we found a conceptually cleaner solution by using a custom voter.\n\nWe initialize a timestamp in response to logging in, and on subsequent requests, we bump the timestamp if it's within 15 minutes. If there's a 15 minutes gap in activity, the timestamp doesn't get bumped. The voter can then check if the timestamp is recent and conditionally grant a role (e.g. HAS_USER_ACTIVITY).\n\nFor functional testing, we use http_basic in stateless fashion in place of form logins. That's where Bulat noticed that the security interactive login event was not being fired.\n",
            "Thanks for doing this. I remember wishing that this functionality existed a while back :)\n",
            "Those were actually the only authentication providers I saw that create new tokens.  The others tend to return the original token, so there's no problem.\n\nAlso, since PreAuthenticatedTokens are not immutable by default (afaik), one alternative solution I had for PreAuthenticatedAuthenticationProvider was to:\n\n```\n$token->setAuthenticated(true);\n$token->setRoles($user->getRoles());\nreturn $token;\n```\n\nInstead of creating a new token.\n",
            "What is the need to apply security firewalls to sub-requests?  Is that something Spring implements (considering Spring is the model for Security component)?\n\nI could see perhaps for ACL restrictions on methods (I believe that uses annotations), but as for firewalls, those seem relevant only for master requests and routes.  Internal sub-requests are essentially invoking other controller methods directly with a derivative Request object.\n",
            "Bad pull request; please ignore.\n",
            "Made this against symfony/symfony instead of fabpot/symfony by mistake.\n",
            "Assuming symfony and fabpot are both remotes on your fork, consider using `git pull --rebase fabpot master` to merge in upstream changes, which should eliminate the  Merge remote branch  commits in your own repository.  For more info, see:\n\nhttp://www.doctrine-project.org/contribute#contributor-workflow:keeping-your-master-up-to-date!\n",
            "Please disregard this pull request, as their were irrelevant commits and other things were quite out of sync with the current master; made a newer one in: http://github.com/fabpot/symfony/pull/17\n",
            "Looks like it was just a recent mistake in 5b496acacf2d9234228844a6c08e7156bbb1d8eb when the `sprintf()` was added.\n\nThe DB handler class doesn't have any unit tests, and the functional test doesn't check garbage collection. I noticed it while implementing the MongoDB handler in #2031.\n",
            "@weierophinney: Keep in mind the DB writer is still an open issue to be fixed. Currently, I imagine a user would run into an exception trying to insert a DateTime instance. See [this comment](https://github.com/zendframework/zf2/pull/2029#discussion_r1274668).\n",
            ":+1: for making this behavior configurable via a separate option, even if the default behavior is to keep output buffering enabled.\n",
            "This isn't specific to the Log component, since none of the ZF2 composer.json files have a description field, but:\n\n```\n$ composer.phar validate\n./composer.json is valid for simple usage with composer but has\nstrict errors that make it unable to be published as a package:\nSee http://getcomposer.org/doc/04-schema.md for details on the schema\nPublish Error: description : is missing and it is required\n```\n\nDo you know if that is something on the TODO list before the final release?\n",
            "@romainneutron: Are there implications here for the command wrapping already done for Sigchild compatibility?\n\nSee: https://github.com/symfony/Process/blob/master/Process.php#L1117\n\n```\nif ($this->enhanceSigchildCompatibility && $this->isSigchildEnabled()) {\n    // last exit code is output on the fourth pipe and caught to work around --enable-sigchild\n    $descriptors = array_merge($descriptors, array(array('pipe', 'w')));\n\n    $this->commandline = '('.$this->commandline.') 3>/dev/null; code=$?; echo $code >&3; exit $code';\n}\n```\n",
            "No, I was curious if using `exec` to effectively replace the `sh` process (instead of having our process launched as a child of `sh`) would still work if we wrap `$this->commandline` in parentheses.\n",
            "Reading through the thread and noting comments comparing Symfony 1.4 to 2.x, it seems that some might be missing the connection of our current implementation with [JSR 303](http://jcp.org/en/jsr/detail?id=303). Validation was completely decoupled from forms and models were responsible for defining their own constraints, so it was never a question of validating the models themselves.\n\nStill, I'd reckon that most of us, myself included, have been bitten by invalid data remaining set on our models. A memorable bug at OpenSky was the user profile form allowing the user's session object to become corrupted, since the objects were one and the same thanks to Doctrine's persistence layer (cloning was the solution there :).\n\n@bschussek: If I read the above correctly, constraints at the form level will require validation before anything is set on the model, and then we'll still keep model constraints to be validated after the data is bound to an underlying object? If so, that seems like a good compromise (noting the BC breaks) to appease folks looking for Symfony 1.4 behavior and those comfortable with the newer design.\n",
            "Just responding since I was mentioned here. I only popped up in #1951 because I asked for a status update for an IRC meeting. For the record, I don't have any opinion on either of these issues as I've not hit a limitation with the Form component.\n\nTo @stof's point, however, I'm much more in favor of allowing JS to utilize progressive enhancement of actual form fields. That means I would not render anything as hidden in the HTML source only to have JS come in an inject some UI widget. If forcing hidden output is vital, couldn't you do it at the template level with a combination of theming and Twig methods?\n",
            "This PR seems to have inadvertently alerted a large number of Symfony contributors via GitHub. I suggest doing a hard reset of your `ticket_7196` branch to `symfony/master` (or deleting and recreating it) and chery-picking your commit, https://github.com/mmucklo/symfony/commit/0d2eea24bd321bf8c01c222a04595b816dcf8579, into it. Force push back to your GitHub fork and this PR should rectify itself and only show the single commit.\n",
            "What is the crash, exactly? Are you using attempting to use a TTL index with the timestamp BSON type used in the session handler?\n\nThe changes you're requesting were implemented in #5916 and purposely not merged into the 2.1 branch due to BC breaks, one of which was changing the timestamp to a date type.\n",
            ":+1:\n",
            "Lots of test failures, but they appear to be unrelated.\n",
            "@fabpot: Please let me know if these do not merge up to master smoothly. I'm not sure what, if anything, changed there.\n",
            "@dlsniper: Admittedly, there were a number of poor implementation decisions in the original driver(s), and we've been trying to clean things up without breaking too much BC.\n\nIn this case, Mongo extends MongoClient, which means we can't simply leave Mongo as a type hint. And for BC, we can't do the inverse. I suggest we allow users to pass in either. I can work on a PR for this as soon as I'm done updating Doctrine. In the meantime, let users continue to provide a Mongo instance. I doubt many Symfony folks are using 1.3.0 yet, since Doctrine doesn't support it.\n\nOne option for insulating Symfony from this in the future would be using [doctrine-mongodb](https://github.com/doctrine/mongodb) (the abstraction library, not ODM) and its connection class. I'd defer to higher powers on that decision, though.\n\nAs for future BC breaks, the Mongo class will stick around until version 2.0, I believe. I think we can make a change now that anticipates old and new behavior, and simply allow either class to be passed if it exists.\n",
            "@hhamon: Can you assign this ticket to me?\n",
            "@stof: Thanks, I forgot that was the case. Removed my request from the ZF2 ticket :)\n",
            "Totally. I'm flying between Turkey and New York tomorrow and if I have wifi on the plane (good chance) I'll check this out. Otherwise, later in the week.\n",
            "@dlsniper: Had no wifi on the plane, but I'm available to work on this now. How can we go about it?\n\nShould I submit a PR against your branch? Then you can accept that and my commit should show up in this PR.\n",
            "FYI: the Travis CI build failure looks unrelated to these changes (something to do with Form tests): https://travis-ci.org/#!/jmikola/symfony/jobs/3076587\n",
            "Thanks, @stof. That looked like something @pborreli would have caught sooner or later :)\n",
            "@fabpot: If this is now in master, should I leave a note about the BC break in another changelog (e.g. UPGRADE-2.2.md), or is that unnecessary for such a small feature.\n",
            "I reduced the file to the  Contributing  block from the readme.\n",
            "Without the `class` option provided, a `null` class value gets passed to the object manager's `getClassMetadata()` method, which results in a PHP error in `class_parents()`:\n\n```\n1) Doctrine\\Bundle\\MongoDBBundle\\Tests\\Form\\Type\\DocumentTypeTest::testDocumentManagerIsReturnedWhenGettingEm\nclass_parents(): object or string expected\n\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/RuntimeReflectionService.php:40\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:257\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:281\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/common/lib/Doctrine/Common/Persistence/Mapping/AbstractClassMetadataFactory.php:205\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/doctrine/mongodb-odm/lib/Doctrine/ODM/MongoDB/DocumentManager.php:292\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Bridge/Doctrine/Form/ChoiceList/EntityChoiceList.php:102\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php:121\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:466\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:308\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/OptionsResolver.php:231\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormType.php:116\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:99\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:50\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/Tests/Form/Type/DocumentTypeTest.php:41\n```\n\nAdditionally, omitting the `em` option leads to another PHP error as `null` is passed to `spl_object_hash()`:\n\n```\n1) Doctrine\\Bundle\\MongoDBBundle\\Tests\\Form\\Type\\DocumentTypeTest::testDocumentManagerIsReturnedWhenGettingEm\nspl_object_hash() expects parameter 1 to be object, null given\n\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Bridge/Doctrine/Form/Type/DoctrineType.php:103\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:466\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/Options.php:308\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/OptionsResolver/OptionsResolver.php:231\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/ResolvedFormType.php:116\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:99\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/vendor/symfony/symfony/src/Symfony/Component/Form/FormFactory.php:50\n/home/jmikola/workspace/doctrine/DoctrineMongoDBBundle/Tests/Form/Type/DocumentTypeTest.php:41\n```\n\nHowever, I'm hesitant to require the `em` option, as non-ORM types extending DoctrineType may use their own option (e.g. `document_manager`) and set the `em` option internally. Requiring `em` at the OptionsResolver level seems to throw an exception before we can copy the option.\n",
            "Looking a bit more into the `em` option and the `spl_object_hash()` error, it looks like the `$choiceList` option Closure is executing before the `em` option's normalizer Closure, which should set an empty `em` option by running the `class` option through `getManagerForClass()`. I'd reckon that's a bug, since `em` need not be provided.\n",
            "2cc7d2f44f4c1252dd2ac9964f0f92dce96f051b should be a failing test case at the moment.\n",
            "The `em` option definitely should not be required, but the test case above (for inferring it based on `class`) fails because of `Options::all()`:\n\n```\npublic function all()\n{\n    $this->reading = true;\n\n    // Performance-wise this is slightly better than\n    // while (null !== $option = key($this->lazy))\n    foreach ($this->lazy as $option => $closures) {\n        // Double check, in case the option has already been resolved\n        // by cascade in the previous cycles\n        if (isset($this->lazy[$option])) {\n            $this->resolve($option);\n        }\n    }\n\n    foreach ($this->normalizers as $option => $normalizer) {\n        if (isset($this->normalizers[$option])) {\n            $this->normalize($option);\n        }\n    }\n\n    return $this->options;\n}\n```\n\n`em` is only inferred from `class` by its normalizer, but normalization happens after resolution and the resolving closure for `choice_list` depends on `em` being an object.\n",
            "One possible solution would be to duplicate the `em` normalization within `choice_list`'s closure in order to compute the SPL object hash. Otherwise, I imagine the `choice_list` logic would have to take place in a normalizer; however, that would be quite fragile, as it'd depend on `em` appearing first in the normalizer array.\n",
            "I think EntityType is affected by this. See 2cc7d2f44f4c1252dd2ac9964f0f92dce96f051b\n",
            "We were waiting for @bschussek to follow-up. I'll try to sit with him today if he arrives before I leave to catch my plane.\n",
            "Resubmitting against 2.1 in #5632.\n",
            "@eriksencosta: That resolved the Brazilian currency tests, although the date test still fails.\n\nIs the necessity of `build-data.php` documented anywhere? I either missed it, or we should probably add it somewhere :)\n",
            "```\n$ uname -a\nLinux honeydew 3.2.0-29-generic #46-Ubuntu SMP Fri Jul 27 17:03:23 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux\n\n$ php -v\nPHP 5.4.4-4~precise+1 (cli) (built: Aug  6 2012 13:01:46) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\n```\n\nTimezone is  America/New_York . Thanks.\n",
            "```\n$ which icuinfo\n/usr/bin/icuinfo\n\n$ icuinfo \n<ICUINFO>\nInternational Components for Unicode for C/C++\n Copyright (C) 2011, International Business Machines Corporation and others. All Rights Reserved. \nCompiled-Version: 4.8.1.1\nRuntime-Version: 4.8.1.1\nCompiled-Unicode-Version: 6.0\nRuntime-Unicode-Version: 6.0\nPlatform: U_LINUX\nBuild: x86_64-pc-linux-gnu\nC compiler: gcc\nC++ compiler: g++\nICUDATA: icudt48l\nData Directory: \nICU Initialization returned: U_ZERO_ERROR\nDefault locale: en_US\nCLDR-Version: 2.0.1\nDefault converter: UTF-8\nDefault TZ: US/Eastern\nTZ data version: 2011k\nPlugin file is: /usr/lib/icu/icuplugins48.txt\n</ICUINFO>\n```\n",
            "I believe this is now fixed by #6109 and can be closed.\n",
            "I'm in favor of keeping the  children  terminology, especially given that  root  and  parent  are still being kept. This is a tree structure (forms within forms), and readability in the code itself is important.\n\n@weaverryan makes a good point that we don't even have to document this name, since there exists a more convenient way of traversing the tree.\n",
            "I realize documentation usually strays from discussing internals in detail, but perhaps it would make sense to clarify how forms are organized internally. Introducing forms as a tree structure should be straightforward for most developers.\n",
            "What about `Options`? I think the verb (e.g. handling, parsing, resolving) is implicitly understood.\n\nOtherwise, I'd suggest Option(s)Resolver based on the proposed suggestions.\n",
            "@bschussek: if `configure()` isn't mandated by an interface, I don't see the harm in using it for examples since users would be free to name it whatever the like. `initOptions()` is also a fine choice.\n",
            "What about `Options`? I think the verb (e.g. handling, parsing, resolving) is implicitly understood.\n\nOtherwise, I'd suggest Option(s)Resolver based on the proposed suggestions.\n",
            "@bschussek: if `configure()` isn't mandated by an interface, I don't see the harm in using it for examples since users would be free to name it whatever the like. `initOptions()` is also a fine choice.\n",
            "Ah, thanks for that. I hadn't seen that PR before. There's certainly nothing to fix for Symfony2 here, so I'll close it out.\n",
            "@bschussek: I recently upgraded our Symfony submodule to yesterday's pointer, as we needed all of the recent Form PR's. This one obviously is not in our fork, since it has yet to be merged.\n\nWe're still having an issue with a string-based date field. We have a custom form type that uses DateType as its parent, and sets the `widget` option's default value to `single_text`. The problem is that the field ends up being created with a data mapper. I believe this is due to:\n\n> [BC BREAK] FormType::getParent() does not see default options anymore\n\nThe rest of the default options in the base DateType include my child type's default as I'd expect, but the form type itself isn't correct (well, it's technically  correct  given the noted BC break, but it's broken for me :)\n\nWill this PR address the issue of option defaults being used to decide parent types? For now, we can get by with redundantly specifying the `widget` option when building the form that uses our custom field.\n",
            "Thanks, @bschussek \n",
            "@fabpot: Since the original fix was reverted, perhaps this should be re-opened pending more investigation?\n\nExercise.com is suffering from this in PHP 5.3.9 (CentOS). OpenSky is currently using PHP 5.3.14 (binary from a custom Fedora repository) and hasn't experienced the problem. That would agree with the above comments:\n\n> @sensi: Doesn't work: PHP 5.3.3-7+squeeze8 with Suhosin-Patch (cli), PHP 5.3.10 (cli) (built: Feb 3 2012 08:20:28)\n> \n> @lautr: Doesn't work in 5.3.3-7+squeeze8, works in 5.3.11-1~dotdeb.0\n\nIf something in the 5.3.11 release fixed this, I can't make it out from the [changelog](http://www.php.net/ChangeLog-5.php#5.3.11).\n",
            "An additional point to consider might be APC. Exercise.com has 3.1.3p1 and OpenSky has 3.1.6. The [APC changelog](http://pecl.php.net/package-changelog.php?package=APC) includes some fixes between those releases for file path resolution.\n",
            "@marijn The user can be a string, as in the case of HTTP basic auth in its simplest form. The thing to note is that AnonymousAuthenticationListener is actually populating the token with a valid user when it uses the  anon.  string. There is nothing about that string that implies that user isn't logged in.\n\nThe logic that respects anonymous users rests in the AuthenticationTrustResolver implementation, which does a class check on the token itself (an AnonymousToken). You can open up AuthenticatedVoter and see how that logic is used to vote on the three main full, remembered, and anonymous roles.\n",
            "Indeed, I'm aware of the general scope of the error. This was just a tangible test case based on the example @merk discussed in #3354. `empty_data` is one of the few options set by FieldType, so it was a very simple example of the BC break.\n",
            "@Burgov, ah I saw your original PR and went along with this because of @stof's comment. Looks like you reached a working solution since then, though :+1:\n",
            "FYI: #3789 includes this commit, so we can close this once that is merged.\n",
            "Thanks for the repro steps, @maoueh. I'll look into this.\n",
            "@Seldaek: I aim to write a longer cookbook entry on this very soon. I only opted to include a config snippet here because other bullets had them as well. And an example often does a better job of explaining than a wordy paragraph.\n",
            "The handler services were removed in symfony/symfony@93d81a171c464655d0c03387d498d4b610e24a86.\n\n@ericclemmons: I experienced a similar issue, but it was due to Symfony ignoring the `session.save_handle` INI setting (where I had configured memcache) and electing to use file-based sessions by default -- in the cache directory, of course. This caused some confusion on production, since we have multiple web servers. Users would get logged out if the load balancer routed them to a new server.\n\nBeyond the `handler_id` setting in `framework.session`, I'm not sure there is anything to be done in Symfony. Long before @drak's session refactoring, we used to have configuration options for PDO and other storage mechanisms available, but that was quite hairy, as all options were lumped together (e.g. cookie settings, database connection).\n\nI spoke with @drak a few nights ago about having FrameworkBundle infer the session handler based on INI settings, but there's an argument to be made that it's less explicit. I suppose either solution could be considered magic to some degree, so solving this with thorough documentation is probably the best approach.\n\nPerhaps I can create a bundle that would take care of automatically configuring the session based on INI settings if there would be interest in such a thing. I solved the above issue in my application with an explicit session handler service definition and passing its ID to `handler_id`.\n",
            "I just noticed that 88ef52d27230c0b06d8b2e2e3e38c4934894e634 was implemented without altering any tests. @craue: can you come up with a failing test case for how this should work and submit that in a PR? That might give @bschussek (or anyone else) something to work with to attempt a fix.\n",
            "Is simply reverting 88ef52d27230c0b06d8b2e2e3e38c4934894e634 an option? Obviously not in symfony master, but in our own forks?\n",
            "I came up with a temporary work-around the `data_class` processing if anyone is interested: https://gist.github.com/2165584\n\nThis is hardly a proper fix, but this is working for me, as the most significant issues in my application the `empty_data` Closure no longer being created by the FieldType parent.\n",
            "@bschussek Thanks for popping in. I haven't look at this at all, but it might save some time to examine #3512 before you attempt a fix. That PR has worked for a number of folks afflicted by this bug.\n",
            "@fabpot: Is this PR still off the table, or are you reconsidering it with the `--prefer-source` option? I was just running symfony unit tests, and attempted to install deps with composer as I thought this PR or another like it had recently been merged to core. It wasn't :)\n\nAdmittedly, it's a downside that vendor libs, even if git repositories, will be nestled within the `.composer/` directory.\n",
            "@phreaknerd: Can this be closed? Github didn't auto-close this because  Fix issue #3251  probably wasn't picked up by its own issue-closing hook.\n",
            "I'll take this one.\n",
            "@fabpot: @stof is referring to FriendsOfSymfony/FOSUserBundle@6cbe4da32a58d9f8e4fc656dc22aea56c432d89d. A user of OrnicarMessageBundle alerted me to this issue.\n\nMy commit message above mentions two possible solutions. Either inheriting field types clear the text type's transformer chain before appending their own, or transformers are rewritten to no-op for empty strings in addition to `null`. I was in favor of the former option.\n\nRegarding #2421: Throwing an UnexpectedTypeException for non-string and non-numeric values (e.g. arrays, objects) seems like a non-essential convenience for the developer. The alternative is that you might end up seeing `Array` or an object's string representation printed in a text input field. I don't think it's too much to ask that developers catch that themselves -- and who's to say someone might not want to original behavior? Lastly, the role of the text type as a common parent should lead us to be very conservative about restricting its functionality.\n",
            "@bschussek: If FOSUserBundle's UsernameToUserTransformer transformer was prepended to the stack (ahead of ValueToStringTransformer), I assume `UsernameToUserTransformer::transform()` would execute before `ValueToStringTransformer::transform()`.\n\nDuring reverse transformation, would `ValueToStringTransformer::reverseTransform()` be called first?\n",
            "Odd that Travis CI reported a build failure for PHP 5.3.2, but both 5.3 and 5.4 passed: http://travis-ci.org/#!/jmikola/symfony/builds/463356\n\nMy local machine passes as well.\n",
            "@schmittjoh: Please let me know your thoughts on the last commit. I think it would be overkill to add support for another handler service and/or error page just for logout exceptions.\n\nPerhaps as an alternative, we might just want to consider an invalid CSRF token on logout imply a false return value for `LogoutListener::requiresLogout()`. That would sacrifice the ability to handle the error separately (which a 403 response allows us), although we could still add logging (currently done in ExceptionListener).\n",
            "@schmittjoh: ping\n",
            "Will do.\n",
            "```\n[avocado: symfony] logout-csrf (+9/-216) $ git rebase master\nFirst, rewinding head to replay your work on top of it...\nApplying: [SecurityBundle] Add functional test for form login with CSRF token\nApplying: [Security] Refactor LogoutListener constructor to take options\nApplying: [Security] Allow LogoutListener to validate CSRF tokens\nApplying: [SecurityBundle] Templating helpers to generate logout URL's with CSRF tokens\nApplying: [SecurityBundle] Fix execution of functional tests with different names\nApplying: [SecurityBundle] Use assertCount() in tests\nUsing index info to reconstruct a base tree...\nFalling back to patching base and 3-way merge...\nApplying: [Security] Use LogoutException for invalid CSRF token in LogoutListener\n\n[avocado: symfony] logout-csrf (+7) $ git st\n# On branch logout-csrf\n# Your branch and 'origin/logout-csrf' have diverged,\n# and have 223 and 9 different commit(s) each, respectively.\n#\nnothing to commit (working directory clean)\n\n[avocado: symfony] logout-csrf (+7) $\n```\n\nAfter rebasing, my merge commits disappeared. Is this normal?\n",
            "The merge commits are not present in `git log master..logout-csrf`. Perhaps it used those merge commits when rebasing, as there were definitely conflicts resolved when I originally merged in symfony/master (@fabpot had made his own changes to LogoutListener).\n\nI'll force-push the changes to my PR brange. IIRC, GitHub is smart enough to preserve inline diff comments, provided they were made through the PR and not on the original commits.\n",
            "That worked well. In the future, I think I'll stick to merging upstream in and then rebasing afterwards. Resolving conflicts is much easier during a merge than interactive rebase.\n",
            "@fabpot @schmittjoh: Is there anything else I can do for this PR? I believe the exception was the only outstanding question (see: [this comment](https://github.com/symfony/symfony/pull/3007#issuecomment-3835716)).\n",
            "Will do. I need to do a PR against the Symfony2 documentation as well.\n",
            "@stloyd: #3507\n",
            "In hindsight, _all_ cases would require an intermediary wrapping method in the helper. I just realized that `Twig_Function_Method` requires a `Twig_ExtensionInterface` instance as its first constructor argument.\n",
            "@stof: Good point. In that case, I suppose the SecurityBundle's Twig extension is still a candidate for refactoring, though. I did this in #3007 with a second extension I added. Any objections?\n",
            "I second @kriswallsmith's :+1: to this idea.\n",
            "I second @kriswallsmith's :+1: to this idea.\n",
            "I don't mean to bikeshed, but I strongly agree with @schmittjoh about implications of  compare . I'm not concerned with the interface name so much as I am with `compareUser()`. Given that this method returns a boolean, I think it's best to prefix it with `is` (e.g. `isSameUser`, `isUserEqualTo`) or `equals` (e.g. `equalsUser`).\n\nIn this PR, the Token class is implementing the interface, so I think having  User  in the method name is a good idea. Naturally, if the interface was intended for User classes, we could do without it.\n",
            "@canni: My mistake, I got confused between the Token method and interface method, which you've since renamed in canni/symfony@fcfcd1087b67886b34a7e9ff01f4864d7e845844.\n",
            "I don't mean to bikeshed, but I strongly agree with @schmittjoh about implications of  compare . I'm not concerned with the interface name so much as I am with `compareUser()`. Given that this method returns a boolean, I think it's best to prefix it with `is` (e.g. `isSameUser`, `isUserEqualTo`) or `equals` (e.g. `equalsUser`).\n\nIn this PR, the Token class is implementing the interface, so I think having  User  in the method name is a good idea. Naturally, if the interface was intended for User classes, we could do without it.\n",
            "@canni: My mistake, I got confused between the Token method and interface method, which you've since renamed in canni/symfony@fcfcd1087b67886b34a7e9ff01f4864d7e845844.\n",
            "Ping @bobthecow: didn't we talk about doing this with Symfony2's existing Form component last month?\n",
            "@bobthecow: was that just for binding a field you printed in HTML manually? Thinking about this some more, the current form requires a name to render its fields, which means any field would at least have one level of nesting (e.g. `formName[fieldName]`).\n",
            "It's quite possible that the WDT is being displayed for a page rendered on a POST request. In that case, providing the user with a close button to return to the previous URL via a GET request would be unintuitive (and quite possibly lead to an error).\n\nTaking a second look at  Profile for:  line in the WDT, I think an improvement would be prefix it with the HTTP method used to render the page being profiled. The fact that the URL is a hyperlink is already a convenience.\n",
            "Great work. For syntax highlighting on the PHP snippets, you could add  php  after the three backticks.\n",
            "Re-opening this, as it looks like @barros001 is experiencing the same thing, per his comments in #2139.\n",
            "Thanks @fabpot! I was scratching my head over this at the #sfdaycgn hackday.\n",
            "Ok. I'll give it a shot and add some tests.\n",
            "@fabpot: Sorry, I completely lost track of this issue and never got to work on the PR. Yes, `checkRequestPath()` was what caught my eye. If the path doesn't start with `/`, it's only checked as a route name. In your opinion, is it still worthwhile to add this, or should the doc block never have said absolute URL's were supported?\n\nI still have no qualms about taking on this task :)\n",
            "Doh! Didn't even think to do that for such a small change.\n\nI will investigate further. Do you have any idea how one can generate templates (which call the `asset()` function) during a console script?\n",
            "Thanks @henrikbjorn. So, it appears the default behavior of the asset helper is to use the request path as the base URL for assets. In my particular case, I didn't get this scope-widening exception at runtime because I use `assets_base_urls`, which results in the request-independent UrlPackage being injected instead of PathPackage.\n\nThis is tricky. I think there's definitely a use case for folks rendering templates outside of a request. Sending HTML emails via some console command is perhaps the most common example. Also, if those developers are not using a CDN, they likely won't think of using `assets_base_urls` at all. Unfortunately, that appears to be the only configuration option where the site's domain is specified (outside of, say, a session domain).\n",
            "Well, we actually already have two services. I think that's why PathPackages and UrlPackages are distinct. The issue is that the asset helper has been assigned the request scope to accommodate to satisfy the most restrictive possibility.\n\nI don't think two separate asset helpers would help the developer, even if it'd let us get passing tests.\n\nAlso, there is a very real use case here that I wasn't struggling with. You want to render templates with asset paths outside of a request (from a console command). In that case, you need a base URL, but where do you get that from?\n\nHas anyone else encountered that requirement? I know we definitely did at OpenSky, and now at Exercise.com.\n",
            "Had a chat with @kriswallsmith today. We brainstormed and came up with the idea of simply adding `strict= false ` to the request arguments of these templating services. That would disable the premature scope exception, but lead to different kind of error if the user attempted to call `asset()` when using a PathPackage (no `asset_base_urls` and no UrlPackage in play).\n\nThe PathPackage class in the templating component obviously has no request dependency -- just the FrameworkBundle version. I started modifying FrameworkBundle's PathPackage to make the Request usage optional (if it's not available, an empty base path is provided to the parent constructor, which actually works fine).\n\nIn the course of implementing that, I made the request argument `strict= false  on-invalid= null ` and encountered some strange behavior (possibly a bug) where the PathPackage service generated in FrameworkExtension via the DefinitionDecorator was not inheriting the strict/invalid properties. If I removed `on-invalid= null , strictness was inherited just fine. I'm going to continue looking into this, but at this point it seems like that may be a separate PR if it is, indeed, a bug.\n\nJust going to paste my chat transcript with Kris here for some extra context:\n\n```\n<jmikola> if you have a moment later, could you chime in on https://github.com/symfony/symfony/pull/2223 ?\n<jmikola> it's about using the asset() helper from a console command\n<jmikola> i could have sworn we were sending emails like this in opensky, from console commands\n<jmikola> doing the same thing for exercise, but the request scope on the asset helper is a cog in the gear\n<kris>    you don't have base urls configured?\n<jmikola> we do\n<jmikola> but the service is request-scoped because it doesn't know until runtime if it will be using UrlPackage or PathPackage\n<jmikola> and PathPackage depends on the request object\n<kris>    yeah, it's tricky\n<jmikola> so i think the scope was added to handle the most restrictive case\n<jmikola> no way around that except to remove the scoping at runtime i suppose\n<kris>    we can tweak the scope in a compilation pass\n<kris>    but that could create some wtfs\n<jmikola> why?\n<jmikola> because some asset() calls might specify a package name?\n<jmikola> without base_url's?\n<kris>    what about setting strict to false?\n<jmikola> i haven't played with package names but i think that's how it works\n<jmikola> ah, what's the problem with that again? i know it disables the exception\n<jmikola> but if strict is false, what's the benefit of having request scope at all?\n<kris>    there are a lot of instances of strict= false  in the core\n<jmikola> if strict is false, the scope becomes just documentation?\n<jmikola> i'm drawing a blank on how that works - i just know strictness turns on the exceptions for widening violations\n<kris>    right\n<kris>    it means that helper would no longer be in the request scope, even though it uses a service from the request scope\n<kris>    i think that would be fine\n<jmikola> ah, strict=false goes on the service argument\n<jmikola> does that mean we'd apply that to the definition of templating.asset.path_package ?\n<kris>    yes\n<jmikola> or just when PathPackage becomes an argument to the helper?\n<jmikola> ok\n<kris>    whatever uses the request\n<jmikola> and this would still cause havoc if I didn't define base_urls and tried to call asset() :)\n<jmikola> i suppose in the form of null passed when Request instance expected?\n<jmikola> or worse, undefined service request\n<kris>    right...\n<jmikola> ok\n<kris>    so maybe we need a way to manually define the base path\n<jmikola> for PathPackage\n<kris>    right, i think that's what's in the component\n<jmikola> UrlPackage only comes into play if there's 1 or more assets_base_urls defined, right?\n<kris>    right\n<jmikola> i'm looking at it, and am curious what happens if it was constructed with no base urls :)\n<jmikola> since there's no checks that the array is full\n<jmikola> *non-empty\n<jmikola> ah, if it's empty it uses '' as the base Url\n<jmikola> Perhaps PathPackage in FrameworkBundle could make the request optional\n<jmikola> the core PathPackage does support an empty baseUrl\n<jmikola> $basePath rather\n<jmikola> it uses  /  by default\n<kris>    how about a configurator that calls setBasePath() if the container includes a request?\n<jmikola> then the service would still need to be request scoped, no?\n<jmikola> what it the same service was used on multiple requests\n<jmikola> thinking of those trendy php app servers :)\n<kris>    the service wouldn't use the request\n<kris>    the configurator would\n<kris>    but via dic injection\n<jmikola> do configurators exist?\n<jmikola> i don't think i've seen one, a class with that name is in the DistributionBundle though - probably different\n<kris>    you can define a configurator on a service\n<jmikola> example? is this done via tags?\n<kris>    it's a callable that will be passed the service before it leaves the container for the first time\n<jmikola> so the PathPackage base class in the Templating component has a private basePath, it'd need a setBasePath method added of course\n<kris>    yeah, that's fine\n<jmikola> ah <configurator\n<jmikola> can't believe i've never seen this before\n<kris>    it's an old feature\n<kris>    and you can only set one for some reason\n<jmikola> woah, it's only in test fixtures\n<jmikola> nothing actually uses it\n<jmikola> yet :)\n<jmikola> configurators receive the container as their only argument?\n<jmikola> oh, no arguments at all\n<kris>    they receive the service\n<kris>    but a configurator can be a service itself\n<kris>    i would add a base path node to the config\n<kris>    and disallow using both base path and base urls\n<kris>    and only use the configurator if the base path isn't explicitly set\n<jmikola> now, in this case i'd have the configurator for the PathPackage service be another service that depends on request\n<kris>    no\n<kris>    the configurator should depend on the container\n<kris>    check if there is a request service and use it to set the base path if so\n<jmikola> ok, and it's responsible for $pathPackage->setBaseUrl($request->getBasePath()) if the request exists\n<jmikola> right\n<kris>    setBasePath\n<jmikola> correct, sorry\n<jmikola> i think a base_path and base_url can co-exist\n<jmikola> base_url will entail use of the UrlPackage\n<jmikola> and base_path is simply the default value for PathPackages\n<jmikola> in the absence of the request\n<kris>    i don't follow\n<jmikola> a base_url option in the config would simply be for the case where PathPackage is utilized outside of a request scope (i.e. console command)\n<jmikola> sorry, base_path***\n<jmikola> assets_base_url is for UrlPackages\n<kris>    right\n<jmikola> ok, so you're saying at the top level, or in the packages prototypes, we'd allow only one or the other\n<jmikola> at present, there's only asset_base_url's, so that implies configurations creating only UrlPackages\n<kris>    add a validation to the Configuration class so you have to choose one or the other\n<kris>    i don't understand why you would need base_path from the cli\n<jmikola> so in this case, absence of either will result in a PathPackage configured based on the current request\n<kris>    don't you need absolute urls in your emails?\n<kris>    i'm rethinking\n<jmikola> yes, we're using UrlPackages of course\n<jmikola> but the request scope ruined this for me\n<kris>    don't bother with base_path in the config\n<kris>    just do the configurator\n<jmikola> there's still a possibility that someone would generate HTML for on-site use from a console command\n<jmikola> perhaps pre-building twig templates or something\n<jmikola> your idea made sense i think\n<jmikola> even if it's an edge case\n<jmikola> granted, most people are perfectly fine with  /  as a default base_path in the absence of a request\n<kris>    that would be another pr\n<jmikola> right\n<jmikola> then for now, what about just making the request argument on-invalid null?\n<jmikola> and changing PathPackage in the bundle\n<jmikola> PathPackage in the component already handles an empty base path itself just fine\n<kris>    yeah, that's better\n<jmikola> on-invalid= null  and strict= false \n<kris>    nice\n<jmikola> i'm satisifed with the simplicity of that\n<jmikola> and will comment about your base_path option idea in my PR for a future task when i get around to it - as that sounded great as well\n<jmikola> thanks for talking through this w/ me :)\n<kris>    np\n<jmikola> PackageFactory is the new roadblock, heh\n<jmikola> getPackage() { return $this->container->get($request->isSecure() ? $sslId : $httpId); }\n<jmikola> :D\n<kris>    oh yeah\n<jmikola> should i utilize the same logic? default to non-ssl?\n<jmikola> i'm actually curious how gmail handles references to http:// assets embedded in its emails\n<jmikola> i suppose it renders message bodies in iframes\n<kris>    then it would be impossible to render https asset urls without a request\n<jmikola> wouldn't it default to the http url?\n<kris>    right\n<kris>    but what if you only have https base urls configured?\n<jmikola> if you break them into http and https blocks, it'd be a problem\n<kris>    i think it always uses https if you only have https urls configured\n<jmikola> otherwise, the shorthand notation sorts them for you\n<jmikola> and all https urls are available to http\n<jmikola> ah, you're correct\n<jmikola> FrameworkExtension::createPackageDefinition\n```\n",
            "@fabpot: I believe I reached an agreeable solution, so please review when you get a chance.\n\nI removed any `strict` and `on-invalid` trickery (ideas I was discussing with Kris) and decided to only apply request scoping to the assets helper if one or more of its injected packages (default or named) is request scoped.\n\nThis satisfies my requirements, as I had absolute base URL's defined for both HTTP and SSL protocols. It also leaves the current scope exceptions in place if, for instance, someone only defined an HTTP base URL and FrameworkBundle ended up creating a PathPackage for their SSL assets. I go into detail about this more in my second commit, and I think the added tests help explain this as well.\n",
            "Something screwed up earlier and this PR's branch included all commits in `symfony/master`. I just cleaned things up.\n",
            "@schmittjoh: Router\\RequestContext doesn't appear to be a service. It's just a storage bean created in some of the Router classes that are services. Internally, it defaults the base path to `/`, which is actually what the PathPackage in the templating component does (it's FrameworkBundle's PathPackage that requires a Request).\n\nI discussed making the Request parameter optional in PathPackage, but then `asset()` would return base-relative URL's in the use case I cited about (generating URL's from a console script for the purpose of sending emails). I think change in behavior for `asset()` under those circumstances would lead to a lot of WTF's from developers.\n",
            "I'm a fan of using one character to get to the end of the inheritance tree (to the discussion of `end()` vs. `next()`) above. I don't think there's a big use case for extending a template in the middle of the chain - that would require at least four templates in the entire chain to be worthwhile, I believe. Otherwise, if you had three templates, the normal extension behavior (from the child-most template) would target the parent instead of grandparent.\n\nRegarding syntax, `!` reminds me CSS's `!important` syntax, which is about overriding in a different direction. My vote is for `^` as a single-character prefix.\n",
            "I was about to create a PR for this very same quirk, as this was causing my CDN's for various environments to all get merged together. I think we can get away with merging it directly to 2.0 since `assets_base_urls` are hardly covered in the documentation at all.\n\nOnce this gets merged, I wouldn't mind writing up a blurb on them to explain how the shorthand syntax works and this merging strategy.\n",
            "I just noticed this PR only fixes the `base_urls` config option under `packages`. We should also correct this behavior for `assets_base_urls`, which appears further up in FrameworkBundle's Configuration.php file.\n",
            "@schmittjoh: I have the second commit for this sitting in https://github.com/jmikola/symfony/tree/configFix (rebased on your branch) if you'd prefer to merge that into your branch to update this PR.\n",
            "@fabpot: I'll get on that now. Thanks!\n",
            "Done: https://github.com/symfony/symfony-docs/pull/714\n",
            "@barros001: Can you take a look at #2335 and see if that describes your problem? It was a problem I encountered in our production environment, but attempting to reproduce it with a simple fork of the symfony-standard app (see the related commit in that issue) proved unsuccessful.\n",
            "Just to resolve the comments in this thread, #2335 is now fixed.\n",
            "Wow, funny coincidence seeing this after creating [PR 2013](https://github.com/symfony/symfony/pull/2013) earlier today. \n\n@stof: `getSubscribedEvents` cannot depend on object properties, because the interface dictates that it be static. However, the existing framework code always invokes the method with `->`, so you wouldn't know by first glance.\n\n@jalliot: Given the static method, which returns a simple array of event names mapped to method names (or method/priority tuples), and the fact that the container definition has the class name available, it's entirely possible to do this in a compiler pass as @schmittjoh suggested. I don't think we need any other parameters, as nothing at runtime would be relevant to the static subscription array.\n",
            "I'm looking into this.\n",
            "I realize it's short notice, but is anyone available to speak for this in this week's developer meeting (5pm CET in #symfony-dev on Freenode)? I recall @Gregwar said he would be unavailable in his email yesterday.\n",
            "@Gregwar: it would probably be helpful to add some unit tests, if only for the transformer. We shouldn't get into the habit of introducing new functionality without test coverage.\n",
            "https://jira.mongodb.org/browse/SERVER-8558\n",
            "Will do when I'm back in the office tomorrow morning.\n",
            "@b-durand: Essentially the same reason you'd want a date column type in SQL. Converting to a MongoDate will let you work with the value as a date object for querying or, better yet, the [aggregation framework](http://docs.mongodb.org/manual/reference/aggregation/#date-operators) (for generating reports and doing log analysis).\n\nIs there any documentation about the structure of the `$event` arrays, or is it mostly free form apart from a message and priority?\n",
            "@Maks3w: I updated the doc headers. Can you review?\n",
            "@Maks3w: Thanks. Looking at the Logger code, `$timestamp` is going to end up as a string based on the Logger's configured format. This makes converting back to a DateTime or integer timestamp unreliable (e.g. if the format string is `M j`).\n\nI think the responsibility of date formatting fall on the Writer class, which may or may not elect to use some functionality in a formatter. For a DB-based logger, that's really the only way you'll be able to properly record a log entry's timestamp in the appropriate field type.\n",
            "The formatter isn't helpful as it currently converts event arrays into strings for writers that work with single strings (e.g. syslog, email). @Maks3w pointed out that the Logger class converts the DateTime object to a string (using the date format option), so we only have a date string to work with in the writer. I opened a thread on the mailing list to propose using formatters for date formatting. In that case, DB writers would still not need a formatter, and they could insert a native date type (better for storage and querying).\n",
            "@b-durand: Yup, I'm subscribed to both lists now, and will be sure to use contributors next time.\n\nIf this PR is all right, you can merge it whenever you like. I'd prefer to submit another PR with my proposed formatter changes (which will include Logger and writer class changes) and we can work through it using PR comments. I think that'd be more productive than attempting to do it in a gist, as I'm going to implement it in tandem with test alterations.\n"
        ],
        "issues": [
            {
                "title": "Handle reflected param names for variable length arguments",
                "body": "The existing code handled cases where a PHP extension declared an argument for the reflection API without providing a name (typically done for referenced arguments). Also handle the case where the name it provides is  ...  (i.e. variable arguments), as that would break mock object generation.\n\nSee: http://php.net/manual/en/language.pseudo-types.php\n\n---\n\nThis came up as I was attempting to Mock the [MongoCollection::aggregate()](http://php.net/manual/en/mongocollection.aggregate.php) method, which uses the convention for defining variable length arguments. I'm aware the docs currently use `$..` as the name instead of the `$...` convention -- that was an oversight, which is being changed.\n"
            },
            {
                "title": "[Console] Fix default value handling for multi-value options",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7689 |\n| License | MIT |\n\nThe default value for array options will be an array, so it is not suitable to use as the default when processing one of many values for a multi-value option. Using null seems appropriate here, as it indicates the absence of a value and also converts nicely to an empty string (as opposed to an empty array).\n"
            },
            {
                "title": "[Console] Odd behavior with default values for multi-value options",
                "body": "For context, this came up with a console app I'm developing in [mongo-cluster-tests](https://github.com/jmikola/mongo-cluster-tests/tree/4f91d0aae7f3d1273cc48eb71c900454f657482c). I'm linking to a commit hash there since I'm going to commit a work-around for this in the master branch soon after submitting this issue :)\n\nI have the following option defined on my commands:\n\n```\n->addOption('readPreferenceTags', null, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY, 'MongoClient read preference tags'\n```\n\nIn practice, I would use this to pass in multiple strings to the command and access them as an array. If the option isn't used at all, the default value is an empty array.\n\n```\n$ ./test.php find --readPreferenceTags dc:ny --readPreferenceTags dc:sf\n    -- will yield ['dc:ny', 'dc:sf'] for the option\n$ ./test.php find\n    -- will yield [] for the option\n```\n\nI discovered an edge case when the option value is missing from the command line:\n\n```\n$ ./test.php find --readPreferenceTags dc:ny --readPreferenceTags\n    -- will yield ['dc:ny', []] for the option\n$ ./test.php find --readPreferenceTags\n    -- will yield [[]] for the option\n```\n\nSince my application expects these values to be strings, I end up with a PHP notice on the failed array-to-string conversion.\n\nI traced this back to [ArgvInput](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/ArgvInput.php) and the [addLongOption()](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Console/Input/ArgvInput.php#L210) method in particular. When the incoming value is `null` and values are optional, the option's default value will get used (i.e. an empty array). A bit below that, when `$option->isArray()`, the value gets appended to the existing value array.\n\nOn a side note, if a `substr()` call fails and `$value` is `false` coming into `addLongOption()`, `false` will get appended to the existing value array (there's no extra array wrapping at play).\n\nI was curious if this was simply a matter of me passing values to long options (typically taken as `--option=value`) as I would short options (`-o value`). To that end, I tested the above scenario with short options; the outcome was the same.\n\nIf this deserves a fix, I'm happy to create a PR for it. I'm sure we could add some code to `addLongOption()` to solve it, but I'm not certain that's the best place for it. At the very least, I will add a few test cases in the PR to cover this.\n"
            },
            {
                "title": "[PropertyAccess] Documentation cleanup",
                "body": "| Q | A |\n| --- | --- |\n| Fixed tickets | none |\n| License | MIT |\n\nResubmission of #7498\n"
            },
            {
                "title": "Fix param docs for PropertyAccessor read method",
                "body": "| Q | A |\n| --- | --- |\n| Fixed tickets | none |\n| License | MIT |\n"
            },
            {
                "title": "[2.1] Support PHP MongoDB driver 1.3.0+ in profiler/session classes",
                "body": "> Bug fix: yes\n> Feature addition: yes\n> Backwards compatibility break: no\n> Symfony2 tests pass: yes\n> Fixes the following tickets: #6130\n> License of the code: MIT\n\nI don't believe this is a BC break, but just to confirm:  the MongoDbSessionHandler constructor signature changed, as I removed the `Mongo` type hint.\n\nBug fix entails allowing MongoClient to be used by default if the new driver is available, since the original Mongo class is deprecated. I also removed the assumption about `MongoCollection::update()`'s return value, since it may be a status array now.\n"
            },
            {
                "title": "[HttpFoundation] Document MongoDbSessionHandler changes",
                "body": "```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n```\n\nDocumentation changes for #5916\n"
            },
            {
                "title": "[HttpFoundation] Revise MongoDB session storage",
                "body": "```\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n```\n\nI decided to take a look at the MongoDB session driver after reading @pgodel's [blog post](http://blog.servergrove.com/2012/11/05/storing-sessions-in-mongodb-with-symfony2/) today. This PR contains some fixes to make this session handler integrate better with MongoDB, as well as make it more in line with the work I did in zendframework/zf2/#2031:\n- Default to _id for storing session ID (BC break)\n- Use MongoDate instead of MongoTimestamp (BC break)\n- Rename default field names ( sess_  is redundant)\n-  justOne  is redundant for session removal\n- Assert true return values in method tests\n- Add note about TTL collections for gc()\n- Don't set identifier in upsert (invalid behavior)\n\nIn my opinion, the BC breaks are reasonable. `_id` is the logical field to store the session ID, as I'd expect many users may not even think to index the `sess_id` field to avoid inefficient queries otherwise. Also, MongoTimestamp should never have been used in the existing manner. Per the [documentation](http://php.net/manual/en/class.mongotimestamp.php):\n\n> This class is not for measuring time, creating a timestamp on a document or automatically adding or updating a timestamp on a document. Unless you are writing something that interacts with the sharding internals, stop, go directly to MongoDate, do not pass go, do not collect 200 dollars. This is not the class you are looking for.\n\nOn a side note, I'm not sure why `sess_` prefixes exist for the PDO driver. It seems redundant in either case (the table/collection would logically have  session  in the name).\n\nThe fix to the update statement actually addresses a bug were `_id` to appear in the `$set` query.\n\nI'm not sure how to document the BC breaks or changes, as the 2.1 branch's readme files look a lot sparser than those for 2.0. Let me know if there's something else to be done, though.\n"
            },
            {
                "title": "[DoctrineBridge] Require class option for DoctrineType",
                "body": "This is a resubmission of #5289 against the 2.1 branch.\n\n```\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n```\n"
            },
            {
                "title": "Create CONTRIBUTING.md file for auto-linking in PR's",
                "body": "See: https://github.com/blog/1184-contributing-guidelines\n"
            },
            {
                "title": "[DoctrineBridge] Require class option for DoctrineType",
                "body": "I was updating the DocumentType class in the MongoDB bundle and realized that the `class` attribute was required but not enforced by OptionsResolver.\n\nIt's been a while since I used this field, but perhaps other options should be marked as required, too. Please let me know.\n\n/cc @beberlei @bschussek\n"
            },
            {
                "title": "[Locale] Stub test failures",
                "body": "I ran the `master` branch's test suite and noticed a few errors that I wanted to share.\n\nPHP version:\n\n```\n$ php -v\nPHP 5.4.4-4~precise+1 (cli) (built: Aug  6 2012 13:01:46) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\n```\n\nRelevant `intl` extension output from `php -i`:\n\n```\nInternationalization support => enabled\nversion => 1.1.0\nICU version => 4.8.1.1\nICU Data version => 4.8.1\n\nDirective => Local Value => Master Value\nintl.default_locale => no value => no value\nintl.error_level => 0 => 0\n```\n\nAnd the test failures:\n\n```\nThere were 12 failures:\n\n1) Symfony\\Component\\Locale\\Tests\\Stub\\StubIntlDateFormatterTest::testFormatWithDefaultTimezoneIntl\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'1970-01-01 00:00:00'\n+'1969-12-31 19:00:00'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubIntlDateFormatterTest.php:481\n\n2) Symfony\\Component\\Locale\\Tests\\Stub\\StubLocaleTest::testGetCurrenciesData\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$'\n+'R$'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubLocaleTest.php:73\n\n3) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #0 (100, 'BRL', 'BR', '%s$100.00')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$100.00'\n+'R$100.00'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n4) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #1 (-100, 'BRL', 'BR', '(%s$100.00)')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'(BR$100.00)'\n+'(R$100.00)'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n5) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #2 (1000.12, 'BRL', 'BR', '%s$1,000.12')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$1,000.12'\n+'R$1,000.12'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n6) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #3 (1000.121, 'BRL', 'BR', '%s$1,000.12')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$1,000.12'\n+'R$1,000.12'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n7) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #4 (1000.123, 'BRL', 'BR', '%s$1,000.12')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$1,000.12'\n+'R$1,000.12'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n8) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #5 (1000.125, 'BRL', 'BR', '%s$1,000.12')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$1,000.12'\n+'R$1,000.12'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n9) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #6 (1000.127, 'BRL', 'BR', '%s$1,000.13')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$1,000.13'\n+'R$1,000.13'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n10) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #7 (1000.129, 'BRL', 'BR', '%s$1,000.13')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$1,000.13'\n+'R$1,000.13'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n11) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #8 (11.50999, 'BRL', 'BR', '%s$11.51')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$11.51'\n+'R$11.51'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\n12) Symfony\\Component\\Locale\\Tests\\Stub\\StubNumberFormatterTest::testFormatCurrencyWithCurrencyStyleBrazilianRealRoundingStub with data set #9 (11.9999464, 'BRL', 'BR', '%s$12.00')\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'BR$12.00'\n+'R$12.00'\n\n/home/jmikola/workspace/symfony/symfony/src/Symfony/Component/Locale/Tests/Stub/StubNumberFormatterTest.php:195\n\nFAILURES!\nTests: 7721, Assertions: 17729, Failures: 12, Incomplete: 11, Skipped: 46.\n```\n\nPerhaps there is an issue with `Symfony\\Component\\Locale\\Tests\\TestCase::isSameAsIcuVersion()`, as it's the common factor for all of the Brazilian currency tests. I'm not sure what might be causing the first date test failure. My INI configuration has `date.timezone =  America/New_York `, but I don't think the test should require a UTC timezone.\n"
            },
            {
                "title": "[Config] Fix comment typo",
                "body": ""
            },
            {
                "title": "[DoctrineBridge] Initialize proxies in UniqueEntityValidator",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=master)](http://travis-ci.org/jmikola/symfony)\nFixes the following tickets: #3163\n"
            },
            {
                "title": "Profiler fails if Doctrine proxy class is serialized",
                "body": "On some requests with Exercise.com's application, I see alerts informing me that the Web Debug Toolbar yielded a 500 error. Investigating the request shows:\n\n> Warning: Class __PHP_Incomplete_Class has no unserializer in /home/jmikola/workspace/exercise/vendor/symfony/src/Symfony/Component/HttpKernel/DataCollector/DataCollector.php line 34 \n\nThe common cause seems to be a Doctrine proxy class existing somewhere in the serialized data. For instance, we might have a reference to a `Proxies\\__CG__\\Exercise\\ArticleBundle\\Document\\ArticleColumn` within a Request attribute.\n\nAs far as I know, there is no autoloader for these proxy classes.\n\nOne possible solution would be to set the `unserialize_callback_func` INI setting, which is documented in http://php.net/manual/en/function.unserialize.php, if only for the profiler/WDT request. Of course, that would permanently affect the PHP process serving the request (perhaps a concern if someone's using Symfony2 with an app server :).\n\nI don't have a specific solution to propose, but I was hoping to prompt some discussion about how best to handle this.\n"
            },
            {
                "title": "[DependencyInjection] Fix Yaml file loader test",
                "body": "This broke when 2.0 was recently merged into master with b9daae28476385d16984a729b9e7c8e30911fa23, as the Yaml fixture change from 24a0d0a2dcf334efc7d85f1c816c01d7fa4111f8 was not included.\n\nhttps://twitter.com/webmozart/status/188325579894947840\n"
            },
            {
                "title": "[HttpKernel] Throw exception if TimeDataCollector has no last event",
                "body": "This fixes an NPE I receive at times when enabling the WDT on production (on rare occasions I need to debug something live). I often find the following errors in the logs whenever the WDT is rendered:\n\n> PHP Fatal error:  Call to a member function getOrigin() on a non-object in /data/site/vendor/symfony/src/Symfony/Component/HttpKernel/DataCollector/TimeDataCollector.php on line 78\n\nMy mistake is enabled profiling and the WDT bundle but forgetting to flip the debugging kernel argument to `true`. This prevents the TraceableEventDispatcher from being used, which in turn means that no events are ever set on the TimeDataCollector. Adding an `isset()` check and throwing an exception with a helpful error message seems helpful here. No we'll get:\n\n> PHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'The last event is not available. Are you sure that debugging is enabled in the kernel?' in /data/site/vendor/symfony/src/Symfony/Component/HttpKernel/DataCollector/TimeDataCollector.php:78\n\nI'm not encouraging anyone to use WDT on production here, but I think we'd do well to avoid any change of NPE's in the code.\n"
            },
            {
                "title": "[Form] Failing test for empty_data option BC break",
                "body": "This demonstrates the issue described in symfony/symfony#3354. FieldType no longer has access to the child type's data_class option, which makes it unable to create the default closure for empty_data.\n\nWe're still waiting for @bschussek to chime in on #3354, so there is no rush to merge this. Most users are expecting `data_class` to be all that's necessary to facilitate creation of a new form data object -- it's not clear if that is still the intended functionality after the recent form BC breaks, or if those breaks were an oversight.\n\nIf it is to remain intended functionality, I think we can keep this test around after the issue is resolved.\n"
            },
            {
                "title": "[Console] Stop parsing options after encountering  --  token",
                "body": "This enables support for arguments with leading dashes (e.g.  -1 ), as supported by getopt in other languages.\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=double-dash)](http://travis-ci.org/jmikola/symfony)\n\nThe test suite currently fails due to 7a54fe41caf66f468e80c103092b3534348c486a. ArgvInputTest passes, and these changes don't appear to break anything else.\n\n![](http://media.giantbomb.com/uploads/2/27528/1061704-mario_kart_double_dash___title_screen_super.jpg)\n\nAside: This got me thinking about how one would pass an option value of  -1 . I suppose for input options with `VALUE_OPTIONAL`, it would be ambiguous if  -1  followed; however, `VALUE_REQUIRED` should probably require that the next token is captured as the option value. In my tests, a required option value with a leading dash was interpreted as another option. The workaround for all of this is to use the space-less syntax (e.g. `-f=-1`).\n"
            },
            {
                "title": "[DoctrineBridge] Iterator->current() is not the same as current(Iterator)",
                "body": "More lively discussion from: doctrine/DoctrineMongoDBBundle#84.\n"
            },
            {
                "title": "[DoctrineBridge] Rewind MongoCursor before use in unique validator",
                "body": "Fixes a regression I introduced in: 265360d1426676cf9b0ff7a01e631546e22e3b63\n"
            },
            {
                "title": "[SecurityBundle] Avoid direct request dependency in LogoutUrlHelper",
                "body": "This quickly addresses the problem when the helper is constructed in a console environment without request scope. Ideally, the helper should be able to construct the absolute logout URL using data already available in the UrlGenerator's RequestContext and the $_SERVER environment variable; however, that will require copying some code from the Request class to create a base URI and path.\n\nFixes #3508\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=master)](http://travis-ci.org/jmikola/symfony)\n"
            },
            {
                "title": "[Security] Document CSRF protection for LogoutListener",
                "body": ""
            },
            {
                "title": "[DoctrineBridge] Add tests for data fixture ContainerAwareLoader",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3328 (PR was missing this test)\nTodo: -\n```\n\nThe test is skipped unless the optional `doctrine/data-fixtures` is available. I confirmed that it passes with it installed. Once this is merged, the DoctrineFixturesBundle will contain nothing more than a console command, which can be merged into DoctrineBundle.\n"
            },
            {
                "title": "[DoctrineBridge] Simpler result checking in UniqueEntityValidator",
                "body": "In 928e352d09a6bb0b566e61bc7482ead1d4859442, support for MongoDB cursors was implemented by converting an Iterable, non-ArrayAccess object to an array. The ArrayAccess check didn't seem purposeful, since cursors are only Iterable and ORM returns real arrays. Since we only need to access the first element of the cursor (and only in cases where the count is exactly 1), we can simply use current() to handle Iterables and arrays.\n\n@henrikbjorn: Any thoughts on this? I was testing @stof's work in doctrine/DoctrineMongoDBBundle#68 and our Symfony submodule was a bit old, so I fixed UniqueEntityValidator on my local machine before I realized you had come up with a solution a few weeks ago.\n"
            },
            {
                "title": "[DoctrineBridge] ContainerAwareEventManager class",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n```\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=doctrine-lazy-event-manager)](http://travis-ci.org/jmikola/symfony)\n\nThis allows services to be registered (and lazily loaded) with Doctrine Common's EventManager.\n\nIt is ported from @schmittjoh's previous commits here: doctrine/DoctrineBundle#23. I'd like to integrate this with DoctrineMongoDBBundle, so the Bridge once again seemed like an ideal alternative to duplicating code.\n"
            },
            {
                "title": "[HttpKernel] Fix call to Memcached::set() once again",
                "body": "I originally fixed this in #3358, but it appears #3363 (which touched the same line) was merged soon after.\n"
            },
            {
                "title": "[HttpKernel] Fix call to Memcached::set() in MemcachedProfilerStorage",
                "body": "The existing code seems to have been copied from MemcacheProfilerStorage. Memcache::set() includes a $flag argument, but Memcached::set() omits that. See:\n- http://php.net/manual/en/memcached.set.php\n- http://php.net/manual/en/memcache.set.php\n\n---\n\nI assume Travis-CI didn't catch the MemcachedProfilerStorageTest failures because those tests are skipped: http://travis-ci.org/#!/symfony/symfony/jobs/678889/L104\n"
            },
            {
                "title": "Grammar and formatting in upgrade doc",
                "body": "Added logical component headings to changes. Grouped changes by bullets, with indented text and code blocks. Applied consistent formatting to method names and code references. Re-flowed paragraph text to abide an 80-character column.\n"
            },
            {
                "title": "[DoctrineBridge] Add common data fixtures loader",
                "body": "Symfony does not depend on doctrine/data-fixtures, but having this class in the bridge would enable DoctrineMongoDBBundle (and possibly others) to load fixtures without requiring DoctrineFixturesBundle to be installed.\n\nAdditionally, DoctrineFixturesBundle seems to only consist of this class and a command for loading ORM fixtures. With this in the bridge, we can possibly eliminate DoctrineFixturesBundle altogether by merging its command into DoctrineBundle.\n"
            },
            {
                "title": "[FrameworkBundle] Allow cache:clear/warmup to skip optional warmers",
                "body": "> Bug fix: no\n> Feature addition: yes\n> Backwards compatibility break: yes\n> Symfony2 tests pass: [yes](http://travis-ci.org/#!/jmikola/symfony/builds/647861)\n\nExercise.com has been using this for a while for our local environments. Skipping the optional cache warmers (namely Assetic) can save quite a bit of time.\n"
            },
            {
                "title": "[Form] EntityChoiceList should extend LazyChoiceList",
                "body": "It looks like EntityChoiceList handles lazy-loading internally. Extending LazyChoiceList might reduce code duplication. \n"
            },
            {
                "title": "[HttpKernel] Fix missing $method argument in MongoDbProfilerStorageTest",
                "body": "```\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n```\n\nThis test case fixes failures related to a signature change for ProfilerStorageInterface::find(). See: 1aef4e806b5a99312b82a0b10a9d2e2f4d4314ba and 5f2226807cfe4f37c461709d41f991d615cf0684.\n\nThis was easily missed as the test case is skipped unless a MongoDB server is running.\n"
            },
            {
                "title": "[Security] Implement support for CSRF tokens in logout URL's",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n```\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=logout-csrf)](http://travis-ci.org/jmikola/symfony)\n\nThis derived from #3006 but properly targeting on the master branch.\n\nThis exposes new configuration options to the logout listener to enable CSRF protection, as already exists for the form login listener. The individual commits and their extended messages should suffice for explaining the logical changes of the PR.\n\nIn addition to changing LogoutListener, I also created a templating helper to generate logout URL's, which includes a CSRF token if necessary. This may or may not using routing, depending on how the listener is configured since both route names or hard-coded paths are valid options.\n\nAdditionally, I added unit tests for LogoutListener and functional tests for both CSRF-enabled form logins and the new logout listener work.\n\nKudo's to @henrikbjorn for taking the time to document CSRF validation for form login listeners (see [here](http://henrik.bjrnskov.dk/symfony2-cross-site-request-forgery/)). The [Logout CSRF Protection](http://www.yiiframework.com/wiki/190/logout-csrf-protection/) article on the Yii Framework wiki was also helpful in drafting this.\n"
            },
            {
                "title": "[Security] Implement support for CSRF tokens in logout URL's",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: Resolve merge conflicts when integrating this into the master branch\n```\n\nThis exposes new configuration options to the logout listener to enable CSRF protection, as already exists for the form login listener. The individual commits and their extended messages should suffice for explaining the logical changes of the PR.\n\nIn addition to changing LogoutListener, I also created a templating helper to generate logout URL's, which includes a CSRF token if necessary. This may or may not using routing, depending on how the listener is configured since both route names or hard-coded paths are valid options.\n\nAdditionally, I added unit tests for LogoutListener and functional tests for both CSRF-enabled form logins and the new logout listener work. Lastly, this commit includes a cherry-pick of 60ebaaad70e6d7b8e280f34730973ee29c4c559d from the master branch.\n\nThis is not a clean merge due to a conflict with 60ebaaad70e6d7b8e280f34730973ee29c4c559d (Twig extension DI config) and 74cfd045049267d5bad7fe70131e5d95025aa393 (creation of `LogoutListener::requiresLogout()`). I attempted to eliminate one conflict by cherry-picking 60ebaaad70e6d7b8e280f34730973ee29c4c559d (a reasonable commit to back-port to the 2.0 branch), but the conflict remained.\n\n@fabpot: If this PR is agreeable, please let me know how to proceed with preparing it for the master branch. I suppose that might entail a separate PR with an additional merge commit, but you might decide it's easier to simply do that yourself after evaluating the changes.\n"
            },
            {
                "title": "Code duplication among Twig extensions and Templating helpers",
                "body": "I was looking at the templating helper classes in FrameworkBundle and SecurityBundle. There appears to be a fair about of code duplication between these classes and their Twig extension counterparts.\n\nI realize helpers extend a base class, as do Twig extensions, so separate classes must continue to exist; however, we could use object composition to have the Twig extensions expose the helper's methods to Twig. In some cases, this might require an intermediary wrapping method in the helper.\n"
            },
            {
                "title": "[Console] Improve input definition output for Boolean defaults",
                "body": "This addresses an annoyance I had with command help printing `(default: )` for arguments and options that default to `false`.\n\n```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no (documentation text/XML output is slightly changed)\nSymfony2 tests pass: yes\n```\n"
            },
            {
                "title": "Note LoaderResolverInterface type hinting in the 2.1 changelog",
                "body": "Although #2785 was originally opened against 2.0, its merge to master seems to be intentional. This documents the BC break that some experienced (see: FriendsOfSymfony/FOSRestBundle#155).\n"
            },
            {
                "title": "[DependencyInjection] Refactor usage of SPL exceptions",
                "body": "```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\n```\n\nThis was something discussed on the mailing list recently and a topic at the last IRC meeting. The DependencyInjection component was what I had in mind while discussing this with @lsmith a few weeks ago, as I found that it already had some local SPL exceptions, which weren't being used directly (only as base classes for the compiler exceptions). This PR replaces uses of core SPL exceptions with the component's equivalents. I've listed it as BC-breaking to be safe, but I don't think it should cause any trouble, since the new exceptions are sub-classes of those originally used.\n\nI purposely avoided changing the exceptions in the dumped PHP container. If we agree that's worth doing, it would be a trivial addition to the PR.\n"
            },
            {
                "title": "[Config] Use LoaderResolverInterface for type-hinting",
                "body": "```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\n```\n\nI've listed this as a BC break because we're changing the argument type-hint, but I think it's unlikely to affect anyone.\n"
            },
            {
                "title": "[Security] Fix checkRequestPath doc; closes #2323",
                "body": ""
            },
            {
                "title": "[DependencyInjection] Fix getArgument() for replaced definition arguments",
                "body": "I was implementing something that worked with DefinitionDecorators before the container was compiled and ran into some missing functionality. While I was tinkering, I also added some additional tests for exceptions in both Definition and DefinitionDecorator.\n"
            },
            {
                "title": "[FrameworkBundle] Fix typo in FrameworkExtensionTest",
                "body": "Spotted this typo in the test messages from my previous asset helper scope PR.\n"
            },
            {
                "title": "[Routing] Import prefix can conflict with route patterns",
                "body": "I believe this is a result 5c8a2fb48dfe09537db6ebdd77a52a3c90f409fe, which was a fix for #2139.\n\nI have the following in my app's `routing.yml`:\n\n``` yml\nbackend:\n    resource:   @MyBundle/Resources/config/routing/backend.yml\n    prefix:     /backend\n\nbackend_homepage:\n  pattern: /backend\n  defaults: { _controller: MyBundle:Backend:index }\n```\n\nThis causes the `backend_homepage` route to be dropped after compilation, presumably because it conflicts with the import prefix. This would be understandable if the imported file had a route with `pattern: /`, but it does not (all routes have lengthy patterns).\n\nIf I reverse the order and define `backend_homepage` before the first import with `prefix: /backend`, everything is fine. Still, I consider this a work-around, as the prefix should logically not be responsible for dropping another route which really has no pattern conflict.\n"
            },
            {
                "title": "[Security] HttpUtils does not support absolute URL's",
                "body": "The documentation for HttpUtils states that the `$path` parameter may be:\n\n> A path (an absolute path (/foo), an absolute URL (http://...), or a route name (foo))\n\nInternally, the method only supports absolute paths (if the first character is a `/`) or a route comparison. Should the method be enhanced to support absolute URL's? If not, we should at least change the documentation.\n\nFor an absolute URL check, I suppose we could scan the string for a protocol `://`, unless it makes more sense to just check for `/^https?:\\/\\//` match.\n\nEither way, I'm willing to make the fix (adding support or doc change). Just want to collect some feedback before proceeding.\n"
            },
            {
                "title": "[FrameworkBundle] Assign request scope to assets helper only if needed",
                "body": "**Note**: This PR replaces #2218\n\nI traced this request scope addition back to [an old commit](https://github.com/symfony/symfony/commit/d9f5c99fabc649b7067daf6f2f69bdd86f6f715b#commitcomment-597654) from @kriswallsmith.\n\nNo other helpers have request scope and the assets helper's parameters don't appear to depend on the request in any way, so this appears to be unnecessary. As-is, request scope here prevents use of the assets helper from a console command that may need to internally render a template.\n"
            },
            {
                "title": "[FrameworkBundle] Assets templating helper does not need request scope",
                "body": "I traced this request scope addition back to [an old commit](https://github.com/symfony/symfony/commit/d9f5c99fabc649b7067daf6f2f69bdd86f6f715b#commitcomment-597654) from @kriswallsmith.\n\nNo other helpers have request scope and the assets helper's parameters don't appear to depend on the request in any way, so this appears to be unnecessary. As-is, request scope here prevents use of the assets helper from a console command that may need to internally render a template.\n"
            },
            {
                "title": "[Doctrine] Fix UniqueEntityValidator reporting a false positive by ignoring multiple query results",
                "body": "An entity should only be considered unique if its search criteria returns no matches or a single, identical entity. Multiple results indicates that conflicting entities exist.\n\nNote: the DoctrineMongoDBBundle's unique validator checks identifier values if the object strict-equality check is false. This may be a worthwhile improvement, as it would prevent reporting a validation error for an enttiy which is going to overwrite its conflicting counter-part in the database.\n"
            },
            {
                "title": "[FrameworkBundle] Avoid listener key conflicts in ContainerAwareEventDispatcher",
                "body": "Since the key was previously concatenating service ID and method without a separator, it's possible that two different listeners could conflict (e.g. service/method pairs: foo/bar and fo/obar).\n"
            },
            {
                "title": "[EventDispatcher] Fix removeSubscriber() to work with priority syntax",
                "body": "Previously only addSubscriber() was being tested with priority syntax. This adds a unit test for removeSubscriber() and fixes a bug that would have caused it to fail.\n"
            },
            {
                "title": "[EventDispatcher] Remove static declaration for getSubscribedEvents()",
                "body": "[EventDispatcher] Remove static declaration for EventSubscriberInterface::getSubscribedEvents()\n\nExisting code never invokes this subscriber method statically and the Doctrine interface upon which it's based is also not static. Changing it to a normal method will also allow the interface to be mocked easily, in contrast to requiring stub classes (see EventDispatcherTest).\n"
            },
            {
                "title": "[Yaml] Do not skip consistency checks in InlineTest::testDump()",
                "body": "These conditionals were excluding 12.30e+02 from being checked. Removing the conditionals does not break any tests.\n\nI investigated the conditionals with git blame, but that stops at previous commits for code formatting changes. These appear to be very old. Perhaps they were added for test failures on certain platforms? I don't spot any failures on Linux.\n"
            },
            {
                "title": "[Yaml] Wrap numeric strings in quotes when dumping",
                "body": "This addresses an obscure case where a hash string (actually a commit-ish,  686e444 ) was dumped to YAML as an unquoted string value. It was later parsed from YAML as an exponential numeric and changed to  .Inf .\n\nThis commit should not change the existing behavior when dumping non-string numerics. It also doesn't appear to disturb any of the other test cases. I realize it's a huge edge case, so I'm open to discussion.\n\nThe alternative to this fix was an ugly `preg_replace()` to apply quoting around the commit-ish after dumping. I would look forward to removing that :)\n"
            },
            {
                "title": "[Form] Make CSRF error message configurable",
                "body": "We've had ongoing problems with non-technical users of our site being confused by the default CSRF error message. While it was originally configurable via the messages XML files (way back when), that's no longer the case.\n\nThis PR turns the hard-coded CSRF validation error message in `CsrfType` into a configurable constructor argument, form option, and app configuration option. I attempted to follow the example of the CSRF's field name, whose default value appears in both `FormTypeCsrfExtension` and FrameworkBundle's configuration class.\n\nThe FrameworkBundle test fixtures were updated to provide examples for all three formats.\n\nI didn't touch `CsrfExtension`, which I believe is intended for folks using the Form component on its own. It appears to be missing multiple configuration options that FrameworkBundle handles for `FormTypeCsrfExtension`, so I imagine the absence of a configurable error message is forgivable. Still, that's something to think about for the maintainer of that class.\n"
            },
            {
                "title": "[Form] Refer to FormView explicitly in its own getParent() type-hint",
                "body": "Using  self  makes mocking impossible, as the type-hint would then refer to the extending class and make the declaration incompatible.\n"
            },
            {
                "title": "[Form] Remove unnecessary use statements in EventListeners",
                "body": ""
            },
            {
                "title": "[Form] FormInterface extends IteratorAggregate instead of Traversable",
                "body": "Traversable appears to have special treatment in PHP, so previous attempts to simply mock FormInterface yielded:\n\n```\nClass Mock_FormInterface_d0094b05 must implement interface Traversable as part of either Iterator or IteratorAggregate\n```\n\nI see no reason why FormInterface can't directly extend IteratorAggregate. This fix also removes the FormInterface counterpart in the Tests namespace, which was arbitrarily extending Iterator.\n\nHat tip to @kriswallsmith for coming across this :)\n"
            },
            {
                "title": "[Security] Dispatch event when SecurityContext is read from session in Co",
                "body": "[Security] Dispatch event when SecurityContext is read from session in ContextListener::handle()\n\nThis event is helpful if the developer must observe the context's token when it is first initialized during the request, but before it may be overwritten by an authentication listener in that same request. Before this change, the closest events were onCoreRequest (before ContextListener::handle() is invoked, so too soon) or onSecurityInteractiveLogin (after the context's token is overwritten, so too late). Additionally, there were no suitable hooks within security component services (such as success/failure handlers in the authentication listeners).\n"
            },
            {
                "title": "[Form] Use strict string comparison against  $$key$$  in CollectionField",
                "body": "Without strict comparison, the first element of a collection will never be removed if its key is integer zero.\n\nI haven't tested @bschussek's revisions to the form component, so I can't confirm if this bug is fixed upstream. From what I saw, he uses a listener to handle resizing of form fields, so the offending code might naturally have disappeared.\n"
            },
            {
                "title": "[FrameworkBundle] Change validator's annotation prefix from  validation  ",
                "body": "[FrameworkBundle] Change validator's annotation prefix from  validation  to  assert \n"
            },
            {
                "title": "[Config] Alias used classes in NodeBuilderTest to avoid conflicts",
                "body": "[Config] Alias used classes in NodeBuilderTest to avoid conflicts with fixture classes required in TreeBuilderTest\n\nDepending on the order of execution of Config\\Definition\\Builder tests (due to filesystem ordering), namespace conflicts can occur between real classes and fixtures loaded by the TreeBuilderTest.\n"
            },
            {
                "title": "[Security] Copy token attributes in PreAuthenticated and User AuthenticationProviders",
                "body": "The use case for this PR is as follows:\n\nI have a listener on the `security.interactive_login` event that sets a login time attribute on the UsernamePasswordToken after a successful login. I use this so that a custom `AuthenticationTrustResolver` implementation can consider users remembered instead of fully-authenticated if they logged in over 15 minutes ago, which allows for Amazon-like two-tiered authentication.\n\n`UserAuthenticationProvider::authenticate()` likes to construct new UsernamePasswordToken objects after it performs pre/post auth checks and password validation. I noticed this happens on the request after a successful login, even if the incoming token argument is already authenticated.  My solution is to ensure the attributes get copied over into the newly-constructed token before `authenticate()` returns.\n"
            },
            {
                "title": "Add router resource type option to FrameworkExtension",
                "body": "The router LoaderInterface class already supported a type parameter, but the top-level Router class had no suppport for it.\n"
            },
            {
                "title": "Implement Configuration\\Builder in FrameworkExtension",
                "body": "Johannes' latest progress doesn't seem to be in fabpot/master, so my branch includes commit(s) from his [config branch](https://github.com/schmittjoh/symfony/commits/config) (which is being rebased regularly).  I'm not sure how much of what I need is already in fabpot/master, but I do know that `Symfony\\Component\\DependencyInjection\\Configuration\\Processor` is currently missing.  This pull request should remain in-progress at least until his revised component classes can be pulled.\n\nI can't successfully complete all unit tests due to a failure with `DependencyInjection\\Configuration\\MergeTest`, but I have things working within FrameworkBundle:\n\n```\nphpunit src/Symfony/Bundle/FrameworkBundle/Tests/DependencyInjection\n```\n\nThis should be enough to start reviewing the work.  All in all, implementing the config builder helped eliminate some of the annoying BC breaks from my last configuration merge implementation.  My take on the config class is that, while it certainly appeared unwieldy at first glance, it was ultimately very helpful and a joy to work with.  IMO, the Configuration class is quite readable as a result.\n\nThere is room for improvement (I listed some issues in my commit message), but I believe what we have here is functional and a step above the prior refactoring.\n"
            },
            {
                "title": "More intuitive matching of bundle directory lookups for Doctrine extensions",
                "body": "See: https://github.com/fabpot/symfony/pull/309\n"
            },
            {
                "title": "[Form] readPropertyPath should return null instead of empty array",
                "body": "This is a fix for some odd form behavior we were seeing before Bernhard's recent refactoring of property paths:\n\nhttp://github.com/jmikola/symfony/commit/e1be4e96899bfb03193c83b0c979c45e462e0436\n\nThe refactoring didn't change the behavior, so I made a test case off of the latest code to demonstrate this.  I think the example in the commit message also explains the motivation for the fix.\n"
            },
            {
                "title": "[Form] Outstanding patches for Choice/Collection fields",
                "body": "These commits were sitting around in a github convo I had months ago with Bernhard.  I couldn't determine how to exclude certain commits from the pull request, but feel free to ignore:\n- http://github.com/jmikola/symfony/commit/32d7b753a971f43c19319bdd9c1d262fe04e3e45\n- http://github.com/jmikola/symfony/commit/3a38fcf3547f03b58aef6c8c347a2631b85f89fc\n\nThe former ended up not being necessary and the latter appears to have been fixed by somone else since.\n\nLet me know if you have any questions, thanks.\n"
            }
        ],
        "pr_comments": [
            "Missing a space between `if` and `(`?\n",
            "I took a look through the component and noticed there were many trailing periods. bdb8473 should catch them all.\n",
            "Are the `start` and `end` query parameters sometimes empty? If the user isn't specifying them, the storage class logic is going to fill in `0` for `$start` and `time()` for `end`, which means a range query on the `time` field takes place regardless. This can be inefficient, especially if the `time` field isn't indexed in the database backend.\n\nDo you mind if I fix this in the PR I'm going to submit on your branch for the MongoDB changes? I can try to address it universally for all of the storage adapters.\n",
            "Indeed; this is necessary for MongoDB all the time, and whenever ORM relations are used as choices.\n",
            "This appears to duplicate `Form::getTypes()`. Is there any reason you're not just calling that?\n",
            "Unrelated to the PR, but I just thought to make this in sync with `getInitTime()`.\n",
            "Missing a space after `if`.\n",
            "Although this is documented as  have we started the progress bar? , it's only ever used for subtracting from `time()`. Renaming it to `$startTime` makes sense, as does changing the doc block. I don't think there's anything in the code that requires a boolean to infer whether the progress bar has started.\n\nLeaving the default value as `null` also makes sense, as zero could imply the epoch timestamp.\n",
            "@stof: Would CS call for `()` here?\n",
            "@jjbohn: was it https://bugs.php.net/bug.php?id=55739?\n",
            "Before @stof mentions it: trailing newline?\n",
            "I considered that, but ContainerAware classes typically implement ContainerAwareInterface themselves, which this Loader did not. Would it make sense to implement that interface for the hell of it, or is it redundant since we already take the Container in our constructor? I wouldn't want to eliminate the constructor parameter in favor of just having a setter method.\n",
            "I thought about that, but wasn't sure if it was too invasive :)\n\nIt makes sense, though.\n",
            "[DoctrineFixtureBundle's composer.json](https://github.com/doctrine/DoctrineFixturesBundle/blob/master/composer.json) depends on version ` * `, but I know we probably don't want to do that. The data-fixtures package has two tags at the moment, `v1.0.0-ALPHA1` and `v1.0.0-ALPHA2`. Will composer correctly resolve `1.0.*` to the most recent tag even if the package's own composer.json file does not specify a version?\n",
            "I considered it, but since the main focus is for URL generation it didn't seem to jive with the role check method. The existing SecurityHelper class is concerned only with reading from the context, and it didn't seem proper to tack on request and router services for a feature that will likely be used by only a minority of users. \n\nI also wanted to demonstrate a model for having the Twig extension compose the templating helper.\n",
            "I considered it. The `test_case` option (e.g.  StandardFormLogin ) could easily be a class constant. Beyond that, we'd need to abstract the form field names out for each test, which isn't a simple concatenation due to the nesting in CsrfFormLoginTest.\n\nI think it's reasonable to leave this as-is and refactor once it's time to add a third test.\n\n:+1: for Behat simplifying all of this.\n",
            "Absolutely. It would not be difficult to capitalize on this form type's service definition and inject the field names, intention, etc.\n\nThe only question is how to allow the base form name to be configured, as the existing form login options would not allow for that.\n\nOne idea would be instructing the user to configure all fields (username, password, target path and, optionally, CSRF) as `form_name[field_name]` and activate the form type the `form_name` is common; however, this may be sloppy magic. An explicit configuration would be preferable.\n",
            "I'm familiar with how the firewall processes exceptions from login listeners, but I was unsure about the flow of control around the logout listener.\n\nWhat do we want to happen when a logout CSRF token is invalid? Would throwing a non-AuthenticationException result in a 500 error caught at the framework level outside of the security component?\n\nThe Yii wiki discussed hiding CSRF tokens and failing silently if there isn't a logged in user and the logout would be a no-op. In our case, I'm not sure we can guarantee that a user is logged in or out purely by the presence of a token, since some logout handlers deal purely with third-party cookies (see [FOSFacebookBundle](https://github.com/FriendsOfSymfony/FOSFacebookBundle/blob/master/Security/Logout/FacebookHandler.php)).\n",
            "Noted. This is copied from the other functional test and I believe it was added just to make crawler selection easier.\n\nIn any event, the conflict between a submit name and the form's base name (e.g. `login[field]`) was enough to wrack my brain for about an hour, so I felt compelled to warn others :)\n",
            "@schmittjoh: What would you like to do here? I studied a bit more how exceptions are handled for the authentication listeners, and in the case of form-based logins, a CSRF error would throw this exception from `UsernamePasswordFormAuthenticationListener::attemptAuthentication()` and control would be directed to `AbstractAuthenticationListener::onFailure()`.\n\nThe LogoutListener is registered with the Firewall like any other authentication listener. The exception propagating out of `LogoutListener::handle()` would not be caught by the Firewall. Do we need to add a concept of failure handling to the LogoutListener?\n\nAn alternative solution would to throw an HttpException. [Django uses a 403](https://docs.djangoproject.com/en/dev/ref/contrib/csrf/#rejected-requests) for CSRF errors. I also dug up suggestions of using 403 or 409 from [Foswiki](http://foswiki.org/Tasks/Item1945).\n",
            "Indeed. I wasn't following the Form component changes when working on this in December. We'd likely leave the base name empty and allow the fields themselves to be configured.\n\nThe annoying part about creating extra services for listener configurations is that they need to be namespaced with the firewall key, since there could be multiple form_login listeners in the application. But I don't see a way around that :)\n",
            "@stof: a plain string is still possible for the user correct? UserInterface is just the only object alloewd?\n",
            "Will do. I wasn't sure how that worked :)\n",
            "Basic markdown supports ``` for block indentation; the syntax highlighting is the only thing that's specific to GitHub's renderer.\n",
            "Good catch. That was a leftover from an earlier attempt.\n",
            "I realize the compiler pass checks this (for the `kernel.event_subscriber` case), but I think it'd still be a good idea to check `$class` and throw an InvalidArgumentException if it does not implement the interface? This is a public method, so it is possible that someone could invoke it on their own.\n\nAlso, there's no reason this method cannot accept the class or object instance as its second parameter. The `getSubscribedEvents()` invocation would follow the same syntax already used, so it'd just be a matter of changing the doc comment and perhaps rename the `$class` parameter (PHP functions tend to use `mixed $object` in places where an object or class are accepted.\n",
            "Ah, you're absolutely right. I didn't catch that you were working with `$listenerIds` and got confused. I've been jumping between too many EventDispatcher classes recently :)\n",
            "In the case, would it be easier if the compiler pass simply dealt with the EventSubscriberInterface class itself and make calls to `addListenerService()`?\n\nEither way, you have to add functionality (and tests) to RegisterKernelListenersPass, but it wouldn't require any new functionality in ContainerAwareEventDispatcher.\n",
            "Got it :+1:\n",
            "If `modified + lifetime` is older than the current timestamp, it should be less than, no? The old code looked like it would delete active sessions.\n",
            "The `timestamp` field seems to be the standard used by the Logger itself, even though it's an array and there's no firm contract.\n\nI decided to expect that field name in the formatter. I did consider examining all values in the event data array and formatting any DateTime instances I came across, but that seemed like over-engineering.\n",
            "I opted to define the default value as a class property, as was also down for ExceptionHandler (which has no constructor) and Xml (which has more complicated option processing).\n\nI would have done the same for `$format`, since the original set it to `self::DEFAULT_FORMAT . PHP_EOL`, but I wanted to use late-static bindings to read the overridden default in ErrorHandler, which extends this class.\n",
            "I didn't find any reason why `PHP_EOL` was being appended here, given that the interface says `format()` should return a  single line . Please let me know if this needs to be restored.\n",
            "Are you suggesting a BadMethodCallException or LogicException?\n\nIn the case of the DB writer, which doesn't support a formatter, it throws an InvalidArgumentException. Is that more sensible here?\n",
            "I was looking at the Di component for modern documentation conventions, and noticed that none of the constructors report return values. I find it superfluous.\n\nIs this covered in the coding standards at all? I didn't find a reference to it.\n",
            "See [this comment](https://github.com/zendframework/zf2/pull/2029/files#r1256653). ErrorHandler extends Simple and I used `static` to refer the overridden default in this constructor. I also removed `PHP_EOL` (see [this comment](https://github.com/zendframework/zf2/pull/2029/files#r1256662)).\n",
            "FormatterInterface's job is creating a single-line string from the event data, which is why the database writers don't support it: they store event data directly into a row or document. When I created `FormatterInterface::setDateTimeFormat()`, it was just a relocation of logic from the Logger class, and IMO is only relevant for formatting DateTime in the context of formatted event data. If other writer backends can store actual dates, I think that's preferable. \n\nIn this case, we aren't even formatting the DateTime object ([DateTime::format()](http://php.net/manual/en/datetime.format.php) is never called). This is analogous to type-casting.\n",
            "I'd argue that the FirePhp log writer shouldn't support a formatter at all, as it simply intends to pass the message verbatim and disregards all other event data fields except priority, which is handled separately in the writer.\n\nMuch like the DB or Mongo writer, it seems there's nothing to format.\n",
            "I inferred the single-line purpose from [FormatterInterface::format()](https://github.com/zendframework/zf2/blob/master/library/Zend/Log/Formatter/FormatterInterface.php). I'm not sure where your definition is coming from, but even the [existing documentation](http://framework.zend.com/manual/en/zend.log.formatters.html) alludes to the formatter's job of producing a line of output.\n\nThe [XML formatter](https://github.com/zendframework/zf2/blob/master/library/Zend/Log/Formatter/Xml.php) also generates a single line of output single-line if you disregarded the appended `PHP_EOL`, which the Simple formatter also had before I removed it (I left a comment on that change to solicit some feedback, in case it was intentional).\n\nI don't follow what you meant by  consistency with others writers/formatters . I believe the Mongo writer is consistent with the behavior of the existing DB writer.\n\nRegarding Mongo's type support, it can handle scalars, objects and arrays. When a PHP object (excluding special objects defined by the driver) is converted to [BSON](http://bsonspec.org/) for storage, only it's public properties will be read. That's not what we'd want for a DateTime, which has `date` (a string), `timezone_type` (int) and `timezone` (string).\n",
            "The FirePHP writer/formatter was created less than a month ago in 53723adf96954cd42125d429bfc60226119ae654, so I don't understand the comment about legacy behavior. If it was a general comment, are there really any plans to restructure writers and formatters between this release candidate and the 2.0 release (apart from this PR, which resulted from a post I made on the mailing list)?\n\n> Do you have test some writers like Db and ZendMonitor with your BC?\n\nEdit: I mentioned this in the PR message body, but I see you already replied [here](https://github.com/zendframework/zf2/pull/2029#issuecomment-7349832).\n",
            "Point noted. I believe that should be handled in the writer, then, as it seems to be a requirement of the log destination. @Maks3w, would you agree?\n",
            "Done in 46ee695ee7332d8ec77762e07413647ae55b5117\n",
            "Does c883a1d01ff9e869f4318b66341b682561f64536 make sense? Perhaps in the stream writer, you'd want the `PHP_EOL` append behavior to be optional?\n",
            "@Maks3w: should I go forward with that? It looks like a big BC break for the DB writer, as the default column name (if not using a custom mapping) would have been `timestamp`. Alternatively, we could try passing an integer timestamp in the event data and use DateTime as-needed for formatting purposes ([date()](http://php.net/manual/en/function.date.php) wouldn't be as robust for timezones). That would at least alleviate concerns about how the DateTime object might be handled in the DB and ZendMonitor writers.\n",
            "Leaving it as-is, I'm still curious how DateTime instances should be converted for the DB and ZendMonitor writers.\n\nWhat is the typical timestamp column type for DB writers?\n",
            "Should the DB writer convert the DateTime to `YYYY-MM-DD HH:MM:SS`, then? That seems to be the common format for `datetime` and `timestamp` column types. With the old Logger and DB writer class, the date would have been passed in as an ISO 8601 string, so I would have assumed the column for this field was a `varchar`. It's been a while since I worked with SQL servers; would an ISO-formatted string get converted to the appropriate date type?\n",
            "Unless you extend the DB writer, I don't see how you could format individual fields with `$columnMap` and `$separator` as the only options.\n\nI see a few options here:\n- Add a `$dateTimeFormat` option to the DB writer, and default that to `YYYY-MM-DD HH:MM:SS` or UTC timestamp.\n- Allow the writer to take a formatter service, which opens several possibilities:\n  - Ignore `format()` (like FirePHP ignores the date time format methods) and make a new method that can apply transformations to the event data array before column mapping and insertion.\n  - Ignore `format()` and make a new method that simply transforms a DateTime value into a string (all formatters can use this method).\n  - Change `format()` to return a mixed value, and let the DB's formatter receive the event data array, apply transformations, and return an array.\n",
            "Ha, I was testing whether `any()` still complained if an expectation was never invoked. It only happened in conjunction with `with()`, but recent version of PHPUnit must have resolved the bug.\n",
            "I'll fix that now. A question regarding the [import statement conventions](http://framework.zend.com/wiki/display/ZFDEV2/Coding+Standards#CodingStandards-ImportStatements), though, which state:\n\n> Import statements MUST be declared once, at the top of the file, following the namespace declaration. The use statement MUST be issued once, with one class (and optional alias) per line, separated by commas and terminated on the last import by a semicolon; class names MUST be aligned.\n\nI took at look at some of the recent classes elsewhere in ZF2 (DI and Form components) and `use` statements are on their own lines. Are the conventions simply outdated in that respect?\n",
            "Indeed; this is necessary for MongoDB all the time, and whenever ORM relations are used as choices.\n",
            "@stof: Would CS call for `()` here?\n",
            "I realize the compiler pass checks this (for the `kernel.event_subscriber` case), but I think it'd still be a good idea to check `$class` and throw an InvalidArgumentException if it does not implement the interface? This is a public method, so it is possible that someone could invoke it on their own.\n\nAlso, there's no reason this method cannot accept the class or object instance as its second parameter. The `getSubscribedEvents()` invocation would follow the same syntax already used, so it'd just be a matter of changing the doc comment and perhaps rename the `$class` parameter (PHP functions tend to use `mixed $object` in places where an object or class are accepted.\n",
            "Ah, you're absolutely right. I didn't catch that you were working with `$listenerIds` and got confused. I've been jumping between too many EventDispatcher classes recently :)\n",
            "In the case, would it be easier if the compiler pass simply dealt with the EventSubscriberInterface class itself and make calls to `addListenerService()`?\n\nEither way, you have to add functionality (and tests) to RegisterKernelListenersPass, but it wouldn't require any new functionality in ContainerAwareEventDispatcher.\n",
            "Got it :+1:\n"
        ],
        "prs": [
            {
                "title": "Fix typo in SyncClusterConnection exception",
                "body": ""
            },
            {
                "title": "JS tests for replica set flapping and heartbeatTimeoutSecs ",
                "body": "This is pending review in JIRA for 2.4 QA. Opening the PR earlier so I can refer to it.\n"
            },
            {
                "title": "Use DBQuery._addSpecial() more and return self from comment()",
                "body": "Changing comment()'s return value is a BC break, but this makes the method consistent with other modifiers that also add special query properties.\n\nAlso adds a few methods to the DBQuery.help() output.\n"
            },
            {
                "title": "SERVER-3483 JS test for Timestamp JSON wrapper",
                "body": ""
            },
            {
                "title": "[Console] Fix default value handling for multi-value options",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7689 |\n| License | MIT |\n\nThe default value for array options will be an array, so it is not suitable to use as the default when processing one of many values for a multi-value option. Using null seems appropriate here, as it indicates the absence of a value and also converts nicely to an empty string (as opposed to an empty array).\n"
            },
            {
                "title": "[PropertyAccess] Documentation cleanup",
                "body": "| Q | A |\n| --- | --- |\n| Fixed tickets | none |\n| License | MIT |\n\nResubmission of #7498\n"
            },
            {
                "title": "Fix param docs for PropertyAccessor read method",
                "body": "| Q | A |\n| --- | --- |\n| Fixed tickets | none |\n| License | MIT |\n"
            },
            {
                "title": "[2.1] Support PHP MongoDB driver 1.3.0+ in profiler/session classes",
                "body": "> Bug fix: yes\n> Feature addition: yes\n> Backwards compatibility break: no\n> Symfony2 tests pass: yes\n> Fixes the following tickets: #6130\n> License of the code: MIT\n\nI don't believe this is a BC break, but just to confirm:  the MongoDbSessionHandler constructor signature changed, as I removed the `Mongo` type hint.\n\nBug fix entails allowing MongoClient to be used by default if the new driver is available, since the original Mongo class is deprecated. I also removed the assumption about `MongoCollection::update()`'s return value, since it may be a status array now.\n"
            },
            {
                "title": "[HttpFoundation] Document MongoDbSessionHandler changes",
                "body": "```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n```\n\nDocumentation changes for #5916\n"
            },
            {
                "title": "[HttpFoundation] Revise MongoDB session storage",
                "body": "```\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n```\n\nI decided to take a look at the MongoDB session driver after reading @pgodel's [blog post](http://blog.servergrove.com/2012/11/05/storing-sessions-in-mongodb-with-symfony2/) today. This PR contains some fixes to make this session handler integrate better with MongoDB, as well as make it more in line with the work I did in zendframework/zf2/#2031:\n- Default to _id for storing session ID (BC break)\n- Use MongoDate instead of MongoTimestamp (BC break)\n- Rename default field names ( sess_  is redundant)\n-  justOne  is redundant for session removal\n- Assert true return values in method tests\n- Add note about TTL collections for gc()\n- Don't set identifier in upsert (invalid behavior)\n\nIn my opinion, the BC breaks are reasonable. `_id` is the logical field to store the session ID, as I'd expect many users may not even think to index the `sess_id` field to avoid inefficient queries otherwise. Also, MongoTimestamp should never have been used in the existing manner. Per the [documentation](http://php.net/manual/en/class.mongotimestamp.php):\n\n> This class is not for measuring time, creating a timestamp on a document or automatically adding or updating a timestamp on a document. Unless you are writing something that interacts with the sharding internals, stop, go directly to MongoDate, do not pass go, do not collect 200 dollars. This is not the class you are looking for.\n\nOn a side note, I'm not sure why `sess_` prefixes exist for the PDO driver. It seems redundant in either case (the table/collection would logically have  session  in the name).\n\nThe fix to the update statement actually addresses a bug were `_id` to appear in the `$set` query.\n\nI'm not sure how to document the BC breaks or changes, as the 2.1 branch's readme files look a lot sparser than those for 2.0. Let me know if there's something else to be done, though.\n"
            },
            {
                "title": "[DoctrineBridge] Require class option for DoctrineType",
                "body": "This is a resubmission of #5289 against the 2.1 branch.\n\n```\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\nLicense of the code: MIT\nDocumentation PR: -\n```\n"
            },
            {
                "title": "Create CONTRIBUTING.md file for auto-linking in PR's",
                "body": "See: https://github.com/blog/1184-contributing-guidelines\n"
            },
            {
                "title": "[DoctrineBridge] Require class option for DoctrineType",
                "body": "I was updating the DocumentType class in the MongoDB bundle and realized that the `class` attribute was required but not enforced by OptionsResolver.\n\nIt's been a while since I used this field, but perhaps other options should be marked as required, too. Please let me know.\n\n/cc @beberlei @bschussek\n"
            },
            {
                "title": "[Config] Fix comment typo",
                "body": ""
            },
            {
                "title": "[DoctrineBridge] Initialize proxies in UniqueEntityValidator",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=master)](http://travis-ci.org/jmikola/symfony)\nFixes the following tickets: #3163\n"
            },
            {
                "title": "[DependencyInjection] Fix Yaml file loader test",
                "body": "This broke when 2.0 was recently merged into master with b9daae28476385d16984a729b9e7c8e30911fa23, as the Yaml fixture change from 24a0d0a2dcf334efc7d85f1c816c01d7fa4111f8 was not included.\n\nhttps://twitter.com/webmozart/status/188325579894947840\n"
            },
            {
                "title": "[HttpKernel] Throw exception if TimeDataCollector has no last event",
                "body": "This fixes an NPE I receive at times when enabling the WDT on production (on rare occasions I need to debug something live). I often find the following errors in the logs whenever the WDT is rendered:\n\n> PHP Fatal error:  Call to a member function getOrigin() on a non-object in /data/site/vendor/symfony/src/Symfony/Component/HttpKernel/DataCollector/TimeDataCollector.php on line 78\n\nMy mistake is enabled profiling and the WDT bundle but forgetting to flip the debugging kernel argument to `true`. This prevents the TraceableEventDispatcher from being used, which in turn means that no events are ever set on the TimeDataCollector. Adding an `isset()` check and throwing an exception with a helpful error message seems helpful here. No we'll get:\n\n> PHP Fatal error:  Uncaught exception 'UnexpectedValueException' with message 'The last event is not available. Are you sure that debugging is enabled in the kernel?' in /data/site/vendor/symfony/src/Symfony/Component/HttpKernel/DataCollector/TimeDataCollector.php:78\n\nI'm not encouraging anyone to use WDT on production here, but I think we'd do well to avoid any change of NPE's in the code.\n"
            },
            {
                "title": "[Form] Failing test for empty_data option BC break",
                "body": "This demonstrates the issue described in symfony/symfony#3354. FieldType no longer has access to the child type's data_class option, which makes it unable to create the default closure for empty_data.\n\nWe're still waiting for @bschussek to chime in on #3354, so there is no rush to merge this. Most users are expecting `data_class` to be all that's necessary to facilitate creation of a new form data object -- it's not clear if that is still the intended functionality after the recent form BC breaks, or if those breaks were an oversight.\n\nIf it is to remain intended functionality, I think we can keep this test around after the issue is resolved.\n"
            },
            {
                "title": "[Console] Stop parsing options after encountering  --  token",
                "body": "This enables support for arguments with leading dashes (e.g.  -1 ), as supported by getopt in other languages.\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=double-dash)](http://travis-ci.org/jmikola/symfony)\n\nThe test suite currently fails due to 7a54fe41caf66f468e80c103092b3534348c486a. ArgvInputTest passes, and these changes don't appear to break anything else.\n\n![](http://media.giantbomb.com/uploads/2/27528/1061704-mario_kart_double_dash___title_screen_super.jpg)\n\nAside: This got me thinking about how one would pass an option value of  -1 . I suppose for input options with `VALUE_OPTIONAL`, it would be ambiguous if  -1  followed; however, `VALUE_REQUIRED` should probably require that the next token is captured as the option value. In my tests, a required option value with a leading dash was interpreted as another option. The workaround for all of this is to use the space-less syntax (e.g. `-f=-1`).\n"
            },
            {
                "title": "[DoctrineBridge] Iterator->current() is not the same as current(Iterator)",
                "body": "More lively discussion from: doctrine/DoctrineMongoDBBundle#84.\n"
            },
            {
                "title": "[DoctrineBridge] Rewind MongoCursor before use in unique validator",
                "body": "Fixes a regression I introduced in: 265360d1426676cf9b0ff7a01e631546e22e3b63\n"
            },
            {
                "title": "[SecurityBundle] Avoid direct request dependency in LogoutUrlHelper",
                "body": "This quickly addresses the problem when the helper is constructed in a console environment without request scope. Ideally, the helper should be able to construct the absolute logout URL using data already available in the UrlGenerator's RequestContext and the $_SERVER environment variable; however, that will require copying some code from the Request class to create a base URI and path.\n\nFixes #3508\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=master)](http://travis-ci.org/jmikola/symfony)\n"
            },
            {
                "title": "[Security] Document CSRF protection for LogoutListener",
                "body": ""
            },
            {
                "title": "[DoctrineBridge] Add tests for data fixture ContainerAwareLoader",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #3328 (PR was missing this test)\nTodo: -\n```\n\nThe test is skipped unless the optional `doctrine/data-fixtures` is available. I confirmed that it passes with it installed. Once this is merged, the DoctrineFixturesBundle will contain nothing more than a console command, which can be merged into DoctrineBundle.\n"
            },
            {
                "title": "[DoctrineBridge] Simpler result checking in UniqueEntityValidator",
                "body": "In 928e352d09a6bb0b566e61bc7482ead1d4859442, support for MongoDB cursors was implemented by converting an Iterable, non-ArrayAccess object to an array. The ArrayAccess check didn't seem purposeful, since cursors are only Iterable and ORM returns real arrays. Since we only need to access the first element of the cursor (and only in cases where the count is exactly 1), we can simply use current() to handle Iterables and arrays.\n\n@henrikbjorn: Any thoughts on this? I was testing @stof's work in doctrine/DoctrineMongoDBBundle#68 and our Symfony submodule was a bit old, so I fixed UniqueEntityValidator on my local machine before I realized you had come up with a solution a few weeks ago.\n"
            },
            {
                "title": "[DoctrineBridge] ContainerAwareEventManager class",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n```\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=doctrine-lazy-event-manager)](http://travis-ci.org/jmikola/symfony)\n\nThis allows services to be registered (and lazily loaded) with Doctrine Common's EventManager.\n\nIt is ported from @schmittjoh's previous commits here: doctrine/DoctrineBundle#23. I'd like to integrate this with DoctrineMongoDBBundle, so the Bridge once again seemed like an ideal alternative to duplicating code.\n"
            },
            {
                "title": "[HttpKernel] Fix call to Memcached::set() once again",
                "body": "I originally fixed this in #3358, but it appears #3363 (which touched the same line) was merged soon after.\n"
            },
            {
                "title": "[HttpKernel] Fix call to Memcached::set() in MemcachedProfilerStorage",
                "body": "The existing code seems to have been copied from MemcacheProfilerStorage. Memcache::set() includes a $flag argument, but Memcached::set() omits that. See:\n- http://php.net/manual/en/memcached.set.php\n- http://php.net/manual/en/memcache.set.php\n\n---\n\nI assume Travis-CI didn't catch the MemcachedProfilerStorageTest failures because those tests are skipped: http://travis-ci.org/#!/symfony/symfony/jobs/678889/L104\n"
            },
            {
                "title": "Grammar and formatting in upgrade doc",
                "body": "Added logical component headings to changes. Grouped changes by bullets, with indented text and code blocks. Applied consistent formatting to method names and code references. Re-flowed paragraph text to abide an 80-character column.\n"
            },
            {
                "title": "[DoctrineBridge] Add common data fixtures loader",
                "body": "Symfony does not depend on doctrine/data-fixtures, but having this class in the bridge would enable DoctrineMongoDBBundle (and possibly others) to load fixtures without requiring DoctrineFixturesBundle to be installed.\n\nAdditionally, DoctrineFixturesBundle seems to only consist of this class and a command for loading ORM fixtures. With this in the bridge, we can possibly eliminate DoctrineFixturesBundle altogether by merging its command into DoctrineBundle.\n"
            },
            {
                "title": "[FrameworkBundle] Allow cache:clear/warmup to skip optional warmers",
                "body": "> Bug fix: no\n> Feature addition: yes\n> Backwards compatibility break: yes\n> Symfony2 tests pass: [yes](http://travis-ci.org/#!/jmikola/symfony/builds/647861)\n\nExercise.com has been using this for a while for our local environments. Skipping the optional cache warmers (namely Assetic) can save quite a bit of time.\n"
            },
            {
                "title": "[HttpKernel] Fix missing $method argument in MongoDbProfilerStorageTest",
                "body": "```\nBug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n```\n\nThis test case fixes failures related to a signature change for ProfilerStorageInterface::find(). See: 1aef4e806b5a99312b82a0b10a9d2e2f4d4314ba and 5f2226807cfe4f37c461709d41f991d615cf0684.\n\nThis was easily missed as the test case is skipped unless a MongoDB server is running.\n"
            },
            {
                "title": "[Security] Implement support for CSRF tokens in logout URL's",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: -\n```\n\n[![Build Status](https://secure.travis-ci.org/jmikola/symfony.png?branch=logout-csrf)](http://travis-ci.org/jmikola/symfony)\n\nThis derived from #3006 but properly targeting on the master branch.\n\nThis exposes new configuration options to the logout listener to enable CSRF protection, as already exists for the form login listener. The individual commits and their extended messages should suffice for explaining the logical changes of the PR.\n\nIn addition to changing LogoutListener, I also created a templating helper to generate logout URL's, which includes a CSRF token if necessary. This may or may not using routing, depending on how the listener is configured since both route names or hard-coded paths are valid options.\n\nAdditionally, I added unit tests for LogoutListener and functional tests for both CSRF-enabled form logins and the new logout listener work.\n\nKudo's to @henrikbjorn for taking the time to document CSRF validation for form login listeners (see [here](http://henrik.bjrnskov.dk/symfony2-cross-site-request-forgery/)). The [Logout CSRF Protection](http://www.yiiframework.com/wiki/190/logout-csrf-protection/) article on the Yii Framework wiki was also helpful in drafting this.\n"
            },
            {
                "title": "[Security] Implement support for CSRF tokens in logout URL's",
                "body": "```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: -\nTodo: Resolve merge conflicts when integrating this into the master branch\n```\n\nThis exposes new configuration options to the logout listener to enable CSRF protection, as already exists for the form login listener. The individual commits and their extended messages should suffice for explaining the logical changes of the PR.\n\nIn addition to changing LogoutListener, I also created a templating helper to generate logout URL's, which includes a CSRF token if necessary. This may or may not using routing, depending on how the listener is configured since both route names or hard-coded paths are valid options.\n\nAdditionally, I added unit tests for LogoutListener and functional tests for both CSRF-enabled form logins and the new logout listener work. Lastly, this commit includes a cherry-pick of 60ebaaad70e6d7b8e280f34730973ee29c4c559d from the master branch.\n\nThis is not a clean merge due to a conflict with 60ebaaad70e6d7b8e280f34730973ee29c4c559d (Twig extension DI config) and 74cfd045049267d5bad7fe70131e5d95025aa393 (creation of `LogoutListener::requiresLogout()`). I attempted to eliminate one conflict by cherry-picking 60ebaaad70e6d7b8e280f34730973ee29c4c559d (a reasonable commit to back-port to the 2.0 branch), but the conflict remained.\n\n@fabpot: If this PR is agreeable, please let me know how to proceed with preparing it for the master branch. I suppose that might entail a separate PR with an additional merge commit, but you might decide it's easier to simply do that yourself after evaluating the changes.\n"
            },
            {
                "title": "[Console] Improve input definition output for Boolean defaults",
                "body": "This addresses an annoyance I had with command help printing `(default: )` for arguments and options that default to `false`.\n\n```\nBug fix: no\nFeature addition: yes\nBackwards compatibility break: no (documentation text/XML output is slightly changed)\nSymfony2 tests pass: yes\n```\n"
            },
            {
                "title": "Note LoaderResolverInterface type hinting in the 2.1 changelog",
                "body": "Although #2785 was originally opened against 2.0, its merge to master seems to be intentional. This documents the BC break that some experienced (see: FriendsOfSymfony/FOSRestBundle#155).\n"
            },
            {
                "title": "[DependencyInjection] Refactor usage of SPL exceptions",
                "body": "```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\n```\n\nThis was something discussed on the mailing list recently and a topic at the last IRC meeting. The DependencyInjection component was what I had in mind while discussing this with @lsmith a few weeks ago, as I found that it already had some local SPL exceptions, which weren't being used directly (only as base classes for the compiler exceptions). This PR replaces uses of core SPL exceptions with the component's equivalents. I've listed it as BC-breaking to be safe, but I don't think it should cause any trouble, since the new exceptions are sub-classes of those originally used.\n\nI purposely avoided changing the exceptions in the dumped PHP container. If we agree that's worth doing, it would be a trivial addition to the PR.\n"
            },
            {
                "title": "[Config] Use LoaderResolverInterface for type-hinting",
                "body": "```\nBug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\nFixes the following tickets: -\n```\n\nI've listed this as a BC break because we're changing the argument type-hint, but I think it's unlikely to affect anyone.\n"
            },
            {
                "title": "[Security] Fix checkRequestPath doc; closes #2323",
                "body": ""
            },
            {
                "title": "[DependencyInjection] Fix getArgument() for replaced definition arguments",
                "body": "I was implementing something that worked with DefinitionDecorators before the container was compiled and ran into some missing functionality. While I was tinkering, I also added some additional tests for exceptions in both Definition and DefinitionDecorator.\n"
            },
            {
                "title": "[FrameworkBundle] Fix typo in FrameworkExtensionTest",
                "body": "Spotted this typo in the test messages from my previous asset helper scope PR.\n"
            },
            {
                "title": "[FrameworkBundle] Assign request scope to assets helper only if needed",
                "body": "**Note**: This PR replaces #2218\n\nI traced this request scope addition back to [an old commit](https://github.com/symfony/symfony/commit/d9f5c99fabc649b7067daf6f2f69bdd86f6f715b#commitcomment-597654) from @kriswallsmith.\n\nNo other helpers have request scope and the assets helper's parameters don't appear to depend on the request in any way, so this appears to be unnecessary. As-is, request scope here prevents use of the assets helper from a console command that may need to internally render a template.\n"
            },
            {
                "title": "[FrameworkBundle] Assets templating helper does not need request scope",
                "body": "I traced this request scope addition back to [an old commit](https://github.com/symfony/symfony/commit/d9f5c99fabc649b7067daf6f2f69bdd86f6f715b#commitcomment-597654) from @kriswallsmith.\n\nNo other helpers have request scope and the assets helper's parameters don't appear to depend on the request in any way, so this appears to be unnecessary. As-is, request scope here prevents use of the assets helper from a console command that may need to internally render a template.\n"
            },
            {
                "title": "[Doctrine] Fix UniqueEntityValidator reporting a false positive by ignoring multiple query results",
                "body": "An entity should only be considered unique if its search criteria returns no matches or a single, identical entity. Multiple results indicates that conflicting entities exist.\n\nNote: the DoctrineMongoDBBundle's unique validator checks identifier values if the object strict-equality check is false. This may be a worthwhile improvement, as it would prevent reporting a validation error for an enttiy which is going to overwrite its conflicting counter-part in the database.\n"
            },
            {
                "title": "[FrameworkBundle] Avoid listener key conflicts in ContainerAwareEventDispatcher",
                "body": "Since the key was previously concatenating service ID and method without a separator, it's possible that two different listeners could conflict (e.g. service/method pairs: foo/bar and fo/obar).\n"
            },
            {
                "title": "[EventDispatcher] Fix removeSubscriber() to work with priority syntax",
                "body": "Previously only addSubscriber() was being tested with priority syntax. This adds a unit test for removeSubscriber() and fixes a bug that would have caused it to fail.\n"
            },
            {
                "title": "[EventDispatcher] Remove static declaration for getSubscribedEvents()",
                "body": "[EventDispatcher] Remove static declaration for EventSubscriberInterface::getSubscribedEvents()\n\nExisting code never invokes this subscriber method statically and the Doctrine interface upon which it's based is also not static. Changing it to a normal method will also allow the interface to be mocked easily, in contrast to requiring stub classes (see EventDispatcherTest).\n"
            },
            {
                "title": "[Yaml] Do not skip consistency checks in InlineTest::testDump()",
                "body": "These conditionals were excluding 12.30e+02 from being checked. Removing the conditionals does not break any tests.\n\nI investigated the conditionals with git blame, but that stops at previous commits for code formatting changes. These appear to be very old. Perhaps they were added for test failures on certain platforms? I don't spot any failures on Linux.\n"
            },
            {
                "title": "[Yaml] Wrap numeric strings in quotes when dumping",
                "body": "This addresses an obscure case where a hash string (actually a commit-ish,  686e444 ) was dumped to YAML as an unquoted string value. It was later parsed from YAML as an exponential numeric and changed to  .Inf .\n\nThis commit should not change the existing behavior when dumping non-string numerics. It also doesn't appear to disturb any of the other test cases. I realize it's a huge edge case, so I'm open to discussion.\n\nThe alternative to this fix was an ugly `preg_replace()` to apply quoting around the commit-ish after dumping. I would look forward to removing that :)\n"
            },
            {
                "title": "[Form] Make CSRF error message configurable",
                "body": "We've had ongoing problems with non-technical users of our site being confused by the default CSRF error message. While it was originally configurable via the messages XML files (way back when), that's no longer the case.\n\nThis PR turns the hard-coded CSRF validation error message in `CsrfType` into a configurable constructor argument, form option, and app configuration option. I attempted to follow the example of the CSRF's field name, whose default value appears in both `FormTypeCsrfExtension` and FrameworkBundle's configuration class.\n\nThe FrameworkBundle test fixtures were updated to provide examples for all three formats.\n\nI didn't touch `CsrfExtension`, which I believe is intended for folks using the Form component on its own. It appears to be missing multiple configuration options that FrameworkBundle handles for `FormTypeCsrfExtension`, so I imagine the absence of a configurable error message is forgivable. Still, that's something to think about for the maintainer of that class.\n"
            },
            {
                "title": "[Form] Refer to FormView explicitly in its own getParent() type-hint",
                "body": "Using  self  makes mocking impossible, as the type-hint would then refer to the extending class and make the declaration incompatible.\n"
            },
            {
                "title": "[Form] Remove unnecessary use statements in EventListeners",
                "body": ""
            },
            {
                "title": "[Form] FormInterface extends IteratorAggregate instead of Traversable",
                "body": "Traversable appears to have special treatment in PHP, so previous attempts to simply mock FormInterface yielded:\n\n```\nClass Mock_FormInterface_d0094b05 must implement interface Traversable as part of either Iterator or IteratorAggregate\n```\n\nI see no reason why FormInterface can't directly extend IteratorAggregate. This fix also removes the FormInterface counterpart in the Tests namespace, which was arbitrarily extending Iterator.\n\nHat tip to @kriswallsmith for coming across this :)\n"
            },
            {
                "title": "[Security] Dispatch event when SecurityContext is read from session in Co",
                "body": "[Security] Dispatch event when SecurityContext is read from session in ContextListener::handle()\n\nThis event is helpful if the developer must observe the context's token when it is first initialized during the request, but before it may be overwritten by an authentication listener in that same request. Before this change, the closest events were onCoreRequest (before ContextListener::handle() is invoked, so too soon) or onSecurityInteractiveLogin (after the context's token is overwritten, so too late). Additionally, there were no suitable hooks within security component services (such as success/failure handlers in the authentication listeners).\n"
            },
            {
                "title": "[Form] Use strict string comparison against  $$key$$  in CollectionField",
                "body": "Without strict comparison, the first element of a collection will never be removed if its key is integer zero.\n\nI haven't tested @bschussek's revisions to the form component, so I can't confirm if this bug is fixed upstream. From what I saw, he uses a listener to handle resizing of form fields, so the offending code might naturally have disappeared.\n"
            },
            {
                "title": "[FrameworkBundle] Change validator's annotation prefix from  validation  ",
                "body": "[FrameworkBundle] Change validator's annotation prefix from  validation  to  assert \n"
            },
            {
                "title": "[Config] Alias used classes in NodeBuilderTest to avoid conflicts",
                "body": "[Config] Alias used classes in NodeBuilderTest to avoid conflicts with fixture classes required in TreeBuilderTest\n\nDepending on the order of execution of Config\\Definition\\Builder tests (due to filesystem ordering), namespace conflicts can occur between real classes and fixtures loaded by the TreeBuilderTest.\n"
            },
            {
                "title": "[2.1] Session SaveHandler support for MongoClient driver class",
                "body": "See: #3145\n"
            },
            {
                "title": "[2.0] Log Writer support for MongoClient driver class",
                "body": "See: #3145\n"
            },
            {
                "title": "Revise MongoDB session save handler's gc() docs",
                "body": "Fixing a typo and adding an extra sentence with some indexing advice.\n"
            },
            {
                "title": "[Security] Copy token attributes in PreAuthenticated and User AuthenticationProviders",
                "body": "The use case for this PR is as follows:\n\nI have a listener on the `security.interactive_login` event that sets a login time attribute on the UsernamePasswordToken after a successful login. I use this so that a custom `AuthenticationTrustResolver` implementation can consider users remembered instead of fully-authenticated if they logged in over 15 minutes ago, which allows for Amazon-like two-tiered authentication.\n\n`UserAuthenticationProvider::authenticate()` likes to construct new UsernamePasswordToken objects after it performs pre/post auth checks and password validation. I noticed this happens on the request after a successful login, even if the incoming token argument is already authenticated.  My solution is to ensure the attributes get copied over into the newly-constructed token before `authenticate()` returns.\n"
            },
            {
                "title": "Add router resource type option to FrameworkExtension",
                "body": "The router LoaderInterface class already supported a type parameter, but the top-level Router class had no suppport for it.\n"
            },
            {
                "title": "Implement Configuration\\Builder in FrameworkExtension",
                "body": "Johannes' latest progress doesn't seem to be in fabpot/master, so my branch includes commit(s) from his [config branch](https://github.com/schmittjoh/symfony/commits/config) (which is being rebased regularly).  I'm not sure how much of what I need is already in fabpot/master, but I do know that `Symfony\\Component\\DependencyInjection\\Configuration\\Processor` is currently missing.  This pull request should remain in-progress at least until his revised component classes can be pulled.\n\nI can't successfully complete all unit tests due to a failure with `DependencyInjection\\Configuration\\MergeTest`, but I have things working within FrameworkBundle:\n\n```\nphpunit src/Symfony/Bundle/FrameworkBundle/Tests/DependencyInjection\n```\n\nThis should be enough to start reviewing the work.  All in all, implementing the config builder helped eliminate some of the annoying BC breaks from my last configuration merge implementation.  My take on the config class is that, while it certainly appeared unwieldy at first glance, it was ultimately very helpful and a joy to work with.  IMO, the Configuration class is quite readable as a result.\n\nThere is room for improvement (I listed some issues in my commit message), but I believe what we have here is functional and a step above the prior refactoring.\n"
            },
            {
                "title": "More intuitive matching of bundle directory lookups for Doctrine extensions",
                "body": "See: https://github.com/fabpot/symfony/pull/309\n"
            },
            {
                "title": "[Form] readPropertyPath should return null instead of empty array",
                "body": "This is a fix for some odd form behavior we were seeing before Bernhard's recent refactoring of property paths:\n\nhttp://github.com/jmikola/symfony/commit/e1be4e96899bfb03193c83b0c979c45e462e0436\n\nThe refactoring didn't change the behavior, so I made a test case off of the latest code to demonstrate this.  I think the example in the commit message also explains the motivation for the fix.\n"
            },
            {
                "title": "[Form] Outstanding patches for Choice/Collection fields",
                "body": "These commits were sitting around in a github convo I had months ago with Bernhard.  I couldn't determine how to exclude certain commits from the pull request, but feel free to ignore:\n- http://github.com/jmikola/symfony/commit/32d7b753a971f43c19319bdd9c1d262fe04e3e45\n- http://github.com/jmikola/symfony/commit/3a38fcf3547f03b58aef6c8c347a2631b85f89fc\n\nThe former ended up not being necessary and the latter appears to have been fixed by somone else since.\n\nLet me know if you have any questions, thanks.\n"
            },
            {
                "title": "[2.1] Added MongoDB session save handler",
                "body": "I based the test on the existing DB session save handler, which appears to be a functional test even though it is labeled as a unit test.\n\nThis was the first time I came across an options objects, so I added the database name, collection name, and save options in there instead of constructor arguments (as was done in the MongoDB log writer). The Mongo connection itself is still a constructor argument.\n\nI also removed the save path property on the handler class, as that wasn't used at all (in any of the existing handlers). I have reservations about the `ini_get()` call in `open()`, and feel all of the handler classes would do well to inject that option, but I'd like to solicit feedback on that before deviating from the existing convention.\n\nAlso, it's not clear to me where session ID's are generated. I decided to use the session ID as Mongo's `_id` field, which implicitly has a unique index. I imagine the DB table might only have a unique index on the ID and session name combination. If that's the case, I may want to change that and let Mongo generate it's own ObjectId for `_id` and store the session ID in its own document field (so the user can create their own compound, unique index). The common in `MongoDB::write()` (and the test) explains my concern.\n"
            },
            {
                "title": "Fix criteria for DB session garbage collection",
                "body": "Sessions are expired if their modified timestamp plus lifetime is less than, not greater than, the current time.\n"
            },
            {
                "title": "Rely on log formatters for DateTime formatting",
                "body": "See: [this thread on fw-core](http://zend-framework-community.634137.n4.nabble.com/fw-core-Relocating-Logger-log-date-formatting-to-formatters-td4655676.html) for context.\n\nThis shifts date formatting responsibilities to the log formatter classes. The basic logic I used was to check whether the `timestamp` field in event data is a DateTime, and invoke it's `format()` method if so. Writers that do not support a formatter, or those that work with event data outside of `FormatterInterface::format()`, will be responsible for handling the DateTime object on their own.\n\nHere is the state of the existing writers:\n- **Db**: This writer doesn't support a formatter. I assume the `timestamp` field in event data is currently inserted into a string column. Ideally, I think we'd want to store this as a native date type, but I'm not familiar enough with the DB layer to determine how to accomplish this.\n- **FirePhp**: This only references the `message` and `priority` fields in event data. In its formatter class, I implemented the `setDateTimeFormat()` method (to adhere to the interface change) but it does nothing.\n- **Mail** and **Stream**: These writers construct a vanilla SimpleFormatter internally, which means the default date format (ISO 8601) will be used unless the user changes the formatter with the writer's `setFormatter()` method. I suppose this is OK.\n- **MongoDB**: If the `timestamp` field in event data is a DateTime instance, it is converted to MongoDate.\n- **Syslog**: Formatters are optional. Without a formatter, only the `message` field in event data is used. I don't think anything needs to be done here.\n- **ZendMonitor**: I also unfamiliar with this writer and I found little documentation on the `zend_monitor_custom_event()` and `monitor_custom_event()` functions. Would this writer require conversion of the DateTime object, or is it reasonable to store that directly?\n"
            },
            {
                "title": "Added MongoDB log writer",
                "body": "This is my first PR, so feel free to scrutinize this thoroughly.\n\nWhile implementing this, I had a question about the `$event` arguments for the `write()` method. Are all of the values either scalars or an array of scalars? I'm assuming that based on the DB writer's `mapEventIntoColumn()` and `eventIntoColumn()` methods, as array values are handled specially (but only one level in). This obviously isn't a problem for Mongo, although I was curious if objects or other types might end up in `$event` and could benefit from special processing (e.g. converting DateTime instances to MongoDates).\n"
            },
            {
                "title": "Handle reflected param names for variable length arguments",
                "body": "The existing code handled cases where a PHP extension declared an argument for the reflection API without providing a name (typically done for referenced arguments). Also handle the case where the name it provides is  ...  (i.e. variable arguments), as that would break mock object generation.\n\nSee: http://php.net/manual/en/language.pseudo-types.php\n\n---\n\nThis came up as I was attempting to Mock the [MongoCollection::aggregate()](http://php.net/manual/en/mongocollection.aggregate.php) method, which uses the convention for defining variable length arguments. I'm aware the docs currently use `$..` as the name instead of the `$...` convention -- that was an oversight, which is being changed.\n"
            },
            {
                "title": "Fix typo in blockquote plugin docs",
                "body": ""
            }
        ]
    },
    "248818": {
        "repos": [
            "The Symfony2 PHP framework"
        ],
        "commit_comments": [
            "See #6456\n",
            "@pulse00 do you have lowercased methods in your acces_control list ?\nIf yes, they were not enforced before but now are which might explain what you see.\n\nIf this is the case this is probably related to the security config which is not that easy to get right. My recent PRs are a preparation work for a RFC to simplify it.\n",
            "You are right, could you submit a PR ?\n",
            "@fernanDOTdo that was actually a bug in the previous version, this route worked because `{city}` is the first placeholder. (i.e. `/{year}/deals-in-{city}` would not have worked with the previous version).\n",
            "I'll check this later today\n",
            "Your  accounts  pattern must be  /accounts/{id}.{_format}  so id will match anything that is not the following separator, ie a  . \n\nSo {id} will match  10/daily_quotas/1  as you state.\n\nThere was no problem before because {id} would not match either the previous separator  /  or the next separator  . .\n",
            "@mvrhov, @stephpy could you confirm that #4219 fix the issue ? Thanks.\n",
            "Should this string be added to the translation files ?\n",
            "@fabpot should we also rename the blocks ? thinking of possible name clash when theming from `_self` (i.e. w/ `options` or `attributes`)\n",
            "':' seems not to be allowed on win: \nhttp://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx.\nhttp://msdn.microsoft.com/en-us/library/aa368590(v=vs.85).aspx\n\nHowever it could be part of the logical name.\n",
            "Should `entityManagerName` default to null ?\nThere is a typo in the @param name.\n",
            "@schmittjoh is there an obvious way to use APC / memcache / xcache as a cache ?\n",
            "Shall those services be declared in annotations.xml then ?\n",
            " re-use the ones from the doctrine configuration.  -> doctrine does not expose such services does it ?\n\nShouldn't the extension also set a unique namespace for those drivers ?\n",
            "I was referring to a unique namespace per project has this is done in validation / doctrine (no pb with this one, just looking at the code).\n",
            "Back to my initial concern: I don't think doctrine exposes any cache services. They are built in the extension for each em.\n",
            "Reusing the doctrine service is not a good extension point:\n- this is specific to the extension code and might change,\n- this would force using the same cache (apc / xcache / memcache),\n- you would not be able to use a cache when the doctrine ORM is not use (or used but without cache - which is a bad practice)\n\nThen the right way to do would be to create your own service which is not easy !\n\nI have then modified the config to allow:\n\n``` yml\nframework:\n    annotations:\n        cache:\n            type: file  # / apc / xcache / memcache        \n            debug: true\n```\n\nI would appreciate your feedback when you have some time:\nhttps://github.com/vicb/symfony/commit/4d86980f43a0d5c20a17adc22b8708965ac2af63\n",
            "That would be great but not so easy... let's see for 2.1\n",
            "@kriswallsmith the condition is `if ((!$form->hasParent() || $form->getParent()->isRoot())` so it can be true for children - I think I have tested without these extensions and it failed but I will double check tomorrow.\n\n@henrikbjorn that is the way Form is architectured and should be used. (And the default types can be used without the csrf extension in which case the option could be misleading) \n",
            "kris, forget about the condition thing, the second part is still right...\n",
            "I start remembering now, I first dropped the `csrf_protection` (should be the config you are talking about) and:\n- The file type does not render the csrf field,\n- The choice type would interpret the csrf field as an option\n",
            "The base types do not support CSRF, CSRF is supported by loading the CSRF extension.\n\nThis means that this option has no effect if the CSRF extension is not loaded. That's why this option has been added to the type extensions provided by the CSRF extension. So that when you load the CSRF extension, you get the CSRF protection and the types get extended with the CSRF related option.\n\nIt would work by leaving the option in the base types but it is definitely not the right way - if we keep the option in the base types then may be we should also make CSRF the default and no more an extension.\n",
            "How would you disable CSRF on a form then ?\n\nThere are probably better solutions than what I have proposed, you should submit a PR when you have a working one.\n",
            "Lukas, are you looking for a [TemplateNameParser](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Templating/TemplateNameParser.php) ?\n",
            "exact, you should submit a PR.\n",
            "no, you are right, please submit a PR\n",
            "should it be `(!is_string($child) || !$child instanceof FormBuilder)` here ?\n",
            "Oops... forget about this !\n",
            "I agree there is an issue with scoped services.\nA check at compile time might not help as events can be registerd after the container has been compiled.\n\nSome background: \nThe goal of this code is to make sure that the service implements the listener method in order to avoid having to wait for the event to be actually triggered to detect the error.\nThis code is only active when debug is active.\n",
            "stof, I'll look at it later, I am working on some other things right now. Could you explicit your first sentence ? Thanks.\n",
            "@stof: \nWhat do you mean by  Lazy-loaded listeners  ?\nI only see two types of listener: object (Closures or class instances) and service (the one we are talking about).\nIs there anything preventing from calling `addListenerService` at runtime ?\n_(once again, working on smthing else, might completely out)_\n",
            "There's a [PR to revert this](https://github.com/symfony/symfony/pull/550)\n\nThis change just do not work with scoped services. \n\nBut what about any scoped service added as an event listener (without this current code) :\n1. It could cause errors if the event is triggered outside of the scope (which can be more or less random and hard to spot)\n2. What if you re-enter the request scope (without re-adding the listeners) then the former version of the scoped service might be used (as it in  cached  in `ContainerAwareEventDispatcher::dispatch`) \n",
            "@schmittjoh we can probably do some checks in the compiler pass.\n\nThe point of my last message is that adding a scoped service listener can easily result in **cross scope** calls.\n",
            "Ryan,\n\nA few things for latter:\n\nTemplate types should get enforced with [this pending commit](https://github.com/vicb/symfony/commit/3bd2135407a97d2106051bab4ab300cdf90ab961) in the [PR #497 (WIP)](https://github.com/symfony/symfony/pull/497).\n\n`$template->getLogicalName()` could also be a better option when [PR #510](https://github.com/symfony/symfony/pull/510) gets merged.\n",
            "Only Zend\\Log was used which has been changed for Monolog\n",
            "Fabien, should we also remove the PHP configuration from the WDTB ?\nThat's a lot of space used for something which does not vary from request to request and is now available in the configuration panel... and that would save me from buying a larger screen for some time.\n",
            "lenar,\nFYI this has been rejected (https://github.com/symfony/symfony/pull/305)\n",
            "Fabien, I remember having a good reason in mind when I made this change... however I can't remember what it was or figure it out now !\n\nIsn't this is typical case where we want to set the rootDir visibility as private:\n- Changing the default behavior should be done by overriding getRootDir(),\n- We don't want any derived class to modify the rootDir property,\n- Derived class would have to call getRootDir rather than use the rootDir property.\n",
            "wouldn't str_ireplace be safer ? (here & below)\n",
            "I would tend to agree (to kiss) with trompette as files and directories are mutually exclusive.\n\nHowever a Boolean might not be the best choice as there are 3 cases:\n- files & directories (you can argue that you do no need this filter in  such a case),\n- files only,\n- directories only.\n\nTrompette, you might want to submit a PR.\n",
            "Fabien,\nI am not sure to understand why all the locateResource() tests have been removed ?\n",
            "Is it really intended to be 'form' or should it be 'from' ie `{% form_theme from a:b:c %}` ?\n",
            "That's a great feature !\nThanks for the explanation kris.\n",
            "Well everything is fine _globaly_ but the commit are splitted to make it easier to understand and the split is not perfect !\n",
            "@stof how could you have missed this one, tired ? ;)\n",
            "Mergeable otherwise ?\n",
            "I mean if I use a zlib implementation which is always avaible\n",
            "Why would I re-invent things ?\n",
            "In fact my solution would not work when zlib is disabled but the fallback is easier... I'll try it\n",
            "Oops will fix, thanks !\n",
            "I would say on circular deps !\n",
            "This would probably always be detected by PHP.\n",
            "Yep, that was what I understood. Does it hurt ?\n",
            "Well I prefer to stay on the safe side, that's it. PHP can be smarter than me sometimes. But if you like, I'll remove it.\n",
            "is this BC break documented ?\n",
            "You could use a more specific component exception here\n",
            "my original PR was against master... let me see what I can do for now\n",
            "@jmikola see #3581 which was against master (it was a bit reworked for 2.0). You'd better use the former version of master until this get fixed.\n",
            "it has been fixed in 99406eb761b75c9828e61808ad0f578fb9f983cd\n",
            "@fabpot what are the min twig version req here ? [it](https://github.com/symfony/symfony/blob/master/tests/Symfony/Tests/Bridge/Twig/Node/FormThemeTest.php#L23) should have been updated at the same time.\n",
            "should be [almost never](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php#L189). I'll update this anyway\n",
            "because both are wrong:\n1 numeric index per field\n",
            "hum... still flawed with f[], f, f[], need some more work\n",
            "this currently adds overhead for every requests as the transport always gets started, fix is in swiftmailer @ https://github.com/swiftmailer/swiftmailer/pull/152\n",
            "No. Would it solve your issue ?\n",
            "@lsmith77 it is BC and could be proposed for 2.1 (there is one more commit after this one in this branch). I was expecting some feedback from @merk before submitting this as a PR (see https://github.com/FriendsOfSymfony/FOSRestBundle/issues/12).\n",
            "I got the impression that the changes didn't get tested for the the Rest Bundle use case (reading @merk message: _ I believe these changes are suitable _).\n\nI you think it is worth sending a PR now, I'll send it (based on https://github.com/vicb/symfony/commit/86f40691827e40f32517c3a909125707108e9b70).\n"
        ],
        "commits": [
            "[FrameworkBundle] Add support for the '@Bundle/Path/template.format.engine' notation",
            "[CacheWarmerAggregate] Revert to old suffixes to avoid breaking 3rdp bundles",
            "[CacheWarmerAggregate] Leverage the Filesystem fluid interface",
            "[HttpKernel] Move the warmup logic from the command to the CacheWarmerAggregate class",
            "[Finder] Add SplFileInfo::putContents()",
            "[CacheWarmerAggregate] Create a new Finder instead of reusing the former one\n\nFilters are cumulative",
            "[CacheWarmerAggregate] Fix refs to the kernel",
            "[Filesystem] Add a fluid interface",
            "[Routing] Tweak the @Route annotation loader",
            "[Routing] Tweak the annotation class",
            "[HttpKernel]  Zend Optimizer+  ->  Zend OPcache ",
            "[HttpKernel] Update the unit tests",
            "[HttpKernel] Add Zend Optimizer+ in the ConfigDataCollector",
            "[FrameworkBundle] Added missing test config file",
            "[FrameworkBundle] CSRF should be on by default",
            "[EventDispatcher] Add a unit test for PHP bug #62976",
            "[EventDispathcer] Fix removeListener",
            "fix tests",
            "[HttpFoundation] Update the changelog",
            "[HttpFoundation] Protection JSONResponse against CSRF attacks",
            "[HttpFoundation] Implement feedback",
            "[Validator] Fix a deprecated method call in the tests",
            "[Console] more tweak",
            "[Console] more tweaks",
            "[Console] Tweaks & cleanup",
            "[Console] Implement feedback",
            "dont fix me",
            "[Process] add a FIXME for Sf3",
            "[Process] Improve the usability of the PhpExecutableFinder",
            "[DIC] Move PrependExtensionInterface to the Extension namespace",
            "[Config] Fix the changelog\n\nThe features has not been released yet -> not a BC break",
            "[FrameworkBundle] Update the UTs",
            "[FrameworkBundle] Fix the DI config\n\nsee #6829",
            "[DIC] tweaks",
            "[WIP][DIC] Better handling of enableable array nodes",
            "implement feedback",
            "[FrameworkBundle] Fix the configuration info",
            "fixes",
            "tweak the enableable nodes",
            "[Config] Tweak tests",
            "[Config] Tweak the Processor",
            "[ArrayNode] Allow explicitely disabling Enableable nodes, UTs",
            "[DI] Update unit tests",
            "[DI] Improve the generated PHPDoc of the dumped PHP container\n\nBy adding  @throws InactiveScopeException  where applicable",
            "[Request] more tweaks",
            "[Request] more tweaks",
            "[HttpFoundation] tweak the Request",
            "[HttpKernel] Fix the URI signer",
            "[HttpKernel] Add UriSignerInterface and HttpContentRendererInterface",
            "[FrameworkBundle] A controller must be callable",
            "[Process] More tweaks to the Process class",
            "[Process] Cleanup",
            "[Process] Ability to prevent escaping in the ProcessBuilder\n\n'ogr2ogr' 'out' 'in' '-f GeoJSON' would not work\n'ogr2ogr' 'out' 'in' -f GeoJSON would work",
            "[Process] Tweaks",
            "[Process] Update the CHANGELOG",
            "[Process] self-stofing",
            "[Process] Use 0 to disable timeout",
            "[ProfilerFileStorage] Use PharData as unerlying storage",
            "[FileProfilerStorage] optimize file reads",
            "[HttpKernel] gzcompress profile data",
            "[Routing] fix typo",
            "implement feedback",
            "[ClassCollectionLoader] Remove CD check",
            "[ClassCollectionLoader] make faster (traits don't support if)",
            "[ClassCollectionLoader] Decrease generated cache file size\n\n20% reduction for the Sf2 class cache",
            "[ClassCollectionLoader] Implement dep resolution for traits",
            "[ClassCollectionLoader] Implement feedback",
            "[ClassCollectionLoader] CS",
            "[Finder] implement feedback",
            "[Finder] CS",
            "[Finder] cleanup",
            "[Finder] Add a isSupported() cache",
            "[Finder] cleanup, fixes",
            "[Finder] fluid, calling in() not required after append()",
            "[WebProfilerBundle]  View all  is  View last 10 ",
            "[DI] Add a base class for extension with sensible defaults",
            "[HttpFoundation] Request::getRealMethod() now returns UPPERCASE",
            "[HttpKernel] Add DI extension configs as ressources when possible",
            "[HttpFoundation] Update the changelog",
            "[IpUtils] renamed the test",
            "[HttpFoundation] Move ip check methods to a HttpUtils class for reuse",
            "[HttpUtils] stof review(tm)",
            "[IpUtils] renamed",
            "[HttpKernel] Changlog update - document a BC break",
            "[HttpFoundation] Fix the path tp stubs folder in composer.json",
            "[Stopwatch] integrate feedback",
            "[Stopwatch] Get the  real size  used & minor tweaks\n\nsee",
            "[Composer] Bumped doctrine/orm to 2.2.3",
            "[Routing] Add an interface for configuring strict_parameters",
            "[OptionsResolver] Fix Options::has() when the value is null",
            "[Form] Add theming support for collection",
            "[Session] Removes references to the deprecated 'auto_start' setting",
            "[Routing] Fix a regression introduced by #4170",
            "[HttpFoundation][Session] change possible replace() & set() for set only()",
            "[HttpFoundation][Session] Assume that memcache(d) instances are already configured",
            "[Session] Pdo Handler cleanup",
            "[Session] Fix the PDO handler for mysql concurrent write",
            "[Session] Memcache/d cleanup, test improvements",
            "[Session] cleanup of the PDO storage",
            "[WebProfilerBundle] Fix time panel for fr locale (fix #4437)",
            "[Form] Start the session to get the csrf token",
            "a few minor changes",
            "[Session] Native storage handlers should not update the global ini config",
            "[Validator] Add a base AbstractLoader",
            "[Validator] Some cleanup of the GraphWalker",
            "[Validator] Fix a bug in the ExecutionContext",
            "[Routing] Compiler: remove lazy quantifiers with no effect",
            "[Routing] Compiler: fix in the computing of the segment separators",
            "[Form] Updated the changelog in regards to the reverted changes\n\nThis reverts commit e71d1579d1c8404117c0a8b8a015b5482a6bb66b, reversing\nchanges made to 253a8ff0163a9d54cc299d93d7382de6bf5d1893.\n\nConflicts:\n\n\tsrc/Symfony/Component/Form/Form.php\n\tsrc/Symfony/Component/Form/Tests/FormFactoryTest.php\n\nConflicts:\n\n\tCHANGELOG-2.1.md",
            "[Form] Revert  merged branch stloyd/missingClientTransformer (PR #2421) \n\nThis reverts commit 7ea9c5b92adaf1224eec99259c3c8bd5f0ba73ba, reversing\nchanges made to 5803146a9e50b5f0283a7505a7e939cc2b0b4eaf.\n\nConflicts:\n\n\tsrc/Symfony/Component/Form/Tests/Extension/Core/DataTransformer/ValueToStringTransformerTest.php",
            "[Form] Revert  merged branch bschussek/issue3990 (PR #3996) \n\nThis reverts commit aebaece46063e62124e0ce585c07fd3004943c67, reversing\nchanges made to fd52f93c7e3b95423645363afcbec0e0d50e2efc.",
            "[Form] Revert  merged branch vicb/FormTypeValidatorExtension_fix (PR #3984) \n\nThis reverts commit 83a0edd24bcecf5155c71bd34aee55a0ee28c454, reversing\nchanges made to 065632b059bf99548d5d6cd284667f1da207c9f9.",
            "[Form] Revert  merged branch bschussek/issue3878 (PR #3923) \n\nThis reverts commit 85bb43935669eb1e92a5b32f5f20872f34377300, reversing\nchanges made to 962f975a6f5b0e4ed604d5b8c59d5dfca3f05e98.\n\nConflicts:\n\n\tCHANGELOG-2.1.md\n\tUPGRADE-2.1.md\n\tsrc/Symfony/Component/Form/Extension/Core/Type/FormType.php\n\tsrc/Symfony/Component/Form/Tests/FormFactoryTest.php\n\ns3923",
            "[Form] Restore missing use statements",
            "[Form] Revert  merged branch helmer/readonly_fix (PR #3258) \n\nThis reverts commit 52511770027c84a4ff38851c08c8d61f88df6db2, reversing\nchanges made to ffef177c4a6474d284f01c4336a874d8840be9c0.",
            "[Form] Revert  merged branch helmer/readonly (PR #3193) \n\nThis reverts commit e71d1579d1c8404117c0a8b8a015b5482a6bb66b, reversing\nchanges made to 253a8ff0163a9d54cc299d93d7382de6bf5d1893.\n\nConflicts:\n\n\tsrc/Symfony/Component/Form/Form.php\n\tsrc/Symfony/Component/Form/Tests/FormFactoryTest.php",
            "[FrameworkBundle] Look for translations in %kernel.root_dir%/Resources/%bundle%/translations (fix #4018)",
            "[Finder] Fixes in the iterators",
            "Fixed base URL detection when request URI contains encoded chars\n\nSigned-off-by: Victor Berchet <victor@suumit.com>",
            "[Routing] Request methods always return a raw path, fix the matcher to decode only once\n\nsq",
            "[Routing] Implement bug fixes and enhancements",
            "[Profiler] Minimize the number of Profile writes\n\nsquash\n\nsquash",
            "[Profiler] Sub requests are not Main requests",
            "[PhpUnit] Fix the path to the boostrap files in the components",
            "[Routing] Update tests according to the previous commit",
            "[Routing] Fix separators & optimize regexp",
            "[Routing] Update tests according to the previous commit",
            "[Routing] fix separators & optimize regexps",
            "[Routing] The matcher accepts a raw pathInfo",
            "return raw pathInfo",
            "[Httpdoundation] Fixed base URL detection when request URI contains encoded chars",
            "[Routing] pathinfo should already be decoded",
            "fix tests",
            " %2F  is not allowed in URL (apache)",
            "fix",
            "[Validator] Remove a race condition in the ClassMetaDataFactory (fix #3217)",
            "[SecurityBundle] Lazily load the post schema listener used to merge the ACL schema",
            "[Config] Improve PrototypedArrayNode default value management",
            "[Config] Improve error messages & extensibility",
            "[Config] Take advantage of the new PrototypedArrayNode API in the core bundles",
            "[Config] Fix nested prototyped array nodes",
            "[FrameworkBundle] Fix configuration errors",
            "[Config] Throw exceptions on invalid definition",
            "[Config] cleanup",
            "[Profiler] Fix memcache(d)",
            "[Tests] Install PHP extensions when using Travis CI",
            "[FrameworkBundle] Fix configuration errors",
            "[Config] Throw exceptions on invalid definition",
            "[Config] cleanup\n\nConflicts:\n\n\tsrc/Symfony/Component/Config/Definition/BaseNode.php\n\tsrc/Symfony/Component/Config/Definition/Builder/NodeBuilder.php\n\tsrc/Symfony/Component/Config/Definition/Builder/NodeDefinition.php",
            "[Routing] Fix a bug in the TraceableUrlMatcher",
            "[FrameworkBundle] Fix a bug in the RedirectableUrlMatcher",
            "[Routing] Remove a weird dependency",
            "[Routing] Added a missing property declaration",
            "[Routing] Small optimization in the UrlMatcher",
            "[WebProfilerBunlde] POC for routing panel",
            "[FrameworkBundle] Fix a bug in the RedirectableUrlMatcher",
            "[Routing] Remove a weird dependency\n\nUrlMatcher was depending on RedirectableUrlMatcher (a derived class)",
            "[Routing] Added a missing property declaration",
            "[Routing] Small optimization in the UrlMatcher",
            "[Routing] Refactor the matcher logging",
            "cleanup",
            "[WebProfilerBundle] Add redirection info to the router panel\n\nConflicts:\n\n\tsrc/Symfony/Bundle/FrameworkBundle/DataCollector/RouterDataCollector.php\n\tsrc/Symfony/Bundle/FrameworkBundle/Resources/config/collectors.xml\n\tsrc/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/request.html.twig",
            "[WebProfiler] Add info to the router panel",
            "[HttpFoundation] RedirectResponse: add the ability to retrieve the target URL, add unit tests",
            "[FrameworkBundle] fix phpDoc of ControllerResolver::createController()",
            "[WebProfilerBundle] Make the toolbar use the common JS",
            "[WebProfilerBundle] Adds panel pages\n\nConflicts:\n\n\tsrc/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/request.html.twig",
            "[Profiler] Buid a common infrastructure",
            "[WebProfilerBundle] Some cleanup",
            "Quick & dirty proto",
            "[CacheBundle] Move to Symfony NS",
            "[CacheBundle] Import LiipDoctrineCacheBundle",
            "[HttpKernel] Tweak the code of the ProfilerListener",
            "[HttpKernel] Cleanup of PdoProfilerStorage",
            "[Profiler] Allow profiling the terminate event",
            "[Stopwatch] rename the section event to avoid collisions",
            "[StopWatch] Provide a cleaner API",
            "[FrameworkBundle] Add a RouterDataCollector",
            "[FrameworkBundle] fix phpDoc of ControllerResolver::createController()",
            "[WebProfilerBundle] Some cleanup",
            "[Router] Remove the useless collector",
            "[WebProfilerBundle] Adds panel pages",
            "[WebProfilerBundle] Make the toolbar use the common JS",
            "[HttpFoundation] RedirectResponse: add the ability to retrieve the target URL, add unit tests",
            "[WebProfilerBundle] Improve the logger panel",
            "[Profiler] Optimize time panel IS",
            "[WebProfilerBundle] Tweak the time view",
            "[HttpKernel] Tweak the Profile class - DRY",
            "[Profiler] Tweak PHPDoc",
            "[Stopwatch] Fix some logic",
            "[TwigBridge] Improve test coverage",
            "[HttpKernel] Minor fixes in the Stopwatch",
            "Use the faster git protocol for travis",
            "Fix script output",
            "Improve vendors.php",
            "Fix regular expressions",
            "vendors.php: add support for -q option",
            "[TwigBridge] Improve test coverage",
            "Merge branch 'master' into issue-1579",
            "[DomCrawler] Fix Form CS (order methods by visibility)",
            "[DomCrawler] Test cleanup",
            "[DomCrawler] Tweak the Form class",
            "[DomCrawler] Fix the Form class",
            "[DomCrawler] fix CS for Form tests",
            "Merge branch 'master' into router/load-resources",
            "[Routing] Tweak yml and xml schemas",
            "[Routing] Add support for multiple resources when importing in loaders",
            "[Form] Rendering nested prototype templates using a prefix",
            "Revert  [Form] Render prototypes as hidden nodes. \n\nThis reverts commit 76c561159d4fd950100dd6b821547bc8c46684e1.",
            "[Form] Render prototypes as hidden nodes.",
            "[DoctrineBundle] Made the memcache instance service private",
            "Coding Standards: order methods according to their visibility",
            "[HttpFoundation] Make File extends \\SplFileInfo",
            "[HttpKernel] Fix and test previous commit",
            "[Form] Make the prototype view child of the collection view",
            "[Form] Further tweaks of the twig theme inheritance",
            "[Form] Fix twig theme inheritance",
            "[Form] Fix accessibility for file inputs",
            "[FrameworkBundle] Fix the FormHelper phpDoc",
            "[Form] Never render a view again\n\nIf some of the nested views are rendered individually they should not be rendered again when calling form_rest.\nA typical would be when some nested file views are rendered, form_rest should not render them again.\n\nIt is still possible to render a label once the widget has been rendered. This is for checkboxes and radios\nwhere the widget is typically rendered before the label.",
            "[Form] FormType labels should never have a for attribute",
            "[FrameworkBundle][Form] Fix rendering search inputs in PHP",
            "[FrameworkBundle][Form] Fix label rendering\n\nThe label should not include the view 'id' attribute as it is used by the view widget.",
            "[FrameworkBundle][Form] Add some phpDoc for the FormHelper class",
            "Merge branch 'master' into form-collection-rendering",
            "[Form] Fix collection rendering",
            "[TwigBundle][Form] Simplify templates\n\nThe Repeated and Collection types extend the Form type so there is no need to explicitely render the parent section.",
            "[Form][Twig] Reorganized the form template",
            "[Form] Added Tests",
            "[Form] Fix the FormView::isRendered() method",
            "[Form] The variable stack should not persist between section rendering (fixes #1157)",
            "[Twig][Form] Tweak form extension phpDoc and code",
            "[Form] Some tweaks",
            "[FormView] fix phpDoc",
            "[Form] Tweak phpDoc",
            "[Twig][Form] Optimize form rendering",
            "[Form] Fix for nested forms getting erroneously set as rendered",
            "[Form] Tweak the field type",
            "[Form] CSRF documentation and a few CS changes",
            "[Form] Move CSRF options from types to the CSRF extension",
            "[Form] CS related changes",
            "[Form] Implement a fluid interface FormView",
            "[Form] fix calling closures",
            "[Form] Optimization of PropertyPath",
            "[Form][Types] Coding standards, FormView fluid API",
            "[Form] Implement a fluid interface FormView",
            "[Form] Add a missing property delcaration in the ResizeFormListener",
            "[Form] Order method according to their visibility to respect the CS",
            "[Form] Add phpDoc for form builder and fix method declaration order to conform to the CS",
            "[Form] Make the PropertyPathMapper class use the UnexpectedTypeException",
            "[Form] Fix adding transformers in the FormBuilder",
            "[Form] Fix the ReversedTransform class",
            "[Form] Add argument type checking in BaseDateTimeTransformer",
            "[Form] Catch exceptions in DataTransformers",
            "[Form] Make TimezoneChoiceList implement ChoiceListInterface rather than extend ArrayChoiceList",
            "[Form] Fix the Form fluid interface",
            "[Form] Fix the fluid interface of FormBuilder",
            "[Form] Fix the fluid interface of FormBuilder",
            "[Form] Fix some phpDoc",
            "[Form] fix and add some phpDoc",
            "[Form] fix and add some phpDoc",
            "[Form] Do not set the value attribute for file inputs",
            "Merge branch 'master' into form-padded-choice-list",
            "[Form] Allow for arbitrary keys in PaddedChoiceList",
            "File & UploadedFile tweaks",
            "[Form] reverted some unrequired changes",
            "[Form] remove unused use statements",
            "[Form] tweak the Form class",
            "[Form] document the event classes",
            "[Form] make the Form API more fluid",
            "[Form] tweak the Form class",
            "[Form] tweak the choice lists",
            "[Form] tweak the DataTransformers",
            "[Form] misc tweaks",
            "[Form] tweaks in the Date & Time transformers",
            "[Form] handle \\DateTimeZone creation errors in transformers",
            "[HttpFoundation] TemporaryStorage must explicitely be flushed in order to avoid unrequired and slow IO operations",
            "Merge branch 'master' into temp-storage-9747",
            "[HttpFoundation] Add the ability to truncate a TemporaryStorage to a given size",
            "[FrameworkBundle] Add the ability to configure the temporary storage used by the form component",
            "[HttpFoundation] Call truncate() in the TemporaryStorage constructor",
            "[HttpFoundation] Add a time to live option for the TemporaryStorage",
            "[FrameworkBundle] Make the TemporaryStorage ttl configurable",
            "[HttpFoundation] 0 should be used to disable the TemporaryStorage ttl feature (for consistency with the size)",
            "[FrameworkBundle] Change the visibility of the form temporary storage to private",
            "[Httpfoundation] Make the TemporaryStorage ttl expressed in seconds",
            "Merge branch 'master' into temp-storage-rebase",
            "Document TemporaryStorage updates",
            "[FrameworkBundle] Fix merge artifacts in form.xml",
            "[HttpFoundation] Sanitize uploaded file original name",
            "[EventDispatcher] When implemented the event method should win over the magic __invoke() method",
            "tweaks",
            "tweaks",
            "[Form] tweak",
            "[HttpFoundation] Tweaks file objects",
            "Merge branch 'master' into splfileinfo",
            "[HttpFoundation] Make File extends \\SplFileInfo",
            "[HttpFoundation] Update the documentation for File extending \\SplFileInfo",
            "[HttpFoundation] Update the unit tests",
            "[HttpKernel] Update Client with the latest File class changes",
            "[HttpFoundation] Make sure uploaded files are valid before moving them",
            "[HttpFoundation] Change File::move() to create the target folder when it does not exist",
            "[HttpFoundation] Add the ability to disable security checks in UploadedFile for testing",
            "Merge branch 'master' into splfileinfo",
            "[HttpFoundation] Introduction of a PersistedFile class",
            "Merge branch 'master' into splfileinfo",
            "[Validator] Update the file validator with File changes",
            "Merge branch 'master' into splfileinfo",
            "[UploadedFile] Sanitize filename",
            "Make casting scalar to array consistent",
            "[AsseticBundle] Remove an unused property",
            "[Cache warmers] A few tweaks",
            "[FrameworkBundle] Add a unit test for the TemplateFinder class",
            "[Template cache warmers] Factorize common code",
            "[WebProfilerBundle] Remove useless use clause",
            "[WebProfilerBundle] Sort tables by key name",
            "[Cache warmers] Change the priority mechanism to a more explicit dependency resolution mechanism",
            "[FrameworkBundle] Added a test for listener services not available in the current scope",
            "[FrameworkBundle] Add unit tests for ContainerAwareEventDispatcher",
            "[FrameworkBundle] Initialize the listenerId property in the ContainerAwareEventDispatcher class",
            "[Template cache warmers] Factorize common code",
            "[WebProfilerBundle] Remove useless use clause",
            "[FrameworkBundle] The $currentPath argument is not used for locating templates",
            "[FrameworkBundle] Fix an issue when adding a scoped service as an event listener",
            "[FrameworkBundle] Enforce templates instances of TemplateReferenceInterface",
            "[FrameworkBundle] Add unit tests for the CacheTemplateLocator class",
            "[FrameworkBundle] Fix resource inheritance in the template cache warmer",
            "[TwigBundle] Tweak cache warmer configuration",
            "[TwigBundle] Fix the cache warmer",
            "[FrameworkBundle] Add unit tests for the TemplateLocator class",
            "Display template logical names in exception messages",
            "[HttpKernel] Fix the case where no resource is found",
            "[FrameworkBundle] Make some TraceableEventDispacther properties private",
            "[Event] Tweak phpDoc for consistency",
            "[FrameworkBundle] Add error detection to the TraceableEventDispatcher",
            "[Kernel] Fix bundle inheritance",
            "Resource paths should use the full bundle name (with the 'Bundle' postfix)",
            "[Kernel] Restore the tests for the locateResource method",
            "[Kernel] Update tests with shorter bundle names",
            "[Kernel] Make resources overriding consistent across bundle directories and resource directories",
            "[Kernel] Improve test semantic",
            "[Kernel] Make locateResource() throws an exception when a resource from a Bundle hides a custom resource",
            "Update for Bundle names long again (= include the 'Bundle' suffix)",
            "[FrameworkBundle] Fix the traceable event dispatcher",
            "[WebProfilerBundle] Style abbr elements",
            "[FrameworkBundle] A listener is always an object",
            "[WebProfilerBundle] Update the event panel layout",
            "[WebProfilerBundle] Tweak html markup and css",
            "[FrameworkBundle] Fix for getting the file link format fallback to XDebug configuration",
            "[FrameworkBundle] Make specifying a custom file_link_format easier",
            "[WebProfilerBundle] Event panel: details & links to the listener method when applicable",
            "[WebProfilerBundle] Tweak the wdtb css",
            "[Templating] Fix for getting the file link format from XDebug settings",
            "[FrameworkBundle] Delete .gitkeep files",
            "[FrameworkBundle] Fix the cache template loader",
            "[WebProfilerBundle] Fix the intercept_redirects option",
            "[WebProfilerBundle] Make wdtb verbosity configurable",
            "[WebProfilerBundle] Remove the format and content type from the wdtb",
            "[Config] Introduction of an ConfigurationInterface",
            "[WebProfilerBundle] Fix a few typos",
            "[Kernel] Make locateResource() throws an exception when a resource from a Bundle hides a custom resource",
            "[Kernel] locateResource should not strip the 'Resources' folder",
            "Resource paths should use the full bundle name (with the 'Bundle' postfix)",
            "[Kernel] Restore the tests for the locateResource method",
            "[Kernel] Update tests with shorter bundle names",
            "[Kernel] Make resources overriding consistent across bundle directories and resource directories",
            "[Kernel] Improve test semantic",
            "[Kernel] test fooBundle renamed to FooBundle",
            "[TwigBundle] Rename the cache warmer service",
            "[TwigBundle] Fix some typos",
            "[TwigBundle] Fix the cache warmer",
            "[Kernel] Fixed a typo",
            "[Config] Ability to add and override node types without having to subclass NodeBuilder",
            "[DoctrineBundle] Fix some typos",
            "[Config] Component refactoring\n\nThe Config component API have changed and the extension configuration files must be updated accordingly:\n\n1. Array nodes must enclosed their children definition in ->children() ... ->end() calls:\n\nBefore:\n\n    $treeBuilder->root('zend', 'array')\n        ->arrayNode('logger')\n            ->scalarNode('priority')->defaultValue('INFO')->end()\n            ->booleanNode('log_errors')->defaultFalse()->end()\n        ->end();\n\nAfter:\n\n    $treeBuilder->root('zend', 'array')\n        ->children()\n            ->arrayNode('logger')\n                ->children()\n                    ->scalarNode('priority')->defaultValue('INFO')->end()\n                    ->booleanNode('log_errors')->defaultFalse()->end()\n                ->end()\n            ->end()\n        ->end();\n\n2. The 'builder' method (in NodeBuilder) has been dropped in favor of an 'append' method (in ArrayNodeDefinition)\n\nBefore:\n\n    $treeBuilder->root('doctrine', 'array')\n        ->arrayNode('dbal')\n            ->builder($this->getDbalConnectionsNode())\n        ->end();\n\nAfter:\n\n    $treeBuilder->root('doctrine', 'array')\n        ->children()\n            ->arrayNode('dbal')\n                ->append($this->getDbalConnectionsNode())\n            ->end()\n        ->end();\n\n3. The root of a TreeBuilder is now an NodeDefinition (and most probably an ArrayNodeDefinition):\n\nBefore:\n\n    $root = $treeBuilder->root('doctrine', 'array');\n    $this->addDbalSection($root);\n\n    public function addDbalSection(NodeBuilder $node)\n    {\n        ...\n    }\n\nAfter:\n\n    $root = $treeBuilder->root('doctrine', 'array');\n    $this->addDbalSection($root);\n\n    public function addDbalSection(ArrayNodeDefinition $node)\n    {\n        ...\n    }\n\n4. The NodeBuilder API has changed (this is seldom used):\n\nBefore:\n\n    $node = new NodeBuilder('connections', 'array');\n\nAfter:\n\nThe recommended way is to use a tree builder:\n\n    $treeBuilder = new TreeBuilder();\n    $node = $treeBuilder->root('connections', 'array');\n\nAn other way would be:\n\n    $builder = new NodeBuilder();\n    $node = $builder->node('connections', 'array');\n\nSome notes:\n\n- Tree root nodes should most always be array nodes, so this as been made the default:\n\n    $treeBuilder->root('doctrine', 'array') is equivalent to $treeBuilder->root('doctrine')\n\n- There could be more than one ->children() ... ->end() sections. This could help with the readability:\n\n    $treeBuilder->root('doctrine')\n        ->children()\n            ->scalarNode('default_connection')->end()\n        ->end()\n        ->fixXmlConfig('type')\n        ->children()\n            ->arrayNode('types')\n                ....\n            ->end()\n        ->end()",
            "Tweak PHPDocs in the extension configuration files",
            "[SwiftMailerBundle] Fix a merge issue in the configuration",
            "[WebProfilerBundle] Save space by removing the PHP config from the WDTB",
            "Tweak PHPDocs in the extension configuration files",
            "[Config] Component refactoring\n\nThe Config component API have changed and the extension configuration files must be updated accordingly:\n\n1. Array nodes must enclosed their children definition in ->children() ... ->end() calls:\n\nBefore:\n\n    $treeBuilder->root('zend', 'array')\n        ->arrayNode('logger')\n            ->scalarNode('priority')->defaultValue('INFO')->end()\n            ->booleanNode('log_errors')->defaultFalse()->end()\n        ->end();\n\nAfter:\n\n    $treeBuilder->root('zend', 'array')\n        ->children()\n            ->arrayNode('logger')\n                ->children()\n                    ->scalarNode('priority')->defaultValue('INFO')->end()\n                    ->booleanNode('log_errors')->defaultFalse()->end()\n                ->end()\n            ->end()\n        ->end();\n\n2. The 'builder' method (in NodeBuilder) has been dropped in favor of an 'append' method (in ArrayNodeDefinition)\n\nBefore:\n\n    $treeBuilder->root('doctrine', 'array')\n        ->arrayNode('dbal')\n            ->builder($this->getDbalConnectionsNode())\n        ->end();\n\nAfter:\n\n    $treeBuilder->root('doctrine', 'array')\n        ->children()\n            ->arrayNode('dbal')\n                ->append($this->getDbalConnectionsNode())\n            ->end()\n        ->end();\n\n3. The root of a TreeBuilder is now an NodeDefinition (and most probably an ArrayNodeDefinition):\n\nBefore:\n\n    $root = $treeBuilder->root('doctrine', 'array');\n    $this->addDbalSection($root);\n\n    public function addDbalSection(NodeBuilder $node)\n    {\n        ...\n    }\n\nAfter:\n\n    $root = $treeBuilder->root('doctrine', 'array');\n    $this->addDbalSection($root);\n\n    public function addDbalSection(ArrayNodeDefinition $node)\n    {\n        ...\n    }\n\n4. The NodeBuilder API has changed (this is seldom used):\n\nBefore:\n\n    $node = new NodeBuilder('connections', 'array');\n\nAfter:\n\nThe recommended way is to use a tree builder:\n\n    $treeBuilder = new TreeBuilder();\n    $node = $treeBuilder->root('connections', 'array');\n\nAn other way would be:\n\n    $builder = new NodeBuilder();\n    $node = $builder->node('connections', 'array');\n\nSome notes:\n\n- Tree root nodes should most always be array nodes, so this as been made the default:\n\n    $treeBuilder->root('doctrine', 'array') is equivalent to $treeBuilder->root('doctrine')\n\n- There could be more than one ->children() ... ->end() sections. This could help with the readability:\n\n    $treeBuilder->root('doctrine')\n        ->children()\n            ->scalarNode('default_connection')->end()\n        ->end()\n        ->fixXmlConfig('type')\n        ->children()\n            ->arrayNode('types')\n                ....\n            ->end()\n        ->end()",
            "[WebProfilerBundle] Use a liquid layout rather than a fixed width layout.",
            "[FrameworkBunlde] CodeHelper tweaks",
            "[Routing] XMLFileLoader small optimization",
            "[WebProfilerBundle] Revert the support for a status in data collectors",
            "[WebProfilerBundle] Tweak styles",
            "[WebProfilerBundle] Introduce a template for toolbar items",
            "[WebProfilerBundle] Tweak styles",
            "[Profiler] Profilers now return a status which is used for visual feedback",
            "[WebProfilerBundle] Add shortcuts to the panels in the toolbar",
            "[WebProfilerBundle] Specify missing alt attributes",
            "[WebProfilerBundle] Create a configuration panel",
            "[WebProfilerBundle] DOM and CSS tweaks",
            "[WebProfilerBundle] Config panel\n\nSplit the main Key / Value table in different sections.\nAdd a list of active bundles.",
            "[DoctrineMongoDBBundle] fix the data collector design",
            "[WebProfilerBundle] Always use the default background color for counters",
            "[WebProfilerBundle] Remove dead code",
            "[WebProfilerBundle] Better handling of queries with an empty result",
            "[WebProfilerBundle] Apply missing styles",
            "[WebProfilerBundle] Always remember the query including the token",
            "[WebProfilerBundle] Improve the  token not found  page",
            "Tweak inline js",
            "[WebProfilerBundle] Tweak some css",
            "[webProfilerBundle] Update the 'token not found' page with the new design",
            "[WebProfilerBundle] Always use the default background color for counters",
            "[WebProfilerBundle] The total number of log entries is not relevant, display only the number of errors when required",
            "[WebProfilerBundle] Display the number of log entries together with the number of errors",
            "[FrameworkBundle] Simplify the over-complicated template cache warmer",
            "[Config][ArrayNode] Tweak some phpDoc",
            "[Config][ArrayNode] Tweak normalizeValue() code & phpDoc",
            "[Config] Tweak phpDoc",
            "[Config][BooleanNode] Tweak the code",
            "[Config][VariableNode] Tweak the code",
            "[Config][TreeBuilder] Tweak the code",
            "[Config] Simplify ScalarNode by inheriting from VariableNode",
            "[Kernel] Get rid of Kernel::registerRootDir()"
        ],
        "issue_comments": [
            "@ReactiveRaven As stated in the source ticket, this fix needs to be done in 2.1 only as 2.2 has been modified and do not have this issue. When you send a PR, you should then select the 2.1 as the target branch - master has been selected while you submitted this PR.\n\nThere is no way to change this afterwads, ie you should close this PR and open a new one. That's a lot to understand at first.\n\nIt could be great to add a unit test to make sure this works as expected. There are plenty of exs to use a tempate in the DI folder.\n",
            "@fabpot Should this go in 2.2 (you considered this a fix last time we talked about that). In such a case, I'll rush to finish it.\n",
            "What about a more generic prototype-option ?\n",
            "Are nesting or user defined options some uc ? (note to myself: merge)\n",
            "There's one thing that look wrong to me: the tests, but that's probably a point where @drak will never agree with me.\n\nBut please read  Don't mock third-party libraries  @ [Mock Objects](http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html)\n",
            "@fabpot If you agree with this, there are probably of couple of PRs that should also be reverted (PRs going in the exact opposite direction) /cc @drak \n",
            "@drak if your code is `store()` and you tests is `make sure store() has been called` you won't verify that it works in real life (ie you may need to call `init()` before store).\n\n> it is the established wisdom and best practice.\n\nReferences ? Look at the link I have given in my first comment.\n",
            "Actually I am -1 on merging this until a solution has been implemented for a lock for non native storages. Before it exists merging this means merging one more bug in sf (I think I created an issue some time ago, don't have the reference now)\n\nhacfi notifications@github.com wrote:\n\n> Would be great to have it in the next release!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/6452#issuecomment-14339019\n",
            "For this PR, tests need to be updated to use Couchbase and not a mock of it.\n\nBut before merging any new storage, the design flaw should be fixed, see #4976. It is not directly related to your PR but I don't really see why we would add a new implementation when the foundation is flawed.\n\nThis being said, it would be great if someone start to work on this issue, would you volunteer ?\n",
            " @alexpods could you give more background info on the benefits of this change ? To me, your change looks like the introduction of a vulnerability.\n\nI think the code was like it was because of (`getClientMimeType` phpDoc)\n\n```\n     * The client mime type is extracted from the request from which the file\n     * was uploaded, so it should not be considered as a safe value.\n     *\n     * For a trusted mime type, use getMimeType() instead (which guesses the mime\n     * type based on the file content).\n```\n",
            "@stof @fabpot @alexpods yep, seen this and updated the linked issue - still I think `guessClientExtension` is really error prone !\n",
            "Does not sound 100% right to me but I can't find anything better. May be a native speaker could help here to know if this is good or come with a better name ?\n",
            "I let you pick the best. I think there must be a verb in the name, ie `setAccessibleOnly`.\n\nI have one question that is somehow related to this PR: What happens with unreadable files ? Let's say that you are looking for a file which contains  <?php  but some of the file are not readable by the process which runs the Finder, what would happen, Would the `AccessDenied`Exception been thrown ? \n\nIf this is not the case yet, the code should be updated (both native & php drivers).\n\nThere should also be a way to ignore those exceptions, ie `->ignoreUnreadable(Finder::FILE | Finder::DIRECTORY)`\n",
            "> the PHP adapter the file is just not matched if not readable\n\nwhy ?\n\nEdit: ok, found [why](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Iterator/FilecontentFilterIterator.php#L35)\n",
            "To be really perfect, I would write\n\n`return (intval($match[2], $bases[$match[1]]) * (1 << $shifts[$match[3]]));`\n\nas\n\n`return intval($match[2], $bases[$match[1]]) << $shifts[$match[3]];`\n",
            "and btw, great you've opened a ticket on php.net.\n",
            "@lazyhammer did you get that by looking at the source code or is this documented somewhere ? - If this is not documented, it would be a great addition to http://www.php.net/docs.php\n",
            "@lazyhammer may be you can create a ticket on php.net for  (, 0) -> autodetection  to be added to the documentation (ie the main section of `intval` doc, not the comments) ?\n",
            "I think a **PHP** documentation (vs C) is needed on php.net (vs gh/Symfony). Thanks for the details anyway.\n",
            ":+1:\n",
            "@stof I can see the patch\n\nOn 03/27/2013 01:50 PM, Christophe Coevoet wrote:\n\n> @lazyhammer https://github.com/lazyhammer The link you gave is not \n> the link to the patch but the link to the page to submit a new patch\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/7489#issuecomment-15521247.\n",
            "I don't care.\n",
            "@jfsimon, may be you could submit an issue to php.net asking the creation of `int ini_get_shortand ( string $varname )` - a better name might be better.\n\nedit: `ini_translate_shortand($shortand)` might be better\n",
            "@lazyhammer I am sure that if we amend the tickets telling that it took 1 week for a smart guy to get 5 LOC right, they'll consider adding a `ini_translate_shorthand` and fixing the doc !\n",
            "Great PR, really. A shame you swapped the source and destination branches !\n",
            "@jfsimon, you probably mis-read my comment, the code needs **to be reverted.**\n",
            "- What was wrong with the previous (working) solution ?\n- The current look of your code.\n\nI don't think anybody will ever use a form to upload TB of data, but anyway  t  is not supported (I think the sames goes for  b )\n",
            "Good point. You should ask @fabpot.\n",
            "kB =1000, kiB=1024.\nImo regexps should be case insensitive and account for the  i .\nI am not in favor of the changes in this pr (the current way is also documented on php.net fwiw)\n",
            " +1k  and  1 k  are 2 examples of why this PR is wrong. It should be reverted.\n",
            "php.ini also supports:\n- decimal (the cast should happen before the `switch` as the fractional part is ignored, as in ServerParams),\n- octal,\n- hexa.\n",
            "OT, that's great to see many contributions for you @jfsimon, thanks !\n",
            "> You're talking like @vicb\n\nShould I take this as a compliment ?\n",
            "It should probably target 2.2 as this is a bug fix.\n",
            "Are `open` and `close` good names ? I would prefer `addChild` and `getParent` as there is nothing that is really opened or closed ?\n\nEdit: by looking at the code a second time, I think open & close make sense .\n",
            "@stof I like your proposal. My main concern being  leave  (former  close ), @jfsimon could you throw when a scope is used after it has been left ?\n",
            "because if you have a ref to a left scope, you can still use it which is bad\n",
            "@jfsimon Do you have a response about my comment in the original PR ? \n\nAt least we now have a BC break (ie new is no more called).\n",
            "np, do you have a reply ?\n\n_BCB = yes should trigger a note in the changelog_\n",
            "Yep\n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> @vicb a response about the `newReflectionMember` method update?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7271#issuecomment-14457748\n",
            "@jfsimon `method_exists` returns `true` when the method exists, whatever its visibility.\n\nMy question is whether it would make sense to change the signature of `newReflectionMember` to accept an objet ?\nThat would be a BC break but the implementation proposed here is also a BC break (`newReflectionMember` which was called from `getReflectionMember` is no more called with this PR - it could have been overriden by a dev)\n\nFinally `PropertyMetadata` should probably be updated in the same way.\n",
            "_and fyi you can both work on the same PR, ie @Gladhon you can send some changes (a PR) to the repo of @jfsimon_\n",
            "No need for FQCN in phpdoc.\nplease use  Boolean  rather than bool\nthanks\n",
            "could you add a unit test and use the standard PR header (symfony.com > doc > contributing). thanks.\n",
            "> a big :+1:  for this one as this will also greatly simply bounding the form from query parameters.\n\nYep but there is also a big implication on security (see what happened to Ruby / GH a few months ago)\n",
            "You are right, I was wrong.\n\nChristophe Coevoet notifications@github.com wrote:\n\n> @vicb This PR does not introduce a security issue for the extra params\n> AFAIK. These extra params won't be bound to the underlying object. They\n> will simply be ignored silently instead of marking the form as invalid.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7229#issuecomment-14301290\n",
            "When submitting a PR / issue, please:\n- follow the [guidelines](http://symfony.com/doc/current/contributing/code/patches.html),\n- reference any other relevant issue / PR (ie #7163)\n\nYour description of the  issue  looks like a  feature  to me. However if you consider this as an issue why not fixing the commands instead of updating the Kernel ?\nThe Kernel has been stable for years I don't see why we would modify this as it will probably lead to numerous breaks elsewhere.\n",
            "> I don't see how this can be a BC break\n\nDevs have been relying on the current behavior for years. Change the behavior and a **lot** of code will break ! That would be a **severe** BC break !\n\n> It's not because something has been stable for years, it can't contain bugs\n\nSee the linked issue. Not a bug, work as expected\n\n> So what do you suggest as a solution?\n\nI actually suggest no solution. As I explained in my previous comment, I see this as a feature, not a bug. Why would you extend a bundle and use the base one ? If you extend the bundle you probably want to use your extension, not the base bundle.\n",
            "touch what ? (do you have a concrete example in mind) - of course you can change the parent bundle, it works like PHP OOP if you like.\n",
            "If your car don't fly, do you bring it to the mechanics. You don't nobody expect a car to fly. Same for this code (nobody expect it would fly)\n\nI'm biased I wrote it.\n\nIn your example what exactly do you expect, what exactly do you get. It's always interesting to get a new eye. vision on the code \n\nHans Stevens notifications@github.com wrote:\n\n> I suggest to change the behavour of the getBundle function?\n> I still don't get why the getBundle function, by default, returns the\n> childBundle if you ask for the parentBundle. If you want the\n> childBundle, you ask for the childBundle no?\n> \n> As a concrete example, we have a project with a UserManagementBundle\n> (inheriting from the FOSUserBundle) and a ProjectUserBundle (inheriting\n> from the UserManagementBundle). Later on we would add this\n> UserManagementBundle to the vendors (leaning more to the\n> perfect-world-situation), but since we are still in development, it's\n> not yet the case. And imho, using the translation:update and\n> doctrine:generate:entities should still work for the\n> UserManagementBundle in this case\n> \n> Maybe the suggested solution isn't the best one. You guys know the\n> framework better than me. No doubt about that. But I don't fully agree\n> that it's a feature.\n> \n> @stof How can you do this using the symfony commands without having to\n> add an extra argument? Adding one would make it more clumsy imho.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7208#issuecomment-14230273\n",
            "@hansstevens so now please read the messages and answer the questions, it will be easier.\n\n> And imho, using the translation:update and doctrine:generate:entities should still work for the UserManagementBundle in this case\n\n**In your example what exactly do you expect, what exactly do you get**\n",
            "A bit clearer, not crystal clear.\n\nI think this is where you're wrong:\n\n> I don't care if other bundles inherit from it.\n\nWhen you extend a bundles you won't have multiple bundles but one bundle with some overrided (and added but not interesting here) functionalities.\n\nWhy ? because otherwise it would not be possible to override:\n\nIf a parent bundle reference a resource as  @parent:resource  it will actually successively look for  @grandChild:resource ,  @child:resource  and  @parent:resource . Starting by  @parent:resource  would make overriding not possible as the parent is by definition not aware of its (grand)children.\n\nPlease also note that the process is the same whether you look for  @parent:resource ,  @child:resource  or  @grandChild:resource  (ie staring to look into the GCBundle up to the PBundle). That's  @<anyBundleInHierarchy>:resource  always pointing to the resource in the most derived bundle.\n\nDoes it makes sense ? Anything you're still questioning (please be _very_ explicit, I can be dumb sometimes)\n",
            "And sorry for notifying parent, child and grandChild :)\n",
            "@hansstevens fixing the commands, as suggested in my very first comment, would be great. You can submit a PR for the translation here but the doctrine should be send to the DoctrineBundle repo.\n\nI'll have a g'nite, thanks\n",
            "@vicb never agrees :)\n\nI don't have time to check this deeply now but I would like to see a UT.\n\nCould your use case be expressed as  on nested terminate events  ? \n",
            "Jef, my remark (nested or more accurately successive terminate events) was a hint for a test & may be a better fix.\n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> @vicb If I had an idea on how to write a conclusive test for that, I\n> swear, it would be provided in this PR.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7180#issuecomment-14054224\n",
            "If you want to use appcache a ft is probably best. Otherwise you should be able to simulate a simpler tc.\n\nThe main thing to keep in mind is not the stopwatch issue specifically imo but terminate in general and the diff in behavior with a  real  reverse proxy. \n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> Ah okay Victor, I try something, tell me if it matches your idea:\n> \n>    WHEN using AppCache kernel decorator AND esi is enabled\n> ON receiving a master request (A) containing an esi tag leading to a\n> fresh cached response AND the esi request (B) leads to a stale cached\n> response\n>    THEN the stopwatch component tries to reopen a non existing section\n>    BECAUSE\n> the (A) request dont dispatch `kernel.request` and `kernel.response`\n> events\n>        AND\n>            the (A) request dispatches `kernel.terminate` event\n>            BECAUSE the (B) request was processed by the app\n> \n> This case is really specific and difficult to explain with simplicity.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7180#issuecomment-14064950\n",
            "Works as expected - see the phpdoc & existing unit tests. closing.\n",
            "Please add some unit tests for the new formats.\n",
            "The Travis failure come for a bug in PHPUnit (there is a Sf issue for that).\n\nThere is no 2.3 branch yet (devs happen in master).\n\n@fabpot will decide wether this should be considered a a fix (and merge to former releases) or an enhancement which will be merged to 2.3.\n\n_(Could you please update the PR header which still refers to strtotime, thanks)_\n",
            "@chbruyand The check you add is useless http://3v4l.org/99ngB. Closing this issue;\n",
            "Could you please setup a little testcase that triggers the issue (in a gist or a PR) ? Thanks.\n",
            "Then we should remove the header if the UA is IE < 9 only I guess.\n",
            "Yep, you need to check the Request UA header\n",
            "@fabpot could you explain me then what #7413 brought in the code ? \n\nI don't want to mention the bugs introduced by this PR but truly I would like to understand why a PR gets merged or not beside your opinion. \n\nHowever I am fine if you say that your opinion prime over anything else, I only need to understand.\n",
            "@cloppy you can add a commit with a UT, we'll review it and let you know what you should change.\n\nAny reason why you have chosen the 2.1 branch (over 2.0) ?\n",
            "... if you need to change anything\n",
            "@cloppy It should probably be applicable to 2.0 also. It would be great if you can check and send the PR to 2.0 instead if needed (you would have to close this one and open a new one). \n\nDo not hesitate to ask any questions, contributors are always welcome. And if you feel it's too complex, we can also do it for you.\n",
            "@cloppy I think you should also add a link to the issue ( http://support.microsoft.com/kb/323308) in the code comment. Thanks.\n",
            "Thanks @Seldaek !\n\nWould you mind creating an issue for the version check so that it doesn't get lost ?\n",
            "thanks !\n",
            "I still have to update the tests\n",
            "I am supposed to add tests with a PR. This time I have removed some of them which are useless IMO, what do you think ?\n",
            "Because they are useless\n\n``` php\n<?php\n     /**    \n     * Gets the token.  \n     *\n     * @return string The token\n     */\n     public function getToken()\n```\n\nThe same info is repeated 3 times while I can uderstand that line 2 and 3 are usefull / mandatory, the first line doesn't bring any added value. So please focus on **DRY**.\n\nThe only thing that might happen with such phpDoc is getting out of sync with the code, `Constructor` on `setKernel` is a good example of that.\n\nIf this is mandadted by our CS or doc tool, then they are stupid and should be fixed. \n",
            "If you wish I'll execute. However I think we have more important things to fix than discussing common sense in a new issue.  \n",
            "ZO+ renamed to OPcache.\n",
            "@dlsniper I don't have time to lok at the details but the profiler is meant to be activable in prod (you can enable the profiler on a specific URL / IP in such a case) to debug an issue that would occur in prod only.\n",
            "@stof I understand, it was just a **kind** warning\n\n@dlsniper \n\n> I know but in this case I don't think anyone should panic in the other ticket about adding 'debug' classes to the compiled class file as they are loaded anyway, right?\n\nSo let's add all the  classes from Symfony, any of them might be use from time to times ! The goal of the cache aggregation is to aggregate the most comonly used classes - really no reason to be offensive here.\n",
            "@stof yes @stof, I understand perfectly. The goal of my message was only to tell that the profiler must not **always** be disabled in prod as it the case with this PR.\n",
            "@dlsniper no problem. I don't have time to help more these days. both Your pr address true issues but I think the solutions are not the good ones, hence my comments.\n",
            "What bug does this fix ? I don't get the difference with the current code.\n",
            "Thanks for clarification @stof.\n\nIs the fix appropriate or should newReflectionMember be changed instead ?\n\nChristophe Coevoet notifications@github.com wrote:\n\n> @vicb If you overwrite the method in the child class and have the\n> validation mapping defined on the method of the parent class, the\n> current code calls the parent method, not the method of your object\n> \n> Btw, there is already a ticket reporting the issue a long time ago:\n> #2841\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7069#issuecomment-13678981\n",
            "see #7271\n",
            "@fabpot comments are stripped now I think.\n\nSome other remarks: we should not add debug classes, the added class hierarchy & interfaces are automatically added so there might be some extra things added here.\n",
            "@dlsniper sorry if I can't help right now but as you should know we have other horses to fight here in france atm.\n",
            "Oops seems like a file is missing... will update\n",
            "@fabpot the fix is fixed, ready to be merged !\n",
            "don't fix so, this is something I did break a few weeks ago, just reverting to how it is supposed to work.\n",
            "Hey @fabpot I am not that BAD :)\n\n form, ESI, framgents, translator, validator, and profiler  are off by default. Only CSRF should be on by default.\n",
            "I don't think the assertion would fail with the former code, would it ?\n",
            "I mean an error would be generated even before the assertion.\n",
            "I don't really understand your point and think it is a bit useless here but I am not against your change - I don't argue that test is doc though.\n",
            "What I mean is that you are unit testing php and it is not a job for sf. So it is not strictly required but as it doesn't hurt, let's merge your change.\n\nJakub Zalas notifications@github.com wrote:\n\n> Assertion is indeed useless for the bug you discovered and fixed. I\n> think it's still worth to have it there for  other reason:\n> - test readability and completeness - with an assertion it's more clear\n>   that we don't expect the listener to be removed with the\n>   `removeListener()` call if passed argument doesn't match the one added\n>   before\n> \n> If you still don't see my point just close this PR :)\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7038#issuecomment-13351469\n",
            "Would the right way to fix this issue be semantic versioning ?\n",
            "Probably related to https://bugs.php.net/bug.php?id=62976, I need to do some more investigation - I use 546. anyway the fix is valid for whatever php version.\n",
            "This **is** related to the PHP bug mentioned above, see http://3v4l.org/Q6WKj:\n\n```\nOutput for 5.3.18 - 5.3.21, 5.4.8 - 5.5.0alpha4\nbool(false)\n\nOutput for 5.3.0 - 5.3.17, 5.4.0 - 5.4.7\nNotice: Object of class Klass could not be converted to int in /in/Q6WKj on line 9\nNotice: Object of class Closure could not be converted to int in /in/Q6WKj on line 9\nint(0)\n```\n\n@fabpot anything more needed to merge this ?\n",
            "It is, for php versions < fixed version, I'll do that\n",
            "@fabpot ready Sir !\n",
            "well I can probably add an assert, please wait !\n",
            "yep nothing really to assert anyway, np.\n",
            "@fabpot seems like you script isn't closing PR any more ?\n",
            "@jakzal what would you assert ?\n",
            "Ah right, seen this on their blog.\n\nFabien Potencier notifications@github.com wrote:\n\n> @vicb: my script never closes tickets, Github does. But, recently,\n> Github changes the way it closes PRs.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7023#issuecomment-13351688\n",
            "closing as it has been merged\n",
            "@fabpot Is it you who said  nothing else than fixes in 2.2 starting from now  a few days ago ?\n\nThere are probably more interesting changes in some of the pending PR than this one.\n",
            "You should add a note in the changelog\n",
            "@sstok, the best would be to submit a  small  PR that reproduces the problem (ie a failing unit test that could be later integrated in Sf together with the fix)\n",
            "@77web you probably could merge the the setup into the test method.\n",
            "One last thing: a note in the changelog ?\n",
            "As you send it to master, you should create a 2.3.0 (2.1 & 2.2 have their own branches)\n",
            "and should write your comment as  fixed xyz to abc . Thanks.\n",
            "Would this be a common enough use case to be pushed to the translator ?\n",
            "Strictly speaking this is a BC break (you are adding a public method). But I guess we should better defined what should be describe as BC break - I have asked myself the same question more than one time /cc @fabpot \n\nPlease also add a UT and a note in the changelog.\n",
            "Well no really a BC break because prefix is empty by default but not a bug fix either, so master is THE place :)\n",
            "@stof, you are right\n\n@fabpot I don't get you, should it be renamed ?\n",
            "@igorw, we are talking about jsonp, should be js type.\n",
            "@igorw but it is already the case I think, no change required !\n",
            "I guess the only question left then is setPrefix / prefixJson / prefixJsonp\n",
            "Forget what I have said, in a rush today. I'll update at the end of the week.\n",
            "I tend to agree with @stof but  when on web, do like Google do , what type do they use ?\n\nChristophe Coevoet notifications@github.com wrote:\n\n> @igorw but the returned content is **not** JSON anymore. You have to\n> strip the prefix first, and to interpret the JSON only after that. So\n> serving it as JSON content type is wrong. The response contains some\n> JS, not some JSON when you prefix it.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/6970#issuecomment-13390840\n",
            "Google uses `content-type:application/x-javascript; charset=utf-8`\n\nSo if everybody agrees, I'll implement:\n- The name stays `prefixJson()` as it makes more sense when no arg is given - or `addJsonCsrfPrefix` as @igorw suggested and which I like probably even more than my initial proposal,\n- JSON with prefix (as well as JSONP) should be served with a JavaScript mime type _(I think we have anyway all agreed above)_\n\n@fabpot @stof @igorw ?\n",
            "@igorw what would be your preference here ? I will also try to see what google do with that before updating the PR.\n",
            "yep, it add a prefix to what already exists (the JSON).\n",
            "I have implemented the feedback in this PR.\n\nI have finally chosen `setPrefix` as it could be used for something else than CSRF attacks mitigation.\n",
            "@arnaud-lb Thanks for your valuable comment, returning an object is safer but is not enforced by Sf.\n\nAny idea why both FB and Google do return prefixed JSON ? Are there bugs in some browser that would allow retrieving the source of a loaded script ;\n",
            "Well there has been no official announcement for the 2.2 branch I think ?\nI hope that some PR pending for master will go into 2.2 anyway ?\n\n/cc @fabpot\n",
            "C'mon Travis, aren't you allowed to fail for 5.5 ?\n",
            "@fabpot by modification, I guess you mean features (as opposed to bug fixes) - could you consider #6258. It contains a fix for traits - I don't wan't to have to split the PR.\n",
            "@stof fixed, thanks !\n",
            "it fixes consistency and semantic:\n\nBefore:\n- isValueRequired, isValueOptional, is**Array** ???\n- REQUIRED, OPTIONAL, **IS_**ARRAY ???\n\nTo me array is an implementation detail that has no reason to be exposed to the API client - it has been replaced by multiple.\n\nIf you are not convinced that consistency and semantic are important, consider how it has been hurting PHP for years.\n",
            "Nobody has ever complained about an issue before it was created, let's close them all :)\n",
            "I wish somebody would have complained about the haystack/needle pb before it was to late to change the PHP API.\n",
            "@TravisCarden Almsot right ! You should not send a PR from your master branch: the PR would get updated when your master branch is updated - this is true for any branch.\n\nI think creating a feature branch is described in the contributor guide. If you need more help, ping me. You will have to close this PR and reopen a new one.\n\nI think some code review bots can automatically check the x bit but they are not enabled on this repo.\n",
            "@mweimerskirch you should add a unit test, and conform to http://symfony.com/doc/current/contributing/code/patches.html - it might also be good to check when this bug first appear and fix it there (ie 2.0 or 2.1). Thanks.\n",
            "Thanks jf.\n",
            "I agree with @stof comments.\n\nOne more thing: the `Constraints` ns is an anomaly in Sf2 where ns almost never end with a  s . Are you going the wrong way here ?\n",
            "Hi Hugo,\n\nIt might also be interesting to get @fabpot and @bschussek opinions about dropping the  s  - it should not happen before 3.0 I think (if it should at all).\n",
            ":+1:\n",
            "`esi` under `sub_request` does not seem right to me.\n\n:+1: for  inline \n",
            "esi requests are master requests\n",
            "Hinc are also master. We should come with something better than subrequest imo.\n",
            "I think per strategy config is covered by an issue from Fabien with a broader scope\n",
            "> those ESI and hinclude requests should be handled as sub-requests\n\nHow ? IMO this is not possible by design !\n",
            "> We should come with something better than subrequest imo.\n\nHere I mean the name of the key, ie `sub_request`\n",
            "but why ? that would a sub-request w/o master and the code would break in some places I think.\n",
            "But Kris it's the browser or the rp that makes an other master request (on misses) it not a sub request.\n",
            "To me a master request  is  an HTTP request while a sub-request is something internal to Sf (which implies the same process). I admit I fail to see what a sub-request as an HTTP request would be and why it would be useful ? Is it only because esi requests are sub-requests when HttpCache is used ? (which is not exactly what you said in the previous comment)\n",
            ":-1: this is not the job for a generic loader\n",
            "@stof good catch thanks, I'll update tomorrow.\n",
            "@stof @lsmith77 @fabpot what about having `PrependExtensionInterface` extends `ExtensionInterface` to avoid having to `implements ExtensionInterface, PrependExtensionInterface` ?\n",
            "you are right\n",
            "@lsmith77 @fabpot @stof One more question: does prepend really solve anything ? What if multiple bundles prepend ? A solution could be to have some kind of priorities, what do you think ?\n\n@schmittjoh sometimes you have `MyExt extends Extension implements PrependExtensionInterface` having `PrependExtensionInterface` extends `ExtensionInterface` would look messy.\n",
            "_I also find the name unfortunate as we do not prepend an extension but some settings_\n",
            "@stof thanks for reporting the broken links, they are fixed /cc @schmittjoh \n",
            "@Tobion please submit a PR to my repo, I don't have much time to work on this. Thanks !\n",
            "@fabpot @schmittjoh I'd like your feedback on the latest commit, rationale is in the method phpDoc. It better matches what we do now and seem the most sensible thing to do.\n\nedit: with this you can no more disable the node explicitly, I have to find a better solution\n",
            "@fabpot I know I keep insisting on this one and I am sorry for that but I think this should be considered as a bug fix (see the PR header for details) and should be merged in 2.2. I think the Symfony core should be exemplary as it is used by many developers as a template when creating their own bundle. _This PR is no more a WIP and can be merged right now_.\n\nIn addition to fixing the enableable nodes, this PR contain new UTs and some fixes to the code / tests.\n",
            "I am going to change it right now !\n",
            "(and thanks for having checked this)\n",
            "@fabpot I have updated the changelog and the PR header.\n\nI am not sure if the commits should be squashed or not. On one side the multiple commits can help understand the changes but on the other side that's a lot of small commits which could pollute history. I let you choose what to do.\n",
            "@Tobion Do you mean I should close this PR ?\n",
            "If you plan to submit the PR soon, feel free to close this one (and make sure the tweaks are covered by your PR).\n",
            "@fabpot, worth rebasing on master ?\n",
            "Does `getTargetFile` exist in 2.0 ?\n",
            "You're right, my bad ! I'd better go on week-end right now I think !\n",
            "You are right, UTs are often helpful ! I'll add one for the check.\n",
            "Well in fact I don't know how/if I can test this !\n",
            "SymfonyRequirements is already updated with this\n",
            "What about using `0`instead of `null` to disable the timeout, it would be more consistent with other things (ie cache).\nWe could support BC with `(integer) $timeout`.\n",
            "@fabpot could this be in 2.2 ?\n",
            "pong @fabpot, it would really help one of my projects !\n",
            "@romainneutron you are absolutely right, thanks.\n",
            "What about a UT ?\n",
            "and the syntax is wrong also !\n",
            "> It would remove the dependency\n\nPaul leaves this body :)\n",
            "@stof `$controller = str_replace('/', '\\\\', $controller);`\n",
            "I am :+1: with the change but I would list it as bug fix + BC break (ie same input, different output) and send it to the 2.0 branch.\n\nEdit: There is a BC break but it could only improve the security and users won't get affected.\n",
            "#6258 probably is a superset of this change (which should probably not be described as a  bug fix )\n",
            "New features (as opposed to bug fixes) should not target 2.0.\n\nYosmany Garcia notifications@github.com wrote:\n\n> @vicb this patch is just to make the cache file a little more readable,\n> not to optimize it.\n> \n> Of course, if @fabpot decides to merge your optimizations this patch\n> doesn't make sense.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/6753#issuecomment-12292459\n",
            ":+1:, could you please update the changelog with the BC break ?\n",
            "IMO there is no such things as  tiny BC  but BCs are yes/no.\n",
            "thanks :+1: \n",
            "@igorw using the CSS `display` property - instead of `visibility` - would allow removing this ugly margin . It has been done in https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/logger.html.twig#L97\n",
            "I'm not sure to get what you mean ?\n",
            "We can not talk of a backport as it is not fixed in master (the link above is not related to the same file). But it should be changed in master only (not a bug fix), if needed.\n",
            "Thanks, should I create an issue to make sure it doesn't get lost ?\n",
            "> Backwards compatibility break: no\n\nReally ?\n",
            "Adding a public method is a BC break.\n",
            "my bad.\n",
            "I think this PR should be split in 2:\n- The first PR would contain the second commit only (ie bug fix)\n- The second PR would contain the first commit (option name change)\n\nWhat about considering `$builder->include()` as described in #5899 - this would be part of the second PR.\n",
            "I see `include()` as an helper around `add()` that would also set the `virtual/inherit_data` option to `true`. So flexibility would be the same, usability better.\n\nBreaking BC ??? Which do you expect to be more frequent, extending the `FormBuilder` or using the `virtual` option ? \n",
            "> So I think passing inherit_data as option to add() is really an edge case that does not justify a dedicated helper. We don't have any other form option that features a dedicated helper in the interfaces.\n\nWhat I expect from a builder is to ease the construction of an object and I think `include()` is much more meaningful and intuitive than a `virtual` or `inherit_data` option and it would also allow auto-completion - but of course this is a personal opinion.\n",
            " @asm89 looks like a good concept. You should improve you PR comment and code.\n\nWhat about HInclude, it seems the code has been removed ? (I think I understand but the reason why butit should be mentionned in your post)\n\n> Furthermore, if you do not use ESI, _internal uris will never be generated!\n\nWrong, HInclude. And we don't really care if they are generated or not. The important thing is whether they are routed or not.\n\n> Finally there are also other ways to make sure that _internal urls are only requested by your reverse proxy (e.g. Varnish) and are not accessible for the outside world.\n\nNot everybody use a RP & HInclude must be accessible to the outside world.\n\nAnd one last but important q, why would using a controller be better than using a path ?\n",
            "@lsmith77 I don't really get your point here. @asm89 asks for feedback and I give some.\nease of use ? Using a named route should be as easy as using a controller name.\n",
            "Ok, thanks for clarification. In fact I'd like to know if asm89 as any other reason  in mind (ie something we would have missed)\n",
            "@asm89 thanks for adding details I think were missing from your original PR.\n\nI wish the severity of the original issue would have been understood sooner & faster by the core team (I include myself here) so that we might have found a better solution.\n",
            " reverted  is probably not a word I would use here.\n\n2.2 is supposed to be feature complete sometime next week & entering a 2 month  stabilization  phase. Strictly speaking the modification you request is beyond the scope of the stabilization phase... So I think only @fabpot could answer your question.\n",
            "@asm89 I have been thinking a little more about this PR.\n\nI think that having 2 different paths (secure vs HSI) is a must have.\n\nHowever I am not really comfortable with URL signing. Your app will still be exposed to brute force attacks. There could be an other simple solution that was exposed to @fabpot and @schmittjoh in my initial threat report. Hopefuly I can get feedback soon. The final solution might be a conjuction of both signing & this - I am sorry to be vague here but I think not giving too many details is preferable.\n",
            "@asm89 the difference being that `remember_me` is optional and you would probably not enable the default implementation if you need a strong security.\n",
            "@asm89 and brute-forcing an URL is much more powerull for an hacker: you can get access to the DB, file system, ...\n",
            "@fabpot I'd like to get your (quick) feedback on the last commit, do you think it's worth it.\n\nMark the PR as WIP as purge does not work yet & I'd like to investigate using metadata rather CSV for the index.\n",
            "\\PharData or even compression ?\n",
            "@fabpot IMO you should cherry pick the 2nd commit\n",
            "@fabpot One can argue that the fix could not be reached if the method was private.\n",
            "@stloyd @fabpot thanks for the useful reviews, everything should be fixed now.\n",
            "Should be ready.\n",
            "@fabpot I initially marked this PR for 2.3 but it contains a fix for traits, should you merge it ?\n",
            "@fabpot could this be in 2.2 ?\n",
            "@fabpot fixed\n",
            "thanks !\n",
            "should be ready now\n",
            "@lsmith77 your header should look like:\n\n```\nBug fix: no\nBug mask: yes\n```\n\nJoke: i wonder if openSection() shouldnt rather return a boolean if it was successful or not rather than throw an exception. but i guess its not worth it doing a BC break for this.\n\nIf you can send me a failing tc (ie a patch) I'll fix it.\n",
            "> the patch fixes things\n\nI doesn't fix anything, just hide a bug. The bug is probably related to a nested terminate event.\n",
            "I don't have much time either. If someone can come with a failing ex, I'll work on a fix (hint: I think it is related to how AppCache can generate nested requests).\n",
            "No pb, I can remove it, should I remove the `ContainerBuilder` altogether ?\n",
            "But this change is **great** if you need the DI without the full stack.\n\nWhat about my other comment ?\n",
            ">  should I remove the ContainerBuilder altogether? \n\nI mean that the **widely used** (ie loaders) `ContainerBuilder` also depends on Config - that was kind of a joke !\n\nI was refering to my first comment here\n\n> should we change addClassesToCompile & the likes (thinking of traits).\n\nOverkill I don't know but useless for sure: the `ExtensionInterface` depends on `ContainerBuilder` which depends on `Config`.\n",
            "@fabpot sorry to ask again but should we change the naming irt traits ?\n",
            "@Tobion great changes ! Could you please try to follow `[Form] [Validator] [FrameworkBundle] added something` for commit messages to make the history easier to search.\n",
            "@Tobion is it now possible to set a default value to `<?php null ?>` using XML ? If not any idea on how to implement ? - sorry not related to this PR but it rings a bell...\n",
            "Thanks @Tobion, I agree that consistency across  loaders should be our first priority. We should also document when not possible, ie  apache/null \n",
            "btw @fabpot what about having a base class for `Extension` in the DI ? Would make it easier to re-use it when using standalone components, Di and (the suggested) Config as the greatest part of the class is not HttpKernel specific.\n",
            "The goal of this PR is to avoid having to sfcc when you modify a DI extension configuration. I think @rdohms got trapped.\n",
            "see https://twitter.com/rdohms/status/274059267428978688\n",
            "I had replaced `current()` with `reset()` and added a test before I change the code w/o testing again... #6003 should be fine.\n",
            "Yes it is covered, check Travis reports (symfony/symfony).\n",
            "There is a test in the original PR, no need for 6004.\n",
            "Which is why is was failing btw\n",
            "Merge. Go go go :)\n\n----- Reply message -----\nDe :  Fabien Potencier  notifications@github.com\nPour\u00a0:  symfony/symfony  symfony@noreply.github.com\nCc :  Victor Berchet  victor@suumit.com\nObjet : [symfony] [HttpFoundation] fix #6002 (#6003)\nDate : mer., nov. 14, 2012 13:47\n@Tobion @vicb What do we do? Just revert #6002 or merge this PR?\n\n&mdash;\n\nReply to this email directly or view it on GitHub.\n",
            "@Tobion php.net states: The `current()` function simply returns the value of the array element that's currently being pointed to by the internal pointer and `reset()` returns the value of the first array element.\n\nI have no clue what the  element that's currently being pointed to by the internal pointer  in this method so `reset()` is probably what you want.\n\nValidated ?\n",
            "As explained in #6004, there is already a test from my first PR that made Travis go red.\n",
            "oops last minute changes are bad... will fix\n",
            "@fabpot could this be merged into 2.1 & 2.2 ?\n",
            "Thanks\n",
            "now, https://travis-ci.org/symfony/symfony/jobs/3159326\n",
            "Your delete handler is executed before the form is validated (in the `onBind` event with a priority of 50). It should then be possible to remove entities even with an invalid form (bad csrf token for exemple).\n",
            "@drak what about a cookbook entry detailing the setup to use in order to use the settings from php.ini ?\n",
            "similar PR: #5076\n",
            "@stof you're right that would be much better. What about keeping this fix for 2.0 and use your suggestion for 2.1 (as the public `log` method prototype would change (to take the context as argument) ?\n",
            "I think this should be merged in 2.0 and then 2.1 should be updated with the suggestion from @stof\n",
            "The security does not depend on `doctrine/orm`\n",
            "> Currently, RedirectResponse gets a Url set only when it's created, in the constructor. There is no way to change it later. That's a problem, because then you cannot change that Url from, say, a Kernel.response event listener.\n\nYou can not change the target URL, but you can create a new `RedirectResponse` to override the original one (by calling `$event->setResponse()` in the listener). \n",
            "This change has been rejected before (see #1748).\n\n@schmittjoh may be you could explain what vulnerability it would introduce and add a comment in the file ?\n",
            "closing this PR as a duplicate of #5193 (the latter is sent against 2.0 which is the branch to target for bugfix).\n",
            "hum... this would not work for nested collections, need some more work\n",
            "> I don't think the FormType should be cluttered with logic to theme collections.\n\nKind of agree but changing `$view->types` is not ideal either.\n\nWith this PR you can (or you will be able to) theme any form under the collection: `_collection_children_car_color_label`.\n\nIt needs some more work so let's keep on discussing this tomorrow.\n",
            "I have push a [new implementation](https://github.com/vicb/symfony/compare/collection/theme) in some other branch.\n\nIn works in the same way as the current theming works:\n- you have to create a block named after the id of the element you want to theme,\n- replace any collection indexes by `_children` (ie `_form_products_children_categories_children_label`).\n\nIt also works with nested collections and prototypes.\n\nInternals:\n- a `theme_id` variable has been added to all the view - its is basically the same as the `id` except that all numeric keys have been replaced by 'children`,\n- collection views have an added variable `is_collection` which is used to append `children` to the `theme_id` of their children,\n- I think the `theme_id` must be built at the same time as the views are created in order to be able to support nested collections.\n\nIf we can agree on this, I'll finish the PR based on this code.\n",
            "@stof the current code does not but this is a topic I would like to discuss before finalizing the code - implementing it would be very easy the question is to know if this is useful, only the extension (/helper) code would need to be modified.\n\nIf you ask the question, you should have a use case, right ?\n",
            "@jmikola the code that was throwing the exception is no more called when no events have been recorded - the view code is enclosed in `{% if collector.events|length %} ... {% endif %}`.\n\nI believe your code would have thrown an exception if the wdt is displayed and the profiles are recorded without the kernel in debug mode (in prod or in dev while inspecting prod profiles).\n\nThe current PR allows collectiong datas in non-debug mode and will only indicate that the debug was turned off in the profiler time panel.\n\nMakes sense ?\n",
            "@avorobiev could you please take care of the 2 small updates and it will be mergeable. thanks.\n",
            "Thanks. Just FYI you don't have to create a new PR each time, you can force push to the same branch in order to update the PR.\n",
            "If you want to test it you can squash your 2 commits (in 4708) and force push (to have only a single commit)\n",
            "@avorobiev Could you just make `unescapeValue` public and call it from the Container Builder ? (ie without adding a new method).\n\nPlease also add a note in the component [changelog](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DependencyInjection/CHANGELOG.md). Thanks.\n",
            "You also need to support xml in the configuration and update the xsd file.\n\nedit: adding some DI unit tests is probably a good idea.\n",
            "`UploadedFile` extends [`\\SplFileInfo`](http://fr2.php.net/manual/en/class.splfileinfo.php) which has methods to get info on the file.\n",
            "I don't have much spare time to work on Sf2 this month. Some quick remarks however:\n- New features would probably be integrated in 2.2 only as we now concentrate on fixing current features of 2.1,\n- Why do we need a non-native driver as the Redis extension support native storage ?\n\nThe best way would be to configure the native session handler in [your php.ini file](https://github.com/nicolasff/phpredis/#session-handler-new)\n",
            "@drak has the FrameworkBundle config been updated to support php.ini config ?\n",
            "but 5.3.2 is not available on travis, @Maks3w right ?\n",
            "why not keep 5.3.3 for 2.0 also (closer to 5.3.2 than just 5.3 which is 5.3.13 - best we can do).\n",
            "could you update the branch 2.0 instead (it will be merged to master aftewards)\n",
            "nope !\n",
            "thanks a bunch @travisbot !\n",
            "If this should be merged the PHP templates should also be updated (and the table layout form both twig & php)\n",
            "have you used inheritdoc (over inheritDoc) on purpose ? (I must admin I haven't followed the CS discussion very closely)\n",
            "also check #3602\n",
            "Could this be fixed by changing [PrototypedArrayNode](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Config/Definition/PrototypedArrayNode.php#L255)\n`$k = $v[$this->keyAttribute];` -> `$k = (string) $v[$this->keyAttribute];`\n",
            "Could you update the unit tests as well ?\n",
            "it would be great if you could add a test that would fail with the previous version of the code and passes after the PR. (Then you should squash the commits).\n",
            "> To use Symfony2 sessions, we require to start the session ourselves, so if the directive is set to 1 we cannot use the session.\n\nWhy ? What would prevent us from using the Session ? (Not speaking about the current code but technically ?)\n",
            "@drak (I am vic**b**) And ? Are you saying that the config should be moved to php.ini ? (related to #4208).\n",
            "@drak I think it is related - if the handler configuration is done in php.ini (rather than in the native handlers) then the Session component could use the PHP session no matter if it has already been (session.auto_)started.\n\n_(PHP_INI_ALL implies PHP_INI_USER which allows updates from PHP code (`ini_set()`) and windows registry. There seems to be no way in PHP to allow updates from windows registry but not from code)_ \n",
            "> You cannot configure custom session handlers from php.ini\n\nWe agree here, the linked PR is about **native** handlers which is why it is **related**\n\n> `session.auto_start` has nothing to do with configuring the sessions\n\nWhen speaking about configuration, I mean the settings mentioned in the related PR (and not `session.auto_start`)\n\nComing back to my initial question: Is there anything that technically prevent supporting Sf sessions when auto_start is on ? (This PR proposes not to support this case).\n",
            "@drak what do you mean by  read not possible  when PHP sessions are auto-started ?\n",
            "**What we do today (when using a native handler)**\n1. When the  session  service is accessed:\n   - configuration (`ini_set()`)\n   - start the session (`session_start()`)\n   - use the session\n\n**What should work (related to 4208)**\n1. Configure the session (php.ini)\n2. When the  session  service is accessed:\n   - start the session (`session_start()`)\n   - use the session\n\n**Then why the following can't work:**\n1. Configure the session (php.ini)\n2. Auto start a session on incoming request (`auto_start = 1`)\n3. When the  session  service is accessed:\n   - start the Sf2 session\n   - use the session\n",
            "@drak I should have been more explicit to make it clear: I was speaking using auto_start with **native** handlers (which is what the related PR is about). It is of course not possible to use a **custom** handler as they are configured by code (`session_set_save_handler()`) and it is not possible to execute code before the session is started when auto_start is enabled.\n\nHowever if a native handler is configured in the ini file (as in the related PR) there should be nothing preventing to the use of auto_start = 1.\n\n_Changing `PHP_INI_ALL` will prevent windows users to update the settings in the registry - still it is a good change not to be allowed to change it from a `ini_set()`_\n",
            "> Yes indeed, but anything that starts the session except $session->start() may not necessarily work as intended (although I've handles as many edge cases as possible).\n\nCould you detail what may not work as intended ?\n\n**If** supporting autostart is only a matter of wrapping `session_start()` in and `if{}`, I see not reason why we could not do that. \n_(1) This would make sense only if 4208 gets merged. (2) We should also raise an exception in the fmkBundle config if autostart is on and a custom handler is configured. (3) I wouldn't use autostart = 1 but if there is no reason why we could not support it, let's support it_  \n",
            "@kertz @lsmith77 I'd like to hear your feedback although  the PR has been merged. Thanks.\n",
            "@drak thanks for your feeback.\n\nAbout the prefix: it might be necessary to avoid collisions when you re-use the same instance of `memcache/d`. This is why the prefix is handled internally and not by `memcached` (it would be global and not serve the purpose then).\n\nAbout the ttl: \n- `memcache/d` can not handle ttl > 30 days (they would consider the time as an absolute timestamp then) and this is why the PR always convert the ttl to an absolute ts (`time() + $ttl`)\n- Moreover I think that the ttl should be initialized by the `Session`: there is no reason why the ttl should be different from the `gc_maxlifetime`. I think this is out of the scope of this PR.\n\nAbout sharing `memcache/d` instances: it will be possible but it does not mean that you have to, you still can use different instances if this suit your needs.\n\nThe tests have been improved.\n\nIf you are ok with the latest changes, this PR should be ready to be merged\n",
            "> The fix here just removes a useless limitation\n\nIt does more than only removing a limitation: it introduces a new bug and make the `if` / `then` parts inconsistent ;)\n",
            "Could you squash you commits ?\n\nThere is also an issue when `ignoreDotFiles(false)` is called twice, could you add a failing TC and fix the code ?\n`$this->ignore = $this->ignore ^ static::IGNORE_DOT_FILES;` should be `$this->ignore = $this->ignore & ~static::IGNORE_DOT_FILES;`\n",
            "You need to:\n- tackle the related issue I have mentioned,\n- squash the commit,\n- rebase,\n- force push to your branch.\n\nhttp://symfony.com/doc/current/contributing/code/patches.html has some more info.\n\nAs a fix, did you consider sending it to the 2.0 branch - your mention it as a BC in the commit comment but it really is a bug fix.\n",
            "yep, good catch !\n",
            "@drak thank you very much for your extensive feedback, below are some comments _(I don't expect your reply on those, they are here for clarification - I know will we not agree)_\n\n### background\n\n> The method of configuring this save handler is via `ini_set('memcache.*')`\n\nYou probably mean  The method of configuring this save handler is via **ini settings**. \n\n> In reality, to use native save handlers, you don't actually need to even use Native*Handler classes at all. `ini_set('session.save_handler', 'memcache/sqlite/memcached/redis')` will do the same thing.\n\nI think this is a bit out of scope of this PR but it is worth discussing a little. What will happen in case you have `session.auto_start` set to 1 ? I think a session will be started even before you get a chance to configure anything. That is the session is started using the **php.ini** values (what will happen if they are wrong, ie you try to access a memcache server at a wrong IP ?) and those settings are modified afterward - we still have an open discussion on this topic.\n\n### overview\n\nWhat I meant is that some settings (eg `memcached.sess_locking`, `memcached.sess_lock_wait`) are session specific. While some other (`memcache.chunk_size`, `memcache.default_port`, `memcache.hash_strategy`, `sqlite.assoc_case`) affect both the session storage and **any** other instance of the underlying class.\n\nAs session handling is centralized in the Session  component  the first type should be safe to modify as nobody else will ever be impacted, the second type is not.\n\n### analysis\n\n> Since these two methods defaults are unpredictable, the developer should explicitly set the port. It's a matter of documentation.\n\nI don't understand your reasoning here: why doesn't it apply to the session storage as well. As you have the ability to set the port in the `save_path` when using the `memcache/d` save handler (`tcp://host2:11211`), you should also set it explicitly and it will remove the need to have to `ini_set('memcache.default_port', ...)`.\n\nThe default port might be a bad example as it could explicitly set both when using the session storage and connecting to a server for a memcache/d instance.\n\n`memcache.chunk_size` could be a better example as there is no other way to set the value other than ini settings. I see no reason why setting this value should be handled by the Session  component  rather than at a global level (in the php.ini file).\n\n> Imagine how ugly it would be if you say,  here's how to setup native memcache session, but you might additionally have to set some runtime ini-values .\n\nI can imagine, but I find also ugly to set global values from inside the Session  component . This PR is about finding the best compromise.\n\n### solution\n\n> While it is true that some default behaviour is affected by ini directives, they just affect unspecified defaults when invoking certain methods\n\nI don't agree, see `memcache.chunk_size` above,  `sqlite.assoc_case` is yet an other example.\n",
            "> I have recently confirmed the intention of the ini directives with the memcached team and indeed, the ini directive are targeted just as I have explained - to configure the native handlers.\n\nThis PR is not in contradiction with your statement. Using this PR, the native handlers would be configured by the ini values set in the php.ini file (as opposed to `ini_set()`).\n\nWith this PR auto_start = 1 could be used for native handlers (but not for custom handler) as explained in 4255.\n",
            "Native storages have been removed in #4454\n",
            "@fabpot PR ready\n",
            "@Tobion fixed, thanks.\n",
            "@dlsniper in your example the separator for the `other_variable` would be `/` (the trailing slash). Does that answer your question ?\n",
            "@dlsniper this PR only fixes the choice of a separator, the matching process is left unchanged, i.e. the behavior will be the same when a variable in the last position is optional and followed by a separator.\n\n_Closing to submit against the master branch._\n",
            "What about\n\n``` php\n<?php\n// CollectionType.php\n        if ($options['allow_add'] && $options['prototype']) {\n            $prototype = $builder->create($options['prototype_name'], $options['type'], array_replace(\n                array('label' => $options['prototype_name'] . 'label__'),\n                $options['options'],\n                array('csrf_protection' => false)\n            ));\n            $builder->setAttribute('prototype', $prototype->getForm());\n        }\n```\n",
            "It could be moved to the default options of a collection type extension. Not sure what is the best way to fix this.\n",
            "right I had read `(\\d+|(?:\\d+))` but don't you think using is_numeric would make it simpler.\n",
            "yep... there are complex: \n- `(?:\\d+)? = \\d*` am I correct this time ?\n- `5.` is not matched by your regexp but it is valid in php\n- using `[x.[:xdigit:]]` and is_numeric would be much more simple (and allow hexadec).\n",
            "The constructor calls [`setOperator()`](https://github.com/gajdaw/symfony/blob/36c4a8714171ccc07b4564fac4ae722f8eabd177/src/Symfony/Component/Finder/Comparator/NumberComparator.php#L77) which [throws an exc](https://github.com/gajdaw/symfony/blob/36c4a8714171ccc07b4564fac4ae722f8eabd177/src/Symfony/Component/Finder/Comparator/Comparator.php#L66).\n",
            "yes, it has been merged I think\n",
            "For ref: that's basically a backport of #3920 for 2.0\n",
            "arghh 2.0 \n",
            "I was faster :P\n",
            "you should probably squash the commits\n",
            "`Symfony\\Component\\DependencyInjection\\Exception\\InvalidArgumentException` over`\\InvalidArgumentException`\n",
            "Could you squash the commits and reopen the PR for 2.0 as asked by @fabpot (there is no way to switch from master to 2.0 once a PR has been created)\n",
            "Not so sure for the save part... I'll double check\n",
            "May be the current `Size` validator should be renamed as `Range`, @bschussek ? (see also #3893)\n",
            "@Felds Your initial issue could be used by using validation groups (i.e. validate the numeric type before validating the value). So the only problem this is solving is saving some chars.\n\nTo be complete you should also update the `ValidatorTypeGuesser` (see how `Min` and `Max` are used there).\n",
            "I mean using group sequences.\n",
            "There should be a couple of PR / issues that you can look for in Sf or Sf-doc (#2947 for example). I am not sure if this is already documented... Can you check ? (and if it is not, please create an issue or even better a PR)\n",
            "And also by looking at the tests\n",
            "@jalliot you are right, thanks. @Felds can you still check the doc ?\n",
            "thanks\n",
            "@fabpot @Tobion what about adding it in the config panel ? Not sure if it is very useful but I have seen to many `phpinfo.php` in the web root folder. (It could be an expandable panel loaded via ajax like what is used for the Doctrine explain panel).\n",
            "@shiroyuki I am not looking for anything specific. Just saying I have seen many times customer code using a publicly accessible file to return the info and it would help to get ride of this file.\n",
            "I'll squash the commits before this gets merged but for now it make the review easier.\n",
            "@Tobion some related things that are interesting to read: http://ilia.ws/archives/247-Performance-Analysis-of-isset-vs-array_key_exists.html\n",
            "The `load` function is used by the WDT - then the solution is probably to revert `toolbas_js.html.twig` to what it was before my refactoring.\n\n_I first wrote this JS for the panels which already use `<canvas>`, ... so there should be no pb with this JS there. After that I did some factorization with the WDT which is a bad thing_\n",
            "We need to check the calls to this JS. There is no need to keep it like it is if we use only ids / classes when selecting. @ruimarinho could you check both the WebProfilerBundle and the Doctrine panel calls ?\n",
            "@jmikola I haven't look in details but from your description, I think this might be a bad answer to a real issue. We should be able to enable the profiling in prod and examine the result in the corresponding dev env. In such a case, you would not have the WDTB enabled in prod as you can this on a live site (you would probably use request matchers then) and you would not want to enable debugging in the kernel.\n\nI don't have time to investigate more tonight, could you tell me if you think this makes sense ?\n",
            "I was thinking of a more generic solution to this problem but not at fixing a specific collector.\n",
            "Well it's not yet clear to me as I had no time to think more about it but the solution I envisioned by reading your PR was 2 fold:\n- There should be some way to ask a collector if it is  active  (the response in your particular case would be  is the event dispatcher traceable ? ) - this should probably be done via the implementation of a new interface to prevent breaking BC. If it is not active then it should not be displayed nor serialized.\n- There should be some way to enable/disable a selection of collectors - think debugging a live site here (this is not directly related to this PR).  \n",
            "Related issue: #3294\n",
            "You're right, thanks for the fix (I did break it !)\n",
            "**The proposed spec:**\n\nWhen you have some variables in your pattern i.e. `/base/{foo}-{bar}`, the variable will match anything until the expected separator (the separator being the char immediately following the variable):\n- `{foo}` will match anything until a `-`\n- `{bar}`will mach anything as no separator is specified (i.e. it will match `ab-cd/ef`)\n\n**What this PR solves:**\n\nBefore this change the character immediately preceding the variable (`/` for `foo` and `-` for `bar`) was also considered as a separator and the presence of this character would prevent the match (`foo` could not have been `ab/cd` before).\n- The described behavior is _almost_ true (there was a small bug in the logic that should not need to be considered here),\n- There is also a micro optim in the regexp (removing an unrequired trailing `?`),\n- Of course it was possible to change the default behavior described just before by specifying some requirements on the variables.\n\n**What you should pay attention to:**\n\nBefore this change `/foo/{bar}` would not have been a valid pattern to match `/foo/abc/def`. It is now and the value of `bar` would be set to `abc/def` (The same goes with `foo/abc/` with `bar = abc/`).\n\nIf you need to stick with the former behavior, add a requirement to the `bar` variable: `[^/]+`.\n\n**Conclusion**\n\nThe new behavior is consistent and predictable but is different from the former one.\n\n@stof, @Seldaek, @denderello, @fabpot please give me your feedback (you have reacted on the initial PR).\n",
            "Two things to keep in mind:\n- There is a bug in the current implementation (see the original PR for more info),\n- This PR brings consistency as:\n\n```\nfoo_show:\n    pattern; /{foo}-{id}\n\nfoo_edit:\n    pattern: /{foo}-{id}/edit\n```\n\nwas not working before (due to the same problem as what I and @stof have described). You have also probably noticed the curly brackets around `foo`: this is due to the first bug - the problem would not show up on the first variable with this specific separator config (but can occur with different separators).\n",
            "And the example given by @stof can easily be fixed by adding a '\\d+' requirement to the id.\n\nOne of the thing I would have liked to add is an automatic check to see if a regexp masks a consecutive one. However this is not a trivial task, I have to google a little bit for that (This would raise a warning in the router panel).\n",
            "@Tobion isn't the reply to your question covered by:\n\n>  the variable will match anything until the expected separator (the separator being the char immediately following the variable)\n\nThere would be no match in your example: `foo` would match `text1`, `bar` would match `text2`, the extra `text3-text4-` would prevent matching. \n",
            "yes I did misread and yes it is not related to this PR, let's not discuss it here.\n",
            "@Tobion I had the same idea in order to reduce the BC break (see the 2.0 PR as I have done a force push in this branch). Now, I think it was not a great idea:\n- It makes different separators (i.e. `-` vs `/`) works differently,\n- It makes the same separtator (`/`) works differently according to the variable position inside the pattern.\n\nI think that the current code of this PR is easily understandable. The only drawback I can see is that it will be easy to have overlaps when you are used to the former behavior.\n\nI would really like to solve this by having an algo able to find regex intersections.\n",
            "@schmittjoh not sure to get what bug you are referring to ?\n",
            "@schmittjoh  Yep, there should be an option to turn the warning/error off. The route used for generation only should not specify a controller, right ? (if this is true we can filter them out by default).\n\nFor a variable in the last position (what has been discussed by @stof and @Tobion above) we could use the preceding char as a separator by default, that would reduce BC break and still be consistent.\n\nI am working on the algo to detect the intersections.\n\nI have discussed thoses points w/ @fabpot.\n",
            "@Tobion yes I am working on it, I should have a proto soon. I think we should throw an exc if there is no separator between two variables.\n",
            "@Tobion could you create a separate issue for `/{var1}{var2}` ?\n@Seldaek could you create a separate issue with your last comment - and link 3227 ?\nThanks.\n",
            "@Seldaek right, it should be covered by 3227 and it is out of the scope of this PR (which is stated in the first comment).\n",
            "I will update this PR very soon. I'll also push a first proto for the route collision detection in a few days.\n",
            "see the linked PR\n",
            "no pb just rebase on master and force push\n",
            " Bug fix: no  != 2.0\nsorry for having confused you.\n",
            "@lencioni could you also provide an answer from my question in the former version of this PR ?\n",
            "oops my mistake, sorry.\n",
            "Please \n- re-open a PR against 2.0,\n- squash you commits,\n- for commit meesages, follow http://symfony.com/doc/current/contributing/code/patches.html\n\nIt was possible than the body of the while loop was never executed before, it is no more. Is this expected ?\n\nThanks.\n",
            "You should follow the same guidelines than your other PR. Use  Boolean  (capital B)\n",
            "@drak you meant #3659, right ?\n",
            "@andrewminerd I think this has been proposed several times, could you then please check [the former PRs](https://github.com/symfony/symfony/issues/search?utf8=%E2%9C%93&q=login+event) to make sure this one is better, and maybe make a quick recap here ? Thanks.\n",
            "I was a bit unclear yesterday and forgot to add some details\n\nThis PR was first created to solve two  bugs  in the routing:\n\n**First bug:**\n- the route `/foo-{a}-{b}-{c}`\n- would generate this regexp: `'#^/misc\\\\-(?P<a>[^/\\\\-]+?)\\\\-(?P<b>[^\\\\-]+?)\\\\-(?P<c>[^\\\\-]+?)$#xs'`\n  *bug: the regexp for `{a}` should not disallow `/`\n\n**Second bug:**\n- if a route pattern has `a{var}b`\n- a, b are considered as separators and the regexp will be `...a(?P<var>[^ab]+?)b...`\n-  a  should not be disallowed in the regexp\n\n**Other:**\n\nIn the first example the c does not include  -  because of the the second bug but it allows  /  which is think is yet an other bug.\n\nSo I think we should be clear on how the Routing should work and update accordingly.\n",
            "Closed in favor of PR #3678 targeting 2.1 \n",
            "could numeric types be multibyte strings ?\n",
            "This PR is about numeric types only and the MaxLengthValidator is [multibyte safe:](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/MaxLengthValidator.php#L45)\n",
            "Sorry for nitpicking but what about:\n- some validation on the function name ?\n- renamming `jsonp` -> `callback` ?\n",
            "I mean a valid JS function name\n",
            "I would go for a regexp only (ignoring reserved words); The idea would be not to use this to run arbitrary JS code.\n",
            "> Maybe you should add some lines in the changelog as well to document the behavior change for people to have the proper heads-up.\n\nThis is a RFC, the changelog will have to be updated according to what direction is chosen.\n\nI think we have no other choice than to break BC here, either in `Request` or in `UrlMatcher`. \n\nBreaking BC has it is done here should not impact Sf2 users. It will impact those using the router as a standalone component. I'll go over it again to see if I can come up with something better\n\n> I think it might be considered as an old behavior change so people might need to update their code when this patch gets merged but that shouldn't be a problem.\n\nDo you have some examples in mind ?\n",
            "> I'm thinking of running a URL of all the characters that can be typed by the user and see what happens, would that work?\n\nI'll add a test.\n\nFor sure some people have created [Routers](https://github.com/symfony-cmf/ChainRoutingBundle). The change will be listed in the changelog as indicated before in this thread.\n",
            "Another PR where we need to make choices.\n\n**The state before this PR:**\n- getRequestUri() returns an **encoded** value\n- getPathInfo() returns a **decoded** value\n- getBaseUrl() returns a **decoded** value\n\nThe decoded value is wrong as `urldecode` is used in place of `rawurldecode` turning `+` into a space character (#2324).\n\nThe matcher starts by urldecoing the path (it is already decoded as explained right before) and then urldecodes each variable one more time.\n\nWe end up with a path being decoded twice and variables being decoded three times.\n\n`Request::getUri()` calls both `getBaseUrl()` and `getPathInfo()` so that the return URI is **decoded**.\n\n**The state after the PR:**\n- getRequestUri() returns an **encoded** value\n- getPathInfo() returns an **encoded** value\n- getBaseUrl() returns an **encoded** value\n\nWe are consistent and we have the raw values everywhere - there is no (easy) way to get the encoded value back once it has been decoded as it is done in the current code.\n\nThe matcher relies on an encoded value and decode the value only once (using `rawurldecode` to support `+`s).\n\nSo basically this PR:\n- fix a bug - URL with `+` are now supported,\n- makes paths consistent - encoded values everywhere, including `getUri()`\n- makes variables consistent: they are decoded only once - the same as query string parameters.\n\nThere are some BC breaks:\n- getPathInfo() returns an encoded value vs a decoded one before,\n- getBaseUrl() returns an encoded value vs a decoded one before.\n\nAny code relying on the output of one of the 2 previous methods should be checked and upgraded if needed. I am interested in the use cases where your code need to be updated.\n\nThoughts ?\n",
            "Thanks @Seldaek for reporting the use cases. You second case would be solved by `rawurldecode`ing the path info which is a minimal change.\n\nI still have to check the calls to the modified functions, the `RequestMatcher` also needs to `rawurldecode` to keep BC.\n\nAnd in general I think we have to expand to doc to specify the url format that should be used.\n",
            "BC breaks -> 2.1\n",
            "The new PR for 2.1 is #3780. I have tried to copy the significative comments there, please correct me if I have missed something important.\n",
            "From a user perspective, are the new messages more helpful than confusing ??\n",
            "> I would say these are all deploy-time errors\n\nI agree, which is why I think we don't care for a validator.\n",
            "Would adding a boolean `detailedError` option help ?\n",
            "I agree this would be far from ideal.\n\nMay be a generic solution could help: are there other places where we would benefit from a more detailed message in the debug environment ?\n",
            "@dlsniper let's wait for the feedback from @fabpot. If he is ok to merge this, the PR would need to be rebased again, the routing has had a lot of changes during the last week.\n",
            "@dlsniper what do you mean by unicode support ? (i.e. I don't think we can claim unicode support without the `u` modifier ?).\n",
            "The compiler is not [unicode aware](https://github.com/dlsniper/symfony/blob/6a4b88a1fbfe4d851b5404feea0ae60370592c87/src/Symfony/Component/Routing/RouteCompiler.php#L37)\n",
            "I think adding a 'u' would not be enough: you would need to take into account the case where the separator could be a unicode character:\n- `.` should probably be changed for `\\X`,\n- accessing `$m[0][0][0]` is not valid any more, you should put the `\\X` inside a matching subpattern,\n- you should verify all the code handling the separator (to check if it supports unicode),\n- you should also check if unicode characters can be used inside classes, otherwise you have to encode them.\n",
            "@Tobion If unicode is not allowed for separators `{var1}\u20ac{var2}` would not be a valid route.\n\nSome questions:\n- How can we chek if unicode is enabled in PCRE ?\n- Should we make unicode support optional ?\n",
            "@Tobion this is my understanding of @fabpot proposal which would require minimal changes to the current code. (@dlsniper this discussion is not about the current code but the unicode aware code).\n",
            "Is this really compliant with http://symfony.com/doc/current/contributing/code/conventions.html ?\n",
            "should your `add` be a `set` and `addAll` a `add` ?\n",
            "@guilhermeblanco have you checked other storages for the same defect ?\n",
            "@guilhermeblanco could you please create a ticket so that it doesn't get lost (referencing the PR). Thanks.\n",
            " @fixe please squash your commits. Also if Sf 2.0 is affected please close this PR and submit again against 2.0 (there is no other way to do w/ GH). Thanks.\n",
            "-1 for .gif -> .png (the original images might be used by some 3rd party bundles)\n",
            "@Tobion & @stof thanks for the feedback.\n",
            "> There are lots of reasons to write a hasser that accepts an argument\n\nMay be can check for 0 args as we are already using reflexion ?\n",
            "should target 2.0....\n",
            "Probably makes sense. Could you check if any other `*Bag.php` needs to be updated so that it could ba an atomic merge.\n",
            "could you please order the properties & methods by visibility according to the Sf2 CS.\n",
            "Could it be '.../php5' ?\nIs it a PHP bug ?\n",
            "@stealth35 \n- asking about 'php5' because it seems some systems use this name,\n- would testing for a cli sapi be more robust than making assumptions about the process name ?\n",
            "I think this is a good idea (It was something missing to properly handle PersistentFile i.e. you should not persist invalid files)\n",
            "@jankramer please remove the second commit from this PR (see http://symfony.com/doc/current/contributing/code/patches.html) in order to make this mergeable.\n",
            "@fabpot reminds me that you have #3435 on your todo list. thanks.\n",
            "Not sure if this is the right place to report this but ChromePHP handler does not work for me, probably due to the header: `x-chromephp-data` vs `X-ChromePhp-Data` when working.\n",
            "I have just emailed the author of ChromePHP to report the issue.\n",
            "good point, I'll do.\n",
            "@stloyd that was a great idea, I realized I had miss a case. It has been added and should be covered by UT + fixes made.\n\nI am done with the fixes, should be ready to merge.\n\nAnd time to give the `PrototypedArrayNode` some more usability now.\n",
            "@drak don't know for other skipped tests, it could be interesting to ask phpunit.\n",
            "@drak could you add those to the script ? For intl it might be needed to test with and without the extension enabled (to test the stub).\n",
            "@stof thanks for the info.\n\nFor the stub: I don't know this part well. But for example the Form component uses intl. Will testing the Form exercise the stub when intl is not available ?  In such a case it could be valuable to test w/ and w/o. Let us know.\n\nMay be we could enhance the script by adding a `isAvailable()` closure in the extension array to install the ext only when required (different PHP versions might come with different exts), what do you think ? (Then we have to think about the configuration of the ext). \n",
            "@drak that's much simpler & less powerful at the same time (i.e. have you checked the ext versions, how quickly will the apt package be updated after a PHP release, there is no way to tweak the config, ...)\n",
            "@fabpot could you please tell me if 2.0 if is a great idea here / the applicable subset.\n",
            "That is what I was thinking, the cleanup is definitely not targeted to 2.0 and we can not literally speak of a bug fix (the extra config would just get ignored). I'll re-open it against master. \n",
            "let me know what should go in 2.0 as well.\n",
            "@fabpot what about merging commit 3 & 4 to 2.0 as well ?\n",
            "Oops I meant 3 & 5. 9fc8d28 is probably the most important for 2.0. Thanks.\n",
            "@stof I would like to avoid duplicating the logic in the `TraceableUrlMatcher`. One solution I can think of is to pre-process the class and use the `ClassLoader` to load the pre-processed version when needed - I am not a big fan of pre-processing but I can not find a better solution for now (I have to think more about this)\n",
            "I mean\n\n``` php\n/** #if(conditon)\n * <php code>\n * #endif\n */\n```\n",
            "or maybe something like\n\n``` php\n/*# \n * {% if %conditon% %}\n *     <php code>\n * {% endif %}\n */\n```\n\nwe'll see.\n",
            "yep probably need a little bit more thinking _(btw that's something [we already do](https://github.com/symfony/symfony-standard/blob/master/web/app_dev.php#L23))_.\n",
            "I was referring to the other part: change the code (and we actually do some sort of pre-processing by removing the comments)\n",
            "A golden rule would be to make the code usable w/o pre-processing (which is why the code is initially commented out). The autoloading could be provided by the pre-processing library - i.e. no need to alter the external autoloader.\n\nI am still not convinced it's a good idea and your feedback really help me maturing the idea. thanks. \n",
            "@stof it would work as flawlessly as the  ClassCache works today.\n\nSome more thoughts:\n- It would need a cache warmer,\n- It would be enabled in debug only in order to encourage using it only for adding logging capability (this PR is actually a good example of what it could bring - try to refactor the `UrlMatcher` to provide the same functionality if you need to be convinced - which I did before) Using it for any other purpose could lead to serious issues (I have written enough C code to face some `#ifdef` nightmares)\n- It should not depend on an external template engine (PHP is good enough)\n- It would use `spl_autoload_register((), false, true)` to prepend an autoloader\n",
            "@fabpot I know, it had the same the reaction at first, please allow me some more time to come up with a solution.\n",
            "If think it is starting to take shape in my head, we probably need some more iterations to decide whether or or it is a good idea an how this can be done, please read to the bottom and give me feedback on each opened question.\n\nThe `TraceableUrlMatcher` is a hack as is duplicate the logic of the `UrlMatcher`. It doesn't work very well with the `UrlMatcher` and the `RedirectableUrlMatcher` (it will log a redirect if the scheme does not match, even if you are using an `UrlMatcher` which does not support redirect).\n\n**Q1 - do we agree on this point ?**\n\nI have tried to refactor this code in order to remove the hack, there is no simple solution. (please try if you are not convinced)\n\n**Q2 - do we agree on this point ?**\n\nCode pre-processing would allow removing the hack and achieve what we want in a quite simple way (Please do not consider the downsides yet)\n\n**Q3 - do we agree on this point ?**\n\nCode pre-processing is bad because it would allow changing the behavior of the code and would lead to unmanageable code.\n\n**Q4 - do we agree on this point ?**\n\nIf we agree on all those points, I foresee an acceptable solution...\n",
            "So that's a yes for all ?\n",
            "I have just realized that I forgot to mention that questions were related to the paragraph on top of them... bu that seems to mean that you both agree on the 4 points, my proposal is coming.\n",
            "So it seems everybody (at least 3 of us) agree on the fact that  pre-processing  could be useful (not considering the downsides for now) to solve architecture issue that can not be solved in an other (easy & efficient) way.\n\nThe only other easy way to fix the issue in the context of this PR would using the event dispatcher but this would kill performances and then it is not an option for such a critical component as the router.\n\nTo counter the downsides of pre-processing, we need is solution that:\n1. does not allow executing arbitraty PHP code,\n2. has a restricted scope (i.e. logging in the present case),\n3. makes the code functional even without pre-processing\n\nThis could be solved by:\n1.  2. Having a very restrictive grammar,\n2. Having the added (optional) functionality initially commented out.\n\nMy proposal:\n\n``` php\n<?php\ninterface Logger\n{\n    function log($msg, $params, $level);\n}\n\ninterface Loggable\n{\n    function setLogger(Logger $logger)\n}\n\nclass Service implements Loggable\n{\n    const INFO = 0;\n\n    public function process()\n    {\n        $user =  world ;\n\n        /**\n         * @Log({\n         *      message  =  Hello {world} ,\n         *      params  = {\n         *          {world} :  $user \n         *     },\n         *      level :  self::INFO \n         * })\n         */\n\n         return doStuff();\n    }\n}\n```\n\n``` xml\n<?xml version= 1.0  ?>\n\n<container xmlns= http://symfony.com/schema/dic/services \n    xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:schemaLocation= http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd >\n\n    <services>\n        <service class= Service >\n            <tag name= loggable  condition= %kernel.debug%  />\n        </service>\n    </services>\n\n</container>\n```\n\nThere would be:\n- a compiler pass in charge of the pre-processing,\n- a `preprocessed\\` cache sub-folder,\n- an autoloader (registered in the container constructor or lazily registered if it makes sense),\n- a PreProcessor component supporting only the `@Log` command for now - I don't have any other use case in mind,\n\nThe grammar should be refined not to be too permissive (i.e. allow running arbitrary code) but powerful enough.\n\nA command in the pre-processor would be an annotation, a dumper and a set of interfaces.\n\nThoughts ? \n",
            "@Seldaek @fabpot You are not helping me that much with those answers, could you elaborate a little bit ? I think is is worth trying to come with something better has what we currently have (see Q1).\n",
            "Yes I know but I am trying to propose a solution that minimize the negative sides by not allowing running some arbitrary code and as said before  we probably need some more iterations to decide whether or or it is a good idea \n",
            "So what about my new proposal:\n\n``` php\n<?php\nclass Service\n{\n    public function process()\n    {\n        $user =  world ;\n\n        /**\n         * @Log({\n         *      message  =  Hello {world} ,\n         *      params  = {\n         *          {world} :  $user \n         *     },\n         *      level :  INFO \n         * })\n         */\n\n         return doStuff();\n    }\n}\n```\n\n``` xml\n<?xml version= 1.0  ?>\n\n<container xmlns= http://symfony.com/schema/dic/services \n    xmlns:xsi= http://www.w3.org/2001/XMLSchema-instance \n    xsi:schemaLocation= http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd >\n\n    <services>\n        <service class= Service >\n            <tag name= loggable  condition= %kernel.debug%  />\n        </service>\n    </services>\n\n</container>\n```\n\nThat's about the same but the Loggable interface is not required any more as it would be automatically added in the **Proxy** class when the `@Log` **annotation** is used.\n\nSo no more evil  pre-processing  but some good practices, namely annotations and proxy classes which should sound familiar to every Sf2 developers.\n\nI would appreciate some _detailed_ feedback.\n\nThanks.\n",
            "This is similar to AOP but I haven't found anything about joint points in method body, Java has the  advantage  of being a compiled language and `if (debug) {...}` would not impact prod builds which might be the root reason.\n\nIf I understand your reply, your solution is not AOP ( some teasing ! ). Do you have some plan for AOP in Sf2, looks very powerful (@schmittjoh has a cool Bundle for that). \n",
            "I think that this proposal is incomplete: missing phpDoc (`@throws`), the unit tests should be updated (well created here it seems) plus you are modifying the behavior of an interface which imply even more changes.\n\nAlso changing `@api` tagged method behavior should be avoided unless strictly required.\n\nBut according to your description, shouldn't the fix be in assetic only anyway ?\n",
            "wouldn't testing the return value (against `false`) in assetic solve your pb ?\n",
            ">  that would only hide the problem\n\nI don't fully agree (see my previous comment, i.e. `false` means that the file could not be located)\n\n> would also still not present the original error\n\nI agree. If we really need the original error, either we should modify the `LoaderInterface` in the Templating component (which is a frozen API) or use an other implementation locally as a workaround.\n",
            "Behavior is now consistent.\n\n_FYI, You should thank `git-dag` here, `gitk` & `git-cola` are also helpful to filter commits._\n",
            "@lsmith77 I remember that this behavior has been changed not so long ago, you might want to check the history, was it related to 99011ca9c9b0eb6f55f5a9fe679a647b158d3ed1 ?\n",
            "@ericclemmons can you help here ? (85ca8e3615be14b784cd499c7f17f61d5594df05)\n",
            "@beberlei, @lstrojny Would it be possible to provide a basic CacheInterface and some other interfaces as TaggableInterface, XYZInterface with decorators for cache system where those features are not natively supported ? \n",
            "@dlsniper I'd like to come with something like this in the CacheBundle (#3225). I hope I can find time on work on this during the coming week.\n",
            "@dlsniper Any help is welcomed, I'll try to update the PR in the coming days with code a detailed todo list (It will be based on  doctrine common until this cmp gets ready.)\n",
            "@Seldaek thanks for the link. The one thing I don't like there is `get()` with a single argument and the `exists()` method which encourage writing flawed code (race conditions). I'll try to take some time to go through the mail thread and submit feedback.\n",
            "I agree too, `get()` should return a value, that's why we should have `fetch()` instead (see my [reasoning](https://github.com/symfony/symfony/pull/3211#r400427)). \n\nI would be ok with returning a value but:\n- @stof I really would like to see motivation for each idea,  be more logical  does not sound like a good reason to me,\n- @Seldaek do you have a lot of use case when you don't want to check the availability ?\n",
            ">  if I get a null\n\nThat's checking for availability, isn't it ?\n\n``` php\n<?php\n$obj = $cache->get($key);\nif (null !== $obj) {...}\n//vs\nif ($cache->fetch($key, $obj)) {...}\n```\n\nWe are defining a new interface, I don't think we should assume anything. It's a great opportunity to make something that is less error prone (thinking remove `exists` here) and easier to use in the most common uses cases (thinking returning availability here). \n\nedit: I have changed `get` for `fetch` - this is to understand the comment from stof below.\n",
            "@lstrojny this has been proposed on the PSR ml by both @beberlei and Robert Hafner, I like the idea very much.\n",
            "It would obviously be better to conform with what the PSR decides for interoperability. We also have a chance to make proposals to the PSR. If the PSR comes with a solution that doesn't suit our needs of takes too long then we can re-consider this position but let's try first.\n\nIn the mean time we can come up with a bundle and a component, there are a lot of other things to discuss and tune. Then we'll update to whatever we decide.\n\nThoughts ?   \n",
            "I think the idea is to build 3 on top on 1 or 2, right ? \nThen we should select either 1 or 2 to start with. I favor 2 vs. 1 because it allows more concise code but I am ok with 1 also.\n\nAs said on the mailing list, I would prefer 1' (or 2') with a third argument (`Boolean` or `::FETCH_VALUE` / `::FETCH_KEY`) to allow retrieving availability only (it can improve perf for some use cases). \n",
            "Well let's try to be objective and list the pros and cons of `mixed get($key, &$found)` vs `Boolean fetch($key, $value)`\n\n**Pros:**\n- A get, fetch, retrieve, etc method has to return a value, not a boolean. Isser methods return booleans, getters return values.\n- It doesn't make use of reference: what about `&$found` ?\n- I like it / it is easier to understand / it looks like my favorite backend / it is more logical / it is more obvious / less confusing: this is a personal opinion, each of us has its own (do not judge by the number, some have more than one opinion)\n\n**Cons:**\n- easier to get get wrong: `if (null / false === $cache->get($key) { ... }`\n- less concise:\n\n``` php\n<?php\n$value = $cache->get($key, $found);\nif (!$found) {...}\n//vs\nif (!$cache->fetch($key, $value)) {...}\n```\n- I don't like it : personal opinion again \n\nPlease let me know which pros / cons should be added to the list and let's pick the winner. Voting does not seems like a good idea here, we'll fall in the personal opinion thing again.\n\n---\n\nSome personal opinions:\n- I finally made up my find for _solution 2_\n- I would really to hear the voice of Robert Hafner the author of [Stash](http://code.google.com/p/stash/source/checkout). It seems to me he got a lot of things right.\n",
            "looping in Robert (@tedivm)\n",
            "Not everybody as the same expectations for fetch, see [odbc_fetch_info](http://fr.php.net/manual/en/function.odbc-fetch-into.php). If the name is the only problem with might come with something better.\n",
            "We are designing a component that is very important for the future of Symfony.\nObjective reasons would be much more useful than  +1 s. It should not be a matter of personal preference but more usability.\n",
            "@willdurand thanks for the feedback, I have [updated the pros/cons list](https://github.com/symfony/symfony/pull/3211#issuecomment-3950367).\n\n### I do not really get your first point:\n-  seems  = personal opinion ?\n- what two ways are you talking about ?\n\nbtw `Cache::exists()` looks odd (i.e. the object has to  exist  because you are using it) `Cache::isMiss()` is way better.\n\n### About your last point:\n\nI think the  region  (or namespace) should be set at another time (should it be the constructor or a method call). Then you can use different cache  providers \n\n``` php\n<?php\n$cacheReg1 = $container->get('...');\n$cacheReg1->[put/save/whatever]($key, $value);\n$cacheReg2->[put/save/whatever]($key, $value);\n```\n",
            "@rande \n- The exception has already been discussed in this thread and it seems we have an agreement here (stop me anyone if I am wrong)\n- You might want to check the CacheBundle #3225 also. The current focus there is configuration (i.e. no caching) as nothing I have seen so far seem to cover our needs (i.e. ability to add backends from any bundle, ability to share backend & drivers, ...). I have a bunch of updates to push there once I fix  an issue  with the Config.\n",
            "I won't have time to work on this for at least the coming month. Anybody feel free to start something (a RFC ?).\n",
            "Maybe you can update the [DomCrawler](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Form.php) at the same time ?\n",
            "How faster ? even if the string is long and do not contain an occurrence of the sub-string ?\nLooks like micro-(not)-optimizations to me.\n",
            "% would be better (machine & env independant), what string size, what match offset ?\nI personally vote against (`substr` is more meaningful to me and I do not like micro-optims)\n",
            "I have [tried](https://gist.github.com/1596588) at home. \n`strpos` **is** faster unless you have a very long string, probably because you do not need to create a new string, interesting, thanks for the tip.\n",
            "@fabpot anything preventing this from being merged ? Travis would be faster and their workers less loaded.\n",
            "what about using the `--transport` option ?\n",
            "May be the PR should be submitted against 2.0 (rather than master) ?\n",
            "I have tried to explain it in my commit message: This PR relates to 2.1 only as putting it in 2.0 would me testing with any possible Twig version shipped with 2.0 which I don't want.\nSo AFAIK 2.1 will be shipped with 1.5.0 at least.\n\nThe root cause is that Twig Bridge and Twig are asynchronous (i.e. The bridge is not part of Twig but Sf).\n\nI am not sure to be very clear ?\n",
            "Humm probably better with an example... let's say the current syntax\n`{% form_theme form  tpl1   tpl2  %}`\nwill be changed for\n`{% form_theme form [ tpl1 ,  tpl2 ] %}`\nin Twig 28.0.0\n\nThen the tests should be updated and take a different path according to the Twig version because the tests (in Sf2) and Twig releases are asynchronous.\n\nSo if you want to support every single Twig versions, you need to figure out any paths that need to be written. That will be easier starting from 1.5.0 because we don't have to go backward to figure out all the possible paths.\n\nWell... not so sure it clearer after all !\n",
            "because to turn  they are exected to pass  into  they pass  you have to test it and I don't want to test all possible Twig versions but you are welcomed to do so and update the requirement on the condition if you fell like.\n",
            "You are right, that was a bad example, consider how Twig_Node_Expression_Name compiles across Twig version instead if you really need a better example.\n",
            "Travis is not happy with 5.4... need to be fiwed + probably submitted against 2.0\n",
            "see #3035 for a (hopefully) better fix\n",
            "It seems I might be able to come up with a backward compatible solution... (which is quite different from anything in this PR)\nI would need 2/3 days as I am busy atm\n",
            "a bit too long too explain for the time I have now but I'll try to push a proto asap.\ni think the current direction has issues also with mixing `[index]` and `[]` (i.e. `[]` `[1]` `[3]`)\n",
            "@fabpot I have just pushed [a proto](https://github.com/vicb/symfony/commits/issue/1579). I would appreciate your feedback about it before going on.\n",
            "that's just an helper class which has little (not to say no) use outside of the context of the file\n",
            "I have just submitted PR #3035 to get feedback on my proposal.\n",
            "@stealth35 this does not solve the [double extensions](http://www.acunetix.com/websitesecurity/upload-forms-threat.htm) issue.\n\nTo be secure, you **must** disable the [php engine](http://php.net/manual/en/apache.configuration.php) for directories containing uploaded files.\n",
            "and the best practice is also never to rely on the uploaded filename (i.e. you should rename the to `<UID>.png` in your case)\n",
            "I am not sure if this is feasible, may be the best would be to add a cookbook entry with some security guidelines ?\n",
            "@ruimarinho an entry dedicated to security might be worth on its own. Some of the things that have (or not) been discussed here must be handled well before the deployment.\n",
            "I think this is incomplete as the default `data_class` value is not checked (from the prototype builder as suggested in my previous message). I am going to submit a patch.\n",
            "@marcw I am wondering if this PR is useful at all. The correct way is to set the `data_class` for the item in the collection (should it be in your type class `getDefaultOptions()` method or in the collection `$options['options']['data_class']`). There should be no need to introduce this new `class` option.\n\nFieldType [has the logic](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/FieldType.php#L140) to instantiate your class based on the `data_class`\n\nHave you encountered an issue with that ?\n",
            "I think this is handled in [Form::bind()](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php#L511), am I missing something ?\n",
            "@marcw was the `data_class` set ? Would you have an example available ?\n",
            "@fabpot it was not translatable as the name was hardcoded in the message (instead of using a placeholder). So yes it becomes translatable now (and  customize able as explained in the PR message).\n\nI have also removed the form name from the default message as I don't think it brings any added value.\n\n`This value is not valid` already exists in the translation files (see id=24).\n",
            "@oscarballadares the PR you are looking for is most probably #1542 - which you should see in the message thread of your submitted issue.\n\nThe best would be for you to verify that PR #1542 fixes your issue and provide some feedback so that the issue can be close but only when the PR gets merged (if it fixes the issue).\n",
            "Right, so we'd better stick to the `<script>` type templates.\n\nThe latest commit render nested proto as:\n\n``` html\n<script>\n    <$script>\n        <$$script>\n        </$$script>\n    </$script>\n</script>\n```\n\nThe '$' prefix is repeated as many time as prototypes are nested.\nThe changes have been implemented for Twig only and should be considered as a POC for discussion.\n",
            "You should not need to access a nested template.\n\nThe generated markup structure would be:\n\n```\nParent1\n    Child1\n    <script>child proto</script>\n<script>\n   parent proto\n   <$script>child proto</$script>\n</script>\n```\n\nWhen adding a child to Parent1, use the child proto.\nWhen adding a parent, use the parent proto and replace `$script` with `script`\n",
            "It could be something like\n\n``` javascript\n    jQuery(function($) {\n        var template, index;\n\n        $('form')\n            .delegate('p.add-grandchild', 'click', function() {\n                template = $(this).prev().find('script').first();\n                index = template.siblings().length;\n                template.before($(template.text().replace(/\\$\\$name\\$\\$/g, index)));\n            })\n            .delegate('p.add-child', 'click', function() {\n                template = $(this).prev().find('script').last();\n                index = template.siblings().length;\n                template.before($(template).text()\n                    .replace(/children_\\$\\$name\\$\\$/g, 'children_' + index)\n                    .replace(/children\\]\\[\\$\\$name\\$\\$/g, 'children][' + index)\n                    .replace(/\\$script/g, 'script')\n                );\n            })\n        ;\n    });\n```\n",
            "I don't see a better way other than prefixing `<script>` tags for now. I will propose a less intrusive implementation later today is this should get merged.\n",
            "A compromise could be to add some support to the FormView class. This is done in https://github.com/vicb/symfony/commit/c34fa060ad2b48a7b7cfbb5ec13e6355ae364345. This is equivalent to the solution proposed in this PR without modifying the current Form code (`FormView::getPrototypeDepth()` never get called if not explicitly called from the form templates files).\n\nThen the templates can be modified to handle nested prototype by prefixing the script tags:\n\n``` jinja\n{% block prototype_row %}\n{% spaceless %}\n    {% set prefix = '' %}\n    {% for i in 0..form.prototypeDepth %}\n        {% set prefix = prefix ~ (i > 0 ? '$':'') %}\n    {% endfor %}\n    <{{ prefix }}script type= text/html  id= {{ proto_id }} >{{ form_row(form) }}</{{ prefix }}script>\n{% endspaceless %}\n{% endblock prototype_row %}\n```\n\n**it would be even simpler in php using `str_repeat()`.**\n\nMay be we can modify FormView only and let users modify the template as described above when required then we are not tied to this implementation (but we provide support for it). In such a case there should be a cookbook article describing how to modify the template.\n\n@blauwers as the initial reporter of the issue (#1497) do you have some feedback on the solution proposed in this PR ?\n",
            "I made it private because it is created in the doctrine extension and you should not rely on this service being defined (if the internals of the extension get changed).\n\nAfter [some discussion](https://github.com/symfony/symfony/commit/9c0db888511067c615062eaecdebb9ec8ce4ee0c#src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php-P25) with @schmittjoh I don't think it is such a good idea any more.\n\nThere should be some centralized cache manager, this would allow to reuse memcache instances without having to create a new one each time (when the host and the port are common). \n",
            "I have first submitted this PR because there is no point in having CS when we do not follow them - unless with have good reasons not to do so. However I do not think git related  issues  are part of those: \n1. History would not be  destroyed  and you can specify a revision range when using blame,\n2. merge conflicts are part of the VCS workflow and are actually a reason why we use a VCS rather than a FTP server.\n\nThe  some more  reasons are probably good reasons and I am fine with this PR not being merged.\n",
            "1. You should enclose the prototype in a CDATA block when using XHTML (see form theming),\n2. You should use the prototype template as a string, and replace the '$$name$$' part with what you want before creating the DOM nodes -> no need for a regexp `str.replace('$$name$$', ...)` and no more `$` to handle in jQ.\n",
            "see https://github.com/symfony/symfony-docs/issues/305\n",
            "I was only referring to an issue being opened against sf-doc not to any implementation.\n\nIf you encounter any issue using the forms in sf, please submit a ticket against sf and link the relevant source files in a gist. Thanks.\n",
            "yep, I'll work on that and that will probably generate some work for Ryan too, thanks in advance.\n",
            "I have updated the docs here: https://github.com/vicb/symfony-docs/compare/form%2Fphp\n\nI still need to review them before submitting a PR.\n\nSome more doc needs to be written:\n- when to use `block()` / `->renderBlock()` vs. recursively render the parent block,\n- PHP theme inheritance (= providing an array of themes to `setTheme()`) \n\nThose are advanced topics and I think they can wait for a few days before being documented.\n",
            "@stof I hope to make it possible but I need a little bit more thinking to find the best possible solution which should not look like a hack.\n",
            "This should not be merged yet, it might have some issue with the variable stack. I am working on it.\n",
            "Sorted out the issue, it was linked to some local _optimization_, the code of this PR is ok.\n",
            "I have pushed a [POC of php theming based on this PR](https://github.com/vicb/symfony/commits/form%2Fphp-theme) to my repo - it is lacking a configuration and cache layer.\n\nI have open [a thread on the ml](http://groups.google.com/group/symfony-devs/browse_thread/thread/9b3f131fe116b511) to discuss this.\n",
            "@fabpot fixed in the last commit.\n",
            "@Seldaek the syntax is the same as it was before this PR. You are proposing an enhancement that you should submit as a separate PR.\n",
            "@whatthejeff This is [what](https://github.com/symfony/symfony/pull/7128/files#L9R701) we end up doing. However initializing in the constructor could be a little bit cleaner, because parameters have to be wrapped in an array when returned from a provider.\n\n@sebastianbergmann ok I understand why they are called before now, what about mentionning it in the doc ? (I can open a PR which the changes if you are ok). I am not even sure having objects would help a lot: if you look at my ex, there is a dependency from one provider to the other.\n\nThanks for your replies, closing the issue.\n",
            "done\n",
            "I have found no better way... I am testing some minor tweaks I want to submit.\n",
            "@kriswallsmith tried and dismissed, the id and name are bad & you have to go for `render_widget(form.get('proto'))` in the template. That should be fixeable but not any better.\n",
            "@kriswallsmith the id would be smthg like `form_emails_$$name$$_prototype` but yes we should be able to do whatever we want but the code might end up being more complex.\n\nI am done with the tweaks but still open to feedback on this PR.\n",
            "That should be the id of the `<input>`, the id of the script would be `form_emails_$$name$$_prototype_prototype` (if prototype is the name of the nested node).\n\nI am trying to setup a branch with my code (playing with git & netbeans local history)\n",
            "@kriswallsmith https://github.com/vicb/symfony/tree/kris/proto if that can help (there are still changes in Form.php)\n",
            "I would have expected it to be faster however `array_map` is about twice slower... reverted !\n",
            "@stof fixed, thanks for being  aware .\n",
            "Should be because `{{ block('form_widget') }}` renders the block from the current file (div_layout.html.twig). \nThe issue exists for other blocks where `block` is used (i.e. if you customize `field_widget` it will not affect the `email_widget` but it should)\n",
            "@stof I was refering to `block` being used in [div_layout](https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/div_layout.html.twig) \n\ni.e.\n\n```\n{% form_theme form _self %}\n{% use 'div_layout.html.twig' %}\n{% block field_widget %}\n    whatever\n{% endblock field_widget %}\n```\n\nwould not affect rendering an email field, did I miss something ?\n",
            "@henrikbjorn no sure to get what you mean, I am referring to the email_widget block defined in div_layout\n",
            "@henrikbjorn this is how it should work but it doesn't and this is why there is an issue. I'll investigate more tomorrow.\n",
            "The issue seems to be linked to the way `renderBlock()` works. See [this gist](https://gist.github.com/5e03c241403e4637ddea) for details.\n\n@fabpot there is a proposal for a fix in the gist. Could you please check it and may be integrate this in twig if this is a proper fix ?\n",
            "It still needs to be thoroughly tested (for both traits & template inheritance) and will probably need some more tweaks in the FormExtension.  \n",
            "I can not tomorrow, may be on Sunday.\n",
            "@fabpot take a look at this PR https://github.com/symfony/symfony/pull/1295\n\nWe might have one other problem with this PR: as the prototype is no more a child of the collection view, it will not use its theme.\n",
            "As the prototype is no more a child:\n- The prototype will not use the theme from the collection (twig),\n- The 'multipart' is not propagated in the case where the collection is empty but you are allowed to add elements.\n\nThis is some notes for now. I'll investigate more, enter issues (and try to come up with a fix) if needed.\n",
            "@noperator \n- I have proposed a fix for the theme here https://github.com/symfony/symfony/pull/1315\n- you convert text to nodes using `jQuery(text)`\n- _ Additionally the prototype isn't rendered at all, if there exist collection fields already, even though prototype and allow_add are set to true _ can you give an example of that ?\n",
            "1. that should be ok as `prototype_row` renders `field_row`\n2. in this PR, the prototype is not a child node then `form_rest` will not consider it (try `form_row(form.participants.get('prototype'))` to render it - this should be solved by PR 1315\n",
            "@noperator that would be great if you can test this:\n\n```\n git remote add vicb git://github.com/vicb/symfony.git\n git fetch vicb form-proto:form-proto\n git co form-proto\n```\n\nThis will only create a form-proto branch on your computer.\n",
            "There are several options:\n- use the options `'prototype' => false` - you almost had it,\n- define a block `question_row` in a theme (which render the 2 widgets), theme your form and use `{{ form_row(questions) }}` only,\n- you can also do `{% for name, q in qs %} {% if name is sameas '$$name$$' %} ... proto ... {%endif %} {%endfor %}`\n\nI would recommend # 2, hope it will save you $260k !\n",
            "@blauwers collection rendering has been heavily modified since this change. You should try with the latest Release Candidate and submit a proper defect report if the issue still occurs (i.e. Sf version, controller code, template & generated markup).\nThanks.\n",
            "I didn't understand your message when I first read it... that's definitely an issue.\n",
            "I won't be able to test your fix before next Monday.\n\nSome quick thoughts by checking the diffs:\nDo we really need to add the `$renderedBlocks[]` ?\nWhat I was thinking of is to use the `rendered` property alone. This mean checking if all child views have been rendered when you render a view with children (i.e. add some logic in `isRendered()`). The use case could be a File: if you render the nested fields (file, token, ...) you would not want to render the div when calling `form_rest` (A File is rendered as a div with nested fields). \n\nAnyway, I'll take a deeper look next week and give you some more precise feedback.\n",
            "My proposal for fixing the rendering: https://github.com/symfony/symfony/pull/1221\n",
            "You should update the unit tests:\nhttps://github.com/symfony/symfony/blob/master/tests/Symfony/Tests/Component/Form/AbstractLayoutTest.php#L128\n",
            "This is something I had in mind when submitting this [PR](https://github.com/symfony/symfony/pull/1158) yesterday - see the last commit. I think it is valuable.\n\nYou have had your feedback... ;-)\n",
            "Also fixes an issue reported by Eric https://github.com/symfony/symfony/issues/920\n",
            "I don't think this is a proper fix as it would not work for FileType.\n\nThe issue seems to come form the FormType:\n\n```\npublic function buildViewBottomUp(FormView $view, FormInterface $form)\n{\n    $multipart = false;\n\n    foreach ($view as $child) {\n        if ($child->get('multipart')) {\n            $multipart = true;\n            break;\n        }\n    }\n\n    $view->set('multipart', $multipart);\n}\n```\n\nwhere the foreach would [set the view as rendered](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormView.php#L247)\n\nLooking into this...\n",
            "Modifying FormType as follows:\n\n```\n    foreach ($view->getChildren() as $child) {\n        if ($child->get('multipart')) {\n            $multipart = true;\n            break;\n        }\n    }\n```\n\ndo work, I'll update the tests and submit a PR\n",
            "I am done updating the tests, I'll submit a new PR right now\n\nDone in PR 1017\n",
            "Impacts for choice, date, time, repeated and file types:\n- [5 more type extensions get loaded](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L378)\n- Adds a call to `buildView` and `buildViewBottomUp` [when creating a view ](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php#L902) for these types.\n",
            "sync with latest master\n",
            "@lsmith77 strictly speaking aligning the `=>` sign is not part of the CS but that is a convention used all over the symfony core files.\n\nI can split this PR if required but there is really no functional change (other than the fluid interface which is rather small).\n",
            "Any use case using an `ArrayChoiceList` could be a potential use case (`class PaddedChoiceList extends ArrayChoiceList`).\nWhy would this need to have a different interface ?\n",
            "`truncate()` won't help if it is not called, i'll update this PR\n",
            "`truncate()` is now called in the constructor.\n\nThere is a new `max-age-min` option used to delete outdated files (no need to loop over old files each time a TemporaryStorage is instanciated).\n",
            "This PR is all about preventing a file upload attack (details in the ticket).\n\nSo using a periodic task could not help.\n\nCalling `truncate()` in the constructor is the safest way (you have to make sure it is called on each file upload) but you are right this would trigger `truncate()` each time we use the form factory - even if we are not using a file input.\n\nWhat do you think about moving the call to the FixFileUploadListener (before the call to move() for example) ?\n",
            "The only drawback I can see (that made me put this in the constructor) is that you have to think of calling `truncate()` if you provide an other listener implementation.\n",
            "@bschussek an other option would be to add a `add($token, $file)` and `get($token, $filename)` methods.\n\n`add()` would move the file inside the storage and call `removedExpiredFiles()`.\n\nWhich one do you prefer ? \n",
            "@bschussek\n\nI have implemented something: https://github.com/vicb/symfony/tree/storage-api\n\nThe 'name' field is used to persist the original name as it is not used any more (the token is used to retrieve the file)\n\nfeedback ?\n",
            "Pending until a decision is taken on [PR 674](https://github.com/symfony/symfony/pull/674)\n",
            "I have synced this PR because it could improve security wrt file upload attacks.\n\nThe code is now based on the lastest master.\n\nChanges related to PR674 or to a new API for the TemporaryStorage will be submitted as another PR later if this one gets merged. This was required as PR674 is on hold for a while now.\n",
            "@fabpot This is ready to get merged\n",
            "@xaav here we are compring strings and / != \\\n\n@Seldaek I have also tuned this in a pending PR (the one about File & SplFileInfo) using realpath() - both work equally.\n",
            "@Seldaek File objects require an existing file so realpath should be fine here (I haven't fully check this version as lots of tested have been removed in my PR - no need to test \\SplFileInfo methods).\n\nIf the PR in question does not eventually get merged (it includes a lot of other changes) then we should remember about fixing the tests.\n",
            "Shouldn't this be secured with a token ?\n\nWith this implementation it should be possible to move any file (if you have the proper rights & specify the path relative to the upload folder)\n",
            "@beberlei I have proposed a PR which [persists the original name](https://github.com/symfony/symfony/pull/748) among other improvements. It is not up to date as it depends on a decision to be taken whether or not to integrate [this other PR](https://github.com/symfony/symfony/pull/674)\n",
            "BTW and I think that the original basename is now part of the posted data.\n",
            "This is a security reason: you can forge a request and put whatever for the filename (i.e. special or un-supported chars).\n",
            "Try to google  php file upload security \n",
            "I don't care using either  function  or  anonymous function  or  callback .\n\nThe issue with `$closure()` is that there is **no correct way** (at least that I know) to check if $closure is an anonymous function without using `instanceof \\Closure` (=type hinting) which is a bad idea according to php.net.\n\nIMO performance is far from issue here. We are talking about a limited amount of calls where we could same a few micro-seconds. I prefer correct code.\n",
            "@fabpot the main issue here is that ** Anonymous functions are currently implemented using the Closure class. This is an implementation detail and should not be relied upon. ** from php.net\n\nThen I think we should decide if we want to remove all the type hinting (`\\Closure`), tests (`instanceof \\Closure`) ans calls to `__invoke()`.\n\nIf we decide to conform to the php documentation I'll review the code again (and fix your comments).\n",
            "There is probably a good reason for them if they wrote such a sentence in the doc. If this is still valid and the implementation gets changed, we will see a big mess then !\n\nI'll see if I can get more info about this in some mailing list or by contacting some php contributors.\n",
            "This is the reply I got from Dmitry Stogov (One of the author of zend_closure.c):\n\n** It must be safe ** (to use \\Closure).\n\nClosing this PR then.\n",
            "The unit tests _should_ (sorry I am blind here) pass on windows now\n",
            "Ready for me...\n\nNeeds form code review & win testing before getting merge !\n",
            "- `move()` now creates the target directory when it does not exists (instead of throwing an exception);\n- The `UploadedFile` constructor takes an extra `$secure` argument to enable testing on local files\n",
            "many thanks @pborreli \n",
            "There is probably more work needed for the supporting the forms... looking into this\n",
            "Introduction of a new PersistedFile class to represent persisted files.\n\nthis is: `\\SplFileInfo < File < UploadedFile < PersistedFile`\n\nI can describe the change in more details in UPDATE.md if we decide to merge this.\n\n@bschussek can I get your opinion on this PR ?\n",
            "The rationale behind this change is to have a common interface for handling files (`SplFileInfo` is used in the SPL and the Finder component). Not having File extending `\\SplFileInfo` means learning a new interface with subtle differences that could easily be  misleading:  \n\nFile:\n- `getExtension()` returns the extension with a leading '.' (vs without the leading '.')\n- `getName()` returns the base name (vs `getBasename()`)\n- `getPath()` returns the real path (vs `getRealpath()`, `SplFileInfo::getPath()` exists but return the folder name)\n- `getDirectory()` returns the directory (vs `getPath()`, see the previous bullet).\n\nThis could be seen a big change but it is for coherency and ease of use. If we don't merge it now then we will probably never merge this. Is it really something that we want (I don't have the response to this question) ?\n\nOne other file I don't like is how easy it is to bypass the security check by having the last argument of the constructor set to false. A different class could help here (`PersistedFile`) - this can also be implemented without extending `\\SplFileInfo`.\n\nFinally, I am ready to help making any change to ease this PR getting merge or to see this PR closed...\n",
            "@bschussek could you please explain what's wrong with this change. There is a pending PR related to [file upload security](https://github.com/symfony/symfony/pull/748) and I would like that we take a decision on this current PR before rebasing the security one.\n\nMy POV is **pros:** Consistent API - see my previous message, **cons:** BC break\n\nTwo more pros for this PR - they do not depend on extending SplFileInfo though:\n- move() would create the target folder when it does not exists - asked by Fabien in a comment above,\n- persisted files have their own class rather than being differentiate by a Boolean argument.\n\nIs this change to big ?\nWell, the API is very different but:\n- The changes to the client code should be very localized (where it deals with file uploads)\n- If move() was the only method called from UploadedFile then it would work out of the box.\n\nThere is nothing more I want to say on this subject, **let's take a decision quickly (should it be a no go) please.**\n\nThanks !\n",
            "Updated the validator and synced with the latest master -> ready to be merged if needed.\n",
            "Sync'ed\n",
            "Any decision for this PR ?\n",
            "Could a decision be taken for this PR ?\n\nIf this eventually gets rejected should we modify `File::move()` so that the directory gets created when it does not exist ? (see the comment from Fabien on 4/28/11).\n\nI would like to submit some changes to the `TemporaryStorage` that depend on this.\n",
            "see https://github.com/symfony/symfony/pull/1317\n",
            "To me this is more a convetion than anything else as PHP [use  boolean  internally](http://svn.php.net/viewvc/php/php-src/branches/PHP_5_3/Zend/zend_language_scanner.l?revision=307028&view=markup#l1091).\n\n@fabpot should I add  Boolean  to the coding standards to avoid more people submitting this PR ?\n",
            "Cool !\n\nShould the tests and some `catch` be updated as well ?\n",
            "@schmittjoh no doubt the tests are fine. They just do not test your code (what if you have missed a conversion) nor document it. Most of the updates should be converting `@expectedException \\E` to `@expectedException F\\Q\\E`.\n\nThe same goes for `catch` where `F\\Q\\E` should be used in some place and tests could also be used to detect any migration error.\n\nLastly there are probably some phpDoc `@throw` which also need to be updated ?\n",
            "So anybody for updating the tests, catch and PHPDoc block ?\n",
            "I think that at least testing the code is related to this PR.\n\nThe tests pass because F\\Q\\E extends E but will not catch any conversion you could have missed (if this is a problem)\n",
            "to make it clear, I'm also +1 on component exceptions\n",
            "@fabpot I have described some more benefits on the [mailing list](http://groups.google.com/group/symfony-devs/browse_thread/thread/3c8fe3ad61f325f9).\n\nLet's try to be objective:\n\n**Cons:**\n- Overkill ? That's only a few LOC more to resolve dependencies and return a unique name for each warmer. If you need to implement `getPreWarmers()` and/or `getPostWarmers()` you would have needed to tweak the priority before which could be tricky when you have some dependant warmers.\n\n**Pros:**\n- The dependency are now clearly stated (who except @kriswallsmith can tell why the assetic warmer has a priority of 10 - I can because he told me) - commenting the XML would be useless once you start modifying the priorities,\n- Some priorities were hardcoded (or not specified). To be able to tweak the ordrer with the previous scheme, they should be added as a parameter - w/o doing this you could easily end up with circular dependencies,\n- The dependencies are automatically resolved vs. you potentially have to tweak lot of them and \n- You can not break your code by adding a new bundle,\n-  adding new cache warmers is not something we will have to do often  I don't really agree but anyway  not often  means we will do it some times.\n\n**Notes**\n- The twig template cache warmer happened to work because it was registered after the framework bundle - this is fixed in this PR,\n- There were some problem with the assetic warmer I have fixed in [a previous commit](https://github.com/symfony/symfony/commit/1191e3aa666662027a1df66381061ff70149c766) and which I think are really clearer now.\n\nSo that's much more pros than cons (ok I might not be that objective...) but I really think that  overkill  is discutable and should not prevent merging this if it is the only cons.\n",
            "@fabpot using it for the listeners is also a reflexion I had during this dev. This is because I have some experience with wordpress which uses a prioritized filter system to filter the response and headers. When you start installing a few plugin then you have the play with the priorities to find something that is working... but you don't know why.\n\nThe problem here is that the same response filtered by F1 then F2 most if the time does not equal the same response filtered by F2 then F1 (filters are not commutative).\n\nSo you could set a dependency between F1 and F2 but when F3 gets introduced to filter the same response it might stop working. This is beacuse all filters act on the same object (the response in this case).\n\nThen I don't think there is any better solution than priorities for listeners but it is better not to have to rely on it too much. \n\nI don't see the same problem for warmers: each of them produce some independant cache files BUT they might need the output of a previous warmer (_sounds like the definition of dependency to me_)\n\n@kriswallsmith is that an argument ?\n\nWhen should the assetic warmer run ?\n1.  10 \n2.  before the router cache warmer but after the templating cache warmer \n\nYep, 1 is  sufficient  for now but I still think  2  is better for the future and extensibility !\n\nBut if this gets merged and I am wrong (i.e. the current system would have been sufficient) ? The only extra work you have to do is to return an unique name (4 LOC), see my previous message for details.\n\nI don't see this getting merged with you both against this change... that's life ! (_This message is just my way to say that I am a bit disapointed by arguments such as  the only place where we will have that  and  sufficient _)\n",
            "@fabpot should be ok now\n",
            "Done in https://github.com/symfony/symfony/pull/592\n\nI'll update this PR once 592 get merged.\n",
            "I have removed the commits of PR592 which has been merged and rebased on the latest master.\n\nLet me describe the bug in more details:\n- A scoped service is added as a listener\n- While in this scope the listener is triggered (this is mandatory for the defect to occur)\n- You re-enter the same scope (i.e. think Request here)\n- When the event is triggered again, the listener is called in the current scope (which is expected) but also in the previous scope.\n\nThe second commit is an optimized version of the first one (remove expensive calls to add/removeListener when not required).\n",
            "if this extra code is really required then you should add a unit test (at least it is probably not required for [loadHTML](http://www.php.net/manual/en/domdocument.loadhtml.php))\n",
            "Would it be worth implementing an interface ?\n\n```\ninterface XXXX\n{\n    function findAllTemplates();\n}\n```\n",
            "@vicb good idea, very poor implementation, please try again !\n",
            "@lsmith77 could we imagine something like a `FileLocatorInterface` resulting in multiple calls to `addIncludePath` ?\n(not a very good example though)\n",
            "The comments have been updated, thanks.\n",
            "@fabpot may be we should merge this now as it adresses some important issues.\n\nThe assetic & factorization parts could be done later on (I won't have much time to look at this before next week)\n",
            "+1\n\nI think the default should be true for BC and for the reason Fabien mentioned [on the mailing list](http://groups.google.com/group/symfony-devs/browse_thread/thread/a3dcef9e58c64026/c2eb004847ae3387?lnk=gst).\n\nThis also make me think of something: Should there be a `framework:ensure-production-settings` command that would check that this option is true (and that caching is enabled, ...) ?\nMay be this command should trigger an event that can be used by extensions (twig, doctrine, ...) ?  \n",
            "511 seems only about file extensions, are you refering to some other PR ?\n",
            "I think this one is more about **debugging** readable code (original classes) vs agregated classes without comments (compiled classes). That's more than just preventing IDE parsing.\nI would say that 511 and this one are independent.\n",
            "@schmittjoh if you want to set a breakpoint and trace the code, you have to do it in the cached file zith your option.\n\nI agree env should be the most similar as possible that is why having an option could be a good choice (disable caching only when you need to debug / trace the code)\n",
            "Martin,\n\nWhile you are modifying this it would be good to copy phpDoc blocks from the interface to the TemplateReference class - it seems we can not use @inheritDoc in this case.\n\nShould `__toString()` be modified to return the logical name ?\n\nOtherwise, looks good to me.\n",
            "Looks perfect now, thanks.\n",
            "What if xml / php / ... is used ?\nWhat if yml is used but the main config file is named mycnf.yml ?\nThere could even be an (unused) config.yml in both these cases so it can't really help to check if the file exists.\n",
            "rdohms approach is better.\nAn other approach could be to put this in a separate bundle ?\n",
            "@schmittjoh there is no reliable way to know where the config file is located and what its name is (we could only build heuristics) then I don't think modifying some file is a good option.\n",
            "Is it worth building some complex heuristics which will never be perfect ?\nAt some point the user will have to look at the doc & write code anyway.\nMy opinion is that giving some hints & have a good documentation is good enough.\n",
            "Exactly, trying to figure out what happened... (I only did a forced pushed)\n",
            "Didn't help to reopen, can create a new one either `Oops! The symfony:master branch is already up-to-date with vicb:locate_resource`...\n",
            " Thanks for getting in touch with us, we'll get back to you shortly. \nThe support is now informed about this issue.\n",
            "One mistake I have done is to (force) push my `locate_template` branch before pushing to the master. But this used to work fine.\n",
            "To the github support: I am sorry **this is not a github issue**\nThis seems more like a git issue as my local `locate_template` branch is actually skrewed up !\nLet's hope my daily backup is fine now...\n",
            "I have been able to fix this:\n\n```\ngit reflog\ngit checkout <commit as seen on reflog>\ngit checkout -b <branch name>\n```\n\nI'll push my branch again in some time if the support need to inspect things before.\n",
            "I will open a new PR\n",
            "new PR: https://github.com/symfony/symfony/pull/528\n",
            "The last commit avoid `%%%%f@%%%%l` when specifying a custom file_link_formaty (use `%%f@%%l`)\n",
            "@stof thanks for catching this.\n\nThis is actually what I first did before getting confused with the debugger thing.\n\n(The PR description and code have both been updated, the comment from stof is related to the former version)\n",
            "Updated for Bundle names long again & rebased.\n\nThe pull request comment remains valid, the only change being the locateResource calls:\nbefore:\n`locateResource('@Parent/Resources/res.res', '/path/to/app/Resources')`\n\nnow:\n`locateResource('@ParentBundle/Resources/res.res', '/path/to/app/Resources')`\n",
            "Double PR (a problem with my mouse & ubuntu).\n",
            "### Description\n\nThis PR improves the `Kernel::locateResource($name, $dir, $first)` method to return the right resource in a single call to `locateResource`\n- It returns the resource from the Bundle when it is not overriden in the `$dir` folder (or not `$dir` is given),\n- It returns the resource from the `$dir` folder when it exists there.\n\n### Documentation\n- There is [a thread](http://groups.google.com/group/symfony-devs/browse_thread/thread/d3f8d71f4abea3e7) on the mailing list,\n- The unit tests,\n- Any question ?\n\n### Differences from the previous `locateResource` behavior\n- The bundle folder inside the custom resource folder should now be named `<BundleName>Bundle` (vs `<BundleName>`)\n- Custom resources must now be located in a `$dir/<BundleName>Bundle/Resources` folder (vs `$dir/<BundleName>/`)\n- Inheritance is now handled for the custom resource folder (`$dir`): `locateResource('@Parent/...', $dir)` can return a file in the `$dir/ChildBundle/Resources` folder \n\n### Downside\n\nThe fact that custom resources are now located in `$dir/<BundleName>Bundle/Resources` (vs `$dir/<BundleName>/`) could be seen as a downside.\n\nHowever I don't see this as a downside:\n- The guideline should be: only resources in `<BundleName>Bundle/Resources` can be overridden by files in `$dir/<BundleName>Bundle/Resources` - the naming is consistent,\n- I didn't like the fact the 'Resources' folder was stripped from the path in the previous implementation. You would have needed something like `locateResource('@Bundle/Resources/Resources/...', $dir)` to look for a resource in `$dir/Bundle/Resources` which seems counter-intuitive\n\n### Left to be done (if the PR is accepted)\n- Rebase\n- Describe this change in the migration document (UPDATE.md)\n- Make use of the new implementation where required (i.e. template locating)\n",
            "Thinking a bit more about, I am wondering if stripping the 'Resources' part of the path (for custom resources) was not a good idea that should have been kept.\n\nBefore, custom resourcers where located in `$dir/<BundleName>/`\nWith the proposed implementation they are located in `$dir/<BundleName>Bundle/Resources`\n\nHowever `$dir` is already `<app>/Resources` (by convention) so I would tend to prefer the former behavior (I don't have a strong opinion on that). Any thoughts ? \n",
            "Things need to be clarified in a new pull request\n",
            "The twig warmer was relying on the template list built by the FrameworkBundle template cache warmer -> 2 problems:\n- This references all templates vs twig ones,\n- The list is signtaure => absolute path where twig expect a TemplateReference or a template logical name.\n\nFixed by:\n- parsing the templates directories (bundles + global) rather than using the cached template.php,\n- convert filenames to TemplateReference,\n- make twig load those (only when the engine is 'twig')\n",
            "The last commit is the implementation of the register as proposed by Johannes.\n",
            "I find the Sf version useful (from my sf1 experience).\nIf you care about the timing you probably know about your xdebug and APC config - otherwise you can quickly check in the config panel.\nThe timer also varies from request to request. The PHP config only changes when you modify your server config which might not happen that often (we all know that server config can cause serious troubles).\n",
            "Great !\n\nThe link to the gist is the first bullet under  Some reference  in the PR comment. It will need some rework before being integrating in the cookbook but that's definitely somrthing I can do.\n",
            "I have opened a [new PR](https://github.com/symfony/symfony/pull/313) with rebased code.\n",
            "BTW, I think that [`CachedRouter` ](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Routing/CachedRouter.php) is used in prod.\n",
            "Fabien, no pb I can remove the concept of status but could you please give me some more details about the rationale of this ? (A few bundles - Doctrine, DoctrineMongo - already uses some kind of status internally, having this supported at a global level would help making things consistent across all the tb items).\n\nFor the underscore pb, are you using including the [latest commit #ddb935a](https://github.com/vicb/symfony/commit/ddb935a4f05d17aa61d36469bf50cea07a03d927) ?\n",
            "This is my point: [DoctrineBundle](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/DoctrineBundle/Resources/views/Collector/db.html.twig#L6) & [DoctrineMongoDBBundle](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/DoctrineMongoDBBundle/Resources/views/Collector/mongodb.html.twig#L6) already have visual changes (the font color in those cases)\n\nIMO that's not a good idea to have each collector view defining their own visual changes, things should be consistent.\n\nUnless we should remove the visual changes in there altogether ?\n",
            "For reference:\n- [Error feedback](http://postimage.org/image/24xw3mm84/)\n- [Warning feedback](http://postimage.org/image/24yfy2s5g/)\n",
            "Ok, I'll revert / remove the status & visual feedback.\n\nBut I am still curious to know the rationale behind this ?\n",
            "[8128300](https://github.com/vicb/symfony/commit/8128300baa4c753c525567cdc244e041f2a4acb5) reverts status & visual feeback as requested.\n",
            "This has just been rebased to take the new design into account.\n",
            "Having a count of  0  might be misleading when there are no error (made me think there were no log at all).\nWould displaying the counter only on errors be a good compromise ?\n",
            "here you go\n",
            "If this PR eventually ends up in the master repo, the next step is [here](https://github.com/vicb/symfony/compare/vicb:config_cmp...vicb:config_refactor).\n\nNotes:\n- The next step is not finished yet, \n- The commits should really be squashed in this newer branch but I have left them for now in order to ease the review.\n",
            "I am quite happy with the [current state of the  next step .](https://github.com/vicb/symfony/compare/vicb:config_cmp...vicb:config_refactor)\n\nI have asked Johannes to review my code when he has time for that.\n\nNote: The commits in the config_refactor branch must really be squashed after review.\n",
            "@ReactiveRaven As stated in the source ticket, this fix needs to be done in 2.1 only as 2.2 has been modified and do not have this issue. When you send a PR, you should then select the 2.1 as the target branch - master has been selected while you submitted this PR.\n\nThere is no way to change this afterwads, ie you should close this PR and open a new one. That's a lot to understand at first.\n\nIt could be great to add a unit test to make sure this works as expected. There are plenty of exs to use a tempate in the DI folder.\n",
            "Looks good.\nPlease use the standard pr header (found on symfony.com). Thanks.\n\n Diego Agull\u00f3  notifications@github.com wrote:\n\n> Ping @vicb \n> \n> Did my last couple commits solve the issue you pointed out?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7276#issuecomment-14812648\n",
            "Looks good.\nPlease use the standard pr header (found on symfony.com). Thanks.\n\n Diego Agull\u00f3  notifications@github.com wrote:\n\n> Ping @vicb \n> \n> Did my last couple commits solve the issue you pointed out?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7276#issuecomment-14812648\n",
            "Or maybe you are looking for a prototyped array node ? (because you're using numeric keys and each of your row seem to use a common structure = prototype)\n",
            "Could you explain why you would need an array node - which I can't guess from your example ?\n",
            "What are 0 and 5 ? I mean would it work the same with 2 and 4 ?\n\n_(ArrayNode has been designed to work with named children)_\n",
            "My question is if 0 or 5 have a  special  meaning, would your config be equivalent to \n\n``` php\n<?php\n$config = array(\n    2 => array(\n        'name' => 'something',\n    ),\n    4 => array(\n        3 => 'this won\\'t work too',\n        'new_key' => 'some other value',\n    ),\n    'string_key' => 'just value',\n);\n```\n\nI guess that's a not considering how you access the parameters in your last comment.\n\nAnyway I think you can submit a PR with `if (0 !== strlen($name))` (and a unit test for the  0  case)\n",
            "Does this really belong to the core ?\n\nWould using the [JMSSerializerBundle](https://github.com/schmittjoh/serializer/blob/master/src/JMS/Serializer/Handler/FormErrorHandler.php) solve your issue ?\n",
            "@fabpot my point is that this would probably be used in the context of a ws (web service) and then you probably want to include jms or fosrestbundle.\n\nAnyway I am not opposed to the change.\n\nFabien Potencier notifications@github.com wrote:\n\n> @vicb: we already have `Form::getErrorsAsString()`.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/7205#issuecomment-14218884\n",
            "It would probably be a good idea, yes.\n\nFabien Potencier notifications@github.com wrote:\n\n> As this is about validation, it should be implemented as a Validator,\n> no?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/7020#issuecomment-14236528\n",
            "Thinking more about this, I think it was a mistake to make Twig parse the template names. There is now two separate paths (Twig & the Framework Bundle) to parse templates and this will lead to issues (ie this one).\n\nTo me the best way to solve this problem would be to implement the @ notation parsing in the Template Parser and delegate **all** parsing to this (ie no more parsing in Twig). The work has been started in https://github.com/symfony/symfony/pull/6918.\n",
            "@stof yes it can support them, which is the meaning of my first message.\n\nThe meaning of my second message is that in spite of the fact that Twig NS could be should in the context of Sf, they should not because they do not have the same meaning than Sf template names. We could use array to emulate this feature but still we would have 2 paths (template parser & twig) to do the same thing. Which will lead to issues in the future.\n\nIf someone extends the template name parser, it would work for some templates but not for others. Which is **bad !**\n",
            "I don't get what you mean here ? You want to have 2 different notations ? (ie `@` not supported in controllers)\n",
            "??? _(Maybe it's becoming too late for me today)_ \n\nI mean `@Template( @// )` annotation (/yml /xml) and `return $this->render( @// )`\n",
            "I am afraid you're wrong which is why we had trouble to understand ourselves, see the linked PR.\n",
            "@fabpot Should this go in 2.2 (you considered this a fix last time we talked about that). In such a case, I'll rush to finish it.\n",
            "Please no logic in the command itself, then we can use it in a profiler or in a command.\n",
            "_would be nice to also log the data if such a tempating profiler is created. We should pay special attention to entities managed by Doctrine, with a set of handlers (ie serializer) ?_\n",
            "What about a more generic prototype-option ?\n",
            "Are nesting or user defined options some uc ? (note to myself: merge)\n",
            "I would prefer that this uses the yet to be defined CacheComponent (as @lsmith77 mention in a related PR).\n\nIf this PR should be integrated as an interim solution - which I don't have the power to decide, you should clean the code according to the CS.\n",
            "If you need more info, they are at http://symfony.com/doc/current/contributing/index.html > CS / CC\n",
            "Don't know if I am  you  but I think a command could be great but the command should only makes use of a service (ie no intelligence in your command). this allows some other code to call your service.\n",
            "I mean a sf command\n",
            "I would prefer that this uses the yet to be defined CacheComponent (as @lsmith77 mention in a related PR).\n\nIf this PR should be integrated as an interim solution - which I don't have the power to decide, you should clean the code according to the CS.\n",
            "If you need more info, they are at http://symfony.com/doc/current/contributing/index.html > CS / CC\n",
            "Don't know if I am  you  but I think a command could be great but the command should only makes use of a service (ie no intelligence in your command). this allows some other code to call your service.\n",
            "I mean a sf command\n",
            "@kriswallsmith your proposal does not specify how you could dynamically add an handler (which should also be configurable). A good example of this is the security bundle and the config factories.\n",
            "> Only core renderers would be configurable in the sub_request block.\n\nWhy should we limit to only core renderers ? You might also want to override some of them with handlers supporting more config options. It might be overkill in such a case but that is something to keep in mind when crafting a generic solution.\n",
            "@mvrhov good catch! This could indeed slow the server pretty badly _(I was not aware of the problem until I read a forum post explaining why [Android sometimes lags](http://forum.xda-developers.com/showthread.php?t=1987032) - same root cause)_\n",
            "> Backwards compatibility break: no\n\nReally ?\n",
            "@bschussek I have created a 2.3 milestone, you can set it in the PR header (which I've done for this one).\n",
            "@mvrhov good catch! This could indeed slow the server pretty badly _(I was not aware of the problem until I read a forum post explaining why [Android sometimes lags](http://forum.xda-developers.com/showthread.php?t=1987032) - same root cause)_\n",
            "> Backwards compatibility break: no\n\nReally ?\n",
            "@bschussek I have created a 2.3 milestone, you can set it in the PR header (which I've done for this one).\n",
            "@stof are you working on this ? any ETA ? \n",
            "@stof Seems to be a lot better by disabling the cache ! Thanks for the hint.\n",
            "@bschussek what do you think about reverting the linked commit ?\n@bschussek @stof @vicb please update this issue when working on the issue. /cc @fabpot\n",
            "That's about what stof Sa\u00efd.\n\n----- Reply message -----\nDe :  Sebastiaan Stok  notifications@github.com\nPour\u00a0:  symfony/symfony  symfony@noreply.github.com\nCc :  Victor Berchet  victor@suumit.com\nObjet : [symfony] [Form] Caching resolved $options is dangerous (#6456)\nDate : sam., d\u00e9c. 22, 2012 11:14\nAn easy fix would be the include parameters in the cache key as they are most likely to change.\n\nAt least it would fix this problem.\n\n&mdash;\n\nReply to this email directly or view it on GitHub.\n",
            "@stof suggested a better quick fix (reverting) but the real fix should also be quick if anybody has time these days.\n",
            "Good start, I would also use other variables mentionned by stof and I would not modify param values.\n",
            "@fabpot it would be great to open a new issue while reverting so that the optimization don't get lost.\n",
            "@fabpot what about closing this issue & create and enhancement  request ?\n",
            "> thanks\n\nDo you expect me to do this ?\n",
            "If @fabpot reverted it as indicated in a previous comment, the easy fix its to  update sf.\n",
            "There's one thing that look wrong to me: the tests, but that's probably a point where @drak will never agree with me.\n\nBut please read  Don't mock third-party libraries  @ [Mock Objects](http://www.mockobjects.com/2007/04/test-smell-everything-is-mocked.html)\n",
            "@fabpot If you agree with this, there are probably of couple of PRs that should also be reverted (PRs going in the exact opposite direction) /cc @drak \n",
            "@drak if your code is `store()` and you tests is `make sure store() has been called` you won't verify that it works in real life (ie you may need to call `init()` before store).\n\n> it is the established wisdom and best practice.\n\nReferences ? Look at the link I have given in my first comment.\n",
            "Actually I am -1 on merging this until a solution has been implemented for a lock for non native storages. Before it exists merging this means merging one more bug in sf (I think I created an issue some time ago, don't have the reference now)\n\nhacfi notifications@github.com wrote:\n\n> Would be great to have it in the next release!\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/6452#issuecomment-14339019\n",
            "For this PR, tests need to be updated to use Couchbase and not a mock of it.\n\nBut before merging any new storage, the design flaw should be fixed, see #4976. It is not directly related to your PR but I don't really see why we would add a new implementation when the foundation is flawed.\n\nThis being said, it would be great if someone start to work on this issue, would you volunteer ?\n",
            "@fabpot sorry for this messy PR, but I wanted to have some feedback before polishing the code. \nWould it be accepted ?\n",
            "You are probably right. It would also avoid a BC break (warmers position in the constructor). I'll update after I have time to think about it.\n",
            "@fabpot what about `CacheWarmerDumper` ?\n",
            "@schmittjoh would you please have a look why this fails when the cache folder is empty ?\n\n```\nFatal error: Cannot redeclare class EnhancedProxy_72114c0f8683bcc2a66ceccb136abe5a78f8577e\\__CG__\\Acme\\DemoBundle\\Controller\\SecuredController in /var/www/sf2.2/app/cache/dev__new__/jms_diextra/proxies/Acme-DemoBundle-Controller-SecuredController.php on line 28\n```\n",
            "Thanks, think I got it, need to test... magic values !!!\n\nOn 12/17/2012 04:43 PM, Johannes wrote:\n\n> It's not something that I can debug soon, but as a pointer it is likely\n> something that needs to be updated in the ControllerWarmer.\n> \n> On Mon, Dec 17, 2012 at 11:31 AM, Victor Berchet\n> notifications@github.comwrote:\n> \n> > @schmittjoh https://github.com/schmittjoh would you please have a \n> > look\n> > why this fails when the cache folder is empty ?\n> > \n> > Fatal error: Cannot redeclare class \n> > EnhancedProxy_72114c0f8683bcc2a66ceccb136abe5a78f8577e__CG__\\Acme\\DemoBundle\\Controller\\SecuredController \n> > in \n> > /var/www/sf2.2/app/cache/dev__new__/jms_diextra/proxies/Acme-DemoBundle-Controller-SecuredController.php \n> > on line 28\n> > \n> > \u2014\n> > Reply to this email directly or view it on \n> > GitHubhttps://github.com/symfony/symfony/pull/6223#issuecomment-11436754.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6223#issuecomment-11446619.\n",
            "BC PR pending.\n\nOn 12/17/2012 04:43 PM, Johannes wrote:\n\n> It's not something that I can debug soon, but as a pointer it is likely\n> something that needs to be updated in the ControllerWarmer.\n> \n> On Mon, Dec 17, 2012 at 11:31 AM, Victor Berchet\n> notifications@github.comwrote:\n> \n> > @schmittjoh https://github.com/schmittjoh would you please have a \n> > look\n> > why this fails when the cache folder is empty ?\n> > \n> > Fatal error: Cannot redeclare class \n> > EnhancedProxy_72114c0f8683bcc2a66ceccb136abe5a78f8577e__CG__\\Acme\\DemoBundle\\Controller\\SecuredController \n> > in \n> > /var/www/sf2.2/app/cache/dev__new__/jms_diextra/proxies/Acme-DemoBundle-Controller-SecuredController.php \n> > on line 28\n> > \n> > \u2014\n> > Reply to this email directly or view it on \n> > GitHubhttps://github.com/symfony/symfony/pull/6223#issuecomment-11436754.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6223#issuecomment-11446619.\n",
            "@fabpot this is ready to be merged @schmittjoh has merged the PR to the DIXtra\n",
            "> So, you fixed Johannes bundle\n\nI prefer to think that I have fixed the usage of magic values.\n\nMay be the PR should not be squashed at it contains different things.\n",
            "It would probably have been smarter to merge this PR before #7360 but it's too late and we have introduced yet a new bug (https://github.com/schmittjoh/JMSDiExtraBundle/issues/96).\n\n@jfsimon you will find the root cause of the bug you have introduced by looking at the comment of this PR (I did introduce the same bug at the start of the PR before making a fix on @schmittjoh repo).\n\nAnyway I don't have a lot of time to work on this now and the work should happen after @jfsimon has fixed his PR. @jfsimon could you please take care of syncing this PR once you're done - ping me if you need help.\n\n_(This bug shows one more reason why magic values are evil for the ones who where not already convinced)_\n\n/cc @swis @craue\n",
            "here I am... soon \n",
            "I won't have time to look into this before the end of this week.\n\nThis is a bit tricky as the root cause of the issue has not been really identified (according to @jfsimon himself). I am talking about the fix done in #7360, not the  new  issue.\n\nThen we have two options:\n- revert #7360 and try to better analyze what the issue was (ie reproduce and come with a correct and tested fix). This could lead to a better code but some people might see some defects before the fix is found & deployed.\n- modify the JMSBundle to fix the new issue (the one that bugs people now). If the fix in #7360 is not the right one (hard to tell without a proper analyze) then the issue might arise in the future.\n\n@fabpot what do you think ?\n\nThe current issue is not related to this PR and discussions should better switch to #7505 from now.\n",
            "@fabpot sorry for this messy PR, but I wanted to have some feedback before polishing the code. \nWould it be accepted ?\n",
            "You are probably right. It would also avoid a BC break (warmers position in the constructor). I'll update after I have time to think about it.\n",
            "@fabpot what about `CacheWarmerDumper` ?\n",
            "@schmittjoh would you please have a look why this fails when the cache folder is empty ?\n\n```\nFatal error: Cannot redeclare class EnhancedProxy_72114c0f8683bcc2a66ceccb136abe5a78f8577e\\__CG__\\Acme\\DemoBundle\\Controller\\SecuredController in /var/www/sf2.2/app/cache/dev__new__/jms_diextra/proxies/Acme-DemoBundle-Controller-SecuredController.php on line 28\n```\n",
            "Thanks, think I got it, need to test... magic values !!!\n\nOn 12/17/2012 04:43 PM, Johannes wrote:\n\n> It's not something that I can debug soon, but as a pointer it is likely\n> something that needs to be updated in the ControllerWarmer.\n> \n> On Mon, Dec 17, 2012 at 11:31 AM, Victor Berchet\n> notifications@github.comwrote:\n> \n> > @schmittjoh https://github.com/schmittjoh would you please have a \n> > look\n> > why this fails when the cache folder is empty ?\n> > \n> > Fatal error: Cannot redeclare class \n> > EnhancedProxy_72114c0f8683bcc2a66ceccb136abe5a78f8577e__CG__\\Acme\\DemoBundle\\Controller\\SecuredController \n> > in \n> > /var/www/sf2.2/app/cache/dev__new__/jms_diextra/proxies/Acme-DemoBundle-Controller-SecuredController.php \n> > on line 28\n> > \n> > \u2014\n> > Reply to this email directly or view it on \n> > GitHubhttps://github.com/symfony/symfony/pull/6223#issuecomment-11436754.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6223#issuecomment-11446619.\n",
            "BC PR pending.\n\nOn 12/17/2012 04:43 PM, Johannes wrote:\n\n> It's not something that I can debug soon, but as a pointer it is likely\n> something that needs to be updated in the ControllerWarmer.\n> \n> On Mon, Dec 17, 2012 at 11:31 AM, Victor Berchet\n> notifications@github.comwrote:\n> \n> > @schmittjoh https://github.com/schmittjoh would you please have a \n> > look\n> > why this fails when the cache folder is empty ?\n> > \n> > Fatal error: Cannot redeclare class \n> > EnhancedProxy_72114c0f8683bcc2a66ceccb136abe5a78f8577e__CG__\\Acme\\DemoBundle\\Controller\\SecuredController \n> > in \n> > /var/www/sf2.2/app/cache/dev__new__/jms_diextra/proxies/Acme-DemoBundle-Controller-SecuredController.php \n> > on line 28\n> > \n> > \u2014\n> > Reply to this email directly or view it on \n> > GitHubhttps://github.com/symfony/symfony/pull/6223#issuecomment-11436754.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6223#issuecomment-11446619.\n",
            "@fabpot this is ready to be merged @schmittjoh has merged the PR to the DIXtra\n",
            "> So, you fixed Johannes bundle\n\nI prefer to think that I have fixed the usage of magic values.\n\nMay be the PR should not be squashed at it contains different things.\n",
            "It would probably have been smarter to merge this PR before #7360 but it's too late and we have introduced yet a new bug (https://github.com/schmittjoh/JMSDiExtraBundle/issues/96).\n\n@jfsimon you will find the root cause of the bug you have introduced by looking at the comment of this PR (I did introduce the same bug at the start of the PR before making a fix on @schmittjoh repo).\n\nAnyway I don't have a lot of time to work on this now and the work should happen after @jfsimon has fixed his PR. @jfsimon could you please take care of syncing this PR once you're done - ping me if you need help.\n\n_(This bug shows one more reason why magic values are evil for the ones who where not already convinced)_\n\n/cc @swis @craue\n",
            "here I am... soon \n",
            "I won't have time to look into this before the end of this week.\n\nThis is a bit tricky as the root cause of the issue has not been really identified (according to @jfsimon himself). I am talking about the fix done in #7360, not the  new  issue.\n\nThen we have two options:\n- revert #7360 and try to better analyze what the issue was (ie reproduce and come with a correct and tested fix). This could lead to a better code but some people might see some defects before the fix is found & deployed.\n- modify the JMSBundle to fix the new issue (the one that bugs people now). If the fix in #7360 is not the right one (hard to tell without a proper analyze) then the issue might arise in the future.\n\n@fabpot what do you think ?\n\nThe current issue is not related to this PR and discussions should better switch to #7505 from now.\n",
            "@lsmith77 :+1: for the idea (didn't check the imp). A few things I would like to see adressed (not sure if they are already part of this PR):\n- Clear the outdated cache items,\n- Clear by path only (ie You should not have to specify all the parameters).\n",
            "I think I need to clarify the following:\n\n> Clear by path only (ie You should not have to specify all the parameters)\n\nWhen you render a fragment, the parameters are passed via the query string. `_internal/secure/show/name?name=lsmith`, I really don't want to call clear cache for every user in my db, I just want to be able to purge `_internal/secure/show/name`.\n\n/cc @lsmith77 @kbond\n\nref: https://twitter.com/zenstruck/status/277028556985470976\n",
            "@lsmith77 we should keep in mind that HttpCache is mainly for dev purpose. Please don't come up with a php-varnish.\n",
            "@lsmith77 @kbond I can understand your POV. It would also mean that this PR is premature and the HttpCache refactoring has to be done first, correct ?\n",
            "@lsmith77 :+1: for the idea (didn't check the imp). A few things I would like to see adressed (not sure if they are already part of this PR):\n- Clear the outdated cache items,\n- Clear by path only (ie You should not have to specify all the parameters).\n",
            "I think I need to clarify the following:\n\n> Clear by path only (ie You should not have to specify all the parameters)\n\nWhen you render a fragment, the parameters are passed via the query string. `_internal/secure/show/name?name=lsmith`, I really don't want to call clear cache for every user in my db, I just want to be able to purge `_internal/secure/show/name`.\n\n/cc @lsmith77 @kbond\n\nref: https://twitter.com/zenstruck/status/277028556985470976\n",
            "@lsmith77 we should keep in mind that HttpCache is mainly for dev purpose. Please don't come up with a php-varnish.\n",
            "@lsmith77 @kbond I can understand your POV. It would also mean that this PR is premature and the HttpCache refactoring has to be done first, correct ?\n",
            "@bschussek Have you reviewed the code ? _It used to work the other way around (ie walk up the parents to find the  theme)_\n",
            "Should be a public method of the tc\n\n----- Reply message -----\nDe :  Miha Vrhovnik  notifications@github.com\nPour\u00a0:  symfony/symfony  symfony@noreply.github.com\nCc :  Victor Berchet  victor@suumit.com\nObjet : [symfony] form_theme now sets the theme to all children of the specified form (#6025)\nDate : mar., d\u00e9c. 11, 2012 21:15\n@fabpot gladly, but I don't know how to in this case.. the AbstractDivLayoutTest class has annotations like @ dataProvider themeInheritanceProvider, but I cannot find this class.\n\n&mdash;\n\nReply to this email directly or view it on GitHub.\n",
            "https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Tests/Extension/FormExtensionDivLayoutTest.php\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Tests/Templating/Helper/FormHelperDivLayoutTest.php\n",
            "yep, please forget what I said !\nOn 12/13/2012 05:23 PM, Miha Vrhovnik wrote:\n\n> @vicb https://github.com/vicb The subform on the screenshot is added \n> inside PRE_SET_DATA event :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6025#issuecomment-11340934.\n",
            "@mvrhov from what you say (sorry I haven't checked your code neither I am very familiar with the  new  rendering code) this looks like a bad idea to me. If there is a problem with the current theme inheritance, it should be patched but we should not introduce a new mechanism to hide a  problem  (if it is one).\n",
            "@bschussek Have you reviewed the code ? _It used to work the other way around (ie walk up the parents to find the  theme)_\n",
            "Should be a public method of the tc\n\n----- Reply message -----\nDe :  Miha Vrhovnik  notifications@github.com\nPour\u00a0:  symfony/symfony  symfony@noreply.github.com\nCc :  Victor Berchet  victor@suumit.com\nObjet : [symfony] form_theme now sets the theme to all children of the specified form (#6025)\nDate : mar., d\u00e9c. 11, 2012 21:15\n@fabpot gladly, but I don't know how to in this case.. the AbstractDivLayoutTest class has annotations like @ dataProvider themeInheritanceProvider, but I cannot find this class.\n\n&mdash;\n\nReply to this email directly or view it on GitHub.\n",
            "https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Tests/Extension/FormExtensionDivLayoutTest.php\nhttps://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Tests/Templating/Helper/FormHelperDivLayoutTest.php\n",
            "yep, please forget what I said !\nOn 12/13/2012 05:23 PM, Miha Vrhovnik wrote:\n\n> @vicb https://github.com/vicb The subform on the screenshot is added \n> inside PRE_SET_DATA event :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6025#issuecomment-11340934.\n",
            "@mvrhov from what you say (sorry I haven't checked your code neither I am very familiar with the  new  rendering code) this looks like a bad idea to me. If there is a problem with the current theme inheritance, it should be patched but we should not introduce a new mechanism to hide a  problem  (if it is one).\n",
            "But then the session data might be changed during the lifetime of a request (by an other concurrent request). I don't think this is a desirable behavior.\n",
            "Fixing this probably means breaking a frozen API (the routing component)... we'll see !\n",
            "The panel is still wrong when redirecting because of a missing '/' (see #3296).\n\n@fabpot, could you please re-open (I can't) ?\n",
            "no news yet & low priority atm\n",
            "Support for [query parameters](https://github.com/FriendsOfSymfony/FOSRestBundle/pull/185) ?\n",
            "fixed in https://github.com/canni/symfony/commit/cd0235fbeb4892dd28d484809f3054913f5b87ce.\n",
            "The linked commit has not been merged\n",
            "thanks @canni \n",
            "Closing this as it is unclear and no feedback has been provided.\n",
            "@jstout24 could this be solved using form theming only / applying a class ?\n",
            "@schmittjoh I think we are talking about the fact a non-existent protected URL return a 404 while they would have returned a 403 before (the same as for an existant URL).\n\nCould you work on a fix or provide some hints on what caused the regression and how to solve it ? Thanks.\n",
            "@Koc currently we load from (highest priority first):\n1. `app/Resources/translations`\n2. `app/Resources/<bundle>/translations`\n3. `bundle\\Resources\\translations`\n\nTo me 1 and 2 are equivalent (i.e. you should use one or the other but no make use of the different priorities they have - `app` is your code).\n\nSo the remaining question is where to look for other transaltions: before or after 3 (or should it be configurable) ?\n",
            "@Koc could you provide more details on your use case ? Wouldn't your theme be a bundle ?\n",
            "Ok, false positive, `guessExtension` is the safe method to use in such a case.\n",
            "no. Let's schedule it for 2.2.\n",
            "thanks @Ocramius for your reactivity & the very nice new feature !\n",
            "The extension of the original file can be forged (ie  .php ) and should never be used.\n",
            "Could you try reverting #7360 to see if it helps ?\n",
            "I was more used to the  process isolation  term than  insulation  but the latter seems quite frequent indeed.\n\nI would be interested to get the POV of a native speaker on the difference.\n",
            "see #6918, #6919\n",
            "duplicate of #7357\n",
            "an home made script\n",
            ":+1:\n\nFabien Potencier notifications@github.com wrote:\n\n> Done. This is explained here:\n> https://github.com/symfony/symfony-docs/pull/2337/files\n> \n> And you see the first merged PR that uses Git notes here:\n> https://github.com/symfony/symfony/commit/883bf909b151935faf7d8c0549e6540af88e364f\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/7387#issuecomment-15306961\n",
            "`form_rest` only render the rows for the children forms (the row of the main form is not rendered).\n\nWhy don't you use `form_widget(form)` in your example ?\n\nedit: see [the template](https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig) for details\n",
            "Children will be rendered with theming. What happen in your case is that you have applied the theme to the title row only (ie the parent form =  titlefragment ).\n\nI am closing this then, feel free to ask more questions if this is still unclear.\n",
            "This is indeed the expected behavior as @mpdude mention.\n\nRequests which result in accessing the  Symfony session  are serialized because of the PHP session lock.\n\n_You should note however that there is a bug in Symfony for non native storage which do not use a lock, see https://github.com/symfony/symfony/issues/4976._\n",
            "@fabpot seems like 2.1 as a deps issue if you look at travis logs\n",
            "Oh and as a bug fix this PR should be based on the earliest branch where the defect appears (2.0, 2.1 or 2.2). You will also need to close this PR and resend another one targeting the correct base branch. Thanks.\n",
            "> a big :+1:  for this one as this will also greatly simply bounding the form from query parameters.\n\nYep but there is also a big implication on security (see what happened to Ruby / GH a few months ago)\n",
            "You are right, I was wrong.\n\nChristophe Coevoet notifications@github.com wrote:\n\n> @vicb This PR does not introduce a security issue for the extra params\n> AFAIK. These extra params won't be bound to the underlying object. They\n> will simply be ignored silently instead of marking the form as invalid.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7229#issuecomment-14301290\n",
            "@craue the enableable configs have a higher level of integration in 2.2 which probably explains why it works better there.\n",
            "and actually\n\n```\nframework:\n  csrf_protection: false\n```\n\nwill unset the node\n",
            "The bug is [in the extension](https://github.com/symfony/symfony/blob/2.1/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php#L158) as the csrf config is loaded whether csrf is enabled or not. It should not be.\n\nSetting csrf_protection to plain false will unset the node and then no file is loaded (but the parameter is not set - which should IMO also be changed).\n",
            "yes it should.\n",
            "Thanks, you should be able to find all the required details above. You can ping me when you submit the PR if you need a code review.\n",
            "Sounds like a good addition to me.\n\nOne question: should this be added as an option (defined in the validator extension) or as a constraint (defined in the validator ext) or both ?\n",
            "Could you try to find the root cause (ie commi) using `git bisect` ? Thanks.\n",
            "@Jack12816 unless you feel the need to have this many commits, you can squash them into one (or a few) commit:\n- git rebase -i master (check the doc)\n- git push repoAlias finder-phar-archive -f (force push as you rewrite history)\n\nMake sure the commit message describes the changes accurately. Thanks.\n\nI have started to work on a PR, will send before eo Thursday. \n",
            "The description is perfect, I was actually speaking if the title only but you did a great job for the full description.\n\nWe do seldomly use a full description as Fabien include all the comments for the PR in the commit message. So you have done some duplicate job this time but you will know for the next time.\n\nThere is one last thing I forgot to mention and I am really sorry for that is that bug should be fixed where they appeared, ie on the 2.2 branch for this specific one - it will later get merged automatically in all later branches. This means that you will have to rebase your commit and open a new PR again. Ping me if you need help with git.\n\nThe first contributions are usually a bit hard because you have to get a lot of things...\n",
            "@fabpot is it true for all the PR (provided master in sync with 2.2 for the modified files) ?\n",
            "What's the name of your script,  git   ? :) \n",
            "@Jack12816 For some reason I can not send a PR to your repo but you can cherry pick my commit @ https://github.com/vicb/symfony/commit/48ec44fb9fc110147a6cf11ac234019d61a5653f (or at least the part you like).\n",
            ":+1:\n",
            "@jfsimon could you explicit your concerns ? I don't think this PR makes the code a lot more complex.\n\nFeel free to amend this PR with a better solution, I think @Jack12816 would merge your updates.\n",
            "@jfsimon Stop me if I am wrong by I see 2 different parts in your comment:\n\n**about this PR**\n\nMainly the cache system. I have no problem with that and it is something widely use in Symfony+ (TemplateFinder, Twig, you name it)\n\n**about the architecture**\n\nThings could probably be improved. The usage should remain simple and BC.\n\nI am unsure if using the DIC is a good option at least there should be no hard dependency for the component. Devs will probably not update their legacy code to use the DIC for no added benefits.\n\nAnyway this part is out of the scope of this PR. You should open a new issue / PR \n\n@fabpot I think this can be merged now as the refactoring will not happen overnight.\n",
            "Travis updated\n",
            "changelog ?\n",
            "@dlsniper what do you mean excatly. The DIC is used to prevent instatiating anything (ie Doctrine, Session) when you don't need it. There must be something I don't get.\n",
            "@dlsniper what do you call configuration ? Extension configurations are processed only once (on cache generation), thinking of something else ?\n",
            "Have you tried to change the [`strict_requirements` config](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php#L177) ?\n",
            "I have shorten the log to display the more intertesting parts.\n\nWhat procedure did you use to install sf (please list the all commands)\n",
            "oops sorry.\n\nI have no problem when executing this command. Could you please try again. If this still does not work what is the content of you app folder (is there an autoload.php there ?).\n",
            "could be an issue with composer, try to update to the latest version `php composer.phar self-update`\n",
            "Must be a pb with the path: \n\n`Fatal error: require_once(): Failed opening required 'app/autoload.php' (include\n_path='.;C:\\php\\pear') in C:\\wamp\\www\\Symfony\\vendor\\sensio\\distribution-bundle\\\nSensio\\Bundle\\DistributionBundle\\Resources\\bin\\build_bootstrap.php on line 24`\n\nCan anybody on windows try this command and report if it works or not ?\n",
            "Ccing the pro @Seldaek\n\ndarenc notifications@github.com wrote:\n\n> I got here via Google, after running to the same problem.  I've only\n> just installed Composer, so that is up to date. \n> \n> composer create-project symfony/framework-standard-edition c2ctc 2.1.7\n> \n> Result:\n> \n> ```\n> H:\\Projects\\new.c2ctc.com>composer create-project\n> symfony/framework-standard-edition c2ctc 2.1.7\n> Installing symfony/framework-standard-edition (v2.1.7)\n>  - Installing symfony/framework-standard-edition (v2.1.7)\n>    Loading from cache\n> \n> Created project in c2ctc\n> Loading composer repositories with package information\n> ...\n> \n> Generating autoload files\n> \n> Warning: require_once(app/autoload.php): failed to open stream: No such\n> file or directory in\n> H:\\Projects\\new.c2ctc.com\\c2ctc\\vendor\\sensio\\distribution-bundle\\S\n> ensio\\Bundle\\DistributionBundle\\Resources\\bin\\build_bootstrap.php on\n> line 24\n> \n> Fatal error: require_once(): Failed opening required 'app/autoload.php'\n> (include_path='.;C:\\xampp\\php\\PEAR') in\n> H:\\Projects\\new.c2ctc.com\\c2ctc\\vendor\\sensio\\di\n> stribution-bundle\\Sensio\\Bundle\\DistributionBundle\\Resources\\bin\\build_bootstrap.php\n> on line 24\n> Script\n> Sensio\\Bundle\\DistributionBundle\\Composer\\ScriptHandler::buildBootstrap\n> handling the post-install-cmd event terminated with an exception\n> \n>  [RuntimeException]\n>  An error occurred when generating the bootstrap file.\n> ```\n> \n> Versions:\n> \n> ```\n> H:\\Projects\\new.c2ctc.com>composer\n>   ______\n>  / ____/___  ____ ___  ____  ____  ________  _____\n> / /   / __ \\/ __ `__ \\/ __ \\/ __ \\/ ___/ _ \\/ ___/\n> / /___/ /_/ / / / / / / /_/ / /_/ (__  )  __/ /\n> \\____/\\____/_/ /_/ /_/ .___/\\____/____/\\___/_/\n>                    /_/\n> Composer version 940c2a079d7a8b145f025279227078a6bb0cded6\n> \n> H:\\Projects\\new.c2ctc.com>php -v\n> PHP 5.4.7 (cli) (built: Sep 12 2012 23:48:31)\n> Copyright (c) 1997-2012 The PHP Group\n> Zend Engine v2.4.0, Copyright (c) 1998-2012 Zend Technologies\n> ```\n> \n> There is an `app/autoload.php` in the `c2ctc` directory:\n> \n> ```\n> H:\\Projects\\new.c2ctc.com>dir autoload.php /s\n> Volume in drive H is Programs\n> Volume Serial Number is B43D-532D\n> \n> Directory of H:\\Projects\\new.c2ctc.com\\c2ctc\\app\n> \n> 16/02/2013  18:04               474 autoload.php\n>               1 File(s)            474 bytes\n> ```\n> \n> But the include path only includes the current directory and PEAR, so\n> rather than `require_once app/autoload.php` it seems the bootstrap file\n> should be trying to require `[directory]/app/autoload.php` or something\n> (I haven't spent much time checking how the bootstrap script is called\n> or what it does, mind).\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/7082#issuecomment-13664508\n",
            ":+1: \n\nJordi Boggiano notifications@github.com wrote:\n\n> OK the fix was merged and the latest composer now ships with it, so it\n> should all be back to normal.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/7082#issuecomment-13746903\n",
            "What are the exact  latest versions  (they change every day !) ?\n",
            "If you downloaded Sf2.2.0 then you have 2.2.0 (I was asking in case you use a git version). Your fine on this side.\n\nYou can get the composer version by using the `--version` switch. Use the `selfupdate` option beforhand.\n\nWhat would be interesting is to also know your OS version.\n\nDon't worry, you're (probably not) a simpleton :)\n",
            "@ireckon What version of Fedora ? What version of PHP ?\n\nThis particular issue was related to windows, there might be a ~similar issue in Fedora.\n",
            "@ireckon could you try with a vanilla PHP to narrow down the issue. If a vanilla PHP also have the issue then it is worth creating a new issue in order for the pb to get fixed. If not, you will have to fix it ;)\n\nYou might then look at #7102 and try to set up a test case to see if you have a similar pb. \n",
            "I don't really understand your problem but you should be able to plug a listener on a kernel event in order to solve this. \n\nClosing the issue as it seems to be a support request and you should use the mailing list then (unless I am missing something) ?\n",
            "@ivan1986 there is a (subtle) difference between a user requesting a feature and a valid  feature request  :wink: \n\nYou should be able to achieve what you want with a  global  domain and prefix + listeners. If you don't know how to do this, please request help on the ml. thanks.\n",
            "I think a bundle is overkill here. See my former comments.\n",
            "I don't get what you mean. But then maybe a simpler bundle to handle different parts of your site by easing the listener & router configs.\n",
            "Could you please submit a test case ?\n\nThe best would be a PR with a failing TC - or a least a gist. (The TC should be minimal and contains only the requires step to reproduce the issue)\n",
            "@nomack84 have you searched the issue tracker for a similar demand ? There might be some similar  issues  IIRC.\n",
            "What exact Sf version do you use ?\n",
            "@drak can you explain the rationale please ?\n",
            "Some remarks: the infos do not sound clear to me, can we have both autostart & ondemand enabled at the same time ? If not the config should probably be changed.\n\nMy last question is what the purpose of autostart - ondemand was supposed to solve all use cases before.\n\nI'll have more time to discuss it this coming week.\n\nThank for your reply.\n\nDrak notifications@github.com wrote:\n\n> @vicb what is your specific question? I've explained it in the desc and\n> in the info() sections. This PR gives more control to the developer.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7062#issuecomment-13672587\n",
            "You did not answer my question about exclusive settings I think.\n\nDrak notifications@github.com wrote:\n\n> On demand is not the same as explicit start and it did not solve it (as\n> I said back then). It created magic which cannot be turned off. This\n> restores full control over the session. Configurability is never a bad\n> thing.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7062#issuecomment-13675824\n",
            "Thanks. Could you add a  [WIP]  prefix to the PR tittle and set  bug fix  to  no  for now ?\n",
            "I think it will be easier then.\n",
            "I would consider this has a bug fix (ie 2.0).\n\nIf not, 2.2 should probably be the target branch (over master) as native adapters have to be fixed to match this behavior (they do not generate an exception when they don't have access permission). I don't think we want to  create  a bug in the native finders of 2.2 for consistency (I mean throwing an `\\UnexpectedValueException`) ?\n",
            "The bfn can be removed by having the new exception extending the former one\n\nFabien Potencier notifications@github.com wrote:\n\n> As this is a new feature, it should into master.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7050#issuecomment-14124671\n",
            "@fabpot I'll tell my phone to stop auto(no)correcting me, sorry for that. I mean BC break.\n\n@jfsimon yes.\n",
            "Could throwing an exception be considered as a fix ?\n\nAny adapter should behave the same when it claims to be supported I think.\n\n/cc @jfsimon\n",
            "And you might replace  Phar  by  PHP Stream \n",
            "If your first statement is true, it might suffice. But I won't believe you until you add a unit test ;)\n",
            "I would also add a test that exercizes multiple iterators, like `->in('/path/on/fs')->in('phar://path/')`\n",
            "@jfsimon, do you think It would make sense to add the path to `isSupported` - we only want to use them for the file system, no ? (ie  /path/to  or  file://  - no even sure about the 2nd).\n",
            "I agree.\n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> @vicb you're right, non PHP adapters are used only on filesystem and\n> should not be selected with non realpaths. `isSupported` method should\n> then take path as parameter and test its  reality . That said,\n> exception thrown in the adapter was missing and should stay here.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7048#issuecomment-13420147\n",
            "I'll try to feed you back tomorrow\n\nHermann Mayer notifications@github.com wrote:\n\n> No feedback anymore?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7048#issuecomment-13686449\n",
            "Other than a few comments, looks good to me. Thanks.\n",
            "I'll review the PR and send  PR to your own branch with the changes (if some needed) either this afternoon or more probably on Thursday.\n",
            "Just realizing by cloning your repo: you should work in a feature branch and **never** in master, see http://symfony.com/doc/current/contributing/code/patches.html#create-a-topic-branch\n\nTo solve this:\n- `git checkout master`\n- `git branch mynewbranch`\n- `git reset --hard origin/master`\n- `git push YourRepoAlias master mynewbranch -f`\n",
            "Yep forgot to mention, needs a new pr. GH does not offer to change the arc.\n\nHermann Mayer notifications@github.com wrote:\n\n> Yeah, made this mistake because I thought it would be a little fix.\n> I've followed your steps but got an unchanged unclean master as result.\n> I branched out my unclean master to old-master, reseted master to\n> upstream/master, branched the fresh master to finder-phar-fix branch\n> and merged in the old-master to this fresh branch. Now everything\n> should be clean. But this pull request points to my fork:master. Sadly\n> I cannot find an option to change this, so this pull request is now\n> empty.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7048#issuecomment-13791513\n",
            "I also think we should promote array unions as a best practice. On top of that the code would be faster which is an other _small_ benefit.\n",
            "@stof I don't see what else than  union  a + between two array would mean ? And this is the first intend of the PR, makes thing clearer (vs `array_replace[_recursive]` + sometime a patched version).\n\nIf you read the history (link on top) you will see that xDebug is disabled and speed optimization is not the primary goal but just something that comes with.\n",
            "usually $b is an  array()  definition, an $a is a parameter (options) `myInit(array $options)`. Check the mentioned link for an example.\n\nBut I must admit that improving readability is subjective here (Fabien & you find  +  harder to read than array_replace). So maybe the best thing to do is to close this issue ?\n",
            ":+1: tests should be considered as part of the documentation.\n",
            "Thanks !\n",
            "Some more notes:\n- The `PhpAdapter` fix should go in 2.0 (not really an adapter back then),\n- The native fixes should go in the release were they were introduced (2.2 IIRC),\n- The new flag should go in 2.3.\n",
            "I would introduce:\n- a PermissionException, thrown by all the finders,\n- a  ignorePermissionError  flag and fluid methods, default to false (ie current behavior)\n- when the flag is set to true non redable folders would be ignored.\n",
            "re-oprening as not solved (ony exceptions have been added)\n",
            "I think that's a bad name. You are not ignoring the exception (ie the result) but the root cause (ie the permission error). I don't have good any names in mind ((skip|ignore)UnreadableFolders maybe)\n",
            "master (as not a bug fix)\n",
            "thanks... but please wait one day, I am fixing them before :)\n",
            "well will be for next beginning of next week, pending a reply for fabpot. Feel free to go ahead before if you wish.\n",
            "FIXME Sf3 removed\n",
            ">  there are no other example in the framework where we do this\n\nWhat about\n- Request::create(),\n- Finder::create(),\n- Expression::create(),\n- Regex::create(),\n- Command::create(),\n- BinaryFileResponse::create(),\n- JsonResponse::create(),\n- ...\n\nSf2 requirements is 5.3.\n",
            "@fabpot any update after my last comment ?\n",
            "@stof I already explained you why above but if this is a problem (why ?) this can be discussed, no need to close this PR.\n",
            "In order to help, you should provide a test case that works with 2.1 and fails with 2.2 - you can use a gist for that. Thanks.\n",
            "I mean a simple TC with no other code that what is strictly required to reproduce the defect.\n",
            "/cc @jfsimon are you aware of such a modification ?\n",
            "Oh yes, that would be really great if you can help with this as it is a bc break and then should be fixed before 2.2. Thanks.\n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> @vicb I didn't knew that finder iterator keys where pathnames. I don't\n> know know if this is useful, but I could reintroduce this feature (and\n> add a tests to ensure this wont be broken in the future). What do you\n> think?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/6891#issuecomment-12822126\n",
            "If think @jfsimon is working on this, making the gist unnecessary - he will let you know if he needs more info. thanks.\n",
            "You have 2 options:\n- a cb validator,\n- implementing your custom logic @ the POST_BIND event.\n\nA quick search in google returns this: http://stackoverflow.com/questions/12911686/symfony-validate-form-with-mapped-false-form-fields\n\nIt would be really great if you can contribute this to the doc if no PR is pending.\n",
            "@dlsniper \n- the issue tracker is not intended to receive support request,\n- I can not get your context if you don't detail it in your report,\n- cb = callback.\n",
            "Hi @dlsniper,\n\nWe ask users to send their support requests to the users ml for several reasons:\n- The list is indexed, someone might already have asked the question (have you checked) ?\n- Replying there might help other users too (see previous bullet),\n- Real issue gets diluted in the middle of support requests making the dev process less efficient.\n\n_Note: you should also take a look at the link I have mentioned in my first post, I think it can help._\n\nHave a great day too.\n",
            "thanks @stof \n\n> Native types should be lowercase\n\nNever say that to @fabpot :)\n",
            "@stof all  Object s should be covered now. Yeah I know he has such a mannerism !\n",
            "I'll fix that tomorrow\n",
            "travis I hope you like it !\n",
            "@purplefish32 have you tried to  add it to your PATH environment variable and try again  ?\n",
            "@purplefish32 support request are better directed on the Sf user mailing list or directly to mt in such a case. The issue tracker should be reserved for confirmed (or at least highly suspected) issues in Symfony.\n",
            "In the end it might be related to symfony but we just don't have enough details to tell.\n\nDonovan Tengblad notifications@github.com wrote:\n\n> Sorry I thought it had to do with symfony. For reference the solution\n> provided by @alexandresalome has not worked for me, I will adress the\n> issue directly to mediatemple. Thank you all for your time.\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/issues/6843#issuecomment-12753828\n",
            "I'll check tomorrow on next week, GH current status:  This page is \ntaking way too long to load. \n\nOn 03/28/2013 09:08 PM, Norbert Orzechowicz wrote:\n\n> @vicb https://github.com/vicb ping :)\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/issues/6843#issuecomment-15611438.\n",
            "@norzechowicz what's your OS ?\n",
            "Could you both execute this on your server (via the server **NOT** on the cli)\n\n``` php\n<?php\nvar_dump(getenv('PHP_PATH'));\nvar_dump(':');\nvar_dump(getenv('PHP_PEAR_PHP_BIN'));\nvar_dump(':');\nvar_dump(getenv('PHP_BINDIR'));\n```\n\nTogether with the path to your php (ie `which php` in the shell).\n\nOne problem I can image is that your PHP is  php53-cli  while we are looking for  php  but that might be a link ?\n",
            "@Tobion @kriswallsmith :+1:\n",
            "If I understand correctly, both hsi and esi will generate path starting with  /_proxy , isn't it a problem wrt access_control ? should it be possible to configure a per strategy path ?\n",
            "@fabpot that's smart, I've missed it.\n\nSome questions though (they should be answered by UT I think - and might already have been, I have not checked)\n- Isn't there a pb with urlencoding in the listener ?\n- Would the listener work with fragments (`#...') ?\n",
            "Some more points:\n- Should we validate that the router_proxy is enabled when esi are enabled (early failure ?)\n- Should we be able to enable each strategy individually (ie no need to expose the signer when hsi are not used)\n",
            "> But we can probably throw an exception in the ControllerReference constructor if the proxy is not enabled.\n\nIt should probably be in a wrapper class then ?\n",
            "@fabpot merged ? what about:\n- the config, see my comment above,\n- a changelog,\n- urldecoding & signer in the listener, should I assume this is ok ?\n",
            "I am talking about the config issue that **is** related to this PR.\n",
            "I haven't linked it because it should be in the outdated diff, you should be able to find it there.\n",
            "https://github.com/symfony/symfony/pull/6829#discussion_r2738295\n",
            "Ah windows.... Could you send the PR against 2.1. Before you might want to wait for @fabpot to comment on #6793 and rebase on it if accepted.\n",
            "@fabpot  Everything is BC  until it breaks BC in 3.0, that's why I'd like to see [deprecations in PR summary](https://github.com/symfony/symfony-docs/pull/2116) what do you think ?\n",
            "it would also be great to update the CHANGELOG with deprecations (it could also help people answering your question)\n",
            "@fabpot thanks.\n",
            "@dlsniper there seems to be a huge diff in your bench between isset and ake, any chance you have xdebug turned on ?\n",
            "@dlsniper I am not referring to absolute values but to the ratio that is high.\n",
            "@mvrhov you're right, isset is faster but [especially when xdebug is on](http://ilia.ws/archives/247-Performance-Analysis-of-isset-vs-array_key_exists.html) - 2.5x vs 10x.\n\nI would generally :-1: micro-optims but this one is in a generated file so :+1:\n",
            "> Backwards compatibility break: no\n\nReally ?\n",
            "@bschussek my point is that my comment is no more meaningless than closing #6453 because it will break BC.We could also keep BC by extending the classes in the new ns but in both cases BC will ultimately be broken (when the legacy classes are removed)\n",
            "@bschussek @stof I think that modifying the constructor signatures of `EntityChoiceList`, `FormType` are BC breaks (this is not an exhaustive list)\n",
            "@bschussek looking at this PR, I was wondering if an alternate syntax would make sense:\n\n``` php\n<?php\n$reflGraph = new ReflectionGraph($object);\n\n// equivalent to $object->getFoo()->setBar('value')\n$reflGraph['foo.bar'] = 'value';\n\n// equivalent to $object->getFoo()->getBar()\n$reflGraph['foo.bar'];\n```\n\n_Sorry for the off topic_\n",
            "The advantage of using such a `ReflectionGraph` factory is that it might be easier to return specialized reflection graphs, ie optimized instances (that would be cached).\n",
            "@stof your remark makes sense.\n\nWhat about `Accessor`, the benefit being that it might well be the name of a coming PHP feature: https://wiki.php.net/rfc/propertygetsetsyntax-v1.2\n",
            "> This class is neither.\n\nIt might be `$pa['foo.bar[baz]'] = $pa['foo.bar']['baz'];` I don't know if it would help though.\n",
            "PathAccessorFactory & PathAccessor ?\n",
            "But the  object  could be an array.\n",
            "> But this means that we'll have to create a PropertyAccessorFactory that creates PropertyAccessors for specific objects/arrays. Do we really want/need that complexity?\n\n@bschussek I think that finding the get/is/has method is a time consuming process and as I mentionned in a comment above, having some class specific instances - which the factory API would allow returning - could save time. The specific code could be generated once and cached.\n\nImplementing the cache mechanism is out of the scope of this PR but I think it is important to have an API that could allow this at a later time.\n\nEDIT: So I am :-1: for the current proposal wich does not leave room for further enhancement. \n\n_I think we have already discussed this with @rande and @stof in some other issue_\n",
            "@bschussek \n\n> Do you really think I'm so unprofessional to not even think about whether that could actually be implemented with my proposal?\n\nno, really !\n\n> The only benefit that ObjectBasedPropertyAccessor (or the like) gives is that it does the proxy lookup only once for that accessor instance.\n\nbut at least you agree that it will be less efficient.\n\nYou know the code a lot better than me so I trust you and that's probably why I don't get things as fast as you get them and I dare asking questions. I think it would really help to sumarize the plus and minus in both cases (I don't really get what you mean by complexity in the solution I propose).\n",
            "to be complete, I must admit I didn't read your PR header comment till the end (specifically the part about cache) before you mention it again in your last comment, sorry for that.\n",
            "@bschussek I think that adding constructors are BC breaks. I would also like that we start adding deprecations in the header, I have created [a PR related to that.](https://github.com/symfony/symfony-docs/pull/2116)\n",
            "At least `FormType` & `PropertyPathMapper` I think which now requires a `parent::__construct()` call when those classes are extended.\n",
            "That's a great idea. I'll try to come up with something next week. Ping me if you don't see anything coming.\n",
            "@bschussek some other idea, don't you think it would be easier to extend when `PropertyAccess::getPropertyAccessor();` is not static ?\n",
            "ok got it. Thanks for the clarification.\n\nOn 01/10/2013 06:39 PM, Bernhard Schussek wrote:\n\n> @vicb https://github.com/vicb I will :)\n> \n> |PropertyAccess| is not meant to be extended (note that it's final). \n> It's a helper class only for constructing and configuring \n> |PropertyAccessor| instances (just like |Symfony\\Component\\Form\\Forms| \n> and |Symfony\\Component\\Validator\\Validation|) in a forward-compatible \n> fashion (the helper class's interface will not change, but the \n> constructor of |PropertyAccessor| might do).\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6595#issuecomment-12108846.\n",
            "> Backwards compatibility break: no\n\nReally ?\n",
            "Changing `FormException` from a class to an interface is a BC break (`new FormException()`)\n",
            "@bschussek could be a good nice to have... after the 100+ form issues are tackled !\n",
            "@bschussek do you really think that etension, renderer, transformer, builders, event, guesser, view, type, ... belong to the same ns ?\nThat would be a huge (but easy) BC. If we should do it, the sooner the better.\n",
            "@bschussek would you mind re-opening this issue for further discussion ?\n",
            "@fabpot I agree with you, which is why the issue has been marked for 2.3. However I think it might be worth discussing after 2.2 is released (by reopening the issue).\n",
            "Yep, as @fabpot said I have [added the Bsd adapter](https://github.com/symfony/symfony/commit/e62b5f7#L11R690) to the tests, this should be the pb /cc @jfsimon \n",
            "@mmenozzi Looks exact. Fixing it would be great, you should sync with @jfsimon.\n",
            "@drak ClassMetadataFactory.php probably needs to be updated on line 125, in this case that's Sf that need refactoring.\n",
            "@bschussek very good point, but -1 still.\n\nWhat about Type, Email, Max, Collection, ... should they be changed to be more english ?\n\nIMO Choice is good enough, not worth breaking BC.\n",
            "Could you please explain (with an english sentence) how `@Assert\\OneOf(min = 2)` is clear ?\n",
            "I won't comment the first part of your comment. About the second, that would be an un-necessary BC break (IMO) as I stated in my first comment.\n",
            "In what OneOf is better than Choice ?\n",
            "Why not subclassing & override getrootdir ?\n",
            "I definitely don't see any issue with subclassing. So -1.\n\nNote: I have just check and there is a doc for that http://symfony.com/doc/current/cookbook/configuration/override_dir_structure.html. \n\nMay be the best thing to do is to open a pr to update the phpdocs and an other to add the root dir to this cookbook entry. \n",
            "> To the suggestions that one simply override getRootDir, getRootDir is currently called in the default constructor so if you want to get any state to getRootDir (like the directory that should be use as the root directory) at minimum you need to override the constructor (and likely its method signature) as well.\n> \n> Overriding getRootDir alone only works if there is some way to divine the root directory from something like **DIR** or Reflection. Neither are particularly useful in the specific case where the Kernel class itself has no bearing whatsoever on the Kernel root (typically app/) which was the point of this change.\n\nYou also need a PC*, a text editor and to create a new file :wink: \n\nI am all for discussion but I prefer keeping them efficient.\n\n_[*] Some even handle it with a Mac_ \n",
            "@fabpot I have never meant to be rude and I am sorry if @simensen had that feeling. Ironic may be but I try to improve.\n",
            "To me this is not a defect, when the cache is empty you have 2 sub-requests:\n- The one to the `InternalController::indexAction`,\n- The one that renders your response\n\nNone of those should appear on cache hits.\n\nIf this is the case, the issue can be closed.\n",
            "Check the code:\n- https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Controller/InternalController.php#L44\n- https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/HttpKernel.php#L71 \n",
            "+1 even better would be to automatically trigger a `E_USER_DEPRECATED` when the `@deprecated` annotation is used (via proxies).\n",
            "@Tobion AOP as used by the security extra I think.\n",
            "I am pretty sure @Tobion would love to play with AOP if we accept to add the dep.\n",
            "@asm89 would you tell why ? (It is a SE dep)\n",
            "@lsmith77 I don't.\n@asm89 makes sense, I thaught the pb was the dep by reading your message.\n",
            ":+1:  and :-1: makes this issue looks :star2: beautiful :star2: but they also remind me that I prefer to read arguments than see smileys! _(sorry for the rant, I must be in a bad mood today!)_\n",
            "@clemherreman Yes I feel better now after reading some concrete text... must be this :snowflake: snowy weather :snowflake: \n",
            "A quick recap\n\n:bulb:`trigger_error()`\n- usefull for components (vs full framework) :+1:\n- rely on devs discipline :-1:\n- non-standard (IDE support) :-1: \n\n:bulb:aop\n- use the standard `@deprecated` annotation :+1:\n- ~~would~~ could be used for 3rd party code :+1:\n- adding a dep to the core (already in the SE) :-1:\n- ~~perfs~~ optional, dev only\n\nIf it's too  :banana:  magic  for the core may be framework extra would be a good candidate ?\n\nIn conclusion I must say I don't really care how it is implemented as long as it is.\n\n_(I think I am starting to :sparkling_heart: emoticons)_\n",
            "An other stupid/great (you choose) idea would be to push the proxies generation to composer. Then any dep managed by composer would trigger an `E_USER_DEPRECATED` when accessing a `@deprecated` method. (This would be cli switch and active in `--dev` mode  only) - We get the best of both worlds :clap:\n",
            "@clemherreman did you think I  tend to think java-ishly  when you were first introduced to the concept of DI ? How often do you use it now ?\n\n@henrikbjorn did you ever wonder what happens when you run your 10 lines controller ?\n- autoload: generated code,\n- bootstrap: processed code,\n- DI usage: generated code,\n- route matching: generated code,\n- maybe some security: generated code,\n- **your 10 lines of genuine code**,\n- maybe some ORM: generated code,\n- URL generation: generated code,\n- probably some Twig rendering: generated code.\n\nBut maybe none of this happens because you're using HttpCache... generated code !\n\nDoes adding a few  trigger_error()  still have a  way way way way to magically  feeling ?\n\n@Seldaek here is my [:panda_face:POC](https://github.com/vicb/composer/compare/deprecated) - it is missing an autoload hook & handling of class, interfaces & properties deprecation.\n",
            "@Seldaek not at all. Imagine we can even rank people on Sensio Connect to know who uses most deprecated functions with this code gen !\n",
            "I close this one at it is now handled in 2.2\n",
            "There is an [online css2xpath](http://css2xpath.appspot.com) that has the same bug, it is based on Py lxml of which CSSSelector is a port.\nYou can test any xpath using [an online tester](http://xpath.online-toolz.com/tools/xpath-editor.php) you have to enclose the html snippet in `<root></root>`\n",
            "The issue has been fixed in [`cssselect`](https://github.com/SimonSapin/cssselect), the css2xpath engine used by `lxml`\n\n```\n>>> from cssselect import GenericTranslator, SelectorError\n>>> xp = GenericTranslator().css_to_xpath('div.contents td:nth-child(2)')\n>>> print(xp)\ndescendant-or-self::div[@class and contains(concat(' ', normalize-space(@class), ' '), ' contents ')]/descendant-or-self::*/*[name() = 'td' and (position() = 2)]\n>>> \n```\n\nSo it **only** needs to be ported to CSSSelector !\n",
            "which firewall (url) triggers the error ?\n",
            "I'll be OOO until mid-afternoon.\n\nWhat you can do:\n- PM me your compiled container,\n- install the [JMSDebugBundle](http://jmsyst.com/bundles/JMSDebuggingBundle) to check what happens in the firewall matching process\n",
            "@pulse00 Do you have any bundle that override the RequestMatcher ? (I can tell you if you PM your compiled container).\nAt least there is no issue with a Vanilla SE so this might come from one of your Bundle.\n",
            "see schmittjoh/JMSDebuggingBundle#60, I'll send a PR to @schmittjoh later today\n",
            "Thanks @stof ! (didn't get my copy paste error as PHP allow calling non static method w/o a warning).\n",
            "@fabpot could this be merged if `HttpUtils` is renamed to `IpUtils` ?\n",
            "ready !\n",
            "done, thanks for the reminder !\n",
            "@fabpot @maoueh thanks for your feedback, integrated.\n",
            "is  symfony/stopwatch  on packagist yet ?\n",
            "-1,  inherit_data  does not sound much better to me.  Mixin  or  Trait  would probably be better than  Inherit  in term of OOP.\n",
            "@bschussek your comment made me think of something:\n\n``` php\n<?php\n$builder->add('sub', 'form', array(\n    'property_path' => '..',\n));\n```\n\nbut\n\n``` php\n<?php\n$builder->include('form');\n```\n\nwould be possible with a helper `include()`\n",
            "but the `include()` helper could not be used in case of a collection of virtual forms (due to the delayed instantiation it has to be an option in such a case).\n",
            "Your delete handler is executed before the form is validated (in the `onBind` event with a priority of 50). It should then be possible to remove entities even with an invalid form (bad csrf token for exemple).\n",
            "This should have been fixed in https://github.com/sensio/SensioDistributionBundle/commit/57190e5baa0cc1d8ef6095ce57e6719a5eae2b79\n",
            "@pierredup right, your link is the patch for this issue.\n",
            "The option name has changes: `strict_requirements`\n",
            "@schmittjoh where is the 'ip' attribute set on the token ?\n",
            "Mulitple providers are already supported. The exception is thrown if [none of the provider](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/AuthenticationProviderManager.php#L66) were able to authenticate the token.\n",
            "They are [Authentication providers](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Security/Core/Authentication/AuthenticationProviderManager.php#L40)\n",
            "I can reproduce the issue: a form is considered valid even if the file exceeds the ini max filesize. Working on it.\n",
            "Do you have a `File` constraint on your property / index ?\nAs soon as you add the constraint, the form will be considered invalid when the size exceed the ini max filesize.\n\nPlease close the defect if this solves your issue.\n",
            "You should not put `@Assert\\File` on the Document entity but on the property in your Document holding the file. Embedded entities can be validated with the `@Assert\\Valid` constraint. You should also check the Doctrine doc for the correct `@ManyToOne` mapping definition.\n",
            "I think that `$finder->path()` could easily be confused with `$finder->in()`.\n\nWould `$finder->pathContains()' &`$finder->pathNotContains()' be better names ? (it would also be consistent with the current methods `$finder->contains()' &`$finder->notContains()'.\n",
            "What version of Symfony do you use ? I can not reproduce the issue with Sf2.1-RC1.\nThe errors is set on the form even if you do not set a priority (It would be better to specify a priority less than 0 as @bschussek has indicated).\n",
            "As explained by @stof I did not consider `StrictInterface` because as of now the interface is used to disabled the strict bevahior (which is enabled by default).\n\nI am not satisfied with `PermissiveInterface` / `LenientInterface` because implementing this interface does not mean that the generator will be permissive but only that the behavior is configurable - yes I did consider `Configurable` but the term is a too vague.\n",
            "Thanks all for the feeback, this is what is now implemented:\n- A `ConfigurableRequirementsInterface` that should be implemented by generators that can be configure not to throw an exception when the parameters do not match the requirements,\n- The interface has two methods: `setStrictRequirements()` and `isStrictRequirements()`,\n- `setStrictRequirements()` always gets called to configure the generator (whatever the option value is)\n\nNote: The Router option name has not changed (i.e. `strict_parameters`)\n\nDoes that fit everyone ?\n",
            "So the option name is now consistent (`strict_requirements`) with the interface. We should sync the change [in the standard edition](https://github.com/symfony/symfony-standard/blob/master/app/config/config.yml#L11) if we agree to merge this.\n",
            "@fabpot fixed. If the code is ok, I'll squash the commits and open a PR on symfony-standard\n",
            "duplicate of #5077\n",
            "@eriksencosta could this have the same root cause as #4537 ?\n",
            "@eriksencosta no problem, thanks for you work on this. I'll close this issue as it is a duplicate then.\n",
            "which version of Symfony do you use ?\n",
            "ref #5076\n",
            "@fabpot I can't understand why we keep discussing this for months as this implementation use _both_ keys and plain Englis, ie using  keys  is optional ( if it was not it would not be an issue according to #6129)\n",
            "Would it make sense to create a 'renderer' folder in the form component and move related classes there ?\n",
            "@stof I was only referring to the classes located in the Component/Form folder.\n",
            "Overall I don't really know what to think of this PR. PHP and Twig use a different way to support blocks:\n- PHP has one block per file,\n- Twig could have many blocks per templates.\n\nI am not sure if this PR is optimal for Twig and improves maintainability ? \n",
            "Would it make sense to create a 'renderer' folder in the form component and move related classes there ?\n",
            "@stof I was only referring to the classes located in the Component/Form folder.\n",
            "Overall I don't really know what to think of this PR. PHP and Twig use a different way to support blocks:\n- PHP has one block per file,\n- Twig could have many blocks per templates.\n\nI am not sure if this PR is optimal for Twig and improves maintainability ? \n",
            "hum... this would not work for nested collections, need some more work\n",
            "> I don't think the FormType should be cluttered with logic to theme collections.\n\nKind of agree but changing `$view->types` is not ideal either.\n\nWith this PR you can (or you will be able to) theme any form under the collection: `_collection_children_car_color_label`.\n\nIt needs some more work so let's keep on discussing this tomorrow.\n",
            "I have push a [new implementation](https://github.com/vicb/symfony/compare/collection/theme) in some other branch.\n\nIn works in the same way as the current theming works:\n- you have to create a block named after the id of the element you want to theme,\n- replace any collection indexes by `_children` (ie `_form_products_children_categories_children_label`).\n\nIt also works with nested collections and prototypes.\n\nInternals:\n- a `theme_id` variable has been added to all the view - its is basically the same as the `id` except that all numeric keys have been replaced by 'children`,\n- collection views have an added variable `is_collection` which is used to append `children` to the `theme_id` of their children,\n- I think the `theme_id` must be built at the same time as the views are created in order to be able to support nested collections.\n\nIf we can agree on this, I'll finish the PR based on this code.\n",
            "@stof the current code does not but this is a topic I would like to discuss before finalizing the code - implementing it would be very easy the question is to know if this is useful, only the extension (/helper) code would need to be modified.\n\nIf you ask the question, you should have a use case, right ?\n",
            "It works with the following config:\n\n```\n    providers:\n        in_memory:\n            memory:\n                users:\n                    user:  { password: userpass, roles: [ 'ROLE_USER', 'ROLE_CUSTOM' ] }\n                    admin: { password: adminpass, roles: [ 'ROLE_ADMIN' ] }\n```\n\nand the template:\n\n```\n<ul>\n    <li>custom: {{ is_granted('ROLE_CUSTOM')?'yes':'no' }}</li>\n    <li>user: {{ is_granted('ROLE_USER')?'yes':'no' }}</li>\n    <li>admin: {{ is_granted('ROLE_ADMIN')?'yes':'no' }}</li>\n</ul>\n```\n",
            "Its work equally well with 2.0.\n\nTry to fix the config according to what @stof said and please use the mailing list for further support requests. Thanks.\n",
            "@rdohms It works for me (both theming and the SE). I am using [this](https://gist.github.com/3032889) code with the latest 2.1.\n\nCould you please attach a faliling tc ?\n",
            "> This broke in the last 2 weeks since it works fine before my vendors update. Trying to isolate.\n\nHas the MopaBoostrapBundle also been updated ? If yes are you sure this is not the root cause ?\n\nOtherwise, please try to isolate a non working case and post it. Thanks.\n",
            "The behavior has always been to use the blocks coming from the last defined resources (/theme). Otherwise overriding \u00e0 block (ie theming) would not be possible.\n\nYou should note the versions of sf and mopa in your first and second cases and try sf1 with mopa2 and vice versa.\n\n----- Reply message -----\nDe :  Rafael Dohms  reply@reply.github.com\nPour\u00a0:  Victor Berchet  victor@suumit.com\nObjet : [symfony] Form Theming from config broken (#4705)\nDate : jeu., juil. 5, 2012 12:15\n\nok, it seems the form theme implementation is doing something weird with resource management.\n\nWhen i check the resources config (`twig.form.resources`) it only applies the last one. So if its:\n\n```\narray (size=3)\n  0 => string 'form_div_layout.html.twig' (length=25)\n  1 => string 'AcmeDemoBundle:Form:label.html.twig' (length=35)\n  2 => string 'MopaBootstrapBundle:Form:fields.html.twig' (length=41)\n```\n\nIn this case all customizations of Mopa are implemented.\n\n```\narray (size=3)\n  0 => string 'form_div_layout.html.twig' (length=25)\n  1 => string 'MopaBootstrapBundle:Form:fields.html.twig' (length=41)\n  2 => string 'AcmeDemoBundle:Form:label.html.twig' (length=35)\n```\n\nIn this case the implementations in Acme show up.\n\nThis is different from what happened a few weeks ago where this rendered Acme elements even with Mopa still in that array.\nSo i'm wondering what changed and how we can achieve the same results as before.\n\n---\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/symfony/symfony/issues/4705#issuecomment-6775407\n",
            "Does the algo really works ?\n\nLet's say I have the following hierarchy `A < B < C` and the classes added in the following order; `C, B, A`. I believe that the algo would return `B, A, C` instead of `A, B, C`.\n\nAn other question: should the dependency resolution be implemented in the `ClassCollectionLoader` rather than in the compiler pass ?\n",
            " @bamarni could you confirm the issue with the algo ? If it is confirmed, do you have time to work on a fix ?\n",
            "Yep please move the code to the ClassLoader.\n\nYou could also add some cache mechanism:\n- ReflectionClass could be cached (they might be use mulitple times when some dependencies exist and are also used by the class loader)\n- May be you could also cache the hierarchy of the classes\n",
            "@bamarni I was referring to a local cache (ie local variable).\n- On the first iteration, the code instantiate a reflection class,\n- On other iteration you would instantiate again a reflection class for a subset of the classes\n- ...\n- In the end the former code instantiate again a reflection class for each class in order to get the file name, ...\n\nI was also thinking of an other algo: count the number of parent classes for each classes to include and order classes according to this number. This would be a single loop only, what do you think ?\n",
            "There is no real benefit in making the interfaces appear first but you can do it if it doesn't make the code more complex.\n\nPlease also add the `@throws` annotation to the methods.\n",
            "The template name resolution is already cached as well as the routing configuration (ie at a higher level than the method itself).\n\nIf you have specific cases that would benefit from some optimization please open more detailed tickets. Thanks.\n",
            "@Kezino please use the [mailing list](https://groups.google.com/forum/?fromgroups#!forum/symfony2) to get support.\n\nThere must be an issue with your controller listener, you should check the status code of the ajax request issued to load load the wdt.\n",
            "Do you have a failing TC with concurrent access ? \n\nAs PHP is supposed to take care of serializing the requests (ie you can't have 2 concurrent requests for the same session) the issue might be related to PHP.\n",
            "@drak what exactly did you suspect ?\n\nIf there could be concurrent requests for the same session then all non-native handler are flawed - but this this not be the case (as it is handled by PHP). \n",
            "@yanoosh thanks for the update. I should have some time to investigate beginning of next week. What are the symptoms when it crashes ?\n",
            "@yanoosh I used to test concurrency some weeks ago with [this code](https://gist.github.com/3031689) - the handler comes for [php.net](http://fr2.php.net/manual/en/function.session-set-save-handler.php). \n\nI did not notice any problem: If you execute two concurrent requests, the second one will block until the first one is done (i.e. the session data have been written).\n\nDoing the test again this morning with 3 concurrent requests: Once the first request is over, the 2 other (blocked) ones start at the same time. This is then where you might see an issue.\n",
            "It seems that all [storage handlers](https://github.com/symfony/symfony/tree/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler) are affected by this issue.\n\nThe symptoms would not exactly be the same but let's say you have 2 concurrent requests. If they start at the same time they will both get the same copy of session data (as reading the session data would occur at about the same time).\n\nNow let's say that one of the request results in updating / adding some values into the session and is the first to terminate, the updated / added value would be written into the session storage.\n\nThen the second request terminates. The copy of the session it has has not been updated (it is the same at what the first request got while reading the initial data) but would overwrite the data updated / added by the other session.\n\nScenario:\n- request A and B arrives at about the same time, `sessionA = sessionB = {foo: 1}`\n- request A updates & adds some session values: `sessionA = {foo: 2, bar: true}`\n- request A terminates, the session is updated to `{foo: 2, bar: true}`\n- request B terminates, the session is updated to '{foo: 1}'\n- the changes made request A are lost\n\nAll of the storage handlers are concerned by this issue.\n\nNative handlers are not concerned:\n- The native file handler [locks files](https://github.com/php/php-src/blob/master/ext/session/mod_files.c#L187)\n- The native memcached handler [uses a lock](https://github.com/php-memcached-dev/php-memcached/blob/master/php_memcached_session.c#L246)\n- The native memcache handler also seems to work (tested with the attached gist)\n\n@drak what do you think ?\n",
            "@yanoosh regarding your last message:\n\n1- we _must_ add locks to all session handlers,\n2- we don't need  native handlers , native means handled by PHP, we don't need to handle it ourselves. The so called  native handlers  were only a mean to configure PHP (by modifying ini settings) - whether or not we need a mean of configuring PHP is out of topic here and at least has no reason to be done by the Session  component . \n",
            "An other option would be to disallow both `*` and `?` as regex delimiters - that would be a BC break but it seems reasonable ?\n",
            "@Crell what is your use case ?\n",
            "@willdurand To give some more details: form validation is handled by the [Validator](https://github.com/symfony/symfony/tree/master/src/Symfony/Component/Form/Extension/Validator) extension which adds a [listener](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Validator/EventListener/ValidationListener.php) on the POST_BIND event for every [form](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Validator/Type/FormTypeValidatorExtension.php#L48) - there is no more  fields  and  forms  in 2.1 as everything has been merged into  forms .\n\nThe code you mention in your previous post is still here for BC but is no more used.\n\nYou can add a listener on the POST_BIND event to do some custom validation or update the data as in your use case.\n",
            "It should be ready to merge when you have taken the last comments into account. thanks.\n",
            "Thank you for this PR and the changes.\n",
            "It should be ready to merge when you have taken the last comments into account. thanks.\n",
            "Thank you for this PR and the changes.\n",
            "There is actually two ways to define the constraint:\n- The way you describe at the end of your message,\n- The other way:\n\n``` xml\n<class name= Acme\\TaskBundle\\Entity\\Task >\n    <property name= task >\n        <constraint name= NotBlank  />\n    </property>\n    <property name= dueDate >\n        <constraint name= NotBlank  />\n        <constraint name= Type >\n            <option name= value >\\DateTime</option>\n       </constraint>\n  </property>\n</class>\n```\n\nCould you please send a PR to symfony-docs ?\n",
            "@shiroyuki you should not merge manually but use git and rebase your branch on the latest master (remove your last commit before)\n",
            "What I mean is that the manual merge should be done as part of the rebase, otherwise git doesn't know that my commit is included in your branch and your branch is not mergeable into master.\n\nSo what you can do now is to:\n- squash your commits,\n- update your master branch to symfony/master,\n- rebase the branch master, solve the conflict by keeping your version,\n- force push your branch to github.\n\nThen your change will be mergeable.\n",
            "ie some pa%%%%word\n",
            "duplicate of #3058\n",
            "The other option would be to throw an exception if the session is not started at this point otherwise we have a security vulnerability (i.e. constant CSRF token = useless CSRF).\n",
            "Does the [SessionListener](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/EventListener/SessionListener.php#L64) violate the principe  of explicitly starting a session ? \n",
            "Hum... I asked the question because I count 2 places when the symfony `auto_start` option is false:\n- The place where you explicitly start the session in the code `$session->start()`,\n- The listener where `$request->hasPreviousSession()` triggers `$session->start()`\n\nMy concern is that if we throw an exception when there is no started session, we could see some inconsistent behavior when sf `auto_start` is false: If the action that shows the form does not explicitly start a session the exception will be thrown depending on the pages you have visited before (and if they have started is session or not).\n\nExample:\n- sf `auto_start` is off,\n- page A explicitly starts a session,\n- page B does not start the session,\n- page Form displays a form but does not start a session.\n\nIf you visit page A then page Form then you are ok,\nIf you visit page B then page Form an exception is thrown.\n",
            "The other option would be to throw an exception if the session is not started at this point otherwise we have a security vulnerability (i.e. constant CSRF token = useless CSRF).\n",
            "Does the [SessionListener](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/EventListener/SessionListener.php#L64) violate the principe  of explicitly starting a session ? \n",
            "Hum... I asked the question because I count 2 places when the symfony `auto_start` option is false:\n- The place where you explicitly start the session in the code `$session->start()`,\n- The listener where `$request->hasPreviousSession()` triggers `$session->start()`\n\nMy concern is that if we throw an exception when there is no started session, we could see some inconsistent behavior when sf `auto_start` is false: If the action that shows the form does not explicitly start a session the exception will be thrown depending on the pages you have visited before (and if they have started is session or not).\n\nExample:\n- sf `auto_start` is off,\n- page A explicitly starts a session,\n- page B does not start the session,\n- page Form displays a form but does not start a session.\n\nIf you visit page A then page Form then you are ok,\nIf you visit page B then page Form an exception is thrown.\n",
            "Can you try to replace `%.0f` by `%.0F` in [time.html.twig](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Collector/time.html.twig); If this works either report it or submit a Pr. Thanks.\n",
            "thanks a bunch @travisbot !\n",
            "or the correct return type (which you linked).\n",
            "You should not need a special template now as the error is mapped to the first field\n",
            "You can set [different options](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/RepeatedType.php#L49) (ie label) for the first and second fields. \n\nedit: which is documented [here](http://symfony.com/doc/master/reference/forms/types/repeated.html)\n",
            "Could you paste your  block_field_rows  template ?\n",
            "It uses `rename` so that you can use fake UploadedFiles while testing (It would not be possible to `move_uploded_file` a local test file).\n\nWould `move_uploded_file` cause the same permission error in your  environment  ?\n",
            "sounds good, could you submit a PR ?\n",
            "@mvrhov yep you are right ! Any idea on how to fix this ?\n",
            "@stof a `move()`'d  UploadedFile is no more an UploadedFile (which is why `move()` returns a File)\n",
            "Would calling move more than once work in the current implementation ? \n",
            "> @vicb I think the current implementation is completely broken: the move method never calls move_uploaded_file. For uploaded files, it calls the parent method which uses rename, and otherwise it fails.\n\n`move_uploaded_file` => `is_uploaded_file` + `parent::move()` to enable testing\n\n> But calling move several times on a File object never works indeed (not only for UploadedFile) as it returns a new file but the current File object still reference the old location (which does not exist anymore). This is really bad IMO as it means that any reference to the old objects would be totally broken once you move a file.\n\nLet's think of a better solution\n",
            "@bschussek great changes ! I have just sent you a PR with some modifs related to deprecated features. I'll rebase and submit the other one we have already discussed.\n",
            "@bschussek great changes ! I have just sent you a PR with some modifs related to deprecated features. I'll rebase and submit the other one we have already discussed.\n",
            "are you sure ?\n",
            "If this should be merged the PHP templates should also be updated (and the table layout form both twig & php)\n",
            "@waldo2188 should this be closed ?\n",
            "It's not a bug, it is the expected behavior (see #3657)\n",
            "How does this PR relate to #4335 ?\n",
            "> @vicb 4335 is a solution to a general problem with filters. I think that in their current state they can not be used to filter user created iterators.\n\nCould this be solved by using a `DirectoryIterator` type hint in the constructor of would it be too restrictive ?\n",
            "Is is intended that all methods of `FtpSplfileInfo` and `RecursiveDirectoryFtpIterator` are public ?\n",
            "All string based validators [do accept](https://github.com/symfony/symfony/commit/1b2ca259f12cf7de86626c78d2d8b1573e8ddf85#src/Symfony/Component/Validator/Constraints/MinLengthValidator.php) empty strings. In your case you should add a NotBlank validator.\n",
            "Aren't  mixins  supposed to be the equivalent of PHP  traits  (or the other way around if you like) ? If so I don't think Type Extensions are traits (or mixins) and I see no need to change the current names.\n",
            "With you suggestion, `add()` would accept both:\n- `$builder->add('field', array(/* custom options */));`\n- `$builder->add('field', '<type>', array(/* custom options */));`\n\nI prefer the first (current) option where you can explicitly enable guessing (by passing `null`).\n",
            "@bschussek my point is that you do not introduce any new functionality but you introduce some  magic  which IMO is bad  (I just don't like that the same parameter could be @ a different position, it reminds me jQuery).\n",
            "@bschussek I think it is completely unnecessary, we are doing PHP, not C++ nor Java. As a PHP programmer if I see `->add('email', array('required' => false));` I don't expect to be able to `->add('email', 'email', array('required' => false));` i.e. I find it more confusing than helpful.\n",
            ":+1: yes please (I didn't propose before as it breaks BC but this is the right time for it I think).\n",
            "could you use a template for your `<ul>` ? then you would use `{{ form_widget(form.alternates) }}` and the collection would be marked as rendered as stated by @stof. \n",
            "yes, define a block in a [theme](http://symfony.com/doc/current/book/forms.html#form-theming)\n",
            "`form_rest()` has been designed to work with the delivered templates (or custom templates with a similar structure - i.e. the template should call `form_widget()` in the present case).\n\nThere is really no way to support everything a user can do. So I would say this is not a bug: either you use the form themes as expected or you don't use `form_rest()`.\n",
            "Thanks ! It would be great if you derive a note in the docs from your post (@ http://symfony.com/doc/current/book/forms.html#rendering-a-form-in-a-template.)\n",
            "@nomack84 this error comes from xdebug, right ? is it enabled on your shared host ?\n",
            "What I mean is that the issue is linked to `xdebug.max_nesting_level` (=100 by default), and xdebug should not be installed on your shared host. Locally you can set it to a higher value (either via a ini file or by code). \n\nMentionning it in the doc is a good idea.\n",
            "> The fix here just removes a useless limitation\n\nIt does more than only removing a limitation: it introduces a new bug and make the `if` / `then` parts inconsistent ;)\n",
            "@Tobion \n- fixed.\n- no it is not as it couldn't work in this case.\n",
            "I still don't agree with this PR: The [ Reserved Characters ](http://tools.ietf.org/html/rfc3986#section-2.2) could be encoded or not according to the meaning they should have.\n\nYour PR proposes to have [some chars](https://github.com/symfony/symfony/pull/4205/files#L0L33) de-encoded which according to the previous statement could change the meaning of the URL.\n\nI don't have a good solution either.\n\n_Note: you linked the section 6.2.2 which is about normalization however section 2.2 clearly states:  Thus, characters in the reserved set are protected from normalization _\n",
            "This could be related to a bug that has been fixed in the master branch, what version are you using ?\n",
            "Please try without the bundle and close the issue if it is not related to Sf. Thanks.\n",
            "@bschussek #3918 implements what you propose but then the messages are not valid any more:\n\n``` php\n<?php\n    public $minMessage = 'This value should be {{ limit }} or more';\n    public $maxMessage = 'This value should be {{ limit }} or less';\n    public $invalidMessage = 'This value should be a valid number';\n```\n\nI can imagine 2 solutions:\n- adding some more message,\n- rename the `Size` constraint to `Range` and create a new `Size` constraint for arrays / countables.\n\nWhat do you think ?\n",
            "@bschussek It would make sense. @makasim @Herzult any one of you would like to contribute this (i.e. rename the current Size to Range and create a new Size supporting arrays / countables / strings) ? \n",
            "The guessers should also be modified (it might also affect the ODM which is in an other repo, if so it would be good to sync the changes).\n",
            "Size is a good name for both strings and  collections , could we have two sets of strings and select according to the type ?\n",
            "I think your changes are great, may be @bschussek has more feedback. The ValidatorTypeGuesser and the translation are yet to be updated.\n",
            "@Herzult this PR looks good to me, could you update the changelog and update guides, try to factorize the code and squash the commits ? Thanks.\n",
            "- could #4259 be helpful ?\n- please squash the commits.\n- please create a PR / issue on [symfony-docs](https://github.com/symfony/symfony-docs)\n\nthanks for the updates.\n",
            "@Herzult what about plural translations ?\n",
            "thanks for the updates, this PR looks fine to me. @bschussek ?\n",
            "@Herzult can you squash your commits ? \n",
            "Not exactly:\n- Range _requires_ both min & max,\n- Size validates _both_ strings & collections (you should specify min, max or both)\n",
            "@Tobion even you get confused, it should not be 0 ;) \nI agree with @stof that MinLength / MaxLength could be deprecated.\n",
            "@bschussek #3918 implements what you propose but then the messages are not valid any more:\n\n``` php\n<?php\n    public $minMessage = 'This value should be {{ limit }} or more';\n    public $maxMessage = 'This value should be {{ limit }} or less';\n    public $invalidMessage = 'This value should be a valid number';\n```\n\nI can imagine 2 solutions:\n- adding some more message,\n- rename the `Size` constraint to `Range` and create a new `Size` constraint for arrays / countables.\n\nWhat do you think ?\n",
            "@bschussek It would make sense. @makasim @Herzult any one of you would like to contribute this (i.e. rename the current Size to Range and create a new Size supporting arrays / countables / strings) ? \n",
            "The guessers should also be modified (it might also affect the ODM which is in an other repo, if so it would be good to sync the changes).\n",
            "Size is a good name for both strings and  collections , could we have two sets of strings and select according to the type ?\n",
            "I think your changes are great, may be @bschussek has more feedback. The ValidatorTypeGuesser and the translation are yet to be updated.\n",
            "@Herzult this PR looks good to me, could you update the changelog and update guides, try to factorize the code and squash the commits ? Thanks.\n",
            "- could #4259 be helpful ?\n- please squash the commits.\n- please create a PR / issue on [symfony-docs](https://github.com/symfony/symfony-docs)\n\nthanks for the updates.\n",
            "@Herzult what about plural translations ?\n",
            "thanks for the updates, this PR looks fine to me. @bschussek ?\n",
            "@Herzult can you squash your commits ? \n",
            "Not exactly:\n- Range _requires_ both min & max,\n- Size validates _both_ strings & collections (you should specify min, max or both)\n",
            "@Tobion even you get confused, it should not be 0 ;) \nI agree with @stof that MinLength / MaxLength could be deprecated.\n",
            "Maybe the documentation server should redirect to the right version according to `Kernel::VERSION` (i.e. using rewritting) ?\n",
            "Duplictae of #4022\n",
            "The syntax is supposed to be available since PHP 5.2.2 (http://fr.php.net/manual/en/regexp.reference.subpatterns.php) - the bug is dated from 2008.\n\nIs 5.3.3 your CLI version (php -v) ? could you also check the PCRE version (php -i).\n",
            "PHP 5.3.3 is supposed to used [PCRE 8.02 ](https://github.com/php/php-src/blob/PHP-5.3/NEWS#L1317).\n\nThis syntax is available since PCRE 7.0 see [the changelog](http://www.pcre.org/changelog.txt), v7.0 item 34a\n\n@Tobion what about reverting this change ?\n",
            "@Tobion the plan is to revert the commit and add a warning in check.php\n",
            "and make sure the  new  syntax is not used anywhere else in Sf2\n",
            "Do unicode routes work properly as of today ?\n",
            "A minimum requirement of PCRE 8.0 is the best. See symfony/symfony-standard#324\n",
            "@marcospassos What is your current version of Sf ? (2.0.12, master branch of 2.0, master branch of 2.1)\n",
            "Could you build a very simple test case based on a new 2.0.12 so that I can investigate ?\n",
            "@Tobion @bschussek would `elementary` be better than `primitive` ?\n",
            "and `compound \\ composite` better than `complex` ?\n",
            "Actually I am fine with anything... as long as it is documented.\n",
            "> Still I think that this unveals a more profound naming problem. How do we (also in the documentation) name forms with children (formerly  forms ) and forms without children (formerly  fields )?\n\nTo make it clear, I would rather say forms that **can have** children and forms that **can not have** children (i.e. Empty collections have no children but they can have and this is reason why you have to introduce those options, right ? - that could be a good example for the doc).\n\nIt will probably be better to refer to  complex  /  primitive  forms in the doc (and use the  form  /  field  terms to explain them).\n\nNote: I think @Tobion concern is that  primitive  /  complex  could be pejorative terms (this is why I have proposed  elementary  /  compound ).\n",
            "@Tobion @bschussek would `elementary` be better than `primitive` ?\n",
            "and `compound \\ composite` better than `complex` ?\n",
            "Actually I am fine with anything... as long as it is documented.\n",
            "> Still I think that this unveals a more profound naming problem. How do we (also in the documentation) name forms with children (formerly  forms ) and forms without children (formerly  fields )?\n\nTo make it clear, I would rather say forms that **can have** children and forms that **can not have** children (i.e. Empty collections have no children but they can have and this is reason why you have to introduce those options, right ? - that could be a good example for the doc).\n\nIt will probably be better to refer to  complex  /  primitive  forms in the doc (and use the  form  /  field  terms to explain them).\n\nNote: I think @Tobion concern is that  primitive  /  complex  could be pejorative terms (this is why I have proposed  elementary  /  compound ).\n",
            "@dlsniper that was about [returning null value](https://github.com/symfony/symfony/pull/3927#discussion_r682684). The code has changed so much that I can close this issue now.\n",
            "There  is the same issue in the FilenameFilterIterator.\n\nThe test could be factorized in the parent class MultiplePcreFilterIteraror\n",
            "working on fixing this\n",
            "working on this one\n",
            "I am ok with this PR\n",
            "You can specify defaults, requirements and option when importing your conf, this will override the values for all the imported route, see [the tests](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Tests/RouteCollectionTest.php#L151)\n\nDoes it answer your question ?\n",
            "shoud be 2e1344e\n",
            "2.0 ?\n",
            "@fabpot can you reopen this one ? It references a PR that causes the trouble\n",
            "I can reopen.\n",
            "fixed by #3983, the PR is on the way\n",
            "@bschussek if some of my comments make sense I can help implementing them.\n",
            "@bschussek if some of my comments make sense I can help implementing them.\n",
            "Please update https://github.com/Crell/symfony/blob/e05fbf19a9dca656f89e4f8396e7c7e80f221eba/src/Symfony/Component/HttpFoundation/StreamedResponse.php#L77 and squash your commits. thanks.\n",
            "Great ! thanks @willdurand \n",
            "Great ! thanks @willdurand \n",
            "Some file permissions have been changed in your commit, they should be reverted\n",
            "Some file permissions have been changed in your commit, they should be reverted\n",
            "https://github.com/symfony/symfony/blob/master/src/Symfony/Component/DomCrawler/Tests/FormTest.php#L492 ?\n",
            "@niepi What is you Sf version ? Can you test with the Sf client ?\n",
            "I won't be able to look at this before next week.\n",
            "@stof it might be possible to implement some kind of cache there ?\n\n@bschussek could the `name` option takes an arbitrary name (thinking of including '.'s) - this could then be a great addition.\n",
            "@stof / @rande could you open an issue for the cache topic (to avoid polluting this RFC more and to keep track). Thanks.\n",
            "could `foo[]` be an option, it could make nesting arrays looking better `foo[bar[]]` vs `[foo[bar]]`?\n",
            "right, your notation makes more sense.\n",
            "@Tobion could you squash your commits ?\n",
            "@Baachi fixed now. Thanks.\n",
            "@Tobion could you make a PR to this branch for the named parameters ?\n",
            "May be the best is to put it on hold while I am reviewing your PRs. There are already enough changes, we'll make an other PR after all have been sorted out.\n\nWhat's the difference between 3754 and 3810 ? (3810 + 3763 = 3754 ?)\n",
            "I didn't link on purpose... the question is if '=' means strictly or loosely equal (any diffs - beside master vs 2.0) ?\n",
            "@Tobion only bug fixes mean  only bug fixes . You should re-open a PR for 2.0 with  only bug fixes , you might want to wait for me to review 3754.\n",
            "@Tobion I will finish the review tomorrow, please make one fix w/ associated tests by commit the next time to ease the review (It would actually be great if you can re-arrange the PR this way, otherwise I'll deal with it).\n",
            "closed in favor of #3876\n",
            "@elektrrrus could you please check if this is in the doc and submit a PR against it otherwise (this question has been asked many times on the issue tracker).\n",
            "@schmittjoh I would really appreciate your opinion on this issue.\n\nSessions are now auto-started and people are even more likely not to have a previous session when they submit their login form.\n\nI can not understand why this check is here: you have to submit the form to trigger the listener so I think it is useless.\n\nThe question is: can this check be removed, if not why is it useful here (and should we move it somewhere else) ?\n\nThanks for your help.\n",
            "related to #3354\n",
            "@raziel057 see #1338\n",
            "@fariazz what Sf version are you using ?\n",
            "That's probably related to TZ handling as you say in your post, could you try to investigate this issue. 2 things you should pay attention to:\n- Do you have [Intl](http://php.net/manual/en/book.intl.php) installed ?\n- The [DateTransformer](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/DataTransformer/DateTimeToLocalizedStringTransformer.php)\n",
            "Please try to trace what happens in the transformer I have linked above. Dates use a transformer which transform the value on both read & write to the object.\n",
            "Dumping the value does not help, please remove it.\n\nAlso it is better to isolate the issue on a simple example using Sf built-in types (i.e. `DateType` here) and by tracing I mean stepping into the code.\n",
            "working on this\n",
            "This is the expected behavior for XML, you can do the same with YAML: `class: '         Ea\\...\\WebUserProvider         '`.\n",
            "How would you handle parameters starting with     s then ? (a parameter could be any method parameter).\n",
            "Usually a choice type gives you the ability to chose between a set a pre-defined values. A collection is preferred for your use case.\n\n_Please send support requests to the symfony mailing list, thanks_\n",
            "> Please set the choice field option  index_generation  to ChoiceList::GENERATE.\n\nHave you tried the suggested fix ?\n",
            "This is the expected behavior as the character immediatly preceding a variable is considered to be a separator. (It is easier to get it when you image  /  as a separator).\n",
            "also see #3651\n",
            "@guilhermeblanco Could you provide more info on your env / a failing test case - I can not reproduce the issue right now.\n",
            "I don't think any JS is needed (it could be simulated)\n",
            "For example I was thinking of testing the collections (i.e. adding & removing childs). I thought it could help both stabilizing the component & documenting the usage. @bschussek feel free to close if you think it is not helpful.\n",
            "#3983 could have been caught with functional tests ?\n",
            "You don't tell what Sf/Doctrine/Bundle version you're using but #3590 might solve your issue and has recently been merged in Sf2.0.\n",
            "> Also I switched to Symfony 2.0 branch in my project.\n\nfrom where ?\n",
            "see http://symfony.com/blog/symfony-2-1-the-doctrine-bundle-has-moved-to-the-doctrine-organization if you want to stay on master.\n",
            "@Tobion could you contribute this to the doc (or at least create a ticket) ? Thanks\n",
            "that would be `{% form_theme form.subform _self 'FooBundle:Controller:formDetail.html.twig' %}`\n",
            "if `'FooBundle:Controller:formDetail.html.twig` is a theme ???\n",
            "@mvrhov I feel like this is _really_ a support request. It should be sent to the mailing because:\n- real issues get diluted on the GH tracker and this affects the fix time,\n- it makes harder to search for real issues on GH (i.e. before submitting a new one),\n- people usually search the mailing list when looking for support (and not the GH issue tracker). So there is a chance that we need to repeat things there after this issue is closed.\n\nSo please leave this open only if there is a real issue. Thanks.\n",
            "Any chance you hit the [QS length limit](http://stackoverflow.com/questions/812925/what-is-the-maximum-possible-length-of-a-query-string) ?\n",
            "Things you can try:\n- check the QS in the request profiler (Request Server Parameters)\n- trace the `Request::createFromGlobals()` method\n\nThere is no hard limit on the bag size.\n",
            "Are you looking for something like http://symfony.com/doc/current/cookbook/form/form_customization.html#adding-help-messages ?\n\n_Related topic: check #3147 which has been rejected for inclusion in the core. It is available in [SimpleThingsFormExtraBundle](https://github.com/simplethings/SimpleThingsFormExtraBundle)_\n",
            "> it doesn't works when I try to add the 'help' option of a new field in the formBuilder\n\nCould you elaborate ? What is the issue ?\n",
            "@raziel057 could you make sure there is a ticket in the doc (or create one) and link this good article there ? Thanks\n",
            "I was unclear: the code should throw an exception when an element is not callable, this is why `null` will not be supported any more (it is not a callback as the `setCallbacks` indicate).\n\nThey are several way to support the former behavior:\n- the cb can return a defined interface,\n- the cb can throw a defines exc,\n- by adding a `setIgnoredAttributes` method\n\nPlease also squash your commits.\n",
            "@meandmymonkey thank you for your work on this issue. Would you have time to add functional tests ?\n",
            "I think it should (throw an `AuthenticationCredentialsNotFoundException`). _btw there is an extra `sprintf` in the original code that could be remove when attempting to exit_ \n",
            "I agree and btw very good job on the tests !\n",
            "Could you squash the commits, prefix the commit message with `[SecurityBundle]` and add `(fix #2554)` at the end ?\n",
            "@fabpot this PR looks good to me.\n",
            "could it be a concurrency issue because tests are executed in different processes ?\n",
            "it's not needed but I find it more clear (It can be drop if a consensus is reached)\n",
            "`[]` are nice as they clearly indicate the ability to use multiple themes (which I think is yet to be documented). We'll pick the most popular syntax only.\n",
            "@stof @Tobion what about using the former syntax then ?\n",
            "Something like the latest commit ? (Tests have to be updated).\n\n@fabpot What is the best place to handle array / non-array ? This is currenlty handled in the node but the parser might be a better place.\n",
            "I tend to agree with @Tobion but I'll have a closer look at assetic to see if we can make things more consistent.\n",
            "@mvrhov that is not the good place to discuss this (both this particular issue and GH as this is a support request).\n\n_Have you tried `{% form_theme form.subForm ... %}`_\n",
            "Where do you think we should go:\n1. `{% form_theme form with [_self,  ::base.html.twig ] %}`\n2. `{% form_theme form=form src=[_self,  ::base.html.twig ] %}`\n\nLet's discuss the structure first & not the details (i.e. src vs templates).\n",
            "@fabpot removing the `with` will make `Parser::parsePostfixException()` scream when providing an array of themes.\n",
            "@jfsimon there are some issues with the CS (`CTE === $var`, some mis-alignment & typos in the phpDoc, ...), otherwise looks good.\n",
            "@jfsimon my mistake I should have commented the new PR not a closed one !\n",
            "I have been working with @towards: your PR is useful, please implement his comments and squash your PR.\n",
            "@fabpot this should be ready to be merged\n",
            "> There are lots of reasons to write a hasser that accepts an argument\n\nMay be can check for 0 args as we are already using reflexion ?\n",
            "`array('attr' => array('min' => ...))` should work. If it is the case you can open a PR to improve the doc.\n\nNote: min/max should be guessed from your validation constraints but I remember of a defect for integers.\n",
            "fixed by #4149, you should use the new [Size](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Size.php) contraint for collections.\n",
            "do you have `allow_add` set to `true` ?\n",
            "Could you provide: \n- the Sf version you are using\n- the generated markup in the gist.\n",
            "Please also add your view & controller.\n",
            "@phiamo rendering the form globally should be used for prototyping. You should render each field individually and then you have the control on the order.\n",
            "A few comments (I have just looked at this quickly, they might not be applicable)\n- Should the cache warmer be updated ?\n- I would like to see some tests exercising Bundle inheritance.\n",
            "For ref, I think the AsseticBundle might need to be updated also. \n",
            "The bundle inheritance was handled in `Kernel::locateResource` to be exact (I haven't check if this PR modifies this).\n",
            "URLType only adds the `default_protocol` scheme when none is given. What would want to do could be achieved with a `TextType` then.\n",
            "> Href in HTML also supports both formats\n\nSo you might close this ticket and open a new one asking to add a `HrefType`, or even better submit a PR.\n",
            "If views are moved out of the Resources folder you have to think of a way to override them in child bundles also.\n",
            "fixed by #3874\n",
            "I think there's one caveat left in the code as it is now that I will fix (nested prototypes).\n\nCould you please give me more details on the use case you are referring to ?\n\nYou do not have to use the new feature but It can be really helpful [here](https://github.com/symfony/symfony/pull/3225/files#L4R38) for example.\n",
            "What would be wrong then ? (that's the use case I link in my previous msg)\n",
            "Check the  more  part of the PR message.\n\nIn the linked use case, it would add a  defaults  server using the default host / port / weight. In this case I do not care about the name but the values are important to help alias the equivalent configs. You can override the  defaults  name by using a parameter.\n",
            "``` php\n<?php\n// [...]\n    ->arrayNode('servers')\n        ->addDefaultChildrenWhenNodeSet()\n        ->useAttributeAsKey('name')\n        ->prototype('array')\n            ->children()\n```\n",
            "@schmittjoh thank you for your feedback.\n\nmessage-2: \n- I think the first case is fine (children  1  to  5 ). Sometimes you just don't care about the names so it should not be forbidden.\n- I also think the second case is fine as you would write `foo: value` in your config file anyway.\n\nLet me know your thoughts about the previous statements.\n\nAgree to change when to if.\n\nmessage-1:\n\nWill change\n",
            "I think  IfNoneSet  is more accurate than  IfNotSet  ?\n",
            "message-2:\n- Agree on first point, will change\n- You could specify the keys in your config file if the prototype is an array (you used a scalar). Should we implement a switch in the validation (i.e. array / not array) or just go with numeric / null arg  as you suggest ?\n\nmessage-1:\n\n> Your example would refer to the children and read as  if none (children) have been defined, do ... \n\nQED\n",
            "@schmittjoh I have implemented your suggestions (other than the  NoneSet ). Let me know if you think this is ok. Thanks.\n",
            "@schmittjoh that would be a great addition but I think need some thinking (i.e. the name, `initialValues` ?, should we handle duplicates, how - in case we are not using attribue as key, ...) so let's make an other PR, I'd like this one to be merged asap as I need this for the Cache Bundle.\n\n@fabpot ready\n",
            "Closing this as the underlying defect has been resolved. BC break is not option here (A solution could be to support both the syntax).\n",
            "Because we must do our best to keep BC unless this is _really_ not possible in order to allow easiest possible version updates.\n",
            "see #3576 for an alternate syntax proposal\n",
            "btw @arnaud-lb any feedback on my last comment ?\n",
            "well actually what I meant was that `[\\w\\ ] === [\\w ]` in term or requirements (i.e. it is valid to escape spaces in regex). I think that both those reqs should generate the same thing in the apache file, ie: `RewriteCond %{REQUEST_URI} ^/test/([^\\w\\ ]+?)/$`, that is the space must be escaped.\n",
            "@Tobion The issue is that `RewriteCond %{REQUEST_URI} ^/foo/te st$` is not valid because of the space. So spaces have to be escaped (`RewriteCond %{REQUEST_URI} ^/foo/te\\ st$`), there is no issue with other chars.\n",
            "@arnaud-lb \n\n```\n    RewriteCond %{REQUEST_URI} ^/ba\\\\ r$\n    RewriteRule ^(.*)$ index.php [QSA,L]\n```\n\nwould not match the URL  /ba r  on my system, but the following would:\n\n```\n    RewriteCond %{REQUEST_URI} ^/ba\\ r$\n    RewriteRule ^(.*)$ index.php [QSA,L]\n```\n\nwhich explains how escaping [was implemented before](https://github.com/arnaud-lb/symfony/commit/6465a6987a8bfedc2c8d983eef7e30bbb4bebdce#L0R60).\n\nIf I understand your comments correctly it does not work the same on your setup. It is weird that the behavior is not consistent across all setups but at least the former solution (escaping spaces only when they are not already escaped) works for both our setup so I think it should be re-introduced.\n\nWhat do you think ?\n",
            "Ok so I think I got confused because we don't have the same expectations on the requirements then.\n1. Requirements are Regexs\n2. In PCRE patterns both     and  \\   match a space\n3. If my requirement is  fo\\ o  you should consider that I want to match the path  fo o  (the requirements should be  fo\\ o  to match  fo\\ o )\n",
            "@arnaud-lb should I submit a PR to this branch to revert the changes on regexp escaping ? do you handle it ?\n",
            "@drak thanks for your feedback. I was referring to things not related to session only (i.e. `default_port`)\n",
            "Any values not related to section management only [here](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeMemcachedSessionStorage.php#L66) and [there](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/Session/Storage/NativeMemcacheSessionStorage.php#L66)\n",
            "@drak It is possible that I am wrong, I have not looked at the details.\n\nWhat if the NativeMemcacheSessionStorage modify the ini value of `memcache.default_port` and any other memcache driver rely on the php.ini value of `memcache.default_port` ?\n\nTo me the storage can update a global value by using `ini_set` and may have side effects. (Sf uses different memcache driver implementations: one for the session, one for doctrine, one for the profiler storage, ... until we have a unified cache).\n\nLet me know if / where I am wrong in the above example.\n",
            "> While it's not particularly relevant to this ticket, even though the caching system may be unified in Sf2, it doesnt mean all caching would necessarily be done by one Memcached instance, quite the contrary - for sessions certainly you almost certainly will want different configuration settings.\n\nI agree with this but still do not get the rest of your message.\n\nLet's say the NativeMemcacheSessionStorage modify the ini value of `default_port` and then I create a separate `Memcache` instance (i.e. for Doctrine) and connect without specifying the port as I rely on the php.ini settings. According to [the doc](http://fr2.php.net/manual/en/memcache.ini.php#ini.memcache.default-port) the port will be set to whatever the ini value is which as you said has certainly a different config.\n\nWhere am I wrong ?\n",
            "@drak has mentioned your account by mistake in this thread, sorry for that. You can disable the notification at the bottom of this page.\n",
            "@drak Have I ever mentioned reading the ini values in my messages ? No, the code would only rely on the ini values set in your php.ini.\n\nI think was is wrong is to change global settings (the ini values) w/o considering side effects.\n",
            "I said:\n\n> [...] and **connect without specifying the port** as I rely on the php.ini settings. According to **the doc** the port will be set to whatever the ini value [...]\n\nAnd this is what the linked docs says about ini values:\n_memcache.default_port: The default TCP port number to use when connecting to the memcached server if no other port is specified._\n",
            ">  Yes, default_port does affect $memcache->connect('localhost') (no port specified) scenario as it configures the default for the method,\n\nAgree, so there is a problem no ??\n\n> but the ini settings do not interfere with separately configured instances is what I meant.\n\nI don't understand what a  separately configured instance  is.\n\n> HttpFoundation is a standalone component and must work as a standalone component not just in the context of Sf2 Framework, with or without a caching Symfony component. It is therefor essential that the configuration capability remains - this is definitely not a bug\n\nI agree but configuration capability does not mean messing with global values\n\n> In the case you specify, regardless of anything, the ini setting set's the default port, so if that happened to be set up differently in the php.ini you'd still have the same  problem \n\nDisagree, php.ini is the place where you expect settings to be not, you do not expect they get changed deep inside your code.\n\n> It's basically not a problem\n\nDisagree, you mention that my use case gets affected.\n\nOk let's close the discussion (not the issue) for now, we are not making any progress. I'll look at it again when working on the cache.\n\nOnly one last question: what is your use case when you need to set ini value of the default_port ?\n",
            "4208 covers some of the concerns raised here.\n",
            "You should be able to use the profiler in prod (by design). In such a case you should configure the request matcher to restrict profiling to some ips / paths.\n\nYou should not be forced to enable all the collectors under this condition.\n",
            "This is by design. Form do not (and can not) support what you call  virtual  fields. see [PropertyPath](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Util/PropertyPath.php).\n",
            "I am still wondering if the second commit is a good idea or not ?\n",
            "@stof isn't the branch based on the latest master ?\n",
            "I did fail.\nShould be ok now.\n",
            "Thanks all for the feedback.\n\n@fabpot ready !\n",
            "Well I did revert the use of  `isajax`  (prefer not to mix CS here, the scope of this PR is not to fix CS) because it is not used (this should be applied to the Doctrine profiler).\n\n_What I mean is that `isajax` in all the Sf templates w/o the associated js is useless, basically all or nothing_\n",
            "btw @fabpot it makes me wonder if underscored variable names is a good idea, this will force us to mix (i.e. `is_ajax` vs `request.isxmlhttprequest`). What do you think ?\n",
            "At a larger scale how do fix the inconsistency described in my previous message ? \nOptions are:\n- fix twig cs\n- create twig cs specific to sf2\n- don't fix (= keep & live with some inconsistency)\n",
            "I agree but then we loose one advertised benefit a twig: _ Easy to learn: The syntax is easy to learn and has been optimized to allow web designers to get their job done fast without getting in their way _. \n\nThe designers should now be aware of the underlying implementation (i.e. Am I dealing with a variable or a function ?)\n\nEdit: race condition here... I agree with @stof\n",
            "I think that the beauty of Twig comes from the fact that designers do not have to wonder if  something  is an array / an object / a variable / a method / a property.\nBut never mind, I'll update the PR.\n",
            "@fabpot would you mind if I open a PR against twig to check for existence of `collector::getNotCalledListeners()` when a designer writes `collector.not_called_listeners`, then we are all happy ?\n",
            "ready !\n",
            "@fabpot I understand and as I am not a dsesigner I can leave with the current CS.\n",
            "Can't GET requests have a body ?\n",
            "They [can](http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.3) and that would have explained the uri. However it does not seems to be the case here looking at the code.\n",
            "`X-ChromePhp-Data` seems to be yet another case, see #3401\n",
            "@evert I can understand your problem with `MS-Author-Via` being rewritten `Ms-Author-Via` but I fail to see the issue with `X-Content-Security-Policy` could you please give more details ?\n",
            "Is `Ms` still a problem ?\n",
            "Ok my question also still stands, could you please give for all the faulty headers what you expect, what the output is and where is fails so that we can fix this. Thanks.\n",
            "Ok thanks for your reply, I am closing this for now then, feel free to re-open if you encounter a specific issue. \n",
            "Well you've lost me... is there an issue or not ?\n",
            "No pb, thanks for your feedback. We'll handle issues if/when they arise.\n",
            "What is you Sf version, what was it  before , what is your controller code, what is your model ?\nIdeally if you could isolate your issue and share it via a gist it could also help.\nThe code has recently changed, have you looked into the doc repo (either merged or pending PRs) ?\n",
            "2.1.0 is not a version nor master branch (which is moving). Please provide a date or a sha1, the form component has changed a lot lately. Have you checked the doc repo ?\n",
            "Does https://github.com/symfony/symfony-docs/issues/999 help ? \n",
            "And what is the outcome ?\n\nYou can also check #3256 (and the linked PR)\n",
            "are you using `git bisect` ?\n",
            "see https://github.com/symfony/symfony-docs/issues/1057\n\nyour `setTags` method is probably not called any more as you now have an adder (check the code mentioned above #3256 and the doc). However `addTag` should be called.\n\nedit: you should not need to call `setTags` in your controller any more after this commit.\n",
            "Can you trace the code in `MergeCollectionListener` to see what happens ?\n",
            "Seems you are making good progress on this.\nCould it be https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Doctrine/Form/EventListener/MergeDoctrineCollectionListener.php ?\n",
            "Seems like your issue is with the validation:\n\n```\n     * @Assert\\Collection({\n     *       name  = @Required()\n     *  })\n```\n\n`name` is not a field of `Task`, you probably want to use validation cascading here.\n",
            "Hum... there seems to be an issue setting the task\n\n``` php\n<?php\n        if($this->getRequest()->getMethod()=='POST') {\n            $form->bindRequest($this->getRequest());\n            if($form->isValid()) {\n                var_dump($task->getTags());\n            } else {\n                var_dump($form->getErrors());\n            }\n        }\n```\n\n```\nobject(Doctrine\\Common\\Collections\\ArrayCollection)[43]\n  private '_elements' => \n    array\n      1 => \n        object(Ibrows\\TaskBundle\\Entity\\Tag)[207]\n          protected 'id' => null\n          protected 'task' => null\n          protected 'name' => string 'first' (length=5)\n      2 => \n        object(Ibrows\\TaskBundle\\Entity\\Tag)[347]\n          protected 'id' => null\n          protected 'task' => null\n          protected 'name' => string 'second' (length=6)\n      3 => \n        object(Ibrows\\TaskBundle\\Entity\\Tag)[370]\n          protected 'id' => null\n          protected 'task' => null\n          protected 'name' => string 'third' (length=5)\n```\n",
            "@bschussek doesn't the issue comes from\n\n``` php\n<?php\n    public function onBindNormData(FilterDataEvent $event)\n    {\n        $originalData = $event->getForm()->getData();\n        ...\n    }\n```\n\nShouldn't the `$originalData` been retrieved on the PRE_BIND event ?\n",
            "yep I realized after looking at the what I dumped in comment^2 and seeing that the adder was not called at my comment^\n",
            "@stof I would also tend to favor 2 or 3\n",
            "The issue occurs because the service gets inlined and the `RegisterKernelListenersPass` is of type `TYPE_AFTER_REMOVING`.\n\nOne solution I can think of is to prevent tagged (read any tag here) services from being inlined. This would be safe but would prevent some optimizations. \nThe other solution I can think of is about the same but restricting the service list based on a white/black list.\n\nThe second option allow for more optims but might be error prone (blacklist) or require extra-work for tag implementors (whitelist).\n\nThere might be other solutions but I don't know this part well.\n",
            "So suggestions ?\n",
            "This (after removing) has been introduced in 3749ad43f48fbe718a1999ecd3e54d7803e4f11d \n",
            "@schmittjoh could you expand your POV, why is failing silently a feature ?\n",
            "Still don't get why enabling a listener by changing the visibility is a desirable feature (vs adding a tag) ?\n",
            "@schmittjoh \n- To make things consistent, see the original example and [the collector definitions](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Resources/config/collectors.xml) where all services are private unless the one which have the event tag;\n- More globally to prevent WTF when setting a tag on a private service.\n\nDo you think moving the compiler pass would be a huge break (i.e. Do you know a lot of use case where people use the feature of making a service private to disable a listener ?)\n",
            "The well named  issue tracker  is for issues. Questions should be asked on the [user ml](https://groups.google.com/forum/?fromgroups#!forum/symfony2).\n\n_You should install the [standard distro](https://github.com/symfony/symfony-standard) and read its docs._\n",
            "your second url just doesn't match your route !\n",
            "I would suggest to close the issue and read the [doc](http://symfony.com/doc/current/reference/configuration/framework.html).\n",
            "Yep, I see **[2.1]** there !\n",
            "Set the default port as in the doc and close the issue then.\n",
            "If you look at the doc you will see the way to set the default port.\nYou are setting the port for matching routes, the default is 80 which is the root cause of your issue.\n",
            "Seems like I have sopken too fast... sorry\n",
            "@pdaether Could you dump you definition for the router service (i;e. `protected function getRouterService()` in the container); Can't reproduce with 2.1.\n",
            "Your `matcher_base_class` looks good, I'll try to switch to 2.0.9 later today.\n",
            "You should check `Symfony\\\\Bundle\\\\FrameworkBundle\\\\Routing\\\\RedirectableUrlMatcher` and its parent class\n",
            "@pdaether that would be great if you can contribute a note or a cookbook entry to the doc, I also found the following with a proposed solution: http://forum.modrewrite.com/viewtopic.php?f=10&t=39684\n",
            "May be you should set up a very simple test case to determine what the issue exactly is and how it can be solved.\n",
            "I think it should actually be the other way around: it should not accept arrays & should throw an exception when loading the yaml (to make it consistent with xml).\n",
            "Task for the BHD: update the YamlFileLoader to check for scalar types (in order to be consistent with the XML format), add unit tests.\n",
            "Great !!\n\nTwo suggestions:\n- make  add  and  remove  configurable,\n- introduce a base class for the remove listeners with (final?) `::getSubscribedEvents()` and `::getEventPriorities()`\n",
            "@bschussek my point is that I can stand hard-coded priorities which are error prone. A better solution might be to introduce constants (in `FormEvents` / `FormEventPriorities` ?) with meaningful names.\n",
            "@bschussek doesn't each form has is own dispatcher so there is no need for a global registry here, something local to the form could be good enough.\n",
            "Constants.\n\nI agree it is still not perfect but it could be a little more future proof for those bundles if they rely on well named constants.\n",
            " @fapbot  ;-)\n",
            "@bschussek Do you think there is an use case for `$allowDelete = false;` with only an adder on the object (and the opposite) ?\n",
            "@bschussek (Y)\n",
            "Great !!\n\nTwo suggestions:\n- make  add  and  remove  configurable,\n- introduce a base class for the remove listeners with (final?) `::getSubscribedEvents()` and `::getEventPriorities()`\n",
            "@bschussek my point is that I can stand hard-coded priorities which are error prone. A better solution might be to introduce constants (in `FormEvents` / `FormEventPriorities` ?) with meaningful names.\n",
            "@bschussek doesn't each form has is own dispatcher so there is no need for a global registry here, something local to the form could be good enough.\n",
            "Constants.\n\nI agree it is still not perfect but it could be a little more future proof for those bundles if they rely on well named constants.\n",
            " @fapbot  ;-)\n",
            "@bschussek Do you think there is an use case for `$allowDelete = false;` with only an adder on the object (and the opposite) ?\n",
            "@bschussek (Y)\n",
            "May be only because you are not using the  POST  method to access /register/create ?\n",
            "Then this is due to `$this->get('router')->match('/register/create');` what do you expect from this code ?\n",
            "I fail to see what you mean and what your are trying to do.\n\nAre you trying to get the posted params with `$this->get('router')->match('/register/create');` ? \nIf this is the case, you should get them from the `Request` as described in the [doc](http://symfony.com/doc/current/book/forms.html#handling-form-submissions). If it is not the case, please detail what you are trying to do, what you expect and what you see so that I can help more.\n\n_You can close this issue as it is not an issue and we continue discussing in this thread_\n",
            "This is definitely not a bug.\n\nCould you exlpain me (plain words) what you are trying to do with `$route = $this->get('router')->match('/register/create');` ?\n",
            "May be you are trying to do this ?\n\n``` php\n<?php \n    /**\n     * @Route( /new , name= my_new_route )\n     */\n    public function registerAction()\n    {\n        return array('route' => 'my_create_route');\n    }\n\n    /**\n     * @Route( /create , name= my_create_route )\n     * @Method({ POST })\n     */\n    public function submitRegistrationAction()\n    {\n    }\n```\n- `$this->render('MyBundle:MyController:new.html.twig'` is not required the FrameworkExtraBundle (This is wrong here as you would have to name your template `register.hmtl.twig` or use the `@Template` annotation.)\n- When not specified a default route name is generated (see the doc for more info)\n- `return array('route' => 'my_create_route');` is useless as you could set `my_creat_route` in your view. It is printed here to match your original code.\n",
            "You are welcome.\n\nAs a reminder, before posting an issue:\n- first check the [Sf2 doc](http://symfony.com/doc/)\n- then ask your question on the [user ml](https://groups.google.com/forum/#!forum/symfony2)\n- finally enter an **issue** if you still think there is an **issue** in the Sf2 code\n",
            "To avoid overlap: I am working on the configuration.\n",
            "I have finally found some time to work on this. I have just pushed a quick & dirty proto to offer a preview of what this bundle could become. Ideas are welcomed, things should change often & quickly.\n",
            "anybody (@stof, @dlsniper ?) feel free to submit PRs, I am done for today. I would prefer if we can discuss before breaking the current architecture but there are many things to do anyway.\n\nIn the future we can sync if anybody want to give some help, we can work on a todo list if needed. \n",
            "A quickly drafted [todo list](https://github.com/vicb/symfony/wiki/%5BTODO%5D-CacheBundle)\n",
            "I am not going to work on this before next week, so feel free to pick some items on the todo list to tackle them if you feel like.\n",
            "@lsmith77 this has been left in an intermediate state for now, not sure if is worth merging anywhere as it is (i.e. I have made [changes to the config component](https://github.com/symfony/symfony/pull/3403) that should be used here).\n",
            "please don't merge for now. good question. bad answer.\n",
            "While first commits were focused on problem solving, the last brings a clean API with the ability to re-open an existing section in order to add events (re-setting event origins and merging them were just hacks).\n\nShould be ready to be merged.\n\n_Edit: Sorry, couldn't resist adding a private helper class again!_\n",
            "Once again PSR-0 is about autoloading which is exactly why I do not want in such cases. CS are an other matter and yes I think they should be changed to allow this (and I am going to submit a PR right now).\n\nThe only argument I could accept is whether this class should be private or not.\n",
            "Thanks for your valuable feedback @stof\n",
            "my bad, should be ok now.\n",
            "http://help.github.com/line-endings/ might help\n",
            "``` php\n<?php\n$dirs = Finder::create()->directories()->in('/test/'); // sub1, sub2\n$dirs2 = Finder::create()->directories()->in('/test2/'); // sub3, sub4\n```\n",
            "@alexandresalome you probably refer to an [older implementation](https://github.com/symfony/symfony/commit/b46114a0f67da3338aa6728f33d20fb11c4da59c) which was storing the info for each request and has already been abandoned. One advantage was to produce accurate results across apps & envs (what about imported profiles now for example)\n",
            "Ready on my side:\n\nBasics:\n- no more dedicated panel for the routing (and no more useless routing collector),\n- the routing info is displayed on the request panel and loaded using ajax.\n\nExtras:\n- added some base JS that can be re-used across panels\n- added the concept of panel pages.\n\nBoth those features could be used to factorize some code in the [recent Doctrine panel update](https://github.com/doctrine/DoctrineBundle/pull/15/files).\n",
            "Please do not merge yet (see #3264)\n",
            "@fabpot I am not sure if what I put in the RouterDataCollector really belongs here rather than the RequestDataCollector ?\n",
            "@stof this is a WIP not clean yet. No need to check CS for now !\n",
            "I'll reopen distinct PRs for the sake of clarity.\n",
            "The [Extension](https://github.com/doctrine/DoctrineBundle/blob/master/DependencyInjection/DoctrineExtension.php#L287) has some phpDoc describing the options.\n\nClosing as you've said it is solved.\n",
            "The fix is now in master 70532ca4a7c8f74dc726a69a7defc802b80d8a32.\n",
            "I have only looked at this quickly but you might want to look at the folowing: \n\n`{% block _adtype_imageFile_row %}` has been called while rendering the adtype_imageFile widget. \n\nCalling is `{{ form_widget(form) }}` inside your block is like a recursive call so it will not render the parent sections but start over from the current section see [the form extension](https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Extension/FormExtension.php#L235).\n\nMore details in the [corresponding PR](https://github.com/symfony/symfony/pull/1369).\n\nWithout this PR your template would have caused an infinite recursion. See [this](https://github.com/symfony/symfony/pull/1369/files#diff-33) for an example of what the PR made possible.\n\nIf this turns to be the root cause could you please:\n- check if this is documented\n- if not check if there is a defect pending in the doc\n- if not create an issue for me to document this on sf docs\n",
            "This is not an issue but a support request now so please read the doc, ask your question on the user list and if this turns to be an issue come back here.\n- Please close this issue,\n- Do not forget to specify the Sf2 version you're using when asking questions on the ML,\n- You should also consider contributing the doc once you've got a response (if it is not there)\n\n_(i don't have your reply on top of my head, the proto rendering has been changed by @marcw some time ago)_ \n",
            "Looking 2e1344eb7ef1e4a6c5cc21e098fd2a6404f2b289 I assume it is indeed a defect.\n\nIt would be good to add tests to the `RouteCollection` class & dumpers.\n",
            "This is because Sf2 supports multiple engines (and this is not related to Twig itself)\nThe templating engine to use is selected by the last part i.e. `name.format.engine`\n",
            "@henrikbjorn it actually [does](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Templating/TemplateNameParser.php#L61) but [then](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/TwigBundle/Loader/FilesystemLoader.php#L73) uses a regular Twig loader to look for the file.\n\n@lazaridis-com this means that what you are looking for is possible out of the box. You have to create a template loader service (i.e. `\\Twig_Loader_Filesystem`), add the paths (by calling `setPaths()`) and configure the templating system to use this loader.\n",
            "Let's clarify this issue (look at the [FileSytemLoader](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/TwigBundle/Loader/FilesystemLoader.php)):\n\nWhen you try use a template which name pattern differs from `bundle:controller:file.format.engine` then you will fallback to the [Twig Loader](https://github.com/fabpot/Twig/blob/master/lib/Twig/Loader/Filesystem.php).\n\nSo as of today the error message is not so bad: it assumes you are not using the symfony syntax so it only print that the file could not be found.\n\nMay be there is a little room for improvement by adding more precision to the error message, something like  Either you have specified an invalid template name or the template can not be found .\n",
            "I see no issue - at least not in the framework.\n",
            "Maybe `[,.]*[0]*` could be replaced by `(?:[,.]00)?`\n",
            "Sorry but I really don't know _(I am not that interested in decimals when speaking currency !)_\n",
            "Good doc always help and should be accepted even for private properties.\n\nHowever sometimes doc isn't necessary: `The digest algorithm to use` does not bring more information than the name itself `MessageDigestPasswordEncoder::algorithm`, the `@var`  annotation could be useful - even more for objects & arrays.\n",
            "That's an issue with the [Type Guesser](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Validator/ValidatorTypeGuesser.php#L274) which has obviously not been designed to work with floating point number.\n",
            "@studip101 isolating the faulty code and sharing it (i.e. in a gist) might help people helping you.\n",
            "It should be reported against sf-std.\nI think I saw this issue before because the http transport does not really like big packets. You might try with the git transport (I don't think there's an option there yet, so that would be a find & replace)\n",
            "@alexandresalome do you think it is really not possible to modify the bridge to pass global vars ? (I haven't check)\n",
            "@stof thanks for the valuable feedback I think most of it should be implemented should we use this solution.\nThe one thing I don't agree is PSR-0, I don't want this class to be public, that's is just a  private  helper class.\n\nThere are also missing type hints in the helper class, that should be added.\n",
            "What  standard s ?\nPSR-0 is about auto-loading, I don't want/need this to be autoloaded.\nSf coding standards ? Well relying on a developer reading the doc is more error prone than the current implementation. I sometimes favor pragmatism over theory.\n\nedit: I am not trying to say I am right here but only that I don't see any added value in moving the helper class to a dedicated file. I appreciate any feedback, really.\n",
            "@alessandro1997 if you need an example on why it is not safe to rely on developers reading comments, see #2892\n",
            "@fabpot I am waiting for your feedback on the [proposed API](https://github.com/symfony/symfony/pull/3035/files#L1R57) before finishing this PR.\n",
            "What would be a good reason not to allow  private  classes ?\nIf the Sf coding standards are the only good reason let's change them then.\n\n[Java](http://stackoverflow.com/questions/968347/can-a-java-file-have-more-than-one-class) and [ActionScript3](http://livedocs.adobe.com/flex/3/html/help.html?content=03_Language_and_Syntax_05.html) allow such construction\n\nI would no say any better than the above link on Stack Overflow:\n\n> The purpose of including multiple classes in one source file is to bundle related support functionality (internal data structures, support classes, etc) together with the main public class. Note that it is always ok not to do this -- the only effect is on the readability (or not) of your code.\n",
            "@stof by definition you do not want a  private  class to be autoloaded anyway.\n",
            "@alessandro1997 you are absolutely right, it's not meant to be instantiated from the outside (it's **private**). You could argue the same with private properties & methods (using Reflection). Dead-end.\n\n@stof Is unserializing really an issue as the file would have been loaded already ?\n",
            "For BC I have to check #3012 again but at some point if I remember correctly the public API had changed (not sure about the latest version in your branch)\n\nBy introducing the private helper class, it is quite easy to see that the public API is not modified by this PR.\n\nNext steps:\n- Stof the code,\n- Add/fix phpdoc,\n- Add tests for the helper class,\n- Add/refactor tests for the `Form` class.\n\n@fabpot if you agree with the above steps it could be ready sometime next week.\n",
            "Which leads to the question: should we consider this as a change in behavior (2.1) or a bug fix (2.0) ?\n\n_I am thinking of a form with multiple fields named `field[]`_\n",
            "Should be ready now, let me know when I should squash after review.\n",
            "@fabpot done\n",
            "see also [the commit comments](https://github.com/symfony/symfony/commit/789d5ad20f5d3e63265b361c8c16230c2c070a96#comments) for ref.\n",
            "closing as the change has been reverted in c819d84d695fea89f49815cedf90093e532d2bee\n",
            "it was working (not tested with 1.4.0 but @yethee seems to have tested from his comment) so that is a regression\n",
            "Yep, that's a real issue, see this compiled template:\n`echo $this->env->getExtension('form')->setTheme($this->getContext($context,  form ), array(( SensioDistributionBundle::Configurator/form.html.twig  .  SensioDistributionBundle::Configurator/form.html.twig ), ));`\n\nShould be filled against twig.\n",
            "I have submitted [an issue](https://github.com/fabpot/Twig/issues/580) for Twig this one can be closed.\n",
            "> Changing the data after binding is not a good idea\n\nI agree so we should throw an exception when trying to do so.\n",
            "Should this be closed ?\n",
            "+1. I would really to see this happen to ease leveraging the future Cache Component (currently APC is the only supported backend).\n",
            "related issue #3179\n",
            "+1. I would really to see this happen to ease leveraging the future Cache Component (currently APC is the only supported backend).\n",
            "related issue #3179\n",
            "Closing this issue as the solution has been provided by @phiamo.\n",
            "@OlivierCuyp have you solved your issue ?\n",
            "`console` is executable (755) in the 2.0 branch of symfony-standard and it should have been reported there or against the doc. So closing.\n",
            "I would say  Backwards compatibility break: yes  i.e.tests have been modified.\n",
            "@stealth35 https://github.com/symfony/symfony/pull/2892/files#L2R46\n",
            "Well, same inputs, different outputs, this is a compatibility break to me.\nBut however it is named we should not change the behavior of this class; Client values are values as passed by the client you should no try to guess them.\n",
            "I am referring to the difference in behavior between the current implementation and the version in this PR.\nThey do not behave the same and that's why the tests have been modified.\n",
            "To make it clear I strongly disagree with the modifs in this PR. Available to help if needed.\n",
            "@stealth35 I don't think we can bypass the `move_uploaded_file` security check - which is good. Is there any interest in this PR w/o this ?\n\nIf no we should just update phpDoc comment and remove the FIXME (meaning we can not override the `$_FILES`).\n",
            "@stealth35 what about adding some unit tests ?\n",
            "by creating a `protected getRequestOrder()` method or something like this ?\n",
            "This would only test one case.\n\nSome thoughts about your snippet:\n- The init should probably be `$request->initialize(array('foo' => 'get'), array('foo' => 'post'));`,\n- `$request_order` does not take into account `variables_order.ini`,\n- missing `strtolower`\n",
            "and change `$request_order` to `$requestOrder` as suggested by @henrikbjorn I can't find where\n",
            "Closing this is a support request & fb authentification is not provided by Symfony. \n",
            "@Seldaek There is a collision here only because the [normalization](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/TwigBundle/DependencyInjection/Configuration.php#L86) allows `foo: { key: bar }` instead of `foo: {id: key, value: bar}`.\n\nClosing this then as the issue is not with `useAttributeAsKey` nor `fixXmlConfig`.\n\nYou might want to re-open a new ticket to fix the normalization part.\n",
            "@Seldaek you are right in the sense as there is a real issue here.\n\nHowever the root cause is not `useAttributeAsKey` nor `fixXmlConfig` but the normalization as I explained in my previous comment. There could be no collision if you don't mess with normalization.\n\nThe purpose of the config is to abstract the difference of the format (mainly yml vs xml) and so I don't think it's desirable for it to  realize whether it uses xml or not .\n\nTo me the problem here is only a mis-usage of the Config component. And whatever you come up with, a mis-usage would virtually still be possible as you can run arbitrary code in the normalization.\n\nMy recommandation: close the defect ( useAttributeAsKey and fixXmlConfig also apply to non-XML config files  is not an issue) an open a new one for the Twig bundle globals normalization.\n",
            "> Fixing WTFs should be our top priority if we want to build a user friendly system\n\nI agree, just saying WTF is not where you think here.\n\n> And I'm still not sure I get your point about the normalization..\n\nWithout the normalization you can not have a `key` key (only `id`, `type` and `value` keys). The `foo: { key: bar }` vs `foo: {id: key, value: bar}` thing of one of my previous comments.\n\n> Have you checked my test case?\n\nYes, same flaw there, you use an attribute that has the same name as of one of the children. We can add a check in the ArrayNodeDefinition to prevent this particular case - but there is no way to check what you do in the normalization.\n",
            "Making the config format aware is going the wrong way, that would mean more complex definition, format specific tests (see my PR)\n\nI am going to repeat myself once again (but for the last time I promise):\n- There is no flaw in the Config cmp,\n- The bug is caused by the normalization,\n- Whatever you forward to whoever you will probably be able to mess things up as you can run arbitrary code.\n\n@Seldaek please put your feedback in the PR.\n",
            "I am not sure if playing with the `types` is the best we can do. I have to check but I won't have time before next week.\n",
            "@Misiur what do you mean exactly ?\n",
            "@Misiur options are used currently to set the compiler class only, could you tell more about your use case ?\n",
            "good to know @stof, thanks.\n",
            "@idetia could you link your listener code and config + security in a gist ?\n",
            "@idetia I am closing the issue as @stof has just provided the solution. Please post a coment if it does not work.\n",
            "fixed by #4149 (and the [Size](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Constraints/Size.php) constraint)\n",
            "@dinamic this value could be forged so sanitization is required.\n\nCould anyone submit a PR with the fix suggested by @stealth35 + unit tests.\n\nThanks.\n",
            "The purpose of the sanitization is not the make the name bullet proof but to prevent security issues (there is no way to prevent a developer from using it even if he must not) - the $originalName can still contain reserved characters or be a reserved name.\n\n`getClientOriginalName()` already has a warning in its phpDoc: `Then is should not be considered as a safe value.`\n\nWhat would be the advantage of having access to the unfiltered name ?\n",
            "The sanitization removes the path segment and leaves only the basename. I have just re-tested (w/ chrome & ff) and only the basename is sent by the browser, meaning that the sanitization is transparent and will only have an effect on forged values.\n\nThere must be something I don't get ?\n",
            "> Dunno, I just hate it when there's a restriction which might cause a bug in your application and you can't get the raw value and process it by yourself. Right now, we have multiple opened issues because of this and I cannot implement a workaround without actually modifying the sf2 code or completely handle the upload process, validation and entity creation by myself.\n\nAs stated in my last comment, you'll get the raw value unless someone forges a request, how could that cause issues ?\n",
            "@dstosch any update on this issue considering the hint from @alexandresalome  ?\n",
            "@stealth35 this does not solve the [double extensions](http://www.acunetix.com/websitesecurity/upload-forms-threat.htm) issue.\n\nTo be secure, you **must** disable the [php engine](http://php.net/manual/en/apache.configuration.php) for directories containing uploaded files.\n",
            "and the best practice is also never to rely on the uploaded filename (i.e. you should rename the to `<UID>.png` in your case)\n",
            "I am not sure if this is feasible, may be the best would be to add a cookbook entry with some security guidelines ?\n",
            "@ruimarinho an entry dedicated to security might be worth on its own. Some of the things that have (or not) been discussed here must be handled well before the deployment.\n",
            " @dlsniper thanks for investigating this. 2963 has been submitted against master instead of 2.0 and is not mergeable (it has to be rebased). I'll have a deeper look later.\n",
            "Probaly related to #1369, I have to check.\n",
            "@drak online banking is a great example here: my online bank used to logged me out automatically after 5min or so which was very annoying some times. \n\nWhat this issue propose is to change this to be automatically logged out after 5min **of inactivity** (you can check your account for 1h provided your are active at least once every 5mn).\n\nI don't think #3659 solves this ?\n",
            "@schmittjoh could you give the ref to your PR / branch ?\n",
            "Do you remember the reason why this was rejected by any chance ? (I can't find the closed PR with GH)\n",
            "#1313 ?\n",
            "So I guess the problem was mainly that the PR has 2 not related commits (am I right here ?) + some mis-understanding. Would you mind opening a new PR with the second commit only ?\n",
            "I can do that if you confirm that the first commit is not required.\n",
            "@atrauzzi closing this as tags are only intended to be used during the DIC construction as explained by @stof. What you need could probably be implemented in a generic compiler pass.\n",
            "What about a cookbook entry, this is a recurrent use case.\n",
            "Task for the BHD: check if the issue still exists in 2.0 / 2.1\n",
            "@stof should we close this one ?\n",
            "@mvrhov did #3564 fix your issue ?\n",
            "Task for the BHD: check if this issue still exists in 2.0 / 2.1\n",
            "Task for the BHD: update the associated PR #3551 (there are some comments there)\n",
            "There will be something, see https://twitter.com/#!/fabpot/status/178502663690915840\nThe blog post only lists issues (not including PRs)\n",
            "Task for the BHD: guess collection for both Doctrine arrays & `@Assert\\Type(type= array )`\n",
            "Should this be closed now ?\n",
            "Have you tried '%%' ?\n",
            "For record you can also set the format in xdebug.ini: `xdebug.file_link_format=...`\n",
            "Could be linked to https://github.com/symfony/symfony/pull/1603... I am going to check\n",
            "The issue with your first example is that the generated routes have the same name. A workaround would be to provide a name for at least one route.\n",
            "I'll propose a fix - both Symfony and FmwkExtraBundle are impacted.\n",
            "The PR for Sf2 is here: https://github.com/symfony/symfony/pull/1650\n",
            "It seems to work now. @vlabmichl Please re-open if not solved.\n",
            "This is not a regression but an expected behavior, see https://github.com/symfony/symfony/pull/1369\n\nThe rationale is that a row contains both a label and a a widget. Should `attr` be applied to the widget or/and the label ?\n\nOne solution is to expand the row (i.e. render the label, errors and widget manually).\n\nOne other is to override the `form_row` fragment in order to always forward `attr` to whatever sub fragment.\n",
            "I have just submitted a PR on composer to workaround the issue (961 just above). I would appreciate if people experiencing the issue with the former autoloader could test the workaround and provide feedback (the best place is probably on the composer issue tracker).\n\nThanks\n",
            "I am not sure if the Doctrine team should be responsible for unifying the cache across Symfony. This should rather be handled in Symfony and used by Doctrine.\n- It is outside of the scope of the Doctrine team to unify the cache mechanisms in Symfony,\n- We could add more functionality that what is strictly required by Doctrine,\n- Caching is important and should really be part of the framework.\n",
            "@stof the idea would be to use doctrine common for the low level cache drivers but I still think the bundle should be handled by Sf and could provides more functionality that what is strictly needed by Doctrine.\n\n_(But yes we should also probably consider having a  Symfony cache  with some kind of adaptors for Doctrine during the design phase)_\n",
            "On my side I haven't made of lot of progress (except [a few PRs against doctrine common](https://github.com/doctrine/common/pulls/vicb))\n\nMy vision ATM:\n- Having a CacheBundle with some CacheFactories (a la [SecurityBundle](https://github.com/symfony/symfony/tree/master/src/Symfony/Bundle/SecurityBundle/DependencyInjection/Security/Factory)) which would allow creating cache services,\n- Update others bundles (doctrine, framework - validation & annotation, ...) to make use of those services.\n\nWhy cache factories ?\nIt might help for cache services relying on a client / server mechanism (i.e. memcache). More generally it would help abstracting the configuration difference amongst cache drivers.\n\nShould we use the drivers from Doctrine2 ?\nThat might be a good starting point but once we have something running, we should may be consider creating a Cache component. Doctrine2 has specific needs that might not fit with a generic solution.\nIf we stop using the drivers from Doctrine then we should develop some adapters (which should be simple).\n\nThe bundle from [Liip](https://github.com/liip/LiipDoctrineCacheBundle) is probably a good starting point. Ideally in the config `id` should `server` which could be either a service or an array (ip, port, timeout, ...) - your or any other bundle might be good as well but I haven't had time to look at them.\n\nThat is my POV. \n",
            "@winzou May be the more important is that somebody start something, what about you ?\n",
            "@pulzarraider @dlsniper what about using doctrine common for now and focus on the bundle ? _(see my previous msg)_\n",
            "Changing a namespace is not a problem, re-develop a working solution is a waste of time.\n",
            "Right, so we'd better stick to the `<script>` type templates.\n\nThe latest commit render nested proto as:\n\n``` html\n<script>\n    <$script>\n        <$$script>\n        </$$script>\n    </$script>\n</script>\n```\n\nThe '$' prefix is repeated as many time as prototypes are nested.\nThe changes have been implemented for Twig only and should be considered as a POC for discussion.\n",
            "You should not need to access a nested template.\n\nThe generated markup structure would be:\n\n```\nParent1\n    Child1\n    <script>child proto</script>\n<script>\n   parent proto\n   <$script>child proto</$script>\n</script>\n```\n\nWhen adding a child to Parent1, use the child proto.\nWhen adding a parent, use the parent proto and replace `$script` with `script`\n",
            "It could be something like\n\n``` javascript\n    jQuery(function($) {\n        var template, index;\n\n        $('form')\n            .delegate('p.add-grandchild', 'click', function() {\n                template = $(this).prev().find('script').first();\n                index = template.siblings().length;\n                template.before($(template.text().replace(/\\$\\$name\\$\\$/g, index)));\n            })\n            .delegate('p.add-child', 'click', function() {\n                template = $(this).prev().find('script').last();\n                index = template.siblings().length;\n                template.before($(template).text()\n                    .replace(/children_\\$\\$name\\$\\$/g, 'children_' + index)\n                    .replace(/children\\]\\[\\$\\$name\\$\\$/g, 'children][' + index)\n                    .replace(/\\$script/g, 'script')\n                );\n            })\n        ;\n    });\n```\n",
            "I don't see a better way other than prefixing `<script>` tags for now. I will propose a less intrusive implementation later today is this should get merged.\n",
            "A compromise could be to add some support to the FormView class. This is done in https://github.com/vicb/symfony/commit/c34fa060ad2b48a7b7cfbb5ec13e6355ae364345. This is equivalent to the solution proposed in this PR without modifying the current Form code (`FormView::getPrototypeDepth()` never get called if not explicitly called from the form templates files).\n\nThen the templates can be modified to handle nested prototype by prefixing the script tags:\n\n``` jinja\n{% block prototype_row %}\n{% spaceless %}\n    {% set prefix = '' %}\n    {% for i in 0..form.prototypeDepth %}\n        {% set prefix = prefix ~ (i > 0 ? '$':'') %}\n    {% endfor %}\n    <{{ prefix }}script type= text/html  id= {{ proto_id }} >{{ form_row(form) }}</{{ prefix }}script>\n{% endspaceless %}\n{% endblock prototype_row %}\n```\n\n**it would be even simpler in php using `str_repeat()`.**\n\nMay be we can modify FormView only and let users modify the template as described above when required then we are not tied to this implementation (but we provide support for it). In such a case there should be a cookbook article describing how to modify the template.\n\n@blauwers as the initial reporter of the issue (#1497) do you have some feedback on the solution proposed in this PR ?\n",
            "I have opened a PR as a base for discussion:\nhttps://github.com/symfony/symfony/pull/1500\n",
            "You are probably looking for the [read_only option](https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/form_div_layout.html.twig#L268) declared in the [FieldType class](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Type/FieldType.php#L117) and [documented](http://symfony.com/doc/current/reference/forms/types/text.html)\n",
            "I have started to work on [a fix](https://github.com/vicb/symfony/tree/form%2Fini-max-size)\n\nIt is not complete. Things missing:\n- translation,\n- unit test fix & coverage,\n- test mode (consider `upload_max_size` in Client.php) - not directly related to the issue,\n\nBut you can start having a look, test it and provide feedback.\n",
            "Should be because your Form and EventDispatcher components are not in sync, see https://github.com/symfony/symfony/pull/791\n",
            "``` php\n        $protoName = $options['prototype'];\n        if (!is_bool($protoName) && !is_string($protoName)) {\n            throw new UnexpectedTypeException($protoName, 'Boolean or string');\n        }\n\n        if ($options['allow_add'] && false !== $protoName) {\n            $prototype = $builder->create(true === $protoName ? '$$name$$' : $protoName, $options['type'], $options['options']);\n            $builder->setAttribute('prototype', $prototype);\n        }\n```\n\nwill do the trick if PR #1315 eventually gets merged\n\n**Note**: The code above would not allow setting the name from the view i.e. `forw_row(f.collection, { 'prototype' : '$$custom$$' })` \n",
            "Should be because `{{ block('form_widget') }}` renders the block from the current file (div_layout.html.twig). \nThe issue exists for other blocks where `block` is used (i.e. if you customize `field_widget` it will not affect the `email_widget` but it should)\n",
            "@stof I was refering to `block` being used in [div_layout](https://github.com/symfony/symfony/blob/master/src/Symfony/Bridge/Twig/Resources/views/Form/div_layout.html.twig) \n\ni.e.\n\n```\n{% form_theme form _self %}\n{% use 'div_layout.html.twig' %}\n{% block field_widget %}\n    whatever\n{% endblock field_widget %}\n```\n\nwould not affect rendering an email field, did I miss something ?\n",
            "@henrikbjorn no sure to get what you mean, I am referring to the email_widget block defined in div_layout\n",
            "@henrikbjorn this is how it should work but it doesn't and this is why there is an issue. I'll investigate more tomorrow.\n",
            "The issue seems to be linked to the way `renderBlock()` works. See [this gist](https://gist.github.com/5e03c241403e4637ddea) for details.\n\n@fabpot there is a proposal for a fix in the gist. Could you please check it and may be integrate this in twig if this is a proper fix ?\n",
            "It still needs to be thoroughly tested (for both traits & template inheritance) and will probably need some more tweaks in the FormExtension.  \n",
            "I can not tomorrow, may be on Sunday.\n",
            "@fabpot take a look at this PR https://github.com/symfony/symfony/pull/1295\n\nWe might have one other problem with this PR: as the prototype is no more a child of the collection view, it will not use its theme.\n",
            "As the prototype is no more a child:\n- The prototype will not use the theme from the collection (twig),\n- The 'multipart' is not propagated in the case where the collection is empty but you are allowed to add elements.\n\nThis is some notes for now. I'll investigate more, enter issues (and try to come up with a fix) if needed.\n",
            "@noperator \n- I have proposed a fix for the theme here https://github.com/symfony/symfony/pull/1315\n- you convert text to nodes using `jQuery(text)`\n- _ Additionally the prototype isn't rendered at all, if there exist collection fields already, even though prototype and allow_add are set to true _ can you give an example of that ?\n",
            "1. that should be ok as `prototype_row` renders `field_row`\n2. in this PR, the prototype is not a child node then `form_rest` will not consider it (try `form_row(form.participants.get('prototype'))` to render it - this should be solved by PR 1315\n",
            "@noperator that would be great if you can test this:\n\n```\n git remote add vicb git://github.com/vicb/symfony.git\n git fetch vicb form-proto:form-proto\n git co form-proto\n```\n\nThis will only create a form-proto branch on your computer.\n",
            "There are several options:\n- use the options `'prototype' => false` - you almost had it,\n- define a block `question_row` in a theme (which render the 2 widgets), theme your form and use `{{ form_row(questions) }}` only,\n- you can also do `{% for name, q in qs %} {% if name is sameas '$$name$$' %} ... proto ... {%endif %} {%endfor %}`\n\nI would recommend # 2, hope it will save you $260k !\n",
            "@blauwers collection rendering has been heavily modified since this change. You should try with the latest Release Candidate and submit a proper defect report if the issue still occurs (i.e. Sf version, controller code, template & generated markup).\nThanks.\n",
            "I didn't understand your message when I first read it... that's definitely an issue.\n",
            "I won't be able to test your fix before next Monday.\n\nSome quick thoughts by checking the diffs:\nDo we really need to add the `$renderedBlocks[]` ?\nWhat I was thinking of is to use the `rendered` property alone. This mean checking if all child views have been rendered when you render a view with children (i.e. add some logic in `isRendered()`). The use case could be a File: if you render the nested fields (file, token, ...) you would not want to render the div when calling `form_rest` (A File is rendered as a div with nested fields). \n\nAnyway, I'll take a deeper look next week and give you some more precise feedback.\n",
            "My proposal for fixing the rendering: https://github.com/symfony/symfony/pull/1221\n",
            "`{% form_theme form 'TwigBundle:Form:table_layout.html.twig' %}` is one way to do this.\n\nYou can find a cookbook article @ http://symfony.com/doc/current/cookbook/form/twig_form_customization.html\n",
            "Must be linked to [this commit](https://github.com/symfony/symfony/commit/e117613550ce120ca43b48626e615d82bde72332), sorry about that. This definitely need to be fixed and more tests should be added.\n_I won't be able to look into this before next Monday._\n",
            "@stloyd your fix is probably a step in the right direction. We should be able to achieve the same result by using the `FormView` class `rendered` property (your fix basically duplicates this info in the extension).\n\nBut may be we should start by adding some unit tests.\n\nOnce we have some those tests available we should fix both the twig extension and the php helper.\n",
            "Could you please confirm that you do not have the 'intl  php extension enabled (phpinfo) - it is working for me with this extension enabled.\n\nSome notes:\n- You'd better use this extension (does not prevent from fixing the issue anyway),\n- You do not need `$borrower = $form->getData();`, `bind()` does that for you.\n",
            "I can not reproduce the issue with the latest master\n",
            "Duplicate of http://trac.symfony-project.org/ticket/9731\nShould be fixed in https://github.com/symfony/symfony/pull/998\n",
            "As a question, this sould be asked on the mailing list rather.\n\nIf you look at the doc & [source code](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Resources/config/form.xml) you can find the solution: define a new type and inject the entity manager as a dependency.\n",
            "Impacts for choice, date, time, repeated and file types:\n- [5 more type extensions get loaded](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L378)\n- Adds a call to `buildView` and `buildViewBottomUp` [when creating a view ](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Form.php#L902) for these types.\n",
            "@danielholmes do you have time to update the PR according to the comments ?\n",
            "@danielholmes that will be ok. Thanks for your help.\n",
            "@danielholmes do you have time to update the PR according to the comments ?\n",
            "@danielholmes that will be ok. Thanks for your help.\n",
            "Thank you all for your feedback, I'll update this PR.\n",
            "@bschussek I would really appreciate if you can have a look at this PR when you have some time - most of it is phpDoc, the changes are trivial (see the description & mailing for details).\n\nI am done with this PR. Should I need to submit more, I'll separate the code changes from the comment changes.\n\nThanks.\n",
            "@bschussek the PR has been updated with the pending changes & rebased. Is it ok now ?\n\n_(I hope you won't mind the  $i-- , that's the way I've learned it when I started programming)_\n",
            "No pb (I would not want to review this PR!). I'll reopen a few PRs tomorrow.\n",
            "Thank you all for your feedback, I'll update this PR.\n",
            "@bschussek I would really appreciate if you can have a look at this PR when you have some time - most of it is phpDoc, the changes are trivial (see the description & mailing for details).\n\nI am done with this PR. Should I need to submit more, I'll separate the code changes from the comment changes.\n\nThanks.\n",
            "@bschussek the PR has been updated with the pending changes & rebased. Is it ok now ?\n\n_(I hope you won't mind the  $i-- , that's the way I've learned it when I started programming)_\n",
            "No pb (I would not want to review this PR!). I'll reopen a few PRs tomorrow.\n",
            "Shouldn't this be secured with a token ?\n\nWith this implementation it should be possible to move any file (if you have the proper rights & specify the path relative to the upload folder)\n",
            "@beberlei I have proposed a PR which [persists the original name](https://github.com/symfony/symfony/pull/748) among other improvements. It is not up to date as it depends on a decision to be taken whether or not to integrate [this other PR](https://github.com/symfony/symfony/pull/674)\n",
            "BTW and I think that the original basename is now part of the posted data.\n",
            "This is a security reason: you can forge a request and put whatever for the filename (i.e. special or un-supported chars).\n",
            "Try to google  php file upload security \n",
            "@fabpot reverted sorting of called listeners\n",
            "Johannes, \nMy point here was to have a common base class for Configuration as an extension point for further developments (XSD, doc).\nIf you see some flaws with the current design then we should refactor it. Can you give details on what you think should be changed ?\n",
            "So if there is a `ConfigurationInterface` with a single `getTreeBuilder` method implemented by extensions and a `ConfigurationProcessor` class with the remaining methods from the current abstract class would it be better ?\n",
            "And if you rename my `ConfigurationProcessor` to `CongifurationDumper` would it make sense to add this class ? (thinking of array, xsd, doc, ... dumpers)\n",
            "stof, johannes,\nCould you tell me your opinion on the current state ?\nthanks\n",
            "Here you go\n",
            "@stof: of course, moved.\n\n@schmittjoh: stof gave you the reason, doc & xsd generation\n",
            "Squashed commits\n",
            "MonologBundle can be converted after this PR has been merged (no API break).\n",
            "I'll do this in this PR.\nI'll update the MonologBundle at the same time.\n",
            "@fabpot: should I create a PR10 to PR11 section ?\n",
            "Done,\n\nThank you @stof for so many help on this one !\n\nfabien (not fabpot), I am sorry.\n",
            "Should finally be done now !\n",
            "May be you should remove the depencies on assetic & sass\n",
            "Right, that's a really great change then.\n\nSome comments:\n- Could sf-toolbarreset be an id rather than a class ?\n- There are some inline styles left in tb items,\n- Could 'ul > li > ul > li' be changed in favor of a class ?\n",
            "Ryan, would it be possible to build an other instance of the container (that you would not compile), dump it to xml and use XPath for querying ?\nNot sure at all it  is feasible but might be something to investigate.\n"
        ],
        "issues": [
            {
                "title": "Data Providers get executed before setupBeforeClass",
                "body": "The data providers get called before the static `setupBeforeClass` has been executed. If think it should be the other way around.\n\nUse case:\n- We have a list of adapters. Some adapters are only supported on some environment (ie Linux vs Win),\n- I would like to initialize a list of supported adapters once and pass it to all the tests through a data provider,\n- The cleanest way I can imagine is to initialize a static property in `setupBeforeClass` and have the provider returns that property\n\nThe problem is that the property is not initialized when the provider gets called. \n\nVersion found: 3.7.14\n"
            },
            {
                "title": "[FrameworkBundle] cache:clear command broken",
                "body": "refs #6223, #7360, schmittjoh/JMSDiExtraBundle#96\n"
            },
            {
                "title": "[Routing] Annotation loader merging of methods/schemes",
                "body": "``` php\n<?php\n/** @Route */\nclass Controller\n{\n    /** @Route */ \n    method action()\n}\n```\n\nThe annotation class loader does a bad job at merging class level settings with method level settings.\n\nIE if the methods are [get, post] at class level and [post] at method level, the resulting methods will be [post, post].\n\nThis could easily be fixed but how:\n- Should the class level params take precedence,\n- Should the method level params take precedence,\n- Should we do what other loader do for when merging collections - which has my pref.\n\nIf we pick the last choice, we might want to delegate the params merging to an exterbal service so that all loaders use the same services and code duplication stop causing troubles.\n\nOne last thing is where this should be merge ? This is obviously a bug fix but it also breaks BC and so I would recommend not to merge this to 2.0 and 2.1 but add this issue to a list of known issues for those realeses and fix from 2.2 onwards.\n"
            },
            {
                "title": "[HttpFoundation] Implement NGINX upload module file uploads",
                "body": "I think this would be very useful for people using NGINX,\n\nrefs:\n- https://github.com/vkholodkov/nginx-upload-module,\n- http://www.grid.net.ru/nginx/upload.en.html\n"
            },
            {
                "title": "[Validator] Html constraint",
                "body": "This was implemented in sf1: https://github.com/symfony/symfony1/blob/1.4/lib/test/sfTesterResponse.class.php#L174\n\nIt could be a useful addition for functional tests.\n"
            },
            {
                "title": "[TwigBundle] Bundle inheritance is not supported for @ notation",
                "body": "By looking at the [code](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/TwigBundle/DependencyInjection/TwigExtension.php#L75), I am under the impression that the Bundle inheritance is not supported by the current code.\n"
            },
            {
                "title": "[2.3] [WIP][FrameworkBundle] Add support for the '@Bundle/Path/template.format.engi...",
                "body": "...ne' notation\n\n@fabpot what's your opinion on this change ? It would allow for more consistency.\n\nTodo - id accepted:\n- [ ] PR header\n- [ ] UTs\n- [ ] Document the BC break\n- [ ] Pass a Bundle map to the parser (AcmeDemo => AcmeDemoBundle) to be consistent w/ Twig & faster - that's an other BC break\n- [ ] fix #6919 (disable NS parsing by Twig, always use the Template Name Parser)\n"
            },
            {
                "title": "[Form] Caching resolved $options is dangerous",
                "body": "In a custom FormType, I have:\n\n``` php\n<?php\n\nclass TypePuissanceFiscaleType extends AbstractType\n{\n    public function setDefaultOptions(OptionsResolverInterface $resolver)\n    {\n        $query_builder = function(Options $options) {\n            $typeVehicule = $options['type_vehicule_id'];\n            return function(EntityRepository $repository) use ($typeVehicule) {\n                return $repository->createQueryBuilder('tpf')\n                    ->where('tpf.typeVehicule = :typeVehicule')\n                    ->setParameter('typeVehicule', $typeVehicule);\n            };\n        };\n\n        $resolver->setDefaults(array(\n            'data_class' => '<class>',\n            'class' => '<Bundle>:TypePuissanceFiscale',\n            'type_vehicule_id' => null,\n            'query_builder' => $query_builder\n        ));\n    }\n\n    public function getParent()\n    {\n        return 'entity';\n    }\n\n    public function getName()\n    {\n        return 'typepuissancefiscale';\n    }\n}\n```\n\nThe qb is supposed to return a different value according to the value of `$options['type_vehicule_id']`.\n\n``` php\n<?php\n$form->add('first', 'typepuissancefiscale', array('type_vehicule_id' => 1);\n$form->add('first', 'typepuissancefiscale', array('type_vehicule_id' => 2);\n```\n\nHowever due to resolved options being cached by form types, the options would be resolved only once and re-used for the second form. This means that both forms would use the same query builder which is different from what I expect.\n\n@bschussek \n1) It is very dangerous and should be caught at least in dev mode (if it implies overhead) rather than silently trigerring a wrong behavior.\n2) Do you have any idea of how to fix this (not on how to avoid using the options to pass parameters).\n\n/cc @yohannpoli \n"
            },
            {
                "title": "[2.3][Enhancement][FrameworkBundle] Move the warmup logic to the CacheWarmerAggregate",
                "body": "This is mainly moving logic from the cache clear command to its own class so that it could be called more easily (ie from the WDT).\n\nFeedback ?\n"
            },
            {
                "title": "[HttpFoundation] Session handlers should use a lock",
                "body": "The following [session handlers](https://github.com/symfony/symfony/tree/master/src/Symfony/Component/HttpFoundation/Session/Storage/Handler):\n- MemcachedSessionHandler\n- MemcacheSessionHandler\n- MongoDbSessionHandler\n- <del>PdoSessionHandler</del> done\n\ndo not use a lock to serialize access to the session data. This might result in a data corruption / lose of data when two requests are modifying the session data at the same time.\n\nsee #4668\n\nedit:\n\nThis is also applicable to Symfony/Bridge/Doctrine/HttpFoundation/DbalSessionHandler.php\n"
            },
            {
                "title": "[Profiler] The routing panel is wrong on redirects",
                "body": "As it go through the matching process where it should get the `_route` attribute only.\n"
            },
            {
                "title": "[Form] Implement the persistent file type",
                "body": "It would be good to (re-)introduce the persistent file type.\n\nThe support was dropped [here](https://github.com/symfony/symfony/commit/852a4c9c6a4103fcbc87e99135db4dadbc7ce2a4).\n\nMy work on this is available in some branches of my fork: \n- [splfileinfo](https://github.com/vicb/symfony/tree/splfileinfo),\n- [storage-api](https://github.com/vicb/symfony/tree/storage-api),\n- [temp-storage-9747](https://github.com/vicb/symfony/tree/temp-storage-9747)\n\nCorresponding PR are #748, #674.\n\nIssues to be solved:\n- See [the commit message](https://github.com/symfony/symfony/commit/852a4c9c6a4103fcbc87e99135db4dadbc7ce2a4) from fabpot when support has been dropped,\n- Invalid files were also persisted\n- ?\n"
            },
            {
                "title": "[Routing][WDT][2.3] Routes parameters are not shown in the debugger panel",
                "body": "On route match, routes parameters are not shown in the debugger panel (when the pattern `/hello/{name}` is used to match the `/hello/world` url, we should see `name => 'world'` in the upper table of the panel - nothing is shown instead).\n\nThis seems due to the fact that the table data are based on [request.routeParams](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/WebProfilerBundle/Resources/views/Router/panel.html.twig#L14) which come from the [RequestDataCollector](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php#L256) however this parameter is not an array as expected but it has been previously [transformed to a string representation](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/DataCollector/RequestDataCollector.php#L57).\n"
            },
            {
                "title": "[UploadedFile] Vulnerability introduced by #7990 ?",
                "body": "#7990 changes `guessClientExtension()` to return the extension of the file based on the transferred mime type rather than the actual content of the file.\n\nI think this was done on purpose to avoid using the mime type which is very easy to forge.\n\nI flag this issue as security & critical as this could be a vulnerability.\n\n/cc @alexpods\n"
            },
            {
                "title": "[ProxyManager Bridge] Missing Classes",
                "body": "It seems like some classes are missing for the new `ProxyManager` in `Symfony\\Bridge\\ProxyManager\\LazyProxy\\Instantiator`\n\n``` php\n<?php\nuse ProxyManager\\Configuration;\nuse ProxyManager\\Factory\\LazyLoadingValueHolderFactory;\nuse ProxyManager\\GeneratorStrategy\\EvaluatingGeneratorStrategy;\nuse ProxyManager\\Proxy\\LazyLoadingInterface;\n```\n\n/cc @Ocramius\n"
            },
            {
                "title": "[BrowserKit] Should  insulate  be  isolate ",
                "body": "`$client->insulate()` sounds weird to me, should it be `$client->isolate()` ?\n\nWe could implement this without breaking BC (by forwarding insulate to isolate), deprecate `insulate`and remove it in 3.0.\n"
            },
            {
                "title": "[GIT] Make use of git notes",
                "body": "Currently the commit message contains the whole GH discussion (from the PR), see https://github.com/symfony/symfony/commit/6b6ccbbe24c8748d809ceb8d1c381d53d9f6c72b for an example.\n\nWhat about including only the most relevant info in the commit message (ie the PR description only) and include the discussion in a [git note](http://git-scm.com/docs/git-notes).\n\n_Such notes are displayed by GH at the bottom of a commit_\n"
            },
            {
                "title": "[FrameworkBundle] Fix a BC break for Hinclude global template",
                "body": "@fabpot should the one who broke BC write a UT for this ? (I won't have time in the next few days).\n"
            },
            {
                "title": "[2.3] [Routing] Some tweaks",
                "body": "I think the new version has an improved readability. @fabpot random changes or what ?\n\nAt least I have spotted some bugs in the annotation loader that I will fix in the 2.0 branch.\n"
            },
            {
                "title": "[Form] PHPUnit (& Travis) failing for PHP 5.3 - PHPUnit bug",
                "body": "This is not a bug in Symfony, rather a bug in PHPUnit but it should be left open for some time to save people some debugging time.\n\nThe Form Unit Tests fail with PHP 5.3:\n\n```\n230There were 4 failures:\n231\n2321) Symfony\\Component\\Form\\Tests\\CompoundFormTest::testBindMapsBoundChildrenOntoEmptyData\n233Expectation failed for method name is equal to <string:mapFormsToData> when invoked 1 time(s)\n234Parameter 1 for invocation Symfony\\Component\\Form\\DataMapperInterface::mapFormsToData(Array (...), Array ()) does not match expected value.\n235Array () does not match expected type  object .\n236\n237/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Form.php:586\n238/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Tests/CompoundFormTest.php:393\n239\n2402) Symfony\\Component\\Form\\Tests\\Extension\\Core\\DataMapper\\PropertyPathMapperTest::testMapFormsToDataWritesBackIfNotByReference\n241Expectation failed for method name is equal to <string:setValue> when invoked 1 time(s)\n242Parameter 0 for invocation Symfony\\Component\\PropertyAccess\\PropertyAccessorInterface::setValue(Array (), Mock_PropertyPath_1b80f381 Object (...), stdClass Object ()) does not match expected value.\n243Array () does not match expected type  object .\n244\n245/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Extension/Core/DataMapper/PropertyPathMapper.php:96\n246/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Tests/Extension/Core/DataMapper/PropertyPathMapperTest.php:232\n247\n2483) Symfony\\Component\\Form\\Tests\\Extension\\Core\\DataMapper\\PropertyPathMapperTest::testMapFormsToDataWritesBackIfByReferenceButNoReference\n249Expectation failed for method name is equal to <string:setValue> when invoked 1 time(s)\n250Parameter 0 for invocation Symfony\\Component\\PropertyAccess\\PropertyAccessorInterface::setValue(Array (), Mock_PropertyPath_1b80f381 Object (...), stdClass Object ()) does not match expected value.\n251Array () does not match expected type  object .\n252\n253/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Extension/Core/DataMapper/PropertyPathMapper.php:96\n254/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Tests/Extension/Core/DataMapper/PropertyPathMapperTest.php:251\n255\n2564) Symfony\\Component\\Form\\Tests\\Extension\\Core\\DataMapper\\PropertyPathMapperTest::testMapFormsToDataSkipsVirtualForms\n257Expectation failed for method name is equal to <string:setValue> when invoked 1 time(s)\n258Parameter 0 for invocation Symfony\\Component\\PropertyAccess\\PropertyAccessorInterface::setValue(Array (), Mock_PropertyPath_1b80f381 Object (...), stdClass Object ()) does not match expected value.\n259Array () does not match expected type  object .\n260\n261/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Extension/Core/DataMapper/PropertyPathMapper.php:96\n262/home/travis/build/symfony/symfony/src/Symfony/Component/Form/Tests/Extension/Core/DataMapper/PropertyPathMapperTest.php:382\n```\n\nThis is due to a PHPUnit bug https://github.com/sebastianbergmann/phpunit/issues/796 which will be fixed [in release 3.7.14](https://github.com/sebastianbergmann/phpunit/blob/3.7/ChangeLog.md#phpunit-3714)\n\n/cc @stof @bschussek\n"
            },
            {
                "title": "[2.3] [HttpKernel] Add Zend Optimizer+ in the ConfigDataCollector",
                "body": "I have also removed a lot of useless comments.\n"
            },
            {
                "title": "[FrameworkBundle] CSRF should be on by default",
                "body": ""
            },
            {
                "title": "[EventDispathcer] Fix removeListener",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | ~ |\n\nTodo\n- [x] Add a UT\n\nI won't have time to add a test before next Friday but this PR could save some debugging (especially with Silex & Closures)\n"
            },
            {
                "title": "[Finder] Issues with the x permission not set on sub-folder",
                "body": "When a sub-folder does not have the x bit set:\n- the PhpAdapter throws an `UnexpectedValueException`, quite misleading,\n- the native finders only display on error on stderr (no exception).\n\nI have discussed with @fabpot about this issue, the best would be to have a method to ignore such folders (the flag would be off by default, ie legacy behavior)\n\n/cc @jfsimon would you have some bw to look at this ?\n"
            },
            {
                "title": "[2.3] [HttpFoundation] Protect JSONResponse against CSRF attacks",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | https://github.com/symfony/symfony-docs/pull/2212 |\n"
            },
            {
                "title": "[Validator] Fix a deprecated method call in the tests",
                "body": "BUG FIX - Travis happier ?\n"
            },
            {
                "title": "[Console] Tweaks & cleanup",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | yes |\n| Deprecations? | yes |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | TBD if accepted |\n"
            },
            {
                "title": "[Console] Clean the unit tests",
                "body": "Each of the unit test methods should be splitted in smaller blocks, see InputOptionTest for a bad example.\n"
            },
            {
                "title": "[2.3] [Process] Improve the usability of the PhpExecutableFinder",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | ~ |\n\nI first wanted to make `find` static but that would probably be considered as an unrequired BC break.\n"
            },
            {
                "title": "css fix",
                "body": "before\n\n![ov](https://f.cloud.github.com/assets/248818/97566/72a11c18-66fe-11e2-80b1-f434a5216a66.jpg)\n\nafter\n\n![nov](https://f.cloud.github.com/assets/248818/97563/41ace560-66fe-11e2-988e-fcdb931d88d7.jpg)\n"
            },
            {
                "title": "[DIC] Move PrependExtensionInterface to the Extension namespace",
                "body": "@fabpot Please merge before 2.2 (no BC break) /cc @lsmith77\n"
            },
            {
                "title": "[DIC] Better handling of enableable configurations",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no, this feature has not been released yet |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nMy definition of bug fix might be discussable. The thing which I think is not discussable is that this PR fixes the semantic - and I think it is important for a  semantic configuration : before this PR, some nodes had `->canBeDisabled` for nodes that were actually disabled by default. Those nodes now have `->canBeEnabled` which sounds right.\n\n**Edit: Jan 28, 2013** - history: \n\nSee [the related comments](https://github.com/symfony/symfony/pull/6829#discussion_r2727742).\n\nI think Symfony **must** get the configuration right as we can expect of lot of devs to use this as a template when writting their own configuration.\n\n@schmittjoh could you please give me your feedback on [this change](https://github.com/symfony/symfony/pull/6852/files#L4R224) considering [the rationale](https://github.com/symfony/symfony/pull/6852/files#L3R7).\n"
            },
            {
                "title": "[2.3] [DI] Improve the generated PHPDoc of the dumped PHP container",
                "body": "By adding  @throws InactiveScopeException  where applicable\n"
            },
            {
                "title": "[HttpFoundation] tweak the Request",
                "body": "First commit: I find the new version more readable (and it should be _marginally_ faster).\nOther commits are a refresh of the CS.\n"
            },
            {
                "title": "[HttpKernel] HttpRenderer fix + enhancements",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes, 2nd commit |\n| New feature? | yes, interfaces |\n| BC breaks? | yes, but this is could be considered as a bug fix (`private` -> `protected`) |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | User facing API is the same |\n"
            },
            {
                "title": "[FrameworkBundle] A controller must be callable",
                "body": "Am I right to say that a controller **must** be callable, ie [method_exists()](https://github.com/vicb/symfony/pull/new/symfony:2.0...resolver#L1L77) is a bug ?\n\nNo BC, tests pass.\n\nThe change is a one liner however I have rewritten some code & tests to the current standards (what a long way since the genesis of Sf2 !)\n\nI have also added a FIXME for Sf3, because returning `false` is too much `PHP` !\n"
            },
            {
                "title": "KNOWN_ISSUES with php 5.3.16",
                "body": "see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Tests/Controller/ControllerResolverTest.php#L137\n"
            },
            {
                "title": "[Process] Add ability to force unescaping + tweaks (code & test)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | Not sure if we want to document this ? If yes, I'll update if accepted. |\n\nRationale:\n`'ogr2ogr' '-f GeoJSON'` would not work\n`'ogr2ogr' -f GeoJSON` would work\n\nThe first commit has the interesting updates, other commits are tweaks only. Everything should be squashed before the merge.\n"
            },
            {
                "title": "[2.3] Clean the Form component top level directory",
                "body": "The Form component has a lot of unrelated files in  the TLD. How about a better organization ? /cc @bschussek (you could also reply that it would be an unneccessary BC !).\n"
            },
            {
                "title": "[2.3][Enhancement][WIP]Profile, some love",
                "body": "**First commit**\n\n One simple SE profile is ~100k (no doctrine), gzcompress could save space. I assume the [de]compression time is more than compensated by the zlooow IO time - the compression ratio is more than 10:1 (assume, yep, not benchmarked, pointless).\n\n**Second commit**\n\nOptimize reading the file\n\n@fabpot please no squash, unrelated commits.\n"
            },
            {
                "title": "[HttpKernel] fix public Kernel::stripComments()",
                "body": "Needs fix as the method is public.\n"
            },
            {
                "title": "[Routing] fix typo",
                "body": ""
            },
            {
                "title": "Classcollectionloader: fix traits + enhancements",
                "body": "Commits:\n- some tweaks\n- generates smaller cache files (20% decrease for the SE)\n- fix traits dependency - thanks php for consistency https://bugs.php.net/bug.php?id=61554\n"
            },
            {
                "title": "[Finder] cleanup, fixes, improvements",
                "body": ""
            },
            {
                "title": "[Finder] fluid, calling in() not required after append()",
                "body": ""
            },
            {
                "title": "[WebProfilerBundle] Some eye candy for deprecated calls",
                "body": "![Ohhh](https://lh4.googleusercontent.com/-T9DKsHWf4YU/UMIRqT0g_II/AAAAAAAAJ84/tRDRP8IMwRM/s840/stack.jpg).\n\n@fabpot is [`|raw`](https://github.com/symfony/symfony/pull/new/deprecated#L0R117) a twig defect ?\n"
            },
            {
                "title": "[WebProfilerBundle]  View all  is  View last 10 ",
                "body": "Change a misleading link description\n"
            },
            {
                "title": "[DI] Add a base class for extension",
                "body": "depends on #6148\n\n@fabpot should we change `addClassesToCompile` & the likes (thinking of traits).\n"
            },
            {
                "title": "[HttpFoundation] Request::getRealMethod() now returns UPPERCASE",
                "body": ""
            },
            {
                "title": "[HttpKernel] Add DI extension configs as ressources when possible",
                "body": "/cc @rdohms @richardmiller\n"
            },
            {
                "title": "[CSSSelector] nth-child bug - need XPATH expert !",
                "body": "`:nth-child`seems to work fine when it is a top-level selector ie `td:nth-child(2)` however it fails to work when it is not, ie `div.contents  td:nth-child(2)`.\n\nIn that case, the generated XPath is: `descendant-or-self::div[contains(concat(' ', normalize-space(@class), ' '), ' contents ')]/descendant::*[name() = 'td' and (position() = 2)]` meaning that the `td` should be the second children of the `div` (and not of its parent).\n\nI don't know XPath enough to fix fix, anybody ? \n\nA simple testcase: select the second `td` of:\n\n``` html\n<tr>\n<td>not selected</td>\n<td>not selected</td>\n</tr>\n<div class='contents'>\n<tr>\n<td>not selected</td>\n<td>selected</td>\n</tr>\n</div>\n```\n"
            },
            {
                "title": "[SecurityBundle] Convert Http method to uppercase in the config",
                "body": "This is not striclty required as method names would be converted to uppercase by the matcher after #5988.\n\nHowever I think it is better to always use uppercase for http method names.\n\nThe config UT has also been improved as part of this PR.\n\nThis is good to propagate to 2.1 & 2.2 also.\n"
            },
            {
                "title": "[HttpFoundation] Move IP check methods to a HttpUtils class for reuse",
                "body": ""
            },
            {
                "title": "[HttpFoundation] fix #6002",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Fix AcceptHeader",
                "body": "The important lines are:\n\n``` php\n<?php\n-        return !empty($this->items) ? current($this->items) : null;\n+        return !empty($this->items) ? $this->items[0] : null;\n```\n\n(and the corresponding test).\n\nThe commit has some code re-org to make reading tests easier (providers defined close the the corresponding test). This might be personal preferences only, let me know if it should be reverted.\n"
            },
            {
                "title": "[HttpFoundation] Make host & methods really case insensitive in the Requ...",
                "body": "...estMacther\n\nand backport changes from 2.2\n\nDetails:\n- does not take case into account when checking the host (the `Request` always returns a lowercase value) to protect against user typo,\n- makes the constructor case proof by invoking setters rather than setting properties directly (you could then add un unreachable method i.e; `get`)\n\nPlease propagate to 2.1/2.2 if accpeted. Thanks.\n"
            },
            {
                "title": "[HttpKernel] Fix Symfony2 full framework tests",
                "body": "Fix the path when the full framework is used\n"
            },
            {
                "title": "[HttpKernel] Changlog update - document a BC break",
                "body": ""
            },
            {
                "title": "[HttpKernel] Changelog update",
                "body": ""
            },
            {
                "title": "Add missing symfony/stopwatch in the replace section of composer.json",
                "body": "And order the sections alphabeticaly for easier navigation\n"
            },
            {
                "title": "[HttpFoundation] Fix the path tp stubs folder in composer.json",
                "body": ""
            },
            {
                "title": "[MemoryDataCollector] Stop being optimistic about memory usage",
                "body": "Take into account the memory used in the kernel.terminate listeners\n"
            },
            {
                "title": "[FrameworkBundle] Router class tweak",
                "body": ""
            },
            {
                "title": "[Stopwatch] Get the  real size  used & minor tweaks",
                "body": ""
            },
            {
                "title": "[DoctrineBridge] Fix log of non utf8 data",
                "body": "relates to #5139 (fix #5115 for 2.1)\n"
            },
            {
                "title": "Doctrine logger - fix logging of binary data",
                "body": "fix #5115\n"
            },
            {
                "title": "Doctrine logger",
                "body": "fix #5115\n"
            },
            {
                "title": "[Composer] Bumped doctrine/orm to 2.2.3",
                "body": "fix #4966\n"
            },
            {
                "title": "[RFC][Routing] Add an interface for configuring strict_parameters",
                "body": "This is a proposal to fix #4697 (related to #4592).\n\nThe main point left to discuss was the name of the interface, which is now `LenientInterface`. We could change the name to anything else is someone has a better idea.\n\n@stof @Tobion what do you think ?\n"
            },
            {
                "title": "[OptionsResolver] Fix Options::has() when the value is null",
                "body": "`isset()` would have returned `false` when the value is `null`\n"
            },
            {
                "title": "[HttpFoundation] Allow setting an unknown status code without specifying...",
                "body": "... a text\n\nfix #4978\n"
            },
            {
                "title": "[FrameworkBundle] Allow using kernel parameters in routes",
                "body": "Kernel parameters can now be used at any position in patterns, defaults and requirements.\n\nRelates to: #3316, #3276\n\n**Differences from 3316:**\n- The substitution is now done in the `Router`,\n- 3316 uses `$container->getParameterBag()` which is not part of the `ContainerInterface`. The way it been solved in this PR is that some code have been duplicated inside the `Router`, see `resolveString()`.\n\n**BC break:**\n\nBefore this PR, nonexistent parameters would have be silently ignored (ie `%idontexist%` would not have been replaced). After this PR, they will throw an exception. However you can escape the value (ie `%%idontexist%%` will be accepted and replaced by `%idontexist%`).\n\n_This behavior is not mandatory and can be reverted if needed. However this keeps the router more consistent with the DI_.\n\nAny feedback ? @helmer @Koc\n"
            },
            {
                "title": "[WIP][Form] Add theming support for collections",
                "body": "**This is a work in progress**\n\nThis is an attempt to allow form collection theming.\n\nBefore this PR, it was not possible to apply a theme to all the children of a collection, you would have needed to cretate one block per child:\n\n```\n{% block _form_collection_0_label %}\n    {# ... #}\n{% endblock %}\n```\n\nYou can now create a single theme that will be applied to all the children:\n\n```\n{% block _form_collection_children_label %}\n    {# ... #}\n{% endblock %}\n```\n\n@Burgov, @bschussek, everybody, any feedback ?\n\nTodo:\n- Apply the theme to the prototype,\n- Add tests,\n- Restore BC (i.e. ability to theme a single children which must take precedence over the new theme),\n- Changelog,\n- Doc.\n\nfix: #2806\n"
            },
            {
                "title": "[Profiler] Better support for collector in a production env",
                "body": "relates to #3706.\n\nWith this PR it is possible to:\n- enable only the profiler in a production environment - the wdt being disabled you have to switch to the development environment to inspect the collected data,\n- enable both the profiler and the wdt in a production environment (the use case form #3706).\n\n@jmikola would this solve your use case ?\n"
            },
            {
                "title": "[Session] Removes references to the deprecated 'auto_start' setting",
                "body": "fix #4721\n"
            },
            {
                "title": "[FrameworkBundle] Create a dedicated template filename parser",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\n\nrelated to #3116\n"
            },
            {
                "title": "[FrameworkBundle] Display an error message when 'session.auto_start' is ...",
                "body": "...used (deprecated)\n"
            },
            {
                "title": "[Finder] '*' and '?' are considered are glob pattern rather than delimit...",
                "body": "...ers (fix #4664)\n"
            },
            {
                "title": "[Security] allow  0  as a password",
                "body": "``` php\n<?php \n! 0  == true\n```\n"
            },
            {
                "title": "[WebProfilerBundle] Fix time panel for fr locale (fix #4437)",
                "body": "@Vincent-P could you confirm if this commit fixes your issues , Thanks.\n"
            },
            {
                "title": "[Form] Start the session to get the csrf token",
                "body": "Ensure that the sesssion is started before retrieving the session id\n\n/cc @drak, @bschussek\n"
            },
            {
                "title": "[Form] cleanup",
                "body": ""
            },
            {
                "title": "a few minor changes / cleanup",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Fix the UploadedFilename name sanitization (fix #2577)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=uploadedfile2.0)](http://travis-ci.org/vicb/symfony)\nFixes the following tickets: #2577\n"
            },
            {
                "title": "[Session] cleanup of the PDO storage",
                "body": "and adding what was missing from #4244\n"
            },
            {
                "title": "[RFC][Session] Make the PDO handler looks less hacky",
                "body": "Related discussion: https://github.com/symfony/symfony/commit/ebc2f01e5b4e567c49ae99cb6bd01b4d07039748#commitcomment-1304221\n\nThe current code works but looks hacky (`$dbTimeCol = CASE WHEN $dbTimeCol = :time THEN (VALUES($dbTimeCol) + 1) ELSE VALUES($dbTimeCol) END`).\n\nTodo: wrap the mysql specific code in a `try...catch` if we choose this PR way (to be consistent with all other PDO invocations).\n"
            },
            {
                "title": "[Session] Non-native Session handlers",
                "body": "A few item to discuss. Needs @drak inputs.\n- 72d21c66 is trivial,\n- 0216e056 is about memcache(d) handlers\n  - I don't think the handlers should configure the memcache(d) instances. Those instances are injected into the storage so they should already be confidured (this will be done in the CacheBundle when available)\n  - A SW prefix has been added to the memcached handlers so that the same instance of memcached can be shared - you can still set the `Memcached::OPT_PREFIX_KEY` before injecting the memcached instance.\n  - It was not possible to use an expiration > 30days before, see [php.net](http://www.php.net/manual/en/memcached.expiration.php)\n- 788adfb6 is trivial (cleanup in the PDO handler)\n"
            },
            {
                "title": "[Routing] Fix a regression introduced by #4170",
                "body": "See https://github.com/symfony/symfony/commit/8232aa150b70572b1d378f202d886539946853a3#commitcomment-1300310\n\nLet's wait to confirm the fix is ok before merging\n\n@stephpy, @mvrhov ?\n\n(Travis is not ok since 5.3.3 is not supported).\n"
            },
            {
                "title": "[RFC][Session] Native storage handlers should not update the global config",
                "body": "I submit this as a RFC because we can not get to an agreement on things should be done with @drak and I would like to hear the voice of the community on this point.\n\nMemcache will be used as an example for the discussion.\n\n**Context**\n\nWhen you want to use memcache to store your sesssion data, you will need to create an instance of  NativeMemcacheSessionHandler  and pass the `save_path` as argument. The `save_path` specify the host, port and a few options (i.e. the ones passed to [addServer](http://www.php.net/manual/fr/memcache.addserver.php)).\n\nAll the other options (i.e. the compression factor, the serializer, ...) are retrieved from the ini values.\n\n**What we do today**\n\nIn order to configure the native memcache storage the `NativeMemcacheSessionHandler` class [update](https://github.com/symfony/symfony/blob/7dfd41048120cd884db63ee8074452dc7c17134c/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeMemcacheSessionHandler.php#L64) the ini values.\n\n**What I propose**\n\nI propose **not** to update any ini value that is gobal to **all the** memcache instances. To me ini values are global configs that should not be updated for a local need.\n_(I am ok with updating session specific settings ('memcache.session_redundancy') because those are not shared by all the memcache instances)_\n\nIn order to configure the memcache native storage:\n- update your php.ini with the desired value,\n- or if you don't have access to the php.ini (i.e. on a shared server) set the value at some  global  place (i.e. your kernel).\n\n**The question**\n\nDo you think:\n\nA- It is ok to change any ini settings from inside the Session ? (The current state)\nB- We should not modify any ini settings that is not strictly related to the session from inside the session. (The state after this PR)\n"
            },
            {
                "title": "[Validator] Fix/cleanup",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=validator/fix)](http://travis-ci.org/vicb/symfony)\n- d2100a27 has some fixes for the EC,\n- 51769e03 has some cleanup in the graph walker,\n- f9b3591c add an AbstractLoader (namespace aliases does not belong to FileLoaders).  \n"
            },
            {
                "title": "[Routing] Fix the matching process",
                "body": "This PR is based on the PR #3678, #4139.\n\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=routingmatcher)](http://travis-ci.org/vicb/symfony)\n\n**The spec**\n\nA pattern is composed of both text and variable segments: `/{variable}-test/{other_variable}`.\n\nA variable segment will match anything until a separator is encountered. The separator is the character following the variable segment when available or preceding the variable otherwise (i.e. at the end of the pattern).\n\nThat is:\n- the separator is `-` for the `variable`,\n- the separator is `/` for the `other_variable`.\n\n_Note: This default matching behavior can be overridden if a requirement is specified for a variable)_\n\n**Fixes**\n- The current behavior is to consider booth the preceding and following characters as separators (considering availability),\n- The  preceding  separator of the first variable is always set to `/` whatever the preceding character is (due to `$pos = 0` for the first iteration).\n\n**Todo**\n\nUpdate the doc once this is merged\n"
            },
            {
                "title": "[Routing] Fix the matching process",
                "body": "This PR is based on the PR #3678.\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=routingmatcher)](http://travis-ci.org/vicb/symfony)\n\n**The spec**\n\nA pattern is composed of both text and variable segments: `/{variable}-test/{other_variable}`.\n\nA variable segment will match anything until a separator is encountered. The separator is the character following the variable segment when available or preceding the variable otherwise (i.e. at the end of the pattern).\n\nThat is:\n- the separator is `-` for the `variable`,\n- the separator is `/` for the `other_variable`.\n\n_Note: This default matching behavior can be overridden if a requirement is specified for a variable)_\n\n**Fixes**\n- The current behavior is to consider booth the preceding and following characters as separators (considering availability),\n- The  preceding  separator of the first variable is always set to `/` whatever the preceding character is (due to `$pos = 0` for the first iteration).\n\n**Todo**\n\nUpdate the doc once this is merged\n"
            },
            {
                "title": "[WIP][2.1][Form] Revert some BC breaks ",
                "body": "[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=form/revert)](http://travis-ci.org/vicb/symfony)\n\nSome BC breaks have been removed from the 2.1 branch to ease the 2.0 to 2.1 transition.\n\nMost changes will still be kept and fixed the master branch (#2421 will also be reverted in the main branch).\n\nBC breaks that have not been reverted:\n- #3789 [Form] Fixed option support in Form component\n- #3322 [Form] Throwing an AlreadyBoundException in `add`, `remove`, `setParent`, `bind` and `setData` if called on a bound form\n- #3290 [Form] Fixed:  date ,  time  and  datetime  fields can be initialized with \\DateTime objects\n- #3156 [Form] Improved ChoiceList implementation and made form naming more restrictive\n- #3128 [Form] Made validation of form children configurable\n\nThis is a preview, feedback is appreciated.\n"
            },
            {
                "title": "[Guesser] Add some comments in the code",
                "body": "That is basically adding the comments that have been made [in the PR](https://github.com/symfony/symfony/pull/3927#r713663) into the code.\n\nThe following guessers must be commented:\n- validator,\n- ORM,\n- ODM,\n- Propel\n"
            },
            {
                "title": "[FrameworkBundle] Monitor added/removed translations files in dev",
                "body": "fix #3653\n"
            },
            {
                "title": "[FrameworkBundle] Look for translations in %kernel.root_dir%/Resources/%...",
                "body": "...bundle%/translations (fix #4018)\n\nI will submit a PR to the docs.\n"
            },
            {
                "title": "[Finder] Fixes in the iterators",
                "body": "fix: #4023\nref: #4011\n- Fix regex detection\n- call `file_get_contents()` only once (vs once per pattern)\n\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=finder/regex)](http://travis-ci.org/vicb/symfony)\n\n@gajdaw thoughts ?\n"
            },
            {
                "title": "[Finder] Fix regexp detection in FileContentFilterIterator",
                "body": "The iterator accepts both string and regexps, then there is a [test](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Finder/Iterator/FilecontentFilterIterator.php#L73) to detect regexps.\n\nThe test is flawed:\n- http://fr2.php.net/manual/en/regexp.reference.delimiters.php:  A delimiter can be any non-alphanumeric, non-backslash, non-whitespace character , delimiters could also be  {  and  } \n- http://fr2.php.net/manual/en/reference.pcre.pattern.modifiers.php: some modifiers are missing and there could be multiple delimiters.\n\nThe test need to be enhanced (and tested)\n"
            },
            {
                "title": "Fix umasks in chmod() calls",
                "body": "As discussed with @Seldaek \nref: #4008\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=master)](http://travis-ci.org/vicb/symfony)\n"
            },
            {
                "title": "[Form] A form which is an empty collection has no CSRF token",
                "body": "see https://github.com/symfony/symfony/pull/3996#r705921 \nref #3996\n"
            },
            {
                "title": "[Form] An empty collection gets rendered as an input",
                "body": "see https://github.com/symfony/symfony/pull/3923#r702358\n"
            },
            {
                "title": "[Form] Fix the FormTypeValidatorExtension (required by PR 3923)",
                "body": "Thanks to @jrfish for the fix (#3983)\n"
            },
            {
                "title": "[HttpKernel] Fix the ProfilerListener (fix #3620)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler/listener_2.0)](http://travis-ci.org/vicb/symfony)\nFixes the following tickets: #3620, PR #3618\n\nMany thanks to @guilhermeblanco for helping with the tests.\n"
            },
            {
                "title": "[HttpKernel] Fix the ProfilerListener (fix #3620)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler/listener_2.0)](http://travis-ci.org/vicb/symfony)\nFixes the following tickets: #3620, PR #3618\n\nMany thanks to @guilhermeblanco for helping with the tests.\n"
            },
            {
                "title": "[HttpKernel] Profiler Listener tweaks",
                "body": "- `setParent()` is called in [`Profile::addChild()`](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profile.php#L180) in 2.1\n- The profiles are now only saved once only in the listener (either at the end of the main request or on an exception)\n- The profiles are now only saved once only in the TraceableEventDispatcher (twice for the root profile when there is a kernel.terminate' event\n\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler/listener)](http://travis-ci.org/vicb/symfony)\n"
            },
            {
                "title": "[Routing] Implement bug fixes and enhancements (from @Tobion)",
                "body": "This is mainly #3754 with some minor formatting changes.\n\nOriginal PR message from @Tobion:\n\nHere a list of what is fixed. Tests pass.\n1. The `RouteCollection` states\n   \n   > it overrides existing routes with the same name defined in the instance or its children and parents.\n   \n   But this is not true for `->addCollection()` but only for `->add()`. addCollection does not remove routes with the same name in its parents (only in its children). I don't think this is on purpose.\n   So I fixed it by making sure there can only be one route per name in all connected collections. This way we can also simplify `->get()` and `->remove()` and improve performance since we can stop iterating recursively when we found the first and only route with a given name.\n   See `testUniqueRouteWithGivenName` that fails in the old code but works now.\n2. There was an bug with `$collection->addPrefix('0');` that didn't apply the starting slash. Fixed and test case added.\n3. There is an issue with `->get()` that I also think is not intended. Currently it allows to access a sub-RouteCollection by specifing $name as array integer index. But according to the PHPdoc you should only be allowed to receive a Route instance and not a RouteCollection.\n   See `testGet` that has a failing test case. I fixed this behavior.\n4. Then I recognized that `->addCollection` depended on the order of applying them. So\n   \n   ```\n   $collection1->addCollection($collection2, '/b');\n   $collection2->addCollection($collection3, '/c');\n   $rootCollection->addCollection($collection1, '/a');\n   ```\n   \n   had a different pattern result from \n   \n   ```\n   $collection2->addCollection($collection3, '/c');\n   $collection1->addCollection($collection2, '/b');\n   $rootCollection->addCollection($collection1, '/a');\n   ```\n   \n   Fixed and test case added. See `testPatternDoesNotChangeWhenDefinitionOrderChanges`.\n5. PHP could have ended in an infinite loop when one tried to add an existing RouteCollection to the tree. Fixed by throwing an exception when this situation is detected. See tests `testCannotSelfJoinCollection` and `testCannotAddExistingCollectionToTree`.\n6. I made `setParent()` private because its not useful outside the class itself. And `remove()` also removes the route from its parents. Added public `getRoot()` method.\n7. The `Route` class throwed a PHP warning when trying to set an empty requirement.\n8. Fixed issue #3777. See discussion there for more info. I fixed it by removing the over-optimization that was introduced in 91f4097a0905e but didn't work properly. One cannot reorder the route definitions, as is was done, because then the wrong route might me matched before the correct one. If one really wanted to do that, it would require to calculate the intersection of two regular expressions to determine if they can be grouped together (a tool that would also be useful to check whether a route is unreachable, see discussion in #3678) We can only safely optimize routes with a static prefix within a RouteCollection, not across multiple RouteCollections with different parents.  This is especially true when using variables and regular expressions requirements.\n   I could however apply an optimization that was missing yet: Collections with a single route were missing the static prefix optimization with `0 === strpos()`.\n9. Fixed an issue where the `PhpMatcherDumper` would not apply the optimization if the root collection to be dumped has a prefix itself. For this I had to rewrite `compileRoutes`. It is also much easier to understand now. Addionally I added many comments and PHPdoc because complex recursive methods like this are still hard to grasp. \n   I added a test case for this (`url_matcher3.php`).\n10. Fix that `Route::compile` needs to recompile a route once it is modified. Otherwise we have a wrong result. Test case added.\n"
            },
            {
                "title": "[Routing] Handling of space characters in the dumpers",
                "body": "The compiler was using the 'x' modifier in order to ignore extra spaces and line feeds but the code was flawed:\n- it was actually ignoring all the spaces, not only the extra ones added by the compiler,\n- all the spaces were stripped in the php and apache matchers.\n\nThe proposed fix:\n- do not use the 'x' modifier any more (and then do no add extra spaces / line feeds),\n- do not strip the spaces in the matchers,\n- escapes the spaces (both in regexs and script name) for the apache matcher.\n\nIt also include [a small optimization](https://github.com/vicb/symfony/pull/new#L9L89) when the only token of a route is an optional variable token - the idea is to make the regex easier to read.\n"
            },
            {
                "title": "[RFC] Fix issues with url decoding",
                "body": "Related: #2324, #2963, #2962, #2579\n### This PR fixes two issues:\n- `+` in paths were turned to     by `urldecode()`\n- `urldecode()` was called a few times (and a different number of times according to which part of the path was handled, see #2962 for details).\n### BC Breaks:\n- `Request::getPathInfo()`, `Request::getBaseUrl()` and `Request::getBasePath` now return the raw (encoded) path (vs a decoded path before this PR). You should check any calls to these methods in your code and wrap them in `rawurldecode()` if needed.\n- The `UrlMatcher` now decodes the URL only once (i.e. variable are no more decoded twice) and use `rawurldecode()` to support `+`.\n### Notes:\n- @arnaud-lb, the first commit is based on your #2963 so I put your name for the commit,\n### Comment history from the original PR:\n\n@vicb\n\n**The state before this PR:**\n- getRequestUri() returns an **encoded** value\n- getPathInfo() returns a **decoded** value\n- getBaseUrl() returns a **decoded** value\n- getBasePath() returns a **decoded** value\n\nThe decoded value is wrong as `urldecode` is used in place of `rawurldecode` turning `+` into a space character (#2324).\n\nThe matcher starts by urldecoing the path (it is already decoded as explained right before) and then urldecodes each variable one more time.\n\nWe end up with a path being decoded twice and variables being decoded three times.\n\n`Request::getUri()` calls both `getBaseUrl()` and `getPathInfo()` so that the return URI is **decoded**.\n\n**The state after the PR:**\n- getRequestUri() returns an **encoded** value\n- getPathInfo() returns an **encoded** value\n- getBaseUrl() returns an **encoded** value\n- getBasePath() returns an **encoded** value\n\nWe are consistent and we have the raw values everywhere - there is no (easy) way to get the encoded value back once it has been decoded as it is done in the current code.\n\nThe matcher relies on an encoded value and decode the value only once (using `rawurldecode` to support `+`s).\n\nSo basically this PR:\n- fix a bug - URL with `+` are now supported,\n- makes paths consistent - encoded values everywhere, including `getUri()`\n- makes variables consistent: they are decoded only once - the same as query string parameters.\n\nThere are some BC breaks:\n- getPathInfo() returns an encoded value vs a decoded one before,\n- getBaseUrl() returns an encoded value vs a decoded one before.\n- getBasePath() returns an encoded value vs a decoded one before.\n\nAny code relying on the output of one of the 2 previous methods should be checked and upgraded if needed. I am interested in the use cases where your code need to be updated.\n\n@Seldaek\n\nI checked a few projects and this is what I found (usage of getPathInfo & getBaseUrl):\n- One use case of getPathInfo to check if the url started with `/something/` which is a prefix used for all  overlay  content which had to be treated differently somewhere => most likely unaffected\n- One use case for checking path prefixes by regex in our [CorsBundle](https://github.com/nelmio/NelmioCorsBundle/blob/master/EventListener/CorsListener.php#L52-56) => potentially affected depending on the complexity of regexes I'd say\n\n@vicb\n\nThanks @Seldaek for reporting the use cases. You second case would be solved by `rawurldecode`ing the path info which is a minimal change.\n\nAnd in general I think we have to expand to doc to specify the url format that should be used.\n"
            },
            {
                "title": "[PhpUnit] Fix the path to the boostrap files in the components",
                "body": ""
            },
            {
                "title": "[RFC][Routing] Improve the current matching process",
                "body": "This still needs more thinking & discussions.\n\nSee what it adds by looking at the former 2.0 PR.\n"
            },
            {
                "title": "[RFC][Routing] fix or trick ?",
                "body": "With this PR\n\n`/foo-{bar}-{baz}` matches `/foo-b/ar-b-az`\n\nI thought I was a great idea when I wrote it, I am not sure any more:\n- matching `b/ar` is a BC break, it should probably not be included in 2.0. However I think this is the expected behavior (but it also suffers from the problem? mentioned below)\n- matching `b-az` is a new feature (could it be considered as a BC break as such ?)\n\nOne issue I can see with matching `b-az` is that it would hide a `/foo-{bar}-{baz}-{buz}` route declared afterwards. However a it would a masked a `/foo-{bar}-{baz}_{buz}` even with the current code. So one  benefit  here is to be consistent.\n"
            },
            {
                "title": "[HttpKernel] Fix MongoDbProfilerStorageTest",
                "body": "- The test was failing if no connection (trying to call purge)\n- The extension / connection was tested before each single test\n"
            },
            {
                "title": "[Routing] Cleanup",
                "body": "removing the obsolete `segment_separators` option\n"
            },
            {
                "title": "[Form] Fix min/max length guessing for numeric types (fix #3091)",
                "body": "Before this PR, the length was guessed from `strlen(min/max)`.\n\nThis is obviously false for float: `strlen( 1.123 ) > strlen ( 5 )` then this guess is now low confidence only and is masked by a `null` medium confidence guess for floats (implemented in both doctrine ORM & validator).\n\nThis PR also includes some code reorg in order to improve readability.\n\nI'll update Propel & Mongo if needed once this is merged.\n\n_note: `5.000` did neither work because of `5e3`_\n"
            },
            {
                "title": "[RFC] Fix issues with url decoding",
                "body": "Related: #2324, #2963, #2962, #2579\n\nThis PR fixes two issues:\n- `+` in paths were turned to     by `urldecode()`\n- `urldecode()` was called a few times (and a different number of times according to which part of the path was handled, see #2962 for details).\n\nNotes:\n- @arnaud-lb, the first commit is based on your #2962 so I put your name fot the commit,\n- `Request::getPathInfo()` returns the decoded path in order to minimize BC (see [this comment](https://github.com/symfony/symfony/pull/2963#issuecomment-3274617) from @Seldaek) - however the decoding is now done with `rawurldecode()` instead of `urldecode()` in order to avoid loosing `+` chars,\n- As the path is already decoded in `Request::getPathInfo()` it is no more decoded by the matchers (see `UrlMatcher` and `PhpMatcherDumper`). This could be considered as a BC or as a fixed (`UrlMatcher` was not consistent with `PhpUrlMatcher` and the path was decoded multiple times).\n\nAny thoughts ?\n"
            },
            {
                "title": "[Form] Add a functional test suite",
                "body": "That would help a lot stabilizing the Form component.\n"
            },
            {
                "title": "[Validator] Remove a race condition (fix #3217)",
                "body": "#3581 for 2.0\n"
            },
            {
                "title": "[Validator] Remove a race condition (fix #3217)",
                "body": ""
            },
            {
                "title": "[Form] Alternate syntax for form_theme",
                "body": "before\n`{% form_theme form _self  ::base.html.twig  %}`\n\nafter\n`{% form_theme form with  ::base.html.twig  %}`\n`{% form_theme form with varTheme %}`\n`{% form_theme form with [_self,  ::base.html.twig ] %}`\n\n_the former syntax is still supported_\n"
            },
            {
                "title": "[SecurityBundle] Lazily load the post schema listener",
                "body": "As suggested by @stof in #3560\n"
            },
            {
                "title": "[SecurityBundle] Lazily load the post schema listener",
                "body": "As suggested by @stof in #3560\n"
            },
            {
                "title": "[WIP][Security]replaced acl:init command with postGenerateSchema listener",
                "body": "Attempt to fix #2091.\n\nThe code is from @schmittjoh (see #1313) but was never merged.\n\nThe difference is that the `init:acl` command has not been dropped in order to overcome [the limitations](https://github.com/symfony/symfony/pull/1313#issuecomment-1387091) described by @stof. @stof do you think this is ok ?\n\nLeft to fix:\n- Using the code from this PR, the generated migration does not drop the tables but still alter them,\n\n@stof you know this part of the code far better than me. I would appreacite your feedback on this PR and any hint on solving the remaining item. Thanks.\n"
            },
            {
                "title": "[TwigBundle] Workaround a flaw in the design of the configuration (norma...",
                "body": "...lization)\n\nsee #2823\n\n@Seldaek please comment.\n"
            },
            {
                "title": "[RFC][TwigBundle] Workaround a flaw in the design of the configuration (norma...",
                "body": "...lization)\n\nsee #2823\n\n@Seldaek please comment.\n"
            },
            {
                "title": "[WebProfilerBundle] Router panel: take the request method into account",
                "body": "Before this change we were always using the default method (i.e. 'GET').\n"
            },
            {
                "title": "[FrameworkBundle] Backport RedirectableUrlMatcher to 2.0",
                "body": "see #3313, the commit to backport is 9fc8d284be21ff3c8988756bc008461c6c9653bb\n"
            },
            {
                "title": "[Config] Improve prototype nodes usability, error messages, extensibility",
                "body": "### First commit\n\n_Before_ (you should set multiple defalutValues)\n\n``` php\n<?php \n$root\n    ->arrayNode('node')\n    ->prototype('array')\n        // when the node is not set\n        ->defaultValue(array('foo' => 'bar')\n        ->children()\n            // when the key is not set\n            ->scalarNode('foo')->defaultValue('bar')->end()\n\n$root\n    ->arrayNode('node')\n    ->prototype('array')\n        // when the node is not set\n        ->defaultValue(array('defaults' => array('foo1' => 'bar1', 'foo2' => 'bar2')\n        ->children()\n            ->arrayNode('bar')\n                // when the node is not set\n                ->addDefautsIfNotSet()\n                // when some values are not set (node being set)\n                ->scalarNode('foo1')->defaultValue('bar1')->end()\n                ->scalarNode('foo2')->defaultValue('bar2')->end()\n```\n\n_after_\n\n``` php\n<?php\n$root\n    ->arrayNode('node')\n    ->addDefaultChildrenWhenNoneSet()\n    ->prototype('array')\n        ->children()\n            ->scalarNode('foo')->defaultValue('bar')->end()\n\n$root\n    ->arrayNode('node')\n    ->addDefaultChildrenWhenNoneSet()\n    ->prototype('array')\n        ->children()\n            ->arrayNode('bar')\n                ->scalarNode('foo1')->defaultValue('bar1')->end()\n                ->scalarNode('foo2')->defaultValue('bar2')->end()\n```\n\n_more_ (exclusive configs)\n\n``` php\n<?php\n$root\n    ->arrayNode('node')\n    // Add a default node named 'defaults'\n    ->addDefaultChildrenWhenNoneSet()\n    // Add a default node named 'foo'\n    ->addDefaultChildrenWhenNoneSet('foo')\n    // Add two default nodes named 'foo', 'bar'\n    ->addDefaultChildrenWhenNoneSet(array('foo', 'bar'))\n    // Add two default nodes\n    ->addDefaultChildrenWhenNoneSet(2)\n```\n### Second commit\n\nImproves error messages (print the path to the error) & extensibility.\n\n@schmittjoh I would appreciate you feedback on both the commits. Do you think a boolean $throw switch on `getNode` would make sense (i.e. to prevent throwing excs in prod ?).\n"
            },
            {
                "title": "[Config] ArrayNode & PrototypedArrayNode",
                "body": "They both share common methods and have specific ones.\n\nHaving a common base class would be cleaner & allow detecting more config errors.\n"
            },
            {
                "title": "[Config] Cleanup, error detection, fixes",
                "body": "see #3357\n"
            },
            {
                "title": "[Session] memcache(d) storage issues",
                "body": "- The native memcache(d) should not modify ini values (other memcache(d) users will get affected). \n- There is an ambiguity about the lifetime (see #3363). This is more a gotcha than a real defect.\n\nHopefully the Cache Component will fix those 2 points (#3211).\n"
            },
            {
                "title": "[Profiler] Fix memcache(d) storages",
                "body": "This fixes an ambiguity...\n\nThe memcache(d) storages have a `$lifetime` option. The name indicates that we are talking about a ttl (in seconds). This is wrong is `$lifetime` > 2592000 (=30 days), see http://fr.php.net/manual/en/memcache.set.php.\n\nDoctrine is also [affected](https://github.com/vicb/common/commit/e9ab2d2ccaa825778bbf8a4e419534cb392246ea).\n\nThe ambiguity also exists in the session storage but to a lesser extend as those storage directly use memcache(d) options rather than a `$lifetime`. @drak could you confirm ?\n\nHopefully the Cache Component will get it right (#3211). \n"
            },
            {
                "title": "[Tests] Install PHP extensions when using Travis CI ...",
                "body": "... to improve test coverage.\n\nSee #3358.\n\nTests do not pass (as expected). Should be re-tested once 3358 get merged.\n\n_This is something I originally submitted for Doctrine common doctrine/common#96_\n"
            },
            {
                "title": "[Config] Cleanup, error detection, fixes",
                "body": "1. cleanup, nothing noticeable\n2. detect potential errors (useless config)\n3. fix errors in the fmwk bundle\n"
            },
            {
                "title": "[Profiler] Ajax",
                "body": "The first commit should be merged as `app` is not always accessible in the twig template due to the ways the templating system is used. Then there is currently no way to check if we are dealing with an ajax request in the view.\n\nThe second commit use ajax to load the panels. This should make the interface more responsive as you don't have to load the layout each time + the panels are cached. Loading via AJAX would also work if your panel does not extend the ajax layout (legacy support) - this would be less efficient though as you would load the layout and filter it out afterwards.\n\nI am not sure if the second commit is worth merging, maybe it is useless ?\n"
            },
            {
                "title": "[Routing] Remove a dependency on a derived class, fixes, optim",
                "body": "Subset of #3296 which should be acceptable.\n\nTravis is happy.\n\nThe side effect of removing the dependency is that the `UrlMatcher` does not throw an exception any more when the scheme does not match the required scheme. I think it is better because:\n- it removes a dependency on a derived class,\n- it was an undocumented  feature ,\n- other thrown excs are component specific while this one was raw SPL.\n"
            },
            {
                "title": "[WIP, Not to be merged]Routing",
                "body": "## **EDIT: Most of the code here has been fixed and merge as part of #3313, the remaining interesting part is the discussion together with the commit  [Routing] Refactor the matcher logging **\n\nWIP, please no CS comments, other feedback is welcome !\n\nThis PR started as an attempt to fix #3264.\n\nSome cleaning in the first three commits.\n\nThe interesting things start at commit number 4. Instead of having a separate `TraceableUrlMatcher` the logging is implemented in the base `UrlMatcher`. Yep there is a performance penalty when this matcher is used which is not the case even in debug mode with Sf2 (A cached matcher is used). I was not able to find a **simple** solution which would not impact the performance and fix tracing at the same time.\n\nIf you need a proof that the matchers are not used, this is commit number 5 which fixes a bug in one of them. (I have to check if this should be applied to 2.0 as well).\n\nThe last commit is what I wanted to achieve: you can check the routing panel in the profiler when you intercept redirects and type a url without a trailing slash.\n\nTodo:\n- CS / phpDoc,\n- Fix broken tests,\n- Test broken things,\n- Test new features.\n\n@fabpot any feedback ?\n\nNotes:\n\nThe TraceableUrlMatcher [has a bug](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php#L95) which should be fixed if commit 4 does not get merged. \n"
            },
            {
                "title": "[WIP][Profiler] Routing",
                "body": "former #3206 part 3 (depends on part 1 - #3280)\n\nThe goal of this PR is to fix #3264 by adding redirection infos on the router panel.\n\nDone:\n- Add info on the target url / route\n\nTo do:\n- Display an accurate URL matching process (when using the RedirectableUrlMatcher)\n"
            },
            {
                "title": "[Profiler] Provide a common infrastructure",
                "body": "former #3206 part 3\n- base JS (provides ajax, toggle, css class helpers),\n- panel pages (used only by the Doctrine panel for now).\n\nSuccessfuly tested with the (future version of the) Doctrine panel.\n"
            },
            {
                "title": "[WebProfilerBundle] Some cleanup",
                "body": "former #3206 part 1 (misc cleanup)\n"
            },
            {
                "title": "[Container][Event] Registering an event on a private service silently fails",
                "body": "``` xml\n        <service id= data_collector.router  class= %data_collector.router.class%  >\n            <tag name= kernel.event_listener  event= kernel.controller  method= onKernelController />\n            <tag name= data_collector  id= router  priority= 255  />\n        </service>\n```\n\n`onKernelController` would never be called if the service is made private.\n\nI don't know which solution is better:\n- Change the service visibility while building the container,\n- Throw an exception while building the container,\n- ?\n\n@schmittjoh any feedback ?\n"
            },
            {
                "title": "[2.3][Enhancement][WIP] Cachebundle",
                "body": "Bootstrap the cache bundle based on the [LiipDoctrineCacheBundle](https://github.com/liip/LiipDoctrineCacheBundle) with the help of @lsmith77\n\nThis is the second part required for #1513 with the [CacheComponent](https://github.com/symfony/symfony/pull/3211)\n\nTodo:\n- Add functionalities,\n- Add tests,\n- Make use of the cache component (under development),\n- Modify other Bundles to leverage this bundle,\n- Write docs\n\nPull Requests / feedback / comments welcomed !\n"
            },
            {
                "title": "[Profiler] Allow profiling the terminate event",
                "body": "![Travis](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler.terminate)\n\nThis PR is mainly about allowing to profile the terminate event (i.e. see it in the timeline panel)\n\nThere are some other tweaks.\n"
            },
            {
                "title": "[FrameworkBundle] Code factorization in TraceableEventDispatcher",
                "body": ""
            },
            {
                "title": "[Validator] Cache race condition",
                "body": "There is a race condition in the [`ClassMetaDataFactory`](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/ClassMetadataFactory.php#L49) as described in #3211\n"
            },
            {
                "title": "WIP[Profiler] Drop the routing panel",
                "body": "@fabpot, @stof what about removing the [Routing collector](https://github.com/symfony/symfony/commit/b46114a0f67da3338aa6728f33d20fb11c4da59c#commitcomment-904535) ?\n\nI have create a [base js script](https://github.com/vicb/symfony/pull/new#diff-12) to be re-used across panels (and for the toolbar).\n\n@stof could you doctrine panel depends on Sf2.1 ?\n"
            },
            {
                "title": "[WebProfilerBundle] Improve the logger panel",
                "body": "No more need to hit 'refresh'\n"
            },
            {
                "title": "[Profiler] Stopwatch related tweaks",
                "body": "- Some fixes in the stopwatch logic,\n- Some JS fixes,\n- Make use of modern JS.\n"
            },
            {
                "title": "[HttpKernel] Minor fixes in the Stopwatch",
                "body": "Not a breakthrough, fixing `'0'` handling at 2 places, some re factoring (fluid interface) \n"
            },
            {
                "title": "Improve vendors script",
                "body": "[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=vendor)](http://travis-ci.org/vicb/symfony)\n\nWe are not interested in vendors history while testing, are we ?\n\nTravis build are 5min faster after this change (7->2mn) and I guess the worker is happier.\n\nWell not so sure about the  5mn faster  any more... Travis seems to have changed its mind afterward but faster anyway.\n"
            },
            {
                "title": "[TwigBridge] Improve test coverage",
                "body": "related to https://github.com/fabpot/Twig/issues/580\n\n[Travis is happy](http://travis-ci.org/#!/vicb/symfony/builds/484594) but it seems he doesn't like branch name with `/` when displaying status images.\n\nIt could have been submitted against 2.0 but there is an issue here: the bridge is tied to Twig so that would mean testing against every single Twig version shipped with 2.0 which I don't want.\n\nI have  solved  the issue by ensuring that Twig version is at least 1.5.0 in the tests set up. This is not a perfect solution but I can not imagine something better for now.\n"
            },
            {
                "title": "[TwigBridge] Improve test coverage",
                "body": "related to https://github.com/fabpot/Twig/issues/580\n"
            },
            {
                "title": "[DomCrawler] Support for multivalued fields",
                "body": "This is a tentative fix for #1579 by @kriswallsmith, also see #3012 for more info.\n\nAny feedback is appreciated.\n"
            },
            {
                "title": "[DomCrawler] Some cleanup & 1 bug fix",
                "body": ""
            },
            {
                "title": "quick review",
                "body": "I'll check more deeply later today (there are still some inconsistencies)\n"
            },
            {
                "title": "Template locator/exception message",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nImprove the error message to include the error message from the File Locator which is more accurate : the File Locator might also look in some fallback folder(s) (i.e.  `%kernel.root_dir%/Resources`)\n"
            },
            {
                "title": "[Routing] Allow to import multiple resources ",
                "body": "This change [has been requested](https://github.com/FriendsOfSymfony/FOSRestBundle/issues/12) by @lsmith77 and @merk for the FosRestBundle.\n\nMultiple resources can be imported at once, see [xml](https://github.com/vicb/symfony/pull/new/router/load-resources#L5R8) and [yml](https://github.com/vicb/symfony/pull/new/router/load-resources#L6R2) examples in the tests. \n_(The xml files is probably not the best example as you would probably remove the attribute and use child nodes only when importing multiple resources - being able to use both is required to keep BC)_.\n\nThis change is BC.\n"
            },
            {
                "title": "[SecurityBundle] Fix autoloading in tests",
                "body": "autoload.php should override autoload.php.dist when it exists\n"
            },
            {
                "title": "[HttpKernel] Simplify test code",
                "body": "Get the `$request` from the client (removes a hack in test kernel)\n"
            },
            {
                "title": "[FrameworkBundle] Fix for setting a custom file link format (fixes #1652)",
                "body": "[FrameworkBundle] Fix for setting a custom file link format (fixes #1652)\n"
            },
            {
                "title": "[Routing] Allow multiple `@Route` annotations with a default name",
                "body": "[Routing] Allow multiple `@Route` annotations with a default name on a single method (fixes #1647)\n\nBefore this change, the default name would be the same for multiple `@Route` with a default name on the same method. Then only the last declared route is active.\n\nThe defaults names are (for consecutive `@Route`s):\n- former_default,\n- former_default_1,\n- former_name,\n- former_default_2,\n- ...\n\nThe FrameworkExtraBundle needs to be updated in sync with this PR: https://github.com/sensio/SensioFrameworkExtraBundle/pull/50\n"
            },
            {
                "title": "[Form] Translation",
                "body": "The first commit adds the ability to customize the default message when the form is invalid:\n- Make it an option in the form builder,\n- Allow placeholders in the message,\n- The default value `This value is not valid` exists in the translation files.\n\nThe second commit updates a source string in the XLIFF files to make it translatable. All translations should be updated accordingly. The source string is from the [default validator](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Validator/DefaultValidator.php#L27).\n\nThis PR should fix The issue #997.\n"
            },
            {
                "title": "[HttpFoundation] code factorization in UploadedFile",
                "body": "As both #1542 and #1544 have been merged.\n"
            },
            {
                "title": "[HttpKernel] Add support for 'upload_max_filesize' ini directive",
                "body": "[HttpKernel] Add support for 'upload_max_filesize' ini directive in the Client\n\n**This PR depends on #1542**\n\nThis PR prevent the SW Client from uploading files larger than the limit set in php.ini to closer mimic a real browser usage.\n\nIf both PR eventually gets merge `static protected function getMaxUploadFilesize()` should probably be factorized to the UploadedFile class.\n"
            },
            {
                "title": "[Validator] FileValidator support for uploaded files",
                "body": "[Validator] Consider the ini directive 'upload_max_filesize' while validating an uploaded file (fixes GH-1441)\n\nAdded validator messages should get translated in all the available languages.\n"
            },
            {
                "title": "[Form] Fix the default validator",
                "body": "When php.ini has an empty value for post_max_size\n`post_max_size =`\n\nsee http://fr2.php.net/manual/en/function.ini-get.php\n\npost_max_size can not be false as it has a default value\n"
            },
            {
                "title": "Remove useless code",
                "body": "This PR is about removing useless code which could benefit to perfomances.\n\nCredits go to [Jordi](https://github.com/symfony/symfony/commit/000229dbd0d161f1eebe) for this.\n\nAs a minor modif, I can understand if this could not be merged while in RC.\n"
            },
            {
                "title": "[2.1] Unify cache mechanisms ",
                "body": "The doctrine bundle, the validator and the annotation reader all support caching.\n\nThe doctrine bundle supports memcache, apc, array and xcache.\n\nThe annotations reader supports file and any mechanism that implements `Doctrine\\Common\\Cache\\Cache` by providing a service in the configuration.\n\nThe validator component only supports apc.\n\nIt would be great to be able to define some cache providers in the framework configuration and use them from the configuration of those 3 components.\nThat would require changing the configuration of the doctrine bundle and the annotation reader and implement a ClassMetadataFactory that would use an instance of  `Doctrine\\Common\\Cache\\Cache`.\n"
            },
            {
                "title": "[Form csrf] FileTypeCsrdExtension is not required any more",
                "body": "FileType now extends FieldType.\n"
            },
            {
                "title": "[To Be Discussed][Form] Render prototypes as hidden nodes.",
                "body": "This is a proposal for solving the issue #1497 (rendering of nesting prototypes).\n\nOpening it mainly to track discussion, it should be discussed before a decision is taken **(This PR breaks BC)**\n\nThe problem is sovled by rendering prototype in a container with `style= display: none; `.\n\nThe former prototype key `$$name$$` has been changed for `-prototype-` in order to generate valid markup ('$' are not allowed in xHTML). The leading and trailing '-' have been added to prevent name collision.\n\nSome explanation on the structure of the `prototype_row` block in the table layout:\nhttp://stackoverflow.com/questions/2292947/help-with-html-validation-error-table-column-has-no-cells-beginning-in-it.\n\nSo any feedback ?\n"
            },
            {
                "title": "[DoctrineBundle] Made the memcache instance service private",
                "body": ""
            },
            {
                "title": "Coding Standards: order methods according to their visibility",
                "body": "nothing more than moving methods around to conform to the CS\n"
            },
            {
                "title": "[FrameworkBundle][Form] tweak the choice widget PHP template",
                "body": "- make theming easier,\n- factorize code,\n- make PHP similar to Twig (easier to maintain)\n"
            },
            {
                "title": "[2.1] RFC [Form] Php theming",
                "body": "This PR implements theming support for the php engine.\n\nIt works similarly as the twig theming with themes being folders and blocks being individual files.\n\nThere are probably a few things to tune before this can get merged:\n### Theme naming\n\nThe current format is  <Bundle>:<Controller>  i.e.  FrameworkBundle:Form .\n\nIs this ok or could you imagine something better ?\n### Div and Table theme folders\n\nCurrently  FrameworkBundle\\Resources\\views\\Form  and  FrameworkBundle\\Resources\\views\\FormTable \n\nIs this ok or anything better ?\n### Form helper configuration\n\nI am not sure if the configuration is at the best possible location:\n\n```\nframework:\n    templating:\n        form:\n            resources: [themeA, themeB]\n```\n\nAny better idea ?\n\nThere is a [thread on the ml](http://groups.google.com/group/symfony-devs/browse_thread/thread/9b3f131fe116b511)\n"
            },
            {
                "title": "[TwigBundle] Fix configuration",
                "body": ""
            },
            {
                "title": "[Form] Some refactoring of the rendering",
                "body": "# First two commits\n## FormExtension::render() can now be called recursively.\n\nThe main use case is theming support in for collections. Let's consider that you have a collection of `CustomType`, the type hierarchy while rendering the proto would be `field < form < custom < prototype`. Before this change any theme applied to your custom type (i.e. a `custom_row` block) would not have been taken into account while rendering the prototype because of the structure of the `prototype_row` block:\n\n``` html\n{% block prototype_row %}\n{% spaceless %}\n    <script type= text/html  id= {{ proto_id }} >{{ block('field_row') }}</script>\n{% endspaceless %}\n{% endblock prototype_row %}\n```\n\nwhich skip the `custom_row` block rendering to fallback to the `field_row` block rendering.\n\nWith this PR `prototype_row` recursively calls `FormExtension::render()`\n\n``` html\n{% block prototype_row %}\n{% spaceless %}\n    <script type= text/html  id= {{ proto_id }} >{{ form_row(form) }}</script>\n{% endspaceless %}\n{% endblock prototype_row %}\n```\n\nthis has for effect to render the block for the parent type (i.e. `custom_row`)\n## FormHelper\n\nThe `FormHelper` has been updated to more closely match the `FormExtension` architecture and the templates have been modified accordingly. `echo $view['form']->renderBlock(<block name>)` is the php equivalent of `{{ block(<block name>) }}`.\n\nThe attributes are now rendered using a template rather than by the `FormHelper::attributes()` method.\n\nSeveral templates have been fixed.\n# Third commit\n\nThe `$varStack` property was used to forward options to the label and the widget when rendering a row. The implementation was not working as expected. The proposed way to override label and widget options is to pass these options in the `label` and `widget` keys while callinf `render_row`.\n\nThat would be:\n`{{ form_row(form.field, { attr : {<row attributes>},  label  : { label : <text>,  attr : {<label attr>}},  widget  : {  attr  : {<widget attributes}} } }}`\n\nSo there is now the ability to set attributes for the row (`<div>` or `<tr>`).\n\nThis has been discussed on [the mailing list](http://groups.google.com/group/symfony-devs/browse_thread/thread/17754128ba480545). **I would like to find a compromise with @Seldaek before this gets merged**\n\nThe `$varStack` property is now only used when recursively calling `FormExtension::render()`\n# Notes\n\nI have preferred to submit several commits in order to ease review and to keep some history.\n"
            },
            {
                "title": "[DependencyInjection] Fix a typo",
                "body": ""
            },
            {
                "title": "[HttpKernel] Fix randomly failing tests",
                "body": "Response time comparison causes tests to fail randomly.\n\n```\n\n1) Symfony\\Tests\\Component\\HttpKernel\\HttpKernelTest::testHandleWhenNoControllerIsAStaticArray\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n                         (\n-                            [0] => Tue, 14 Jun 2011 19:56:20 GMT\n+                            [0] => Tue, 14 Jun 2011 19:56:21 GMT\n                         )\n```\n"
            },
            {
                "title": "[HttpFoundation] Make File extends \\SplFileInfo",
                "body": "This is a rebased version of [PR 674](https://github.com/symfony/symfony/pull/674).\n- File: The API has changed (now extends \\SplFileInfo),\n- File: move() creates the target directory when it does not exist\n- UploadedFile: introduction of getClientXXX() methods (for Size, OriginalName, MimeType)\n\nIf this PR does not get merged UploadedFile should at least be fixed: [Client.php](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Client.php#L124) relies on a last parameter which is no more defined and which is used to bypass [move_uploaded_file()](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php#L155) in test mode.\n\nIf this could be merged, I'll detail the changes in UPDATE.md\n"
            },
            {
                "title": "[Validator] some tweaks and phpDoc",
                "body": ""
            },
            {
                "title": "[Form] Make the prototype view child of the collection view",
                "body": "This PR should be a base for discussion.\n\nThe [current implementation](https://github.com/symfony/symfony/pull/1188) has some drawbacks because the prototype view is not a child of the collection view:\n- The 'multipart' attribute is not propagated from the prototype to the collection,\n- The prototype view do not use the theme from the collection.\n\nThose 2 points are fixed by the proposed implementation and one more benefit is that the template markup might be easier to work with:\n\nbefore:\n\n``` html\n<div id= form_emails >\n  <div>\n    <label for= form_emails_0 >0</label>\n    <input type= email  id= form_emails_0  name= form[emails][0]  value= a@b.com >\n  </div>\n  <script type= text/html  id= form_emails_prototype >\n    <div>\n      <label for= $$name$$ >$$name$$</label>\n      <input type= email  id= $$name$$  name= $$name$$  value=   />\n    </div>\n  </script>\n</div>\n```\n\nafter:\n\n``` html\n<div id= form_emails >\n  <div>\n    <label for= form_emails_0 >0</label>\n    <input type= email  id= form_emails_0  name= form[emails][0]  value= a@b.com >\n  </div>\n  <script type= text/html  id= form_emails_prototype >\n    <div>\n      <label for= form_emails_$$name$$ >$$name$$</label>\n      <input type= email  id= form_emails_$$name$$  name= form[emails][$$name$$]  value=   />\n    </div>\n  </script>\n</div>\n```\n\n@kriswallsmith I'd like to get your feedback on this PR. thanks.\n"
            },
            {
                "title": "[TwigBundle] Optimize the FilesystemLoader",
                "body": "-  `findTemplate()` will most likely be called with the template logical name. In such a case this is a waste of time to call `parse()` and `getLogicalName()`;\n- use `$cache[]` from the base `\\Twig_Loader_Filesystem`.\n"
            },
            {
                "title": "[Form] Fix rendering using twig",
                "body": "The issue being fixed is described here:\nhttps://github.com/symfony/symfony/pull/1188\n\nThe [first commit](https://github.com/vicb/symfony/commit/8677aa3dce03e3633d272054e9c5d153aee9cf86) is the one fixing the issue. The main idea is to first compute the list the blocks that should be used to render a particular view and pass the list of block when [rendering the block from the twig template](https://github.com/vicb/symfony/commit/8677aa3dce03e3633d272054e9c5d153aee9cf86#L0R236).\n\nNotes:\n- Blocks are looked in this order: themes from the current view, themes from the parent view up to the root view and then extension resources;\n- there is no more need to `extends` or `use` a base template in a theme - the docs should be updated accordingly if this PR gets merged;\n- any template can be used to call `renderBlock` as the only thing who cares is the list of blocks.\n\nThe [second commit](https://github.com/vicb/symfony/commit/9135f963db9d59d0785808a9cf7c22d2cfd4384d) is an attempt to optimize the cache layer by making `getTemplates()` recursive. The previous cache was only helpful while rendering different section (label, widget, errors) of a single view. \n\nThe [third commit](https://github.com/vicb/symfony/commit/b19052f8797d13a0ca6700c7c7f057dfb7fe0585) further improves the cache by caching blocks rather than templates.\n"
            },
            {
                "title": "[Form] Twig theme inheritance",
                "body": "Before this change nested view themes would have been overriden by parent view themes.\n"
            },
            {
                "title": "[Form] A few rendering fixes",
                "body": "See details in the commit messages when needed.\n"
            },
            {
                "title": "[Form] Fix collection rendering",
                "body": "1. Labels `for` attributes should point to a valid [form control](http://www.w3.org/TR/html-markup/label.html#label) so the `for` attributes has been removed for the collection main label (twig & php).\n2. Fix `collection_row` (php only).\n"
            },
            {
                "title": "[Form] A proposal to fix the form rendering",
                "body": "This PR is my proposal to fix the form rendering.\n\nHow it works:\n- A view is considered rendered when the associated  row  or  widget  section has been rendered,\n- if all the children views have been rendered, the view is considered as rendered.\n\nThe second bullet causes a change in beviahor: if you have a repeated form and you render the widget individually, `form_rest` would not render the labels any more. The same thing when you have a file form and render all the nested fields individually (that's `file`, `token`, `name` & `originalName`) then the file widget `<div>` would not be rendered.\n\nThis new behavior is intended as you should have taken care of the markup (labels, div, ...) when rendering the fields individually.\n\nSome unit test from @stloyd have been reused to improve the coverage. They have been slighty modified to take into account the change in behavior.\n\nThe [original tests](https://github.com/stloyd/symfony/commit/66d1a6150eb0cd29b698eeac759958ba8427c4f3#L3R264) were expecting the labels to be rendered for a repeated field. The [modified tests](https://github.com/vicb/symfony/commit/c2b9061559a12adc9ecd5dc92f3b8f9b9034aca1#L0R263) expects them not to be rendered.\n"
            },
            {
                "title": "[Form] A rendering fix + tweaks",
                "body": "- Fix for issue #1157,\n- Some code & doc tweaks\n"
            },
            {
                "title": "[Form] The variable stack should not persist while rendering",
                "body": "The variable stack (Templating Helper, Twig Form extension) is persisted across section rendering.\n\nThen the following pseudo code:\n\n```\nrender_widget($view, {'label' => 'oops'})\nrender_label($view)\n```\n\nWill render the 'oops' label.\n\nThe variable stack should only persists while walking a single section hierarchy.\n"
            },
            {
                "title": "[Twig][Form] Optimize form rendering",
                "body": "Implement a template cache to speed up rendering when using twig:\n- per view cache,\n- cache is resetted when a theme is added.\n"
            },
            {
                "title": "[Form] Fix for nested forms getting erroneously set as rendered",
                "body": "This is a fix for [issue #779](https://github.com/symfony/symfony/issues/779) reported by @brikou\nI believe this is the proper this for [PR #1012](https://github.com/symfony/symfony/pull/1012) submitted by @ericclemmons\n\nSome details on the fix can be found in eric's PR.\n"
            },
            {
                "title": "[Form] Tweak the field type",
                "body": "- Remove 2 calls to `$form->getName()`\n- Taking advantage of the view fluid interface\n"
            },
            {
                "title": "[Form] Improve CSRF",
                "body": "CSRF options should be declared in the csrf extension:\n\nPros:\n- That the way it should be;\n- Avoid misleading options in base types,\n\nCons:\n- small impact on perf\n"
            },
            {
                "title": "[Form] CS related changes",
                "body": " Cosmetic  part of the former [PR 924](https://github.com/symfony/symfony/pull/924)\n"
            },
            {
                "title": "[Form] Implement a fluid interface FormView",
                "body": " Real  part of the former [PR 924](https://github.com/symfony/symfony/pull/924)\n"
            },
            {
                "title": "[Form] Optimization of the PropertyPath class",
                "body": "The most interesting part is `readPropertyPath` and `writePropertyPath`:\n- Recursion has been removed in favor of a simple for loop (saves cycles + mem),\n- Saves 1 call to is_object,\n- Initialize property only when required (array case)\n"
            },
            {
                "title": "[Form] phpDoc",
                "body": ""
            },
            {
                "title": "[Form] Fluid interface for the view",
                "body": "It also contains some CS related changes\n"
            },
            {
                "title": "[Form] A few small fixes",
                "body": ""
            },
            {
                "title": "[Form] More phpDoc & CS",
                "body": "- Add & fix some phpDoc,\n- Fix method ordering (according to their visibility),\n- Misc CS fixes\n\n_(@stof this should fix all the method ordering issues you mentioned yesterday)_\n"
            },
            {
                "title": "[Form] A few small fixes",
                "body": ""
            },
            {
                "title": "[Form] Some fixes in transformers",
                "body": "- phpDoc,\n- CS,\n- catch more exceptions (i.e. when creating File instances, getting list choices)\n- throw component specific exceptions (rather than SPL exceptions) for consistency\n"
            },
            {
                "title": "[Form] Make TimezoneChoiceList implement ChoiceListInterface rather than ",
                "body": "There is no added value in extending the ArrayChoiceList class here.\n\nImplementing ChoiceListInterface make the code simpler.\n"
            },
            {
                "title": "[Form] Make the interface more fluid",
                "body": ""
            },
            {
                "title": "[Form] fix and add some phpDoc",
                "body": "The greatest part of this PR is only about phpDoc.\n\nThere are also:\n- a few changes to conform to the CS,\n- changes in the type of exception (to use the exception from the Form component rather than generic SPL exception - this is to conform with the rest of the Form code)\n\nLet me know if this PR is ok.\n"
            },
            {
                "title": "[Form] fix and add some phpDoc",
                "body": "The greatest part of this PR is only about phpDoc.\n\nThere are also:\n- a few changes to conform to the CS,\n- changes in the type of exception (to use the exception from the Form component rather than generic SPL exception - this is to conform with the rest of the Form code)\n\nLet me know if this PR is ok.\n"
            },
            {
                "title": "[Form] Logic error in FormView::getIterator()",
                "body": "```\npublic function getIterator()\n{\n    if (isset($this->children)) {\n        $this->rendered = true;\n\n        return new \\ArrayIterator($this->children);\n    }\n\n    return new \\ArrayIterator(array());\n}\n```\n\nThe first test `isset($this->children)` will always return true.\n"
            },
            {
                "title": "[Form] Do not set the value attribute for file inputs",
                "body": "Fix http://trac.symfony-project.org/ticket/9731\n"
            },
            {
                "title": "[Form] Allow for arbitrary keys in PaddedChoiceList",
                "body": "With the form code:\n\n`array('a' => 'C')` would generate `<option value='C'>C--</option>`\n\nit now generates\n\n`<option value='a'>C--</option>`\n\n@bschussek is this valid ?\n"
            },
            {
                "title": "[Form] tweaks - WIP",
                "body": "Some tweaks in the Form class (& interface).\n\nThis is mostly phpDoc & some trivial tweaks.\n\nNot sure if this is a good idea to merge it now (lot of code has been moved to group methods in a more logic way) so some pending PRs might get harder to merge.\n\nAn other solution would be to merge this later (I would help with rebasing then).\n\n**Changes**\n- Add and tweak phpDoc,\n- Fix CS,\n- ChoiceList: \n  - `MonthChoiceList` now accepts a `\\Closure` to generate the choices (unit tested)\n  - `TimezoneChoiceList` implements `ChoiceListInterface` instead of extending `ArrayChoiceList`\n- DataMappers:\n  - some `\\InvalidArgumentException` have been converted to `UnexpectedTypeException`\n  - throw some more `TransformationFailedException` (i.e. when `$choiceList->getChoices()` fails)\n  - outer exceptions get the code from the inner exception\n  - add & tweak unit tests\n  - enforce timezone format (string)\n  - handle cases where a timezone is not supported (throw a `TransformationFailedException`)\n- Form\n  - more properties get initialized at declaration time,\n  - `bind()` and `bindRequest()` have a fluid interface,\n- FormView:\n  - `$parent` defaults to `null` in `setParent()` to simplify some code in the `Form` class\n\n**todo list**\n- DONE (Kris) set default values in the constructor for Form (vs declaration),\n- DONE (Bernhard) revert `for (--)` to `foreach` \n\n**Discussion on the ml**\n[This thread](http://groups.google.com/group/symfony-devs/browse_thread/thread/f3545c30059d4346)\n"
            },
            {
                "title": "[TemporaryStorage] Add a size argument & ability to configure this in the FrameworkBundle",
                "body": "ref: http://trac.symfony-project.org/ticket/9747 \n\nThe default max size is set to 500MB.\n\nThe default ttl is set to 1h\n"
            },
            {
                "title": "[HttpFoundation] Sanitize uploaded file original name",
                "body": "@fabpot could you please re-consider this ?\n\nIt has been [closed once](https://github.com/symfony/symfony/pull/666)\n\n**HOWEVER**\n\nIt is true that it does not make the situation perfect but invalid chars would cause an exception while not using `basename()` could be a security issue (i.e. replacing a system file, altering or adding a file in the web folder).\n\nAnd adding a comment on the method [is not always enough](https://github.com/symfony/symfony-docs/pull/245)\n"
            },
            {
                "title": "tweaks (drop \\Closure)",
                "body": "This PR is an update of https://github.com/symfony/symfony/pull/682 with more explanation.\n\nWhy this change ?\nFrom [php.net](http://fr.php.net/manual/en/functions.anonymous.php): Anonymous functions are currently implemented using the Closure class. This is an implementation detail and should not be relied upon.\n\nI do not think that Closure have been blindly replaced: most of the time using `is_callable($closure)` over a Closure is fine but `$closure` might be a function name (` myFunc ` or ` Foo::myMethod `) in which case this is not equivalent. I think that the problematic spots have been handled.\n\nObjects with an [__invoke](http://fr.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.invoke) magic method are by definition callable.\n"
            },
            {
                "title": "tweaks",
                "body": "This one is for @kriswallsmith !\n\nMainly removing references to \\Closure.\n\nThe tricky one was VariableNode::getDefaultValue() which can accept 'Controller::Action' which is not a cb.\n"
            },
            {
                "title": "[Form] tweak",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Make File extends \\SplFileInfo",
                "body": "This change makes File extends \\SplFileInfo which I think is good for consistency and make use of well tested PHP functions.\n\nSome highlights:\n- The API has changed (using methods from \\SplFileInfo),\n- move() returns a new class representing the target file - this is probably the change which has the greater impact\n- move() creates the target directory when it does not exist\n- New class hierarchy: `\\SpfFileInfo < File < UploadedFile < PersistedFile`\n- introduction of getClientXXX() methods (for Size, OriginalName, MimeType)\n"
            },
            {
                "title": "File & UploadedFile tweaks",
                "body": ""
            },
            {
                "title": "SECURITY [UploadedFile] Sanitize filename ",
                "body": "The fix is:\nadding a `basename()` call to `$this->originalName = basename($originalName);`\n"
            },
            {
                "title": "Make casting scalar to array consistent",
                "body": "This is a fixed version of https://github.com/symfony/symfony/pull/657\n\nMany thanks to @Seldaek for pointing some potential issues (which have lead to 2 fixes).\n"
            },
            {
                "title": "Make casting scalar to array consistent",
                "body": "This change is mainly for consistency across the source code.\n\nI have measured the proposed implementation to be 5 times faster than the previous one with PHP 5.3.3 whether the initial value is already an array or not (of course this will be diluted and we can not expect any perf improvement)\n"
            },
            {
                "title": "A few tweaks",
                "body": ""
            },
            {
                "title": "[Cache warmers] Templating & twig code factorization",
                "body": "The change introduces a new TemplateFinder class which is used by both the templating and twig cache warmers. Benefits:\n- Code re-use,\n- The template list is cached in the TemplateFinder and the filesystem does not have to be parsed twice.\n"
            },
            {
                "title": "[WebProfilerBundle] Sort tables by key name",
                "body": "@fabpot thanks for the tip !\n"
            },
            {
                "title": "[Cache warmers] Dependency resolution ",
                "body": "Change the priority mechanism to a more explicit dependency resolution mechanism.\n\nfrom UPDATE.md:\n\nThe cache warmer warm-up order is no more dictated by an absolute priority.\nA dependency resolution algorithm is used to warm-up the warmers in the correct\norder. The getName(), getPreWarmers() and getPostWarmers() methods have been\nadded to the CacheWarmerInterface and must be implemented in each warmer.\nThe CacheWarmerAggregate class has been renamed to CacheWarmerManager.  \n"
            },
            {
                "title": "[AsseticBundle] Fix the cache warmers - needs Kris review & approval",
                "body": "Trying to fix http://trac.symfony-project.org/ticket/9662\n\nThis is for @kriswallsmith to review\n\nThe issue:  The assetic cache warmer has a dependency ... on the templating cache warmer \n\nSolved by injecting the container in place of the asset manager in the constructor which allow for retrieving the asset manager only when needed in the warmUp() method.\n\nOther considerations:\n- The template warmer should run first (it is given a priority of 20)\n- The assetic cache warmer should run after the template warmer but before the router warmer (it keeps its priority of 10)\n- The router warmer has a default priority of 0\n"
            },
            {
                "title": "Service event tests",
                "body": "As requested in https://github.com/symfony/symfony/pull/582\n"
            },
            {
                "title": "[ContainerAwareEventDispatcher] RFC - fixing a bug with service event & scope",
                "body": "I would like to hear your comments about this PR:\n\n[cc89d4b](https://github.com/vicb/symfony/commit/cc89d4b1a52695cf50de49635dcd651494e9e653) fixes an issue when a scoped service is used as a listener and you re-enter the same scope - see the unit test for details.\n\n[6ae61eb](https://github.com/vicb/symfony/commit/6ae61eb9ffa310ab9c1fa309d5d801dcf1138f6e) adds some optimization by calling `addListener` only when required as this call could be time consuming (need to re-sort events, ...)\n\nSome [reference](https://github.com/symfony/symfony/commit/4e047b5e27af0a87ec188e78be04ff2e9f42f4b9#L1L45)\n"
            },
            {
                "title": "Factorization in the template cache warmers (fmwk & twig)",
                "body": "It now the responsability of the `TemplatePathsCacheWarmer` to build the list of all the templates. The cache warmer of twig only uses this list.\n\nChoosing composition over inheritance allow for caching the template list and the filesystem does not have to be parsed twice (even if cache warmer performances are not critical)\n"
            },
            {
                "title": "[FrameworkBundle] The $currentPath argument is not used for locating temp",
                "body": "[FrameworkBundle] The $currentPath argument is not used for locating templates\n"
            },
            {
                "title": "[FrameworkBundle] Fix an issue adding a scoped service as an event listener",
                "body": "The rationale is explained [here](https://github.com/symfony/symfony/commit/4e047b5e27af0a87ec188e78be04ff2e9f42f4b9#L1R80)\n"
            },
            {
                "title": "[Templating] Fix some issues (WIP)",
                "body": "Replaces [PR497](https://github.com/symfony/symfony/pull/497)\n\nI have submitted this PR to acknowledge that there are some issues and they are being fixed.\n**It is still a WIP**\n\nAddressed issues:\n- The templating path cache warmer now handle Bundle inheritance correctly,\n- The twig cache warmer use the template logical names (This is required for compiled templates getTemplateName() method)\n\nLeft to do:\n- Check the AsseticBundle cache warmer,\n- Try to factorize common code in a `TemplateCacheWarmer` base class (templating, twig, assetic),\n- Review the code and add some more unit tests\n\nI think this could be available some time next week but feel free to help if something is needed before.\n"
            },
            {
                "title": "Display template logical names in exception messages",
                "body": "- A few places were missed by the previous update,\n- taking advantage of `__toString()` == `getLogicalName()`\n"
            },
            {
                "title": "[HttpKernel] Fix the case where no resource is found",
                "body": "Thanks @weaverryan for [pointing this](https://github.com/symfony/symfony/commit/3cd3dd39ba727e930db0936eb7bba2dbef168143#L0L241)\n"
            },
            {
                "title": "[Templating] Fix some issues (WIP)",
                "body": "I have submitted this PR to acknowledge that there are some issues and they are being fixed.\n**It is still a WIP**\n\nAddressed issues:\n- The templaring path cache warmer now handle Bundle inheritance correctly,\n- The twig cache warmer use the template logical names (This is required for compiled templates getTemplateName() method)\n\nLeft to do:\n- This PR makes use of [PR 510](https://github.com/symfony/symfony/pull/510) from @hason which should be integrated when it is merged,\n- Check the AsseticBundle cache warmer,\n- Try to factorize common code in a `TemplateCacheWarmer` base class (templating, twig, assetic),\n- Review the code and add some more unit tests\n\nI think this could be available some time next week but feel free to help if something is needed before.\n"
            },
            {
                "title": "[Event] Better error detection",
                "body": "The dispatcher is too lazy to report errors early which is fixed in the TraceableEventDispatcher\n"
            },
            {
                "title": "[Kernel] Fix bundle inheritance",
                "body": "This prevents a stupid mistake (parentName = self)... and I know what I am talking about\n"
            },
            {
                "title": "[Templating] Fix for getting the file link format from XDebug settings",
                "body": "because [str_replace($from, $to, null)](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php#L326) returns an empty string\n"
            },
            {
                "title": "[WebProfilerBundle] Tweak the wdtb css",
                "body": ""
            },
            {
                "title": "[WDTB] Some tweaks",
                "body": "Improve CSS & the event panel.\n"
            },
            {
                "title": "[FrameworkBundle] Fix for getting the file link format fallback to XDebug",
                "body": "With the former code, the pattern would be [''](https://github.com/vicb/symfony/pull/new/file_link_format#L1L86) when no ide is specified in the configuration.\n\nThis is different from [null](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Templating/Helper/CodeHelper.php#L32) resulting from the fallback to xdebug config not being used.\n"
            },
            {
                "title": "[FrameworkBundle] Fix the traceable event dispatcher",
                "body": "Fix the logs in case the propagation gets stopped\n"
            },
            {
                "title": "[FrameworkBundle] Delete .gitkeep files",
                "body": "I don't think those were useful, were they ?\n"
            },
            {
                "title": "[FrameworkBundle] Fix the cache template loader",
                "body": "This solves a bug triggered when the cache folder is set in the templating configuration.\n\ni.e. `<framework:templating assets-version= 123  cache= %kernel.cache_dir%/tmpl  >`\n\nTemplating\\CacheLoader was expecting a `Loader` instance where the `FilesystemLoader` only implements the `LoaderInterface`.\n"
            },
            {
                "title": "Locating resources",
                "body": "This PR is a cleanup version of https://github.com/symfony/symfony/pull/416\n## Description:\n\nThis PR implements resources inheritance in the custom Resources folder.\n\nGiven a child Bundle derived from a Parent Bundle and a app/Resources folder used to override resources:\n- ParentBundle/Resources/res.res\n- ChildBundle/Resources/res.res\n- app/Resources/ChildBundle/res.res\n\nA call to `locateResource('@Parent/Resources/res.res', '/path/to/app/Resources', false)` would return an array composed of 3 elements:\n- app/Resources/ChildBundle/res.res\n- ChildBundle/Resources/res.res\n- ParentBundle/Resources/res.res\n\nBefore this PR, it would have returned an array of 2 elements because only app/Resources/ParentBundle would have been inspected (and not app/Resources/ChildBundle): \n- ChildBundle/Resources/res.res\n- ParentBundle/Resources/res.res\n## New behavior:\n\nGiven:\n- ParentBundle/Resources/res.res\n- ChildBundle/Resources/res.res\n- app/Resources/ParentBundle/res.res\n\nA call to `locateResource('@Parent/Resources/res.res', '/path/to/app/Resources', false / true)` would throw an exception because app/Resources/ParentBundle/res.res is  hidden  by ChildBundle/Resources/res.res.\n\nThere is no way to guess which resource should be used between:\n- ChildBundle/Resources/res.res\n- app/Resources/ParentBundle/res.res\n\nThe right way to override a resource would be to move the custom resource in the app/Resources/ChildBundle folder (as described in the previous section).\n## Left to do:\n\nThis PR assumes that:\n- The bundle short name is used for the locateResource call,\n- The resources live in the app/Resources/[BundleName]**Bundle** folder\n\nThis PR should be tuned once a decision is taken on the bundle names. \n"
            },
            {
                "title": "[WebProfilerBundle] Make verbosity configurable",
                "body": "For those wanting a smaller wdtb, but configurable this time.\n"
            },
            {
                "title": "Introduction of a configuration base class",
                "body": "The base class would be the extension point for implementing the generation of XSD and documentation, see http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c/520f3220aa9f7596.\n\nThis change is backward compatible: you don't have to use the base class (current extensions would work without any changes).\n\nHowever introducing this change early will allow extension built on this to benefit from future extensions (XSD and doc generation, ...) when they are implemented.\n"
            },
            {
                "title": "[WebProfilerBundle] Fix a few typos",
                "body": ""
            },
            {
                "title": "[WebProfilerBundle] Fix a few typos",
                "body": ""
            },
            {
                "title": "[TwigBundle] Update the cache warmer",
                "body": "This changes reflects what has been done [on the template warmer](https://github.com/symfony/symfony/commit/a2294106fb8eee0f9cdb10bf9b190c52485bd551#src/Symfony/Bundle/FrameworkBundle/CacheWarmer/TemplatePathsCacheWarmer.php)\n\n*_This PR assumes that custom templates are stored in the app/Resources/BundleName/views *_\n\nNotes:\n- If think there are currently some problems with the template locator / warmer,\n- There should be some common code for handling template paths (across Framework, Twig, Assetic, ... bundles).\n\nSo this PR should be considered as a temporary fix before we have a better solution. I'll post my thoughts on the dev ml in the coming days. \n"
            },
            {
                "title": "Resource paths should use the full bundle name (with the 'Bundle' postfix)",
                "body": "I think it makes sense to keep to full bundle name for the resource folders:\n`<app>/Resources/HelloBundle/views/Hello/...`\n\nIt is more consistent with the Bundle directory structure.\n\nThere should probably be some tests for this, but there's a pending question for that: https://github.com/symfony/symfony/commit/5c905beb13624d40a768e6e9ea98cb873e149c6e#L104L306\n"
            },
            {
                "title": "There's one more thing",
                "body": "A new name... what else ?\n"
            },
            {
                "title": "[TwigBundle] Fix the cache warmer",
                "body": "related to http://groups.google.com/group/symfony-devs/browse_thread/thread/9dfd7cb158f33cbf\n"
            },
            {
                "title": "[Config] Component refactoring",
                "body": "This is a rebased version of https://github.com/symfony/symfony/pull/303\n\nThis should be merged as soon as someone can test the security configuration. You should exercize most of the options as building the tree is actually spread over several files (Configuration.php & *Factory.php)\n\nThe node register (proposed by Johannes in the original PR) will be implemented very soon as a separate PR (no BC).\n\nI can provide some support provided you ping me before Sunday or you will have to wait for 1 week.\n"
            },
            {
                "title": "[WDTB] Remove PHP config widget",
                "body": "The info does not vary across request and is available in the config panel.\n"
            },
            {
                "title": "[Config] Component refactoring, request for feedback",
                "body": "I have been working for some time on refactoring the configuration component.\n\nJohannes has given me a lot of constructive feedback and most of the issues he raised should have been addressed by now. This now time to show the code to the community to get even more feedback.\nJohannes still hasn't approved the current version and if he thinks this should not be integrated then I think this should not be integrated !\n\nThe ultimate goals were:\n- for me to understand the code,\n- have some fun with Sf2 code,\n- to make the code easier to understand,\n- to make it easily extendable (in the direction given by [by Lukas on the ml](http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c))\n\nI see [some benefits](http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c) of the current version (other than the ones listed right above):\n- You don't have access to a bunch a public properties any more (they are made protected in the definition classes),\n- Most logic errors will be caught at runtime rather than silently ignored ([Twig configuration](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#L14L116) is an example) i.e. :\n  \n  ```\n    ...->scalarNode('cache_warmer')\n          ->scalarNode('dummy')\n              ->requiresAtLeastOneElement()\n          ->end()\n      ->end()\n  ```\n- When using the auto-complete in your IDE, 'scalarNode' and 'requiresAtLeastOneElement' are not in the proposed choices. \n\nBut benefits rarely come for free:\n- The configuration files get a bit more verbose,\n- Some API breaks as described below,\n- ... ?\n\nThis change breaks some API but the conversion is easy and there is a 'migration guide' in the [commit message](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180).\nConverting a configuration files is really a matter of minutes.\nYou can take a look at [DoctrineBundle](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#diff-1), [TwigBundle](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#diff-14), [ZendBundle](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#diff-15), ...\n\nI have already checked FrameworkExtraBundle, SecurityExtraBundle & UserBundle: the first two should literraly take no more than 20s to convert while the last one might require an extra minute.\n\nIf this eventually gets integrated in Sf2, I can help converting your configuration, drop me a message on github.\n\nSome references:\n- A discussion we had with Johannes on comparing [the current vs proposed imp.](https://gist.github.com/594c53c7b08503beb957)\n- The foreseen config extensions sum up by [Lukas on the ml](http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c)\n- The migration guide is in the [commit message](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180)\n\nStill reading ? Any feedback ?\n\nThanks,\nVictor\n\nNotes:\n- I have not been able to fully validate the security configuration has I don't have a proper setup for this (exercizing all the options). This should be done (if && before) merging the code. \n- I think this is only a  small change  !\n- That is my longest ever PR message and commit message!\n"
            },
            {
                "title": "[Profiler] Liquid layout",
                "body": "Enlarge the profiler panels.\n"
            },
            {
                "title": "Nitpicking...",
                "body": ""
            },
            {
                "title": "Profiler again",
                "body": "See commit messages for details.\n\nI really like the visual feedback of the sf1 debug bar (changing the background color)... Fabien if really want this not to be integrated in sf2, I can remove it.\n"
            },
            {
                "title": "Profiler color",
                "body": "Also update [PR 134](https://github.com/symfony/symfony/pull/134)\n"
            },
            {
                "title": "[WebProfilerTemplate] Some improvements",
                "body": "See commit messages for (some) details\n"
            },
            {
                "title": "[Profiler & Exceptions] Use JS/CSS best practices",
                "body": ""
            },
            {
                "title": "Profiler: token not found page converted to the new design",
                "body": ""
            },
            {
                "title": "Profiler log design",
                "body": "Display the total number of log entries & highlight error count if any.\n"
            },
            {
                "title": "[Config] Some tweaks in the component",
                "body": ""
            },
            {
                "title": "Config - simplify the code",
                "body": ""
            },
            {
                "title": "[Kernel] Get rid of Kernel::registerRootDir()",
                "body": "The proposed implementation uses reflection in `Kernel::getRootDir()` instead.\n\nIf speed is really a concern, you still can override the default implementation of `getRootdir` to return `__DIR__`\n\nAlso add / fix some PHPDoc.\n"
            },
            {
                "title": "Templating",
                "body": "Simpler is better\n"
            }
        ],
        "pr_comments": [
            "1. This should probably be moved out of the if to be set wether CSRF is enabled or not\n",
            "2 Then there is no need to check for `hasParameter`\n",
            "You can remove `isset($config['csrf_protection']) &&`\n",
            "The parameter should be set to `false` before the if and `true` here\n",
            "@Tobion I did change it (adding the `raw` prefix) in [here](https://github.com/symfony/symfony/commit/55014a6841bec50046e8329a4835c160ac31a496#L10R33) - I can't remember why, try to look at the tests.\nMore interesting might be the [original commit](https://github.com/symfony/symfony/commit/d17ba0e14775f6825b7df4a2d23c21036da06c11) where the decode was added.\n",
            "Take a look at `context->addViolation()`, I think passing null as the 3rd argument is not equivalent to what was done before, there's a gotcha in the method !\n",
            "Yep this is what I mean (and you should add a unit test for that)\n\nNo other issue detected but I only quickly scanned it.\n",
            "should end with a  . \n",
            "1 line summary\n",
            "missing new line\n",
            "why isset ?\n",
            "no else reuired (you return anyway)\n",
            "bollena with a ** B ** Sir, and please align the variable names (and their description when applicable)\n",
            "we would probably return here and drop the else\n",
            "you're lucky I have noticed it before fabpot :)\n",
            "you can return this\n",
            "you should probably normalize the path (D_S) as the method is public\n",
            "@fabpot:\n- is reusing the finder intended (or a bug) here ?\n- is handling serialized class only (vs string, ie paths) intended ?\n\nThanks, too tired to figure out by myslef tonight !\n",
            "- all refs seem to be handled - 3rd party bundles ?\n- I am mainly talking about the cache folder in string (ie `a:9:{i:0;C:46: Symfony\\Component\\Config\\Resource\\FileResource :60:{s:52: /var/www/sf2.2/app/cache/dev_new/as`)\n",
            "why `$this->timeout` ? (null ===) \n",
            "should you move 1e6 to the definition ?\n",
            "positive number\n",
            "`(Boolean) $ignore`\n",
            "`strtolower`is not needed as the value is already normalized here (upercase)\n",
            "leading  \\s*  is not needed as value are trimmed internaly by PHP\n",
            "If think  0x05  is a valid hexa number.\n\n1.1 is not supported\n",
            " a-f  is also valid hexa\n",
            "`\u00ecntval` might be better than `base_convert`\n",
            "read my previous comments.\n",
            "Should be KMG on the above 2 lines\n",
            "you can remove the `trim` as this is done internally by the PHP parser\n",
            "same here\n",
            "should probably be `$shifts` to be consistent.\n",
            "> Don't you think I should turn strtoupper into strtolower to have the same code everywhere?\n\nThat would be a BC break without any upside, so no.\n",
            "you don't need to introduce yet an other variable & substr, see http://3v4l.org/PjDee\n",
            "Is breaking intended here ?\n\nMaybe Continue should be return ?\n",
            "should be `array_key_exists` as the value could be `null` as in `TranslationDefaultDomainNodeVisitor` below\n",
            "->has ?\n",
            "then `getData` is probably a better name ? \n",
            "should it be $object ?\n",
            "would using a default value (ie null) help wrt BC break ?\n",
            "I would say it's a micro-optim which:\n- makes the code unclear,\n- is really useless as you want to use the compiled version where perf matters.\n",
            "btw where could there be any backtracking here ?\n",
            "(but thanks for the tip++ anyway!)\n",
            "what about `enableMagicCall($enable)` ?\n",
            "hope\n",
            "I am pretty sure he would accept something like `enableMagicCall($enable = true)`.\n",
            "I think it should be ExtensionPass (no  s )\n",
            "Only starting from 8 :)\n\n_(google for noun as adjective - younger,I've been traumatized by my English teacher about this)_\n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> > @@ -0,0 +1,23 @@\n> > +<?php\n> > +\n> > +namespace Symfony\\Bundle\\TwigBundle\\DependencyInjection\\Compiler;\n> > +\n> > +use\n> > Symfony\\Component\\DependencyInjection\\Compiler\\CompilerPassInterface;\n> > +use Symfony\\Component\\DependencyInjection\\ContainerBuilder;\n> > +\n> > +/**\n> > - \\* @author Jean-Fran\u00e7ois Simon jeanfrancois.simon@sensiolabs.com\n> > - */\n> >   +class ExtensionsPass implements CompilerPassInterface\n> \n> Even if it registers many extensions?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7258/files#r3235624\n",
            "Well on this one you should rather thank my English teacher (if she's still alive). I should also thank you to help me  treat my long buried trauma ;)\n",
            "As extending `\\UnexpectedValueException` is required to keep BC, could you please add a UT ?\n",
            "Yep and it should be added in 2.0.\n\nYou should also implements the module wide `ExcpectionInterface` (in 2.0 also).\n",
            "Could you link the PHP defect related to those checks in a comment ? thanks\n",
            " remove  does not sound right to me (in the comments also)\n\nwhat about `canonicalizePath` or `getRealPath`\n",
            "I would go for the first one - but no strong prefs. Thanks.\n",
            "Do we have something like `getSupportedAdapeters` ?\n",
            " Supported  ?\n",
            "> Adapters support is determined in searchInDirectory.\n\ntrue but only when `canBeUsed()`returns true, right ?\n",
            "(I am not sure if my suggestion makes sense, just asking)\n",
            "don't know... I have to think more about it.\n\nWhat triggers the idea is `setAdapter` (ie you would not want to set something that is not supported)\n",
            "sure, please also link this comment. thanks.\n\nchat to you tomorrow.\n\nOn 02/28/2013 05:49 PM, Jean-Fran\u00e7ois Simon wrote:\n\n> In src/Symfony/Component/Finder/Finder.php:\n> \n> > -    {\n> > -        $this->resetAdapterSelection();\n> >   +\n> > -        return $this->sortAdapters();\n> > -    }\n> >   +\n> > -    /**\n> > -     \\* Selects the adapter to use.\n> > -     *\n> > -     \\* @param string $name\n> > -     *\n> > -     \\* @throws \\InvalidArgumentException\n> > -     *\n> > -     \\* @return Finder The current Finder instance\n> > -     */\n> > -    public function setAdapter($name)\n> \n> Hmm, this is not stupid...\n> I'll open an RFC tomorrow, could you keep your ideas in mind and feed \n> comments with them?\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/7212/files#r3191594.\n",
            "->info() ?\n",
            "what about the TZ handling ?\n",
            "tabs ? Sf use 4 spaces for indentation\n",
            "@Jack12816 I forgot to split this test as the 2 above, could you do this ?\n",
            "I tend to prefer self descriptive names like  testNoCacheControlHeaderOnAttachment  or something like this. Otherwise :+1:\n\n@fabpot Would it be helpful to track the changes for bug fix releases in the changelog ? (we do currently only list changes in minor versions, may be to let people think Sf never has bugs ???)\n",
            "Because this PR would be a good thing to mention in a changelog.\n",
            "not related to this PR but what's the intent of `TestCase` (I have always wondered)\n",
            "I have once been corrected by a native speaker:  set  alone is ambiguous (ie could be set to `null` or `0` in my case)\n",
            "should you trigger an error ?\n",
            " locales  - consistency\n",
            "makes sense. Is this documented somewhere ?\n",
            "phpdoc ?\n",
            "Not very important but adding  10  here couples comments and code\n",
            "Is it really worth mentioning parameters with '' value ?\n",
            "I don't expect a Boolean when I see mode.\n",
            "It might be good to add ->info() also\n",
            " / \n",
            "Why in catch only ?\n",
            "And where does foo comes from ?\n",
            "Ok, (i am replying from my mobile) but why use a go folder instead of creating one for the purpose of this test then.\n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> > @@ -301,6 +301,24 @@ public function testAppendWithAnArray()\n> >          $this->assertIterator($this->toAbsolute(array('foo',\n> > 'foo/bar.tmp', 'toto')), $finder->getIterator());\n> >      }\n> > -    public function testPermissionException()\n> > -    {\n> > -        // make 'foo' directory non-openable\n> > -        chmod(self::$tmpDir.DIRECTORY_SEPARATOR.'foo', 0333);\n> \n> froo comes from here:\n> https://github.com/symfony/symfony/blob/2.0/tests/Symfony/Tests/Component/Finder/Iterator/RealIteratorTestCase.php#L20\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7050/files#r2984171\n",
            "Almost. Google for it (no a lot of time for now, sorry)\n\n Jean-Fran\u00e7ois Simon  notifications@github.com wrote:\n\n> > @@ -301,6 +301,24 @@ public function testAppendWithAnArray()\n> >          $this->assertIterator($this->toAbsolute(array('foo',\n> > 'foo/bar.tmp', 'toto')), $finder->getIterator());\n> >      }\n> > -    public function testPermissionException()\n> > -    {\n> > -        // make 'foo' directory non-openable\n> > -        chmod(self::$tmpDir.DIRECTORY_SEPARATOR.'foo', 0333);\n> \n> is this contant totally useless?\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7050/files#r2984090\n",
            "`foo`is in the global setup (beforeClass) so maybe it would be better not to modify the permission on such a folder. Not really important anyway.\n",
            "What about `AccessDeniedException` \n",
            "humm... is it the best way to fix this ? (a question only, I haven't look at the details but it looks like a hack to me)\n",
            "Should it be tested with each of the adapters ?\n",
            "Oops... sorry !\n",
            "Ah it comes from me, then it's great :) I tend to prefer AccessDenied now but both are great anyway :)\n",
            "typo  openable  but I would probably remove the comment altogether, it's not so hacky after all - looking at the [source code](https://github.com/php/php-src/blob/master/ext/spl/spl_directory.c) I see no other reason why PHP would return an `\\UnexpectedValueException`\n",
            "I would remove this\n",
            "add $this->fail\n",
            "remove chmod (already below)\nremove throw\nadd $this->instanceOf('...', e)\nadd $this->pass\n",
            "Could the name be clearer here ? It should mention  PhpStream  I think.\n",
            "None of the adapters should fail !\n",
            "I would put this in a separate test\n",
            "I don't really get the purpose of this anyway - it looks like a duplicate of the test above ?\n",
            "I don't really like the branches here....\n\nSome possible solutions: create two differents tests, maybe create 3 different `@dataProvider`s, 1 for PHP, 1 for native, 1 which would be an union of the former 2.\n\nI can understand I am not crystal clear but I have only limited spare time before the end of this week, do not hesitate to ask specific questions if needed. \n",
            "I don't find  MixedSources  self descriptive.\n",
            "'There is no realpath for dir  %s ' does not sound right to me.\n",
            "What about adding a note on PHP streams ?\n",
            "You should call `closedir()` before returning to save resources.\n",
            "would that work on windows or should you use `DIRECTORY_SEPARATOR` ?\n",
            "please update the phpDoc\n",
            "What about `testSearchAPharArchive()`\n",
            "to me this test does 2 things:\n- try\n- catch\n\ncould you split it into 2 different tests ?\n",
            " MixedAdapterChain  is not clear to me\n",
            " %s  does not exist or is not readable ?\n",
            "That's possible I have only checked quickly and see D_S in other tests. Sorry for the false positive !\n",
            "if your file/folder does not exist `realpath` returns `false` so my comment was not that wrong (and also you can not process a file/folder which does not exist). But pick what you think is best, that will be ok. \n",
            "Have to look into more details tomorrow.\n\nSome remarks:\n- isn't array\u2014map overkill here ?\n- the array should probably have a second true/false element.\n",
            "Does that change anything ?\n",
            "Ah ok makes sens\u00e9\n\nFabien Potencier notifications@github.com wrote:\n\n> > @@ -17,7 +17,7 @@\n> >      ],\n> >       require : {\n> >           php :  >=5.3.3 ,\n> > -         symfony/http-kernel :  2.2.* ,\n> > -         symfony/http-kernel :  >=2.2,<2.3-dev ,\n> \n> Not really. This is just a nice reminder for when 2.3 will be released.\n> I hope that then, we will be able to change it to `>=2.2,<2.4-dev` most\n> of the time (in the 2.2 branch and of course in the 2.3 one as well).\n> \n> ---\n> \n> Reply to this email directly or view it on GitHub:\n> https://github.com/symfony/symfony/pull/7027/files#r2952888\n",
            "would it me sense to have this configurable ?\n",
            "Boolean\n",
            "`return true;` would make your test pass\n",
            "I mean you are not really testing your method here, there should be an `assertFalse` before.\n",
            "great, thanks.\n",
            "@rybakit do you have any idea on the perf impact ? (out of my own curiosity)\n",
            "@rybakit, do you have XDebug enabled ? (If yes could you please re-test by disabling it).\n\nTwice as fast is a notable difference IMO in favor of union.\n",
            "@rybakit could you please create a new issue to discuss this as the PR has been closed - you suggestion is applicable at several places in the code. Thanks.\n",
            "As a widely used and `@api` tagged class, this probably deserves a  [BC BREAK] \n",
            "Would it be possible to use a mock & disable the constructor instead of instantiating all its dependencies ? \n",
            "`preg_replace(array(), array())` ?\n",
            "As you do not really care about the engine in this case, you probably could write something like:\n\n``` php\n<?php\n        $renderer = $this->getMockBuilder('Symfony\\Component\\Form\\FormRenderer')\n            ->setMethods(null)\n            ->disableOriginalConstructor()\n            ->getMock()\n        ;\n```\n\n_(you can remove the use clause)_\n\nand the PR would be perfect !\n",
            "Igor, that wil be `->setPrefix()` after I modify the PR, is it ok with you ?\n\nOn 02/11/2013 03:12 PM, Igor Wiedler wrote:\n\n> In src/Symfony/Component/HttpFoundation/JsonResponse.php:\n> \n> > @@ -89,6 +90,22 @@ public function setData($data = array())\n> >      }\n> > \n> > ```\n> >  /**\n> > ```\n> > -     \\* Mitigates CSRF attack by prepending a prefix to the generated JSON.\n> > -     *\n> > -     \\* @see http://stackoverflow.com/questions/2669690\n> > -     *\n> > -     \\* @param string $prefix The prefix to prepend to the generated JSON\n> > -     *\n> > -     \\* @return JsonResponse\n> > -     */\n> > -    public function prefixJson($prefix = 'while(1);')\n> \n> Maybe |addJsonCsrfPrefix()| since re-typing |while(1);| into \n> controllers is kind of annoying.\n> \n> \u2014\n> Reply to this email directly or view it on GitHub \n> https://github.com/symfony/symfony/pull/6970/files#r2961507..\n",
            "@igorw which is why I use `prefixJson`in the first place, @fabpot what about keeping the current name ? (Or maybe `prefixJsonp`)\n",
            "waiting for @fabpot comment to update the doc - but thanks I would have missed the upgrade file anyway !\n",
            "you're right !\n",
            "Well still can't it be a BC break ? Image some has created such a method in a derived class but with a different signature.\n",
            "@fabpot `P::create()->find()` because `P::find()`is not possible to keep BC.\n\n@stof Why returning a new instance when the constructor has no parameter ?\n",
            "consistency (not with PHP itself, I must agree)\n",
            "to me it is part of the best practices, don't you think ?\n",
            "@fabpot if your question was why not `return new self();`, that could be a option (see my previous comment also)\n",
            "To me (and I think I am not the only one)  null  means  nothing  which is what should be returned when you mean  nothing . Returning  false  is an error than we should stop propagating. \n",
            "dialogue of the deaf. I'll remove this.\n",
            "to fragment (v): Break or cause to break into fragments\n",
            "I don't like this name either\n",
            "fragment_renderer ?\n",
            "would it make sense to make fragments a child of templating ?\n",
            "inline here ? (not sure)\n",
            "hum...\n",
            "represents\n",
            "Even if it is independent, does it makes sense to use it w/o the templating layer activated in the context of this bundle ? - It might be simpler for users to understand.\n",
            "Response ?\n",
            "kernel.fragment_renderer\n",
            "string ? (to allow parameters)\n",
            "!\n",
            "!\n",
            "I don't get the  or \n",
            "that represents -> of ?\n",
            "of a fragment.\n",
            "I don't really like the  resource fragment  term\n",
            "the URI of a fragment ?\n",
            "more readable with a 2 line layout ?\n",
            "let's keep booleans then !\n",
            " implement  ? (instances of interface do not exist)\n",
            "@fabpot why has this been changed ?\n",
            "thanks for the clarification.\n",
            "This is the default: https://github.com/symfony/symfony/pull/6852/files#L4L226\n",
            "@Tobion could you submit a PR please ?\n",
            "I have tried to keep BC as much as possible (some other configs should probably get updated later) but it still needs a careful review !\n",
            "Thanks for the review, I'll update tomorrow\n",
            "@stof For now this PR only fixes the current config and templating is not an enableable node as of today.\n",
            "Is the condition useful here ?\n",
            "do you really want to make this private w/o getter ?\n",
            "I still don't see the pb with set(null) ?\n",
            "->addDefaultsIfNotSet() ?\n",
            "... and remove `!empty()`\n",
            "I don't like  proxy  in the config / extension, could you come with something more specific (we already have  trusted_proxies )\n",
            "ok, now I see :)\n",
            "Also what about defining a const and use it here ?\n",
            "we already have a  router  key so :-1: for  router_proxy .\n",
            "I agree but then it should be\n\n``` php\n<?php\n->addDefaultsIfNotSet()\n->canBeEnabled()\n```\n",
            "May be the info should be more specific and indicate that the router is used for the http renderers\n",
            "router_proxy_path ?\n",
            "router_proxy\n",
            "...and see above\n",
            "Well it works perfectly when I test, I'll submit a PR.\n",
            "@fabpot please add to your merger guidelines to **never ever again** merge a PR w/o [updated] UTs. I have to update many things for such a benign change !\n",
            "Good question. I think it is used by external classes (it's public)\n",
            "to implement without extending, what do you think ?\n",
            "> I did not create this interface because I don't see why you would want to have another implementation.\n\nWhy not ? (Sorry I can not think of any better reply)\n\n> And you don't need an interface for extending anyway.\n\n**If** you _implement_ this is an other way, you would probably not be interested to _extend_ ?\n\nBut I can revert if you prefer (both ?)\n",
            "this is not really the Sf way, I have a PR pending with a refactoring, you can take a look at it\n",
            "You should remove the extra () and have the code on a single line here\n",
            "and maybe update the PhpDoc\n",
            "any value added here ?\n",
            "you should use display here\n",
            "Should it be `FormExceptonInterface` for consistency ?\n",
            "Understood, it's only for BC.\n",
            "@stloyd would `5.5` alone be enough here (that is not a request for changes but only a question)  ?\n",
            "you can probably remove `placeholder` here\n",
            "is it really unsupported (ie it returns false)... trying to be constructive here !\n",
            "is @return useful ?\n",
            "no\n",
            "What does this actually means ?\n\nWould renaming `bound` to `clicked` makes sense ?\n",
            "I can't remember if all other form exceptions belong to the form ns\n",
            "`trigger_error` ?\n\nhere and below\n",
            "why `isset`, speed ? this makes this code look a bit akward\n",
            "do we really need all those phpdocs ? (`inheritDoc` ?)\n",
            "I only mean `array_key_exist`.\n",
            "like in **Form**BuilderInterface ?\n",
            "For once I didn't really want to argue but more say that if  the interface is `Form...` maybe that would be also ok in phpdocs.\n",
            "The comment also apply to the method above.\n",
            "I am -1 to rush feature in a couple of days before the freeze especially when it introduces new issues. Let's fix outstanding issues first, we can live 6 more months without buttons plus an increased sw quality.\n\n----- Reply message -----\nDe :  Bernhard Schussek  notifications@github.com\nPour\u00a0:  symfony/symfony  symfony@noreply.github.com\nCc :  Victor Berchet  victor@suumit.com\nObjet : [symfony] [Form] Support buttons in forms (#6528)\nDate : jeu., janv. 3, 2013 18:30\nIn src/Symfony/Component/Form/ButtonBuilder.php:\n\n> -    /**\n> -     \\* Unsupported method.\n> -     *\n> -     \\* This method should not be invoked.\n> -     *\n> -     \\* @param string|integer|FormBuilderInterface $child\n> -     \\* @param string|FormTypeInterface            $type\n> -     \\* @param array                               $options\n> -     *\n> -     \\* @return void\n> -     *\n> -     \\* @throws \\BadMethodCallException\n> -     */\n> -    public function add($child, $type = null, array $options = array())\n> -    {\n> -        throw new \\BadMethodCallException('Buttons cannot have children.');\n\nCleaning up the exceptions in the Form component is on the TODO list.\n\n&mdash;\n\nReply to this email directly or view it on GitHub.\n",
            "I think the name `setMethod` is unfortunate in a PHP context, what about `setHttpMethod` ?\n",
            "Yep, I was also about arguing this one but was not able to find a better name.\n",
            "I first spot this in the docs where i saw the setmethod in the middle of other fluid calls.\n\nSettargeturi would be a nice name - if we go for the semantic way. \n\nThere must be other places where you had to choose html vs semantic, which way did you choose then ? (Consistency is also to consider)\n",
            "IMO an other unfortunate name what about`normalizeKeys($enabled = true)` ?\n",
            "The one that was buggy ?\n",
            "The previous version was buggy because it would have strippen heredoc.\n\nWith the new version, I need to fetch tokens inside the `do...while` (see below) which is why `foreach` is not an option. Does it answer your q ?\n",
            "Yes rebasingsing !\n",
            "I agree that `&&` is wrongly placed but should I really revert (vs fix):\n\n> Symfony follows the standards defined in the PSR-0, PSR-1 and PSR-2 documents.\n\nBut If you prefer being hard, I'll execute, tell me.\n\n> There MUST NOT be a hard limit on line length; the soft limit MUST be 120 characters; lines SHOULD be 80 characters or less.\n",
            "Cache slow process cmds, think it's worth it.\n",
            "it's not equivalent, would it work ?\n",
            "oops too fast, it needs to be reverted !\n",
            ":astonished: \n",
            "nope\n",
            "Sh*\\* I thought it would went unnoticed ! Any idea how to test in a simple way ('stack' should not be tested)\n",
            "Is it really worth it ?\n",
            "what about introducing constants here ?\n",
            "... and the getters use magic values\n",
            "> Either way, if this is necessary I think it belongs in a separate pull request\n\nwill you submit it ?\n",
            "Well, we're not going to run a poll in the community to change this. That was a suggestion, feel free to do whatever your want.\nhttp://en.wikipedia.org/wiki/Magic_number_(programming)#Unnamed_numerical_constants\n",
            "Shouldn't an exception [be thrown](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/Configuration.php#L52) instead as this is related to security ?\n",
            "Are tests run in parallel (isolation). It could explain such a pb.\n\n----- Reply message -----\nDe :  Bilal Amarni  notifications@github.com\nPour\u00a0:  symfony/symfony  symfony@noreply.github.com\nCc :  Victor Berchet  victor@suumit.com\nObjet : [symfony] [FrameworkBundle] used the new method for trusted proxies (#6154)\nDate : mer., d\u00e9c. 5, 2012 21:22\nIn src/Symfony/Bundle/FrameworkBundle/Tests/Functional/RequestTest.php:\n\n> -        );\n>   +\n> -        $client->request('GET', '/request_showip');\n>   +\n> -        $ip = $client->getResponse()->getContent();\n> -        $expectedIp = $shouldBeTrusted ? $forwardedFor : $realIp;\n>   +\n> -        $this->assertEquals($ip, $expectedIp);\n> -    }\n>   +\n> -    public function getConfigs()\n> -    {\n> -        return array(\n> -            array('default.yml', '88.777.66.55', false),\n> -            array('trusted_proxies.yml', '127.0.0.1', true),\n> -            array('trust_proxy_headers.yml', '88.777.66.55', true),\n\nI'm stucked in here... all those providers are correct but tests passes only if I keep one of them each time, I don't exactly know why it fails but it looks like a caching issue, even though a few lines below the cache dir is deleted, apparently they use the same kernel class, and as it's within the same process only the first one is used by PHP, is there a solution for this? thx\n\n&mdash;\n\nReply to this email directly or view it on GitHub.\n",
            "see #5879\n",
            "The change is for consistency with other `...Utils` classes. Having a private constructor is a safeguard to prevent from instatiating a class with static methods only. Users can still extend the class as it is not final (in such a case the safeguard will not be useful any more, is that really important ?)\n",
            "This option is new in 2.1 so it should not be mentioned as renamed but created. \n",
            "should it be `array_key_exists` ?\n",
            "`return $this->isRegex($str) ? $str : '/'.preg_quote($str, '/').'/';`\n",
            "@stof  there seems to be not 2.2.3 tag on doctrine/common ? May be you could submit a PR with the fix ?\n",
            "Did you test `return $this->closure($options, $previousValue)` for speed ? \n",
            "@lsmith77 where do you see that `\\Closure` type hinting is not recommended ?  I think it was the case in an earlier version of the php doc and asked Dmitry Stogov (back in october last year). His reply was that is it safe to use  \\Closure  as a type hinting.\n",
            "what about a static `create` & fluid setters ?\n",
            "-1 for adding an argument to `create` for clarity and consistency (It should be in `AuthenticationException`). I would add the fuild setter everywhere also for consistency... but this whole change might be only personal preferences.\n",
            "exceptions have messages AND message keys. No need for the translator to get the message in plain english.\n",
            "you could use `array_merge` here. `extraPatterns` could also be `patterns`. Otherwise this PR looks good to me.\n",
            "isn't foreach faster ?\n",
            "you could init cacheKey first and save one function call\n",
            "= mapKey\n",
            " form  should be  view \n",
            "missing array type hint\n",
            "`FormViewInterface` is not used\n",
            "`public` should not be specified in ifs\n",
            "`public` should not be specified on ifs\n",
            "should this be specified in the context of the component ?\n",
            " explicitly  (multiple occurences)\n",
            "``` php\n<?php\n$parentView = $view->getParent();\n\nif (null === $parentView) {\n// ...\n} else {\n// use $parentView rather than $view->getParent() * 2\n}\n```\n",
            " If we did not find anything in the themes of the current view,  should be removed\n",
            "Is template inheritance taken into account somewhere now ? it [was before](https://github.com/symfony/symfony/blob/2.0/src/Symfony/Bridge/Twig/Extension/FormExtension.php#L315).\n",
            "fixed, thanks.\n",
            "it does not need to be public, right ?\n",
            "What about `return`ing on first match - this would also remove the bitwise operator.\n",
            "Could you prepend  [BC BREAK]  please ?\n",
            "may be it's worth adding a local variable `$parameterBag` as it is used quite a lot in the method\n",
            "Should this be in the if above - ie there is no need to inspect internal classes hierarchy.\n",
            "private classes must appear after public ones\n",
            "won't you get all classes on the first iteration with $classes ?\n",
            "what about `extractBaseClasses` rather than `Dependent` ?\n",
            "I would put the `if (isset)` and this statement in the `countParentClass()` then if you have 'A < B' and B is processed before A you can return the value without counting again. \n",
            "I think this test is not needed\n",
            "you only need to count interfaces on the `$class` not on its parents\n\n```\n<?php\ninterface I\n{}\n\nclass A implements I\n{}\n\nclass B extends A\n{}\n\n$refl = new \\ReflectionClass('B');\n// $refl->getInterfaces() contains 'I'\n```\n",
            "it's not that we should but it doesn't harm and it saves a function call\n",
            "maybe this code cound be moved inside `orderClass`:\n\n`$count = self::countParentClasses($reflectionClass) + count($reflectionClass->getInterfaces());`\n\nThen it should be mergeable. Thanks.\n",
            "``` php\n<?php\n 0  == false;\n```\n\nsame issue in `getSchemeAndHttpHost` \n",
            "why do we need `filesize()` here ? isn't the return value from `fread()` good enough - also `filesize` caches the file size. \n",
            "could we use `file_put_contents` with the `LOCK_EX` flag ?\n",
            "The idea would be to issue a `fread($handle, 50000)` and loop if not at eof - you should really be careful with the filesize cache, got trapped a few times !\n",
            "could you actually skip in beforeClass ?\n",
            "@Baachi thanks for the tip I had never taken the time to look at the src code before.\n",
            "what about adding some `->info()` ?\n",
            "should you log before throwing ?\n",
            "Should it be modified ?\n",
            "would `setUpBeforeClass`, `tearDownAfterClass` be ok ?\n",
            "I don't get what you mean, what is the benefit of mkdir / rm / rmdir around each single test case vs once ? \n",
            "I was wondering but:\n- the component requires php 5.3.3 because of issues w/ 5.3.2\n- 5.3.3 seems to have bugs w/ apc,\n- reading annotations has bugs before 5.3.8,\n- current version is 5.3.13,\n- sqlite is no more the default storage.\n\nShould I revert ?\n",
            "extra empty line to be removed\n",
            "Should you extend `SplFileInfo` (which adds support for relative paths ?)\n",
            "for `$var === CONST` you should write `CONST === $var`\n",
            "could be merged in the previous if (using a ternary operator)\n",
            "Does this really belong the the `Iterators` ?\n",
            "copy / paste error  (if the address object is an array) .\n\nShould there be an example with multiple constraints ?\n",
            "why not `getContents()` ?\n",
            "`SELECT COUNT(token)` ?\n",
            "I mean `SELECT COUNT(token) FROM sf_profiler_data WHERE token = :token LIMIT 1`\n",
            "Yes there is a need to do a count which is currently done by code `empty($tokenExists)` and it works but it seems more natural do the count in SQL, doesn't it ?\n",
            "@simon-n that was only a suggestion (see the  ? ), I didn't expect to trigger a passionate debate ! I am fine with your solution. The suggestion what about semantic: the method counts the number of row with the given token (0 or 1) and not related to perf at all. _(btw `fetchAll()` never returns false)_\n",
            "@Tobion to make it clear, is it required that all this char list is not encoded or is is only to generate URL that are easier to read ? (I refer to all the chars excepting  / )  \n",
            "So: \n- it would be great to link the spec in the comment\n- it would not do more than what is strictly required - btw  left unencoded  is  encoded then decoded  to be exact.\n",
            "Couldn't there be an issue here: An uri would be like `path;param1=value2,param2=value2` and if I get your proposal right, `;`, `,` and `=` would not be encoded in **both** the path and path parameters so the solution is wrong if the path contains any of these 3 chars.\n\nIf this is the case - and provided that parameter path is seldom used - could we pass the path parameters  in the `$parameters` instead (i.e. `_path_parameters`) ?\n",
            "It's still not clear to me, sorry...\n\nI think `;`, `,` and `=` should be either encoded or raw according to their meaning (part of path or part of the path parameters). I don't think your PR allows this ? If it doesn't I fail to see how  It just allows users to use it .\n",
            "I must admit I hadn't look at the details of this PR, now I understand your point. However I still think this is not the right solution (to a real issue)\n\nHow would you differentiate the path  /path;k=v  (URL =  /path%3Bk%3Dv ) from the path with parameters (URL =  /path;k=v ). \n",
            " characters  is not consistent with  element(s) \n",
            "'string, scalar or object with __toString()'\n",
            "you can factorize the checks\n",
            "I don't see too many use cases very a Countable object should be considered as a string, should we default to Collection in this case ??\n",
            "may be  elements  not to change to many things in this PR\n",
            "Should you check the type ?\n",
            "Is is valid for collections ?\n",
            "extra line breaks after `(` and before `)`\n",
            "@bschussek what the purpose of modifying this file (seems unused) ?\n",
            "does it matter ?\n",
            "It worked when I tested but I didn't test nested folders which might require this. thanks for the hint.\n",
            "the code  above could be moved to a setupBeforeClass static method\n",
            "you can use `isset($a, $b)` here\n",
            "no need for a var here\n",
            "the same formatting could be used for the 2 arrays.\n",
            "use a ternary operator ?\n",
            "please align the  =>  (same pb below).\n",
            "thanks for pointing me to this comment @stloyd (I've made the same later on). I don't see why Sf should enforce such CS ?\n",
            "I think you have to set `self::$mongo` to `null` and skip in `setUp`.\n\nPlease:\n- Once you are done squash your commits and follow the guidelines in the contributor guide for the naming of the commit,\n- No need to comment  Done ... We receive an email each time ! thanks.\n",
            "Thanks for having implemented this as an upsert. The comment is misleading, could you remove it ?\n",
            "Please remove `$collection` everywhere it is not needed.\n",
            "could you please test both inserting and updating ?\n",
            "oops forget abpout this comment... the test is below.\n",
            "I think it should be called in `setUp` (please check). If is should replace this call with a `return`\n",
            "typo \n",
            "why `^` ?\n",
            "@bschussek I came to about the same conclusion: `!$view->hasParent() && $form->hasChildren() && $form->hasAttribute('csrf_field_name')`. I thought the children of the view might not be there yet ?\n",
            "I see:  BottomUp \n",
            "Do we need to check the children at all ? (what if the root form is an empty collection)\n",
            "empty collection -> `hasChildren() === false` -> no CSRF ?\n",
            "- couldn't this be used to erase a collection (not protected) ?\n- what if children are added dynamically ?\n",
            "I have created a new issue as this PR is closed\n",
            "wouldn't `=` have thrown more meaningful exc in the former code ? (in `Comparator::setOperator`) \n",
            "`(\\d+|(?:\\d+)` == `\\d*` ? \nmaybe we can use `[x.[:xdigit:]]` and `is_numeric` ?\n",
            "could this test be nested in the following if ? (to have only 1 test in the working case)\n",
            "`return $this;` ? - fluid interface\n",
            "this looks weird ! Could it be move to `Options::offsetSet()` ?\n",
            "`$this->defaultOptions->replace($option, $value)` then ?\n",
            "missing `$this->lazy[$option] = false;` here ? to avoid resolving concret options (when they overload a lazy one) ? \nedit: it should be `unset()`\n",
            "`unset($this->lazy[$option])`; missing ? - even if it should not have side effects for now\n",
            "clear also `$lazy` and `$lock` ?\n",
            "`next()` should return (resolve) the next value\n",
            "not conventional !\n",
            "my mistake.\n",
            "typo: relevent\n",
            "`ltrim()`\n",
            "`str_repeat()`  to avoid the loop ? or at least avoid to `count()` on each iteration\n",
            "@Tobion I don't get why we need to do this, could you briefly explain (/ add tests) ?\n",
            "May using both non exclusive `$absolute` and `$relative` makes it unclear. Should you reuse the terms for the [RFC 3986](http://tools.ietf.org/html/rfc3986#section-4.2) ?\n",
            "Does the question still stand if you make this protected ?\n",
            "line endings: http://help.github.com/line-endings/\n",
            "should be `\\-` in the middle ?\n",
            "http://help.github.com/line-endings/\n",
            "this is wrong... as `getValue()` [can return `null`](https://github.com/ruian/symfony/commit/fc7c7f645869e30010f3f8e050189303bfd5c2c8#L1R194). Could you revert and add a comment here (which I should have done in first place).\n",
            "Because you can not guess the max length of a float... may be it should not return anything after all\n",
            "Ok the rationale:\n- When you have a min value, you guess a min length of this min (LOW_CONFIDENCE) , lines below\n- If this value is a float type, this is wrong so you guess null with MEDIUM_CONFIDENCE to override the previous guess.\n\nExample:\nYou want a float greater than 5,  4.512313 is not valid but length(4.512314) > length(5)\n",
            "@bschussek did you get my comment before posting ?\n",
            "ref: #3645\n",
            "null case: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L336\n",
            "I'll open an issue for adding a comment. This has to be done for:\n- the validator,\n- the ORM,\n- the ODM,\n- Propel\n",
            "@bschussek will it be ok with empty collections ?\n",
            "the question is if this might render an input (`count()` returns 0)\n",
            "yep\n",
            "I am not sure if this extra comment is really needed ?\n",
            "@Tobion it is not really a BC as it would not have work without a valid regexp even before\n",
            "seems to be http://twitpic.com/99jcvh/full\n![wdt](http://d3j5vwomefv46c.cloudfront.net/photos/full/560215277.png?key=1025257&Expires=1334495541&Key-Pair-Id=APKAIYVGSUJFNRFZBBTA&Signature=JzOTz5ngixLV~-a7HTyoxZwaNmdS3LGs2boVL09dcETGBZKhDOlD41hxCNylilQYDkpCvHeQQpTosrOGVAwyLcOze2w~F3M6ihkOLgnX3aw33v4NeCEZRaty6SIeTRdBQkOqPd1hZLY1TkeWyHsqf0DhD8Lp~GW704Xx9rAbteQ_)\n",
            "could be simplified `foreach((array) $name)` -> no need for the `if`\n",
            "`hasCollection` ?\n",
            "does this need to be public ?\n",
            "any advantage of making this private (we could avoid a BC break here) ?\n",
            "no need for extra spaces here\n",
            "makes sense, need an entry in the changelog.\n",
            "what about moving `$line` up inside the `if` ?\n",
            "I would not break BC here but add a `foreach` in the caller\n",
            "Do you really need an arg here ?\n",
            "@Tobion please keep the old API for this PR. Optimizations might come in a subsequent PR if needed.\n",
            "extra spaces in this file\n",
            "My mistake (think we were in RouteCollection here)\n",
            "@Tobion could you PM me (GH) ?\n",
            "should we typehint then ?\n",
            "I think this should `xsd:string` (to allow `%lifetime%`)\n",
            "What about settings the default to `null` to use the php.ini settings unless overriden ?\n",
            "> Or just drop the defaults...?\n\nyes\n",
            "The question is: do we want to allow integers only or would parameters be fine also _( lifetime  is a generic name above)_\n",
            "I don't really get your point here. My concern is not with .ini or sf2 but with the xsd only.\n",
            "Debian does not use PHP GC by default because of access rights. Settings some defaults will not solve the issue with access rights, it has to be solved at a system wide level.\n",
            "personnal preferences I would say.\n",
            "`strtr` ?\n",
            "Shouldn't it be `$ex->setPath($this->getPath());` only ?\n",
            "what about making sure that each callback `is_callable` ?\nthat would imply removing the possibility for `null` value. \n",
            "I would throw an `InvalidArgumentExcption` in `setCallbacks`\n",
            "php.net: InvalidArgumentException =>  Exception thrown if an argument does not match with the expected value  is more accurate.\n\n> if a callback refers to an undefined function \n\nnot the case here\n\n> if some arguments are missing.\n\nnot the case here\n",
            "@schmittjoh is it ok to return early here or should we go through the decision process again ?\n",
            "yep\n",
            "I mean no... but we don't care any more as there is now a single generic case\n",
            "is the first `?` useful here ?\n",
            "almost perfect !\n",
            "`|null`, int -> name ?\n",
            "you could use `ArrayObject`s to avoid references.\n",
            "`5.4` ?\n",
            "should it be `$startTime` and defaults to 0 ?\n",
            "Should this be declared final ?\n\nI am raising the question as moving files out of the `Resources` folder would prevent [inheritance](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Kernel.php#L289) from working (I am thinking about views in particular)\n",
            "@everzet Yep, `locateResource()` must get the resources folder from `getMeta()` (it should be part of this PR).\n\nBut the pb was to know if we should encourage changing the meta infos or not. I would say not & declare the method `final` but I think this is an open question.\n",
            "`final` because we should not encourage users in changing the path (advanced users would use the interface as you do).\n\nOne more question: what if some bundles in a hierarchy have different relative paths ??? (may be you could handle this in `locateResource()` but it would start looking weird !). One other option would be to get the relative paths from the parent.\n\nThat's one more open question. I don't have a lot of time to think about it now, sorry ! \n",
            "@everzet I think we agree about the `final` method. But what about my 2nd questions (different paths in a bundle hierarchy) ?\n",
            "`->beforeNormalization()` would allow to change the keys names (if that's what you are looking for)\n",
            "Good catch !\nWhat about linking the php.net bug in a comment ?\n",
            "this method has the tag `@api` you could maybe use a setter injection ?\n",
            "you don't need to specify the FQCN when `use`ing a class\n",
            "> AFAICS, you never call the loadPanel method with an object for which state.url is defined. Did I miss soemthing ?\n\nThe code actually set `state.url`\n",
            "at least I am consistent !\n",
            "This is used by the log panel. The test could have been omitted, it just makes it a bit stronger if someone ever push something to the history.\n",
            "You are right, I think the second commit deserves some polishing if we decide to go for it.\n",
            "it has been during my forced push: https://github.com/symfony/symfony/pull/3340/files#L1R59\n",
            "It was hard to refrain myself from doing this but the CS seem different there `collector.calledlisteners`, `collector.notcalledlisteners`, ...\n",
            "getMethod ?\n",
            "What about splitting this methods in smaller chunks ?\n",
            "I think it could help.\n",
            "That was to emphasize the global variable, anything wrong ?\n",
            "Do we need a local variable here ? (What a pleasure to comment @stof code !)\n",
            "I agree\n",
            "low priority !\n",
            "@stof please open PRs.\n",
            "That's part of my plan which I have described in #1513 (may be not very clearly).\nI plan to work on this during the coming week, any help is appreciated.\n",
            "the config is very uncomplete...\n",
            "```\n    backends:\n#        apc:\n#            be1: ~\n\n        memcached:\n            be1:\n              servers:\n                  server1:\n                      host:             127.0.0.1\n                      port:             1121\n\n            be2:\n                servers:\n                    server1:\n                        host:            127.0.0.1\n                        port:            11211\n                    server2:\n                        host:            127.0.0.1\n                        port:            11212\n\n            be3:\n                servers:\n                    serverx:\n                        host:             127.0.0.1\n                        port:             1121\n```\n",
            "Next thing I'll do is changing this.\n",
            "I was proud to match core PHP APIs but you are right this is crappy, changed !\n",
            "I agree with @alexandresalome disagreeing here, the first requirement should be the ability to store any type of value (this is [one of the PR](https://github.com/doctrine/common/pull/95) I have submitted against Doctrine common.)\n\nSo the interface could look like:\n\n``` php\n<?php\ninterface CacheInterface\n{\n    function fetch($id, &$success);\n    function contains($id);\n    function save($id, $data, $lifeTime = 0);\n    function delete($id);\n}\n```\n\nI think there is one more problem with providing an interface with both `fetch` and `contains` as it encourages flawed code as\n\n``` php\n<?php\nif  (!$cache->contains('id')) {\n   $cache->save('id', compute());\n}\ndoSomething($cache->fetch('id'));\n```\n\nSo what about dropping `contains` ? \n\n``` php\n<?php\ninterface CacheInterface\n{\n    function fetch($id, &$value, $fetchValue = true);\n    function save($id, $data, $lifeTime = 0);\n    function delete($id);\n}\n```\n- `fetch` would returns `true` when the value is in cache,\n- the third parameter could be set to `false` when you really need the `contains` behavior \n\nThe above example would become:\n\n``` php\n<?php\nif  (!$cache->fetch('id', $value)) {\n   $cache->save('id', $value = compute());\n}\ndoSomething($value);\n```\n",
            "> Neither Memcache, Xcache nor Zends Cache support an API for checking if a key really exists or not\n\nI don't think this is a valid reason to propagate the flaw to  the cache interface, this would defeat the purpose of caching. \n\n> An API that works by reference for the values is really unintuitive, an API interface should take expectations of users into account.\n\nI can not think of anything better. I prefer a weird interface over weird bugs that would be impossible to debug. BTW the symfony code already suffers from this flaw [here](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Validator/Mapping/ClassMetadataFactory.php#L49)\n",
            "@beberlei \nI guess I read your message too fast yesterday. We are pretty much aligned on this.\n\nDropping  `contains` would be a good thing. So `fetch` would return both `found` and `value`, one of them has to be returned by reference anyway. Wich way to choose: \n\n``` php\n<?php\n// I prefer\nif  (!$cache->fetch('id', $value)) {}\n//over\n$value = $cache->fetch('id', $found);\nif  (!$found) {}\n```\n\nPlus we should take into account that we should provide a way to call `contains` - which is the third argument of my proposal - then I do prefer my proposal over returning `$found` by ref but both would suit me.\n\n@drm \n- Strictly speaking a cache miss could not be considered as an exception ( an abnormal event occurring during the execution of a routine ),\n- Your proposal to check for existence is the perfect example of why we should drop the `contains()` method. It would lead to a race condition which will randomly produces error 500 (i.e. your entry get evicted in between the `contains` and |fetch` calls)\n",
            "@rande \n- this option is also being discussed in the Cache Component PR\n- so your `get` returns either `null` or `CacheElement` in your implementation (your phpDoc is not very useful here) ?\n- @tedivm do you see an added value in returning a `CacheElement` on a miss rather than `null` ?\n\nBTW great bundle, could be a source of inspiration for the CacheBundle I am working on currently (based on the one from @lsmith77).\n",
            "@tedivm \n- I agree, my question was about the  DriverInterface . One question though, could you eplain:  there are cases where there will be an object and it will still be a miss   ?\n- You assume that the TTL is global for all the items here, right ? If this is the case we might be able to retrieve it from a different place. I am not saying that always returning an object is a bad, just trying to understand.\n",
            "Your first reply also answered my second question. That's a very interesting discussion, many thanks for you inputs ! _I really need to find some time to take a deeper look at Stash_ \n",
            "no as the plan is to use it when injecting the toolbar also\n",
            "The purpose is to remove the router panel (should we keep the collector) as I've done with the Doctrine explain panel.\n",
            "You are right. ATM I don't really have an opinion on keeping or not a separate panel (& its collector).\n\n@stof would prefer to keep a separate panel (hence a collector), anybody any opinion on this topic ? (I'll update to what the majority likes).\n",
            "Ok, the majority tends to agree on keeping the panel.\n\nDo you mind if I leave the concept of panel pages (& common JS) within this PR (it will be used by the Doctrine collector at least) or should I split this PR ?\n",
            "`$this->assertTrue((Boolean) strstr($view->get('money_pattern'), '\u00a5'));` would be correct from a CS POV but you could probably find something better.\n",
            "I meant better than `(Boolean) strstr()` may be `strpos()` ?\n",
            "What about `assertType` ?\n",
            "using a negative offset might make things simpler (`explode` might also be a good pick here to replace `strstr` as well)\n",
            "I favor less LOC rather than micro-optims. (and you have to consider `explode, count` vs `strstr, strpos, substr`)\n",
            "something like\n\n``` php\n<?php\n$info = explode('_', 'loc_ale');\narray_pop($info);\necho 0 == count($info) ? self::gD() : implode('_', $info);\n```\n",
            "I don't understand your point.\n",
            "I'll implement your suggestion for the `-q` the rest is out of scope of this PR.\n",
            "no\n",
            "Right, that's was due to a mix with the master version. Thanks for reporting.\n",
            "The exceptions might be merged in the `if` / `else` below to save a test.\n",
            "``` php\n        if (!is_array($field)) {\n+            if (is_array($value)) { throw; }\n            $field->setValue($value);\n        }...\n```\n",
            "that's not accurate, should be something like:\n`It returns an array of FormField for field names that ends with the '[]' characters.`\n",
            "yep, I came to the same conclusion, I'll check the updated code\n",
            "should this test be moved to the ctor ?\n",
            "There is probably a good reason to avoid caching but I can not figure out, any hint ?\n\n_semantic: maybe this should be moved after the call to the parent method ?_\n",
            "To me this looks wrong.\n\nThe `$this->mimeType` and `$this->size` are the values provided when the files is uploaded, and retrieved via the `getClientXXX` methods which differ from `getXXX` to retrieve info about the underlying file (i.e. think potential attack here)\n",
            "Depending on your needs there should be either `toArray` and/or `toClientArray`\n",
            "Please read the comments on the properties and getClientXXX methods.\n\nRefering to youe previous message, you are not making use of `getClientSize` bu `getSize`\n",
            "[ file upload attack php](http://lmgtfy.com/?q=file+upload+attack+php)\n",
            "If the incoming request has a .gif file, no mime type and a size set to 0, `getClientSize()` should return 0 and `getClientMimeType()` should return `application/octet-stream`. I think this is not the case with your implementation.\n\nIf you need to change the size / mime type use the `UploadedFile` constructor arguments but don't mess with the size and mt inside the constructor.\n",
            "You should consider the size and mt as file metadata. Their content should be considered as arbitrary and not linked to the file itself (think upload attack here).\nSo coming back to your example I would expect the size to be null and the mt to be `application/octet-stream`.\n\nThe output given in your example can be produced with \n\n``` php\n<?php\n$file = new UploadedFile(__FILE__, basename(__FILE__), 'text/plain', 404);\n```\n",
            "May be you should take a look [here](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Client.php#L147).\nLet's continue the discussion next week\n",
            "should it be `[^cgp]` ?\n",
            "This should be move to the outer loop\n",
            "Should the condition be `(null === $this->locale && true === $this->container->has('request'))` as `container->has()` returns a Boolean.\n",
            "@marcw what about checking for the value of the `data_class` option first (in `$options['options']` first then in the prototype builder) and use it when it is provided.\n",
            "can't this cause issue with the data mapping ?\n\nI am +1 for this change once details have been sorted out. I hope I can find some time tomorrow to check more deeply.\n",
            "It should have been implemented some time ago, you should try to check the history for this file.\n",
            "@marcw do you really need to `add($prototype)` ? \n\n_(I am not really available atm, that's why I am not very reactive, sorry)_\n",
            "One problem is that the child form is not removed when the data is an empty array because [setData() is not called](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormBuilder.php#L658). You can try with an empty collection of files for example and you will see the $$name$$ child:\n\n``` php\n        $form = $factory\n            ->create('collection', array(), array(\n                'type'      => 'file',\n                'allow_add' => true,\n                'prototype' => true,\n            ))\n        ;\n```\n\nMoreover adding a child form in order to propagate the multipart seems like a hack to me. You'd better propagate the multipart explicitly in the collection type:\n\n``` php\n    public function buildViewBottomUp(FormView $view, FormInterface $form)\n    {\n        if ($form->hasAttribute('prototype') && $view->get('prototype')->get('multipart')) {\n            $view->set('multipart', true);\n        }\n    }\n```\n",
            "This PR is about moving methods around (see the initial comment). No code has been changed.\n",
            "Yes it could and it was the case before the commit about  optimization .\n\n`block` can be used here because [it would retrieve the correct block](https://github.com/vicb/symfony/blob/form%2Ftheming/src/Symfony/Bridge/Twig/Extension/FormExtension.php#L300) and `field` is always the root type.\n\nWhen using `block` you don't have to go through `FormExtension::render()` which would end up rendering the same block anyway.\n",
            "Should this be `$view['form']->widget($form)` to ease theming ?\n",
            "you are right, I missed this.\n",
            "The prefix should be `Symfony` rather than `\\Symfony` for consistency (here and for the 2 return types)\n",
            "Makes sense.\nI didn't notice this as Netbeans seems to propose any classes which FQCN ends with the given type (whether the \\ prefix is included or not)\n",
            "I know... this only only the first PR of a serie and this will be fixed at several places in the Form component.\n",
            "I know...\nI had to split this PR in smaller chunk to ease review but this will be fixed together with several other locations in a coming PR.\nThe rationale of this move is to group methods by functionality.\n",
            "Wrong (not a phpDoc block).\nPlease comment on the [opened PR](https://github.com/symfony/symfony/pull/871).\n",
            "Shouldn't getters be checked first as they should be the preferred way to access the propery ?\n",
            "it could be:\n\n```\n<?php\n\nif (getter) {\n$values[] = ...;\ncontinue;\n}\n\nif (property) {\n$values[] = ...;\ncontinue;\n}\n\nthrow new;\n```\n",
            "`setMessage` is deprecated, should be chnaged to `$this->context->addViolation()`\n",
            "this can be factorized by using is_callable($filter) & call_user_func($filter, $fileinfo)\n",
            " Boolean \n",
            " Boolean \n",
            "`array_reduce($keys, max)` ? \nthat's just an idea...\n",
            "and what if we don't use the form builder ?\n",
            "I would not write `if ($a === 2) { $a = 2; }` so I think it makes sense.\n\nAbout performance, what is the impact, would it really matter when a form is involved ?\n",
            "See this [PR](https://github.com/symfony/symfony/pull/688) for some background.\n\n`__invoke()` is definitely not right, `$clientDate($this)` should be use if we keep `\\Closure`s\n",
            "Some benchmark (PHP 5.3.5 not using any accelerator, $closure with one argument):\n\n```\n$closure->__invoke(): 512\n$closure(): 259\ncall_user_func($closure): 464\n```\n\nI don't think any of this will make any difference at a global level.\n",
            "Some benchamrk (PHP 5.3, no accel, array of 12 stdClass instances):\n\n```\nfor: 674\nforeach: 609\n```\n",
            "That should be true if the count is in the  test  position (i.e. executed on each iteration) otherwise I can't see why.\n\nTo me this is really uneeded to optimize this: what would be the overall impact event if you can double the speed of this particular loop ???\n",
            "I hadn't performance (even if it turned to be faster) nor memory consumption in mind (that's an array of a few  pointers ) bunt only the beauty of symmetry between forward and backward transforms.\n\nI'll revert this change tomorrow with the others lying in the todo list.\n",
            "May be this should be a CreationException to match how [FormFactory](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L258) works ?\n",
            "You are absolutely right. The code should have been updated with the introduction of `getAllowedOptionValues` and `CreationException`. The best would be to remove the dead `if` case (This is no more required and can even prevent from being able to extend the date type).\n",
            "is_uploaded_file should be equivalent ?\n",
            "I also missed it in the first versions, seem to be working fine (unit tested) \n",
            "That would be a behavioral change vs the former implementation (which throws)\n\nShould I modify the code to create this folder ?\n",
            "Here, we **return** a File object, not an UploadedFile object (the parent use new self()).\n",
            "You are right, however UploadedFile is not ok (it uses is_uploaded_file which would fail on a test file)\n\nI have to find a solution for this.\n",
            "Agree with that I will update the PR\n",
            "The problem with the moved flag is how easy is it to skip the security (move_uploaded_file)... \n",
            "Note for later: `\\SplFileInfo::getExtension()` requires PHP5.3.6+\n",
            "You should also update where it is used:\nhttps://github.com/pborreli/symfony/blob/191fd9bf3f09a19e974bab5db561aa97207dec6b/src/Symfony/Bundle/SecurityBundle/Resources/config/security_rememberme.xml#L33\n",
            "Are the parenthesis needed here ?\n",
            "What a regexp !\nYou could save some space by removing `A-F` as the `i` modifier is used (`a-f` is enough)\n",
            "I was just reviewing the code and asking myself the same question...\nThe repsonse is probably not (at least for called listeners).\nI'll revert this part.\n",
            "$name / $refname are redundant\n",
            "The assumption is that error detection is more important than lazy loading when using a (Debug) TraceableEventDispatcher\n",
            "as long as you can give a file and a line on the command, you're ok... someone should try phpstorm --help\n",
            "Do we really need this here ?\n",
            "Posted there: \n $name can be anything at a Component level (logical name vs file name) so I am wondering if this change is really required ?\nMay be it should be implemented at some other place (i.e. FrameworkBundle/Templating) ? \n",
            " In this implementation is the logical name the same as the file path  -> I don't agree with this at a component level (this file).\n",
            "Doesn't Sf always use `FrameworkBundle/Templating/TemplateNameParser::parse()` ?\n",
            "What bug then ?\n",
            "In what situation do you see this bad results ?\n",
            "You should not use inheritDoc when implementing an interface (but copy the doc block)\n",
            "Would changing this to ... `new TemplateReference('\\\\path\\\\to\\\\section\\\\name.engine', 'engine')` ... remove the need for your `strtr` and then we are both happy ?\n",
            "Martin,\n\nMy point is that the component should not assume that $name is a file name, it could be anything (i.e.  ##MyScheme##foo/bar\\test , and I dont want my  \\  to be transformed here as they have a special meaning).\n\nShould it be filenames only, extend `\\Symfony\\Component\\Templating\\TemplateNameParser\\TemplateNameParser` (as this is done in the Framework Bundle) and implement you custom logic there.\n\nOr is there anything preventing you from doing this ?\n",
            "Right.\n\nBecause I thought it had little sense outside of the FrameworkBundle context. But your point is very valid, I'll move this to the component.\n\nThanks for your feedback.\n",
            "Maybe you could add a `(Boolean)` cast while modifying this - and do the same for `$onlyException`\n",
            "Stof, thank you for taking the time to review the code.\nDo you want to submit a PR with all the issues you can find ?\n\nBTW `still` should be `already` ;-)\n",
            "I mean a PR on vicb/symfony.\nI will handle this later tonight or first thing tomorrow morning.\n",
            "$name can be anything at a Component level (logical name vs file name) so I am wondering if this change is really required ?\nMay be it should be implemented at some other place (i.e. FrameworkBundle/Templating) ?\n",
            "There should also be some quotes around the class name\n",
            "Could an iframe help here ?\n",
            "To be exhaustive you won't be able to call `->customNode('name')` on a NodeBuilder but will have to call `->node('name', 'custom')`. If you really want to then only you should subclass.\n\nSo your proposition is a good idea.\n",
            "Well at least it is working like this... do not hesitate to propose an other solution (Sorry but I have already spent too much time on the profiler to investigate more...)\n",
            "You are right, it is not equivalent.\nThere is no need to build and URL (which will certainly be converted back to a filename at some point). \nI forgot to mention that this has been validated on both Win & Linux.\n",
            "May be it is just a copy paste from some other loader ?\nIn [the XLIFF file loader](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Translation/Loader/XliffFileLoader.php#L57) you definitely need to build an URL in order to find & replace\n",
            "Ryan, would `$container = $this->application->getKernel()->getContainer();` works ? may be you need to boot the kernel first ?\n",
            "Should it be recursive \u00e0 la `ContainerBuilder::get()` ?\n",
            "alias -> ... -> alias -> service\n\n```\npublic function get($id, $invalidBehavior = ContainerInterface::EXCEPTION_ON_INVALID_REFERENCE)\n{\n....\n        if (!$this->hasDefinition($id) && isset($this->aliases[$id])) {\n            return $this->get($this->aliases[$id]);\n        }\n....\n}\n```\n",
            "$isInvalid according to the cc\n",
            "Shouldn't it be `if (array_key_exists($key, $this->options))` ?\n",
            "As the legacy is to be removed, I would also remove the comment...\n",
            "Yep, but it would work (speaking of null values & `!`). Am I missing something ?\n",
            "My point also was `isset($array['there_is_a_null_value_here']) === false`\n",
            "Have a look at [l. 174](https://github.com/symfony/symfony/pull/213/files#L0R174)\n\nThe `token` was not even used before [this PR](https://github.com/symfony/symfony/pull/213/files#L7R14).\n\nAm I missing something ?\n",
            "I think your are getting confused with the `searchAction`. `SearchBarAction` is only about rendering the form.\n\nYour comment made me think of the next commit thanks.\n",
            "This fix is also for consistency...\nAnd to second Lukas, Sf2 is powerful but not meant to fix IDEs !\n\n& everything is not very consistent yet, I have some more modifs in the pipe\n",
            "1. This should probably be moved out of the if to be set wether CSRF is enabled or not\n",
            "2 Then there is no need to check for `hasParameter`\n",
            "You can remove `isset($config['csrf_protection']) &&`\n",
            "The parameter should be set to `false` before the if and `true` here\n",
            "1. This should probably be moved out of the if to be set wether CSRF is enabled or not\n",
            "2 Then there is no need to check for `hasParameter`\n",
            "You can remove `isset($config['csrf_protection']) &&`\n",
            "The parameter should be set to `false` before the if and `true` here\n",
            "1. This should probably be moved out of the if to be set wether CSRF is enabled or not\n",
            "2 Then there is no need to check for `hasParameter`\n",
            "You can remove `isset($config['csrf_protection']) &&`\n",
            "The parameter should be set to `false` before the if and `true` here\n",
            "@Tobion I did change it (adding the `raw` prefix) in [here](https://github.com/symfony/symfony/commit/55014a6841bec50046e8329a4835c160ac31a496#L10R33) - I can't remember why, try to look at the tests.\nMore interesting might be the [original commit](https://github.com/symfony/symfony/commit/d17ba0e14775f6825b7df4a2d23c21036da06c11) where the decode was added.\n",
            "@Tobion I did change it (adding the `raw` prefix) in [here](https://github.com/symfony/symfony/commit/55014a6841bec50046e8329a4835c160ac31a496#L10R33) - I can't remember why, try to look at the tests.\nMore interesting might be the [original commit](https://github.com/symfony/symfony/commit/d17ba0e14775f6825b7df4a2d23c21036da06c11) where the decode was added.\n",
            "Take a look at `context->addViolation()`, I think passing null as the 3rd argument is not equivalent to what was done before, there's a gotcha in the method !\n",
            "Yep this is what I mean (and you should add a unit test for that)\n\nNo other issue detected but I only quickly scanned it.\n",
            "Take a look at `context->addViolation()`, I think passing null as the 3rd argument is not equivalent to what was done before, there's a gotcha in the method !\n",
            "Yep this is what I mean (and you should add a unit test for that)\n\nNo other issue detected but I only quickly scanned it.\n",
            "should end with a  . \n",
            "1 line summary\n",
            "missing new line\n",
            "why isset ?\n",
            "no else reuired (you return anyway)\n",
            "bollena with a ** B ** Sir, and please align the variable names (and their description when applicable)\n",
            "we would probably return here and drop the else\n",
            "you're lucky I have noticed it before fabpot :)\n",
            "you can return this\n",
            "you should probably normalize the path (D_S) as the method is public\n",
            "should end with a  . \n",
            "1 line summary\n",
            "missing new line\n",
            "why isset ?\n",
            "no else reuired (you return anyway)\n",
            "bollena with a ** B ** Sir, and please align the variable names (and their description when applicable)\n",
            "we would probably return here and drop the else\n",
            "you're lucky I have noticed it before fabpot :)\n",
            "you can return this\n",
            "you should probably normalize the path (D_S) as the method is public\n",
            "@fabpot:\n- is reusing the finder intended (or a bug) here ?\n- is handling serialized class only (vs string, ie paths) intended ?\n\nThanks, too tired to figure out by myslef tonight !\n",
            "- all refs seem to be handled - 3rd party bundles ?\n- I am mainly talking about the cache folder in string (ie `a:9:{i:0;C:46: Symfony\\Component\\Config\\Resource\\FileResource :60:{s:52: /var/www/sf2.2/app/cache/dev_new/as`)\n",
            "@fabpot:\n- is reusing the finder intended (or a bug) here ?\n- is handling serialized class only (vs string, ie paths) intended ?\n\nThanks, too tired to figure out by myslef tonight !\n",
            "- all refs seem to be handled - 3rd party bundles ?\n- I am mainly talking about the cache folder in string (ie `a:9:{i:0;C:46: Symfony\\Component\\Config\\Resource\\FileResource :60:{s:52: /var/www/sf2.2/app/cache/dev_new/as`)\n",
            "`&& $output` to avoid a warning on invalid paths ?\n",
            "`as $segment` as `$idx`is not used\n",
            "Couldn't we have an invalid path that would trigger more pop than the array contains ? \nIn this case array_pop would generate a warning\n",
            "you're right, I should have checked the doc first !\n",
            "Would your code resolve an invalid path (too many  .. ) in the same manner of a real browser ? (I actually don't know what a browser would do)\n",
            "perfect then ! thanks @lazyhammer @stof \n",
            "isn't foreach faster ?\n",
            "you could init cacheKey first and save one function call\n",
            "= mapKey\n",
            " form  should be  view \n",
            "missing array type hint\n",
            "`FormViewInterface` is not used\n",
            "`public` should not be specified in ifs\n",
            "`public` should not be specified on ifs\n",
            "should this be specified in the context of the component ?\n",
            " explicitly  (multiple occurences)\n",
            "``` php\n<?php\n$parentView = $view->getParent();\n\nif (null === $parentView) {\n// ...\n} else {\n// use $parentView rather than $view->getParent() * 2\n}\n```\n",
            " If we did not find anything in the themes of the current view,  should be removed\n",
            "Is template inheritance taken into account somewhere now ? it [was before](https://github.com/symfony/symfony/blob/2.0/src/Symfony/Bridge/Twig/Extension/FormExtension.php#L315).\n",
            "isn't foreach faster ?\n",
            "you could init cacheKey first and save one function call\n",
            "= mapKey\n",
            " form  should be  view \n",
            "missing array type hint\n",
            "`FormViewInterface` is not used\n",
            "`public` should not be specified in ifs\n",
            "`public` should not be specified on ifs\n",
            "should this be specified in the context of the component ?\n",
            " explicitly  (multiple occurences)\n",
            "``` php\n<?php\n$parentView = $view->getParent();\n\nif (null === $parentView) {\n// ...\n} else {\n// use $parentView rather than $view->getParent() * 2\n}\n```\n",
            " If we did not find anything in the themes of the current view,  should be removed\n",
            "Is template inheritance taken into account somewhere now ? it [was before](https://github.com/symfony/symfony/blob/2.0/src/Symfony/Bridge/Twig/Extension/FormExtension.php#L315).\n",
            "it does not need to be public, right ?\n",
            "What about `return`ing on first match - this would also remove the bitwise operator.\n",
            "Does this need to be public ?\n",
            "why throwing an expression instead of returning `null` ?\n",
            "According the [specs](http://dev.w3.org/html5/spec/single-page.html#the-pattern-attribute) the pattern attribute always contains an anchored regexp, you should use `/^(.)\\^(.*)\\$\\1$/'` which is probably good enough.\n",
            "Exceptions are used for critical errors, this is not the case here. The method has 2 possible outcomes:\n- returning the pattern when it can find one,\n- returning `null` when it can't - this is an expected outcome not a critical error.\n",
            "If they are not delimited then you can not guess the htmlPattern.\n\nPHP: the pattern `/foo/` matches both `foo` and `beforefooafter`,\nHTML5: the pattern `foo` matches only `foo`, not `beforefooafter` (which is what is detailed in the linked doc).\n",
            "`$htmlPattern` needs to be public (this is how the constraints works) but method visibility shouldn't be public unless the methods are part of the API. `getNonDelimitedPattern` is an internal method and should be private (and moved after all public methods according to the CS).\n",
            "you are right, that should work.\n",
            "please return a `ValueGuess` or `break` to be consistent with all others `case`s. \n",
            "CS are:\n- Start with a one line summary (end the line with a '.'),\n- one blank line before `@return`,\n- one blank line before `@throws`\n",
            "The best pratice is to return something or `null` (and not to follow some old fashioned PHP API). Thanks.\n",
            "and it should be `@return string|null`\n",
            "Does this need to be public ?\n",
            "why throwing an expression instead of returning `null` ?\n",
            "According the [specs](http://dev.w3.org/html5/spec/single-page.html#the-pattern-attribute) the pattern attribute always contains an anchored regexp, you should use `/^(.)\\^(.*)\\$\\1$/'` which is probably good enough.\n",
            "Exceptions are used for critical errors, this is not the case here. The method has 2 possible outcomes:\n- returning the pattern when it can find one,\n- returning `null` when it can't - this is an expected outcome not a critical error.\n",
            "If they are not delimited then you can not guess the htmlPattern.\n\nPHP: the pattern `/foo/` matches both `foo` and `beforefooafter`,\nHTML5: the pattern `foo` matches only `foo`, not `beforefooafter` (which is what is detailed in the linked doc).\n",
            "`$htmlPattern` needs to be public (this is how the constraints works) but method visibility shouldn't be public unless the methods are part of the API. `getNonDelimitedPattern` is an internal method and should be private (and moved after all public methods according to the CS).\n",
            "you are right, that should work.\n",
            "please return a `ValueGuess` or `break` to be consistent with all others `case`s. \n",
            "CS are:\n- Start with a one line summary (end the line with a '.'),\n- one blank line before `@return`,\n- one blank line before `@throws`\n",
            "The best pratice is to return something or `null` (and not to follow some old fashioned PHP API). Thanks.\n",
            "and it should be `@return string|null`\n",
            "copy / paste error  (if the address object is an array) .\n\nShould there be an example with multiple constraints ?\n",
            "copy / paste error  (if the address object is an array) .\n\nShould there be an example with multiple constraints ?\n",
            "copy / paste error  (if the address object is an array) .\n\nShould there be an example with multiple constraints ?\n",
            " characters  is not consistent with  element(s) \n",
            "'string, scalar or object with __toString()'\n",
            "you can factorize the checks\n",
            "I don't see too many use cases very a Countable object should be considered as a string, should we default to Collection in this case ??\n",
            "may be  elements  not to change to many things in this PR\n",
            "Should you check the type ?\n",
            "Is is valid for collections ?\n",
            "@bschussek what the purpose of modifying this file (seems unused) ?\n",
            "@bschussek what the purpose of modifying this file (seems unused) ?\n",
            "@bschussek I came to about the same conclusion: `!$view->hasParent() && $form->hasChildren() && $form->hasAttribute('csrf_field_name')`. I thought the children of the view might not be there yet ?\n",
            "I see:  BottomUp \n",
            "Do we need to check the children at all ? (what if the root form is an empty collection)\n",
            "empty collection -> `hasChildren() === false` -> no CSRF ?\n",
            "- couldn't this be used to erase a collection (not protected) ?\n- what if children are added dynamically ?\n",
            "I have created a new issue as this PR is closed\n",
            "@bschussek I came to about the same conclusion: `!$view->hasParent() && $form->hasChildren() && $form->hasAttribute('csrf_field_name')`. I thought the children of the view might not be there yet ?\n",
            "I see:  BottomUp \n",
            "Do we need to check the children at all ? (what if the root form is an empty collection)\n",
            "empty collection -> `hasChildren() === false` -> no CSRF ?\n",
            "- couldn't this be used to erase a collection (not protected) ?\n- what if children are added dynamically ?\n",
            "I have created a new issue as this PR is closed\n",
            "could this test be nested in the following if ? (to have only 1 test in the working case)\n",
            "`return $this;` ? - fluid interface\n",
            "this looks weird ! Could it be move to `Options::offsetSet()` ?\n",
            "`$this->defaultOptions->replace($option, $value)` then ?\n",
            "missing `$this->lazy[$option] = false;` here ? to avoid resolving concret options (when they overload a lazy one) ? \nedit: it should be `unset()`\n",
            "`unset($this->lazy[$option])`; missing ? - even if it should not have side effects for now\n",
            "clear also `$lazy` and `$lock` ?\n",
            "`next()` should return (resolve) the next value\n",
            "not conventional !\n",
            "my mistake.\n",
            "line endings: http://help.github.com/line-endings/\n",
            "should be `\\-` in the middle ?\n",
            "http://help.github.com/line-endings/\n",
            "this is wrong... as `getValue()` [can return `null`](https://github.com/ruian/symfony/commit/fc7c7f645869e30010f3f8e050189303bfd5c2c8#L1R194). Could you revert and add a comment here (which I should have done in first place).\n",
            "Because you can not guess the max length of a float... may be it should not return anything after all\n",
            "Ok the rationale:\n- When you have a min value, you guess a min length of this min (LOW_CONFIDENCE) , lines below\n- If this value is a float type, this is wrong so you guess null with MEDIUM_CONFIDENCE to override the previous guess.\n\nExample:\nYou want a float greater than 5,  4.512313 is not valid but length(4.512314) > length(5)\n",
            "@bschussek did you get my comment before posting ?\n",
            "ref: #3645\n",
            "null case: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L336\n",
            "I'll open an issue for adding a comment. This has to be done for:\n- the validator,\n- the ORM,\n- the ODM,\n- Propel\n",
            "should be `\\-` in the middle ?\n",
            "http://help.github.com/line-endings/\n",
            "this is wrong... as `getValue()` [can return `null`](https://github.com/ruian/symfony/commit/fc7c7f645869e30010f3f8e050189303bfd5c2c8#L1R194). Could you revert and add a comment here (which I should have done in first place).\n",
            "Because you can not guess the max length of a float... may be it should not return anything after all\n",
            "Ok the rationale:\n- When you have a min value, you guess a min length of this min (LOW_CONFIDENCE) , lines below\n- If this value is a float type, this is wrong so you guess null with MEDIUM_CONFIDENCE to override the previous guess.\n\nExample:\nYou want a float greater than 5,  4.512313 is not valid but length(4.512314) > length(5)\n",
            "@bschussek did you get my comment before posting ?\n",
            "ref: #3645\n",
            "null case: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L336\n",
            "I'll open an issue for adding a comment. This has to be done for:\n- the validator,\n- the ORM,\n- the ODM,\n- Propel\n",
            "should be `\\-` in the middle ?\n",
            "http://help.github.com/line-endings/\n",
            "this is wrong... as `getValue()` [can return `null`](https://github.com/ruian/symfony/commit/fc7c7f645869e30010f3f8e050189303bfd5c2c8#L1R194). Could you revert and add a comment here (which I should have done in first place).\n",
            "Because you can not guess the max length of a float... may be it should not return anything after all\n",
            "Ok the rationale:\n- When you have a min value, you guess a min length of this min (LOW_CONFIDENCE) , lines below\n- If this value is a float type, this is wrong so you guess null with MEDIUM_CONFIDENCE to override the previous guess.\n\nExample:\nYou want a float greater than 5,  4.512313 is not valid but length(4.512314) > length(5)\n",
            "@bschussek did you get my comment before posting ?\n",
            "ref: #3645\n",
            "null case: https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L336\n",
            "I'll open an issue for adding a comment. This has to be done for:\n- the validator,\n- the ORM,\n- the ODM,\n- Propel\n",
            "@bschussek will it be ok with empty collections ?\n",
            "the question is if this might render an input (`count()` returns 0)\n",
            "yep\n",
            "@bschussek will it be ok with empty collections ?\n",
            "the question is if this might render an input (`count()` returns 0)\n",
            "yep\n",
            "@bschussek will it be ok with empty collections ?\n",
            "the question is if this might render an input (`count()` returns 0)\n",
            "yep\n",
            "Do you have some example ? \nI also would like to keep exception management consistent across the component (should other places be updated).\n",
            "Might be useful (I don't have a strong opinion here).\nThis would probably imply:\n- Making management consistent across the component,\n- Subclass `InvalidDefinitionException` (i.e. `InvalidArrayNodeDefinitionException`)\n\nI think there are already some inconsistencies in the way excs are managed in this component (SPL vs component specific). This might be the subject for an other PR ? \n",
            "definitely.\n",
            "I mean definitely not of course ;-) see [this](https://github.com/symfony/symfony/pull/3403/files#L3R147)\n",
            "getMethod ?\n",
            "What about splitting this methods in smaller chunks ?\n",
            "I think it could help.\n",
            "getMethod ?\n",
            "What about splitting this methods in smaller chunks ?\n",
            "I think it could help.\n",
            "I agree\n",
            "I agree\n",
            "`$this->assertTrue((Boolean) strstr($view->get('money_pattern'), '\u00a5'));` would be correct from a CS POV but you could probably find something better.\n",
            "I meant better than `(Boolean) strstr()` may be `strpos()` ?\n",
            "What about `assertType` ?\n",
            "`$this->assertTrue((Boolean) strstr($view->get('money_pattern'), '\u00a5'));` would be correct from a CS POV but you could probably find something better.\n",
            "I meant better than `(Boolean) strstr()` may be `strpos()` ?\n",
            "What about `assertType` ?\n",
            "Should this be `$view['form']->widget($form)` to ease theming ?\n",
            "you are right, I missed this.\n",
            "Shouldn't getters be checked first as they should be the preferred way to access the propery ?\n",
            "it could be:\n\n```\n<?php\n\nif (getter) {\n$values[] = ...;\ncontinue;\n}\n\nif (property) {\n$values[] = ...;\ncontinue;\n}\n\nthrow new;\n```\n",
            "`setMessage` is deprecated, should be chnaged to `$this->context->addViolation()`\n",
            "Shouldn't getters be checked first as they should be the preferred way to access the propery ?\n",
            "it could be:\n\n```\n<?php\n\nif (getter) {\n$values[] = ...;\ncontinue;\n}\n\nif (property) {\n$values[] = ...;\ncontinue;\n}\n\nthrow new;\n```\n",
            "`setMessage` is deprecated, should be chnaged to `$this->context->addViolation()`\n",
            "and what if we don't use the form builder ?\n",
            "I would not write `if ($a === 2) { $a = 2; }` so I think it makes sense.\n\nAbout performance, what is the impact, would it really matter when a form is involved ?\n",
            "See this [PR](https://github.com/symfony/symfony/pull/688) for some background.\n\n`__invoke()` is definitely not right, `$clientDate($this)` should be use if we keep `\\Closure`s\n",
            "Some benchmark (PHP 5.3.5 not using any accelerator, $closure with one argument):\n\n```\n$closure->__invoke(): 512\n$closure(): 259\ncall_user_func($closure): 464\n```\n\nI don't think any of this will make any difference at a global level.\n",
            "Some benchamrk (PHP 5.3, no accel, array of 12 stdClass instances):\n\n```\nfor: 674\nforeach: 609\n```\n",
            "That should be true if the count is in the  test  position (i.e. executed on each iteration) otherwise I can't see why.\n\nTo me this is really uneeded to optimize this: what would be the overall impact event if you can double the speed of this particular loop ???\n",
            "I hadn't performance (even if it turned to be faster) nor memory consumption in mind (that's an array of a few  pointers ) bunt only the beauty of symmetry between forward and backward transforms.\n\nI'll revert this change tomorrow with the others lying in the todo list.\n",
            "and what if we don't use the form builder ?\n",
            "I would not write `if ($a === 2) { $a = 2; }` so I think it makes sense.\n\nAbout performance, what is the impact, would it really matter when a form is involved ?\n",
            "See this [PR](https://github.com/symfony/symfony/pull/688) for some background.\n\n`__invoke()` is definitely not right, `$clientDate($this)` should be use if we keep `\\Closure`s\n",
            "Some benchmark (PHP 5.3.5 not using any accelerator, $closure with one argument):\n\n```\n$closure->__invoke(): 512\n$closure(): 259\ncall_user_func($closure): 464\n```\n\nI don't think any of this will make any difference at a global level.\n",
            "Some benchamrk (PHP 5.3, no accel, array of 12 stdClass instances):\n\n```\nfor: 674\nforeach: 609\n```\n",
            "That should be true if the count is in the  test  position (i.e. executed on each iteration) otherwise I can't see why.\n\nTo me this is really uneeded to optimize this: what would be the overall impact event if you can double the speed of this particular loop ???\n",
            "I hadn't performance (even if it turned to be faster) nor memory consumption in mind (that's an array of a few  pointers ) bunt only the beauty of symmetry between forward and backward transforms.\n\nI'll revert this change tomorrow with the others lying in the todo list.\n",
            "May be this should be a CreationException to match how [FormFactory](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/FormFactory.php#L258) works ?\n",
            "You are absolutely right. The code should have been updated with the introduction of `getAllowedOptionValues` and `CreationException`. The best would be to remove the dead `if` case (This is no more required and can even prevent from being able to extend the date type).\n"
        ],
        "prs": [
            {
                "title": "[2.3] [WIP][FrameworkBundle] Add support for the '@Bundle/Path/template.format.engi...",
                "body": "...ne' notation\n\n@fabpot what's your opinion on this change ? It would allow for more consistency.\n\nTodo - id accepted:\n- [ ] PR header\n- [ ] UTs\n- [ ] Document the BC break\n- [ ] Pass a Bundle map to the parser (AcmeDemo => AcmeDemoBundle) to be consistent w/ Twig & faster - that's an other BC break\n- [ ] fix #6919 (disable NS parsing by Twig, always use the Template Name Parser)\n"
            },
            {
                "title": "[2.3][Enhancement][FrameworkBundle] Move the warmup logic to the CacheWarmerAggregate",
                "body": "This is mainly moving logic from the cache clear command to its own class so that it could be called more easily (ie from the WDT).\n\nFeedback ?\n"
            },
            {
                "title": "[FrameworkBundle] Fix a BC break for Hinclude global template",
                "body": "@fabpot should the one who broke BC write a UT for this ? (I won't have time in the next few days).\n"
            },
            {
                "title": "[2.3] [Routing] Some tweaks",
                "body": "I think the new version has an improved readability. @fabpot random changes or what ?\n\nAt least I have spotted some bugs in the annotation loader that I will fix in the 2.0 branch.\n"
            },
            {
                "title": "[2.3] [HttpKernel] Add Zend Optimizer+ in the ConfigDataCollector",
                "body": "I have also removed a lot of useless comments.\n"
            },
            {
                "title": "[FrameworkBundle] CSRF should be on by default",
                "body": ""
            },
            {
                "title": "[EventDispathcer] Fix removeListener",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | ~ |\n\nTodo\n- [x] Add a UT\n\nI won't have time to add a test before next Friday but this PR could save some debugging (especially with Silex & Closures)\n"
            },
            {
                "title": "[2.3] [HttpFoundation] Protect JSONResponse against CSRF attacks",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | https://github.com/symfony/symfony-docs/pull/2212 |\n"
            },
            {
                "title": "[Validator] Fix a deprecated method call in the tests",
                "body": "BUG FIX - Travis happier ?\n"
            },
            {
                "title": "[Console] Tweaks & cleanup",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | no |\n| BC breaks? | yes |\n| Deprecations? | yes |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | TBD if accepted |\n"
            },
            {
                "title": "[2.3] [Process] Improve the usability of the PhpExecutableFinder",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | ~ |\n| License | MIT |\n| Doc PR | ~ |\n\nI first wanted to make `find` static but that would probably be considered as an unrequired BC break.\n"
            },
            {
                "title": "css fix",
                "body": "before\n\n![ov](https://f.cloud.github.com/assets/248818/97566/72a11c18-66fe-11e2-80b1-f434a5216a66.jpg)\n\nafter\n\n![nov](https://f.cloud.github.com/assets/248818/97563/41ace560-66fe-11e2-988e-fcdb931d88d7.jpg)\n"
            },
            {
                "title": "[DIC] Move PrependExtensionInterface to the Extension namespace",
                "body": "@fabpot Please merge before 2.2 (no BC break) /cc @lsmith77\n"
            },
            {
                "title": "[DIC] Better handling of enableable configurations",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no, this feature has not been released yet |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | - |\n\nMy definition of bug fix might be discussable. The thing which I think is not discussable is that this PR fixes the semantic - and I think it is important for a  semantic configuration : before this PR, some nodes had `->canBeDisabled` for nodes that were actually disabled by default. Those nodes now have `->canBeEnabled` which sounds right.\n\n**Edit: Jan 28, 2013** - history: \n\nSee [the related comments](https://github.com/symfony/symfony/pull/6829#discussion_r2727742).\n\nI think Symfony **must** get the configuration right as we can expect of lot of devs to use this as a template when writting their own configuration.\n\n@schmittjoh could you please give me your feedback on [this change](https://github.com/symfony/symfony/pull/6852/files#L4R224) considering [the rationale](https://github.com/symfony/symfony/pull/6852/files#L3R7).\n"
            },
            {
                "title": "[2.3] [DI] Improve the generated PHPDoc of the dumped PHP container",
                "body": "By adding  @throws InactiveScopeException  where applicable\n"
            },
            {
                "title": "[HttpFoundation] tweak the Request",
                "body": "First commit: I find the new version more readable (and it should be _marginally_ faster).\nOther commits are a refresh of the CS.\n"
            },
            {
                "title": "[HttpKernel] HttpRenderer fix + enhancements",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes, 2nd commit |\n| New feature? | yes, interfaces |\n| BC breaks? | yes, but this is could be considered as a bug fix (`private` -> `protected`) |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | User facing API is the same |\n"
            },
            {
                "title": "[FrameworkBundle] A controller must be callable",
                "body": "Am I right to say that a controller **must** be callable, ie [method_exists()](https://github.com/vicb/symfony/pull/new/symfony:2.0...resolver#L1L77) is a bug ?\n\nNo BC, tests pass.\n\nThe change is a one liner however I have rewritten some code & tests to the current standards (what a long way since the genesis of Sf2 !)\n\nI have also added a FIXME for Sf3, because returning `false` is too much `PHP` !\n"
            },
            {
                "title": "KNOWN_ISSUES with php 5.3.16",
                "body": "see https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Tests/Controller/ControllerResolverTest.php#L137\n"
            },
            {
                "title": "[Process] Add ability to force unescaping + tweaks (code & test)",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | yes |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | - |\n| License | MIT |\n| Doc PR | Not sure if we want to document this ? If yes, I'll update if accepted. |\n\nRationale:\n`'ogr2ogr' '-f GeoJSON'` would not work\n`'ogr2ogr' -f GeoJSON` would work\n\nThe first commit has the interesting updates, other commits are tweaks only. Everything should be squashed before the merge.\n"
            },
            {
                "title": "[2.3][Enhancement][WIP]Profile, some love",
                "body": "**First commit**\n\n One simple SE profile is ~100k (no doctrine), gzcompress could save space. I assume the [de]compression time is more than compensated by the zlooow IO time - the compression ratio is more than 10:1 (assume, yep, not benchmarked, pointless).\n\n**Second commit**\n\nOptimize reading the file\n\n@fabpot please no squash, unrelated commits.\n"
            },
            {
                "title": "[HttpKernel] fix public Kernel::stripComments()",
                "body": "Needs fix as the method is public.\n"
            },
            {
                "title": "[Routing] fix typo",
                "body": ""
            },
            {
                "title": "Classcollectionloader: fix traits + enhancements",
                "body": "Commits:\n- some tweaks\n- generates smaller cache files (20% decrease for the SE)\n- fix traits dependency - thanks php for consistency https://bugs.php.net/bug.php?id=61554\n"
            },
            {
                "title": "[Finder] cleanup, fixes, improvements",
                "body": ""
            },
            {
                "title": "[Finder] fluid, calling in() not required after append()",
                "body": ""
            },
            {
                "title": "[WebProfilerBundle] Some eye candy for deprecated calls",
                "body": "![Ohhh](https://lh4.googleusercontent.com/-T9DKsHWf4YU/UMIRqT0g_II/AAAAAAAAJ84/tRDRP8IMwRM/s840/stack.jpg).\n\n@fabpot is [`|raw`](https://github.com/symfony/symfony/pull/new/deprecated#L0R117) a twig defect ?\n"
            },
            {
                "title": "[WebProfilerBundle]  View all  is  View last 10 ",
                "body": "Change a misleading link description\n"
            },
            {
                "title": "[DI] Add a base class for extension",
                "body": "depends on #6148\n\n@fabpot should we change `addClassesToCompile` & the likes (thinking of traits).\n"
            },
            {
                "title": "[HttpFoundation] Request::getRealMethod() now returns UPPERCASE",
                "body": ""
            },
            {
                "title": "[HttpKernel] Add DI extension configs as ressources when possible",
                "body": "/cc @rdohms @richardmiller\n"
            },
            {
                "title": "[SecurityBundle] Convert Http method to uppercase in the config",
                "body": "This is not striclty required as method names would be converted to uppercase by the matcher after #5988.\n\nHowever I think it is better to always use uppercase for http method names.\n\nThe config UT has also been improved as part of this PR.\n\nThis is good to propagate to 2.1 & 2.2 also.\n"
            },
            {
                "title": "[HttpFoundation] Move IP check methods to a HttpUtils class for reuse",
                "body": ""
            },
            {
                "title": "[HttpFoundation] fix #6002",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Fix AcceptHeader",
                "body": "The important lines are:\n\n``` php\n<?php\n-        return !empty($this->items) ? current($this->items) : null;\n+        return !empty($this->items) ? $this->items[0] : null;\n```\n\n(and the corresponding test).\n\nThe commit has some code re-org to make reading tests easier (providers defined close the the corresponding test). This might be personal preferences only, let me know if it should be reverted.\n"
            },
            {
                "title": "[HttpFoundation] Make host & methods really case insensitive in the Requ...",
                "body": "...estMacther\n\nand backport changes from 2.2\n\nDetails:\n- does not take case into account when checking the host (the `Request` always returns a lowercase value) to protect against user typo,\n- makes the constructor case proof by invoking setters rather than setting properties directly (you could then add un unreachable method i.e; `get`)\n\nPlease propagate to 2.1/2.2 if accpeted. Thanks.\n"
            },
            {
                "title": "[HttpKernel] Fix Symfony2 full framework tests",
                "body": "Fix the path when the full framework is used\n"
            },
            {
                "title": "[HttpKernel] Changlog update - document a BC break",
                "body": ""
            },
            {
                "title": "[HttpKernel] Changelog update",
                "body": ""
            },
            {
                "title": "Add missing symfony/stopwatch in the replace section of composer.json",
                "body": "And order the sections alphabeticaly for easier navigation\n"
            },
            {
                "title": "[HttpFoundation] Fix the path tp stubs folder in composer.json",
                "body": ""
            },
            {
                "title": "[MemoryDataCollector] Stop being optimistic about memory usage",
                "body": "Take into account the memory used in the kernel.terminate listeners\n"
            },
            {
                "title": "[FrameworkBundle] Router class tweak",
                "body": ""
            },
            {
                "title": "[Stopwatch] Get the  real size  used & minor tweaks",
                "body": ""
            },
            {
                "title": "[DoctrineBridge] Fix log of non utf8 data",
                "body": "relates to #5139 (fix #5115 for 2.1)\n"
            },
            {
                "title": "Doctrine logger - fix logging of binary data",
                "body": "fix #5115\n"
            },
            {
                "title": "Doctrine logger",
                "body": "fix #5115\n"
            },
            {
                "title": "[Composer] Bumped doctrine/orm to 2.2.3",
                "body": "fix #4966\n"
            },
            {
                "title": "[RFC][Routing] Add an interface for configuring strict_parameters",
                "body": "This is a proposal to fix #4697 (related to #4592).\n\nThe main point left to discuss was the name of the interface, which is now `LenientInterface`. We could change the name to anything else is someone has a better idea.\n\n@stof @Tobion what do you think ?\n"
            },
            {
                "title": "[OptionsResolver] Fix Options::has() when the value is null",
                "body": "`isset()` would have returned `false` when the value is `null`\n"
            },
            {
                "title": "[HttpFoundation] Allow setting an unknown status code without specifying...",
                "body": "... a text\n\nfix #4978\n"
            },
            {
                "title": "[FrameworkBundle] Allow using kernel parameters in routes",
                "body": "Kernel parameters can now be used at any position in patterns, defaults and requirements.\n\nRelates to: #3316, #3276\n\n**Differences from 3316:**\n- The substitution is now done in the `Router`,\n- 3316 uses `$container->getParameterBag()` which is not part of the `ContainerInterface`. The way it been solved in this PR is that some code have been duplicated inside the `Router`, see `resolveString()`.\n\n**BC break:**\n\nBefore this PR, nonexistent parameters would have be silently ignored (ie `%idontexist%` would not have been replaced). After this PR, they will throw an exception. However you can escape the value (ie `%%idontexist%%` will be accepted and replaced by `%idontexist%`).\n\n_This behavior is not mandatory and can be reverted if needed. However this keeps the router more consistent with the DI_.\n\nAny feedback ? @helmer @Koc\n"
            },
            {
                "title": "[WIP][Form] Add theming support for collections",
                "body": "**This is a work in progress**\n\nThis is an attempt to allow form collection theming.\n\nBefore this PR, it was not possible to apply a theme to all the children of a collection, you would have needed to cretate one block per child:\n\n```\n{% block _form_collection_0_label %}\n    {# ... #}\n{% endblock %}\n```\n\nYou can now create a single theme that will be applied to all the children:\n\n```\n{% block _form_collection_children_label %}\n    {# ... #}\n{% endblock %}\n```\n\n@Burgov, @bschussek, everybody, any feedback ?\n\nTodo:\n- Apply the theme to the prototype,\n- Add tests,\n- Restore BC (i.e. ability to theme a single children which must take precedence over the new theme),\n- Changelog,\n- Doc.\n\nfix: #2806\n"
            },
            {
                "title": "[Profiler] Better support for collector in a production env",
                "body": "relates to #3706.\n\nWith this PR it is possible to:\n- enable only the profiler in a production environment - the wdt being disabled you have to switch to the development environment to inspect the collected data,\n- enable both the profiler and the wdt in a production environment (the use case form #3706).\n\n@jmikola would this solve your use case ?\n"
            },
            {
                "title": "[Session] Removes references to the deprecated 'auto_start' setting",
                "body": "fix #4721\n"
            },
            {
                "title": "[FrameworkBundle] Create a dedicated template filename parser",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: yes\n\nrelated to #3116\n"
            },
            {
                "title": "[FrameworkBundle] Display an error message when 'session.auto_start' is ...",
                "body": "...used (deprecated)\n"
            },
            {
                "title": "[Finder] '*' and '?' are considered are glob pattern rather than delimit...",
                "body": "...ers (fix #4664)\n"
            },
            {
                "title": "[Security] allow  0  as a password",
                "body": "``` php\n<?php \n! 0  == true\n```\n"
            },
            {
                "title": "[WebProfilerBundle] Fix time panel for fr locale (fix #4437)",
                "body": "@Vincent-P could you confirm if this commit fixes your issues , Thanks.\n"
            },
            {
                "title": "[Form] Start the session to get the csrf token",
                "body": "Ensure that the sesssion is started before retrieving the session id\n\n/cc @drak, @bschussek\n"
            },
            {
                "title": "[Form] cleanup",
                "body": ""
            },
            {
                "title": "a few minor changes / cleanup",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Fix the UploadedFilename name sanitization (fix #2577)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=uploadedfile2.0)](http://travis-ci.org/vicb/symfony)\nFixes the following tickets: #2577\n"
            },
            {
                "title": "[Session] cleanup of the PDO storage",
                "body": "and adding what was missing from #4244\n"
            },
            {
                "title": "[RFC][Session] Make the PDO handler looks less hacky",
                "body": "Related discussion: https://github.com/symfony/symfony/commit/ebc2f01e5b4e567c49ae99cb6bd01b4d07039748#commitcomment-1304221\n\nThe current code works but looks hacky (`$dbTimeCol = CASE WHEN $dbTimeCol = :time THEN (VALUES($dbTimeCol) + 1) ELSE VALUES($dbTimeCol) END`).\n\nTodo: wrap the mysql specific code in a `try...catch` if we choose this PR way (to be consistent with all other PDO invocations).\n"
            },
            {
                "title": "[Session] Non-native Session handlers",
                "body": "A few item to discuss. Needs @drak inputs.\n- 72d21c66 is trivial,\n- 0216e056 is about memcache(d) handlers\n  - I don't think the handlers should configure the memcache(d) instances. Those instances are injected into the storage so they should already be confidured (this will be done in the CacheBundle when available)\n  - A SW prefix has been added to the memcached handlers so that the same instance of memcached can be shared - you can still set the `Memcached::OPT_PREFIX_KEY` before injecting the memcached instance.\n  - It was not possible to use an expiration > 30days before, see [php.net](http://www.php.net/manual/en/memcached.expiration.php)\n- 788adfb6 is trivial (cleanup in the PDO handler)\n"
            },
            {
                "title": "[Routing] Fix a regression introduced by #4170",
                "body": "See https://github.com/symfony/symfony/commit/8232aa150b70572b1d378f202d886539946853a3#commitcomment-1300310\n\nLet's wait to confirm the fix is ok before merging\n\n@stephpy, @mvrhov ?\n\n(Travis is not ok since 5.3.3 is not supported).\n"
            },
            {
                "title": "[RFC][Session] Native storage handlers should not update the global config",
                "body": "I submit this as a RFC because we can not get to an agreement on things should be done with @drak and I would like to hear the voice of the community on this point.\n\nMemcache will be used as an example for the discussion.\n\n**Context**\n\nWhen you want to use memcache to store your sesssion data, you will need to create an instance of  NativeMemcacheSessionHandler  and pass the `save_path` as argument. The `save_path` specify the host, port and a few options (i.e. the ones passed to [addServer](http://www.php.net/manual/fr/memcache.addserver.php)).\n\nAll the other options (i.e. the compression factor, the serializer, ...) are retrieved from the ini values.\n\n**What we do today**\n\nIn order to configure the native memcache storage the `NativeMemcacheSessionHandler` class [update](https://github.com/symfony/symfony/blob/7dfd41048120cd884db63ee8074452dc7c17134c/src/Symfony/Component/HttpFoundation/Session/Storage/Handler/NativeMemcacheSessionHandler.php#L64) the ini values.\n\n**What I propose**\n\nI propose **not** to update any ini value that is gobal to **all the** memcache instances. To me ini values are global configs that should not be updated for a local need.\n_(I am ok with updating session specific settings ('memcache.session_redundancy') because those are not shared by all the memcache instances)_\n\nIn order to configure the memcache native storage:\n- update your php.ini with the desired value,\n- or if you don't have access to the php.ini (i.e. on a shared server) set the value at some  global  place (i.e. your kernel).\n\n**The question**\n\nDo you think:\n\nA- It is ok to change any ini settings from inside the Session ? (The current state)\nB- We should not modify any ini settings that is not strictly related to the session from inside the session. (The state after this PR)\n"
            },
            {
                "title": "[Validator] Fix/cleanup",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: yes\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=validator/fix)](http://travis-ci.org/vicb/symfony)\n- d2100a27 has some fixes for the EC,\n- 51769e03 has some cleanup in the graph walker,\n- f9b3591c add an AbstractLoader (namespace aliases does not belong to FileLoaders).  \n"
            },
            {
                "title": "[Routing] Fix the matching process",
                "body": "This PR is based on the PR #3678, #4139.\n\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=routingmatcher)](http://travis-ci.org/vicb/symfony)\n\n**The spec**\n\nA pattern is composed of both text and variable segments: `/{variable}-test/{other_variable}`.\n\nA variable segment will match anything until a separator is encountered. The separator is the character following the variable segment when available or preceding the variable otherwise (i.e. at the end of the pattern).\n\nThat is:\n- the separator is `-` for the `variable`,\n- the separator is `/` for the `other_variable`.\n\n_Note: This default matching behavior can be overridden if a requirement is specified for a variable)_\n\n**Fixes**\n- The current behavior is to consider booth the preceding and following characters as separators (considering availability),\n- The  preceding  separator of the first variable is always set to `/` whatever the preceding character is (due to `$pos = 0` for the first iteration).\n\n**Todo**\n\nUpdate the doc once this is merged\n"
            },
            {
                "title": "[Routing] Fix the matching process",
                "body": "This PR is based on the PR #3678.\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=routingmatcher)](http://travis-ci.org/vicb/symfony)\n\n**The spec**\n\nA pattern is composed of both text and variable segments: `/{variable}-test/{other_variable}`.\n\nA variable segment will match anything until a separator is encountered. The separator is the character following the variable segment when available or preceding the variable otherwise (i.e. at the end of the pattern).\n\nThat is:\n- the separator is `-` for the `variable`,\n- the separator is `/` for the `other_variable`.\n\n_Note: This default matching behavior can be overridden if a requirement is specified for a variable)_\n\n**Fixes**\n- The current behavior is to consider booth the preceding and following characters as separators (considering availability),\n- The  preceding  separator of the first variable is always set to `/` whatever the preceding character is (due to `$pos = 0` for the first iteration).\n\n**Todo**\n\nUpdate the doc once this is merged\n"
            },
            {
                "title": "[WIP][2.1][Form] Revert some BC breaks ",
                "body": "[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=form/revert)](http://travis-ci.org/vicb/symfony)\n\nSome BC breaks have been removed from the 2.1 branch to ease the 2.0 to 2.1 transition.\n\nMost changes will still be kept and fixed the master branch (#2421 will also be reverted in the main branch).\n\nBC breaks that have not been reverted:\n- #3789 [Form] Fixed option support in Form component\n- #3322 [Form] Throwing an AlreadyBoundException in `add`, `remove`, `setParent`, `bind` and `setData` if called on a bound form\n- #3290 [Form] Fixed:  date ,  time  and  datetime  fields can be initialized with \\DateTime objects\n- #3156 [Form] Improved ChoiceList implementation and made form naming more restrictive\n- #3128 [Form] Made validation of form children configurable\n\nThis is a preview, feedback is appreciated.\n"
            },
            {
                "title": "[FrameworkBundle] Monitor added/removed translations files in dev",
                "body": "fix #3653\n"
            },
            {
                "title": "[FrameworkBundle] Look for translations in %kernel.root_dir%/Resources/%...",
                "body": "...bundle%/translations (fix #4018)\n\nI will submit a PR to the docs.\n"
            },
            {
                "title": "[Finder] Fixes in the iterators",
                "body": "fix: #4023\nref: #4011\n- Fix regex detection\n- call `file_get_contents()` only once (vs once per pattern)\n\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=finder/regex)](http://travis-ci.org/vicb/symfony)\n\n@gajdaw thoughts ?\n"
            },
            {
                "title": "Fix umasks in chmod() calls",
                "body": "As discussed with @Seldaek \nref: #4008\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=master)](http://travis-ci.org/vicb/symfony)\n"
            },
            {
                "title": "[Form] Fix the FormTypeValidatorExtension (required by PR 3923)",
                "body": "Thanks to @jrfish for the fix (#3983)\n"
            },
            {
                "title": "[HttpKernel] Fix the ProfilerListener (fix #3620)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler/listener_2.0)](http://travis-ci.org/vicb/symfony)\nFixes the following tickets: #3620, PR #3618\n\nMany thanks to @guilhermeblanco for helping with the tests.\n"
            },
            {
                "title": "[HttpKernel] Fix the ProfilerListener (fix #3620)",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler/listener_2.0)](http://travis-ci.org/vicb/symfony)\nFixes the following tickets: #3620, PR #3618\n\nMany thanks to @guilhermeblanco for helping with the tests.\n"
            },
            {
                "title": "[HttpKernel] Profiler Listener tweaks",
                "body": "- `setParent()` is called in [`Profile::addChild()`](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Profiler/Profile.php#L180) in 2.1\n- The profiles are now only saved once only in the listener (either at the end of the main request or on an exception)\n- The profiles are now only saved once only in the TraceableEventDispatcher (twice for the root profile when there is a kernel.terminate' event\n\n[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler/listener)](http://travis-ci.org/vicb/symfony)\n"
            },
            {
                "title": "[Routing] Implement bug fixes and enhancements (from @Tobion)",
                "body": "This is mainly #3754 with some minor formatting changes.\n\nOriginal PR message from @Tobion:\n\nHere a list of what is fixed. Tests pass.\n1. The `RouteCollection` states\n   \n   > it overrides existing routes with the same name defined in the instance or its children and parents.\n   \n   But this is not true for `->addCollection()` but only for `->add()`. addCollection does not remove routes with the same name in its parents (only in its children). I don't think this is on purpose.\n   So I fixed it by making sure there can only be one route per name in all connected collections. This way we can also simplify `->get()` and `->remove()` and improve performance since we can stop iterating recursively when we found the first and only route with a given name.\n   See `testUniqueRouteWithGivenName` that fails in the old code but works now.\n2. There was an bug with `$collection->addPrefix('0');` that didn't apply the starting slash. Fixed and test case added.\n3. There is an issue with `->get()` that I also think is not intended. Currently it allows to access a sub-RouteCollection by specifing $name as array integer index. But according to the PHPdoc you should only be allowed to receive a Route instance and not a RouteCollection.\n   See `testGet` that has a failing test case. I fixed this behavior.\n4. Then I recognized that `->addCollection` depended on the order of applying them. So\n   \n   ```\n   $collection1->addCollection($collection2, '/b');\n   $collection2->addCollection($collection3, '/c');\n   $rootCollection->addCollection($collection1, '/a');\n   ```\n   \n   had a different pattern result from \n   \n   ```\n   $collection2->addCollection($collection3, '/c');\n   $collection1->addCollection($collection2, '/b');\n   $rootCollection->addCollection($collection1, '/a');\n   ```\n   \n   Fixed and test case added. See `testPatternDoesNotChangeWhenDefinitionOrderChanges`.\n5. PHP could have ended in an infinite loop when one tried to add an existing RouteCollection to the tree. Fixed by throwing an exception when this situation is detected. See tests `testCannotSelfJoinCollection` and `testCannotAddExistingCollectionToTree`.\n6. I made `setParent()` private because its not useful outside the class itself. And `remove()` also removes the route from its parents. Added public `getRoot()` method.\n7. The `Route` class throwed a PHP warning when trying to set an empty requirement.\n8. Fixed issue #3777. See discussion there for more info. I fixed it by removing the over-optimization that was introduced in 91f4097a0905e but didn't work properly. One cannot reorder the route definitions, as is was done, because then the wrong route might me matched before the correct one. If one really wanted to do that, it would require to calculate the intersection of two regular expressions to determine if they can be grouped together (a tool that would also be useful to check whether a route is unreachable, see discussion in #3678) We can only safely optimize routes with a static prefix within a RouteCollection, not across multiple RouteCollections with different parents.  This is especially true when using variables and regular expressions requirements.\n   I could however apply an optimization that was missing yet: Collections with a single route were missing the static prefix optimization with `0 === strpos()`.\n9. Fixed an issue where the `PhpMatcherDumper` would not apply the optimization if the root collection to be dumped has a prefix itself. For this I had to rewrite `compileRoutes`. It is also much easier to understand now. Addionally I added many comments and PHPdoc because complex recursive methods like this are still hard to grasp. \n   I added a test case for this (`url_matcher3.php`).\n10. Fix that `Route::compile` needs to recompile a route once it is modified. Otherwise we have a wrong result. Test case added.\n"
            },
            {
                "title": "[Routing] Handling of space characters in the dumpers",
                "body": "The compiler was using the 'x' modifier in order to ignore extra spaces and line feeds but the code was flawed:\n- it was actually ignoring all the spaces, not only the extra ones added by the compiler,\n- all the spaces were stripped in the php and apache matchers.\n\nThe proposed fix:\n- do not use the 'x' modifier any more (and then do no add extra spaces / line feeds),\n- do not strip the spaces in the matchers,\n- escapes the spaces (both in regexs and script name) for the apache matcher.\n\nIt also include [a small optimization](https://github.com/vicb/symfony/pull/new#L9L89) when the only token of a route is an optional variable token - the idea is to make the regex easier to read.\n"
            },
            {
                "title": "[RFC] Fix issues with url decoding",
                "body": "Related: #2324, #2963, #2962, #2579\n### This PR fixes two issues:\n- `+` in paths were turned to     by `urldecode()`\n- `urldecode()` was called a few times (and a different number of times according to which part of the path was handled, see #2962 for details).\n### BC Breaks:\n- `Request::getPathInfo()`, `Request::getBaseUrl()` and `Request::getBasePath` now return the raw (encoded) path (vs a decoded path before this PR). You should check any calls to these methods in your code and wrap them in `rawurldecode()` if needed.\n- The `UrlMatcher` now decodes the URL only once (i.e. variable are no more decoded twice) and use `rawurldecode()` to support `+`.\n### Notes:\n- @arnaud-lb, the first commit is based on your #2963 so I put your name for the commit,\n### Comment history from the original PR:\n\n@vicb\n\n**The state before this PR:**\n- getRequestUri() returns an **encoded** value\n- getPathInfo() returns a **decoded** value\n- getBaseUrl() returns a **decoded** value\n- getBasePath() returns a **decoded** value\n\nThe decoded value is wrong as `urldecode` is used in place of `rawurldecode` turning `+` into a space character (#2324).\n\nThe matcher starts by urldecoing the path (it is already decoded as explained right before) and then urldecodes each variable one more time.\n\nWe end up with a path being decoded twice and variables being decoded three times.\n\n`Request::getUri()` calls both `getBaseUrl()` and `getPathInfo()` so that the return URI is **decoded**.\n\n**The state after the PR:**\n- getRequestUri() returns an **encoded** value\n- getPathInfo() returns an **encoded** value\n- getBaseUrl() returns an **encoded** value\n- getBasePath() returns an **encoded** value\n\nWe are consistent and we have the raw values everywhere - there is no (easy) way to get the encoded value back once it has been decoded as it is done in the current code.\n\nThe matcher relies on an encoded value and decode the value only once (using `rawurldecode` to support `+`s).\n\nSo basically this PR:\n- fix a bug - URL with `+` are now supported,\n- makes paths consistent - encoded values everywhere, including `getUri()`\n- makes variables consistent: they are decoded only once - the same as query string parameters.\n\nThere are some BC breaks:\n- getPathInfo() returns an encoded value vs a decoded one before,\n- getBaseUrl() returns an encoded value vs a decoded one before.\n- getBasePath() returns an encoded value vs a decoded one before.\n\nAny code relying on the output of one of the 2 previous methods should be checked and upgraded if needed. I am interested in the use cases where your code need to be updated.\n\n@Seldaek\n\nI checked a few projects and this is what I found (usage of getPathInfo & getBaseUrl):\n- One use case of getPathInfo to check if the url started with `/something/` which is a prefix used for all  overlay  content which had to be treated differently somewhere => most likely unaffected\n- One use case for checking path prefixes by regex in our [CorsBundle](https://github.com/nelmio/NelmioCorsBundle/blob/master/EventListener/CorsListener.php#L52-56) => potentially affected depending on the complexity of regexes I'd say\n\n@vicb\n\nThanks @Seldaek for reporting the use cases. You second case would be solved by `rawurldecode`ing the path info which is a minimal change.\n\nAnd in general I think we have to expand to doc to specify the url format that should be used.\n"
            },
            {
                "title": "[PhpUnit] Fix the path to the boostrap files in the components",
                "body": ""
            },
            {
                "title": "[RFC][Routing] Improve the current matching process",
                "body": "This still needs more thinking & discussions.\n\nSee what it adds by looking at the former 2.0 PR.\n"
            },
            {
                "title": "[RFC][Routing] fix or trick ?",
                "body": "With this PR\n\n`/foo-{bar}-{baz}` matches `/foo-b/ar-b-az`\n\nI thought I was a great idea when I wrote it, I am not sure any more:\n- matching `b/ar` is a BC break, it should probably not be included in 2.0. However I think this is the expected behavior (but it also suffers from the problem? mentioned below)\n- matching `b-az` is a new feature (could it be considered as a BC break as such ?)\n\nOne issue I can see with matching `b-az` is that it would hide a `/foo-{bar}-{baz}-{buz}` route declared afterwards. However a it would a masked a `/foo-{bar}-{baz}_{buz}` even with the current code. So one  benefit  here is to be consistent.\n"
            },
            {
                "title": "[HttpKernel] Fix MongoDbProfilerStorageTest",
                "body": "- The test was failing if no connection (trying to call purge)\n- The extension / connection was tested before each single test\n"
            },
            {
                "title": "[Routing] Cleanup",
                "body": "removing the obsolete `segment_separators` option\n"
            },
            {
                "title": "[Form] Fix min/max length guessing for numeric types (fix #3091)",
                "body": "Before this PR, the length was guessed from `strlen(min/max)`.\n\nThis is obviously false for float: `strlen( 1.123 ) > strlen ( 5 )` then this guess is now low confidence only and is masked by a `null` medium confidence guess for floats (implemented in both doctrine ORM & validator).\n\nThis PR also includes some code reorg in order to improve readability.\n\nI'll update Propel & Mongo if needed once this is merged.\n\n_note: `5.000` did neither work because of `5e3`_\n"
            },
            {
                "title": "[RFC] Fix issues with url decoding",
                "body": "Related: #2324, #2963, #2962, #2579\n\nThis PR fixes two issues:\n- `+` in paths were turned to     by `urldecode()`\n- `urldecode()` was called a few times (and a different number of times according to which part of the path was handled, see #2962 for details).\n\nNotes:\n- @arnaud-lb, the first commit is based on your #2962 so I put your name fot the commit,\n- `Request::getPathInfo()` returns the decoded path in order to minimize BC (see [this comment](https://github.com/symfony/symfony/pull/2963#issuecomment-3274617) from @Seldaek) - however the decoding is now done with `rawurldecode()` instead of `urldecode()` in order to avoid loosing `+` chars,\n- As the path is already decoded in `Request::getPathInfo()` it is no more decoded by the matchers (see `UrlMatcher` and `PhpMatcherDumper`). This could be considered as a BC or as a fixed (`UrlMatcher` was not consistent with `PhpUrlMatcher` and the path was decoded multiple times).\n\nAny thoughts ?\n"
            },
            {
                "title": "[Validator] Remove a race condition (fix #3217)",
                "body": "#3581 for 2.0\n"
            },
            {
                "title": "[Validator] Remove a race condition (fix #3217)",
                "body": ""
            },
            {
                "title": "[Form] Alternate syntax for form_theme",
                "body": "before\n`{% form_theme form _self  ::base.html.twig  %}`\n\nafter\n`{% form_theme form with  ::base.html.twig  %}`\n`{% form_theme form with varTheme %}`\n`{% form_theme form with [_self,  ::base.html.twig ] %}`\n\n_the former syntax is still supported_\n"
            },
            {
                "title": "[SecurityBundle] Lazily load the post schema listener",
                "body": "As suggested by @stof in #3560\n"
            },
            {
                "title": "[SecurityBundle] Lazily load the post schema listener",
                "body": "As suggested by @stof in #3560\n"
            },
            {
                "title": "[WIP][Security]replaced acl:init command with postGenerateSchema listener",
                "body": "Attempt to fix #2091.\n\nThe code is from @schmittjoh (see #1313) but was never merged.\n\nThe difference is that the `init:acl` command has not been dropped in order to overcome [the limitations](https://github.com/symfony/symfony/pull/1313#issuecomment-1387091) described by @stof. @stof do you think this is ok ?\n\nLeft to fix:\n- Using the code from this PR, the generated migration does not drop the tables but still alter them,\n\n@stof you know this part of the code far better than me. I would appreacite your feedback on this PR and any hint on solving the remaining item. Thanks.\n"
            },
            {
                "title": "[TwigBundle] Workaround a flaw in the design of the configuration (norma...",
                "body": "...lization)\n\nsee #2823\n\n@Seldaek please comment.\n"
            },
            {
                "title": "[RFC][TwigBundle] Workaround a flaw in the design of the configuration (norma...",
                "body": "...lization)\n\nsee #2823\n\n@Seldaek please comment.\n"
            },
            {
                "title": "[WebProfilerBundle] Router panel: take the request method into account",
                "body": "Before this change we were always using the default method (i.e. 'GET').\n"
            },
            {
                "title": "[Config] Improve prototype nodes usability, error messages, extensibility",
                "body": "### First commit\n\n_Before_ (you should set multiple defalutValues)\n\n``` php\n<?php \n$root\n    ->arrayNode('node')\n    ->prototype('array')\n        // when the node is not set\n        ->defaultValue(array('foo' => 'bar')\n        ->children()\n            // when the key is not set\n            ->scalarNode('foo')->defaultValue('bar')->end()\n\n$root\n    ->arrayNode('node')\n    ->prototype('array')\n        // when the node is not set\n        ->defaultValue(array('defaults' => array('foo1' => 'bar1', 'foo2' => 'bar2')\n        ->children()\n            ->arrayNode('bar')\n                // when the node is not set\n                ->addDefautsIfNotSet()\n                // when some values are not set (node being set)\n                ->scalarNode('foo1')->defaultValue('bar1')->end()\n                ->scalarNode('foo2')->defaultValue('bar2')->end()\n```\n\n_after_\n\n``` php\n<?php\n$root\n    ->arrayNode('node')\n    ->addDefaultChildrenWhenNoneSet()\n    ->prototype('array')\n        ->children()\n            ->scalarNode('foo')->defaultValue('bar')->end()\n\n$root\n    ->arrayNode('node')\n    ->addDefaultChildrenWhenNoneSet()\n    ->prototype('array')\n        ->children()\n            ->arrayNode('bar')\n                ->scalarNode('foo1')->defaultValue('bar1')->end()\n                ->scalarNode('foo2')->defaultValue('bar2')->end()\n```\n\n_more_ (exclusive configs)\n\n``` php\n<?php\n$root\n    ->arrayNode('node')\n    // Add a default node named 'defaults'\n    ->addDefaultChildrenWhenNoneSet()\n    // Add a default node named 'foo'\n    ->addDefaultChildrenWhenNoneSet('foo')\n    // Add two default nodes named 'foo', 'bar'\n    ->addDefaultChildrenWhenNoneSet(array('foo', 'bar'))\n    // Add two default nodes\n    ->addDefaultChildrenWhenNoneSet(2)\n```\n### Second commit\n\nImproves error messages (print the path to the error) & extensibility.\n\n@schmittjoh I would appreciate you feedback on both the commits. Do you think a boolean $throw switch on `getNode` would make sense (i.e. to prevent throwing excs in prod ?).\n"
            },
            {
                "title": "[Config] Cleanup, error detection, fixes",
                "body": "see #3357\n"
            },
            {
                "title": "[Profiler] Fix memcache(d) storages",
                "body": "This fixes an ambiguity...\n\nThe memcache(d) storages have a `$lifetime` option. The name indicates that we are talking about a ttl (in seconds). This is wrong is `$lifetime` > 2592000 (=30 days), see http://fr.php.net/manual/en/memcache.set.php.\n\nDoctrine is also [affected](https://github.com/vicb/common/commit/e9ab2d2ccaa825778bbf8a4e419534cb392246ea).\n\nThe ambiguity also exists in the session storage but to a lesser extend as those storage directly use memcache(d) options rather than a `$lifetime`. @drak could you confirm ?\n\nHopefully the Cache Component will get it right (#3211). \n"
            },
            {
                "title": "[Tests] Install PHP extensions when using Travis CI ...",
                "body": "... to improve test coverage.\n\nSee #3358.\n\nTests do not pass (as expected). Should be re-tested once 3358 get merged.\n\n_This is something I originally submitted for Doctrine common doctrine/common#96_\n"
            },
            {
                "title": "[Config] Cleanup, error detection, fixes",
                "body": "1. cleanup, nothing noticeable\n2. detect potential errors (useless config)\n3. fix errors in the fmwk bundle\n"
            },
            {
                "title": "[Profiler] Ajax",
                "body": "The first commit should be merged as `app` is not always accessible in the twig template due to the ways the templating system is used. Then there is currently no way to check if we are dealing with an ajax request in the view.\n\nThe second commit use ajax to load the panels. This should make the interface more responsive as you don't have to load the layout each time + the panels are cached. Loading via AJAX would also work if your panel does not extend the ajax layout (legacy support) - this would be less efficient though as you would load the layout and filter it out afterwards.\n\nI am not sure if the second commit is worth merging, maybe it is useless ?\n"
            },
            {
                "title": "[Routing] Remove a dependency on a derived class, fixes, optim",
                "body": "Subset of #3296 which should be acceptable.\n\nTravis is happy.\n\nThe side effect of removing the dependency is that the `UrlMatcher` does not throw an exception any more when the scheme does not match the required scheme. I think it is better because:\n- it removes a dependency on a derived class,\n- it was an undocumented  feature ,\n- other thrown excs are component specific while this one was raw SPL.\n"
            },
            {
                "title": "[WIP, Not to be merged]Routing",
                "body": "## **EDIT: Most of the code here has been fixed and merge as part of #3313, the remaining interesting part is the discussion together with the commit  [Routing] Refactor the matcher logging **\n\nWIP, please no CS comments, other feedback is welcome !\n\nThis PR started as an attempt to fix #3264.\n\nSome cleaning in the first three commits.\n\nThe interesting things start at commit number 4. Instead of having a separate `TraceableUrlMatcher` the logging is implemented in the base `UrlMatcher`. Yep there is a performance penalty when this matcher is used which is not the case even in debug mode with Sf2 (A cached matcher is used). I was not able to find a **simple** solution which would not impact the performance and fix tracing at the same time.\n\nIf you need a proof that the matchers are not used, this is commit number 5 which fixes a bug in one of them. (I have to check if this should be applied to 2.0 as well).\n\nThe last commit is what I wanted to achieve: you can check the routing panel in the profiler when you intercept redirects and type a url without a trailing slash.\n\nTodo:\n- CS / phpDoc,\n- Fix broken tests,\n- Test broken things,\n- Test new features.\n\n@fabpot any feedback ?\n\nNotes:\n\nThe TraceableUrlMatcher [has a bug](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Routing/Matcher/TraceableUrlMatcher.php#L95) which should be fixed if commit 4 does not get merged. \n"
            },
            {
                "title": "[WIP][Profiler] Routing",
                "body": "former #3206 part 3 (depends on part 1 - #3280)\n\nThe goal of this PR is to fix #3264 by adding redirection infos on the router panel.\n\nDone:\n- Add info on the target url / route\n\nTo do:\n- Display an accurate URL matching process (when using the RedirectableUrlMatcher)\n"
            },
            {
                "title": "[Profiler] Provide a common infrastructure",
                "body": "former #3206 part 3\n- base JS (provides ajax, toggle, css class helpers),\n- panel pages (used only by the Doctrine panel for now).\n\nSuccessfuly tested with the (future version of the) Doctrine panel.\n"
            },
            {
                "title": "[WebProfilerBundle] Some cleanup",
                "body": "former #3206 part 1 (misc cleanup)\n"
            },
            {
                "title": "[2.3][Enhancement][WIP] Cachebundle",
                "body": "Bootstrap the cache bundle based on the [LiipDoctrineCacheBundle](https://github.com/liip/LiipDoctrineCacheBundle) with the help of @lsmith77\n\nThis is the second part required for #1513 with the [CacheComponent](https://github.com/symfony/symfony/pull/3211)\n\nTodo:\n- Add functionalities,\n- Add tests,\n- Make use of the cache component (under development),\n- Modify other Bundles to leverage this bundle,\n- Write docs\n\nPull Requests / feedback / comments welcomed !\n"
            },
            {
                "title": "[Profiler] Allow profiling the terminate event",
                "body": "![Travis](https://secure.travis-ci.org/vicb/symfony.png?branch=profiler.terminate)\n\nThis PR is mainly about allowing to profile the terminate event (i.e. see it in the timeline panel)\n\nThere are some other tweaks.\n"
            },
            {
                "title": "[FrameworkBundle] Code factorization in TraceableEventDispatcher",
                "body": ""
            },
            {
                "title": "WIP[Profiler] Drop the routing panel",
                "body": "@fabpot, @stof what about removing the [Routing collector](https://github.com/symfony/symfony/commit/b46114a0f67da3338aa6728f33d20fb11c4da59c#commitcomment-904535) ?\n\nI have create a [base js script](https://github.com/vicb/symfony/pull/new#diff-12) to be re-used across panels (and for the toolbar).\n\n@stof could you doctrine panel depends on Sf2.1 ?\n"
            },
            {
                "title": "[WebProfilerBundle] Improve the logger panel",
                "body": "No more need to hit 'refresh'\n"
            },
            {
                "title": "[Profiler] Stopwatch related tweaks",
                "body": "- Some fixes in the stopwatch logic,\n- Some JS fixes,\n- Make use of modern JS.\n"
            },
            {
                "title": "[HttpKernel] Minor fixes in the Stopwatch",
                "body": "Not a breakthrough, fixing `'0'` handling at 2 places, some re factoring (fluid interface) \n"
            },
            {
                "title": "Improve vendors script",
                "body": "[![Build Status](https://secure.travis-ci.org/vicb/symfony.png?branch=vendor)](http://travis-ci.org/vicb/symfony)\n\nWe are not interested in vendors history while testing, are we ?\n\nTravis build are 5min faster after this change (7->2mn) and I guess the worker is happier.\n\nWell not so sure about the  5mn faster  any more... Travis seems to have changed its mind afterward but faster anyway.\n"
            },
            {
                "title": "[TwigBridge] Improve test coverage",
                "body": "related to https://github.com/fabpot/Twig/issues/580\n\n[Travis is happy](http://travis-ci.org/#!/vicb/symfony/builds/484594) but it seems he doesn't like branch name with `/` when displaying status images.\n\nIt could have been submitted against 2.0 but there is an issue here: the bridge is tied to Twig so that would mean testing against every single Twig version shipped with 2.0 which I don't want.\n\nI have  solved  the issue by ensuring that Twig version is at least 1.5.0 in the tests set up. This is not a perfect solution but I can not imagine something better for now.\n"
            },
            {
                "title": "[TwigBridge] Improve test coverage",
                "body": "related to https://github.com/fabpot/Twig/issues/580\n"
            },
            {
                "title": "[DomCrawler] Support for multivalued fields",
                "body": "This is a tentative fix for #1579 by @kriswallsmith, also see #3012 for more info.\n\nAny feedback is appreciated.\n"
            },
            {
                "title": "[DomCrawler] Some cleanup & 1 bug fix",
                "body": ""
            },
            {
                "title": "quick review",
                "body": "I'll check more deeply later today (there are still some inconsistencies)\n"
            },
            {
                "title": "Template locator/exception message",
                "body": "Bug fix: no\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\n\nImprove the error message to include the error message from the File Locator which is more accurate : the File Locator might also look in some fallback folder(s) (i.e.  `%kernel.root_dir%/Resources`)\n"
            },
            {
                "title": "[Routing] Allow to import multiple resources ",
                "body": "This change [has been requested](https://github.com/FriendsOfSymfony/FOSRestBundle/issues/12) by @lsmith77 and @merk for the FosRestBundle.\n\nMultiple resources can be imported at once, see [xml](https://github.com/vicb/symfony/pull/new/router/load-resources#L5R8) and [yml](https://github.com/vicb/symfony/pull/new/router/load-resources#L6R2) examples in the tests. \n_(The xml files is probably not the best example as you would probably remove the attribute and use child nodes only when importing multiple resources - being able to use both is required to keep BC)_.\n\nThis change is BC.\n"
            },
            {
                "title": "[SecurityBundle] Fix autoloading in tests",
                "body": "autoload.php should override autoload.php.dist when it exists\n"
            },
            {
                "title": "[HttpKernel] Simplify test code",
                "body": "Get the `$request` from the client (removes a hack in test kernel)\n"
            },
            {
                "title": "[FrameworkBundle] Fix for setting a custom file link format (fixes #1652)",
                "body": "[FrameworkBundle] Fix for setting a custom file link format (fixes #1652)\n"
            },
            {
                "title": "[Routing] Allow multiple `@Route` annotations with a default name",
                "body": "[Routing] Allow multiple `@Route` annotations with a default name on a single method (fixes #1647)\n\nBefore this change, the default name would be the same for multiple `@Route` with a default name on the same method. Then only the last declared route is active.\n\nThe defaults names are (for consecutive `@Route`s):\n- former_default,\n- former_default_1,\n- former_name,\n- former_default_2,\n- ...\n\nThe FrameworkExtraBundle needs to be updated in sync with this PR: https://github.com/sensio/SensioFrameworkExtraBundle/pull/50\n"
            },
            {
                "title": "[Form] Translation",
                "body": "The first commit adds the ability to customize the default message when the form is invalid:\n- Make it an option in the form builder,\n- Allow placeholders in the message,\n- The default value `This value is not valid` exists in the translation files.\n\nThe second commit updates a source string in the XLIFF files to make it translatable. All translations should be updated accordingly. The source string is from the [default validator](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Form/Extension/Core/Validator/DefaultValidator.php#L27).\n\nThis PR should fix The issue #997.\n"
            },
            {
                "title": "[HttpFoundation] code factorization in UploadedFile",
                "body": "As both #1542 and #1544 have been merged.\n"
            },
            {
                "title": "[HttpKernel] Add support for 'upload_max_filesize' ini directive",
                "body": "[HttpKernel] Add support for 'upload_max_filesize' ini directive in the Client\n\n**This PR depends on #1542**\n\nThis PR prevent the SW Client from uploading files larger than the limit set in php.ini to closer mimic a real browser usage.\n\nIf both PR eventually gets merge `static protected function getMaxUploadFilesize()` should probably be factorized to the UploadedFile class.\n"
            },
            {
                "title": "[Validator] FileValidator support for uploaded files",
                "body": "[Validator] Consider the ini directive 'upload_max_filesize' while validating an uploaded file (fixes GH-1441)\n\nAdded validator messages should get translated in all the available languages.\n"
            },
            {
                "title": "[Form] Fix the default validator",
                "body": "When php.ini has an empty value for post_max_size\n`post_max_size =`\n\nsee http://fr2.php.net/manual/en/function.ini-get.php\n\npost_max_size can not be false as it has a default value\n"
            },
            {
                "title": "Remove useless code",
                "body": "This PR is about removing useless code which could benefit to perfomances.\n\nCredits go to [Jordi](https://github.com/symfony/symfony/commit/000229dbd0d161f1eebe) for this.\n\nAs a minor modif, I can understand if this could not be merged while in RC.\n"
            },
            {
                "title": "[Form csrf] FileTypeCsrdExtension is not required any more",
                "body": "FileType now extends FieldType.\n"
            },
            {
                "title": "[To Be Discussed][Form] Render prototypes as hidden nodes.",
                "body": "This is a proposal for solving the issue #1497 (rendering of nesting prototypes).\n\nOpening it mainly to track discussion, it should be discussed before a decision is taken **(This PR breaks BC)**\n\nThe problem is sovled by rendering prototype in a container with `style= display: none; `.\n\nThe former prototype key `$$name$$` has been changed for `-prototype-` in order to generate valid markup ('$' are not allowed in xHTML). The leading and trailing '-' have been added to prevent name collision.\n\nSome explanation on the structure of the `prototype_row` block in the table layout:\nhttp://stackoverflow.com/questions/2292947/help-with-html-validation-error-table-column-has-no-cells-beginning-in-it.\n\nSo any feedback ?\n"
            },
            {
                "title": "[DoctrineBundle] Made the memcache instance service private",
                "body": ""
            },
            {
                "title": "Coding Standards: order methods according to their visibility",
                "body": "nothing more than moving methods around to conform to the CS\n"
            },
            {
                "title": "[FrameworkBundle][Form] tweak the choice widget PHP template",
                "body": "- make theming easier,\n- factorize code,\n- make PHP similar to Twig (easier to maintain)\n"
            },
            {
                "title": "[2.1] RFC [Form] Php theming",
                "body": "This PR implements theming support for the php engine.\n\nIt works similarly as the twig theming with themes being folders and blocks being individual files.\n\nThere are probably a few things to tune before this can get merged:\n### Theme naming\n\nThe current format is  <Bundle>:<Controller>  i.e.  FrameworkBundle:Form .\n\nIs this ok or could you imagine something better ?\n### Div and Table theme folders\n\nCurrently  FrameworkBundle\\Resources\\views\\Form  and  FrameworkBundle\\Resources\\views\\FormTable \n\nIs this ok or anything better ?\n### Form helper configuration\n\nI am not sure if the configuration is at the best possible location:\n\n```\nframework:\n    templating:\n        form:\n            resources: [themeA, themeB]\n```\n\nAny better idea ?\n\nThere is a [thread on the ml](http://groups.google.com/group/symfony-devs/browse_thread/thread/9b3f131fe116b511)\n"
            },
            {
                "title": "[TwigBundle] Fix configuration",
                "body": ""
            },
            {
                "title": "[Form] Some refactoring of the rendering",
                "body": "# First two commits\n## FormExtension::render() can now be called recursively.\n\nThe main use case is theming support in for collections. Let's consider that you have a collection of `CustomType`, the type hierarchy while rendering the proto would be `field < form < custom < prototype`. Before this change any theme applied to your custom type (i.e. a `custom_row` block) would not have been taken into account while rendering the prototype because of the structure of the `prototype_row` block:\n\n``` html\n{% block prototype_row %}\n{% spaceless %}\n    <script type= text/html  id= {{ proto_id }} >{{ block('field_row') }}</script>\n{% endspaceless %}\n{% endblock prototype_row %}\n```\n\nwhich skip the `custom_row` block rendering to fallback to the `field_row` block rendering.\n\nWith this PR `prototype_row` recursively calls `FormExtension::render()`\n\n``` html\n{% block prototype_row %}\n{% spaceless %}\n    <script type= text/html  id= {{ proto_id }} >{{ form_row(form) }}</script>\n{% endspaceless %}\n{% endblock prototype_row %}\n```\n\nthis has for effect to render the block for the parent type (i.e. `custom_row`)\n## FormHelper\n\nThe `FormHelper` has been updated to more closely match the `FormExtension` architecture and the templates have been modified accordingly. `echo $view['form']->renderBlock(<block name>)` is the php equivalent of `{{ block(<block name>) }}`.\n\nThe attributes are now rendered using a template rather than by the `FormHelper::attributes()` method.\n\nSeveral templates have been fixed.\n# Third commit\n\nThe `$varStack` property was used to forward options to the label and the widget when rendering a row. The implementation was not working as expected. The proposed way to override label and widget options is to pass these options in the `label` and `widget` keys while callinf `render_row`.\n\nThat would be:\n`{{ form_row(form.field, { attr : {<row attributes>},  label  : { label : <text>,  attr : {<label attr>}},  widget  : {  attr  : {<widget attributes}} } }}`\n\nSo there is now the ability to set attributes for the row (`<div>` or `<tr>`).\n\nThis has been discussed on [the mailing list](http://groups.google.com/group/symfony-devs/browse_thread/thread/17754128ba480545). **I would like to find a compromise with @Seldaek before this gets merged**\n\nThe `$varStack` property is now only used when recursively calling `FormExtension::render()`\n# Notes\n\nI have preferred to submit several commits in order to ease review and to keep some history.\n"
            },
            {
                "title": "[DependencyInjection] Fix a typo",
                "body": ""
            },
            {
                "title": "[HttpKernel] Fix randomly failing tests",
                "body": "Response time comparison causes tests to fail randomly.\n\n```\n\n1) Symfony\\Tests\\Component\\HttpKernel\\HttpKernelTest::testHandleWhenNoControllerIsAStaticArray\nFailed asserting that two objects are equal.\n--- Expected\n+++ Actual\n@@ @@\n                         (\n-                            [0] => Tue, 14 Jun 2011 19:56:20 GMT\n+                            [0] => Tue, 14 Jun 2011 19:56:21 GMT\n                         )\n```\n"
            },
            {
                "title": "[HttpFoundation] Make File extends \\SplFileInfo",
                "body": "This is a rebased version of [PR 674](https://github.com/symfony/symfony/pull/674).\n- File: The API has changed (now extends \\SplFileInfo),\n- File: move() creates the target directory when it does not exist\n- UploadedFile: introduction of getClientXXX() methods (for Size, OriginalName, MimeType)\n\nIf this PR does not get merged UploadedFile should at least be fixed: [Client.php](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpKernel/Client.php#L124) relies on a last parameter which is no more defined and which is used to bypass [move_uploaded_file()](https://github.com/symfony/symfony/blob/master/src/Symfony/Component/HttpFoundation/File/UploadedFile.php#L155) in test mode.\n\nIf this could be merged, I'll detail the changes in UPDATE.md\n"
            },
            {
                "title": "[Validator] some tweaks and phpDoc",
                "body": ""
            },
            {
                "title": "[Form] Make the prototype view child of the collection view",
                "body": "This PR should be a base for discussion.\n\nThe [current implementation](https://github.com/symfony/symfony/pull/1188) has some drawbacks because the prototype view is not a child of the collection view:\n- The 'multipart' attribute is not propagated from the prototype to the collection,\n- The prototype view do not use the theme from the collection.\n\nThose 2 points are fixed by the proposed implementation and one more benefit is that the template markup might be easier to work with:\n\nbefore:\n\n``` html\n<div id= form_emails >\n  <div>\n    <label for= form_emails_0 >0</label>\n    <input type= email  id= form_emails_0  name= form[emails][0]  value= a@b.com >\n  </div>\n  <script type= text/html  id= form_emails_prototype >\n    <div>\n      <label for= $$name$$ >$$name$$</label>\n      <input type= email  id= $$name$$  name= $$name$$  value=   />\n    </div>\n  </script>\n</div>\n```\n\nafter:\n\n``` html\n<div id= form_emails >\n  <div>\n    <label for= form_emails_0 >0</label>\n    <input type= email  id= form_emails_0  name= form[emails][0]  value= a@b.com >\n  </div>\n  <script type= text/html  id= form_emails_prototype >\n    <div>\n      <label for= form_emails_$$name$$ >$$name$$</label>\n      <input type= email  id= form_emails_$$name$$  name= form[emails][$$name$$]  value=   />\n    </div>\n  </script>\n</div>\n```\n\n@kriswallsmith I'd like to get your feedback on this PR. thanks.\n"
            },
            {
                "title": "[TwigBundle] Optimize the FilesystemLoader",
                "body": "-  `findTemplate()` will most likely be called with the template logical name. In such a case this is a waste of time to call `parse()` and `getLogicalName()`;\n- use `$cache[]` from the base `\\Twig_Loader_Filesystem`.\n"
            },
            {
                "title": "[Form] Fix rendering using twig",
                "body": "The issue being fixed is described here:\nhttps://github.com/symfony/symfony/pull/1188\n\nThe [first commit](https://github.com/vicb/symfony/commit/8677aa3dce03e3633d272054e9c5d153aee9cf86) is the one fixing the issue. The main idea is to first compute the list the blocks that should be used to render a particular view and pass the list of block when [rendering the block from the twig template](https://github.com/vicb/symfony/commit/8677aa3dce03e3633d272054e9c5d153aee9cf86#L0R236).\n\nNotes:\n- Blocks are looked in this order: themes from the current view, themes from the parent view up to the root view and then extension resources;\n- there is no more need to `extends` or `use` a base template in a theme - the docs should be updated accordingly if this PR gets merged;\n- any template can be used to call `renderBlock` as the only thing who cares is the list of blocks.\n\nThe [second commit](https://github.com/vicb/symfony/commit/9135f963db9d59d0785808a9cf7c22d2cfd4384d) is an attempt to optimize the cache layer by making `getTemplates()` recursive. The previous cache was only helpful while rendering different section (label, widget, errors) of a single view. \n\nThe [third commit](https://github.com/vicb/symfony/commit/b19052f8797d13a0ca6700c7c7f057dfb7fe0585) further improves the cache by caching blocks rather than templates.\n"
            },
            {
                "title": "[Form] Twig theme inheritance",
                "body": "Before this change nested view themes would have been overriden by parent view themes.\n"
            },
            {
                "title": "[Form] A few rendering fixes",
                "body": "See details in the commit messages when needed.\n"
            },
            {
                "title": "[Form] Fix collection rendering",
                "body": "1. Labels `for` attributes should point to a valid [form control](http://www.w3.org/TR/html-markup/label.html#label) so the `for` attributes has been removed for the collection main label (twig & php).\n2. Fix `collection_row` (php only).\n"
            },
            {
                "title": "[Form] A proposal to fix the form rendering",
                "body": "This PR is my proposal to fix the form rendering.\n\nHow it works:\n- A view is considered rendered when the associated  row  or  widget  section has been rendered,\n- if all the children views have been rendered, the view is considered as rendered.\n\nThe second bullet causes a change in beviahor: if you have a repeated form and you render the widget individually, `form_rest` would not render the labels any more. The same thing when you have a file form and render all the nested fields individually (that's `file`, `token`, `name` & `originalName`) then the file widget `<div>` would not be rendered.\n\nThis new behavior is intended as you should have taken care of the markup (labels, div, ...) when rendering the fields individually.\n\nSome unit test from @stloyd have been reused to improve the coverage. They have been slighty modified to take into account the change in behavior.\n\nThe [original tests](https://github.com/stloyd/symfony/commit/66d1a6150eb0cd29b698eeac759958ba8427c4f3#L3R264) were expecting the labels to be rendered for a repeated field. The [modified tests](https://github.com/vicb/symfony/commit/c2b9061559a12adc9ecd5dc92f3b8f9b9034aca1#L0R263) expects them not to be rendered.\n"
            },
            {
                "title": "[Form] A rendering fix + tweaks",
                "body": "- Fix for issue #1157,\n- Some code & doc tweaks\n"
            },
            {
                "title": "[Twig][Form] Optimize form rendering",
                "body": "Implement a template cache to speed up rendering when using twig:\n- per view cache,\n- cache is resetted when a theme is added.\n"
            },
            {
                "title": "[Form] Fix for nested forms getting erroneously set as rendered",
                "body": "This is a fix for [issue #779](https://github.com/symfony/symfony/issues/779) reported by @brikou\nI believe this is the proper this for [PR #1012](https://github.com/symfony/symfony/pull/1012) submitted by @ericclemmons\n\nSome details on the fix can be found in eric's PR.\n"
            },
            {
                "title": "[Form] Tweak the field type",
                "body": "- Remove 2 calls to `$form->getName()`\n- Taking advantage of the view fluid interface\n"
            },
            {
                "title": "[Form] Improve CSRF",
                "body": "CSRF options should be declared in the csrf extension:\n\nPros:\n- That the way it should be;\n- Avoid misleading options in base types,\n\nCons:\n- small impact on perf\n"
            },
            {
                "title": "[Form] CS related changes",
                "body": " Cosmetic  part of the former [PR 924](https://github.com/symfony/symfony/pull/924)\n"
            },
            {
                "title": "[Form] Implement a fluid interface FormView",
                "body": " Real  part of the former [PR 924](https://github.com/symfony/symfony/pull/924)\n"
            },
            {
                "title": "[Form] Optimization of the PropertyPath class",
                "body": "The most interesting part is `readPropertyPath` and `writePropertyPath`:\n- Recursion has been removed in favor of a simple for loop (saves cycles + mem),\n- Saves 1 call to is_object,\n- Initialize property only when required (array case)\n"
            },
            {
                "title": "[Form] phpDoc",
                "body": ""
            },
            {
                "title": "[Form] Fluid interface for the view",
                "body": "It also contains some CS related changes\n"
            },
            {
                "title": "[Form] A few small fixes",
                "body": ""
            },
            {
                "title": "[Form] More phpDoc & CS",
                "body": "- Add & fix some phpDoc,\n- Fix method ordering (according to their visibility),\n- Misc CS fixes\n\n_(@stof this should fix all the method ordering issues you mentioned yesterday)_\n"
            },
            {
                "title": "[Form] A few small fixes",
                "body": ""
            },
            {
                "title": "[Form] Some fixes in transformers",
                "body": "- phpDoc,\n- CS,\n- catch more exceptions (i.e. when creating File instances, getting list choices)\n- throw component specific exceptions (rather than SPL exceptions) for consistency\n"
            },
            {
                "title": "[Form] Make TimezoneChoiceList implement ChoiceListInterface rather than ",
                "body": "There is no added value in extending the ArrayChoiceList class here.\n\nImplementing ChoiceListInterface make the code simpler.\n"
            },
            {
                "title": "[Form] Make the interface more fluid",
                "body": ""
            },
            {
                "title": "[Form] fix and add some phpDoc",
                "body": "The greatest part of this PR is only about phpDoc.\n\nThere are also:\n- a few changes to conform to the CS,\n- changes in the type of exception (to use the exception from the Form component rather than generic SPL exception - this is to conform with the rest of the Form code)\n\nLet me know if this PR is ok.\n"
            },
            {
                "title": "[Form] fix and add some phpDoc",
                "body": "The greatest part of this PR is only about phpDoc.\n\nThere are also:\n- a few changes to conform to the CS,\n- changes in the type of exception (to use the exception from the Form component rather than generic SPL exception - this is to conform with the rest of the Form code)\n\nLet me know if this PR is ok.\n"
            },
            {
                "title": "[Form] Do not set the value attribute for file inputs",
                "body": "Fix http://trac.symfony-project.org/ticket/9731\n"
            },
            {
                "title": "[Form] Allow for arbitrary keys in PaddedChoiceList",
                "body": "With the form code:\n\n`array('a' => 'C')` would generate `<option value='C'>C--</option>`\n\nit now generates\n\n`<option value='a'>C--</option>`\n\n@bschussek is this valid ?\n"
            },
            {
                "title": "[Form] tweaks - WIP",
                "body": "Some tweaks in the Form class (& interface).\n\nThis is mostly phpDoc & some trivial tweaks.\n\nNot sure if this is a good idea to merge it now (lot of code has been moved to group methods in a more logic way) so some pending PRs might get harder to merge.\n\nAn other solution would be to merge this later (I would help with rebasing then).\n\n**Changes**\n- Add and tweak phpDoc,\n- Fix CS,\n- ChoiceList: \n  - `MonthChoiceList` now accepts a `\\Closure` to generate the choices (unit tested)\n  - `TimezoneChoiceList` implements `ChoiceListInterface` instead of extending `ArrayChoiceList`\n- DataMappers:\n  - some `\\InvalidArgumentException` have been converted to `UnexpectedTypeException`\n  - throw some more `TransformationFailedException` (i.e. when `$choiceList->getChoices()` fails)\n  - outer exceptions get the code from the inner exception\n  - add & tweak unit tests\n  - enforce timezone format (string)\n  - handle cases where a timezone is not supported (throw a `TransformationFailedException`)\n- Form\n  - more properties get initialized at declaration time,\n  - `bind()` and `bindRequest()` have a fluid interface,\n- FormView:\n  - `$parent` defaults to `null` in `setParent()` to simplify some code in the `Form` class\n\n**todo list**\n- DONE (Kris) set default values in the constructor for Form (vs declaration),\n- DONE (Bernhard) revert `for (--)` to `foreach` \n\n**Discussion on the ml**\n[This thread](http://groups.google.com/group/symfony-devs/browse_thread/thread/f3545c30059d4346)\n"
            },
            {
                "title": "[TemporaryStorage] Add a size argument & ability to configure this in the FrameworkBundle",
                "body": "ref: http://trac.symfony-project.org/ticket/9747 \n\nThe default max size is set to 500MB.\n\nThe default ttl is set to 1h\n"
            },
            {
                "title": "[HttpFoundation] Sanitize uploaded file original name",
                "body": "@fabpot could you please re-consider this ?\n\nIt has been [closed once](https://github.com/symfony/symfony/pull/666)\n\n**HOWEVER**\n\nIt is true that it does not make the situation perfect but invalid chars would cause an exception while not using `basename()` could be a security issue (i.e. replacing a system file, altering or adding a file in the web folder).\n\nAnd adding a comment on the method [is not always enough](https://github.com/symfony/symfony-docs/pull/245)\n"
            },
            {
                "title": "tweaks (drop \\Closure)",
                "body": "This PR is an update of https://github.com/symfony/symfony/pull/682 with more explanation.\n\nWhy this change ?\nFrom [php.net](http://fr.php.net/manual/en/functions.anonymous.php): Anonymous functions are currently implemented using the Closure class. This is an implementation detail and should not be relied upon.\n\nI do not think that Closure have been blindly replaced: most of the time using `is_callable($closure)` over a Closure is fine but `$closure` might be a function name (` myFunc ` or ` Foo::myMethod `) in which case this is not equivalent. I think that the problematic spots have been handled.\n\nObjects with an [__invoke](http://fr.php.net/manual/en/language.oop5.magic.php#language.oop5.magic.invoke) magic method are by definition callable.\n"
            },
            {
                "title": "tweaks",
                "body": "This one is for @kriswallsmith !\n\nMainly removing references to \\Closure.\n\nThe tricky one was VariableNode::getDefaultValue() which can accept 'Controller::Action' which is not a cb.\n"
            },
            {
                "title": "[Form] tweak",
                "body": ""
            },
            {
                "title": "[HttpFoundation] Make File extends \\SplFileInfo",
                "body": "This change makes File extends \\SplFileInfo which I think is good for consistency and make use of well tested PHP functions.\n\nSome highlights:\n- The API has changed (using methods from \\SplFileInfo),\n- move() returns a new class representing the target file - this is probably the change which has the greater impact\n- move() creates the target directory when it does not exist\n- New class hierarchy: `\\SpfFileInfo < File < UploadedFile < PersistedFile`\n- introduction of getClientXXX() methods (for Size, OriginalName, MimeType)\n"
            },
            {
                "title": "File & UploadedFile tweaks",
                "body": ""
            },
            {
                "title": "SECURITY [UploadedFile] Sanitize filename ",
                "body": "The fix is:\nadding a `basename()` call to `$this->originalName = basename($originalName);`\n"
            },
            {
                "title": "Make casting scalar to array consistent",
                "body": "This is a fixed version of https://github.com/symfony/symfony/pull/657\n\nMany thanks to @Seldaek for pointing some potential issues (which have lead to 2 fixes).\n"
            },
            {
                "title": "Make casting scalar to array consistent",
                "body": "This change is mainly for consistency across the source code.\n\nI have measured the proposed implementation to be 5 times faster than the previous one with PHP 5.3.3 whether the initial value is already an array or not (of course this will be diluted and we can not expect any perf improvement)\n"
            },
            {
                "title": "A few tweaks",
                "body": ""
            },
            {
                "title": "[Cache warmers] Templating & twig code factorization",
                "body": "The change introduces a new TemplateFinder class which is used by both the templating and twig cache warmers. Benefits:\n- Code re-use,\n- The template list is cached in the TemplateFinder and the filesystem does not have to be parsed twice.\n"
            },
            {
                "title": "[WebProfilerBundle] Sort tables by key name",
                "body": "@fabpot thanks for the tip !\n"
            },
            {
                "title": "[Cache warmers] Dependency resolution ",
                "body": "Change the priority mechanism to a more explicit dependency resolution mechanism.\n\nfrom UPDATE.md:\n\nThe cache warmer warm-up order is no more dictated by an absolute priority.\nA dependency resolution algorithm is used to warm-up the warmers in the correct\norder. The getName(), getPreWarmers() and getPostWarmers() methods have been\nadded to the CacheWarmerInterface and must be implemented in each warmer.\nThe CacheWarmerAggregate class has been renamed to CacheWarmerManager.  \n"
            },
            {
                "title": "[AsseticBundle] Fix the cache warmers - needs Kris review & approval",
                "body": "Trying to fix http://trac.symfony-project.org/ticket/9662\n\nThis is for @kriswallsmith to review\n\nThe issue:  The assetic cache warmer has a dependency ... on the templating cache warmer \n\nSolved by injecting the container in place of the asset manager in the constructor which allow for retrieving the asset manager only when needed in the warmUp() method.\n\nOther considerations:\n- The template warmer should run first (it is given a priority of 20)\n- The assetic cache warmer should run after the template warmer but before the router warmer (it keeps its priority of 10)\n- The router warmer has a default priority of 0\n"
            },
            {
                "title": "Service event tests",
                "body": "As requested in https://github.com/symfony/symfony/pull/582\n"
            },
            {
                "title": "[ContainerAwareEventDispatcher] RFC - fixing a bug with service event & scope",
                "body": "I would like to hear your comments about this PR:\n\n[cc89d4b](https://github.com/vicb/symfony/commit/cc89d4b1a52695cf50de49635dcd651494e9e653) fixes an issue when a scoped service is used as a listener and you re-enter the same scope - see the unit test for details.\n\n[6ae61eb](https://github.com/vicb/symfony/commit/6ae61eb9ffa310ab9c1fa309d5d801dcf1138f6e) adds some optimization by calling `addListener` only when required as this call could be time consuming (need to re-sort events, ...)\n\nSome [reference](https://github.com/symfony/symfony/commit/4e047b5e27af0a87ec188e78be04ff2e9f42f4b9#L1L45)\n"
            },
            {
                "title": "Factorization in the template cache warmers (fmwk & twig)",
                "body": "It now the responsability of the `TemplatePathsCacheWarmer` to build the list of all the templates. The cache warmer of twig only uses this list.\n\nChoosing composition over inheritance allow for caching the template list and the filesystem does not have to be parsed twice (even if cache warmer performances are not critical)\n"
            },
            {
                "title": "[FrameworkBundle] The $currentPath argument is not used for locating temp",
                "body": "[FrameworkBundle] The $currentPath argument is not used for locating templates\n"
            },
            {
                "title": "[FrameworkBundle] Fix an issue adding a scoped service as an event listener",
                "body": "The rationale is explained [here](https://github.com/symfony/symfony/commit/4e047b5e27af0a87ec188e78be04ff2e9f42f4b9#L1R80)\n"
            },
            {
                "title": "[Templating] Fix some issues (WIP)",
                "body": "Replaces [PR497](https://github.com/symfony/symfony/pull/497)\n\nI have submitted this PR to acknowledge that there are some issues and they are being fixed.\n**It is still a WIP**\n\nAddressed issues:\n- The templating path cache warmer now handle Bundle inheritance correctly,\n- The twig cache warmer use the template logical names (This is required for compiled templates getTemplateName() method)\n\nLeft to do:\n- Check the AsseticBundle cache warmer,\n- Try to factorize common code in a `TemplateCacheWarmer` base class (templating, twig, assetic),\n- Review the code and add some more unit tests\n\nI think this could be available some time next week but feel free to help if something is needed before.\n"
            },
            {
                "title": "Display template logical names in exception messages",
                "body": "- A few places were missed by the previous update,\n- taking advantage of `__toString()` == `getLogicalName()`\n"
            },
            {
                "title": "[HttpKernel] Fix the case where no resource is found",
                "body": "Thanks @weaverryan for [pointing this](https://github.com/symfony/symfony/commit/3cd3dd39ba727e930db0936eb7bba2dbef168143#L0L241)\n"
            },
            {
                "title": "[Templating] Fix some issues (WIP)",
                "body": "I have submitted this PR to acknowledge that there are some issues and they are being fixed.\n**It is still a WIP**\n\nAddressed issues:\n- The templaring path cache warmer now handle Bundle inheritance correctly,\n- The twig cache warmer use the template logical names (This is required for compiled templates getTemplateName() method)\n\nLeft to do:\n- This PR makes use of [PR 510](https://github.com/symfony/symfony/pull/510) from @hason which should be integrated when it is merged,\n- Check the AsseticBundle cache warmer,\n- Try to factorize common code in a `TemplateCacheWarmer` base class (templating, twig, assetic),\n- Review the code and add some more unit tests\n\nI think this could be available some time next week but feel free to help if something is needed before.\n"
            },
            {
                "title": "[Event] Better error detection",
                "body": "The dispatcher is too lazy to report errors early which is fixed in the TraceableEventDispatcher\n"
            },
            {
                "title": "[Kernel] Fix bundle inheritance",
                "body": "This prevents a stupid mistake (parentName = self)... and I know what I am talking about\n"
            },
            {
                "title": "[Templating] Fix for getting the file link format from XDebug settings",
                "body": "because [str_replace($from, $to, null)](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/DependencyInjection/FrameworkExtension.php#L326) returns an empty string\n"
            },
            {
                "title": "[WebProfilerBundle] Tweak the wdtb css",
                "body": ""
            },
            {
                "title": "[WDTB] Some tweaks",
                "body": "Improve CSS & the event panel.\n"
            },
            {
                "title": "[FrameworkBundle] Fix for getting the file link format fallback to XDebug",
                "body": "With the former code, the pattern would be [''](https://github.com/vicb/symfony/pull/new/file_link_format#L1L86) when no ide is specified in the configuration.\n\nThis is different from [null](https://github.com/symfony/symfony/blob/master/src/Symfony/Bundle/FrameworkBundle/Templating/Helper/CodeHelper.php#L32) resulting from the fallback to xdebug config not being used.\n"
            },
            {
                "title": "[FrameworkBundle] Fix the traceable event dispatcher",
                "body": "Fix the logs in case the propagation gets stopped\n"
            },
            {
                "title": "[FrameworkBundle] Delete .gitkeep files",
                "body": "I don't think those were useful, were they ?\n"
            },
            {
                "title": "[FrameworkBundle] Fix the cache template loader",
                "body": "This solves a bug triggered when the cache folder is set in the templating configuration.\n\ni.e. `<framework:templating assets-version= 123  cache= %kernel.cache_dir%/tmpl  >`\n\nTemplating\\CacheLoader was expecting a `Loader` instance where the `FilesystemLoader` only implements the `LoaderInterface`.\n"
            },
            {
                "title": "Locating resources",
                "body": "This PR is a cleanup version of https://github.com/symfony/symfony/pull/416\n## Description:\n\nThis PR implements resources inheritance in the custom Resources folder.\n\nGiven a child Bundle derived from a Parent Bundle and a app/Resources folder used to override resources:\n- ParentBundle/Resources/res.res\n- ChildBundle/Resources/res.res\n- app/Resources/ChildBundle/res.res\n\nA call to `locateResource('@Parent/Resources/res.res', '/path/to/app/Resources', false)` would return an array composed of 3 elements:\n- app/Resources/ChildBundle/res.res\n- ChildBundle/Resources/res.res\n- ParentBundle/Resources/res.res\n\nBefore this PR, it would have returned an array of 2 elements because only app/Resources/ParentBundle would have been inspected (and not app/Resources/ChildBundle): \n- ChildBundle/Resources/res.res\n- ParentBundle/Resources/res.res\n## New behavior:\n\nGiven:\n- ParentBundle/Resources/res.res\n- ChildBundle/Resources/res.res\n- app/Resources/ParentBundle/res.res\n\nA call to `locateResource('@Parent/Resources/res.res', '/path/to/app/Resources', false / true)` would throw an exception because app/Resources/ParentBundle/res.res is  hidden  by ChildBundle/Resources/res.res.\n\nThere is no way to guess which resource should be used between:\n- ChildBundle/Resources/res.res\n- app/Resources/ParentBundle/res.res\n\nThe right way to override a resource would be to move the custom resource in the app/Resources/ChildBundle folder (as described in the previous section).\n## Left to do:\n\nThis PR assumes that:\n- The bundle short name is used for the locateResource call,\n- The resources live in the app/Resources/[BundleName]**Bundle** folder\n\nThis PR should be tuned once a decision is taken on the bundle names. \n"
            },
            {
                "title": "[WebProfilerBundle] Make verbosity configurable",
                "body": "For those wanting a smaller wdtb, but configurable this time.\n"
            },
            {
                "title": "Introduction of a configuration base class",
                "body": "The base class would be the extension point for implementing the generation of XSD and documentation, see http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c/520f3220aa9f7596.\n\nThis change is backward compatible: you don't have to use the base class (current extensions would work without any changes).\n\nHowever introducing this change early will allow extension built on this to benefit from future extensions (XSD and doc generation, ...) when they are implemented.\n"
            },
            {
                "title": "[WebProfilerBundle] Fix a few typos",
                "body": ""
            },
            {
                "title": "[WebProfilerBundle] Fix a few typos",
                "body": ""
            },
            {
                "title": "[TwigBundle] Update the cache warmer",
                "body": "This changes reflects what has been done [on the template warmer](https://github.com/symfony/symfony/commit/a2294106fb8eee0f9cdb10bf9b190c52485bd551#src/Symfony/Bundle/FrameworkBundle/CacheWarmer/TemplatePathsCacheWarmer.php)\n\n*_This PR assumes that custom templates are stored in the app/Resources/BundleName/views *_\n\nNotes:\n- If think there are currently some problems with the template locator / warmer,\n- There should be some common code for handling template paths (across Framework, Twig, Assetic, ... bundles).\n\nSo this PR should be considered as a temporary fix before we have a better solution. I'll post my thoughts on the dev ml in the coming days. \n"
            },
            {
                "title": "Resource paths should use the full bundle name (with the 'Bundle' postfix)",
                "body": "I think it makes sense to keep to full bundle name for the resource folders:\n`<app>/Resources/HelloBundle/views/Hello/...`\n\nIt is more consistent with the Bundle directory structure.\n\nThere should probably be some tests for this, but there's a pending question for that: https://github.com/symfony/symfony/commit/5c905beb13624d40a768e6e9ea98cb873e149c6e#L104L306\n"
            },
            {
                "title": "There's one more thing",
                "body": "A new name... what else ?\n"
            },
            {
                "title": "[TwigBundle] Fix the cache warmer",
                "body": "related to http://groups.google.com/group/symfony-devs/browse_thread/thread/9dfd7cb158f33cbf\n"
            },
            {
                "title": "[Config] Component refactoring",
                "body": "This is a rebased version of https://github.com/symfony/symfony/pull/303\n\nThis should be merged as soon as someone can test the security configuration. You should exercize most of the options as building the tree is actually spread over several files (Configuration.php & *Factory.php)\n\nThe node register (proposed by Johannes in the original PR) will be implemented very soon as a separate PR (no BC).\n\nI can provide some support provided you ping me before Sunday or you will have to wait for 1 week.\n"
            },
            {
                "title": "[WDTB] Remove PHP config widget",
                "body": "The info does not vary across request and is available in the config panel.\n"
            },
            {
                "title": "[Config] Component refactoring, request for feedback",
                "body": "I have been working for some time on refactoring the configuration component.\n\nJohannes has given me a lot of constructive feedback and most of the issues he raised should have been addressed by now. This now time to show the code to the community to get even more feedback.\nJohannes still hasn't approved the current version and if he thinks this should not be integrated then I think this should not be integrated !\n\nThe ultimate goals were:\n- for me to understand the code,\n- have some fun with Sf2 code,\n- to make the code easier to understand,\n- to make it easily extendable (in the direction given by [by Lukas on the ml](http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c))\n\nI see [some benefits](http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c) of the current version (other than the ones listed right above):\n- You don't have access to a bunch a public properties any more (they are made protected in the definition classes),\n- Most logic errors will be caught at runtime rather than silently ignored ([Twig configuration](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#L14L116) is an example) i.e. :\n  \n  ```\n    ...->scalarNode('cache_warmer')\n          ->scalarNode('dummy')\n              ->requiresAtLeastOneElement()\n          ->end()\n      ->end()\n  ```\n- When using the auto-complete in your IDE, 'scalarNode' and 'requiresAtLeastOneElement' are not in the proposed choices. \n\nBut benefits rarely come for free:\n- The configuration files get a bit more verbose,\n- Some API breaks as described below,\n- ... ?\n\nThis change breaks some API but the conversion is easy and there is a 'migration guide' in the [commit message](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180).\nConverting a configuration files is really a matter of minutes.\nYou can take a look at [DoctrineBundle](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#diff-1), [TwigBundle](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#diff-14), [ZendBundle](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180#diff-15), ...\n\nI have already checked FrameworkExtraBundle, SecurityExtraBundle & UserBundle: the first two should literraly take no more than 20s to convert while the last one might require an extra minute.\n\nIf this eventually gets integrated in Sf2, I can help converting your configuration, drop me a message on github.\n\nSome references:\n- A discussion we had with Johannes on comparing [the current vs proposed imp.](https://gist.github.com/594c53c7b08503beb957)\n- The foreseen config extensions sum up by [Lukas on the ml](http://groups.google.com/group/symfony-devs/browse_thread/thread/724e97607d30dd8c)\n- The migration guide is in the [commit message](https://github.com/vicb/symfony/commit/523d7df21ae9cce3b62e22cdb4c717a618de9180)\n\nStill reading ? Any feedback ?\n\nThanks,\nVictor\n\nNotes:\n- I have not been able to fully validate the security configuration has I don't have a proper setup for this (exercizing all the options). This should be done (if && before) merging the code. \n- I think this is only a  small change  !\n- That is my longest ever PR message and commit message!\n"
            },
            {
                "title": "[Profiler] Liquid layout",
                "body": "Enlarge the profiler panels.\n"
            },
            {
                "title": "Nitpicking...",
                "body": ""
            },
            {
                "title": "Profiler again",
                "body": "See commit messages for details.\n\nI really like the visual feedback of the sf1 debug bar (changing the background color)... Fabien if really want this not to be integrated in sf2, I can remove it.\n"
            },
            {
                "title": "Profiler color",
                "body": "Also update [PR 134](https://github.com/symfony/symfony/pull/134)\n"
            },
            {
                "title": "[WebProfilerTemplate] Some improvements",
                "body": "See commit messages for (some) details\n"
            },
            {
                "title": "[Profiler & Exceptions] Use JS/CSS best practices",
                "body": ""
            },
            {
                "title": "Profiler: token not found page converted to the new design",
                "body": ""
            },
            {
                "title": "Profiler log design",
                "body": "Display the total number of log entries & highlight error count if any.\n"
            },
            {
                "title": "[Config] Some tweaks in the component",
                "body": ""
            },
            {
                "title": "Config - simplify the code",
                "body": ""
            },
            {
                "title": "[Kernel] Get rid of Kernel::registerRootDir()",
                "body": "The proposed implementation uses reflection in `Kernel::getRootDir()` instead.\n\nIf speed is really a concern, you still can override the default implementation of `getRootdir` to return `__DIR__`\n\nAlso add / fix some PHPDoc.\n"
            },
            {
                "title": "Templating",
                "body": "Simpler is better\n"
            }
        ]
    },
    "439196": {
        "repos": [
            "The Symfony2 PHP framework (PHP 5.3 only -- not yet stable) -- documentation for master is at http://docs.symfony-reloaded.org/master/"
        ],
        "commit_comments": [],
        "commits": [
            "[Validator] Allow Closure in Callback constructor",
            "[Validator] Property passing to callback method deleted",
            "[Validator] Allow Callback validator to be defined on property level\nIssue #2480",
            "[Validator] Missing unit tests for Callback validator",
            "[DoctrineBundle] Fix data:load command (--append w/o value)"
        ],
        "issue_comments": [
            "I'm not sure if we should pass property value to the method if the validator was defined on a property level...\n",
            "Sure thing\n",
            "@bschussek Unit tests done\n",
            "@stof Rebased\n",
            "@fabpot @stof There is one more feature to implement in this PR which I discussed with @bschussek at the hackday in Berlin. I believe I can finish it until Christmas but if necessary I can try to do it earlier.\n\nMarked as WIP.\n",
            "@bschussek I have a problem with setting the assertion on a method. Since the is no possibility to set it on any method (other than getter) I have to introduce new `MethodMetadata`.\n\nDo you accept this or have other idea how to do that? Maybe we also have to introduce another target in `Constraint` to prevent setting assertion directly on a property?\n",
            "I'm not sure if we should pass property value to the method if the validator was defined on a property level...\n",
            "Sure thing\n",
            "@bschussek Unit tests done\n",
            "@stof Rebased\n",
            "@fabpot @stof There is one more feature to implement in this PR which I discussed with @bschussek at the hackday in Berlin. I believe I can finish it until Christmas but if necessary I can try to do it earlier.\n\nMarked as WIP.\n",
            "@bschussek I have a problem with setting the assertion on a method. Since the is no possibility to set it on any method (other than getter) I have to introduce new `MethodMetadata`.\n\nDo you accept this or have other idea how to do that? Maybe we also have to introduce another target in `Constraint` to prevent setting assertion directly on a property?\n",
            "@hiroponz I agree. Imho the functionality must be reverted ASAP as it has not been tested enough.\n",
            "@jozefvaclavik And what about #3312? Supporting UTF-8 is imho critical.\n\n@bbodenmiller Sounds reasonably. I didn't know -- I'm not ruby guy;)\n",
            "Seems that git hosted wikis feature is not stable enough yet. \n\nAfter couple hours of debugging I found that neither `grit` (https://github.com/mojombo/grit/pull/161) nor `gollum` (https://github.com/gollum/gollum/issues/547) supports UTF-8 characters. There are problems with UTF-8 both in content and title of a page.\n\n@randx  I suggest reverting the feature to the old way (wikis persisted in the database) as soon as possible.\n",
            "I had the same problem. https://github.com/gitlabhq/gitlabhq/issues/3349#issuecomment-16428700 worked for me.\n",
            "I suggest OptionsSet or OptionSet as an alternative to OptionsBag which is a bit confusing with other Bags.\n",
            "I suggest OptionsSet or OptionSet as an alternative to OptionsBag which is a bit confusing with other Bags.\n",
            "I'll try to do it\n"
        ],
        "issues": [
            {
                "title": "[WIP] [2.2] [Validator] Allow Callback validator to be defined on property level",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/krymen/symfony.png?branch=issue-2480)](http://travis-ci.org/krymen/symfony?branch=issue-2480)\nFixes the following tickets: #2480\nTodo: -\n"
            },
            {
                "title": "[DoctrineBundle] Fix data:load command (--append w/o value)",
                "body": "Changed the <code>append</code> option in <code>doctrine:data:load</code> command to work without value.\n\nBefore:\n\n<pre>doctrine:data:load --append=true</pre>\n\n\nAfter:\n\n<pre>doctrine:data:load --append</pre>\n"
            }
        ],
        "pr_comments": [
            "`$object` on a property level validation is value of the property. I believe it can be different from simply calling `$this->property` in the `$method`.\n",
            "`$object` on a property level validation is value of the property. I believe it can be different from simply calling `$this->property` in the `$method`.\n",
            "`$object` on a property level validation is value of the property. I believe it can be different from simply calling `$this->property` in the `$method`.\n"
        ],
        "prs": [
            {
                "title": "[WIP] [2.2] [Validator] Allow Callback validator to be defined on property level",
                "body": "Bug fix: no\nFeature addition: yes\nBackwards compatibility break: no\nSymfony2 tests pass: [![Build Status](https://secure.travis-ci.org/krymen/symfony.png?branch=issue-2480)](http://travis-ci.org/krymen/symfony?branch=issue-2480)\nFixes the following tickets: #2480\nTodo: -\n"
            },
            {
                "title": "[DoctrineBundle] Fix data:load command (--append w/o value)",
                "body": "Changed the <code>append</code> option in <code>doctrine:data:load</code> command to work without value.\n\nBefore:\n\n<pre>doctrine:data:load --append=true</pre>\n\n\nAfter:\n\n<pre>doctrine:data:load --append</pre>\n"
            }
        ]
    },
    "502646": {
        "repos": [
            "The Symfony2 PHP framework"
        ],
        "commit_comments": [],
        "commits": [
            "changed code to improve performance",
            "removed an unnecessary condition check",
            "fixed HTML5 form attribute handling and added some tests",
            "fixed HTML5 form attribute handling XPath query"
        ],
        "issue_comments": [
            "@stof you were right, I extended it. is it ok now?\n",
            "@stof @jfsimon Done.\n",
            "@fabpot Done.\n",
            "I think this was fixed in #7500.\n",
            "@srcspider I don't see your point. `ownerDocument` is a reference to the whole document the given element is in, so it will search the whole document. (source: http://www.php.net/manual/en/class.domnode.php#domnode.props.ownerdocument)\n\nI also tried nesting the input elements into div tags both inside and outside the parent form but it worked for me.\n",
            "@srcspider Please provide a sample code which does not work for you.\n",
            "ping @srcspider \n",
            "@srcspider you have got the exception because Crawler object needs a base URI.\nTry `$crawler = new Crawler($html, 'http://example.com');`\nThis should fix the exception but there was a flaw in the form attribute handling indeed which I fixed now in #8197.\n",
            "+1 for the ability to remove deeper elements, but strictly without eval. :)\nWe could implementing the same `foo[bar]` syntax as in the get method or maybe change to the `foo.bar` syntax which is nicer and easier to implement IMO?\n",
            "Hi,\nI'm ready to work on this PR but first I need to clarify if it is still a valid feature request. I have found some articles which shows how to upload a single file (http://updates.html5rocks.com/2012/04/Processing-XHR2-file-uploads-in-PHP) or multiple files (https://github.com/Integralist/XHR2-Multiple-File-Upload--with-PHP-) using XHR2 but they are both posting the files inside a FormData object (not the JavaScript File object) which means $_FILES gets populated as it should.\nMy question is: is there a valid use case of using the File object instead of the more comfortable FormData?\n",
            "ping @Sorien @Antek88 @yoann-losbar @guillaumepotier @coma \n",
            "The spec says nothing about how to implement direct BLOB uploading on the server side (e.g. which HTTP header stores the filename, size, etc.) which makes this very client-side dependent. The original request was to populate the `FileBag` property, but my opinion is that this property should handle only files uploaded as part of a form and should not include a custom implementation of this XHR2 mechanism.\nBut if someone wants to use this feature, he/she should be able to use `$this->get( request )->getContent(true)` (instead of php://input) and handle the upload manually.\n",
            "I think this is the result of this commit: https://github.com/symfony/symfony/commit/163564b00905046faf0fe643665729cc43be0f24\n",
            "I'm working on it, it looks like a quick fix.\n",
            "I have installed the current symfony-standard but I was not able to reproduce the problem. I put the same as you into `security.yml` and \n\n```\nflow:\n    pattern:  /flow/checkout\n    defaults: { _controller: AcmeDemoBundle:Welcome:index }\n```\n\ninto `routing.yml` and opened `http://localhost/symfony-standard/web/app_dev.php/flow/checkout` in Firefox but it popped up a HTTP AUTH login window for me (never logged in before so it cannot be cached).\n",
            "I do not see the point why would you like to use a File object for a directory? The File object has helper methods which are only useful for files, such as guessExtension() and getMimeType()...\n",
            "Thanks for the feedback, I committed the changes.\n",
            "ok, so is my PR is useless or should I still fix problems?\n",
            "never squashed before, is it okay now? :)\n",
            "Finally I've made a working patch for that, I'll submit it as soon as I figure out how to submit a patch... ;)\n",
            "has a working PR, just needs review: #3551\n"
        ],
        "issues": [
            {
                "title": "[DomCrawler] fixed HTML5 form attribute handling",
                "body": "Fixed HTML5 form attribute handling and improved a test case to test more thoroughly\n\n| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6239 |\n| License | MIT |\n| Doc PR | no |\n"
            },
            {
                "title": "[Validator] updated Hungarian translation",
                "body": "updated and extended Hungarian translation\n"
            },
            {
                "title": "[DomCrawler] added support for HTML5 'form' attribute",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7486 |\n| License | MIT |\n| Doc PR |  |\n"
            },
            {
                "title": "[HttpFoundation] HTTP Basic authentication is broken with php-cgi under Apache",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1813\nTodo: -\n\nIn order to work, add this to the .htaccess:\n\nRewriteEngine on\nRewriteRule .\\* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ app.php [QSA,L]\n"
            }
        ],
        "pr_comments": [
            "Nope. I tried Firefox and it preserved form element order, so I wanted to implement the same way but I am not sure if it really matters. I can change it to a more efficient one if we decide order does not need to be preserved.\n",
            "I see your point but I think it tests the same thing (form attribute handling) just in two different ways.\n",
            "Nope. I tried Firefox and it preserved form element order, so I wanted to implement the same way but I am not sure if it really matters. I can change it to a more efficient one if we decide order does not need to be preserved.\n",
            "I see your point but I think it tests the same thing (form attribute handling) just in two different ways.\n",
            "Nope. I tried Firefox and it preserved form element order, so I wanted to implement the same way but I am not sure if it really matters. I can change it to a more efficient one if we decide order does not need to be preserved.\n",
            "I see your point but I think it tests the same thing (form attribute handling) just in two different ways.\n"
        ],
        "prs": [
            {
                "title": "[DomCrawler] fixed HTML5 form attribute handling XPath query",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | https://github.com/symfony/DomCrawler/commit/0a67c88e0eb408f24233775388cd8c3cca286c05#commitcomment-4120595 |\n| License | MIT |\n| Doc PR | no |\n\nThe XPath query used was not handling descendant form elements correctly, so I fixed it and added tests for it.\n"
            },
            {
                "title": "[DomCrawler] fixed HTML5 form attribute handling",
                "body": "Fixed HTML5 form attribute handling and improved a test case to test more thoroughly\n\n| Q | A |\n| --- | --- |\n| Bug fix? | yes |\n| New feature? | no |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #6239 |\n| License | MIT |\n| Doc PR | no |\n"
            },
            {
                "title": "[Validator] updated Hungarian translation",
                "body": "updated and extended Hungarian translation\n"
            },
            {
                "title": "[DomCrawler] added support for HTML5 'form' attribute",
                "body": "| Q | A |\n| --- | --- |\n| Bug fix? | no |\n| New feature? | yes |\n| BC breaks? | no |\n| Deprecations? | no |\n| Tests pass? | yes |\n| Fixed tickets | #7486 |\n| License | MIT |\n| Doc PR |  |\n"
            },
            {
                "title": "[HttpFoundation] HTTP Basic authentication is broken with php-cgi under Apache",
                "body": "Bug fix: yes\nFeature addition: no\nBackwards compatibility break: no\nSymfony2 tests pass: yes\nFixes the following tickets: #1813\nTodo: -\n\nIn order to work, add this to the .htaccess:\n\nRewriteEngine on\nRewriteRule .\\* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\nRewriteCond %{REQUEST_FILENAME} !-f\nRewriteRule ^(.*)$ app.php [QSA,L]\n"
            }
        ]
    },
    "106845": {
        "repos": [
            "jQuery JavaScript Library"
        ],
        "commit_comments": [],
        "commits": [],
        "issue_comments": [
            "jfyi: its the same without simple_forms e.g. regular forms, but I have no deep insight might be rails too, yes.\n",
            "neither brew install postgres --without-ossp-uuid nor brew install postgres working :/ (after patching the file)\n",
            "neither brew install postgres --without-ossp-uuid nor brew install postgres working :/ (after patching the file)\n"
        ],
        "issues": [
            {
                "title": "ccepts_nested_attributes_for, field_with_errors",
                "body": "Using accepts_nested_attributes_for :profile, on submit css classes 'field_with_errors' miss for the nested attributes (but the errors above and required star is shown)\n\nSimple setup: basic devise, exporting view to customize them, just add fields_for (or simple_fields for if within simple_form_for), in the user model add:\n\n  has_one :profile\n  accepts_nested_attributes_for :profile\n\n  def with_profile\n    self.build_profile\n    self\n  end\n\nand change the view's form builder call to\n<%= simple_form_for(resource, resource.with_profile, :as => resource_name, :url => registration_path(resource_name)) do |f| %>\n(see with_profile)\n\nthat way you get the build profile and can use\n  <%= f.simple_fields_for :profile do |builder| %>\n    <%= render 'profiles/form_fields', :f => builder %>\n  <% end %>\n"
            }
        ],
        "pr_comments": [],
        "prs": []
    }
}